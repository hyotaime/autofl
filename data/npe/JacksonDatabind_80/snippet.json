[
  {
    "name": "ReferenceProperty.ReferenceProperty#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty(com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type, java.lang.String)",
    "snippet": "public ReferenceProperty(Type t, String n) {\n            _type \u003d t;\n            _name \u003d n;\n        }",
    "begin_line": 79,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.managed#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.managed(java.lang.String)",
    "snippet": "public static ReferenceProperty managed(String name) { return new ReferenceProperty(Type.MANAGED_REFERENCE, name); }",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.back#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.back(java.lang.String)",
    "snippet": "public static ReferenceProperty back(String name) { return new ReferenceProperty(Type.BACK_REFERENCE, name); }",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.getType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.getType()",
    "snippet": "public Type getType() { return _type; }",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.getName#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.getName()",
    "snippet": "public String getName() { return _name; }",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isManagedReference#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isManagedReference()",
    "snippet": "public boolean isManagedReference() { return _type \u003d\u003d Type.MANAGED_REFERENCE; }",
    "begin_line": 90,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isBackReference#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isBackReference()",
    "snippet": "public boolean isBackReference() { return _type \u003d\u003d Type.BACK_REFERENCE; }",
    "begin_line": 91,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.nopInstance#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.nopInstance()",
    "snippet": "public static AnnotationIntrospector nopInstance() {\n        return NopAnnotationIntrospector.instance;\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "/** \n * Factory method for accessing \"no operation\" implementation of introspector: instance that will never find any annotation-based configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.pair#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public static AnnotationIntrospector pair(AnnotationIntrospector a1, AnnotationIntrospector a2) {\n        return new AnnotationIntrospectorPair(a1, a2);\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.allIntrospectors#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()",
    "snippet": "public Collection\u003cAnnotationIntrospector\u003e allIntrospectors() {\n        return Collections.singletonList(this);\n    }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Method that can be used to collect all \"real\" introspectors that this introspector contains, if any; or this introspector if it is not a container. Used to get access to all container introspectors in their priority order. \u003cp\u003e Default implementation returns a Singleton list with this introspector as contents. This usually works for sub-classes, except for proxy or delegating \"container introspectors\" which need to override implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.allIntrospectors#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors(java.util.Collection\u003ccom.fasterxml.jackson.databind.AnnotationIntrospector\u003e)",
    "snippet": "public Collection\u003cAnnotationIntrospector\u003e allIntrospectors(Collection\u003cAnnotationIntrospector\u003e result) {\n        result.add(this);\n        return result;\n    }",
    "begin_line": 144,
    "end_line": 147,
    "comment": "/** \n * Method that can be used to collect all \"real\" introspectors that this introspector contains, if any; or this introspector if it is not a container. Used to get access to all container introspectors in their priority order. \u003cp\u003e Default implementation adds this introspector in result; this usually works for sub-classes, except for proxy or delegating \"container introspectors\" which need to override implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.version#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.version()",
    "snippet": "@Override\n    public abstract Version version();",
    "begin_line": 156,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isAnnotationBundle#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isAnnotationBundle(java.lang.annotation.Annotation)",
    "snippet": "public boolean isAnnotationBundle(Annotation ann) {\n        return false;\n    }",
    "begin_line": 171,
    "end_line": 173,
    "comment": "/** \n * Method for checking whether given annotation is considered an annotation bundle: if so, all meta-annotations it has will be used instead of annotation (\"bundle\") itself.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findObjectIdInfo#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        return null;\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Method for checking whether given annotated thing (type, or accessor) indicates that values referenced (values of type of annotated class, or values referenced by annotated property; latter having precedence) should include Object Identifier, and if so, specify details of Object Identity used.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findObjectReferenceInfo#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        return objectIdInfo;\n    }",
    "begin_line": 200,
    "end_line": 202,
    "comment": "/** \n * Method for figuring out additional properties of an Object Identity reference\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findRootName#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public PropertyName findRootName(AnnotatedClass ac) {\n        return null;\n    }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "/** \n * Method for locating name used as \"root name\" (for use by some serializers when outputting root-level object -- mostly for XML compatibility purposes) for given class, if one is defined. Returns null if no declaration found; can return explicit empty String, which is usually ignored as well as null. \u003cp\u003e  NOTE: method signature changed in 2.1, to return  {@link PropertyName}instead of String.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyIgnorals#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonIgnoreProperties.Value findPropertyIgnorals(Annotated ac)\n    {\n        // 18-Oct-2016, tatu: Used to call deprecated methods for backwards\n        //   compatibility in 2.8, but not any more in 2.9\n        return JsonIgnoreProperties.Value.empty();\n    }",
    "begin_line": 234,
    "end_line": 239,
    "comment": "/** \n * Method for finding information about properties to ignore either by name, or by more general specification (\"ignore all unknown\"). This method combines multiple aspects of ignorals and deprecates earlier methods such as {@link #findPropertiesToIgnore(Annotated,boolean)} and{@link #findIgnoreUnknownProperties(AnnotatedClass)}.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isIgnorableType#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Boolean isIgnorableType(AnnotatedClass ac) { return null; }",
    "begin_line": 252,
    "end_line": 252,
    "comment": "/** \n * Method for checking whether properties that have specified type (class, not generics aware) should be completely ignored for serialization and deserialization purposes.\n * @param ac Type to check\n * @return Boolean.TRUE if properties of type should be ignored;Boolean.FALSE if they are not to be ignored, null for default handling (which is \u0027do not ignore\u0027)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findFilterId#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findFilterId(Annotated ann) { return null; }",
    "begin_line": 261,
    "end_line": 261,
    "comment": "/** \n * Method for finding if annotated class has associated filter; and if so, to return id that is used to locate filter.\n * @return Id of the filter to use for filtering properties of annotatedclass, if any; or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNamingStrategy#274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Object findNamingStrategy(AnnotatedClass ac) { return null; }",
    "begin_line": 274,
    "end_line": 274,
    "comment": "/** \n * Method for finding  {@link PropertyNamingStrategy} for givenclass, if any specified by annotations; and if so, either return a  {@link PropertyNamingStrategy} instance, or Class to use forcreating instance\n * @return Sub-class or instance of {@link PropertyNamingStrategy}, if one is specified for given class; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findClassDescription#287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String findClassDescription(AnnotatedClass ac) { return null; }",
    "begin_line": 287,
    "end_line": 287,
    "comment": "/** \n * Method used to check whether specified class defines a human-readable description to use for documentation. There are no further definitions for contents; for example, whether these may be marked up using HTML (or something like wiki format like Markup) is not defined.\n * @return Human-readable description, if any.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertiesToIgnore#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertiesToIgnore(com.fasterxml.jackson.databind.introspect.Annotated, boolean)",
    "snippet": "@Deprecated findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        return null;\n    }",
    "begin_line": 298,
    "end_line": 300,
    "comment": "/** \n * @param forSerialization True if requesting properties to ignore for serialization;false if for deserialization\n * @since 2.6\n * @deprecated Since 2.8, use {@link #findPropertyIgnorals} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertiesToIgnore#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertiesToIgnore(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated findPropertiesToIgnore(Annotated ac) {\n        return null;\n    }",
    "begin_line": 306,
    "end_line": 308,
    "comment": "/** \n * @deprecated Since 2.6, use variant that takes second argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findIgnoreUnknownProperties#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findIgnoreUnknownProperties(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Deprecated findIgnoreUnknownProperties(AnnotatedClass ac) { return null; }",
    "begin_line": 316,
    "end_line": 316,
    "comment": "/** \n * Method for checking whether an annotation indicates that all unknown properties\n * @deprecated Since 2.8, use {@link #findPropertyIgnorals} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findAutoDetectVisibility#331",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public VisibilityChecker\u003c?\u003e findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker\u003c?\u003e checker) {\n        return checker;\n    }",
    "begin_line": 331,
    "end_line": 333,
    "comment": "/** \n * Method for checking if annotations indicate changes to minimum visibility levels needed for auto-detecting property elements (fields, methods, constructors). A baseline checker is given, and introspector is to either return it as is (if no annotations are found), or build and return a derived instance (using checker\u0027s build methods).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findTypeResolver#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedClass ac, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 355,
    "end_line": 358,
    "comment": "/** \n * Method for checking if given class has annotations that indicate that specific type resolver is to be used for handling instances. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param ac Annotated class to check for annotations\n * @param baseType Base java type of value for which resolver is to be found\n * @return Type resolver builder for given type, if one found; null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyTypeResolver#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findPropertyTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedMember am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 375,
    "end_line": 378,
    "comment": "/** \n * Method for checking if given property entity (field or method) has annotations that indicate that specific type resolver is to be used for handling instances. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param am Annotated member (field or method) to check for annotations\n * @param baseType Base java type of property for which resolver is to be found\n * @return Type resolver builder for properties of given entity, if one found;null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyContentTypeResolver#397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findPropertyContentTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedMember am, JavaType containerType) {\n        return null;\n    }",
    "begin_line": 397,
    "end_line": 400,
    "comment": "/** \n * Method for checking if given structured property entity (field or method that has nominal value of Map, Collection or array type) has annotations that indicate that specific type resolver is to be used for handling type information of contained values. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param am Annotated member (field or method) to check for annotations\n * @param containerType Type of property for which resolver is to be found (must be a container type)\n * @return Type resolver builder for values contained in properties of given entity,if one found; null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSubtypes#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public List\u003cNamedType\u003e findSubtypes(Annotated a) { return null; }",
    "begin_line": 411,
    "end_line": 411,
    "comment": "/** \n * Method for locating annotation-specified subtypes related to annotated entity (class, method, field). Note that this is only guaranteed to be a list of directly declared subtypes, no recursive processing is guarantees (i.e. caller has to do it if/as necessary)\n * @param a Annotated entity (class, field/method) to check for annotations\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findTypeName#418",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String findTypeName(AnnotatedClass ac) { return null; }",
    "begin_line": 418,
    "end_line": 418,
    "comment": "/** \n * Method for checking if specified type has explicit name.\n * @param ac Class to check for type name annotations\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isTypeId#425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Boolean isTypeId(AnnotatedMember member) { return null; }",
    "begin_line": 425,
    "end_line": 425,
    "comment": "/** \n * Method for checking whether given accessor claims to represent type id: if so, its value may be used as an override, instead of generated type id.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findReferenceType#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public ReferenceProperty findReferenceType(AnnotatedMember member) { return null; }",
    "begin_line": 437,
    "end_line": 437,
    "comment": "/** \n * Method for checking if given member indicates that it is part of a reference (parent/child).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findUnwrappingNameTransformer#447",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) { return null; }",
    "begin_line": 447,
    "end_line": 447,
    "comment": "/** \n * Method called to check whether given property is marked to be \"unwrapped\" when being serialized (and appropriately handled in reverse direction, i.e. expect unwrapped representation during deserialization). Return value is the name transformation to use, if wrapping/unwrapping should  be done, or null if not -- note that transformation may simply be identity transformation (no changes).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasIgnoreMarker#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public boolean hasIgnoreMarker(AnnotatedMember m) { return false; }",
    "begin_line": 456,
    "end_line": 456,
    "comment": "/** \n * Method called to check whether given property is marked to be ignored. This is used to determine whether to ignore properties, on per-property basis, usually combining annotations from multiple accessors (getters, setters, fields, constructor parameters).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findInjectableValue#473",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public JacksonInject.Value findInjectableValue(AnnotatedMember m) {\n        // 05-Apr-2017, tatu: Just for 2.9, call deprecated method to help\n        //    with some cases of overrides for legacy code\n        Object id \u003d findInjectableValueId(m);\n        if (id !\u003d null) {\n            return JacksonInject.Value.forId(id);\n        }\n        return null;\n    }",
    "begin_line": 473,
    "end_line": 481,
    "comment": "/** \n * Method called to find out whether given member expectes a value to be injected, and if so, what is the identifier of the value to use during injection. Type if identifier needs to be compatible with provider of values (of type  {@link InjectableValues}); often a simple String id is used.\n * @param m Member to check\n * @return Identifier of value to inject, if any; null if no injectionindicator is found\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasRequiredMarker#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Boolean hasRequiredMarker(AnnotatedMember m) { return null; }",
    "begin_line": 488,
    "end_line": 488,
    "comment": "/** \n * Method that can be called to check whether this member has an annotation that suggests whether value for matching property is required or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findViews#506",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Class\u003c?\u003e[] findViews(Annotated a) { return null; }",
    "begin_line": 506,
    "end_line": 506,
    "comment": "/** \n * Method for checking if annotated property (represented by a field or getter/setter method) has definitions for views it is to be included in. If null is returned, no view definitions exist and property is always included (or always excluded as per default view inclusion configuration); otherwise it will only be included for views included in returned array. View matches are checked using class inheritance rules (sub-classes inherit inclusions of super-classes) \u003cp\u003e Since 2.9 this method may also be called to find \"default view(s)\" for {@link AnnotatedClass}\n * @param a Annotated property (represented by a method, field or ctor parameter)\n * @return Array of views (represented by classes) that the property is included in;if null, always included (same as returning array containing \u003ccode\u003eObject.class\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findFormat#516",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonFormat.Value findFormat(Annotated memberOrClass) {\n        return JsonFormat.Value.empty();\n    }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Method for finding format annotations for property or class. Return value is typically used by serializers and/or deserializers to customize presentation aspects of the serialized value.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findWrapperName#531",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findWrapperName(Annotated ann) { return null; }",
    "begin_line": 531,
    "end_line": 531,
    "comment": "/** \n * Method used to check if specified property has annotation that indicates that it should be wrapped in an element; and if so, name to use. Note that not all serializers and deserializers support use this method: currently (2.1) it is only used by XML-backed handlers.\n * @return Wrapper name to use, if any, or {@link PropertyName#USE_DEFAULT}to indicate that no wrapper element should be used.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyDefaultValue#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public String findPropertyDefaultValue(Annotated ann) { return null; }",
    "begin_line": 541,
    "end_line": 541,
    "comment": "/** \n * Method for finding suggested default value (as simple textual serialization) for the property. While core databind does not make any use of it, it is exposed for extension modules to use: an expected use is generation of schema representations and documentation.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyDescription#553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public String findPropertyDescription(Annotated ann) { return null; }",
    "begin_line": 553,
    "end_line": 553,
    "comment": "/** \n * Method used to check whether specified property member (accessor or mutator) defines human-readable description to use for documentation. There are no further definitions for contents; for example, whether these may be marked up using HTML is not defined.\n * @return Human-readable description, if any.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyIndex#566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Integer findPropertyIndex(Annotated ann) { return null; }",
    "begin_line": 566,
    "end_line": 566,
    "comment": "/** \n * Method used to check whether specified property member (accessor or mutator) defines numeric index, and if so, what is the index value. Possible use cases for index values included use by underlying data format (some binary formats mandate use of index instead of name) and ordering of properties (for documentation, or during serialization).\n * @since 2.4\n * @return Explicitly specified index for the property, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findImplicitPropertyName#581",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public String findImplicitPropertyName(AnnotatedMember member) { return null; }",
    "begin_line": 581,
    "end_line": 581,
    "comment": "/** \n * Method for finding implicit name for a property that given annotated member (field, method, creator parameter) may represent. This is different from explicit, annotation-based property name, in that it is \"weak\" and does not either proof that a property exists (for example, if visibility is not high enough), or override explicit names. In practice this method is used to introspect optional names for creator parameters (which may or may not be available and can not be detected by standard databind); or to provide alternate name mangling for fields, getters and/or setters.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyAliases#591",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public List\u003cPropertyName\u003e findPropertyAliases(Annotated ann) { return null; }",
    "begin_line": 591,
    "end_line": 591,
    "comment": "/** \n * Method called to find if given property has alias(es) defined.\n * @return `null` if member has no information; otherwise a `List` (possiblyempty) of aliases to use.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyAccess#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonProperty.Access findPropertyAccess(Annotated ann) { return null; }",
    "begin_line": 602,
    "end_line": 602,
    "comment": "/** \n * Method for finding optional access definition for a property, annotated on one of its accessors. If a definition for read-only, write-only or read-write cases, visibility rules may be modified. Note, however, that even more specific annotations (like one for ignoring specific accessor) may further override behavior of the access definition.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.resolveSetterConflict#612",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public AnnotatedMethod resolveSetterConflict(MapperConfig\u003c?\u003e config,\n            AnnotatedMethod setter1, AnnotatedMethod setter2) {\n        return null;\n    }",
    "begin_line": 612,
    "end_line": 615,
    "comment": "/** \n * Method called in cases where a class has two methods eligible to be used for the same logical property, and default logic is not enough to figure out clear precedence. Introspector may try to choose one to use; or, if unable, return `null` to indicate it can not resolve the problem.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findInjectableValueId#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Deprecated findInjectableValueId(AnnotatedMember m) {\n        return null;\n    }",
    "begin_line": 621,
    "end_line": 623,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #findInjectableValue} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializer#638",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findSerializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 638,
    "end_line": 640,
    "comment": "/** \n * Method for getting a serializer definition on specified method or field. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findKeySerializer#649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findKeySerializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 649,
    "end_line": 651,
    "comment": "/** \n * Method for getting a serializer definition for keys of associated \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findContentSerializer#661",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findContentSerializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 661,
    "end_line": 663,
    "comment": "/** \n * Method for getting a serializer definition for content (values) of associated \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003earray\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNullSerializer#671",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findNullSerializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 671,
    "end_line": 673,
    "comment": "/** \n * Method for getting a serializer definition for serializer to use for nulls (null values) of associated property or type.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationTyping#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        return null;\n    }",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Method for accessing declared typing mode annotated (if any). This is used for type detection, unless more granular settings (such as actual exact type; or serializer to use which means no type information is needed) take precedence.\n * @return Typing mode to use, if annotation is found; null otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationConverter#708",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findSerializationConverter(Annotated a) {\n        return null;\n    }",
    "begin_line": 708,
    "end_line": 710,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated entity(property or class) has indicated to be used as part of serialization. If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used first to convert property value to converter target type, and then serializer for that type is used for actual serialization. \u003cp\u003e This feature is typically used to convert internal values into types that Jackson can convert. \u003cp\u003e Note also that this feature does not necessarily work well with polymorphic type handling, or object identity handling; if such features are needed an explicit serializer is usually better way to handle serialization.\n * @param a Annotated property (field, method) or class to check forannotations\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationContentConverter#730",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Object findSerializationContentConverter(AnnotatedMember a) {\n        return null;\n    }",
    "begin_line": 730,
    "end_line": 732,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated propertyhas indicated needs to be used for values of container type (this also means that method should only be called for properties of container types, List/Map/array properties). \u003cp\u003e If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used first to convert property value to converter target type, and then serializer for that type is used for actual serialization. \u003cp\u003e Other notes are same as those for  {@link #findSerializationConverter}\n * @param a Annotated property (field, method) to check.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyInclusion#742",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonInclude.Value findPropertyInclusion(Annotated a) {\n        return JsonInclude.Value.empty();\n    }",
    "begin_line": 742,
    "end_line": 744,
    "comment": "/** \n * Method for checking inclusion criteria for a type (Class) or property (yes, method name is bit unfortunate -- not just for properties!). In case of class, acts as the default for properties POJO contains; for properties acts as override for class defaults and possible global defaults.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationInclusion#764",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationInclusion(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Include)",
    "snippet": "@Deprecated findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        return defValue;\n    }",
    "begin_line": 764,
    "end_line": 766,
    "comment": "/** \n * Method for checking whether given annotated entity (class, method, field) defines which Bean/Map properties are to be included in serialization. If no annotation is found, method should return given second argument; otherwise value indicated by the annotation. \u003cp\u003e Note that meaning of inclusion value depends on whether it is for a Class or property (field/method/constructor): in former case, it is the default for all properties; in latter case it is specific override for annotated property.\n * @return Enumerated value indicating which properties to includein serialization\n * @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationInclusionForContent#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationInclusionForContent(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Include)",
    "snippet": "@Deprecated findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        return defValue;\n    }",
    "begin_line": 778,
    "end_line": 780,
    "comment": "/** \n * Method for checking whether content (entries) of a  {@link java.util.Map} propertyare to be included during serialization or not. NOTE: this is NOT called for POJO properties, or array/Collection elements.\n * @since 2.5\n * @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.refineSerializationType#795",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType refineSerializationType(final MapperConfig\u003c?\u003e config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        return baseType;\n    }",
    "begin_line": 795,
    "end_line": 799,
    "comment": "/** \n * Method called to find out possible type refinements to use for deserialization, including not just value itself but key and/or content type, if type has those.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationType#805",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated findSerializationType(Annotated a) {\n        return null;\n    }",
    "begin_line": 805,
    "end_line": 807,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationKeyType#813",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated findSerializationKeyType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 813,
    "end_line": 815,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationContentType#821",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated findSerializationContentType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 821,
    "end_line": 823,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationPropertyOrder#835",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        return null;\n    }",
    "begin_line": 835,
    "end_line": 837,
    "comment": "/** \n * Method for accessing defined property serialization order (which may be partial). May return null if no ordering is defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationSortAlphabetically#844",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return null;\n    }",
    "begin_line": 844,
    "end_line": 846,
    "comment": "/** \n * Method for checking whether an annotation indicates that serialized properties for which no explicit is defined should be alphabetically (lexicograpically) ordered\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findAndAddVirtualProperties#854",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "public void findAndAddVirtualProperties(MapperConfig\u003c?\u003e config, AnnotatedClass ac,\n            List\u003cBeanPropertyWriter\u003e properties) { }",
    "begin_line": 854,
    "end_line": 855,
    "comment": "/** \n * Method for adding possible virtual properties to be serialized along with regular properties.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNameForSerialization#877",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findNameForSerialization(Annotated a) {\n        return null;\n    }",
    "begin_line": 877,
    "end_line": 879,
    "comment": "/** \n * Method for checking whether given property accessors (method, field) has an annotation that suggests property name to use for serialization. Should return null if no annotation is found; otherwise a non-null name (possibly {@link PropertyName#USE_DEFAULT}, which means \"use default heuristics\").\n * @param a Property accessor to check\n * @return Name to use if found; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAsValue#894",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAsValue(Annotated a) {\n        // 20-Nov-2016, tatu: Delegate in 2.9; remove redirect from later versions\n        if (a instanceof AnnotatedMethod) {\n            if (hasAsValueAnnotation((AnnotatedMethod) a)) {\n                return true;\n            }\n        }\n        return null;\n    }",
    "begin_line": 894,
    "end_line": 902,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the return value of annotated method should be used as \"the value\" of the object instance; usually serialized as a primitive value such as String or number.\n * @return {@link Boolean#TRUE} if such annotation is found and is not disabled;{@link Boolean#FALSE} if disabled annotation (block) is found (to indicateaccessor is definitely NOT to be used \"as value\"); or `null` if no information found.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnyGetter#915",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAnyGetter(Annotated a) {\n\n        // 21-Nov-2016, tatu: Delegate in 2.9; remove redirect from later versions\n        if (a instanceof AnnotatedMethod) {\n            if (hasAnyGetterAnnotation((AnnotatedMethod) a)) {\n                return true;\n            }\n        }\n        return null;\n    }",
    "begin_line": 915,
    "end_line": 924,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the method is to serve as \"any setter\"; method to be used for accessing set of miscellaneous \"extra\" properties, often bound with matching \"any setter\" method.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findEnumValues#937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findEnumValues(java.lang.Class\u003c?\u003e, java.lang.Enum\u003c?\u003e[], java.lang.String[])",
    "snippet": "public String[] findEnumValues(Class\u003c?\u003e enumType, Enum\u003c?\u003e[] enumValues, String[] names) {\n        // 18-Oct-2016, tatu: In 2.8 delegated to deprecated method; not so in 2.9 and beyond\n        return names;\n    }",
    "begin_line": 937,
    "end_line": 940,
    "comment": "/** \n * Method for efficiently figuring out which if given set of \u003ccode\u003eEnum\u003c/code\u003e values have explicitly defined name. Method will overwrite entries in incoming \u003ccode\u003enames\u003c/code\u003e array with explicit names found, if any, leaving other entries unmodified. \u003cp\u003e Default implementation will simply delegate to  {@link #findEnumValue}, which is close enough, although unfortunately NOT 100% equivalent (as it will also consider \u003ccode\u003ename()\u003c/code\u003e to give explicit value).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDefaultEnumValue#950",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDefaultEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e)",
    "snippet": "public Enum\u003c?\u003e findDefaultEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumCls) {\n        return null;\n    }",
    "begin_line": 950,
    "end_line": 952,
    "comment": "/** \n * Finds the Enum value that should be considered the default value, if possible.\n * @param enumCls The Enum class to scan for the default value.\n * @return null if none found or it\u0027s not possible to determine one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findEnumValue#967",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findEnumValue(java.lang.Enum\u003c?\u003e)",
    "snippet": "@Deprecated\n    public String findEnumValue(Enum\u003c?\u003e value) {\n        return value.name();\n    }",
    "begin_line": 967,
    "end_line": 969,
    "comment": "/** \n * Method for determining the String value to use for serializing given enumeration entry; used when serializing enumerations as Strings (the standard method).\n * @return Serialized enum value.\n * @deprecated Since 2.8: use {@link #findEnumValues} instead because this methoddoes not properly handle override settings (defaults to \u003ccode\u003eenum.name\u003c/code\u003e without indicating whether that is explicit or not), and is inefficient to call one-by-one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAsValueAnnotation#975",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated hasAsValueAnnotation(AnnotatedMethod am) {\n        return false;\n    }",
    "begin_line": 975,
    "end_line": 977,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #hasAsValue(Annotated)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnyGetterAnnotation#983",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        return false;\n    }",
    "begin_line": 983,
    "end_line": 985,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #hasAnyGetter} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializer#1001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findDeserializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 1001,
    "end_line": 1003,
    "comment": "/** \n * Method for getting a deserializer definition on specified method or field. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findKeyDeserializer#1013",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findKeyDeserializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 1013,
    "end_line": 1015,
    "comment": "/** \n * Method for getting a deserializer definition for keys of associated \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findContentDeserializer#1026",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findContentDeserializer(Annotated am) {\n        return null;\n    }",
    "begin_line": 1026,
    "end_line": 1028,
    "comment": "/** \n * Method for getting a deserializer definition for content (values) of associated \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003earray\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationConverter#1052",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findDeserializationConverter(Annotated a) {\n        return null;\n    }",
    "begin_line": 1052,
    "end_line": 1054,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated entity(property or class) has indicated to be used as part of deserialization. If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used after Jackson has deserializer data into intermediate type (Converter input type), and Converter needs to convert this into its target type to be set as property value. \u003cp\u003e This feature is typically used to convert intermediate Jackson types (that default deserializers can produce) into custom type instances. \u003cp\u003e Note also that this feature does not necessarily work well with polymorphic type handling, or object identity handling; if such features are needed an explicit deserializer is usually better way to handle deserialization.\n * @param a Annotated property (field, method) or class to check forannotations\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationContentConverter#1074",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Object findDeserializationContentConverter(AnnotatedMember a) {\n        return null;\n    }",
    "begin_line": 1074,
    "end_line": 1076,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated propertyhas indicated needs to be used for values of container type (this also means that method should only be called for properties of container types, List/Map/array properties). \u003cp\u003e If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used after Jackson has deserializer data into intermediate type (Converter input type), and Converter needs to convert this into its target type to be set as property value. \u003cp\u003e Other notes are same as those for  {@link #findDeserializationConverter}\n * @param a Annotated property (field, method) to check.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.refineDeserializationType#1090",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType refineDeserializationType(final MapperConfig\u003c?\u003e config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        return baseType;\n    }",
    "begin_line": 1090,
    "end_line": 1094,
    "comment": "/** \n * Method called to find out possible type refinements to use for deserialization.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationType#1110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public Class\u003c?\u003e findDeserializationType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 1110,
    "end_line": 1112,
    "comment": "/** \n * Method for accessing annotated type definition that a property can have, to be used as the type for deserialization instead of the static (declared) type. Type is usually narrowing conversion (i.e.subtype of declared type). Declared return type of the method is also considered acceptable.\n * @param baseType Assumed type before considering annotations\n * @return Class to use for deserialization instead of declared type\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationKeyType#1127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public Class\u003c?\u003e findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        return null;\n    }",
    "begin_line": 1127,
    "end_line": 1129,
    "comment": "/** \n * Method for accessing additional narrowing type definition that a method can have, to define more specific key type to use. It should be only be used with  {@link java.util.Map} types.\n * @param baseKeyType Assumed key type before considering annotations\n * @return Class specifying more specific type to use instead ofdeclared type, if annotation found; null if not\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationContentType#1145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public Class\u003c?\u003e findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        return null;\n    }",
    "begin_line": 1145,
    "end_line": 1147,
    "comment": "/** \n * Method for accessing additional narrowing type definition that a method can have, to define more specific content type to use; content refers to Map values and Collection/array elements. It should be only be used with Map, Collection and array types.\n * @param baseContentType Assumed content (value) type before considering annotations\n * @return Class specifying more specific type to use instead ofdeclared type, if annotation found; null if not\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findValueInstantiator#1160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Object findValueInstantiator(AnnotatedClass ac) {\n        return null;\n    }",
    "begin_line": 1160,
    "end_line": 1162,
    "comment": "/** \n * Method getting  {@link ValueInstantiator} to use for giventype (class): return value can either be an instance of instantiator, or class of instantiator to create.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPOJOBuilder#1177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Class\u003c?\u003e findPOJOBuilder(AnnotatedClass ac) {\n        return null;\n    }",
    "begin_line": 1177,
    "end_line": 1179,
    "comment": "/** \n * Method for finding Builder object to use for constructing value instance and binding data (sort of combining value instantiators that can construct, and deserializers that can bind data). \u003cp\u003e Note that unlike accessors for some helper Objects, this method does not allow returning instances: the reason is that builders have state, and a separate instance needs to be created for each deserialization call.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPOJOBuilderConfig#1184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        return null;\n    }",
    "begin_line": 1184,
    "end_line": 1186,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNameForDeserialization#1208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findNameForDeserialization(Annotated a) {\n        return null;\n    }",
    "begin_line": 1208,
    "end_line": 1210,
    "comment": "/** \n * Method for checking whether given property accessors (method, field) has an annotation that suggests property name to use for deserialization (reading JSON into POJOs). Should return null if no annotation is found; otherwise a non-null name (possibly {@link PropertyName#USE_DEFAULT}, which means \"use default heuristics\").\n * @param a Property accessor to check\n * @return Name to use if found; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnySetter#1223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAnySetter(Annotated a) {\n        return false;\n    }",
    "begin_line": 1223,
    "end_line": 1225,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the method is to serve as \"any setter\"; method to be used for setting values of any properties for which no dedicated setter method is found.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSetterInfo#1233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonSetter.Value findSetterInfo(Annotated a) {\n        return JsonSetter.Value.empty();\n    }",
    "begin_line": 1233,
    "end_line": 1235,
    "comment": "/** \n * Method for finding possible settings for property, given annotations on an accessor.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findMergeInfo#1242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean findMergeInfo(Annotated a) {\n        return null;\n    }",
    "begin_line": 1242,
    "end_line": 1244,
    "comment": "/** \n * Method for finding merge settings for property, if any.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findCreatorAnnotation#1261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonCreator.Mode findCreatorAnnotation(MapperConfig\u003c?\u003e config, Annotated a) {\n        // 13-Sep-2016, tatu: for backwards compatibility, implement using delegation\n        ///   (remove from version AFTER 2.9)\n        if (hasCreatorAnnotation(a)) {\n            JsonCreator.Mode mode \u003d findCreatorBinding(a);\n            if (mode \u003d\u003d null) {\n                mode \u003d JsonCreator.Mode.DEFAULT;\n            }\n            return mode;\n        }\n        return null;\n    }",
    "begin_line": 1261,
    "end_line": 1272,
    "comment": "/** \n * Method called to check whether potential Creator (constructor or static factory method) has explicit annotation to indicate it as actual Creator; and if so, which  {@link com.fasterxml.jackson.annotation.JsonCreator.Mode} to use.\u003cp\u003e NOTE: caller needs to consider possibility of both `null` (no annotation found) and  {@link com.fasterxml.jackson.annotation.JsonCreator.Mode#DISABLED} (annotation found,but disabled); latter is necessary as marker in case multiple introspectors are chained, as well as possibly as when using mix-in annotations.\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param a Annotated accessor (usually constructor or static method) to check\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasCreatorAnnotation#1287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated\n    public boolean hasCreatorAnnotation(Annotated a) {\n        return false;\n    }",
    "begin_line": 1287,
    "end_line": 1289,
    "comment": "/** \n * Method for checking whether given annotated item (method, constructor) has an annotation that suggests that the method is a \"creator\" (aka factory) method to be used for construct new instances of deserialized values.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @deprecated Since 2.9 use {@link #findCreatorAnnotation} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findCreatorBinding#1301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        return null;\n    }",
    "begin_line": 1301,
    "end_line": 1303,
    "comment": "/** \n * Method for finding indication of creator binding mode for a creator (something for which  {@link #hasCreatorAnnotation} returnstrue), for cases where there may be ambiguity (currently: single-argument creator with implicit but no explicit name for the argument).\n * @since 2.5\n * @deprecated Since 2.9 use {@link #findCreatorAnnotation} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnySetterAnnotation#1309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated hasAnySetterAnnotation(AnnotatedMethod am) {\n        return false;\n    }",
    "begin_line": 1309,
    "end_line": 1311,
    "comment": "/** \n * @deprecated Since 2.9 use {@link #hasAnySetter} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._findAnnotation#1334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._findAnnotation(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003cA\u003e)",
    "snippet": "protected \u003cA extends Annotation\u003e A _findAnnotation(Annotated annotated,\n            Class\u003cA\u003e annoClass) {\n        return annotated.getAnnotation(annoClass);\n    }",
    "begin_line": 1334,
    "end_line": 1337,
    "comment": "/** \n * Method that should be used by sub-classes for ALL annotation access; overridable so  that sub-classes may, if they choose to, mangle actual access to block access (\"hide\" annotations) or perhaps change it. \u003cp\u003e Default implementation is simply: \u003ccode\u003e return annotated.getAnnotation(annoClass); \u003c/code\u003e\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._hasAnnotation#1352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._hasAnnotation(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)",
    "snippet": "protected boolean _hasAnnotation(Annotated annotated, Class\u003c? extends Annotation\u003e annoClass) {\n        return annotated.hasAnnotation(annoClass);\n    }",
    "begin_line": 1352,
    "end_line": 1354,
    "comment": "/** \n * Method that should be used by sub-classes for ALL annotation existence access; overridable so  that sub-classes may, if they choose to, mangle actual access to block access (\"hide\" annotations) or perhaps change value seen. \u003cp\u003e Default implementation is simply: \u003ccode\u003e return annotated.hasAnnotation(annoClass); \u003c/code\u003e\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._hasOneOf#1362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._hasOneOf(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "protected boolean _hasOneOf(Annotated annotated, Class\u003c? extends Annotation\u003e[] annoClasses) {\n        return annotated.hasOneOf(annoClasses);\n    }",
    "begin_line": 1362,
    "end_line": 1364,
    "comment": "/** \n * Alternative lookup method that is used to see if annotation has at least one of annotations of types listed in second argument.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.BeanDescription#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BeanDescription(JavaType type) {\n        _type \u003d type;\n    }",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getType#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getType()",
    "snippet": "public JavaType getType() { return _type; }",
    "begin_line": 50,
    "end_line": 50,
    "comment": "/** \n * Method for accessing declared type of bean being introspected, including full generic type information (from declaration)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getBeanClass#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getBeanClass()",
    "snippet": "public Class\u003c?\u003e getBeanClass() { return _type.getRawClass(); }",
    "begin_line": 52,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.isNonStaticInnerClass#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.isNonStaticInnerClass()",
    "snippet": "public boolean isNonStaticInnerClass() {\n        return getClassInfo().isNonStaticInnerClass();\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getClassInfo#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getClassInfo()",
    "snippet": "public abstract AnnotatedClass getClassInfo();",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * Method for accessing low-level information about Class this item describes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getObjectIdInfo#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getObjectIdInfo()",
    "snippet": "public abstract ObjectIdInfo getObjectIdInfo();",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Accessor for getting information about Object Id expected to be used for this POJO type, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.hasKnownClassAnnotations#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.hasKnownClassAnnotations()",
    "snippet": "public abstract boolean hasKnownClassAnnotations();",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * Method for checking whether class being described has any annotations recognized by registered annotation introspector.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.bindingsForBeanType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.bindingsForBeanType()",
    "snippet": "@Deprecated\n    public abstract TypeBindings bindingsForBeanType();",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * Accessor for type bindings that may be needed to fully resolve types of member object, such as return and argument types of methods and constructors, and types of fields.\n * @deprecated Since 2.7, should not need to access bindings directly\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.resolveType#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.resolveType(java.lang.reflect.Type)",
    "snippet": "@Deprecated\n    public abstract JavaType resolveType(java.lang.reflect.Type jdkType);",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * Method for resolving given JDK type, using this bean as the generic type resolution context.\n * @deprecated Since 2.8, should simply call \u003ccode\u003egetType\u003c/code\u003e ofproperty accessor directly.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getClassAnnotations#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getClassAnnotations()",
    "snippet": "public abstract Annotations getClassAnnotations();",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * Method for accessing collection of annotations the bean class has.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findProperties#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findProperties()",
    "snippet": "public abstract List\u003cBeanPropertyDefinition\u003e findProperties();",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * @return Ordered Map with logical property name as key, andmatching getter method as value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getIgnoredPropertyNames#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getIgnoredPropertyNames()",
    "snippet": "public abstract Set\u003cString\u003e getIgnoredPropertyNames();",
    "begin_line": 117,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findBackReferences#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findBackReferences()",
    "snippet": "public abstract List\u003cBeanPropertyDefinition\u003e findBackReferences();",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * Method for locating all back-reference properties (setters, fields) bean has\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findBackReferenceProperties#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findBackReferenceProperties()",
    "snippet": "@Deprecated\n    public abstract Map\u003cString,AnnotatedMember\u003e findBackReferenceProperties();",
    "begin_line": 132,
    "end_line": 132,
    "comment": "/** \n * Method for locating all back-reference properties (setters, fields) bean has\n * @deprecated Since 2.9 use {@link #findBackReferences()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getConstructors#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getConstructors()",
    "snippet": "public abstract List\u003cAnnotatedConstructor\u003e getConstructors();",
    "begin_line": 140,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getFactoryMethods#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getFactoryMethods()",
    "snippet": "public abstract List\u003cAnnotatedMethod\u003e getFactoryMethods();",
    "begin_line": 142,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDefaultConstructor#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDefaultConstructor()",
    "snippet": "public abstract AnnotatedConstructor findDefaultConstructor();",
    "begin_line": 149,
    "end_line": 149,
    "comment": "/** \n * Method that will locate the no-arg constructor for this class, if it has one, and that constructor has not been marked as ignorable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findSingleArgConstructor#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findSingleArgConstructor(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Constructor\u003c?\u003e findSingleArgConstructor(Class\u003c?\u003e... argTypes);",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * Method that can be called to locate a single-arg constructor that takes specified exact type (will not accept supertype constructors)\n * @param argTypes Type(s) of the argument that we are looking for\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findFactoryMethod#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findFactoryMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Method findFactoryMethod(Class\u003c?\u003e... expArgTypes);",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Method that can be called to find if introspected class declares a static \"valueOf\" factory method that returns an instance of introspected type, given one of acceptable types.\n * @param expArgTypes Types that the matching single argument factorymethod can take: will also accept super types of these types (ie. arg just has to be assignable from expArgType)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findJsonValueAccessor#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findJsonValueAccessor()",
    "snippet": "public abstract AnnotatedMember findJsonValueAccessor();",
    "begin_line": 185,
    "end_line": 185,
    "comment": "/** \n * Method for locating accessor (readable field, or \"getter\" method) that has {@link com.fasterxml.jackson.annotation.JsonValue} annotation,if any. If multiple ones are found, an error is reported by throwing  {@link IllegalArgumentException}\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnyGetter#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnyGetter()",
    "snippet": "public abstract AnnotatedMember findAnyGetter();",
    "begin_line": 187,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetterAccessor#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetterAccessor()",
    "snippet": "public abstract AnnotatedMember findAnySetterAccessor();",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * Method used to locate a mutator (settable field, or 2-argument set method) of introspected class that implements  {@link com.fasterxml.jackson.annotation.JsonAnySetter}. If no such mutator exists null is returned. If more than one are found, an exception is thrown. Additional checks are also made to see that method signature is acceptable: needs to take 2 arguments, first one String or Object; second any can be any type.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findMethod#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public abstract AnnotatedMethod findMethod(String name, Class\u003c?\u003e[] paramTypes);",
    "begin_line": 203,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findJsonValueMethod#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findJsonValueMethod()",
    "snippet": "@Deprecated findJsonValueMethod();",
    "begin_line": 206,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetter#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetter()",
    "snippet": "@Deprecated\n    public AnnotatedMethod findAnySetter() {\n        AnnotatedMember m \u003d findAnySetterAccessor();\n        if (m instanceof AnnotatedMethod) {\n            return (AnnotatedMethod) m;\n        }\n        return null;\n    }",
    "begin_line": 212,
    "end_line": 218,
    "comment": "/** \n * @deprecated Since 2.9: use {@link #findAnySetterAccessor} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetterField#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetterField()",
    "snippet": "@Deprecated\n    public AnnotatedMember findAnySetterField() {\n        AnnotatedMember m \u003d findAnySetterAccessor();\n        if (m instanceof AnnotatedField) {\n            return m;\n        }\n        return null;\n    }",
    "begin_line": 224,
    "end_line": 230,
    "comment": "/** \n * @deprecated Since 2.9: use {@link #findAnySetterAccessor} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPropertyInclusion#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPropertyInclusion(JsonInclude.Value)",
    "snippet": "public abstract JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue);",
    "begin_line": 247,
    "end_line": 247,
    "comment": "/** \n * Method for finding annotation-indicated inclusion definition (if any); possibly overriding given default value. \u003cp\u003e NOTE: does NOT use global inclusion default settings as the base, unless passed as `defValue`.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findExpectedFormat#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findExpectedFormat(JsonFormat.Value)",
    "snippet": "public abstract JsonFormat.Value findExpectedFormat(JsonFormat.Value defValue);",
    "begin_line": 256,
    "end_line": 256,
    "comment": "/** \n * Method for checking what is the expected format for POJO, as defined by defaults and possible annotations. Note that this may be further refined by per-property annotations.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findSerializationConverter#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findSerializationConverter()",
    "snippet": "public abstract Converter\u003cObject,Object\u003e findSerializationConverter();",
    "begin_line": 264,
    "end_line": 264,
    "comment": "/** \n * Method for finding  {@link Converter} used for serializing instancesof this class.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDeserializationConverter#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDeserializationConverter()",
    "snippet": "public abstract Converter\u003cObject,Object\u003e findDeserializationConverter();",
    "begin_line": 272,
    "end_line": 272,
    "comment": "/** \n * Method for finding  {@link Converter} used for serializing instancesof this class.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findClassDescription#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findClassDescription()",
    "snippet": "public String findClassDescription() { return null; }",
    "begin_line": 280,
    "end_line": 280,
    "comment": "/** \n * Accessor for possible description for the bean type, used for constructing documentation.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findInjectables#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findInjectables()",
    "snippet": "public abstract Map\u003cObject, AnnotatedMember\u003e findInjectables();",
    "begin_line": 288,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPOJOBuilder#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPOJOBuilder()",
    "snippet": "public abstract Class\u003c?\u003e findPOJOBuilder();",
    "begin_line": 296,
    "end_line": 296,
    "comment": "/** \n * Method for checking if the POJO type has annotations to indicate that a builder is to be used for instantiating instances and handling data binding, instead of standard bean deserializer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPOJOBuilderConfig#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPOJOBuilderConfig()",
    "snippet": "public abstract JsonPOJOBuilder.Value findPOJOBuilderConfig();",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * Method for finding configuration for POJO Builder class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.instantiateBean#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.instantiateBean(boolean)",
    "snippet": "public abstract Object instantiateBean(boolean fixAccess);",
    "begin_line": 315,
    "end_line": 315,
    "comment": "/** \n * Method called to create a \"default instance\" of the bean, currently only needed for obtaining default field values which may be used for suppressing serialization of fields that have \"not changed\".\n * @param fixAccess If true, method is allowed to fix access to thedefault constructor (to be able to call non-public constructor); if false, has to use constructor as is.\n * @return Instance of class represented by this descriptor, ifsuitable default constructor was found; null otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDefaultViews#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDefaultViews()",
    "snippet": "public abstract Class\u003c?\u003e[] findDefaultViews();",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * Method for finding out if the POJO specifies default view(s) to use for properties, considering both per-type annotations and global default settings.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getConfig#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getConfig()",
    "snippet": "public abstract MapperConfig\u003c?\u003e getConfig();",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Accessor to currently active configuration (both per-request configs and per-mapper config).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getAnnotationIntrospector#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()",
    "snippet": "public abstract AnnotationIntrospector getAnnotationIntrospector();",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Convenience method for accessing serialization view in use (if any); equivalent to: \u003cpre\u003e getConfig().getAnnotationIntrospector(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.isEnabled#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract boolean isEnabled(MapperFeature feature);",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for: \u003cpre\u003e getConfig().isEnabled(feature); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.canOverrideAccessModifiers#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()",
    "snippet": "public abstract boolean canOverrideAccessModifiers();",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * Convenience method for accessing serialization view in use (if any); equivalent to: \u003cpre\u003e getConfig().canOverrideAccessModifiers(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getActiveView#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getActiveView()",
    "snippet": "public abstract Class\u003c?\u003e getActiveView();",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * Accessor for locating currently active view, if any; returns null if no view has been set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getLocale#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getLocale()",
    "snippet": "public abstract Locale getLocale();",
    "begin_line": 90,
    "end_line": 90,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getTimeZone#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getTimeZone()",
    "snippet": "public abstract TimeZone getTimeZone();",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getDefaultPropertyFormat#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType);",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getAttribute#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)",
    "snippet": "public abstract Object getAttribute(Object key);",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * Method for accessing attributes available in this context. Per-call attributes have highest precedence; attributes set via  {@link ObjectReader} or {@link ObjectWriter} have lowerprecedence.\n * @param key Key of the attribute to get\n * @return Value of the attribute, if any; null otherwise\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.setAttribute#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract DatabindContext setAttribute(Object key, Object value);",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * Method for setting per-call value of given attribute. This will override any previously defined value for the attribute within this context.\n * @param key Key of the attribute to set\n * @param value Value to set attribute to\n * @return This context object, to allow chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.constructType#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type type) {\n        if (type \u003d\u003d null) {\n            return null;\n        }\n        return getTypeFactory().constructType(type);\n    }",
    "begin_line": 145,
    "end_line": 150,
    "comment": "/** \n * Convenience method for constructing  {@link JavaType} for given JDKtype (usually  {@link java.lang.Class})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.constructSpecializedType#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType, Class\u003c?\u003e subclass) {\n        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n        if (baseType.getRawClass() \u003d\u003d subclass) {\n            return baseType;\n        }\n        return getConfig().constructSpecializedType(baseType, subclass);\n    }",
    "begin_line": 156,
    "end_line": 162,
    "comment": "/** \n * Convenience method for constructing subtypes, retaining generic type parameter (if any)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getTypeFactory#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()",
    "snippet": "public abstract TypeFactory getTypeFactory();",
    "begin_line": 164,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.objectIdGeneratorInstance#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated,\n            ObjectIdInfo objectIdInfo)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n        final MapperConfig\u003c?\u003e config \u003d getConfig();\n        HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n        ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n        if (gen \u003d\u003d null) {\n            gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n        return gen.forScope(objectIdInfo.getScope());\n    }",
    "begin_line": 172,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.objectIdResolverInstance#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdResolver objectIdResolverInstance(Annotated annotated, ObjectIdInfo objectIdInfo)\n    {\n        Class\u003c? extends ObjectIdResolver\u003e implClass \u003d objectIdInfo.getResolverType();\n        final MapperConfig\u003c?\u003e config \u003d getConfig();\n        HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n        ObjectIdResolver resolver \u003d (hi \u003d\u003d null) ? null : hi.resolverIdGeneratorInstance(config, annotated, implClass);\n        if (resolver \u003d\u003d null) {\n            resolver \u003d ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n        }\n\n        return resolver;\n    }",
    "begin_line": 187,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.converterInstance#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public Converter\u003cObject,Object\u003e converterInstance(Annotated annotated,\n            Object converterDef)\n        throws JsonMappingException\n    {\n        if (converterDef \u003d\u003d null) {\n            return null;\n        }\n        if (converterDef instanceof Converter\u003c?,?\u003e) {\n            return (Converter\u003cObject,Object\u003e) converterDef;\n        }\n        if (!(converterDef instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n                    +converterDef.getClass().getName()+\"; expected type Converter or Class\u003cConverter\u003e instead\");\n        }\n        Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e)converterDef;\n        // there are some known \"no class\" markers to consider too:\n        if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n            return null;\n        }\n        if (!Converter.class.isAssignableFrom(converterClass)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n                    +converterClass.getName()+\"; expected Class\u003cConverter\u003e\");\n        }\n        final MapperConfig\u003c?\u003e config \u003d getConfig();\n        HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n        Converter\u003c?,?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(config, annotated, converterClass);\n        if (conv \u003d\u003d null) {\n            conv \u003d (Converter\u003c?,?\u003e) ClassUtil.createInstance(converterClass,\n                    config.canOverrideAccessModifiers());\n        }\n        return (Converter\u003cObject,Object\u003e) conv;\n    }",
    "begin_line": 207,
    "end_line": 238,
    "comment": "/** \n * Helper method to use to construct a  {@link Converter}, given a definition that may be either actual converter instance, or Class for instantiating one.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.reportBadDefinition#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public abstract \u003cT\u003e T reportBadDefinition(JavaType type, String msg) throws JsonMappingException;",
    "begin_line": 253,
    "end_line": 253,
    "comment": "/** \n * Helper method called to indicate a generic problem that stems from type definition(s), not input data, or input/output state; typically this means throwing a  {@link com.fasterxml.jackson.databind.exc.InvalidDefinitionException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.reportBadDefinition#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public \u003cT\u003e T reportBadDefinition(Class\u003c?\u003e type, String msg) throws JsonMappingException {\n        return reportBadDefinition(constructType(type), msg);\n    }",
    "begin_line": 259,
    "end_line": 261,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._format#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String, java.lang.Object)",
    "snippet": "protected final String _format(String msg, Object... msgArgs) {\n        if (msgArgs.length \u003e 0) {\n            return String.format(msg, msgArgs);\n        }\n        return msg;\n    }",
    "begin_line": 272,
    "end_line": 277,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._truncate#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)",
    "snippet": "protected final String _truncate(String desc) {\n        if (desc \u003d\u003d null) {\n            return \"\";\n        }\n        if (desc.length() \u003c\u003d MAX_ERROR_STR_LEN) {\n            return desc;\n        }\n        return desc.substring(0, MAX_ERROR_STR_LEN) + \"]...[\" + desc.substring(desc.length() - MAX_ERROR_STR_LEN);\n    }",
    "begin_line": 282,
    "end_line": 290,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._quotedString#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)",
    "snippet": "protected String _quotedString(String desc) {\n        if (desc \u003d\u003d null) {\n            return \"[N/A]\";\n        }\n        // !!! should we quote it? (in case there are control chars, linefeeds)\n        return String.format(\"\\\"%s\\\"\", _truncate(desc));\n    }",
    "begin_line": 295,
    "end_line": 301,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._colonConcat#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String, java.lang.String)",
    "snippet": "protected String _colonConcat(String msgBase, String extra) {\n        if (extra \u003d\u003d null) {\n            return msgBase;\n        }\n        return msgBase + \": \" + extra;\n    }",
    "begin_line": 306,
    "end_line": 311,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._calcName#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._calcName(java.lang.Class\u003c?\u003e)",
    "snippet": "protected String _calcName(Class\u003c?\u003e cls) {\n        if (cls.isArray()) {\n            return _calcName(cls.getComponentType())+\"[]\";\n        }\n        return cls.getName();\n    }",
    "begin_line": 316,
    "end_line": 321,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._desc#326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)",
    "snippet": "protected String _desc(String desc) {\n        if (desc \u003d\u003d null) {\n            return \"[N/A]\";\n        }\n        // !!! should we quote it? (in case there are control chars, linefeeds)\n        return _truncate(desc);\n    }",
    "begin_line": 326,
    "end_line": 332,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "public DeserializationConfig(BaseSettings base,\n            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(base, str, mixins, rootNames, configOverrides);\n        _deserFeatures \u003d collectFeatureDefaults(DeserializationFeature.class);\n        _nodeFactory \u003d JsonNodeFactory.instance;\n        _problemHandlers \u003d null;\n        _parserFeatures \u003d 0;\n        _parserFeaturesToChange \u003d 0;\n        _formatReadFeatures \u003d 0;\n        _formatReadFeaturesToChange \u003d 0;\n    }",
    "begin_line": 99,
    "end_line": 111,
    "comment": "/** \n * Constructor used by ObjectMapper to create default configuration object instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src,\n            SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(src, mixins, rootNames, configOverrides);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 118,
    "end_line": 130,
    "comment": "/** \n * Copy-constructor used for making a copy used by new  {@link ObjectMapper}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, int, int, int, int, int, int)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,\n            int mapperFeatures, int deserFeatures,\n            int parserFeatures, int parserFeatureMask,\n            int formatFeatures, int formatFeatureMask)\n    {\n        super(src, mapperFeatures);\n        _deserFeatures \u003d deserFeatures;\n        _nodeFactory \u003d src._nodeFactory;\n        _problemHandlers \u003d src._problemHandlers;\n        _parserFeatures \u003d parserFeatures;\n        _parserFeaturesToChange \u003d parserFeatureMask;\n        _formatReadFeatures \u003d formatFeatures;\n        _formatReadFeaturesToChange \u003d formatFeatureMask;\n    }",
    "begin_line": 139,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)\n    {\n        super(src, str);\n        _deserFeatures \u003d src._deserFeatures;\n        _nodeFactory \u003d src._nodeFactory;\n        _problemHandlers \u003d src._problemHandlers;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 158,
    "end_line": 168,
    "comment": "/** \n * Copy constructor used to create a non-shared instance with given mix-in annotation definitions and subtype resolver.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n    {\n        super(src, base);\n        _deserFeatures \u003d src._deserFeatures;\n        _nodeFactory \u003d src._nodeFactory;\n        _problemHandlers \u003d src._problemHandlers;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 170,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n    {\n        super(src);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d f;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 182,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.util.LinkedNode\u003ccom.fasterxml.jackson.databind.deser.DeserializationProblemHandler\u003e)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,\n            LinkedNode\u003cDeserializationProblemHandler\u003e problemHandlers)\n    {\n        super(src);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 194,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private DeserializationConfig(DeserializationConfig src, PropertyName rootName)\n    {\n        super(src, rootName);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 207,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "private DeserializationConfig(DeserializationConfig src, Class\u003c?\u003e view)\n    {\n        super(src, view);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 219,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src, ContextAttributes attrs)\n    {\n        super(src, attrs);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 231,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins)\n    {\n        super(src, mixins);\n        _deserFeatures \u003d src._deserFeatures;\n        _problemHandlers \u003d src._problemHandlers;\n        _nodeFactory \u003d src._nodeFactory;\n        _parserFeatures \u003d src._parserFeatures;\n        _parserFeaturesToChange \u003d src._parserFeaturesToChange;\n        _formatReadFeatures \u003d src._formatReadFeatures;\n        _formatReadFeaturesToChange \u003d src._formatReadFeaturesToChange;\n    }",
    "begin_line": 243,
    "end_line": 253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getBaseSettings#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getBaseSettings()",
    "snippet": "protected BaseSettings getBaseSettings() { return _base; }",
    "begin_line": 256,
    "end_line": 256,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig._withBase#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "@Override _withBase(BaseSettings newBase) {\n        return (_base \u003d\u003d newBase) ? this : new DeserializationConfig(this, newBase);\n    }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig._withMapperFeatures#270",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withMapperFeatures(int)",
    "snippet": "@Override _withMapperFeatures(int mapperFeatures) {\n        return new DeserializationConfig(this, mapperFeatures, _deserFeatures,\n                        _parserFeatures, _parserFeaturesToChange,\n                        _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 270,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "@Override\n    public DeserializationConfig with(SubtypeResolver str) {\n        return (_subtypeResolver \u003d\u003d str) ? this : new DeserializationConfig(this, str);\n    }",
    "begin_line": 283,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withRootName#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override\n    public DeserializationConfig withRootName(PropertyName rootName) {\n        if (rootName \u003d\u003d null) {\n            if (_rootName \u003d\u003d null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new DeserializationConfig(this, rootName);\n    }",
    "begin_line": 288,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withView#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public DeserializationConfig withView(Class\u003c?\u003e view) {\n        return (_view \u003d\u003d view) ? this : new DeserializationConfig(this, view);\n    }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "@Override\n    public DeserializationConfig with(ContextAttributes attrs) {\n        return (attrs \u003d\u003d _attributes) ? this : new DeserializationConfig(this, attrs);\n    }",
    "begin_line": 305,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig with(DeserializationFeature feature)\n    {\n        int newDeserFeatures \u003d (_deserFeatures | feature.getMask());\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 319,
    "end_line": 326,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig with(DeserializationFeature first,\n            DeserializationFeature... features)\n    {\n        int newDeserFeatures \u003d _deserFeatures | first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |\u003d f.getMask();\n        }\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 332,
    "end_line": 343,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig withFeatures(DeserializationFeature... features)\n    {\n        int newDeserFeatures \u003d _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |\u003d f.getMask();\n        }\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 349,
    "end_line": 359,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig without(DeserializationFeature feature)\n    {\n        int newDeserFeatures \u003d _deserFeatures \u0026 ~feature.getMask();\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 365,
    "end_line": 372,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig without(DeserializationFeature first,\n            DeserializationFeature... features)\n    {\n        int newDeserFeatures \u003d _deserFeatures \u0026 ~first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures \u0026\u003d ~f.getMask();\n        }\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 378,
    "end_line": 389,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#395",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig withoutFeatures(DeserializationFeature... features)\n    {\n        int newDeserFeatures \u003d _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures \u0026\u003d ~f.getMask();\n        }\n        return (newDeserFeatures \u003d\u003d _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 395,
    "end_line": 405,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(JsonParser.Feature)",
    "snippet": "public DeserializationConfig with(JsonParser.Feature feature)\n    {\n        int newSet \u003d _parserFeatures | feature.getMask();\n        int newMask \u003d _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 419,
    "end_line": 427,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(JsonParser.Feature)",
    "snippet": "public DeserializationConfig withFeatures(JsonParser.Feature... features)\n    {\n        int newSet \u003d _parserFeatures;\n        int newMask \u003d _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask \u003d f.getMask();\n            newSet |\u003d mask;\n            newMask |\u003d mask;\n        }\n        return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 435,
    "end_line": 448,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(JsonParser.Feature)",
    "snippet": "public DeserializationConfig without(JsonParser.Feature feature)\n    {\n        int newSet \u003d _parserFeatures \u0026 ~feature.getMask();\n        int newMask \u003d _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 456,
    "end_line": 464,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(JsonParser.Feature)",
    "snippet": "public DeserializationConfig withoutFeatures(JsonParser.Feature... features)\n    {\n        int newSet \u003d _parserFeatures;\n        int newMask \u003d _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask \u003d f.getMask();\n            newSet \u0026\u003d ~mask;\n            newMask |\u003d mask;\n        }\n        return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
    "begin_line": 472,
    "end_line": 485,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#499",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(FormatFeature)",
    "snippet": "public DeserializationConfig with(FormatFeature feature)\n    {\n        int newSet \u003d _formatReadFeatures | feature.getMask();\n        int newMask \u003d _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 499,
    "end_line": 507,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#515",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(FormatFeature)",
    "snippet": "public DeserializationConfig withFeatures(FormatFeature... features)\n    {\n        int newSet \u003d _formatReadFeatures;\n        int newMask \u003d _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask \u003d f.getMask();\n            newSet |\u003d mask;\n            newMask |\u003d mask;\n        }\n        return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 515,
    "end_line": 528,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#536",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(FormatFeature)",
    "snippet": "public DeserializationConfig without(FormatFeature feature)\n    {\n        int newSet \u003d _formatReadFeatures \u0026 ~feature.getMask();\n        int newMask \u003d _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 536,
    "end_line": 544,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#552",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(FormatFeature)",
    "snippet": "public DeserializationConfig withoutFeatures(FormatFeature... features)\n    {\n        int newSet \u003d _formatReadFeatures;\n        int newMask \u003d _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask \u003d f.getMask();\n            newSet \u0026\u003d ~mask;\n            newMask |\u003d mask;\n        }\n        return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 552,
    "end_line": 565,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#577",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public DeserializationConfig with(JsonNodeFactory f) {\n        if (_nodeFactory \u003d\u003d f) {\n            return this;\n        }\n        return new DeserializationConfig(this, f);\n    }",
    "begin_line": 577,
    "end_line": 582,
    "comment": "/** \n * Fluent factory method that will construct a new instance with specified  {@link JsonNodeFactory}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withHandler#588",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "public DeserializationConfig withHandler(DeserializationProblemHandler h)\n    {\n        // Sanity check: let\u0027s prevent adding same handler multiple times\n        if (LinkedNode.contains(_problemHandlers, h)) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                new LinkedNode\u003cDeserializationProblemHandler\u003e(h, _problemHandlers));\n    }",
    "begin_line": 588,
    "end_line": 596,
    "comment": "/** \n * Method that can be used to add a handler that can (try to) resolve non-fatal deserialization problems.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withNoProblemHandlers#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withNoProblemHandlers()",
    "snippet": "public DeserializationConfig withNoProblemHandlers() {\n        if (_problemHandlers \u003d\u003d null) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                (LinkedNode\u003cDeserializationProblemHandler\u003e) null);\n    }",
    "begin_line": 602,
    "end_line": 608,
    "comment": "/** \n * Method for removing all configured problem handlers; usually done to replace existing handler(s) with different one(s)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.initialize#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.initialize(JsonParser)",
    "snippet": "public void initialize(JsonParser p) {\n        if (_parserFeaturesToChange !\u003d 0) {\n            p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\n        }\n        if (_formatReadFeaturesToChange !\u003d 0) {\n            p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\n        }\n    }",
    "begin_line": 623,
    "end_line": 630,
    "comment": "/** \n * Method called by  {@link ObjectMapper} and {@link ObjectReader}to modify those  {@link com.fasterxml.jackson.core.JsonParser.Feature} settingsthat have been configured via this config instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.useRootWrapping#639",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.useRootWrapping()",
    "snippet": "@Override\n    public boolean useRootWrapping()\n    {\n        if (_rootName !\u003d null) { // empty String disables wrapping; non-empty enables\n            return !_rootName.isEmpty();\n        }\n        return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\n    }",
    "begin_line": 639,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.isEnabled#647",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public final boolean isEnabled(DeserializationFeature f) {\n        return (_deserFeatures \u0026 f.getMask()) !\u003d 0;\n    }",
    "begin_line": 647,
    "end_line": 649,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.isEnabled#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(JsonParser.Feature, JsonFactory)",
    "snippet": "public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {\n        int mask \u003d f.getMask();\n        if ((_parserFeaturesToChange \u0026 mask) !\u003d 0) {\n            return (_parserFeatures \u0026 f.getMask()) !\u003d 0;\n        }\n        return factory.isEnabled(f);\n    }",
    "begin_line": 651,
    "end_line": 657,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.hasDeserializationFeatures#665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.hasDeserializationFeatures(int)",
    "snippet": "public final boolean hasDeserializationFeatures(int featureMask) {\n        return (_deserFeatures \u0026 featureMask) \u003d\u003d featureMask;\n    }",
    "begin_line": 665,
    "end_line": 667,
    "comment": "/** \n * Bulk access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.hasSomeOfFeatures#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.hasSomeOfFeatures(int)",
    "snippet": "public final boolean hasSomeOfFeatures(int featureMask) {\n        return (_deserFeatures \u0026 featureMask) !\u003d 0;\n    }",
    "begin_line": 675,
    "end_line": 677,
    "comment": "/** \n * Bulk access method for checking that at least one of features specified by mask is enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getDeserializationFeatures#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getDeserializationFeatures()",
    "snippet": "public final int getDeserializationFeatures() {\n        return _deserFeatures;\n    }",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Bulk access method for getting the bit mask of all  {@link DeserializationFeature}s that are enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getProblemHandlers#697",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getProblemHandlers()",
    "snippet": "public LinkedNode\u003cDeserializationProblemHandler\u003e getProblemHandlers() {\n        return _problemHandlers;\n    }",
    "begin_line": 697,
    "end_line": 699,
    "comment": "/** \n * Method for getting head of the problem handler chain. May be null, if no handlers have been added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getNodeFactory#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getNodeFactory()",
    "snippet": "public final JsonNodeFactory getNodeFactory() {\n        return _nodeFactory;\n    }",
    "begin_line": 701,
    "end_line": 703,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspect#718",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspect(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT extends BeanDescription\u003e T introspect(JavaType type) {\n        return (T) getClassIntrospector().forDeserialization(this, type, this);\n    }",
    "begin_line": 718,
    "end_line": 720,
    "comment": "/** \n * Method that will introspect full bean properties for the purpose of building a bean deserializer\n * @param type Type of class to be introspected\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspectForCreation#727",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspectForCreation(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT extends BeanDescription\u003e T introspectForCreation(JavaType type) {\n        return (T) getClassIntrospector().forCreation(this, type, this);\n    }",
    "begin_line": 727,
    "end_line": 729,
    "comment": "/** \n * Method that will introspect subset of bean properties needed to construct bean instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspectForBuilder#735",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspectForBuilder(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT extends BeanDescription\u003e T introspectForBuilder(JavaType type) {\n        return (T) getClassIntrospector().forDeserializationWithBuilder(this, type, this);\n    }",
    "begin_line": 735,
    "end_line": 737,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.findTypeDeserializer#752",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.findTypeDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeDeserializer findTypeDeserializer(JavaType baseType)\n        throws JsonMappingException\n    {\n        BeanDescription bean \u003d introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac \u003d bean.getClassInfo();\n        TypeResolverBuilder\u003c?\u003e b \u003d getAnnotationIntrospector().findTypeResolver(this, ac, baseType);\n\n        /* Ok: if there is no explicit type info handler, we may want to\n         * use a default. If so, config object knows what to use.\n         */\n        Collection\u003cNamedType\u003e subtypes \u003d null;\n        if (b \u003d\u003d null) {\n            b \u003d getDefaultTyper(baseType);\n            if (b \u003d\u003d null) {\n                return null;\n            }\n        } else {\n            subtypes \u003d getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ac);\n        }\n        /* 04-May-2014, tatu: When called from DeserializerFactory, additional code like\n         *   this is invoked. But here we do not actually have access to mappings, so not\n         *   quite sure what to do, if anything. May need to revisit if the underlying\n         *   problem re-surfaces...\n         */\n        /*\n        if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n            JavaType defaultType \u003d mapAbstractType(config, baseType);\n            if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n                b \u003d b.defaultImpl(defaultType.getRawClass());\n            }\n        }\n        */\n        return b.buildTypeDeserializer(this, baseType, subtypes);\n    }",
    "begin_line": 752,
    "end_line": 785,
    "comment": "/** \n * Helper method that is needed to properly handle polymorphic referenced types, such as types referenced by  {@link java.util.concurrent.atomic.AtomicReference}, or various \"optional\" types.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DeserializationContext(DeserializerFactory df) {\n        this(df, null);\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.deser.DeserializerCache)",
    "snippet": "protected DeserializationContext(DeserializerFactory df,\n            DeserializerCache cache)\n    {\n        if (df \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null DeserializerFactory\");\n        }\n        _factory \u003d df;\n        if (cache \u003d\u003d null) {\n            cache \u003d new DeserializerCache();\n        }\n        _cache \u003d cache;\n        _featureFlags \u003d 0;\n        _config \u003d null;\n        _injectableValues \u003d null;\n        _view \u003d null;\n        _attributes \u003d null;\n    }",
    "begin_line": 153,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DeserializationContext(DeserializationContext src,\n            DeserializerFactory factory)\n    {\n        _cache \u003d src._cache;\n        _factory \u003d factory;\n        \n        _config \u003d src._config;\n        _featureFlags \u003d src._featureFlags;\n        _view \u003d src._view;\n        _parser \u003d src._parser;\n        _injectableValues \u003d src._injectableValues;\n        _attributes \u003d src._attributes;\n    }",
    "begin_line": 171,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected DeserializationContext(DeserializationContext src,\n            DeserializationConfig config, JsonParser p,\n            InjectableValues injectableValues)\n    {\n        _cache \u003d src._cache;\n        _factory \u003d src._factory;\n        \n        _config \u003d config;\n        _featureFlags \u003d config.getDeserializationFeatures();\n        _view \u003d config.getActiveView();\n        _parser \u003d p;\n        _injectableValues \u003d injectableValues;\n        _attributes \u003d config.getAttributes();\n    }",
    "begin_line": 188,
    "end_line": 201,
    "comment": "/** \n * Constructor used for creating actual per-call instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected DeserializationContext(DeserializationContext src) {\n        _cache \u003d new DeserializerCache();\n        _factory \u003d src._factory;\n\n        _config \u003d src._config;\n        _featureFlags \u003d src._featureFlags;\n        _view \u003d src._view;\n        _injectableValues \u003d null;\n    }",
    "begin_line": 206,
    "end_line": 214,
    "comment": "/** \n * Copy-constructor for use with \u003ccode\u003ecopy()\u003c/code\u003e by  {@link ObjectMapper#copy()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getConfig#223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getConfig()",
    "snippet": "@Override\n    public DeserializationConfig getConfig() { return _config; }",
    "begin_line": 223,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getActiveView#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getActiveView()",
    "snippet": "@Override\n    public final Class\u003c?\u003e getActiveView() { return _view; }",
    "begin_line": 226,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.canOverrideAccessModifiers#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers()",
    "snippet": "@Override\n    public final boolean canOverrideAccessModifiers() {\n        return _config.canOverrideAccessModifiers();\n    }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.isEnabled#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override\n    public final boolean isEnabled(MapperFeature feature) {\n        return _config.isEnabled(feature);\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDefaultPropertyFormat#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType) {\n        return _config.getDefaultPropertyFormat(baseType);\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getAnnotationIntrospector#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector()",
    "snippet": "@Override\n    public final AnnotationIntrospector getAnnotationIntrospector() {\n        return _config.getAnnotationIntrospector();\n    }",
    "begin_line": 244,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getTypeFactory#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory()",
    "snippet": "@Override\n    public final TypeFactory getTypeFactory() {\n        return _config.getTypeFactory();\n    }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getLocale#260",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getLocale()",
    "snippet": "@Override\n    public Locale getLocale() {\n        return _config.getLocale();\n    }",
    "begin_line": 260,
    "end_line": 262,
    "comment": "/** \n * Method for accessing default Locale to use: convenience method for \u003cpre\u003e getConfig().getLocale(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getTimeZone#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()",
    "snippet": "@Override\n    public TimeZone getTimeZone() {\n        return _config.getTimeZone();\n    }",
    "begin_line": 271,
    "end_line": 273,
    "comment": "/** \n * Method for accessing default TimeZone to use: convenience method for \u003cpre\u003e getConfig().getTimeZone(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getAttribute#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getAttribute(java.lang.Object)",
    "snippet": "@Override\n    public Object getAttribute(Object key) {\n        return _attributes.getAttribute(key);\n    }",
    "begin_line": 282,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.setAttribute#287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override\n    public DeserializationContext setAttribute(Object key, Object value)\n    {\n        _attributes \u003d _attributes.withPerCallAttribute(key, value);\n        return this;\n    }",
    "begin_line": 287,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getContextualType#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getContextualType()",
    "snippet": "public JavaType getContextualType() {\n        return (_currentType \u003d\u003d null) ? null : _currentType.value();\n    }",
    "begin_line": 306,
    "end_line": 308,
    "comment": "/** \n * Accessor to  {@link JavaType} of currently contextualized{@link ContextualDeserializer}, if any. This is sometimes useful for generic  {@link JsonDeserializer}s that do not get passed (or do not retain) type information when being constructed: happens for example for deserializers constructed from annotations.\n * @since 2.5\n * @return Type of {@link ContextualDeserializer} being contextualized,if process is on-going; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getFactory#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getFactory()",
    "snippet": "public DeserializerFactory getFactory() {\n        return _factory;\n    }",
    "begin_line": 319,
    "end_line": 321,
    "comment": "/** \n * Method for getting current  {@link DeserializerFactory}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.isEnabled#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public final boolean isEnabled(DeserializationFeature feat) {\n        /* 03-Dec-2010, tatu: minor shortcut; since this is called quite often,\n         *   let\u0027s use a local copy of feature settings:\n         */\n        return (_featureFlags \u0026 feat.getMask()) !\u003d 0;\n    }",
    "begin_line": 327,
    "end_line": 332,
    "comment": "/** \n * Convenience method for checking whether specified on/off feature is enabled\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDeserializationFeatures#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures()",
    "snippet": "public final int getDeserializationFeatures() {\n        return _featureFlags;\n    }",
    "begin_line": 340,
    "end_line": 342,
    "comment": "/** \n * Bulk access method for getting the bit mask of all  {@link DeserializationFeature}s that are enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasDeserializationFeatures#350",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures(int)",
    "snippet": "public final boolean hasDeserializationFeatures(int featureMask) {\n        return (_featureFlags \u0026 featureMask) \u003d\u003d featureMask;\n    }",
    "begin_line": 350,
    "end_line": 352,
    "comment": "/** \n * Bulk access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasSomeOfFeatures#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures(int)",
    "snippet": "public final boolean hasSomeOfFeatures(int featureMask) {\n        return (_featureFlags \u0026 featureMask) !\u003d 0;\n    }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Bulk access method for checking that at least one of features specified by mask is enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getParser#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getParser()",
    "snippet": "public final JsonParser getParser() { return _parser; }",
    "begin_line": 372,
    "end_line": 372,
    "comment": "/** \n * Method for accessing the currently active parser. May be different from the outermost parser when content is buffered. \u003cp\u003e Use of this method is discouraged: if code has direct access to the active parser, that should be used instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findInjectableValue#374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue(java.lang.Object, com.fasterxml.jackson.databind.BeanProperty, java.lang.Object)",
    "snippet": "public final Object findInjectableValue(Object valueId,\n            BeanProperty forProperty, Object beanInstance)\n        throws JsonMappingException\n    {\n        if (_injectableValues \u003d\u003d null) {\n            reportBadDefinition(ClassUtil.classOf(valueId), String.format(\n\"No \u0027injectableValues\u0027 configured, can not inject value with id [%s]\", valueId));\n        }\n        return _injectableValues.findInjectableValue(valueId, this, forProperty, beanInstance);\n    }",
    "begin_line": 374,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getBase64Variant#393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()",
    "snippet": "public final Base64Variant getBase64Variant() {\n        return _config.getBase64Variant();\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Convenience method for accessing the default Base64 encoding used for decoding base64 encoded binary content. Same as calling: \u003cpre\u003e getConfig().getBase64Variant(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getNodeFactory#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory()",
    "snippet": "public final JsonNodeFactory getNodeFactory() {\n        return _config.getNodeFactory();\n    }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Convenience method, functionally equivalent to: \u003cpre\u003e getConfig().getNodeFactory(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasValueDeserializerFor#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(com.fasterxml.jackson.databind.JavaType, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean hasValueDeserializerFor(JavaType type, AtomicReference\u003cThrowable\u003e cause) {\n        try {\n            return _cache.hasValueDeserializerFor(this, _factory, type);\n        } catch (JsonMappingException e) {\n            if (cause !\u003d null) {\n                cause.set(e);\n            }\n        } catch (RuntimeException e) {\n            if (cause \u003d\u003d null) { // earlier behavior\n                throw e;\n            }\n            cause.set(e);\n        }\n        return false;\n    }",
    "begin_line": 420,
    "end_line": 434,
    "comment": "/** \n * Method for checking whether we could find a deserializer for given type.\n * @param type\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findContextualValueDeserializer#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public final JsonDeserializer\u003cObject\u003e findContextualValueDeserializer(JavaType type,\n            BeanProperty prop) throws JsonMappingException\n    {\n        JsonDeserializer\u003cObject\u003e deser \u003d _cache.findValueDeserializer(this, _factory, type);\n        if (deser !\u003d null) {\n            deser \u003d (JsonDeserializer\u003cObject\u003e) handleSecondaryContextualization(deser, prop, type);\n        }\n        return deser;\n    }",
    "begin_line": 441,
    "end_line": 449,
    "comment": "/** \n * Method for finding a value deserializer, and creating a contextual version if necessary, for value reached via specified property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findNonContextualValueDeserializer#464",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final JsonDeserializer\u003cObject\u003e findNonContextualValueDeserializer(JavaType type)\n        throws JsonMappingException\n    {\n        return _cache.findValueDeserializer(this, _factory, type);\n    }",
    "begin_line": 464,
    "end_line": 468,
    "comment": "/** \n * Variant that will try to locate deserializer for current type, but without performing any contextualization (unlike  {@link #findContextualValueDeserializer}) or checking for need to create a  {@link TypeDeserializer} (unlike{@link #findRootValueDeserializer(JavaType)}. This method is usually called from within  {@link ResolvableDeserializer#resolve}, and expectation is that caller then calls either {@link #handlePrimaryContextualization(JsonDeserializer,BeanProperty,JavaType)} or{@link #handleSecondaryContextualization(JsonDeserializer,BeanProperty,JavaType)} at alater point, as necessary.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findRootValueDeserializer#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public final JsonDeserializer\u003cObject\u003e findRootValueDeserializer(JavaType type)\n        throws JsonMappingException\n    {\n        JsonDeserializer\u003cObject\u003e deser \u003d _cache.findValueDeserializer(this,\n                _factory, type);\n        if (deser \u003d\u003d null) { // can this occur?\n            return null;\n        }\n        deser \u003d (JsonDeserializer\u003cObject\u003e) handleSecondaryContextualization(deser, null, type);\n        TypeDeserializer typeDeser \u003d _factory.findTypeDeserializer(_config, type);\n        if (typeDeser !\u003d null) {\n            // important: contextualize to indicate this is for root value\n            typeDeser \u003d typeDeser.forProperty(null);\n            return new TypeWrappedDeserializer(typeDeser, deser);\n        }\n        return deser;\n    }",
    "begin_line": 474,
    "end_line": 490,
    "comment": "/** \n * Method for finding a deserializer for root-level value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findKeyDeserializer#498",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public final KeyDeserializer findKeyDeserializer(JavaType keyType,\n            BeanProperty prop) throws JsonMappingException {\n        KeyDeserializer kd \u003d _cache.findKeyDeserializer(this,\n                _factory, keyType);\n        // Second: contextualize?\n        if (kd instanceof ContextualKeyDeserializer) {\n            kd \u003d ((ContextualKeyDeserializer) kd).createContextual(this, prop);\n        }\n        return kd;\n    }",
    "begin_line": 498,
    "end_line": 507,
    "comment": "/** \n * Convenience method, functionally same as: \u003cpre\u003e getDeserializerProvider().findKeyDeserializer(getConfig(), prop.getType(), prop); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findObjectId#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e, ObjectIdResolver)",
    "snippet": "public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolver);",
    "begin_line": 519,
    "end_line": 519,
    "comment": "/** \n * Method called to find and return entry corresponding to given Object Id: will add an entry if necessary, and never returns null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.checkUnresolvedObjectId#527",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId()",
    "snippet": "public abstract void checkUnresolvedObjectId()\n        throws UnresolvedForwardReference;",
    "begin_line": 527,
    "end_line": 528,
    "comment": "/** \n * Method called to ensure that every object id encounter during processing are resolved.\n * @throws UnresolvedForwardReference\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.constructType#542",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JavaType constructType(Class\u003c?\u003e cls) {\n        return (cls \u003d\u003d null) ? null : _config.constructType(cls);\n    }",
    "begin_line": 542,
    "end_line": 544,
    "comment": "/** \n * Convenience method, functionally equivalent to: \u003cpre\u003e getConfig().constructType(cls); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findClass#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findClass(java.lang.String)",
    "snippet": "public Class\u003c?\u003e findClass(String className) throws ClassNotFoundException\n    {\n        // By default, delegate to ClassUtil: can be overridden with custom handling\n        return getTypeFactory().findClass(className);\n    }",
    "begin_line": 554,
    "end_line": 558,
    "comment": "/** \n * Helper method that is to be used when resolving basic class name into Class instance, the reason being that it may be necessary to work around various ClassLoader limitations, as well as to handle primitive type signatures.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.leaseObjectBuffer#572",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer()",
    "snippet": "public final ObjectBuffer leaseObjectBuffer()\n    {\n        ObjectBuffer buf \u003d _objectBuffer;\n        if (buf \u003d\u003d null) {\n            buf \u003d new ObjectBuffer();\n        } else {\n            _objectBuffer \u003d null;\n        }\n        return buf;\n    }",
    "begin_line": 572,
    "end_line": 581,
    "comment": "/** \n * Method that can be used to get access to a reusable ObjectBuffer, useful for efficiently constructing Object arrays and Lists. Note that leased buffers should be returned once deserializer is done, to allow for reuse during same round of deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.returnObjectBuffer#589",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)",
    "snippet": "public final void returnObjectBuffer(ObjectBuffer buf)\n    {\n        /* Already have a reusable buffer? Let\u0027s retain bigger one\n         * (or if equal, favor newer one, shorter life-cycle)\n         */\n        if (_objectBuffer \u003d\u003d null\n            || buf.initialCapacity() \u003e\u003d _objectBuffer.initialCapacity()) {\n            _objectBuffer \u003d buf;\n        }\n    }",
    "begin_line": 589,
    "end_line": 598,
    "comment": "/** \n * Method to call to return object buffer previously leased with {@link #leaseObjectBuffer}.\n * @param buf Returned object buffer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getArrayBuilders#604",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders()",
    "snippet": "public final ArrayBuilders getArrayBuilders()\n    {\n        if (_arrayBuilders \u003d\u003d null) {\n            _arrayBuilders \u003d new ArrayBuilders();\n        }\n        return _arrayBuilders;\n    }",
    "begin_line": 604,
    "end_line": 610,
    "comment": "/** \n * Method for accessing object useful for building arrays of primitive types (such as int[]).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.deserializerInstance#618",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e deserializerInstance(Annotated annotated,\n            Object deserDef)\n        throws JsonMappingException;",
    "begin_line": 618,
    "end_line": 620,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.keyDeserializerInstance#622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated,\n            Object deserDef)\n        throws JsonMappingException;",
    "begin_line": 622,
    "end_line": 624,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handlePrimaryContextualization#644",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003c?\u003e handlePrimaryContextualization(JsonDeserializer\u003c?\u003e deser,\n            BeanProperty prop, JavaType type)\n        throws JsonMappingException\n    {\n        if (deser instanceof ContextualDeserializer) {\n            _currentType \u003d new LinkedNode\u003cJavaType\u003e(type, _currentType);\n            try {\n                deser \u003d ((ContextualDeserializer) deser).createContextual(this, prop);\n            } finally {\n                _currentType \u003d _currentType.next();\n            }\n        }\n        return deser;\n    }",
    "begin_line": 644,
    "end_line": 657,
    "comment": "/** \n * Method called for primary property deserializers (ones directly created to deserialize values of a POJO property), to handle details of resolving {@link ContextualDeserializer} with given property context.\n * @param prop Property for which the given primary deserializer is used; never null.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleSecondaryContextualization#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003c?\u003e handleSecondaryContextualization(JsonDeserializer\u003c?\u003e deser,\n            BeanProperty prop, JavaType type)\n        throws JsonMappingException\n    {\n        if (deser instanceof ContextualDeserializer) {\n            _currentType \u003d new LinkedNode\u003cJavaType\u003e(type, _currentType);\n            try {\n                deser \u003d ((ContextualDeserializer) deser).createContextual(this, prop);\n            } finally {\n                _currentType \u003d _currentType.next();\n            }\n        }\n        return deser;\n    }",
    "begin_line": 675,
    "end_line": 688,
    "comment": "/** \n * Method called for secondary property deserializers (ones NOT directly created to deal with an annotatable POJO property, but instead created as a component -- such as value deserializers for structured types, or deserializers for root values) to handle details of resolving {@link ContextualDeserializer} with given property context.Given that these deserializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.\n * @param prop Property for which deserializer is used, if any; nullwhen deserializing root values\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.parseDate#706",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.parseDate(java.lang.String)",
    "snippet": "public Date parseDate(String dateStr) throws IllegalArgumentException\n    {\n        try {\n            DateFormat df \u003d getDateFormat();\n            return df.parse(dateStr);\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(String.format(\n                    \"Failed to parse Date value \u0027%s\u0027: %s\", dateStr, e.getMessage()));\n        }\n    }",
    "begin_line": 706,
    "end_line": 715,
    "comment": "/** \n * Convenience method for parsing a Date from given String, using currently configured date format (accessed using {@link DeserializationConfig#getDateFormat()}). \u003cp\u003e Implementation will handle thread-safety issues related to date formats such that first time this method is called, date format is cloned, and cloned instance will be retained for use during this deserialization round.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.constructCalendar#721",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.constructCalendar(java.util.Date)",
    "snippet": "public Calendar constructCalendar(Date d) {\n        // 08-Jan-2008, tatu: not optimal, but should work for the most part; let\u0027s revise as needed.\n        Calendar c \u003d Calendar.getInstance(getTimeZone());\n        c.setTime(d);\n        return c;\n    }",
    "begin_line": 721,
    "end_line": 726,
    "comment": "/** \n * Convenience method for constructing Calendar instance set to specified time, to be modified and used by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readValue#745",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readValue(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "public \u003cT\u003e T readValue(JsonParser p, Class\u003cT\u003e type) throws IOException {\n        return readValue(p, getTypeFactory().constructType(type));\n    }",
    "begin_line": 745,
    "end_line": 747,
    "comment": "/** \n * Convenience method that may be used by composite or container deserializers, for reading one-off values contained (for sequences, it is more efficient to actually fetch deserializer once for the whole collection). \u003cp\u003e NOTE: when deserializing values of properties contained in composite types, rather use  {@link #readPropertyValue(JsonParser,BeanProperty,Class)}; this method does not allow use of contextual annotations.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readValue#753",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readValue(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(JsonParser p, JavaType type) throws IOException {\n        JsonDeserializer\u003cObject\u003e deser \u003d findRootValueDeserializer(type);\n        if (deser \u003d\u003d null) {\n            reportBadDefinition(type,\n                    \"Could not find JsonDeserializer for type \"+type);\n        }\n        return (T) deser.deserialize(p, this);\n    }",
    "begin_line": 753,
    "end_line": 760,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readPropertyValue#770",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue(JsonParser, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003cT\u003e)",
    "snippet": "public \u003cT\u003e T readPropertyValue(JsonParser p, BeanProperty prop, Class\u003cT\u003e type) throws IOException {\n        return readPropertyValue(p, prop, getTypeFactory().constructType(type));\n    }",
    "begin_line": 770,
    "end_line": 772,
    "comment": "/** \n * Convenience method that may be used by composite or container deserializers, for reading one-off values for the composite type, taking into account annotations that the property (passed to this method -- usually property that has custom serializer that called this method) has.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readPropertyValue#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue(JsonParser, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException {\n        JsonDeserializer\u003cObject\u003e deser \u003d findContextualValueDeserializer(type, prop);\n        if (deser \u003d\u003d null) {\n            return reportBadDefinition(type, String.format(\n                    \"Could not find JsonDeserializer for type %s (via property %s)\",\n                    type, ClassUtil.nameOf(prop)));\n        }\n        return (T) deser.deserialize(p, this);\n    }",
    "begin_line": 778,
    "end_line": 786,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnknownProperty#803",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(JsonParser, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, java.lang.Object, java.lang.String)",
    "snippet": "public boolean handleUnknownProperty(JsonParser p, JsonDeserializer\u003c?\u003e deser,\n            Object instanceOrClass, String propName)\n        throws IOException\n    {\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            if (h.value().handleUnknownProperty(this, p, deser, instanceOrClass, propName)) {\n                return true;\n            }\n            h \u003d h.next();\n        }\n        // Nope, not handled. Potentially that\u0027s a problem...\n        if (!isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n            p.skipChildren();\n            return true;\n        }\n        // Do we know properties that are expected instead?\n        Collection\u003cObject\u003e propIds \u003d (deser \u003d\u003d null) ? null : deser.getKnownPropertyNames();\n        throw UnrecognizedPropertyException.from(_parser,\n                instanceOrClass, propName, propIds);\n    }",
    "begin_line": 803,
    "end_line": 824,
    "comment": "/** \n * Method that deserializers should call if they encounter an unrecognized property (and once that is not explicitly designed as ignorable), to inform possibly configured  {@link DeserializationProblemHandler}s and let it handle the problem.\n * @return True if there was a configured problem handler that was able to handle theproblem\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdKey#845",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdKey(Class\u003c?\u003e keyClass, String keyValue,\n            String msg, Object... msgArgs)\n        throws IOException\n    {\n        // but if not handled, just throw exception\n        msg \u003d _format(msg, msgArgs);\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            Object key \u003d h.value().handleWeirdKey(this, keyClass, keyValue, msg);\n            if (key !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                // Sanity check for broken handlers, otherwise nasty to debug:\n                if ((key \u003d\u003d null) || keyClass.isInstance(key)) {\n                    return key;\n                }\n                throw weirdStringException(keyValue, keyClass, String.format(\n                        \"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\",\n                        keyClass, key.getClass()));\n            }\n            h \u003d h.next();\n        }\n        throw weirdKeyException(keyClass, keyValue, msg);\n    }",
    "begin_line": 845,
    "end_line": 867,
    "comment": "/** \n * Method that deserializers should call if they encounter a String value that can not be converted to expected key of a  {@link java.util.Map}valued property. Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdNumberValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param keyClass Expected type for key\n * @param keyValue String value from which to deserialize key\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Key value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdStringValue#889",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdStringValue(Class\u003c?\u003e targetClass, String value,\n            String msg, Object... msgArgs)\n        throws IOException\n    {\n        // but if not handled, just throw exception\n        msg \u003d _format(msg, msgArgs);\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            Object instance \u003d h.value().handleWeirdStringValue(this, targetClass, value, msg);\n            if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                // Sanity check for broken handlers, otherwise nasty to debug:\n                if ((instance \u003d\u003d null) || targetClass.isInstance(instance)) {\n                    return instance;\n                }\n                throw weirdStringException(value, targetClass, String.format(\n                        \"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\",\n                        targetClass, instance.getClass()));\n            }\n            h \u003d h.next();\n        }\n        throw weirdStringException(value, targetClass, msg);\n    }",
    "begin_line": 889,
    "end_line": 911,
    "comment": "/** \n * Method that deserializers should call if they encounter a String value that can not be converted to target property type, in cases where some String values could be acceptable (either with different settings, or different value). Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdStringValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param targetClass Type of property into which incoming number should be converted\n * @param value String value from which to deserialize property value\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Property value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdNumberValue#933",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue(java.lang.Class\u003c?\u003e, java.lang.Number, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdNumberValue(Class\u003c?\u003e targetClass, Number value,\n            String msg, Object... msgArgs)\n        throws IOException\n    {\n        msg \u003d _format(msg, msgArgs);\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            Object key \u003d h.value().handleWeirdNumberValue(this, targetClass, value, msg);\n            if (key !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                // Sanity check for broken handlers, otherwise nasty to debug:\n                if ((key \u003d\u003d null) || targetClass.isInstance(key)) {\n                    return key;\n                }\n                throw weirdNumberException(value, targetClass, String.format(\n                        \"DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s\",\n                        targetClass, key.getClass()));\n            }\n            h \u003d h.next();\n        }\n        throw weirdNumberException(value, targetClass, msg);\n    }",
    "begin_line": 933,
    "end_line": 954,
    "comment": "/** \n * Method that deserializers should call if they encounter a numeric value that can not be converted to target property type, in cases where some numeric values could be acceptable (either with different settings, or different numeric value). Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdNumberValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param targetClass Type of property into which incoming number should be converted\n * @param value Number value from which to deserialize property value\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Property value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleMissingInstantiator#974",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.deser.ValueInstantiator, JsonParser, java.lang.String, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\")\n    public Object handleMissingInstantiator(Class\u003c?\u003e instClass, ValueInstantiator valueInst,\n            JsonParser p, String msg, Object... msgArgs)\n        throws IOException\n    {\n        if (p \u003d\u003d null) {\n            p \u003d getParser();\n        }\n        msg \u003d _format(msg, msgArgs);\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            Object instance \u003d h.value().handleMissingInstantiator(this,\n                    instClass, valueInst, p, msg);\n            if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                // Sanity check for broken handlers, otherwise nasty to debug:\n                if ((instance \u003d\u003d null) || instClass.isInstance(instance)) {\n                    return instance;\n                }\n                reportBadDefinition(constructType(instClass), String.format(\n\"DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s\",\n                        instClass, ClassUtil.classNameOf(instance)));\n            }\n            h \u003d h.next();\n        }\n\n        // 16-Oct-2016, tatu: This is either a definition problem (if no applicable creator\n        //   exists), or input mismatch problem (otherwise) since none of existing creators\n        //   match with token.\n        if ((valueInst !\u003d null) \u0026\u0026 !valueInst.canInstantiate()) {\n            msg \u003d String.format(\"Can not construct instance of %s (no Creators, like default construct, exist): %s\",\n                    ClassUtil.nameOf(instClass), msg);\n            return reportBadDefinition(constructType(instClass), msg);\n        }\n        msg \u003d String.format(\"Can not construct instance of %s (although at least one Creator exists): %s\",\n                ClassUtil.nameOf(instClass), msg);\n        return reportInputMismatch(instClass, msg);\n    }",
    "begin_line": 974,
    "end_line": 1010,
    "comment": "/** \n * Method that deserializers should call if they fail to instantiate value due to lack of viable instantiator (usually creator, that is, constructor or static factory method). Method should be called at point where value has not been decoded, so that handler has a chance to handle decoding using alternate mechanism, and handle underlying content (possibly by just skipping it) to keep input state valid\n * @param instClass Type that was to be instantiated\n * @param valueInst (optional) Value instantiator to be used, if any; null if type does notuse one for instantiation (custom deserialiers don\u0027t; standard POJO deserializer does)\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.9 (2.8 had alternate that did not take \u003ccode\u003eValueInstantiator\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleInstantiationProblem#1029",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(java.lang.Class\u003c?\u003e, java.lang.Object, java.lang.Throwable)",
    "snippet": "public Object handleInstantiationProblem(Class\u003c?\u003e instClass, Object argument,\n            Throwable t)\n        throws IOException\n    {\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            Object instance \u003d h.value().handleInstantiationProblem(this, instClass, argument, t);\n            if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                // Sanity check for broken handlers, otherwise nasty to debug:\n                if (instClass.isInstance(instance)) {\n                    return instance;\n                }\n                reportBadDefinition(constructType(instClass), String.format(\n\"DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s\",\n                        instClass, ClassUtil.classNameOf(instance)));\n            }\n            h \u003d h.next();\n        }\n        // 18-May-2016, tatu: Only wrap if not already a valid type to throw\n        ClassUtil.throwIfIOE(t);\n        throw instantiationException(instClass, t);\n    }",
    "begin_line": 1029,
    "end_line": 1051,
    "comment": "/** \n * Method that deserializers should call if they fail to instantiate value due to an exception that was thrown by constructor (or other mechanism used to create instances). Default implementation will try to call  {@link DeserializationProblemHandler#handleInstantiationProblem}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with  {@link #instantiationException}.\n * @param instClass Type that was to be instantiated\n * @param argument (optional) Argument that was passed to constructor or equivalentinstantiator; often a  {@link java.lang.String}.\n * @param t Exception that caused failure\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnexpectedToken#1067",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class\u003c?\u003e, JsonParser)",
    "snippet": "public Object handleUnexpectedToken(Class\u003c?\u003e instClass, JsonParser p)\n        throws IOException\n    {\n        return handleUnexpectedToken(instClass, p.getCurrentToken(), p, null);\n    }",
    "begin_line": 1067,
    "end_line": 1071,
    "comment": "/** \n * Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer can not handle). This could occur, for example, if a Number deserializer encounter  {@link JsonToken#START_ARRAY} instead of{@link JsonToken#VALUE_NUMBER_INT} or {@link JsonToken#VALUE_NUMBER_FLOAT}.\n * @param instClass Type that was to be instantiated\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnexpectedToken#1088",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class\u003c?\u003e, JsonToken, JsonParser, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleUnexpectedToken(Class\u003c?\u003e instClass, JsonToken t,\n            JsonParser p, String msg, Object... msgArgs)\n        throws IOException\n    {\n        msg \u003d _format(msg, msgArgs);\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            Object instance \u003d h.value().handleUnexpectedToken(this,\n                    instClass, t, p, msg);\n            if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n                if ((instance \u003d\u003d null) || instClass.isInstance(instance)) {\n                    return instance;\n                }\n                reportBadDefinition(constructType(instClass), String.format(\n                        \"DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s\",\n                        instance.getClass()));\n            }\n            h \u003d h.next();\n        }\n        if (msg \u003d\u003d null) {\n            if (t \u003d\u003d null) {\n                msg \u003d String.format(\"Unexpected end-of-input when binding data into %s\",\n                        _calcName(instClass));\n            } else {\n                msg \u003d String.format(\"Can not deserialize instance of %s out of %s token\",\n                        _calcName(instClass), t);\n            }\n        }\n        reportInputMismatch(instClass, msg);\n        return null; // never gets here\n    }",
    "begin_line": 1088,
    "end_line": 1118,
    "comment": "/** \n * Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer can not handle). This could occur, for example, if a Number deserializer encounter  {@link JsonToken#START_ARRAY} instead of{@link JsonToken#VALUE_NUMBER_INT} or {@link JsonToken#VALUE_NUMBER_FLOAT}.\n * @param instClass Type that was to be instantiated\n * @param t Token encountered that does match expected\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnknownTypeId#1140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleUnknownTypeId(JavaType baseType, String id,\n            TypeIdResolver idResolver, String extraDesc) throws IOException\n    {\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            JavaType type \u003d h.value().handleUnknownTypeId(this, baseType, id, idResolver, extraDesc);\n            if (type !\u003d null) {\n                if (type.hasRawClass(Void.class)) {\n                    return null;\n                }\n                // But ensure there\u0027s type compatibility\n                if (type.isTypeOrSubTypeOf(baseType.getRawClass())) {\n                    return type;\n                }\n                throw unknownTypeIdException(baseType, id,\n                        \"problem handler tried to resolve into non-subtype: \"+type);\n            }\n            h \u003d h.next();\n        }\n        // 24-May-2016, tatu: Actually we may still not want to fail quite yet\n        if (!isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n            return null;\n        }\n        throw unknownTypeIdException(baseType, id, extraDesc);\n    }",
    "begin_line": 1140,
    "end_line": 1165,
    "comment": "/** \n * Method that deserializers should call if they encounter a type id (for polymorphic deserialization) that can not be resolved to an actual type; usually since there is no mapping defined. Default implementation will try to call  {@link DeserializationProblemHandler#handleUnknownTypeId}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with  {@link #unknownTypeIdException}.\n * @param baseType Base type from which resolution starts\n * @param id Type id that could not be converted\n * @param extraDesc Additional problem description to add to default exception message,if resolution fails.\n * @return {@link JavaType} that id resolves to\n * @throws IOException To indicate unrecoverable problem, if resolution can notbe made to work\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleMissingTypeId#1170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleMissingTypeId(JavaType baseType,\n            TypeIdResolver idResolver, String extraDesc) throws IOException\n    {\n        LinkedNode\u003cDeserializationProblemHandler\u003e h \u003d _config.getProblemHandlers();\n        while (h !\u003d null) {\n            // Can bail out if it\u0027s handled\n            JavaType type \u003d h.value().handleMissingTypeId(this, baseType, idResolver, extraDesc);\n            if (type !\u003d null) {\n                if (type.hasRawClass(Void.class)) {\n                    return null;\n                }\n                // But ensure there\u0027s type compatibility\n                if (type.isTypeOrSubTypeOf(baseType.getRawClass())) {\n                    return type;\n                }\n                throw unknownTypeIdException(baseType, null,\n                        \"problem handler tried to resolve into non-subtype: \"+type);\n            }\n            h \u003d h.next();\n        }\n        // 09-Mar-2017, tatu: We may want to consider yet another feature at some\n        //    point to allow returning `null`... but that seems bit risky for now\n//        if (!isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n//            return null;\n//        }\n        throw missingTypeIdException(baseType, extraDesc);\n    }",
    "begin_line": 1170,
    "end_line": 1196,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(JsonDeserializer\u003c?\u003e deser,\n            JsonToken expToken, String msg, Object... msgArgs)\n        throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw wrongTokenException(getParser(), deser.handledType(), expToken, msg);\n    }",
    "begin_line": 1215,
    "end_line": 1221,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JavaType, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(JavaType targetType,\n            JsonToken expToken, String msg, Object... msgArgs)\n        throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw wrongTokenException(getParser(), targetType, expToken, msg);\n    }",
    "begin_line": 1233,
    "end_line": 1239,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(java.lang.Class\u003c?\u003e, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(Class\u003c?\u003e targetType,\n            JsonToken expToken, String msg, Object... msgArgs)\n        throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw wrongTokenException(getParser(), targetType, expToken, msg);\n    }",
    "begin_line": 1251,
    "end_line": 1257,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportUnresolvedObjectId#1262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean)\n        throws JsonMappingException\n    {\n        String msg \u003d String.format(\"No Object Id found for an instance of %s, to assign to property \u0027%s\u0027\",\n                ClassUtil.classNameOf(bean), oidReader.propertyName);\n        return reportInputMismatch(oidReader.idProperty, msg);\n    }",
    "begin_line": 1262,
    "end_line": 1268,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1276",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.BeanProperty, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportInputMismatch(BeanProperty prop,\n            String msg, Object... msgArgs) throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        JavaType type \u003d (prop \u003d\u003d null) ? null : prop.getType();\n        throw MismatchedInputException.from(getParser(), type, msg);\n    }",
    "begin_line": 1276,
    "end_line": 1282,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportInputMismatch(JsonDeserializer\u003c?\u003e src,\n            String msg, Object... msgArgs) throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw MismatchedInputException.from(getParser(), src.handledType(), msg);\n    }",
    "begin_line": 1290,
    "end_line": 1295,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportInputMismatch(Class\u003c?\u003e targetType,\n            String msg, Object... msgArgs) throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw MismatchedInputException.from(getParser(), targetType, msg);\n    }",
    "begin_line": 1303,
    "end_line": 1308,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportInputMismatch(JavaType targetType,\n            String msg, Object... msgArgs) throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw MismatchedInputException.from(getParser(), targetType, msg);\n    }",
    "begin_line": 1316,
    "end_line": 1321,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(JsonParser, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated reportWrongTokenException(JsonParser p,\n            JsonToken expToken, String msg, Object... msgArgs)\n        throws JsonMappingException\n    {\n        msg \u003d _format(msg, msgArgs);\n        throw wrongTokenException(p, expToken, msg);\n    }",
    "begin_line": 1324,
    "end_line": 1330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportUnknownProperty#1344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(java.lang.Object, java.lang.String, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@Deprecated\n    public void reportUnknownProperty(Object instanceOrClass, String fieldName,\n            JsonDeserializer\u003c?\u003e deser)\n        throws JsonMappingException\n    {\n        if (isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n            // Do we know properties that are expected instead?\n            Collection\u003cObject\u003e propIds \u003d (deser \u003d\u003d null) ? null : deser.getKnownPropertyNames();\n            throw UnrecognizedPropertyException.from(_parser,\n                    instanceOrClass, fieldName, propIds);\n        }\n    }",
    "begin_line": 1344,
    "end_line": 1354,
    "comment": "/** \n * Helper method for reporting a problem with unhandled unknown property.\n * @param instanceOrClass Either value being populated (if one has beeninstantiated), or Class that indicates type that would be (or have been) instantiated\n * @param deser Deserializer that had the problem, if called by deserializer(or on behalf of one)\n * @deprecated Since 2.8 call {@link #handleUnknownProperty} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportMissingContent#1362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated reportMissingContent(String msg, Object... msgArgs) throws JsonMappingException {\n        throw MismatchedInputException.from(getParser(), (JavaType) null, \"No content to map due to end-of-input\");\n    }",
    "begin_line": 1362,
    "end_line": 1364,
    "comment": "/** \n * @since 2.8\n * @deprecated Since 2.9: not clear this ever occurs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadTypeDefinition#1380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportBadTypeDefinition(BeanDescription bean,\n            String msg, Object... msgArgs) throws JsonMappingException {\n        msg \u003d _format(msg, msgArgs);\n        String beanDesc \u003d ClassUtil.nameOf(bean.getBeanClass());\n        msg \u003d String.format(\"Invalid type definition for type %s: %s\", beanDesc, msg);\n        throw InvalidDefinitionException.from(_parser, msg, bean, null);\n    }",
    "begin_line": 1380,
    "end_line": 1386,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadPropertyDefinition#1395",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop,\n            String msg, Object... msgArgs) throws JsonMappingException {\n        msg \u003d _format(msg, msgArgs);\n        String propName \u003d ClassUtil.nameOf(prop);\n        String beanDesc \u003d ClassUtil.nameOf(bean.getBeanClass());\n        msg \u003d String.format(\"Invalid definition for property %s (of type %s): %s\",\n                propName, beanDesc, msg);\n        throw InvalidDefinitionException.from(_parser, msg, bean, prop);\n    }",
    "begin_line": 1395,
    "end_line": 1403,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadDefinition#1406",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "@Override\n    public \u003cT\u003e T reportBadDefinition(JavaType type, String msg) throws JsonMappingException {\n        throw InvalidDefinitionException.from(_parser, msg, type);\n    }",
    "begin_line": 1406,
    "end_line": 1408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadMerge#1421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadMerge(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public \u003cT\u003e T reportBadMerge(JsonDeserializer\u003c?\u003e deser) throws JsonMappingException\n    {\n        if (isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) {\n            return null;\n        }\n        JavaType type \u003d constructType(deser.handledType());\n        String msg \u003d String.format(\"Invalid configuration: values of type %s can not be merged\", type);\n        throw InvalidDefinitionException.from(getParser(), msg, type);\n    }",
    "begin_line": 1421,
    "end_line": 1429,
    "comment": "/** \n * Method that deserializer may call if it is called to do an update (\"merge\") but deserializer operates on a non-mergeable type. Although this should usually be caught earlier, sometimes it may only be caught during operation and if so this is the method to call. Note that if  {@link MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE} is enabled,this method will simply return null; otherwise  {@link InvalidDefinitionException}will be thrown.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1448",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, com.fasterxml.jackson.databind.JavaType, JsonToken, java.lang.String)",
    "snippet": "public JsonMappingException wrongTokenException(JsonParser p, JavaType targetType,\n            JsonToken expToken, String extra)\n    {\n        String msg \u003d String.format(\"Unexpected token (%s), expected %s\",\n                p.getCurrentToken(), expToken);\n        msg \u003d _colonConcat(msg, extra);\n        return MismatchedInputException.from(p, targetType, msg);\n    }",
    "begin_line": 1448,
    "end_line": 1455,
    "comment": "/** \n * Helper method for constructing  {@link JsonMappingException} to indicatethat the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that most of the time this method should NOT be directly called; instead,  {@link #reportWrongTokenException} should be called and willcall this method as necessary.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1457",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, java.lang.Class\u003c?\u003e, JsonToken, java.lang.String)",
    "snippet": "public JsonMappingException wrongTokenException(JsonParser p, Class\u003c?\u003e targetType,\n            JsonToken expToken, String extra)\n    {\n        String msg \u003d String.format(\"Unexpected token (%s), expected %s\",\n                p.getCurrentToken(), expToken);\n        msg \u003d _colonConcat(msg, extra);\n        return MismatchedInputException.from(p, targetType, msg);\n    }",
    "begin_line": 1457,
    "end_line": 1464,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, JsonToken, java.lang.String)",
    "snippet": "@Deprecated wrongTokenException(JsonParser p, JsonToken expToken,\n            String msg)\n    {\n        return wrongTokenException(p, (JavaType) null, expToken, msg);\n    }",
    "begin_line": 1467,
    "end_line": 1471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdKeyException#1481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String)",
    "snippet": "public JsonMappingException weirdKeyException(Class\u003c?\u003e keyClass, String keyValue,\n            String msg) {\n        return InvalidFormatException.from(_parser,\n                String.format(\"Can not deserialize Map key of type %s from String %s: %s\",\n                        ClassUtil.nameOf(keyClass), _quotedString(keyValue), msg),\n                keyValue, keyClass);\n    }",
    "begin_line": 1481,
    "end_line": 1487,
    "comment": "/** \n * Helper method for constructing exception to indicate that given JSON Object field name was not in format to be able to deserialize specified key type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdKey} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdStringException#1502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(java.lang.String, java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException weirdStringException(String value, Class\u003c?\u003e instClass,\n            String msg) {\n        return InvalidFormatException.from(_parser,\n                String.format(\"Can not deserialize value of type %s from String %s: %s\",\n                        ClassUtil.nameOf(instClass), _quotedString(value), msg),\n                value, instClass);\n    }",
    "begin_line": 1502,
    "end_line": 1508,
    "comment": "/** \n * Helper method for constructing exception to indicate that input JSON String was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdStringValue} should be called which will call this methodif necessary.\n * @param value String value from input being deserialized\n * @param instClass Type that String should be deserialized into\n * @param msg Message that describes specific problem\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdNumberException#1517",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException(java.lang.Number, java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException weirdNumberException(Number value, Class\u003c?\u003e instClass,\n            String msg) {\n        return InvalidFormatException.from(_parser,\n                String.format(\"Can not deserialize value of type %s from number %s: %s\",\n                        ClassUtil.nameOf(instClass), String.valueOf(value), msg),\n                value, instClass);\n    }",
    "begin_line": 1517,
    "end_line": 1523,
    "comment": "/** \n * Helper method for constructing exception to indicate that input JSON Number was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdNumberValue} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.instantiationException#1534",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class\u003c?\u003e, java.lang.Throwable)",
    "snippet": "public JsonMappingException instantiationException(Class\u003c?\u003e instClass, Throwable cause) {\n        // Most likely problem with Creator definition, right?\n        JavaType type \u003d constructType(instClass);\n        String msg \u003d String.format(\"Can not construct instance of %s, problem: %s\",\n                ClassUtil.nameOf(instClass), cause.getMessage());\n        InvalidDefinitionException e \u003d InvalidDefinitionException.from(_parser, msg, type);\n        e.initCause(cause);\n        return e;\n    }",
    "begin_line": 1534,
    "end_line": 1542,
    "comment": "/** \n * Helper method for constructing instantiation exception for specified type, to indicate problem with physically constructing instance of specified class (missing constructor, exception from constructor) \u003cp\u003e Note that most of the time this method should NOT be called; instead, {@link #handleInstantiationProblem} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.instantiationException#1553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException instantiationException(Class\u003c?\u003e instClass, String msg0) {\n        // Most likely problem with Creator definition, right?\n        JavaType type \u003d constructType(instClass);\n        String msg \u003d String.format(\"Can not construct instance of %s: %s\",\n                ClassUtil.nameOf(instClass), msg0);\n        return InvalidDefinitionException.from(_parser, msg, type);\n    }",
    "begin_line": 1553,
    "end_line": 1559,
    "comment": "/** \n * Helper method for constructing instantiation exception for specified type, to indicate that instantiation failed due to missing instantiator (creator; constructor or factory method). \u003cp\u003e Note that most of the time this method should NOT be called; instead, {@link #handleMissingInstantiator} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.unknownTypeIdException#1570",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknownTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "public JsonMappingException unknownTypeIdException(JavaType baseType, String typeId,\n            String extraDesc) {\n        String msg \u003d String.format(\"Could not resolve type id \u0027%s\u0027 into a subtype of %s\",\n                typeId, baseType);\n        return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, typeId);\n    }",
    "begin_line": 1570,
    "end_line": 1575,
    "comment": "/** \n * Helper method for constructing exception to indicate that given type id could not be resolved to a valid subtype of specified base type, during polymorphic deserialization. \u003cp\u003e Note that most of the time this method should NOT be called; instead, {@link #handleUnknownTypeId} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.missingTypeIdException#1580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public JsonMappingException missingTypeIdException(JavaType baseType,\n            String extraDesc) {\n        String msg \u003d String.format(\"Missing type id when trying to resolve subtype of %s\",\n                baseType);\n        return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, null);\n    }",
    "begin_line": 1580,
    "end_line": 1585,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.unknownTypeException#1599",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "@Deprecated\n    public JsonMappingException unknownTypeException(JavaType type, String id,\n            String extraDesc)\n    {\n        String msg \u003d String.format(\"Could not resolve type id \u0027%s\u0027 into a subtype of %s\",\n                id, type);\n        msg \u003d _colonConcat(msg, extraDesc);\n        return MismatchedInputException.from(_parser, type, msg);\n    }",
    "begin_line": 1599,
    "end_line": 1606,
    "comment": "/** \n * @since 2.5\n * @deprecated Since 2.8 use {@link #handleUnknownTypeId} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.endOfInputException#1615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.endOfInputException(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JsonMappingException endOfInputException(Class\u003c?\u003e instClass) {\n        return MismatchedInputException.from(_parser, instClass,\n                \"Unexpected end-of-input when trying to deserialize a \"+instClass.getName());\n    }",
    "begin_line": 1615,
    "end_line": 1618,
    "comment": "/** \n * Helper method for constructing exception to indicate that end-of-input was reached while still expecting more tokens to deserialize value of specified type.\n * @deprecated Since 2.8; currently no way to catch EOF at databind level\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportMappingException#1638",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated reportMappingException(String msg, Object... msgArgs)\n        throws JsonMappingException\n    {\n        throw JsonMappingException.from(getParser(), _format(msg, msgArgs));\n    }",
    "begin_line": 1638,
    "end_line": 1642,
    "comment": "/** \n * Fallback method that may be called if no other \u003ccode\u003ereportXxx\u003c/code\u003e is applicable -- but only in that case.\n * @since 2.8\n * @deprecated Since 2.9: use a more specific method, or {@link #reportBadDefinition(JavaType,String)}, or  {@link #reportInputMismatch} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1656",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String)",
    "snippet": "@Deprecated\n    public JsonMappingException mappingException(String message) {\n        return JsonMappingException.from(getParser(), message);\n    }",
    "begin_line": 1656,
    "end_line": 1658,
    "comment": "/** \n * Helper method for constructing generic mapping exception with specified message and current location information. Note that application code should almost always call one of \u003ccode\u003ehandleXxx\u003c/code\u003e methods, or  {@link #reportMappingException(String,Object...)}instead.\n * @since 2.6\n * @deprecated Since 2.9 use more specific error reporting methods instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1672",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated\n    public JsonMappingException mappingException(String msg, Object... msgArgs) {\n        return JsonMappingException.from(getParser(), _format(msg, msgArgs));\n    }",
    "begin_line": 1672,
    "end_line": 1674,
    "comment": "/** \n * Helper method for constructing generic mapping exception with specified message and current location information Note that application code should almost always call one of \u003ccode\u003ehandleXxx\u003c/code\u003e methods, or  {@link #reportMappingException(String,Object...)}instead.\n * @since 2.6\n * @deprecated Since 2.9 use more specific error reporting methods instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1682",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JsonMappingException mappingException(Class\u003c?\u003e targetClass) {\n        return mappingException(targetClass, _parser.getCurrentToken());\n    }",
    "begin_line": 1682,
    "end_line": 1684,
    "comment": "/** \n * Helper method for constructing generic mapping exception for specified type\n * @deprecated Since 2.8 use {@link #handleUnexpectedToken(Class,JsonParser)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1690",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class\u003c?\u003e, JsonToken)",
    "snippet": "@Deprecated\n    public JsonMappingException mappingException(Class\u003c?\u003e targetClass, JsonToken token) {\n        return JsonMappingException.from(_parser,\n                String.format(\"Can not deserialize instance of %s out of %s token\",\n                        _calcName(targetClass), token));\n    }",
    "begin_line": 1690,
    "end_line": 1694,
    "comment": "/** \n * @deprecated Since 2.8 use {@link #handleUnexpectedToken(Class,JsonParser)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDateFormat#1702",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDateFormat()",
    "snippet": "protected DateFormat getDateFormat()\n    {\n        if (_dateFormat !\u003d null) {\n            return _dateFormat;\n        }\n        /* 24-Feb-2012, tatu: At this point, all timezone configuration\n         *    should have occurred, with respect to default dateformat\n         *    and timezone configuration. But we still better clone\n         *    an instance as formatters may be stateful.\n         */\n        DateFormat df \u003d _config.getDateFormat();\n        _dateFormat \u003d df \u003d (DateFormat) df.clone();\n        return df;\n    }",
    "begin_line": 1702,
    "end_line": 1715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.DeserializationFeature#469",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean)",
    "snippet": "private DeserializationFeature(boolean defaultState) {\n        _defaultState \u003d defaultState;\n        _mask \u003d (1 \u003c\u003c ordinal());\n    }",
    "begin_line": 469,
    "end_line": 472,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#475",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()",
    "snippet": "@Override\n    public boolean enabledByDefault() { return _defaultState; }",
    "begin_line": 475,
    "end_line": 475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.getMask()",
    "snippet": "@Override\n    public int getMask() { return _mask; }",
    "begin_line": 478,
    "end_line": 478,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int)",
    "snippet": "@Override\n    public boolean enabledIn(int flags) { return (flags \u0026 _mask) !\u003d 0; }",
    "begin_line": 481,
    "end_line": 481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.JavaType#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(java.lang.Class\u003c?\u003e, int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected JavaType(Class\u003c?\u003e raw, int additionalHash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        _class \u003d raw;\n        _hash \u003d raw.getName().hashCode() + additionalHash;\n        _valueHandler \u003d valueHandler;\n        _typeHandler \u003d typeHandler;\n        _asStatic \u003d asStatic;\n    }",
    "begin_line": 76,
    "end_line": 84,
    "comment": "/** \n * @param raw \"Raw\" (type-erased) class for this type\n * @param additionalHash Additional hash code to use, in additionto hash code of the class name \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.JavaType#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType(JavaType base) \n    {\n        _class \u003d base._class;\n        _hash \u003d base._hash;\n        _valueHandler \u003d base._valueHandler;\n        _typeHandler \u003d base._typeHandler;\n        _asStatic \u003d base._asStatic;\n    }",
    "begin_line": 91,
    "end_line": 98,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withTypeHandler#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withTypeHandler(Object h);",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * \"Copy method\" that will construct a new instance that is identical to this instance, except that it will have specified type handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentTypeHandler#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentTypeHandler(Object h);",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content type (element type for arrays, value type for Maps and so forth) handler assigned.\n * @return Newly created type instance, with given \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withValueHandler#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withValueHandler(Object h);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentValueHandler#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentValueHandler(Object h);",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withHandlersFrom#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType withHandlersFrom(JavaType src) {\n        JavaType type \u003d this;\n        Object h \u003d src.getTypeHandler();\n        if (h !\u003d _typeHandler) {\n            type \u003d type.withTypeHandler(h);\n        }\n        h \u003d src.getValueHandler();\n        if (h !\u003d _valueHandler) {\n            type \u003d type.withValueHandler(h);\n        }\n        return type;\n    }",
    "begin_line": 140,
    "end_line": 151,
    "comment": "/** \n * Mutant factory method that will try to copy handlers that the specified source type instance had, if any; this must be done recursively where necessary (as content types may be structured).\n * @since 2.8.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentType#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JavaType withContentType(JavaType contentType);",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Mutant factory method that may be called on structured types that have a so-called content type (element of arrays, value type of Maps, referenced type of referential types), and will construct a new instance that is identical to this instance, except that it has specified content type, instead of current one. If content type is already set to given type, \u003ccode\u003ethis\u003c/code\u003e is returned. If type does not have a content type (which is the case with \u003ccode\u003eSimpleType\u003c/code\u003e),  {@link IllegalArgumentException}will be thrown.\n * @return Newly created type instance\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withStaticTyping#181",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withStaticTyping()",
    "snippet": "public abstract JavaType withStaticTyping();",
    "begin_line": 181,
    "end_line": 181,
    "comment": "/** \n * Method that can be called to get a type instance that indicates that values of the type should be handled using \"static typing\" for purposes of serialization (as opposed to \"dynamic\" aka runtime typing): meaning that no runtime information is needed for determining serializers to use. The main use case is to allow forcing of specific root value serialization type, and specifically in resolving serializers for contained types (element types for arrays, Collections and Maps).\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.refine#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public abstract JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces);",
    "begin_line": 197,
    "end_line": 198,
    "comment": "/** \n * Mutant factory method that will try to create and return a sub-type instance for known parameterized types; for other types will return `null` to indicate that no just refinement makes necessary sense, without trying to detect special status through implemented interfaces.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.forcedNarrowBy#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.forcedNarrowBy(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JavaType forcedNarrowBy(Class\u003c?\u003e subclass)\n    {\n        if (subclass \u003d\u003d _class) { // can still optimize for simple case\n            return this;\n        }\n        return  _narrow(subclass);\n    }",
    "begin_line": 209,
    "end_line": 215,
    "comment": "/** \n * Legacy method used for forcing sub-typing of this type into type specified by specific type erasure. Deprecated as of 2.7 as such specializations really ought to go through  {@link TypeFactory}, not directly via  {@link JavaType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType._narrow#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated _narrow(Class\u003c?\u003e subclass);",
    "begin_line": 218,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getRawClass#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getRawClass()",
    "snippet": "@Override\n    public final Class\u003c?\u003e getRawClass() { return _class; }",
    "begin_line": 227,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasRawClass#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasRawClass(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final boolean hasRawClass(Class\u003c?\u003e clz) { return _class \u003d\u003d clz; }",
    "begin_line": 235,
    "end_line": 235,
    "comment": "/** \n * Method that can be used to check whether this type has specified Class as its type erasure. Put another way, returns true if instantiation of this Type is given (type-erased) Class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasContentType#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasContentType()",
    "snippet": "public boolean hasContentType() {\n        return true;\n    }",
    "begin_line": 244,
    "end_line": 246,
    "comment": "/** \n * Accessor that allows determining whether  {@link #getContentType()} shouldreturn a non-null value (that is, there is a \"content type\") or not. True if  {@link #isContainerType()} or {@link #isReferenceType()} return true.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isTypeOrSubTypeOf#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isTypeOrSubTypeOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public final boolean isTypeOrSubTypeOf(Class\u003c?\u003e clz) {\n        return (_class \u003d\u003d clz) || (clz.isAssignableFrom(_class));\n    }",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isAbstract#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isAbstract()",
    "snippet": "@Override\n    public boolean isAbstract() {\n        return Modifier.isAbstract(_class.getModifiers());\n    }",
    "begin_line": 256,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isConcrete#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isConcrete()",
    "snippet": "@Override\n    public boolean isConcrete() {\n        int mod \u003d _class.getModifiers();\n        if ((mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0) {\n            return true;\n        }\n        /* 19-Feb-2010, tatus: Holy mackarel; primitive types\n         *    have \u0027abstract\u0027 flag set...\n         */\n        return _class.isPrimitive();\n    }",
    "begin_line": 266,
    "end_line": 275,
    "comment": "/** \n * Convenience method for checking whether underlying Java type is a concrete class or not: abstract classes and interfaces are not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isThrowable#278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isThrowable()",
    "snippet": "@Override\n    public boolean isThrowable() { return Throwable.class.isAssignableFrom(_class); }",
    "begin_line": 278,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isArrayType#281",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isArrayType()",
    "snippet": "@Override\n    public boolean isArrayType() { return false; }",
    "begin_line": 281,
    "end_line": 281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isEnumType#284",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isEnumType()",
    "snippet": "@Override\n    public final boolean isEnumType() { return _class.isEnum(); }",
    "begin_line": 284,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isInterface#287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isInterface()",
    "snippet": "@Override\n    public final boolean isInterface() { return _class.isInterface(); }",
    "begin_line": 287,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isPrimitive#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isPrimitive()",
    "snippet": "@Override\n    public final boolean isPrimitive() { return _class.isPrimitive(); }",
    "begin_line": 290,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isFinal#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isFinal()",
    "snippet": "@Override\n    public final boolean isFinal() { return Modifier.isFinal(_class.getModifiers()); }",
    "begin_line": 293,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isContainerType#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isContainerType()",
    "snippet": "@Override\n    public abstract boolean isContainerType();",
    "begin_line": 300,
    "end_line": 300,
    "comment": "/** \n * @return True if type represented is a container type; this includesarray, Map and Collection types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isCollectionLikeType#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isCollectionLikeType()",
    "snippet": "@Override\n    public boolean isCollectionLikeType() { return false; }",
    "begin_line": 308,
    "end_line": 308,
    "comment": "/** \n * @return True if type is either true {@link java.util.Collection} type,or something similar (meaning it has at least one type parameter, which describes type of contents)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isMapLikeType#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isMapLikeType()",
    "snippet": "@Override\n    public boolean isMapLikeType() { return false; }",
    "begin_line": 316,
    "end_line": 316,
    "comment": "/** \n * @return True if type is either true {@link java.util.Map} type,or something similar (meaning it has at least two type parameter; first one describing key type, second value type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isJavaLangObject#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isJavaLangObject()",
    "snippet": "public final boolean isJavaLangObject() { return _class \u003d\u003d Object.class; }",
    "begin_line": 327,
    "end_line": 327,
    "comment": "/** \n * Convenience method, short-hand for \u003ccode\u003e getRawClass() \u003d\u003d Object.class \u003c/code\u003e and used to figure if we basically have \"untyped\" type object.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.useStaticType#337",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.useStaticType()",
    "snippet": "public final boolean useStaticType() { return _asStatic; }",
    "begin_line": 337,
    "end_line": 337,
    "comment": "/** \n * Accessor for checking whether handlers for dealing with values of this type should use static typing (as opposed to dynamic typing). Note that while value of \u0027true\u0027 does mean that static typing is to be used, value of \u0027false\u0027 may still be overridden by other settings.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasGenericTypes#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasGenericTypes()",
    "snippet": "@Override\n    public boolean hasGenericTypes() { return containedTypeCount() \u003e 0; }",
    "begin_line": 346,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getKeyType#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getKeyType()",
    "snippet": "@Override\n    public JavaType getKeyType() { return null; }",
    "begin_line": 349,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentType#352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentType()",
    "snippet": "@Override\n    public JavaType getContentType() { return null; }",
    "begin_line": 352,
    "end_line": 352,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getReferencedType#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getReferencedType()",
    "snippet": "@Override getReferencedType() { return null; }",
    "begin_line": 355,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeCount#358",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeCount()",
    "snippet": "@Override\n    public abstract int containedTypeCount();",
    "begin_line": 358,
    "end_line": 358,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedType#361",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedType(int)",
    "snippet": "@Override\n    public abstract JavaType containedType(int index);",
    "begin_line": 361,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeName#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeName(int)",
    "snippet": "@Deprecated containedTypeName(int index);",
    "begin_line": 365,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getParameterSource#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getParameterSource()",
    "snippet": "@Deprecated getParameterSource() {\n        return null;\n    }",
    "begin_line": 369,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeOrUnknown#395",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeOrUnknown(int)",
    "snippet": "public JavaType containedTypeOrUnknown(int index) {\n        JavaType t \u003d containedType(index);\n        return (t \u003d\u003d null)  ? TypeFactory.unknownType() : t;\n    }",
    "begin_line": 395,
    "end_line": 398,
    "comment": "/** \n * Convenience method that is functionally same as: \u003ccode\u003e JavaType t \u003d containedType(index); if (t \u003d\u003d null) { t \u003d TypeFactory.unknownType(); } \u003c/code\u003e and typically used to eliminate need for null checks for common case where we just want to check if containedType is available first; and if not, use \"unknown type\" (which translates to \u003ccode\u003ejava.lang.Object\u003c/code\u003e basically).\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getBindings#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getBindings()",
    "snippet": "public abstract TypeBindings getBindings();",
    "begin_line": 403,
    "end_line": 403,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findSuperType#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType findSuperType(Class\u003c?\u003e erasedTarget);",
    "begin_line": 414,
    "end_line": 414,
    "comment": "/** \n * Method that may be called to find representation of given type within type hierarchy of this type: either this type (if this type has given erased type), one of its supertypes that has the erased types, or null if target is neither this type or any of its supertypes.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getSuperClass#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getSuperClass()",
    "snippet": "public abstract JavaType getSuperClass();",
    "begin_line": 422,
    "end_line": 422,
    "comment": "/** \n * Accessor for finding fully resolved parent class of this type, if it has one; null if not.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getInterfaces#430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getInterfaces()",
    "snippet": "public abstract List\u003cJavaType\u003e getInterfaces();",
    "begin_line": 430,
    "end_line": 430,
    "comment": "/** \n * Accessor for finding fully resolved interfaces this type implements, if any; empty array if none.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findTypeParameters#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType[] findTypeParameters(Class\u003c?\u003e expType);",
    "begin_line": 438,
    "end_line": 438,
    "comment": "/** \n * Method that may be used to find paramaterization this type has for given type-erased generic target type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getValueHandler#450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getValueHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getValueHandler() { return (T) _valueHandler; }",
    "begin_line": 450,
    "end_line": 450,
    "comment": "/** \n * Method for accessing value handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getTypeHandler#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getTypeHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getTypeHandler() { return (T) _typeHandler; }",
    "begin_line": 456,
    "end_line": 456,
    "comment": "/** \n * Method for accessing type handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentValueHandler#461",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentValueHandler()",
    "snippet": "public Object getContentValueHandler() { return null; }",
    "begin_line": 461,
    "end_line": 461,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentTypeHandler#466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentTypeHandler()",
    "snippet": "public Object getContentTypeHandler() { return null; }",
    "begin_line": 466,
    "end_line": 466,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasValueHandler#471",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasValueHandler()",
    "snippet": "public boolean hasValueHandler() { return _valueHandler !\u003d null; }",
    "begin_line": 471,
    "end_line": 471,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasHandlers#481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasHandlers()",
    "snippet": "public boolean hasHandlers() {\n        return (_typeHandler !\u003d null) || (_valueHandler !\u003d null);\n    }",
    "begin_line": 481,
    "end_line": 483,
    "comment": "/** \n * Helper method that checks whether this type, or its (optional) key or content type has  {@link #getValueHandler} or {@link #getTypeHandler()}; that is, are there any non-standard handlers associated with this type object.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#501",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature()",
    "snippet": "public String getGenericSignature() {\n        StringBuilder sb \u003d new StringBuilder(40);\n        getGenericSignature(sb);\n        return sb.toString();        \n    }",
    "begin_line": 501,
    "end_line": 505,
    "comment": "/** \n * Method for accessing signature that contains generic type information, in form compatible with JVM 1.5 as per JLS. It is a superset of  {@link #getErasedSignature}, in that generic information can be automatically removed if necessary (just remove outermost angle brackets along with content inside)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#514",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 514,
    "end_line": 514,
    "comment": "/** \n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#522",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature()",
    "snippet": "public String getErasedSignature() {\n        StringBuilder sb \u003d new StringBuilder(40);\n        getErasedSignature(sb);\n        return sb.toString();\n    }",
    "begin_line": 522,
    "end_line": 526,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 539,
    "end_line": 539,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.toString#548",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.toString()",
    "snippet": "@Override\n    public abstract String toString();",
    "begin_line": 548,
    "end_line": 548,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.equals#551",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.equals(java.lang.Object)",
    "snippet": "@Override\n    public abstract boolean equals(Object o);",
    "begin_line": 551,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hashCode#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hashCode()",
    "snippet": "@Override\n    public final int hashCode() { return _hash; }",
    "begin_line": 554,
    "end_line": 554,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.unwrappingSerializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "public JsonSerializer\u003cT\u003e unwrappingSerializer(NameTransformer unwrapper) {\n        return this;\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Method that will return serializer instance that produces \"unwrapped\" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output). If no unwrapped serializer can be constructed, will simply return serializer as-is. \u003cp\u003e Default implementation just returns serializer as-is, indicating that no unwrapped variant exists\n * @param unwrapper Name transformation to use to convert between namesof unwrapper properties\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.replaceDelegatee#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cT\u003e replaceDelegatee(JsonSerializer\u003c?\u003e delegatee) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "/** \n * Method that can be called to try to replace serializer this serializer delegates calls to. If not supported (either this serializer does not delegate anything; or it does not want any changes), should either throw  {@link UnsupportedOperationException} (if operation does notmake sense or is not allowed); or return this serializer as is.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.withFilterId#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)",
    "snippet": "public JsonSerializer\u003c?\u003e withFilterId(Object filterId) {\n        return this;\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Mutant factory method that is called if contextual configuration indicates that a specific filter (as specified by \u003ccode\u003efilterId\u003c/code\u003e) is to be used for serialization. \u003cp\u003e Default implementation simply returns \u003ccode\u003ethis\u003c/code\u003e; sub-classes that do support filtering will need to create and return new instance if filter changes.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.serialize#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers)\n        throws IOException;",
    "begin_line": 122,
    "end_line": 123,
    "comment": "/** \n * Method that can be called to ask implementation to serialize values of type this serializer handles.\n * @param value Value to serialize; can \u003cb\u003enot\u003c/b\u003e be null.\n * @param gen Generator used to output resulting Json content\n * @param serializers Provider that can be used to get serializers forserializing Objects value contains, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.serializeWithType#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers,\n            TypeSerializer typeSer)\n        throws IOException\n    {\n        Class\u003c?\u003e clz \u003d handledType();\n        if (clz \u003d\u003d null) {\n            clz \u003d value.getClass();\n        }\n        serializers.reportBadDefinition(clz, String.format(\n                \"Type id handling not implemented for type %s (by serializer of type %s)\",\n                clz.getName(), getClass().getName()));\n    }",
    "begin_line": 152,
    "end_line": 163,
    "comment": "/** \n * Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information. \u003cp\u003e Default implementation will throw  {@link UnsupportedOperationException}to indicate that proper type handling needs to be implemented. \u003cp\u003e For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like: \u003cpre\u003e // note: method to call depends on whether this type is serialized as JSON scalar, object or Array! typeSer.writeTypePrefixForScalar(value, gen); serialize(value, gen, provider); typeSer.writeTypeSuffixForScalar(value, gen); \u003c/pre\u003e and implementations for type serialized as JSON Arrays or Objects would differ slightly, as \u003ccode\u003eSTART-ARRAY\u003c/code\u003e/\u003ccode\u003eEND-ARRAY\u003c/code\u003e and \u003ccode\u003eSTART-OBJECT\u003c/code\u003e/\u003ccode\u003eEND-OBJECT\u003c/code\u003e pairs need to be properly handled with respect to serializing of contents.\n * @param value Value to serialize; can \u003cb\u003enot\u003c/b\u003e be null.\n * @param gen Generator used to output resulting Json content\n * @param serializers Provider that can be used to get serializers forserializing Objects value contains, if any.\n * @param typeSer Type serializer to use for including type information\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.handledType#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.handledType()",
    "snippet": "public Class\u003cT\u003e handledType() { return null; }",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * Method for accessing type of Objects this serializer can handle. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type). \u003cp\u003e Default implementation will return null, which essentially means same as returning \u003ccode\u003eObject.class\u003c/code\u003e would; that is, that nothing is known about handled type. \u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isEmpty#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)",
    "snippet": "@Deprecated\n    public boolean isEmpty(T value) {\n        return isEmpty(null, value);\n    }",
    "begin_line": 195,
    "end_line": 197,
    "comment": "/** \n * Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values). \u003cp\u003e Default implementation will consider only null values to be empty.\n * @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider,Object)} instead;will be removed from 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isEmpty#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, T)",
    "snippet": "public boolean isEmpty(SerializerProvider provider, T value) {\n        return (value \u003d\u003d null);\n    }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "/** \n * Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values). \u003cp\u003e Default implementation will consider only null values to be empty. \u003cp\u003e NOTE: replaces  {@link #isEmpty(Object)}, which was deprecated in 2.5\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.usesObjectId#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()",
    "snippet": "public boolean usesObjectId() {\n        return false;\n    }",
    "begin_line": 218,
    "end_line": 220,
    "comment": "/** \n * Method that can be called to see whether this serializer instance will use Object Id to handle cyclic references.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isUnwrappingSerializer#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()",
    "snippet": "public boolean isUnwrappingSerializer() {\n        return false;\n    }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "/** \n * Accessor for checking whether this serializer is an \"unwrapping\" serializer; this is necessary to know since it may also require caller to suppress writing of the leading property name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.getDelegatee#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()",
    "snippet": "public JsonSerializer\u003c?\u003e getDelegatee() {\n        return null;\n    }",
    "begin_line": 243,
    "end_line": 245,
    "comment": "/** \n * Accessor that can be used to determine if this serializer uses another serializer for actual serialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further serializers); otherwise will return null.\n * @return Serializer this serializer delegates calls to, if null;null otherwise.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.properties#257",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.properties()",
    "snippet": "public Iterator\u003cPropertyWriter\u003e properties() {\n        return ClassUtil.emptyIterator();\n    }",
    "begin_line": 257,
    "end_line": 259,
    "comment": "/** \n * Accessor for iterating over logical properties that the type handled by this serializer has, from serialization perspective. Actual type of properties, if any, will be {@link com.fasterxml.jackson.databind.ser.BeanPropertyWriter}. Of standard Jackson serializers, only  {@link com.fasterxml.jackson.databind.ser.BeanSerializer}exposes properties.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.acceptJsonFormatVisitor#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType type)\n        throws JsonMappingException\n    {\n        visitor.expectAnyFormat(type);\n    }",
    "begin_line": 273,
    "end_line": 277,
    "comment": "/** \n * Default implementation simply calls  {@link JsonFormatVisitorWrapper#expectAnyFormat(JavaType)}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.MapperFeature#484",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean)",
    "snippet": "private MapperFeature(boolean defaultState) {\n        _defaultState \u003d defaultState;\n        _mask \u003d (1 \u003c\u003c ordinal());\n    }",
    "begin_line": 484,
    "end_line": 487,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()",
    "snippet": "@Override\n    public boolean enabledByDefault() { return _defaultState; }",
    "begin_line": 490,
    "end_line": 490,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#493",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.getMask()",
    "snippet": "@Override\n    public int getMask() { return _mask; }",
    "begin_line": 493,
    "end_line": 493,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.enabledIn(int)",
    "snippet": "@Override\n    public boolean enabledIn(int flags) { return (flags \u0026 _mask) !\u003d 0; }",
    "begin_line": 496,
    "end_line": 496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory()",
    "snippet": "public MappingJsonFactory()\n    {\n        this(null);\n    }",
    "begin_line": 22,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory(com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "public MappingJsonFactory(ObjectMapper mapper)\n    {\n        super(mapper);\n        if (mapper \u003d\u003d null) {\n            setCodec(new ObjectMapper(this));\n        }\n    }",
    "begin_line": 27,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory(JsonFactory, com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "public MappingJsonFactory(JsonFactory src, ObjectMapper mapper)\n    {\n        super(src, mapper);\n        if (mapper \u003d\u003d null) {\n            setCodec(new ObjectMapper(this));\n        }\n    }",
    "begin_line": 35,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.getCodec#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.getCodec()",
    "snippet": "@Override\n    public final ObjectMapper getCodec() { return (ObjectMapper) _objectCodec; }",
    "begin_line": 48,
    "end_line": 48,
    "comment": "/** \n * We\u0027ll override the method to return more specific type; co-variance helps here\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.copy#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.copy()",
    "snippet": "@Override\n    public JsonFactory copy()\n    {\n        _checkInvalidCopy(MappingJsonFactory.class);\n        // note: as with base class, must NOT copy mapper reference\n        return new MappingJsonFactory(this, null);\n    }",
    "begin_line": 52,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.getFormatName#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.getFormatName()",
    "snippet": "@Override\n    public String getFormatName()\n    {\n        /* since non-JSON factories typically should not extend this class,\n         * let\u0027s just always return JSON as name.\n         */\n        return FORMAT_NAME_JSON;\n    }",
    "begin_line": 69,
    "end_line": 75,
    "comment": "/** \n * Sub-classes need to override this method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.hasFormat#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.hasFormat(InputAccessor)",
    "snippet": "@Override\n    public MatchStrength hasFormat(InputAccessor acc) throws IOException\n    {\n        if (getClass() \u003d\u003d MappingJsonFactory.class) {\n            return hasJSONFormat(acc);\n        }\n        return null;\n    }",
    "begin_line": 81,
    "end_line": 87,
    "comment": "/** \n * Sub-classes need to override this method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.DefaultTypeResolverBuilder#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)",
    "snippet": "public DefaultTypeResolverBuilder(DefaultTyping t) {\n            _appliesFor \u003d t;\n        }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.buildTypeDeserializer#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override\n        public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n                JavaType baseType, Collection\u003cNamedType\u003e subtypes)\n        {\n            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;\n        }",
    "begin_line": 215,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.buildTypeSerializer#222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override\n        public TypeSerializer buildTypeSerializer(SerializationConfig config,\n                JavaType baseType, Collection\u003cNamedType\u003e subtypes)\n        {\n            return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null;            \n        }",
    "begin_line": 222,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.useForType#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.useForType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean useForType(JavaType t)\n        {\n            // 03-Oct-2016, tatu: As per [databind#1395], need to skip\n            //  primitive types too, regardless\n            if (t.isPrimitive()) {\n                return false;\n            }\n\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t \u003d t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:\n                while (t.isReferenceType()) {\n                    t \u003d t.getReferencedType();\n                }\n                return t.isJavaLangObject()\n                        || (!t.isConcrete()\n                                // [databind#88] Should not apply to JSON tree models:\n                                \u0026\u0026 !TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t \u003d t.getContentType();\n                }\n                // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:\n                while (t.isReferenceType()) {\n                    t \u003d t.getReferencedType();\n                }\n                // [databind#88] Should not apply to JSON tree models:\n                return !t.isFinal() \u0026\u0026 !TreeNode.class.isAssignableFrom(t.getRawClass());\n            default:\n            //case JAVA_LANG_OBJECT:\n                return t.isJavaLangObject();\n            }\n        }",
    "begin_line": 236,
    "end_line": 274,
    "comment": "/** \n * Method called to check if the default type handler should be used for given type. Note: \"natural types\" (String, Boolean, Integer, Double) will never use typing; that is both due to them being concrete and final, and since actual serializers and deserializers will also ignore any attempts to enforce typing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#479",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()",
    "snippet": "public ObjectMapper() {\n        this(null, null, null);\n    }",
    "begin_line": 479,
    "end_line": 481,
    "comment": "/** \n * Default constructor, which will construct the default {@link JsonFactory} as necessary, use{@link SerializerProvider} as its{@link SerializerProvider}, and {@link BeanSerializerFactory} as its{@link SerializerFactory}. This means that it can serialize all standard JDK types, as well as regular Java Beans (based on method names and Jackson-specific annotations), but does not support JAXB annotations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory)",
    "snippet": "public ObjectMapper(JsonFactory jf) {\n        this(jf, null, null);\n    }",
    "begin_line": 488,
    "end_line": 490,
    "comment": "/** \n * Constructs instance that uses specified  {@link JsonFactory}for constructing necessary  {@link JsonParser}s and/or {@link JsonGenerator}s.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#497",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "protected ObjectMapper(ObjectMapper src)\n    {\n        _jsonFactory \u003d src._jsonFactory.copy();\n        _jsonFactory.setCodec(this);\n        _subtypeResolver \u003d src._subtypeResolver;\n        _typeFactory \u003d src._typeFactory;\n        _injectableValues \u003d src._injectableValues;\n        _configOverrides \u003d src._configOverrides.copy();\n        _mixIns \u003d src._mixIns.copy();\n\n        RootNameLookup rootNames \u003d new RootNameLookup();\n        _serializationConfig \u003d new SerializationConfig(src._serializationConfig,\n                _mixIns, rootNames, _configOverrides);\n        _deserializationConfig \u003d new DeserializationConfig(src._deserializationConfig,\n                _mixIns, rootNames,  _configOverrides);\n        _serializerProvider \u003d src._serializerProvider.copy();\n        _deserializationContext \u003d src._deserializationContext.copy();\n\n        // Default serializer factory is stateless, can just assign\n        _serializerFactory \u003d src._serializerFactory;\n\n        // as per [databind#922], [databind#1078] make sure to copy registered modules as appropriate\n        Set\u003cObject\u003e reg \u003d src._registeredModuleTypes;\n        if (reg \u003d\u003d null) {\n            _registeredModuleTypes \u003d null;\n        } else {\n            _registeredModuleTypes \u003d new LinkedHashSet\u003cObject\u003e(reg);\n        }\n    }",
    "begin_line": 497,
    "end_line": 525,
    "comment": "/** \n * Copy-constructor, mostly used to support  {@link #copy}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory, com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)",
    "snippet": "public ObjectMapper(JsonFactory jf,\n            DefaultSerializerProvider sp, DefaultDeserializationContext dc)\n    {\n        /* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass \u0027this\u0027,\n         *    to create actual linking.\n         */\n        if (jf \u003d\u003d null) {\n            _jsonFactory \u003d new MappingJsonFactory(this);\n        } else {\n            _jsonFactory \u003d jf;\n            if (jf.getCodec() \u003d\u003d null) { // as per [JACKSON-741]\n                _jsonFactory.setCodec(this);\n            }\n        }\n        _subtypeResolver \u003d new StdSubtypeResolver();\n        RootNameLookup rootNames \u003d new RootNameLookup();\n        // and default type factory is shared one\n        _typeFactory \u003d TypeFactory.defaultInstance();\n\n        SimpleMixInResolver mixins \u003d new SimpleMixInResolver(null);\n        _mixIns \u003d mixins;\n        BaseSettings base \u003d DEFAULT_BASE.withClassIntrospector(defaultClassIntrospector());\n        _configOverrides \u003d new ConfigOverrides();\n        _serializationConfig \u003d new SerializationConfig(base,\n                    _subtypeResolver, mixins, rootNames, _configOverrides);\n        _deserializationConfig \u003d new DeserializationConfig(base,\n                    _subtypeResolver, mixins, rootNames, _configOverrides);\n\n        // Some overrides we may need\n        final boolean needOrder \u003d _jsonFactory.requiresPropertyOrdering();\n        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {\n            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);\n        }\n        \n        _serializerProvider \u003d (sp \u003d\u003d null) ? new DefaultSerializerProvider.Impl() : sp;\n        _deserializationContext \u003d (dc \u003d\u003d null) ?\n                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc;\n\n        // Default serializer factory is stateless, can just assign\n        _serializerFactory \u003d BeanSerializerFactory.instance;\n    }",
    "begin_line": 539,
    "end_line": 582,
    "comment": "/** \n * Constructs instance that uses specified  {@link JsonFactory}for constructing necessary  {@link JsonParser}s and/or {@link JsonGenerator}s, and uses given providers for accessing serializers and deserializers.\n * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed\n * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed\n * @param dc Blueprint deserialization context instance to use for creatingactual context objects; if null, will construct standard {@link DeserializationContext}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.defaultClassIntrospector#590",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector()",
    "snippet": "protected ClassIntrospector defaultClassIntrospector() {\n        return new BasicClassIntrospector();\n    }",
    "begin_line": 590,
    "end_line": 592,
    "comment": "/** \n * Overridable helper method used to construct default  {@link ClassIntrospector}to use.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.copy#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.copy()",
    "snippet": "public ObjectMapper copy() {\n        _checkInvalidCopy(ObjectMapper.class);\n        return new ObjectMapper(this);\n    }",
    "begin_line": 615,
    "end_line": 618,
    "comment": "/** \n * Method for creating a new  {@link ObjectMapper} instance thathas same initial configuration as this instance. Note that this also requires making a copy of the underlying  {@link JsonFactory}instance. \u003cp\u003e Method is typically used when multiple, differently configured mappers are needed. Although configuration is shared, cached serializers and deserializers are NOT shared, which means that the new instance may be re-configured before use; meaning that it behaves the same way as if an instance was constructed from scratch.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._checkInvalidCopy#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy(java.lang.Class\u003c?\u003e)",
    "snippet": "protected void _checkInvalidCopy(Class\u003c?\u003e exp)\n    {\n        if (getClass() !\u003d exp) {\n            // 10-Nov-2016, tatu: could almost use `ClassUtil.verifyMustOverride()` but not quite\n            throw new IllegalStateException(\"Failed copy(): \"+getClass().getName()\n                    +\" (version: \"+version()+\") does not override copy(); it has to\");\n        }\n    }",
    "begin_line": 623,
    "end_line": 630,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newReader#645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected ObjectReader _newReader(DeserializationConfig config) {\n        return new ObjectReader(this, config);\n    }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectReader}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newReader#655",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.lang.Object, FormatSchema, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected ObjectReader _newReader(DeserializationConfig config,\n            JavaType valueType, Object valueToUpdate,\n            FormatSchema schema, InjectableValues injectableValues) {\n        return new ObjectReader(this, config, valueType, valueToUpdate, schema, injectableValues);\n    }",
    "begin_line": 655,
    "end_line": 659,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectReader}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config) {\n        return new ObjectWriter(this, config);\n    }",
    "begin_line": 667,
    "end_line": 669,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#677",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig, FormatSchema)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config, FormatSchema schema) {\n        return new ObjectWriter(this, config, schema);\n    }",
    "begin_line": 677,
    "end_line": 679,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#687",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, PrettyPrinter)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config,\n            JavaType rootType, PrettyPrinter pp) {\n        return new ObjectWriter(this, config, rootType, pp);\n    }",
    "begin_line": 687,
    "end_line": 690,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.version#703",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.version()",
    "snippet": "@Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }",
    "begin_line": 703,
    "end_line": 705,
    "comment": "/** \n * Method that will return version information stored in and read from jar that contains this class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModule#720",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)",
    "snippet": "public ObjectMapper registerModule(Module module)\n    {\n        if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\n            Object typeId \u003d module.getTypeId();\n            if (typeId !\u003d null) {\n                if (_registeredModuleTypes \u003d\u003d null) {\n                    // plus let\u0027s keep them in order too, easier to debug or expose\n                    // in registration order if that matter\n                    _registeredModuleTypes \u003d new LinkedHashSet\u003cObject\u003e();\n                }\n                // try adding; if already had it, should skip\n                if (!_registeredModuleTypes.add(typeId)) {\n                    return this;\n                }\n            }\n        }\n        \n        /* Let\u0027s ensure we have access to name and version information, \n         * even if we do not have immediate use for either. This way we know\n         * that they will be available from beginning\n         */\n        String name \u003d module.getModuleName();\n        if (name \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Module without defined name\");\n        }\n        Version version \u003d module.version();\n        if (version \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Module without defined version\");\n        }\n\n        // And then call registration\n        module.setupModule(new Module.SetupContext()\n        {\n            // // // Accessors\n\n            @Override\n            public Version getMapperVersion() {\n                return version();\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public \u003cC extends ObjectCodec\u003e C getOwner() {\n                // why do we need the cast here?!?\n                return (C) ObjectMapper.this;\n            }\n\n            @Override\n            public TypeFactory getTypeFactory() {\n                return _typeFactory;\n            }\n            \n            @Override\n            public boolean isEnabled(MapperFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n\n            @Override\n            public boolean isEnabled(DeserializationFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n            \n            @Override\n            public boolean isEnabled(SerializationFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n\n            @Override\n            public boolean isEnabled(JsonFactory.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n\n            @Override\n            public boolean isEnabled(JsonParser.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n\n            @Override\n            public boolean isEnabled(JsonGenerator.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }\n\n            // // // Mutant accessors\n\n            @Override\n            public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\n                return ObjectMapper.this.configOverride(type);\n            }\n\n            // // // Methods for registering handlers: deserializers\n\n            @Override\n            public void addDeserializers(Deserializers d) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }\n\n            @Override\n            public void addKeyDeserializers(KeyDeserializers d) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }\n\n            @Override\n            public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }\n            \n            // // // Methods for registering handlers: serializers\n            \n            @Override\n            public void addSerializers(Serializers s) {\n                _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\n            }\n\n            @Override\n            public void addKeySerializers(Serializers s) {\n                _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\n            }\n            \n            @Override\n            public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n                _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\n            }\n\n            // // // Methods for registering handlers: other\n            \n            @Override\n            public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }\n\n            @Override\n            public void addTypeModifier(TypeModifier modifier) {\n                TypeFactory f \u003d _typeFactory;\n                f \u003d f.withModifier(modifier);\n                setTypeFactory(f);\n            }\n\n            @Override\n            public void addValueInstantiators(ValueInstantiators instantiators) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }\n\n            @Override\n            public void setClassIntrospector(ClassIntrospector ci) {\n                _deserializationConfig \u003d _deserializationConfig.with(ci);\n                _serializationConfig \u003d _serializationConfig.with(ci);\n            }\n\n            @Override\n            public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n                _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\n                _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\n            }\n            \n            @Override\n            public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n                _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\n                _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\n            }\n\n            @Override\n            public void registerSubtypes(Class\u003c?\u003e... subtypes) {\n                ObjectMapper.this.registerSubtypes(subtypes);\n            }\n\n            @Override\n            public void registerSubtypes(NamedType... subtypes) {\n                ObjectMapper.this.registerSubtypes(subtypes);\n            }\n            \n            @Override\n            public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n                addMixIn(target, mixinSource);\n            }\n            \n            @Override\n            public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\n                addHandler(handler);\n            }\n\n            @Override\n            public void setNamingStrategy(PropertyNamingStrategy naming) {\n                setPropertyNamingStrategy(naming);\n            }\n        });\n        return this;\n    }",
    "begin_line": 720,
    "end_line": 911,
    "comment": "/** \n * Method for registering a module that can extend functionality provided by this mapper; for example, by adding providers for custom serializers and deserializers.\n * @param module Module to register\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getMapperVersion#756",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getMapperVersion()",
    "snippet": "@Override\n            public Version getMapperVersion() {\n                return version();\n            }",
    "begin_line": 756,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getOwner#762",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getOwner()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n            @Override\n            public \u003cC extends ObjectCodec\u003e C getOwner() {\n                // why do we need the cast here?!?\n                return (C) ObjectMapper.this;\n            }",
    "begin_line": 762,
    "end_line": 765,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getTypeFactory#768",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()",
    "snippet": "@Override\n            public TypeFactory getTypeFactory() {\n                return _typeFactory;\n            }",
    "begin_line": 768,
    "end_line": 770,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#773",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override\n            public boolean isEnabled(MapperFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 773,
    "end_line": 775,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "@Override\n            public boolean isEnabled(DeserializationFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 778,
    "end_line": 780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#783",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "@Override\n            public boolean isEnabled(SerializationFeature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 783,
    "end_line": 785,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#788",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonFactory.Feature)",
    "snippet": "@Override\n            public boolean isEnabled(JsonFactory.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 788,
    "end_line": 790,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#793",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonParser.Feature)",
    "snippet": "@Override\n            public boolean isEnabled(JsonParser.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 793,
    "end_line": 795,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#798",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonGenerator.Feature)",
    "snippet": "@Override\n            public boolean isEnabled(JsonGenerator.Feature f) {\n                return ObjectMapper.this.isEnabled(f);\n            }",
    "begin_line": 798,
    "end_line": 800,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configOverride#805",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n            public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\n                return ObjectMapper.this.configOverride(type);\n            }",
    "begin_line": 805,
    "end_line": 807,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addDeserializers#812",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "@Override\n            public void addDeserializers(Deserializers d) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }",
    "begin_line": 812,
    "end_line": 815,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addKeyDeserializers#818",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "@Override\n            public void addKeyDeserializers(KeyDeserializers d) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }",
    "begin_line": 818,
    "end_line": 821,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addBeanDeserializerModifier#824",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addBeanDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "@Override\n            public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }",
    "begin_line": 824,
    "end_line": 827,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addSerializers#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override\n            public void addSerializers(Serializers s) {\n                _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\n            }",
    "begin_line": 832,
    "end_line": 834,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addKeySerializers#837",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override\n            public void addKeySerializers(Serializers s) {\n                _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\n            }",
    "begin_line": 837,
    "end_line": 839,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addBeanSerializerModifier#842",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addBeanSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "@Override\n            public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n                _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\n            }",
    "begin_line": 842,
    "end_line": 844,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addAbstractTypeResolver#849",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "@Override\n            public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }",
    "begin_line": 849,
    "end_line": 852,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addTypeModifier#855",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addTypeModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "snippet": "@Override\n            public void addTypeModifier(TypeModifier modifier) {\n                TypeFactory f \u003d _typeFactory;\n                f \u003d f.withModifier(modifier);\n                setTypeFactory(f);\n            }",
    "begin_line": 855,
    "end_line": 859,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addValueInstantiators#862",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "@Override\n            public void addValueInstantiators(ValueInstantiators instantiators) {\n                DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\n                _deserializationContext \u003d _deserializationContext.with(df);\n            }",
    "begin_line": 862,
    "end_line": 865,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setClassIntrospector#868",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "@Override\n            public void setClassIntrospector(ClassIntrospector ci) {\n                _deserializationConfig \u003d _deserializationConfig.with(ci);\n                _serializationConfig \u003d _serializationConfig.with(ci);\n            }",
    "begin_line": 868,
    "end_line": 871,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.insertAnnotationIntrospector#874",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.insertAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Override\n            public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n                _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\n                _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\n            }",
    "begin_line": 874,
    "end_line": 877,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.appendAnnotationIntrospector#880",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.appendAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Override\n            public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n                _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\n                _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\n            }",
    "begin_line": 880,
    "end_line": 883,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#886",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n            public void registerSubtypes(Class\u003c?\u003e... subtypes) {\n                ObjectMapper.this.registerSubtypes(subtypes);\n            }",
    "begin_line": 886,
    "end_line": 888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#891",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "@Override\n            public void registerSubtypes(NamedType... subtypes) {\n                ObjectMapper.this.registerSubtypes(subtypes);\n            }",
    "begin_line": 891,
    "end_line": 893,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInAnnotations#896",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n            public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n                addMixIn(target, mixinSource);\n            }",
    "begin_line": 896,
    "end_line": 898,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addDeserializationProblemHandler#901",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addDeserializationProblemHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "@Override\n            public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\n                addHandler(handler);\n            }",
    "begin_line": 901,
    "end_line": 903,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setNamingStrategy#906",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "@Override\n            public void setNamingStrategy(PropertyNamingStrategy naming) {\n                setPropertyNamingStrategy(naming);\n            }",
    "begin_line": 906,
    "end_line": 908,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModules#924",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModules(com.fasterxml.jackson.databind.Module)",
    "snippet": "public ObjectMapper registerModules(Module... modules)\n    {\n        for (Module module : modules) {\n            registerModule(module);\n        }\n        return this;\n    }",
    "begin_line": 924,
    "end_line": 930,
    "comment": "/** \n * Convenience method for registering specified modules in order; functionally equivalent to: \u003cpre\u003e for (Module module : modules) { registerModule(module); } \u003c/pre\u003e\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModules#943",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModules(java.lang.Iterable\u003ccom.fasterxml.jackson.databind.Module\u003e)",
    "snippet": "public ObjectMapper registerModules(Iterable\u003cModule\u003e modules)\n    {\n        for (Module module : modules) {\n            registerModule(module);\n        }\n        return this;\n    }",
    "begin_line": 943,
    "end_line": 949,
    "comment": "/** \n * Convenience method for registering specified modules in order; functionally equivalent to: \u003cpre\u003e for (Module module : modules) { registerModule(module); } \u003c/pre\u003e\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findModules#960",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findModules()",
    "snippet": "public static List\u003cModule\u003e findModules() {\n        return findModules(null);\n    }",
    "begin_line": 960,
    "end_line": 962,
    "comment": "/** \n * Method for locating available methods, using JDK  {@link ServiceLoader}facility, along with module-provided SPI. \u003cp\u003e Note that method does not do any caching, so calls should be considered potentially expensive.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findModules#973",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findModules(java.lang.ClassLoader)",
    "snippet": "public static List\u003cModule\u003e findModules(ClassLoader classLoader)\n    {\n        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003cModule\u003e();\n        ServiceLoader\u003cModule\u003e loader \u003d secureGetServiceLoader(Module.class, classLoader);\n        for (Module module : loader) {\n            modules.add(module);\n        }\n        return modules;\n    }",
    "begin_line": 973,
    "end_line": 981,
    "comment": "/** \n * Method for locating available methods, using JDK  {@link ServiceLoader}facility, along with module-provided SPI. \u003cp\u003e Note that method does not do any caching, so calls should be considered potentially expensive.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.secureGetServiceLoader#983",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.secureGetServiceLoader(java.lang.Class\u003cT\u003e, java.lang.ClassLoader)",
    "snippet": "private static \u003cT\u003e ServiceLoader\u003cT\u003e secureGetServiceLoader(final Class\u003cT\u003e clazz, final ClassLoader classLoader) {\n        final SecurityManager sm \u003d System.getSecurityManager();\n        if (sm \u003d\u003d null) {\n            return (classLoader \u003d\u003d null) ?\n                    ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);\n        }\n        return AccessController.doPrivileged(new PrivilegedAction\u003cServiceLoader\u003cT\u003e\u003e() {\n            @Override\n            public ServiceLoader\u003cT\u003e run() {\n                return (classLoader \u003d\u003d null) ?\n                        ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);\n            }\n        });\n    }",
    "begin_line": 983,
    "end_line": 996,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.run#991",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.run()",
    "snippet": "@Override\n            public ServiceLoader\u003cT\u003e run() {\n                return (classLoader \u003d\u003d null) ?\n                        ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);\n            }",
    "begin_line": 991,
    "end_line": 994,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findAndRegisterModules#1010",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules()",
    "snippet": "public ObjectMapper findAndRegisterModules() {\n        return registerModules(findModules());\n    }",
    "begin_line": 1010,
    "end_line": 1012,
    "comment": "/** \n * Convenience method that is functionally equivalent to: \u003ccode\u003e mapper.registerModules(mapper.findModules()); \u003c/code\u003e \u003cp\u003e As with  {@link #findModules()}, no caching is done for modules, so care needs to be taken to either create and share a single mapper instance; or to cache introspected set of modules.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializationConfig#1028",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig()",
    "snippet": "public SerializationConfig getSerializationConfig() {\n        return _serializationConfig;\n    }",
    "begin_line": 1028,
    "end_line": 1030,
    "comment": "/** \n * Method that returns the shared default  {@link SerializationConfig}object that defines configuration settings for serialization. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDeserializationConfig#1041",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig()",
    "snippet": "public DeserializationConfig getDeserializationConfig() {\n        return _deserializationConfig;\n    }",
    "begin_line": 1041,
    "end_line": 1043,
    "comment": "/** \n * Method that returns the shared default  {@link DeserializationConfig} objectthat defines configuration settings for deserialization. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDeserializationContext#1052",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext()",
    "snippet": "public DeserializationContext getDeserializationContext() {\n        return _deserializationContext;\n    }",
    "begin_line": 1052,
    "end_line": 1054,
    "comment": "/** \n * Method for getting current  {@link DeserializationContext}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of context object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializerFactory#1066",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "public ObjectMapper setSerializerFactory(SerializerFactory f) {\n        _serializerFactory \u003d f;\n        return this;\n    }",
    "begin_line": 1066,
    "end_line": 1069,
    "comment": "/** \n * Method for setting specific  {@link SerializerFactory} to usefor constructing (bean) serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerFactory#1078",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory()",
    "snippet": "public SerializerFactory getSerializerFactory() {\n        return _serializerFactory;\n    }",
    "begin_line": 1078,
    "end_line": 1080,
    "comment": "/** \n * Method for getting current  {@link SerializerFactory}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of factory object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializerProvider#1087",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)",
    "snippet": "public ObjectMapper setSerializerProvider(DefaultSerializerProvider p) {\n        _serializerProvider \u003d p;\n        return this;\n    }",
    "begin_line": 1087,
    "end_line": 1090,
    "comment": "/** \n * Method for setting \"blueprint\"  {@link SerializerProvider} instanceto use as the base for actual provider instances to use for handling caching of  {@link JsonSerializer} instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerProvider#1099",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider()",
    "snippet": "public SerializerProvider getSerializerProvider() {\n        return _serializerProvider;\n    }",
    "begin_line": 1099,
    "end_line": 1101,
    "comment": "/** \n * Accessor for the \"blueprint\" (or, factory) instance, from which instances are created by calling  {@link DefaultSerializerProvider#createInstance}. Note that returned instance can not be directly used as it is not properly configured: to get a properly configured instance to call, use {@link #getSerializerProviderInstance()} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerProviderInstance#1111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()",
    "snippet": "public SerializerProvider getSerializerProviderInstance() {\n        return _serializerProvider(_serializationConfig);\n    }",
    "begin_line": 1111,
    "end_line": 1113,
    "comment": "/** \n * Accessor for constructing and returning a  {@link SerializerProvider}instance that may be used for accessing serializers. This is same as calling  {@link #getSerializerProvider}, and calling \u003ccode\u003ecreateInstance\u003c/code\u003e on it.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixIns#1138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixIns(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public ObjectMapper setMixIns(Map\u003cClass\u003c?\u003e, Class\u003c?\u003e\u003e sourceMixins)\n    {\n        // NOTE: does NOT change possible externally configured resolver, just local defs\n        _mixIns.setLocalDefinitions(sourceMixins);\n        return this;\n    }",
    "begin_line": 1138,
    "end_line": 1143,
    "comment": "/** \n * Method to use for defining mix-in annotations to use for augmenting annotations that processable (serializable / deserializable) classes have. Mixing in is done when introspecting class annotations and properties. Map passed contains keys that are target classes (ones to augment with new annotation overrides), and values that are source classes (have annotations to use for augmentation). Annotations from source classes (and their supertypes) will \u003cb\u003eoverride\u003c/b\u003e annotations that target classes (and their super-types) have. \u003cp\u003e Note that this method will CLEAR any previously defined mix-ins for this mapper.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addMixIn#1157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addMixIn(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource)\n    {\n        _mixIns.addLocalDefinition(target, mixinSource);\n        return this;\n    }",
    "begin_line": 1157,
    "end_line": 1161,
    "comment": "/** \n * Method to use for adding mix-in annotations to use for augmenting specified class or interface. All annotations from \u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations that \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n * @param target Class (or interface) whose annotations to effectively override\n * @param mixinSource Class (or interface) whose annotations are tobe \"added\" to target\u0027s annotations, overriding as necessary\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInResolver#1171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public ObjectMapper setMixInResolver(ClassIntrospector.MixInResolver resolver)\n    {\n        SimpleMixInResolver r \u003d _mixIns.withOverrides(resolver);\n        if (r !\u003d _mixIns) {\n            _mixIns \u003d r;\n            _deserializationConfig \u003d new DeserializationConfig(_deserializationConfig, r);\n            _serializationConfig \u003d new SerializationConfig(_serializationConfig, r);\n        }\n        return this;\n    }",
    "begin_line": 1171,
    "end_line": 1180,
    "comment": "/** \n * Method that can be called to specify given resolver for locating mix-in classes to use, overriding directly added mappings. Note that direct mappings are not cleared, but they are only applied if resolver does not provide mix-in matches.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findMixInClassFor#1182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls) {\n        return _mixIns.findMixInClassFor(cls);\n    }",
    "begin_line": 1182,
    "end_line": 1184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.mixInCount#1187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.mixInCount()",
    "snippet": "public int mixInCount() {\n        return _mixIns.localSize();\n    }",
    "begin_line": 1187,
    "end_line": 1189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInAnnotations#1195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Deprecated\n    public void setMixInAnnotations(Map\u003cClass\u003c?\u003e, Class\u003c?\u003e\u003e sourceMixins) {\n        setMixIns(sourceMixins);\n    }",
    "begin_line": 1195,
    "end_line": 1197,
    "comment": "/** \n * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #setMixIns}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addMixInAnnotations#1203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public final void addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n        addMixIn(target, mixinSource);\n    }",
    "begin_line": 1203,
    "end_line": 1205,
    "comment": "/** \n * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #addMixIn(Class,Class)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getVisibilityChecker#1218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker()",
    "snippet": "public VisibilityChecker\u003c?\u003e getVisibilityChecker() {\n        return _serializationConfig.getDefaultVisibilityChecker();\n    }",
    "begin_line": 1218,
    "end_line": 1220,
    "comment": "/** \n * Method for accessing currently configured visibility checker; object used for determining whether given property element (method, field, constructor) can be auto-detected or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibility#1232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public ObjectMapper setVisibility(VisibilityChecker\u003c?\u003e vc) {\n        _configOverrides.setDefaultVisibility(vc);\n        return this;\n    }",
    "begin_line": 1232,
    "end_line": 1235,
    "comment": "/** \n * Method for setting currently configured default  {@link VisibilityChecker}, object used for determining whether given property element (method, field, constructor) can be auto-detected or not. This default checker is used as the base visibility: per-class overrides (both via annotations and per-type config overrides) can further change these settings.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibility#1261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(PropertyAccessor, JsonAutoDetect.Visibility)",
    "snippet": "public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)\n    {\n        VisibilityChecker\u003c?\u003e vc \u003d _configOverrides.getDefaultVisibility();\n        vc \u003d vc.withVisibility(forMethod, visibility);\n        _configOverrides.setDefaultVisibility(vc);\n        return this;\n    }",
    "begin_line": 1261,
    "end_line": 1267,
    "comment": "/** \n * Convenience method that allows changing configuration for underlying  {@link VisibilityChecker}s, to change details of what kinds of properties are auto-detected. Basically short cut for doing: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().withVisibility(forMethod, visibility) ); \u003c/pre\u003e one common use case would be to do: \u003cpre\u003e mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY); \u003c/pre\u003e which would make all member fields serializable without further annotations, instead of just public fields (default setting).\n * @param forMethod Type of property descriptor affected (field, getter/isGetter,setter, creator)\n * @param visibility Minimum visibility to require for the property descriptors of type\n * @return Modified mapper instance (that is, \"this\"), to allow chainingof configuration calls\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSubtypeResolver#1272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver()",
    "snippet": "public SubtypeResolver getSubtypeResolver() {\n        return _subtypeResolver;\n    }",
    "begin_line": 1272,
    "end_line": 1274,
    "comment": "/** \n * Method for accessing subtype resolver in use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSubtypeResolver#1279",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "public ObjectMapper setSubtypeResolver(SubtypeResolver str) {\n        _subtypeResolver \u003d str;\n        _deserializationConfig \u003d _deserializationConfig.with(str);\n        _serializationConfig \u003d _serializationConfig.with(str);\n        return this;\n    }",
    "begin_line": 1279,
    "end_line": 1284,
    "comment": "/** \n * Method for setting custom subtype resolver to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setAnnotationIntrospector#1296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) {\n        _serializationConfig \u003d _serializationConfig.with(ai);\n        _deserializationConfig \u003d _deserializationConfig.with(ai);\n        return this;\n    }",
    "begin_line": 1296,
    "end_line": 1300,
    "comment": "/** \n * Method for setting  {@link AnnotationIntrospector} used by thismapper instance for both serialization and deserialization. Note that doing this will replace the current introspector, which may lead to unavailability of core Jackson annotations. If you want to combine handling of multiple introspectors, have a look at  {@link com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair}.\n * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setAnnotationIntrospectors#1317",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI,\n            AnnotationIntrospector deserializerAI) {\n        _serializationConfig \u003d _serializationConfig.with(serializerAI);\n        _deserializationConfig \u003d _deserializationConfig.with(deserializerAI);\n        return this;\n    }",
    "begin_line": 1317,
    "end_line": 1322,
    "comment": "/** \n * Method for changing  {@link AnnotationIntrospector} instances usedby this mapper instance for serialization and deserialization, specifying them separately so that different introspection can be used for different aspects\n * @since 2.1\n * @param serializerAI {@link AnnotationIntrospector} to use for configuringserialization\n * @param deserializerAI {@link AnnotationIntrospector} to use for configuringdeserialization\n * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setPropertyNamingStrategy#1327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) {\n        _serializationConfig \u003d _serializationConfig.with(s);\n        _deserializationConfig \u003d _deserializationConfig.with(s);\n        return this;\n    }",
    "begin_line": 1327,
    "end_line": 1331,
    "comment": "/** \n * Method for setting custom property naming strategy to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getPropertyNamingStrategy#1336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy()",
    "snippet": "public PropertyNamingStrategy getPropertyNamingStrategy() {\n        // arbitrary choice but let\u0027s do:\n        return _serializationConfig.getPropertyNamingStrategy();\n    }",
    "begin_line": 1336,
    "end_line": 1339,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPrettyPrinter#1351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)",
    "snippet": "public ObjectMapper setDefaultPrettyPrinter(PrettyPrinter pp) {\n        _serializationConfig \u003d _serializationConfig.withDefaultPrettyPrinter(pp);\n        return this;\n    }",
    "begin_line": 1351,
    "end_line": 1354,
    "comment": "/** \n * Method for specifying  {@link PrettyPrinter} to use when \"default pretty-printing\"is enabled (by enabling  {@link SerializationFeature#INDENT_OUTPUT})\n * @param pp Pretty printer to use by default.\n * @return This mapper, useful for call-chaining\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibilityChecker#1360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "@Deprecated\n    public void setVisibilityChecker(VisibilityChecker\u003c?\u003e vc) {\n        setVisibility(vc);\n    }",
    "begin_line": 1360,
    "end_line": 1362,
    "comment": "/** \n * @deprecated Since 2.6 use {@link #setVisibility(VisibilityChecker)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializationInclusion#1379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude.Include)",
    "snippet": "public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {\n        setPropertyInclusion(JsonInclude.Value.construct(incl, incl));\n        return this;\n    }",
    "begin_line": 1379,
    "end_line": 1382,
    "comment": "/** \n * Convenience method, equivalent to calling: \u003cpre\u003e setPropertyInclusion(JsonInclude.Value.construct(incl, incl)); \u003c/pre\u003e \u003cp\u003e NOTE: behavior differs slightly from 2.8, where second argument was implied to be \u003ccode\u003eJsonInclude.Include.ALWAYS\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setPropertyInclusion#1389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Deprecated\n    public ObjectMapper setPropertyInclusion(JsonInclude.Value incl) {\n        return setDefaultPropertyInclusion(incl);\n    }",
    "begin_line": 1389,
    "end_line": 1391,
    "comment": "/** \n * @since 2.7\n * @deprecated Since 2.9 use {@link #setDefaultPropertyInclusion}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPropertyInclusion#1400",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Value)",
    "snippet": "public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Value incl) {\n        _configOverrides.setDefaultInclusion(incl);\n        return this;\n    }",
    "begin_line": 1400,
    "end_line": 1403,
    "comment": "/** \n * Method for setting default POJO property inclusion strategy for serialization, applied for all properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9 (basically rename of \u003ccode\u003esetPropertyInclusion\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPropertyInclusion#1413",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Include)",
    "snippet": "public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Include incl) {\n        _configOverrides.setDefaultInclusion(JsonInclude.Value.construct(incl, incl));\n        return this;\n    }",
    "begin_line": 1413,
    "end_line": 1416,
    "comment": "/** \n * Short-cut for: \u003cpre\u003e setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl)); \u003c/pre\u003e\n * @since 2.9 (basically rename of \u003ccode\u003esetPropertyInclusion\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultSetterInfo#1425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter.Value)",
    "snippet": "public ObjectMapper setDefaultSetterInfo(JsonSetter.Value v) {\n        _configOverrides.setDefaultSetterInfo(v);\n        return this;\n    }",
    "begin_line": 1425,
    "end_line": 1428,
    "comment": "/** \n * Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultVisibility#1438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(JsonAutoDetect.Value)",
    "snippet": "public ObjectMapper setDefaultVisibility(JsonAutoDetect.Value vis) {\n        _configOverrides.setDefaultVisibility(VisibilityChecker.Std.construct(vis));\n        return this;\n    }",
    "begin_line": 1438,
    "end_line": 1441,
    "comment": "/** \n * Method for setting auto-detection visibility definition defaults, which are in effect unless overridden by annotations (like \u003ccode\u003eJsonAutoDetect\u003c/code\u003e) or per-type visibility overrides.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultMergeable#1450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)",
    "snippet": "public ObjectMapper setDefaultMergeable(Boolean b) {\n        _configOverrides.setDefaultMergeable(b);\n        return this;\n    }",
    "begin_line": 1450,
    "end_line": 1453,
    "comment": "/** \n * Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1473",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()",
    "snippet": "public ObjectMapper enableDefaultTyping() {\n        return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);\n    }",
    "begin_line": 1473,
    "end_line": 1475,
    "comment": "/** \n * Convenience method that is equivalent to calling \u003cpre\u003e enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE); \u003c/pre\u003e \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)",
    "snippet": "public ObjectMapper enableDefaultTyping(DefaultTyping dti) {\n        return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);\n    }",
    "begin_line": 1489,
    "end_line": 1491,
    "comment": "/** \n * Convenience method that is equivalent to calling \u003cpre\u003e enableObjectTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY); \u003c/pre\u003e \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1511",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, JsonTypeInfo.As)",
    "snippet": "public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs)\n    {\n        /* 18-Sep-2014, tatu: Let\u0027s add explicit check to ensure no one tries to\n         *   use \"As.EXTERNAL_PROPERTY\", since that will not work (with 2.5+)\n         */\n        if (includeAs \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n            throw new IllegalArgumentException(\"Can not use includeAs of \"+includeAs);\n        }\n        \n        TypeResolverBuilder\u003c?\u003e typer \u003d new DefaultTypeResolverBuilder(applicability);\n        // we\u0027ll always use full class name, when using defaulting\n        typer \u003d typer.init(JsonTypeInfo.Id.CLASS, null);\n        typer \u003d typer.inclusion(includeAs);\n        return setDefaultTyping(typer);\n    }",
    "begin_line": 1511,
    "end_line": 1525,
    "comment": "/** \n * Method for enabling automatic inclusion of type information, needed for proper deserialization of polymorphic types (unless types have been annotated with  {@link com.fasterxml.jackson.annotation.JsonTypeInfo}). \u003cP\u003e NOTE: use of \u003ccode\u003eJsonTypeInfo.As#EXTERNAL_PROPERTY\u003c/code\u003e \u003cb\u003eNOT SUPPORTED\u003c/b\u003e; and attempts of do so will throw an  {@link IllegalArgumentException} to makethis limitation explicit. \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n * @param applicability Defines kinds of types for which additional type informationis added; see  {@link DefaultTyping} for more information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTypingAsProperty#1541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, java.lang.String)",
    "snippet": "public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName)\n    {\n        TypeResolverBuilder\u003c?\u003e typer \u003d new DefaultTypeResolverBuilder(applicability);\n        // we\u0027ll always use full class name, when using defaulting\n        typer \u003d typer.init(JsonTypeInfo.Id.CLASS, null);\n        typer \u003d typer.inclusion(JsonTypeInfo.As.PROPERTY);\n        typer \u003d typer.typeProperty(propertyName);\n        return setDefaultTyping(typer);\n    }",
    "begin_line": 1541,
    "end_line": 1549,
    "comment": "/** \n * Method for enabling automatic inclusion of type information -- needed for proper deserialization of polymorphic types (unless types have been annotated with  {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) -- using \"As.PROPERTY\" inclusion mechanism and specified property name to use for inclusion (default being \"@class\" since default type information always uses class name as type identifier) \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disableDefaultTyping#1557",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping()",
    "snippet": "public ObjectMapper disableDefaultTyping() {\n        return setDefaultTyping(null);\n    }",
    "begin_line": 1557,
    "end_line": 1559,
    "comment": "/** \n * Method for disabling automatic inclusion of type information; if so, only explicitly annotated types (ones with {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) will have additional embedded type information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultTyping#1573",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public ObjectMapper setDefaultTyping(TypeResolverBuilder\u003c?\u003e typer) {\n        _deserializationConfig \u003d _deserializationConfig.with(typer);\n        _serializationConfig \u003d _serializationConfig.with(typer);\n        return this;\n    }",
    "begin_line": 1573,
    "end_line": 1577,
    "comment": "/** \n * Method for enabling automatic inclusion of type information, using specified handler object for determining which types this affects, as well as details of how information is embedded. \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, so care should be taken to use a  {@link TypeResolverBuilder} that can limit allowed classes todeserialize.\n * @param typer Type information inclusion handler\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#1586",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "public void registerSubtypes(Class\u003c?\u003e... classes) {\n        getSubtypeResolver().registerSubtypes(classes);\n    }",
    "begin_line": 1586,
    "end_line": 1588,
    "comment": "/** \n * Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Type for given class is determined from appropriate annotation; or if missing, default name (unqualified class name)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#1598",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "public void registerSubtypes(NamedType... types) {\n        getSubtypeResolver().registerSubtypes(types);\n    }",
    "begin_line": 1598,
    "end_line": 1600,
    "comment": "/** \n * Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Name may be provided as part of argument, but if not will be based on annotations or use default name (unqualified class name).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configOverride#1625",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\n        return _configOverrides.findOrCreateOverride(type);\n    }",
    "begin_line": 1625,
    "end_line": 1627,
    "comment": "/** \n * Accessor for getting a mutable configuration override object for given type, needed to add or change per-type overrides applied to properties of given type. Usage is through returned object by colling \"setter\" methods, which directly modify override object and take effect directly. For example you can do \u003cpre\u003e mapper.configOverride(java.util.Date.class) .setFormat(JsonFormat.Value.forPattern(\"yyyy-MM-dd\")); \u003cpre\u003e to change the default format to use for properties of type {@link java.util.Date} (possibly further overridden by per-propertyannotations)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getTypeFactory#1638",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()",
    "snippet": "public TypeFactory getTypeFactory() {\n        return _typeFactory;\n    }",
    "begin_line": 1638,
    "end_line": 1640,
    "comment": "/** \n * Accessor for getting currently configured  {@link TypeFactory} instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setTypeFactory#1649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public ObjectMapper setTypeFactory(TypeFactory f)\n    {\n        _typeFactory \u003d f;\n        _deserializationConfig \u003d _deserializationConfig.with(f);\n        _serializationConfig \u003d _serializationConfig.with(f);\n        return this;\n    }",
    "begin_line": 1649,
    "end_line": 1655,
    "comment": "/** \n * Method that can be used to override  {@link TypeFactory} instanceused by this mapper. \u003cp\u003e Note: will also set  {@link TypeFactory} that deserialization andserialization config objects use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.constructType#1662",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type t) {\n        return _typeFactory.constructType(t);\n    }",
    "begin_line": 1662,
    "end_line": 1664,
    "comment": "/** \n * Convenience method for constructing  {@link JavaType} out of giventype (typically \u003ccode\u003ejava.lang.Class\u003c/code\u003e), but without explicit context.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getNodeFactory#1682",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory()",
    "snippet": "public JsonNodeFactory getNodeFactory() {\n        return _deserializationConfig.getNodeFactory();\n    }",
    "begin_line": 1682,
    "end_line": 1684,
    "comment": "/** \n * Method that can be used to get hold of  {@link JsonNodeFactory}that this mapper will use when directly constructing root  {@link JsonNode} instances for Trees.\u003cp\u003e Note: this is just a shortcut for calling \u003cpre\u003e getDeserializationConfig().getNodeFactory() \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setNodeFactory#1691",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public ObjectMapper setNodeFactory(JsonNodeFactory f) {\n        _deserializationConfig \u003d _deserializationConfig.with(f);\n        return this;\n    }",
    "begin_line": 1691,
    "end_line": 1694,
    "comment": "/** \n * Method for specifying  {@link JsonNodeFactory} to use forconstructing root level tree nodes (via method {@link #createObjectNode}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addHandler#1700",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "public ObjectMapper addHandler(DeserializationProblemHandler h) {\n        _deserializationConfig \u003d _deserializationConfig.withHandler(h);\n        return this;\n    }",
    "begin_line": 1700,
    "end_line": 1703,
    "comment": "/** \n * Method for adding specified  {@link DeserializationProblemHandler}to be used for handling specific problems during deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.clearProblemHandlers#1709",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers()",
    "snippet": "public ObjectMapper clearProblemHandlers() {\n        _deserializationConfig \u003d _deserializationConfig.withNoProblemHandlers();\n        return this;\n    }",
    "begin_line": 1709,
    "end_line": 1712,
    "comment": "/** \n * Method for removing all registered  {@link DeserializationProblemHandler}s instances from this mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setConfig#1728",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public ObjectMapper setConfig(DeserializationConfig config) {\n        _deserializationConfig \u003d config;\n        return this;\n    }",
    "begin_line": 1728,
    "end_line": 1731,
    "comment": "/** \n * Method that allows overriding of the underlying  {@link DeserializationConfig}object. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of  {@link ObjectMapper}, this is only thread-safe if done before calling any deserialization methods.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setFilters#1743",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "@Deprecated\n    public void setFilters(FilterProvider filterProvider) {\n        _serializationConfig \u003d _serializationConfig.withFilters(filterProvider);\n    }",
    "begin_line": 1743,
    "end_line": 1745,
    "comment": "/** \n * @deprecated Since 2.6, use {@link #setFilterProvider} instead (allows chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setFilterProvider#1758",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public ObjectMapper setFilterProvider(FilterProvider filterProvider) {\n        _serializationConfig \u003d _serializationConfig.withFilters(filterProvider);\n        return this;\n    }",
    "begin_line": 1758,
    "end_line": 1761,
    "comment": "/** \n * Method for configuring this mapper to use specified  {@link FilterProvider} formapping Filter Ids to actual filter instances. \u003cp\u003e Note that usually it is better to use method  {@link #writer(FilterProvider)}; however, sometimes this method is more convenient. For example, some frameworks only allow configuring of ObjectMapper instances and not  {@link ObjectWriter}s.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setBase64Variant#1773",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant(Base64Variant)",
    "snippet": "public ObjectMapper setBase64Variant(Base64Variant v) {\n        _serializationConfig \u003d _serializationConfig.with(v);\n        _deserializationConfig \u003d _deserializationConfig.with(v);\n        return this;\n    }",
    "begin_line": 1773,
    "end_line": 1777,
    "comment": "/** \n * Method that will configure default  {@link Base64Variant} that\u003ccode\u003ebyte[]\u003c/code\u003e serializers and deserializers will use.\n * @param v Base64 variant to use\n * @return This mapper, for convenience to allow chaining\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setConfig#1793",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "public ObjectMapper setConfig(SerializationConfig config) {\n        _serializationConfig \u003d config;\n        return this;\n    }",
    "begin_line": 1793,
    "end_line": 1796,
    "comment": "/** \n * Method that allows overriding of the underlying  {@link SerializationConfig}object, which contains serialization-specific configuration settings. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of  {@link ObjectMapper}, this is only thread-safe if done before calling any serialization methods.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getFactory#1822",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getFactory()",
    "snippet": "@Override\n    public JsonFactory getFactory() { return _jsonFactory; }",
    "begin_line": 1822,
    "end_line": 1822,
    "comment": "/** \n * Method that can be used to get hold of  {@link JsonFactory} that thismapper uses if it needs to construct  {@link JsonParser}s and/or  {@link JsonGenerator}s. \u003cp\u003e WARNING: note that all  {@link ObjectReader} and {@link ObjectWriter}instances created by this mapper usually share the same configured {@link JsonFactory}, so changes to its configuration will \"leak\". To avoid such observed changes you should always use \"with()\" and \"without()\" method of  {@link ObjectReader} and {@link ObjectWriter}for changing  {@link com.fasterxml.jackson.core.JsonParser.Feature}and  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}settings to use on per-call basis.\n * @return {@link JsonFactory} that this mapper uses when it needs toconstruct Json parser and generators\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getJsonFactory#1829",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory()",
    "snippet": "@Deprecated\n    @Override\n    public JsonFactory getJsonFactory() { return getFactory(); }",
    "begin_line": 1829,
    "end_line": 1829,
    "comment": "/** \n * @deprecated Since 2.1: Use {@link #getFactory} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDateFormat#1841",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(java.text.DateFormat)",
    "snippet": "public ObjectMapper setDateFormat(DateFormat dateFormat)\n    {\n        _deserializationConfig \u003d _deserializationConfig.with(dateFormat);\n        _serializationConfig \u003d _serializationConfig.with(dateFormat);\n        return this;\n    }",
    "begin_line": 1841,
    "end_line": 1846,
    "comment": "/** \n * Method for configuring the default  {@link DateFormat} to use when serializing timevalues as Strings, and deserializing from JSON Strings. This is preferably to directly modifying  {@link SerializationConfig} and{@link DeserializationConfig} instances.If you need per-request configuration, use  {@link #writer(DateFormat)} tocreate properly configured  {@link ObjectWriter} and use that; this because{@link ObjectWriter}s are thread-safe whereas ObjectMapper itself is only thread-safe when configuring methods (such as this one) are NOT called.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDateFormat#1851",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDateFormat()",
    "snippet": "public DateFormat getDateFormat() {\n        // arbitrary choice but let\u0027s do:\n        return _serializationConfig.getDateFormat();\n    }",
    "begin_line": 1851,
    "end_line": 1854,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setHandlerInstantiator#1863",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public Object setHandlerInstantiator(HandlerInstantiator hi)\n    {\n        _deserializationConfig \u003d _deserializationConfig.with(hi);\n        _serializationConfig \u003d _serializationConfig.with(hi);\n        return this;\n    }",
    "begin_line": 1863,
    "end_line": 1868,
    "comment": "/** \n * Method for configuring  {@link HandlerInstantiator} to use for creatinginstances of handlers (such as serializers, deserializers, type and type id resolvers), given a class.\n * @param hi Instantiator to use; if null, use the default implementation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setInjectableValues#1874",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues(com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public ObjectMapper setInjectableValues(InjectableValues injectableValues) {\n        _injectableValues \u003d injectableValues;\n        return this;\n    }",
    "begin_line": 1874,
    "end_line": 1877,
    "comment": "/** \n * Method for configuring  {@link InjectableValues} which used to findvalues to inject.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getInjectableValues#1882",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues()",
    "snippet": "public InjectableValues getInjectableValues() {\n        return _injectableValues;\n    }",
    "begin_line": 1882,
    "end_line": 1884,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setLocale#1890",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setLocale(java.util.Locale)",
    "snippet": "public ObjectMapper setLocale(Locale l) {\n        _deserializationConfig \u003d _deserializationConfig.with(l);\n        _serializationConfig \u003d _serializationConfig.with(l);\n        return this;\n    }",
    "begin_line": 1890,
    "end_line": 1894,
    "comment": "/** \n * Method for overriding default locale to use for formatting. Default value used is  {@link Locale#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setTimeZone#1900",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(java.util.TimeZone)",
    "snippet": "public ObjectMapper setTimeZone(TimeZone tz) {\n        _deserializationConfig \u003d _deserializationConfig.with(tz);\n        _serializationConfig \u003d _serializationConfig.with(tz);\n        return this;\n    }",
    "begin_line": 1900,
    "end_line": 1904,
    "comment": "/** \n * Method for overriding default TimeZone to use for formatting. Default value used is UTC (NOT default TimeZone of JVM).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#1915",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public boolean isEnabled(MapperFeature f) {\n        // ok to use either one, should be kept in sync\n        return _serializationConfig.isEnabled(f);\n    }",
    "begin_line": 1915,
    "end_line": 1918,
    "comment": "/** \n * Method for checking whether given  {@link MapperFeature} is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#1924",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "public ObjectMapper configure(MapperFeature f, boolean state) {\n        _serializationConfig \u003d state ?\n                _serializationConfig.with(f) : _serializationConfig.without(f);\n        _deserializationConfig \u003d state ?\n                _deserializationConfig.with(f) : _deserializationConfig.without(f);\n        return this;\n    }",
    "begin_line": 1924,
    "end_line": 1930,
    "comment": "/** \n * Method for changing state of an on/off mapper feature for this mapper instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#1936",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public ObjectMapper enable(MapperFeature... f) {\n        _deserializationConfig \u003d _deserializationConfig.with(f);\n        _serializationConfig \u003d _serializationConfig.with(f);\n        return this;\n    }",
    "begin_line": 1936,
    "end_line": 1940,
    "comment": "/** \n * Method for enabling specified  {@link MapperConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#1946",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public ObjectMapper disable(MapperFeature... f) {\n        _deserializationConfig \u003d _deserializationConfig.without(f);\n        _serializationConfig \u003d _serializationConfig.without(f);\n        return this;\n    }",
    "begin_line": 1946,
    "end_line": 1950,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#1962",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public boolean isEnabled(SerializationFeature f) {\n        return _serializationConfig.isEnabled(f);\n    }",
    "begin_line": 1962,
    "end_line": 1964,
    "comment": "/** \n * Method for checking whether given serialization-specific feature is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#1970",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)",
    "snippet": "public ObjectMapper configure(SerializationFeature f, boolean state) {\n        _serializationConfig \u003d state ?\n                _serializationConfig.with(f) : _serializationConfig.without(f);\n        return this;\n    }",
    "begin_line": 1970,
    "end_line": 1974,
    "comment": "/** \n * Method for changing state of an on/off serialization feature for this object mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#1980",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper enable(SerializationFeature f) {\n        _serializationConfig \u003d _serializationConfig.with(f);\n        return this;\n    }",
    "begin_line": 1980,
    "end_line": 1983,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} feature.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#1989",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper enable(SerializationFeature first,\n            SerializationFeature... f) {\n        _serializationConfig \u003d _serializationConfig.with(first, f);\n        return this;\n    }",
    "begin_line": 1989,
    "end_line": 1993,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#1999",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper disable(SerializationFeature f) {\n        _serializationConfig \u003d _serializationConfig.without(f);\n        return this;\n    }",
    "begin_line": 1999,
    "end_line": 2002,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2008",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper disable(SerializationFeature first,\n            SerializationFeature... f) {\n        _serializationConfig \u003d _serializationConfig.without(first, f);\n        return this;\n    }",
    "begin_line": 2008,
    "end_line": 2012,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2024",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public boolean isEnabled(DeserializationFeature f) {\n        return _deserializationConfig.isEnabled(f);\n    }",
    "begin_line": 2024,
    "end_line": 2026,
    "comment": "/** \n * Method for checking whether given deserialization-specific feature is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2032",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature, boolean)",
    "snippet": "public ObjectMapper configure(DeserializationFeature f, boolean state) {\n        _deserializationConfig \u003d state ?\n                _deserializationConfig.with(f) : _deserializationConfig.without(f);\n        return this;\n    }",
    "begin_line": 2032,
    "end_line": 2036,
    "comment": "/** \n * Method for changing state of an on/off deserialization feature for this object mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2042",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper enable(DeserializationFeature feature) {\n        _deserializationConfig \u003d _deserializationConfig.with(feature);\n        return this;\n    }",
    "begin_line": 2042,
    "end_line": 2045,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2051",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper enable(DeserializationFeature first,\n            DeserializationFeature... f) {\n        _deserializationConfig \u003d _deserializationConfig.with(first, f);\n        return this;\n    }",
    "begin_line": 2051,
    "end_line": 2055,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2061",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper disable(DeserializationFeature feature) {\n        _deserializationConfig \u003d _deserializationConfig.without(feature);\n        return this;\n    }",
    "begin_line": 2061,
    "end_line": 2064,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2070",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper disable(DeserializationFeature first,\n            DeserializationFeature... f) {\n        _deserializationConfig \u003d _deserializationConfig.without(first, f);\n        return this;\n    }",
    "begin_line": 2070,
    "end_line": 2074,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2082",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonParser.Feature)",
    "snippet": "public boolean isEnabled(JsonParser.Feature f) {\n        return _deserializationConfig.isEnabled(f, _jsonFactory);\n    }",
    "begin_line": 2082,
    "end_line": 2084,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2097",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(JsonParser.Feature, boolean)",
    "snippet": "public ObjectMapper configure(JsonParser.Feature f, boolean state) {\n        _jsonFactory.configure(f, state);\n        return this;\n    }",
    "begin_line": 2097,
    "end_line": 2100,
    "comment": "/** \n * Method for changing state of specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#with(JsonParser.Feature)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(JsonParser.Feature)",
    "snippet": "public ObjectMapper enable(JsonParser.Feature... features) {\n        for (JsonParser.Feature f : features) {\n            _jsonFactory.enable(f);\n        }\n        return this;\n    }",
    "begin_line": 2114,
    "end_line": 2119,
    "comment": "/** \n * Method for enabling specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#with(JsonParser.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(JsonParser.Feature)",
    "snippet": "public ObjectMapper disable(JsonParser.Feature... features) {\n        for (JsonParser.Feature f : features) {\n            _jsonFactory.disable(f);\n        }\n        return this;\n    }",
    "begin_line": 2133,
    "end_line": 2138,
    "comment": "/** \n * Method for disabling specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#without(JsonParser.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonGenerator.Feature)",
    "snippet": "public boolean isEnabled(JsonGenerator.Feature f) {\n        return _serializationConfig.isEnabled(f, _jsonFactory);\n    }",
    "begin_line": 2146,
    "end_line": 2148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(JsonGenerator.Feature, boolean)",
    "snippet": "public ObjectMapper configure(JsonGenerator.Feature f, boolean state) {\n        _jsonFactory.configure(f,  state);\n        return this;\n    }",
    "begin_line": 2161,
    "end_line": 2164,
    "comment": "/** \n * Method for changing state of an on/off  {@link JsonGenerator} feature forgenerator instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#with(JsonGenerator.Feature)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(JsonGenerator.Feature)",
    "snippet": "public ObjectMapper enable(JsonGenerator.Feature... features) {\n        for (JsonGenerator.Feature f : features) {\n            _jsonFactory.enable(f);\n        }\n        return this;\n    }",
    "begin_line": 2178,
    "end_line": 2183,
    "comment": "/** \n * Method for enabling specified  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#with(JsonGenerator.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(JsonGenerator.Feature)",
    "snippet": "public ObjectMapper disable(JsonGenerator.Feature... features) {\n        for (JsonGenerator.Feature f : features) {\n            _jsonFactory.disable(f);\n        }\n        return this;\n    }",
    "begin_line": 2197,
    "end_line": 2202,
    "comment": "/** \n * Method for disabling specified  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#without(JsonGenerator.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonFactory.Feature)",
    "snippet": "public boolean isEnabled(JsonFactory.Feature f) {\n        return _jsonFactory.isEnabled(f);\n    }",
    "begin_line": 2216,
    "end_line": 2218,
    "comment": "/** \n * Convenience method, equivalent to: \u003cpre\u003e getJsonFactory().isEnabled(f); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(JsonParser p, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readValue(getDeserializationConfig(), p, _typeFactory.constructType(valueType));\n    }",
    "begin_line": 2249,
    "end_line": 2253,
    "comment": "/** \n * Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like  {@link java.lang.Boolean}). \u003cp\u003e Note: this method should NOT be used if the result type is a container ( {@link java.util.Collection} or {@link java.util.Map}. The reason is that due to type erasure, key and value types can not be introspected when using this method.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, TypeReference\u003c?\u003e)",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(JsonParser p, TypeReference\u003c?\u003e valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readValue(getDeserializationConfig(), p, _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 2273,
    "end_line": 2277,
    "comment": "/** \n * Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called \"super type token\" (see ) and specifically needs to be used if the root type is a  parameterized (generic) container type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, ResolvedType)",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public final \u003cT\u003e T readValue(JsonParser p, ResolvedType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readValue(getDeserializationConfig(), p, (JavaType) valueType);\n    }",
    "begin_line": 2296,
    "end_line": 2300,
    "comment": "/** \n * Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using  Jackson specific type; instance of which can be constructed using {@link TypeFactory}.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(JsonParser p, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readValue(getDeserializationConfig(), p, valueType);\n    }",
    "begin_line": 2315,
    "end_line": 2319,
    "comment": "/** \n * Type-safe overloaded method, basically alias for  {@link #readValue(JsonParser,Class)}.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(JsonParser)",
    "snippet": "@Override\n    public \u003cT extends TreeNode\u003e T readTree(JsonParser p)\n        throws IOException, JsonProcessingException\n    {\n        /* 02-Mar-2009, tatu: One twist; deserialization provider\n         *   will map JSON null straight into Java null. But what\n         *   we want to return is the \"null node\" instead.\n         */\n        /* 05-Aug-2011, tatu: Also, must check for EOF here before\n         *   calling readValue(), since that\u0027ll choke on it otherwise\n         */\n        DeserializationConfig cfg \u003d getDeserializationConfig();\n        JsonToken t \u003d p.getCurrentToken();\n        if (t \u003d\u003d null) {\n            t \u003d p.nextToken();\n            if (t \u003d\u003d null) {\n                return null;\n            }\n        }\n        JsonNode n \u003d (JsonNode) _readValue(cfg, p, JSON_NODE_TYPE);\n        if (n \u003d\u003d null) {\n            n \u003d getNodeFactory().nullNode();\n        }\n        @SuppressWarnings(\"unchecked\")\n        T result \u003d (T) n;\n        return result;\n    }",
    "begin_line": 2342,
    "end_line": 2367,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances. Returnsroot of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, ResolvedType)",
    "snippet": "@Override\n    public \u003cT\u003e MappingIterator\u003cT\u003e readValues(JsonParser p, ResolvedType valueType)\n        throws IOException, JsonProcessingException\n    {\n        return readValues(p, (JavaType) valueType);\n    }",
    "begin_line": 2388,
    "end_line": 2392,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Method for reading sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case  {@link JsonParser} \u003cb\u003eMUST\u003c/b\u003e point to the first token ofthe first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding \u003ccode\u003eSTART_ARRAY\u003c/code\u003e (one that contains values to read) but rather to the token following it which is the first token of the first value to read. \u003cp\u003e Note that  {@link ObjectReader} has more complete set of variants.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public \u003cT\u003e MappingIterator\u003cT\u003e readValues(JsonParser p, JavaType valueType)\n        throws IOException, JsonProcessingException\n    {\n        DeserializationConfig config \u003d getDeserializationConfig();\n        DeserializationContext ctxt \u003d createDeserializationContext(p, config);\n        JsonDeserializer\u003c?\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n        // false -\u003e do NOT close JsonParser (since caller passed it)\n        return new MappingIterator\u003cT\u003e(valueType, p, ctxt, deser,\n                false, null);\n    }",
    "begin_line": 2402,
    "end_line": 2411,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Type-safe overload of  {@link #readValues(JsonParser,ResolvedType)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "@Override\n    public \u003cT\u003e MappingIterator\u003cT\u003e readValues(JsonParser p, Class\u003cT\u003e valueType)\n        throws IOException, JsonProcessingException\n    {\n        return readValues(p, _typeFactory.constructType(valueType));\n    }",
    "begin_line": 2422,
    "end_line": 2426,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Type-safe overload of  {@link #readValues(JsonParser,ResolvedType)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2432",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, TypeReference\u003c?\u003e)",
    "snippet": "@Override\n    public \u003cT\u003e MappingIterator\u003cT\u003e readValues(JsonParser p, TypeReference\u003c?\u003e valueTypeRef)\n        throws IOException, JsonProcessingException\n    {\n        return readValues(p, _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 2432,
    "end_line": 2436,
    "comment": "/** \n * Method for reading sequence of Objects from parser stream.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2471",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)",
    "snippet": "public JsonNode readTree(InputStream in) throws IOException\n    {\n        return _readTreeAndClose(_jsonFactory.createParser(in));\n    }",
    "begin_line": 2471,
    "end_line": 2474,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param in Input stream used to read JSON contentfor building the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2499",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.Reader)",
    "snippet": "public JsonNode readTree(Reader r) throws IOException {\n        return _readTreeAndClose(_jsonFactory.createParser(r));\n    }",
    "begin_line": 2499,
    "end_line": 2501,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param r Reader used to read JSON contentfor building the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)",
    "snippet": "public JsonNode readTree(String content) throws IOException {\n        return _readTreeAndClose(_jsonFactory.createParser(content));\n    }",
    "begin_line": 2526,
    "end_line": 2528,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param content JSON content to parse to build the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2546",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[])",
    "snippet": "public JsonNode readTree(byte[] content) throws IOException {\n        return _readTreeAndClose(_jsonFactory.createParser(content));\n    }",
    "begin_line": 2546,
    "end_line": 2548,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param content JSON content to parse to build the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2570",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.File)",
    "snippet": "public JsonNode readTree(File file)\n        throws IOException, JsonProcessingException\n    {\n        return _readTreeAndClose(_jsonFactory.createParser(file));\n    }",
    "begin_line": 2570,
    "end_line": 2574,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param file File of which contents to parse as JSON for building a tree instance\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.net.URL)",
    "snippet": "public JsonNode readTree(URL source) throws IOException {\n        return _readTreeAndClose(_jsonFactory.createParser(source));\n    }",
    "begin_line": 2596,
    "end_line": 2598,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param source URL to use for fetching contents to parse as JSON for building a tree instance\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#2612",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(JsonGenerator, java.lang.Object)",
    "snippet": "@Override\n    public void writeValue(JsonGenerator g, Object value)\n        throws IOException, JsonGenerationException, JsonMappingException\n    {\n        SerializationConfig config \u003d getSerializationConfig();\n\n        /* 12-May-2015/2.6, tatu: Looks like we do NOT want to call the usual\n         *    \u0027config.initialize(g)` here, since it is assumed that generator\n         *    has been configured by caller. But for some reason we don\u0027t\n         *    trust indentation settings...\n         */\n        // 10-Aug-2012, tatu: as per [Issue#12], must handle indentation:\n        if (config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n            if (g.getPrettyPrinter() \u003d\u003d null) {\n                g.setPrettyPrinter(config.constructDefaultPrettyPrinter());\n            }\n        }\n        if (config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\n            _writeCloseableValue(g, value, config);\n        } else {\n            _serializerProvider(config).serializeValue(g, value);\n            if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n                g.flush();\n            }\n        }\n    }",
    "begin_line": 2612,
    "end_line": 2636,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using provided  {@link JsonGenerator}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeTree#2645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator, TreeNode)",
    "snippet": "@Override\n    public void writeTree(JsonGenerator jgen, TreeNode rootNode)\n        throws IOException, JsonProcessingException\n    {\n        SerializationConfig config \u003d getSerializationConfig();\n        _serializerProvider(config).serializeValue(jgen, rootNode);\n        if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n            jgen.flush();\n        }\n    }",
    "begin_line": 2645,
    "end_line": 2653,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeTree#2659",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator, com.fasterxml.jackson.databind.JsonNode)",
    "snippet": "public void writeTree(JsonGenerator jgen, JsonNode rootNode)\n        throws IOException, JsonProcessingException\n    {\n        SerializationConfig config \u003d getSerializationConfig();\n        _serializerProvider(config).serializeValue(jgen, rootNode);\n        if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n            jgen.flush();\n        }\n    }",
    "begin_line": 2659,
    "end_line": 2667,
    "comment": "/** \n * Method to serialize given JSON Tree, using generator provided.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createObjectNode#2677",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createObjectNode()",
    "snippet": "@Override    \n    public ObjectNode createObjectNode() {\n        return _deserializationConfig.getNodeFactory().objectNode();\n    }",
    "begin_line": 2677,
    "end_line": 2679,
    "comment": "/** \n * \u003cp\u003e Note: return type is co-variant, as basic ObjectCodec abstraction can not refer to concrete node types (as it\u0027s part of core package, whereas impls are part of mapper package)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createArrayNode#2689",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createArrayNode()",
    "snippet": "@Override\n    public ArrayNode createArrayNode() {\n        return _deserializationConfig.getNodeFactory().arrayNode();\n    }",
    "begin_line": 2689,
    "end_line": 2691,
    "comment": "/** \n * \u003cp\u003e Note: return type is co-variant, as basic ObjectCodec abstraction can not refer to concrete node types (as it\u0027s part of core package, whereas impls are part of mapper package)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.treeAsTokens#2700",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(TreeNode)",
    "snippet": "@Override\n    public JsonParser treeAsTokens(TreeNode n) {\n        return new TreeTraversingParser((JsonNode) n, this);\n    }",
    "begin_line": 2700,
    "end_line": 2702,
    "comment": "/** \n * Method for constructing a  {@link JsonParser} out of JSON treerepresentation.\n * @param n Root node of the tree that resulting parser will read from\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.treeToValue#2715",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeToValue(TreeNode, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cT\u003e T treeToValue(TreeNode n, Class\u003cT\u003e valueType)\n        throws JsonProcessingException\n    {\n        try {\n            // Simple cast when we just want to cast to, say, ObjectNode\n            // ... one caveat; while everything is Object.class, let\u0027s not take shortcut\n            if (valueType !\u003d Object.class \u0026\u0026 valueType.isAssignableFrom(n.getClass())) {\n                return (T) n;\n            }\n            // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar\n            //    short-cut coercion\n            if (n.asToken() \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n                if (n instanceof POJONode) {\n                    Object ob \u003d ((POJONode) n).getPojo();\n                    if ((ob \u003d\u003d null) || valueType.isInstance(ob)) {\n                        return (T) ob;\n                    }\n                }\n            }\n            return readValue(treeAsTokens(n), valueType);\n        } catch (JsonProcessingException e) {\n            throw e;\n        } catch (IOException e) { // should not occur, no real i/o...\n            throw new IllegalArgumentException(e.getMessage(), e);\n        }\n    }",
    "begin_line": 2715,
    "end_line": 2740,
    "comment": "/** \n * Convenience conversion method that will bind data given JSON tree contains into specific value (usually bean) type. \u003cp\u003e Functionally equivalent to: \u003cpre\u003e objectMapper.convertValue(n, valueClass); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.valueToTree#2763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.valueToTree(java.lang.Object)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"resource\" })\n    public \u003cT extends JsonNode\u003e T valueToTree(Object fromValue)\n        throws IllegalArgumentException\n    {\n        if (fromValue \u003d\u003d null) return null;\n        TokenBuffer buf \u003d new TokenBuffer(this, false);\n        if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n            buf \u003d buf.forceUseOfBigDecimal(true);\n        }\n        JsonNode result;\n        try {\n            writeValue(buf, fromValue);\n            JsonParser p \u003d buf.asParser();\n            result \u003d readTree(p);\n            p.close();\n        } catch (IOException e) { // should not occur, no real i/o...\n            throw new IllegalArgumentException(e.getMessage(), e);\n        }\n        return (T) result;\n    }",
    "begin_line": 2763,
    "end_line": 2781,
    "comment": "/** \n * Reverse of  {@link #treeToValue}; given a value (usually bean), will construct equivalent JSON Tree representation. Functionally similar to serializing value into JSON and parsing JSON as tree, but more efficient. \u003cp\u003e NOTE: while results are usually identical to that of serialization followed by deserialization, this is not always the case. In some cases serialization into intermediate representation will retain encapsulation of things like raw value ( {@link com.fasterxml.jackson.databind.util.RawValue}) or basic node identity ( {@link JsonNode}). If so, result is a valid tree, but values are not re-constructed through actual JSON representation. So if transformation requires actual materialization of JSON (or other data format that this mapper produces), it will be necessary to do actual serialization.\n * @param \u003c T \u003e Actual node type; usually either basic {@link JsonNode} or{@link com.fasterxml.jackson.databind.node.ObjectNode}\n * @param fromValue Bean value to convert\n * @return Root node of the resulting JSON tree\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canSerialize#2804",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class\u003c?\u003e)",
    "snippet": "public boolean canSerialize(Class\u003c?\u003e type) {\n        return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, null);\n    }",
    "begin_line": 2804,
    "end_line": 2806,
    "comment": "/** \n * Method that can be called to check whether mapper thinks it could serialize an instance of given Class. Check is done by checking whether a serializer can be found for the type. \u003cp\u003e NOTE: since this method does NOT throw exceptions, but internal processing may, caller usually has little information as to why serialization would fail. If you want access to internal  {@link Exception}, call  {@link #canSerialize(Class,AtomicReference)} instead.\n * @return True if mapper can find a serializer for instances ofgiven class (potentially serializable), false otherwise (not serializable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canSerialize#2815",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class\u003c?\u003e, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean canSerialize(Class\u003c?\u003e type, AtomicReference\u003cThrowable\u003e cause) {\n        return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, cause);\n    }",
    "begin_line": 2815,
    "end_line": 2817,
    "comment": "/** \n * Method similar to  {@link #canSerialize(Class)} but that can returnactual  {@link Throwable} that was thrown when trying to constructserializer: this may be useful in figuring out what the actual problem is.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canDeserialize#2836",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean canDeserialize(JavaType type)\n    {\n        return createDeserializationContext(null,\n                getDeserializationConfig()).hasValueDeserializerFor(type, null);\n    }",
    "begin_line": 2836,
    "end_line": 2840,
    "comment": "/** \n * Method that can be called to check whether mapper thinks it could deserialize an Object of given type. Check is done by checking whether a registered deserializer can be found or built for the type; if not (either by no mapping being found, or through an \u003ccode\u003eException\u003c/code\u003e being thrown, false is returned. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: in case an exception is thrown during course of trying co construct matching deserializer, it will be effectively swallowed. If you want access to that exception, call {@link #canDeserialize(JavaType,AtomicReference)} instead.\n * @return True if mapper can find a serializer for instances ofgiven class (potentially serializable), false otherwise (not serializable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canDeserialize#2849",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean canDeserialize(JavaType type, AtomicReference\u003cThrowable\u003e cause)\n    {\n        return createDeserializationContext(null,\n                getDeserializationConfig()).hasValueDeserializerFor(type, cause);\n    }",
    "begin_line": 2849,
    "end_line": 2853,
    "comment": "/** \n * Method similar to  {@link #canDeserialize(JavaType)} but that can returnactual  {@link Throwable} that was thrown when trying to constructserializer: this may be useful in figuring out what the actual problem is.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2875",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(File src, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 2875,
    "end_line": 2879,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2894",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(File src, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 2894,
    "end_line": 2898,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2913",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(File src, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 2913,
    "end_line": 2917,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2932",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(URL src, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 2932,
    "end_line": 2936,
    "comment": "/** \n * Method to deserialize JSON content from given resource into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2951",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(URL src, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 2951,
    "end_line": 2955,
    "comment": "/** \n * Method to deserialize JSON content from given resource into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2958",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(URL src, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 2958,
    "end_line": 2962,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2977",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(String content, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 2977,
    "end_line": 2981,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2996",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(String content, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 2996,
    "end_line": 3000,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3015",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(String content, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(content), valueType);\n    }",
    "begin_line": 3015,
    "end_line": 3019,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3022",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(Reader src, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 3022,
    "end_line": 3026,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3029",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(Reader src, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 3029,
    "end_line": 3033,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3036",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(Reader src, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 3036,
    "end_line": 3040,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3043",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(InputStream src, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 3043,
    "end_line": 3047,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3050",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(InputStream src, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 3050,
    "end_line": 3054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3057",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(InputStream src, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 3057,
    "end_line": 3061,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3064",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(byte[] src, Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 3064,
    "end_line": 3068,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3071",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(byte[] src, int offset, int len, \n                               Class\u003cT\u003e valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueType));\n    }",
    "begin_line": 3071,
    "end_line": 3076,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3079",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(byte[] src, TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 3079,
    "end_line": 3083,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3086",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, TypeReference)",
    "snippet": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public \u003cT\u003e T readValue(byte[] src, int offset, int len,\n                           TypeReference valueTypeRef)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueTypeRef));\n    }",
    "begin_line": 3086,
    "end_line": 3091,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3094",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(byte[] src, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 3094,
    "end_line": 3098,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(byte[] src, int offset, int len,\n                           JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), valueType);\n    }",
    "begin_line": 3101,
    "end_line": 3106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.DataInput, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(DataInput src, Class\u003cT\u003e valueType) throws IOException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src),\n                _typeFactory.constructType(valueType));\n    }",
    "begin_line": 3109,
    "end_line": 3113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.DataInput, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T readValue(DataInput src, JavaType valueType) throws IOException\n    {\n        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n    }",
    "begin_line": 3116,
    "end_line": 3119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File, java.lang.Object)",
    "snippet": "public void writeValue(File resultFile, Object value)\n        throws IOException, JsonGenerationException, JsonMappingException\n    {\n        _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);\n    }",
    "begin_line": 3132,
    "end_line": 3136,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, written to File provided.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.OutputStream, java.lang.Object)",
    "snippet": "public void writeValue(OutputStream out, Object value)\n        throws IOException, JsonGenerationException, JsonMappingException\n    {\n        _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);\n    }",
    "begin_line": 3149,
    "end_line": 3153,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using output stream provided (using encoding {@link JsonEncoding#UTF8}). \u003cp\u003e Note: method does not close the underlying stream explicitly here; however,  {@link JsonFactory} this mapper uses may chooseto close the stream depending on its settings (by default, it will try to close it when  {@link JsonGenerator} we constructis closed).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.DataOutput, java.lang.Object)",
    "snippet": "public void writeValue(DataOutput out, Object value)\n        throws IOException\n    {\n        _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);\n    }",
    "begin_line": 3158,
    "end_line": 3162,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer, java.lang.Object)",
    "snippet": "public void writeValue(Writer w, Object value)\n        throws IOException, JsonGenerationException, JsonMappingException\n    {\n        _configAndWriteValue(_jsonFactory.createGenerator(w), value);\n    }",
    "begin_line": 3174,
    "end_line": 3178,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using Writer provided. \u003cp\u003e Note: method does not close the underlying stream explicitly here; however,  {@link JsonFactory} this mapper uses may chooseto close the stream depending on its settings (by default, it will try to close it when  {@link JsonGenerator} we constructis closed).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValueAsString#3189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\")\n    public String writeValueAsString(Object value)\n        throws JsonProcessingException\n    {\n        // alas, we have to pull the recycler directly here...\n        SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n        try {\n            _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n        } catch (JsonProcessingException e) {\n            throw e;\n        } catch (IOException e) { // shouldn\u0027t really happen, but is declared as possibility so:\n            throw JsonMappingException.fromUnexpectedIOE(e);\n        }\n        return sw.getAndClear();\n    }",
    "begin_line": 3189,
    "end_line": 3202,
    "comment": "/** \n * Method that can be used to serialize any Java value as a String. Functionally equivalent to calling {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}and constructing String, but more efficient. \u003cp\u003e Note: prior to version 2.1, throws clause included  {@link IOException}; 2.1 removed it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValueAsBytes#3214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\")\n    public byte[] writeValueAsBytes(Object value)\n        throws JsonProcessingException\n    {\n        ByteArrayBuilder bb \u003d new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n        try {\n            _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n        } catch (JsonProcessingException e) { // to support [JACKSON-758]\n            throw e;\n        } catch (IOException e) { // shouldn\u0027t really happen, but is declared as possibility so:\n            throw JsonMappingException.fromUnexpectedIOE(e);\n        }\n        byte[] result \u003d bb.toByteArray();\n        bb.release();\n        return result;\n    }",
    "begin_line": 3214,
    "end_line": 3228,
    "comment": "/** \n * Method that can be used to serialize any Java value as a byte array. Functionally equivalent to calling {@link #writeValue(Writer,Object)} with {@link java.io.ByteArrayOutputStream}and getting bytes, but more efficient. Encoding used will be UTF-8. \u003cp\u003e Note: prior to version 2.1, throws clause included  {@link IOException}; 2.1 removed it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer()",
    "snippet": "public ObjectWriter writer() {\n        return _newWriter(getSerializationConfig());\n    }",
    "begin_line": 3241,
    "end_line": 3243,
    "comment": "/** \n * Convenience method for constructing  {@link ObjectWriter}with default settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectWriter writer(SerializationFeature feature) {\n        return _newWriter(getSerializationConfig().with(feature));\n    }",
    "begin_line": 3250,
    "end_line": 3252,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} withspecified feature enabled (compared to settings that this mapper instance has).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectWriter writer(SerializationFeature first,\n            SerializationFeature... other) {\n        return _newWriter(getSerializationConfig().with(first, other));\n    }",
    "begin_line": 3259,
    "end_line": 3262,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} withspecified features enabled (compared to settings that this mapper instance has).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3269",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(java.text.DateFormat)",
    "snippet": "public ObjectWriter writer(DateFormat df) {\n        return _newWriter(getSerializationConfig().with(df));\n    }",
    "begin_line": 3269,
    "end_line": 3271,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified  {@link DateFormat}; or, if null passed, using timestamp (64-bit number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithView#3277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectWriter writerWithView(Class\u003c?\u003e serializationView) {\n        return _newWriter(getSerializationConfig().withView(serializationView));\n    }",
    "begin_line": 3277,
    "end_line": 3279,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified JSON View (filter).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectWriter writerFor(Class\u003c?\u003e rootType) {\n        return _newWriter(getSerializationConfig(),\n                ((rootType \u003d\u003d null) ? null :_typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
    "begin_line": 3292,
    "end_line": 3296,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(TypeReference\u003c?\u003e)",
    "snippet": "public ObjectWriter writerFor(TypeReference\u003c?\u003e rootType) {\n        return _newWriter(getSerializationConfig(),\n                ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
    "begin_line": 3309,
    "end_line": 3313,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ObjectWriter writerFor(JavaType rootType) {\n        return _newWriter(getSerializationConfig(), rootType, /*PrettyPrinter*/null);\n    }",
    "begin_line": 3326,
    "end_line": 3328,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(PrettyPrinter)",
    "snippet": "public ObjectWriter writer(PrettyPrinter pp) {\n        if (pp \u003d\u003d null) { // need to use a marker to indicate explicit disabling of pp\n            pp \u003d ObjectWriter.NULL_PRETTY_PRINTER;\n        }\n        return _newWriter(getSerializationConfig(), /*root type*/ null, pp);\n    }",
    "begin_line": 3335,
    "end_line": 3340,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified pretty printer for indentation (or if null, no pretty printer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithDefaultPrettyPrinter#3346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter()",
    "snippet": "public ObjectWriter writerWithDefaultPrettyPrinter() {\n        SerializationConfig config \u003d getSerializationConfig();\n        return _newWriter(config,\n                /*root type*/ null, config.getDefaultPrettyPrinter());\n    }",
    "begin_line": 3346,
    "end_line": 3350,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using the default pretty printer for indentation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3356",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public ObjectWriter writer(FilterProvider filterProvider) {\n        return _newWriter(getSerializationConfig().withFilters(filterProvider));\n    }",
    "begin_line": 3356,
    "end_line": 3358,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified filter provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3367",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(FormatSchema)",
    "snippet": "public ObjectWriter writer(FormatSchema schema) {\n        _verifySchemaType(schema);\n        return _newWriter(getSerializationConfig(), schema);\n    }",
    "begin_line": 3367,
    "end_line": 3370,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willpass specific schema object to  {@link JsonGenerator} used forwriting content.\n * @param schema Schema to pass to generator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(Base64Variant)",
    "snippet": "public ObjectWriter writer(Base64Variant defaultBase64) {\n        return _newWriter(getSerializationConfig().with(defaultBase64));\n    }",
    "begin_line": 3378,
    "end_line": 3380,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willuse specified Base64 encoding variant for Base64-encoded binary data.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(CharacterEscapes)",
    "snippet": "public ObjectWriter writer(CharacterEscapes escapes) {\n        return _newWriter(getSerializationConfig()).with(escapes);\n    }",
    "begin_line": 3388,
    "end_line": 3390,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified character escaping details for output.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3398",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public ObjectWriter writer(ContextAttributes attrs) {\n        return _newWriter(getSerializationConfig().with(attrs));\n    }",
    "begin_line": 3398,
    "end_line": 3400,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willuse specified default attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3406",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public ObjectWriter writerWithType(Class\u003c?\u003e rootType) {\n        return _newWriter(getSerializationConfig(),\n                // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                ((rootType \u003d\u003d null) ? null :_typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
    "begin_line": 3406,
    "end_line": 3411,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(Class)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(TypeReference\u003c?\u003e)",
    "snippet": "@Deprecated\n    public ObjectWriter writerWithType(TypeReference\u003c?\u003e rootType) {\n        return _newWriter(getSerializationConfig(),\n                // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
    "begin_line": 3417,
    "end_line": 3422,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(TypeReference)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3428",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public ObjectWriter writerWithType(JavaType rootType) {\n        return _newWriter(getSerializationConfig(), rootType, /*PrettyPrinter*/null);\n    }",
    "begin_line": 3428,
    "end_line": 3430,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(JavaType)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3444",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader()",
    "snippet": "public ObjectReader reader() {\n        return _newReader(getDeserializationConfig()).with(_injectableValues);\n    }",
    "begin_line": 3444,
    "end_line": 3446,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withdefault settings. Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3455",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectReader reader(DeserializationFeature feature) {\n        return _newReader(getDeserializationConfig().with(feature));\n    }",
    "begin_line": 3455,
    "end_line": 3457,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withspecified feature enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectReader reader(DeserializationFeature first,\n            DeserializationFeature... other) {\n        return _newReader(getDeserializationConfig().with(first, other));\n    }",
    "begin_line": 3466,
    "end_line": 3469,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withspecified features enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerForUpdating#3481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)",
    "snippet": "public ObjectReader readerForUpdating(Object valueToUpdate) {\n        JavaType t \u003d _typeFactory.constructType(valueToUpdate.getClass());\n        return _newReader(getDeserializationConfig(), t, valueToUpdate,\n                null, _injectableValues);\n    }",
    "begin_line": 3481,
    "end_line": 3485,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willupdate given Object (usually Bean, but can be a Collection or Map as well, but NOT an array) with JSON data. Deserialization occurs normally except that the root-level value in JSON is not used for instantiating a new object; instead give updateable object is used as root. Runtime type of value object is used for locating deserializer, unless overridden by other factory methods of  {@link ObjectReader}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3493",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ObjectReader readerFor(JavaType type) {\n        return _newReader(getDeserializationConfig(), type, null,\n                null, _injectableValues);\n    }",
    "begin_line": 3493,
    "end_line": 3496,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3504",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectReader readerFor(Class\u003c?\u003e type) {\n        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,\n                null, _injectableValues);\n    }",
    "begin_line": 3504,
    "end_line": 3507,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3515",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(TypeReference\u003c?\u003e)",
    "snippet": "public ObjectReader readerFor(TypeReference\u003c?\u003e type) {\n        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,\n                null, _injectableValues);\n    }",
    "begin_line": 3515,
    "end_line": 3518,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3524",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public ObjectReader reader(JsonNodeFactory f) {\n        return _newReader(getDeserializationConfig()).with(f);\n    }",
    "begin_line": 3524,
    "end_line": 3526,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified  {@link JsonNodeFactory} for constructing JSON trees.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3535",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(FormatSchema)",
    "snippet": "public ObjectReader reader(FormatSchema schema) {\n        _verifySchemaType(schema);\n        return _newReader(getDeserializationConfig(), null, null,\n                schema, _injectableValues);\n    }",
    "begin_line": 3535,
    "end_line": 3539,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willpass specific schema object to  {@link JsonParser} used forreading content.\n * @param schema Schema to pass to parser\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3547",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public ObjectReader reader(InjectableValues injectableValues) {\n        return _newReader(getDeserializationConfig(), null, null,\n                null, injectableValues);\n    }",
    "begin_line": 3547,
    "end_line": 3550,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified injectable values.\n * @param injectableValues Injectable values to use\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerWithView#3556",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerWithView(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectReader readerWithView(Class\u003c?\u003e view) {\n        return _newReader(getDeserializationConfig().withView(view));\n    }",
    "begin_line": 3556,
    "end_line": 3558,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willdeserialize objects using specified JSON View (filter).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(Base64Variant)",
    "snippet": "public ObjectReader reader(Base64Variant defaultBase64) {\n        return _newReader(getDeserializationConfig().with(defaultBase64));\n    }",
    "begin_line": 3566,
    "end_line": 3568,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified Base64 encoding variant for Base64-encoded binary data.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3576",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public ObjectReader reader(ContextAttributes attrs) {\n        return _newReader(getDeserializationConfig().with(attrs));\n    }",
    "begin_line": 3576,
    "end_line": 3578,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified default attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3584",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public ObjectReader reader(JavaType type) {\n        return _newReader(getDeserializationConfig(), type, null,\n                null, _injectableValues);\n    }",
    "begin_line": 3584,
    "end_line": 3587,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(JavaType)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3593",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public ObjectReader reader(Class\u003c?\u003e type) {\n        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,\n                null, _injectableValues);\n    }",
    "begin_line": 3593,
    "end_line": 3596,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(Class)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(TypeReference\u003c?\u003e)",
    "snippet": "@Deprecated\n    public ObjectReader reader(TypeReference\u003c?\u003e type) {\n        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,\n                null, _injectableValues);\n    }",
    "begin_line": 3602,
    "end_line": 3605,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(TypeReference)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3641",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T convertValue(Object fromValue, Class\u003cT\u003e toValueType)\n        throws IllegalArgumentException\n    {\n        return (T) _convert(fromValue, _typeFactory.constructType(toValueType));\n    }",
    "begin_line": 3641,
    "end_line": 3645,
    "comment": "/** \n * Convenience method for doing two-step conversion from given value, into instance of given value type, if (but only if!) conversion is needed. If given value is already of requested type, value is returned as is. \u003cp\u003e This method is functionally similar to first serializing given value into JSON, and then binding JSON data into value of given type, but should be more efficient since full serialization does not (need to) occur. However, same converters (serializers, deserializers) will be used as for data binding, meaning same object mapper configuration works. \u003cp\u003e Note that it is possible that in some cases behavior does differ from full serialize-then-deserialize cycle: in most case differences are unintentional (that is, flaws to fix) and should be reported. It is not guaranteed, however, that the behavior is 100% the same: the goal is just to allow efficient value conversions for structurally compatible Objects, according to standard Jackson configuration. \u003cp\u003e Further note that functianality is not designed to support \"advanced\" use cases, such as conversion of polymorphic values, or cases where Object Identity is used.\n * @throws IllegalArgumentException If conversion fails due to incompatible type;if so, root cause will contain underlying checked exception data binding functionality threw\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, TypeReference\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T convertValue(Object fromValue, TypeReference\u003c?\u003e toValueTypeRef)\n        throws IllegalArgumentException\n    {\n        return (T) _convert(fromValue, _typeFactory.constructType(toValueTypeRef));\n    }",
    "begin_line": 3651,
    "end_line": 3655,
    "comment": "/** \n * See  {@link #convertValue(Object,Class)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3661",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T convertValue(Object fromValue, JavaType toValueType)\n        throws IllegalArgumentException\n    {\n        return (T) _convert(fromValue, toValueType);\n    }",
    "begin_line": 3661,
    "end_line": 3665,
    "comment": "/** \n * See  {@link #convertValue(Object,Class)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._convert#3676",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._convert(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"resource\")\n    protected Object _convert(Object fromValue, JavaType toValueType)\n        throws IllegalArgumentException\n    {\n        // [databind#1433] Do not shortcut null values.\n        // This defaults primitives and fires deserializer getNullValue hooks.\n        if (fromValue !\u003d null) {\n            // also, as per [databind#11], consider case for simple cast\n            // But with caveats: one is that while everything is Object.class, we don\u0027t\n            // want to \"optimize\" that out; and the other is that we also do not want\n            // to lose conversions of generic types.\n            Class\u003c?\u003e targetType \u003d toValueType.getRawClass();\n            if (targetType !\u003d Object.class\n                    \u0026\u0026 !toValueType.hasGenericTypes()\n                    \u0026\u0026 targetType.isAssignableFrom(fromValue.getClass())) {\n                return fromValue;\n            }\n        }\n        \n        // Then use TokenBuffer, which is a JsonGenerator:\n        TokenBuffer buf \u003d new TokenBuffer(this, false);\n        if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n            buf \u003d buf.forceUseOfBigDecimal(true);\n        }\n        try {\n            // inlined \u0027writeValue\u0027 with minor changes:\n            // first: disable wrapping when writing\n            SerializationConfig config \u003d getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);\n            // no need to check for closing of TokenBuffer\n            _serializerProvider(config).serializeValue(buf, fromValue);\n\n            // then matching read, inlined \u0027readValue\u0027 with minor mods:\n            final JsonParser p \u003d buf.asParser();\n            Object result;\n            // ok to pass in existing feature flags; unwrapping handled by mapper\n            final DeserializationConfig deserConfig \u003d getDeserializationConfig();\n            JsonToken t \u003d _initForReading(p, toValueType);\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\n                DeserializationContext ctxt \u003d createDeserializationContext(p, deserConfig);\n                result \u003d _findRootDeserializer(ctxt, toValueType).getNullValue(ctxt);\n            } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n                result \u003d null;\n            } else { // pointing to event other than null\n                DeserializationContext ctxt \u003d createDeserializationContext(p, deserConfig);\n                JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, toValueType);\n                // note: no handling of unwrapping\n                result \u003d deser.deserialize(p, ctxt);\n            }\n            p.close();\n            return result;\n        } catch (IOException e) { // should not occur, no real i/o...\n            throw new IllegalArgumentException(e.getMessage(), e);\n        }\n    }",
    "begin_line": 3676,
    "end_line": 3728,
    "comment": "/** \n * Actual conversion implementation: instead of using existing read and write methods, much of code is inlined. Reason for this is that we must avoid root value wrapping/unwrapping both for efficiency and for correctness. If root value wrapping/unwrapping is actually desired, caller must use explicit \u003ccode\u003ewriteValue\u003c/code\u003e and \u003ccode\u003ereadValue\u003c/code\u003e methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.updateValue#3766",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.updateValue(T, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\")\n    public \u003cT\u003e T updateValue(T valueToUpdate, Object overrides)\n        throws JsonMappingException\n    {\n        T result \u003d valueToUpdate;\n        if ((valueToUpdate !\u003d null) \u0026\u0026 (overrides !\u003d null)) {\n            TokenBuffer buf \u003d new TokenBuffer(this, false);\n            if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                buf \u003d buf.forceUseOfBigDecimal(true);\n            }\n            try {\n                SerializationConfig config \u003d getSerializationConfig().\n                        without(SerializationFeature.WRAP_ROOT_VALUE);\n                _serializerProvider(config).serializeValue(buf, overrides);\n                JsonParser p \u003d buf.asParser();\n                result \u003d readerForUpdating(valueToUpdate).readValue(p);\n                p.close();\n            } catch (IOException e) { // should not occur, no real i/o...\n                if (e instanceof JsonMappingException) {\n                    throw (JsonMappingException) e;\n                }\n                // 17-Mar-2017, tatu: Really ought not happen...\n                throw JsonMappingException.fromUnexpectedIOE(e);\n            }\n        }\n        return result;\n    }",
    "begin_line": 3766,
    "end_line": 3791,
    "comment": "/** \n * Convenience method similar to  {@link #convertValue(Object,JavaType)} but onein which  \u003cp\u003e Implementation is approximately as follows: \u003col\u003e \u003cli\u003eSerialize `updateWithValue` into  {@link TokenBuffer}\u003c/li\u003e \u003cli\u003eConstruct  {@link ObjectReader} with `valueToUpdate` (using {@link #readerForUpdating(Object)}) \u003c/li\u003e \u003cli\u003eConstruct  {@link JsonParser} (using {@link TokenBuffer#asParser()}) \u003c/li\u003e \u003cli\u003eUpdate using  {@link ObjectReader#readValue(JsonParser)}. \u003c/li\u003e \u003cli\u003eReturn `valueToUpdate` \u003c/li\u003e \u003c/ol\u003e \u003cp\u003e Note that update is \"shallow\" in that only first level of properties (or, immediate contents of container to update) are modified, unless properties themselves indicate that merging should be applied for contents. Such merging can be specified using annotations (see \u003ccode\u003eJsonMerge\u003c/code\u003e) as well as using \"config overrides\" (see {@link #configOverride(Class)} and {@link #setDefaultMergeable(Boolean)}).\n * @param valueToUpdate Object to update\n * @param overrides Object to conceptually serialize and merge into value toupdate; can be thought of as a provider for overrides to apply.\n * @return Either the first argument (`valueToUpdate`), if it is mutable; or a result ofcreating new instance that is result of \"merging\" values (for example, \"updating\" a Java array will create a new array)\n * @throws JsonMappingException if there are structural incompatibilities that prevent update.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.generateJsonSchema#3810",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class\u003c?\u003e t)\n            throws JsonMappingException {\n        return _serializerProvider(getSerializationConfig()).generateJsonSchema(t);\n    }",
    "begin_line": 3810,
    "end_line": 3813,
    "comment": "/** \n * Generate \u003ca href\u003d\"http://json-schema.org/\"\u003eJson-schema\u003c/a\u003e instance for specified class.\n * @param t The class to generate schema for\n * @return Constructed JSON schema.\n * @deprecated Since 2.6 use external JSON Schema generator (https://github.com/FasterXML/jackson-module-jsonSchema)(which under the hood calls  {@link #acceptJsonFormatVisitor(JavaType,JsonFormatVisitorWrapper)})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.acceptJsonFormatVisitor#3826",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(Class\u003c?\u003e type, JsonFormatVisitorWrapper visitor)\n        throws JsonMappingException\n    {\n        acceptJsonFormatVisitor(_typeFactory.constructType(type), visitor);\n    }",
    "begin_line": 3826,
    "end_line": 3830,
    "comment": "/** \n * Method for visiting type hierarchy for given type, using specified visitor. \u003cp\u003e This method can be used for things like generating \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON Schema\u003c/a\u003e instance for specified type.\n * @param type Type to generate schema for (possibly with generic signature)\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.acceptJsonFormatVisitor#3844",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor)\n        throws JsonMappingException\n    {\n        if (type \u003d\u003d null) {\n            throw new IllegalArgumentException(\"type must be provided\");\n        }\n        _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor);\n    }",
    "begin_line": 3844,
    "end_line": 3851,
    "comment": "/** \n * Method for visiting type hierarchy for given type, using specified visitor. Visitation uses \u003ccode\u003eSerializer\u003c/code\u003e hierarchy and related properties \u003cp\u003e This method can be used for things like generating \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON Schema\u003c/a\u003e instance for specified type.\n * @param type Type to generate schema for (possibly with generic signature)\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._serializerProvider#3863",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "protected DefaultSerializerProvider _serializerProvider(SerializationConfig config) {\n        return _serializerProvider.createInstance(config, _serializerFactory);\n    }",
    "begin_line": 3863,
    "end_line": 3865,
    "comment": "/** \n * Overridable helper method used for constructing {@link SerializerProvider} to use for serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._configAndWriteValue#3871",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(JsonGenerator, java.lang.Object)",
    "snippet": "protected final void _configAndWriteValue(JsonGenerator g, Object value)\n        throws IOException\n    {\n        SerializationConfig cfg \u003d getSerializationConfig();\n        cfg.initialize(g); // since 2.5\n        if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\n            _configAndWriteCloseable(g, value, cfg);\n            return;\n        }\n        try {\n            _serializerProvider(cfg).serializeValue(g, value);\n        } catch (Exception e) {\n            ClassUtil.closeOnFailAndThrowAsIAE(g, e);\n            return;\n        }\n        g.close();\n    }",
    "begin_line": 3871,
    "end_line": 3887,
    "comment": "/** \n * Method called to configure the generator as necessary and then call write functionality\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._configAndWriteCloseable#3893",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteCloseable(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "private final void _configAndWriteCloseable(JsonGenerator g, Object value, SerializationConfig cfg)\n        throws IOException\n    {\n        Closeable toClose \u003d (Closeable) value;\n        try {\n            _serializerProvider(cfg).serializeValue(g, value);\n            Closeable tmpToClose \u003d toClose;\n            toClose \u003d null;\n            tmpToClose.close();\n        } catch (Exception e) {\n            ClassUtil.closeOnFailAndThrowAsIAE(g, toClose, e);\n            return;\n        }\n        g.close();\n    }",
    "begin_line": 3893,
    "end_line": 3907,
    "comment": "/** \n * Helper method used when value to serialize is  {@link Closeable} and its \u003ccode\u003eclose()\u003c/code\u003emethod is to be called right after serialization has been called\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._writeCloseableValue#3913",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._writeCloseableValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "private final void _writeCloseableValue(JsonGenerator g, Object value, SerializationConfig cfg)\n        throws IOException\n    {\n        Closeable toClose \u003d (Closeable) value;\n        try {\n            _serializerProvider(cfg).serializeValue(g, value);\n            if (cfg.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n                g.flush();\n            }\n        } catch (Exception e) {\n            ClassUtil.closeOnFailAndThrowAsIAE(null, toClose, e);\n            return;\n        }\n        toClose.close();\n    }",
    "begin_line": 3913,
    "end_line": 3927,
    "comment": "/** \n * Helper method used when value to serialize is  {@link Closeable} and its \u003ccode\u003eclose()\u003c/code\u003emethod is to be called right after serialization has been called\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createDeserializationContext#3940",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext(JsonParser, com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected DefaultDeserializationContext createDeserializationContext(JsonParser p,\n            DeserializationConfig cfg) {\n        return _deserializationContext.createInstance(cfg, p, _injectableValues);\n    }",
    "begin_line": 3940,
    "end_line": 3943,
    "comment": "/** \n * Internal helper method called to create an instance of  {@link DeserializationContext}for deserializing a single root value. Can be overridden if a custom context is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readValue#3948",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readValue(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected Object _readValue(DeserializationConfig cfg, JsonParser p,\n            JavaType valueType)\n        throws IOException\n    {\n        /* First: may need to read the next token, to initialize\n         * state (either before first read from parser, or after\n         * previous token has been cleared)\n         */\n        Object result;\n        JsonToken t \u003d _initForReading(p, valueType);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            // Ask JsonDeserializer what \u0027null value\u0027 to use:\n            DeserializationContext ctxt \u003d createDeserializationContext(p, cfg);\n            result \u003d _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else { // pointing to event other than null\n            DeserializationContext ctxt \u003d createDeserializationContext(p, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n            // ok, let\u0027s get the value\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(p, ctxt);\n            }\n        }\n        // Need to consume the token too\n        p.clearCurrentToken();\n        return result;\n    }",
    "begin_line": 3948,
    "end_line": 3977,
    "comment": "/** \n * Actual implementation of value reading+binding operation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readMapAndClose#3979",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected Object _readMapAndClose(JsonParser p0, JavaType valueType)\n        throws IOException\n    {\n        try (JsonParser p \u003d p0) {\n            Object result;\n            JsonToken t \u003d _initForReading(p, valueType);\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\n                // Ask JsonDeserializer what \u0027null value\u0027 to use:\n                DeserializationContext ctxt \u003d createDeserializationContext(p,\n                        getDeserializationConfig());\n                result \u003d _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);\n            } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n                result \u003d null;\n            } else {\n                DeserializationConfig cfg \u003d getDeserializationConfig();\n                DeserializationContext ctxt \u003d createDeserializationContext(p, cfg);\n                JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result \u003d _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);\n                } else {\n                    result \u003d deser.deserialize(p, ctxt);\n                }\n                ctxt.checkUnresolvedObjectId();\n            }\n            return result;\n        }\n    }",
    "begin_line": 3979,
    "end_line": 4005,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readTreeAndClose#4013",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(JsonParser)",
    "snippet": "protected JsonNode _readTreeAndClose(JsonParser p0) throws IOException\n    {\n        try (JsonParser p \u003d p0) {\n            final JavaType valueType \u003d JSON_NODE_TYPE;\n\n            // 27-Oct-2016, tatu: Need to inline `_initForReading()` due to\n            //   special requirements by tree reading (no fail on eof)\n            \n            _deserializationConfig.initialize(p); // since 2.5\n            JsonToken t \u003d p.getCurrentToken();\n            if (t \u003d\u003d null) {\n                t \u003d p.nextToken();\n                if (t \u003d\u003d null) { // [databind#1406]: expose end-of-input as `null`\n                    return null;\n                }\n            }\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\n                return _deserializationConfig.getNodeFactory().nullNode();\n            }\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d createDeserializationContext(p, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n            Object result;\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(p, ctxt);\n            }\n            // No ObjectIds so can ignore\n//            ctxt.checkUnresolvedObjectId();\n            return (JsonNode) result;\n        }\n    }",
    "begin_line": 4013,
    "end_line": 4045,
    "comment": "/** \n * Similar to  {@link #_readMapAndClose} but specialized for \u003ccode\u003eJsonNode\u003c/code\u003ereading.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._initForReading#4062",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonToken _initForReading(JsonParser p, JavaType targetType) throws IOException\n    {\n        _deserializationConfig.initialize(p); // since 2.5\n\n        /* First: must point to a token; if not pointing to one, advance.\n         * This occurs before first read from JsonParser, as well as\n         * after clearing of current token.\n         */\n        JsonToken t \u003d p.getCurrentToken();\n        if (t \u003d\u003d null) {\n            // and then we must get something...\n            t \u003d p.nextToken();\n            if (t \u003d\u003d null) {\n                // Throw mapping exception, since it\u0027s failure to map,\n                //   not an actual parsing problem\n                throw MismatchedInputException.from(p, targetType,\n                        \"No content to map due to end-of-input\");\n            }\n        }\n        return t;\n    }",
    "begin_line": 4062,
    "end_line": 4082,
    "comment": "/** \n * Method called to ensure that given parser is ready for reading content for data binding.\n * @return First token to be used for data binding after this call:can never be null as exception will be thrown if parser can not provide more tokens.\n * @throws IOException if the underlying input source has problems duringparsing\n * @throws JsonParseException if parser has problems parsing content\n * @throws JsonMappingException if the parser does not have any morecontent to map (note: Json \"null\" value is considered content; enf-of-stream not)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._initForReading#4085",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser)",
    "snippet": "@Deprecated _initForReading(JsonParser p) throws IOException {\n        return _initForReading(p, null);\n    }",
    "begin_line": 4085,
    "end_line": 4087,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._unwrapAndDeserialize#4089",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, \n            DeserializationConfig config,\n            JavaType rootType, JsonDeserializer\u003cObject\u003e deser)\n        throws IOException\n    {\n        PropertyName expRootName \u003d config.findRootName(rootType);\n        // 12-Jun-2015, tatu: Should try to support namespaces etc but...\n        String expSimpleName \u003d expRootName.getSimpleName();\n        if (p.getCurrentToken() !\u003d JsonToken.START_OBJECT) {\n            ctxt.reportWrongTokenException(rootType, JsonToken.START_OBJECT,\n                    \"Current token not START_OBJECT (needed to unwrap root name \u0027%s\u0027), but %s\",\n                    expSimpleName, p.getCurrentToken());\n            \n        }\n        if (p.nextToken() !\u003d JsonToken.FIELD_NAME) {\n            ctxt.reportWrongTokenException(rootType, JsonToken.FIELD_NAME,\n                    \"Current token not FIELD_NAME (to contain expected root name \u0027\"\n                    +expSimpleName+\"\u0027), but \"+p.getCurrentToken());\n        }\n        String actualName \u003d p.getCurrentName();\n        if (!expSimpleName.equals(actualName)) {\n            ctxt.reportInputMismatch(rootType,\n                    \"Root name \u0027%s\u0027 does not match expected (\u0027%s\u0027) for type %s\",\n                    actualName, expSimpleName);\n        }\n        // ok, then move to value itself....\n        p.nextToken();\n        Object result \u003d deser.deserialize(p, ctxt);\n        // and last, verify that we now get matching END_OBJECT\n        if (p.nextToken() !\u003d JsonToken.END_OBJECT) {\n            ctxt.reportWrongTokenException(rootType, JsonToken.END_OBJECT,\n                    \"Current token not END_OBJECT (to match wrapper object with root name \u0027%s\u0027), but %s\",\n                    expSimpleName, p.getCurrentToken());\n        }\n        return result;\n    }",
    "begin_line": 4089,
    "end_line": 4124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._findRootDeserializer#4135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findRootDeserializer(DeserializationContext ctxt,\n            JavaType valueType)\n        throws JsonMappingException\n    {\n        // First: have we already seen it?\n        JsonDeserializer\u003cObject\u003e deser \u003d _rootDeserializers.get(valueType);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        // Nope: need to ask provider to resolve it\n        deser \u003d ctxt.findRootValueDeserializer(valueType);\n        if (deser \u003d\u003d null) { // can this happen?\n            return ctxt.reportBadDefinition(valueType,\n                    \"Can not find a deserializer for type \"+valueType);\n        }\n        _rootDeserializers.put(valueType, deser);\n        return deser;\n    }",
    "begin_line": 4135,
    "end_line": 4152,
    "comment": "/** \n * Method called to locate deserializer for the passed root-level value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._verifySchemaType#4157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType(FormatSchema)",
    "snippet": "protected void _verifySchemaType(FormatSchema schema)\n    {\n        if (schema !\u003d null) {\n            if (!_jsonFactory.canUseSchema(schema)) {\n                    throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n                            +\" for format \"+_jsonFactory.getFormatName());\n            }\n        }\n    }",
    "begin_line": 4157,
    "end_line": 4165,
    "comment": "/** \n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.PropertyName#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String)",
    "snippet": "public PropertyName(String simpleName) {\n        this(simpleName, null);\n    }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.PropertyName#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String, java.lang.String)",
    "snippet": "public PropertyName(String simpleName, String namespace)\n    {\n        _simpleName \u003d ClassUtil.nonNullString(simpleName);\n        _namespace \u003d namespace;\n    }",
    "begin_line": 64,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.readResolve#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.readResolve()",
    "snippet": "protected Object readResolve() {\n        if (_namespace \u003d\u003d null) {\n            if (_simpleName \u003d\u003d null || _USE_DEFAULT.equals(_simpleName)) {\n                return USE_DEFAULT;\n            }\n            // 30-Oct-2016, tatu: I don\u0027t see how this could ever occur...\n            //     or how to distinguish USE_DEFAULT/NO_NAME from serialized\n            /*\n            if (_simpleName.equals(_NO_NAME)) {\n                return NO_NAME;\n            }\n            */\n        }\n        return this;\n    }",
    "begin_line": 71,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.construct#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String)",
    "snippet": "public static PropertyName construct(String simpleName)\n    {\n        if (simpleName \u003d\u003d null || simpleName.length() \u003d\u003d 0) {\n            return USE_DEFAULT;\n        }\n        return new PropertyName(InternCache.instance.intern(simpleName), null);\n    }",
    "begin_line": 90,
    "end_line": 96,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.construct#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)",
    "snippet": "public static PropertyName construct(String simpleName, String ns)\n    {\n        if (simpleName \u003d\u003d null) {\n            simpleName \u003d \"\";\n        }\n        if (ns \u003d\u003d null \u0026\u0026 simpleName.length() \u003d\u003d 0) {\n            return USE_DEFAULT;\n        }\n        return new PropertyName(InternCache.instance.intern(simpleName), ns);\n    }",
    "begin_line": 98,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.internSimpleName#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.internSimpleName()",
    "snippet": "public PropertyName internSimpleName()\n    {\n        if (_simpleName.length() \u003d\u003d 0) { // empty String is canonical already\n            return this;\n        }\n        String interned \u003d InternCache.instance.intern(_simpleName);\n        if (interned \u003d\u003d _simpleName) { // was already interned\n            return this;\n        }\n        return new PropertyName(interned, _namespace);\n    }",
    "begin_line": 109,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.withSimpleName#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.withSimpleName(java.lang.String)",
    "snippet": "public PropertyName withSimpleName(String simpleName)\n    {\n        if (simpleName \u003d\u003d null) {\n            simpleName \u003d \"\";\n        }\n        if (simpleName.equals(_simpleName)) {\n            return this;\n        }\n        return new PropertyName(simpleName, _namespace);\n    }",
    "begin_line": 125,
    "end_line": 134,
    "comment": "/** \n * Fluent factory method for constructing an instance with different simple name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.withNamespace#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.withNamespace(java.lang.String)",
    "snippet": "public PropertyName withNamespace(String ns) {\n        if (ns \u003d\u003d null) {\n            if (_namespace \u003d\u003d null) {\n                return this;\n            }\n        } else if (ns.equals(_namespace)) {\n            return this;\n        }\n        return new PropertyName(_simpleName, ns);\n    }",
    "begin_line": 140,
    "end_line": 149,
    "comment": "/** \n * Fluent factory method for constructing an instance with different namespace.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.getSimpleName#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.getSimpleName()",
    "snippet": "public String getSimpleName() {\n        return _simpleName;\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.simpleAsEncoded#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.simpleAsEncoded(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public SerializableString simpleAsEncoded(MapperConfig\u003c?\u003e config) {\n        SerializableString sstr \u003d _encodedSimple;\n        if (sstr \u003d\u003d null) {\n            if (config \u003d\u003d null) {\n                sstr \u003d new SerializedString(_simpleName);\n            } else {\n                sstr \u003d config.compileString(_simpleName);\n            }\n            _encodedSimple \u003d sstr;\n        }\n        return sstr;\n    }",
    "begin_line": 167,
    "end_line": 178,
    "comment": "/** \n * Accessor that may be used to get lazily-constructed efficient representation of the simple name.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.getNamespace#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.getNamespace()",
    "snippet": "public String getNamespace() {\n        return _namespace;\n    }",
    "begin_line": 180,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasSimpleName#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasSimpleName()",
    "snippet": "public boolean hasSimpleName() {\n        return _simpleName.length() \u003e 0;\n    }",
    "begin_line": 184,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasSimpleName#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasSimpleName(java.lang.String)",
    "snippet": "public boolean hasSimpleName(String str) {\n        // _simpleName never null so...\n        return _simpleName.equals(str);\n    }",
    "begin_line": 191,
    "end_line": 194,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasNamespace#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasNamespace()",
    "snippet": "public boolean hasNamespace() {\n        return _namespace !\u003d null;\n    }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.isEmpty#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return (_namespace \u003d\u003d null) \u0026\u0026 (_simpleName.isEmpty());\n    }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * Method that is basically equivalent of: \u003cpre\u003e !hasSimpleName() \u0026lt;\u0026lt; !hasNamespace(); \u003c/pre\u003e\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.equals#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        /* 13-Nov-2012, tatu: by default, require strict type equality.\n         *   Re-evaluate if this becomes an issue.\n         */\n        if (o.getClass() !\u003d getClass()) return false;\n        // 13-Nov-2012, tatu: Should we have specific rules on matching USE_DEFAULT?\n        //   (like, it only ever matching exact instance)\n        //   If we did, would need to check symmetrically; that is, if either \u0027this\u0027\n        //   or \u0027o\u0027 was USE_DEFAULT, both would have to be.\n        PropertyName other \u003d (PropertyName) o;\n        if (_simpleName \u003d\u003d null) {\n            if (other._simpleName !\u003d null) return false;\n        } else if (!_simpleName.equals(other._simpleName)) {\n            return false;\n        }\n        if (_namespace \u003d\u003d null) {\n            return (null \u003d\u003d other._namespace);\n        }\n        return _namespace.equals(other._namespace);\n    }",
    "begin_line": 219,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hashCode#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        if (_namespace \u003d\u003d null) {\n            return _simpleName.hashCode();\n        }\n        return _namespace.hashCode() ^  _simpleName.hashCode();\n    }",
    "begin_line": 244,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.toString#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.toString()",
    "snippet": "@Override\n    public String toString() {\n        if (_namespace \u003d\u003d null) {\n            return _simpleName;\n        }\n        return \"{\"+_namespace + \"}\" + _simpleName;\n    }",
    "begin_line": 252,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "public SerializationConfig(BaseSettings base,\n            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(base, str, mixins, rootNames, configOverrides);\n        _serFeatures \u003d collectFeatureDefaults(SerializationFeature.class);\n        _filterProvider \u003d null;\n        _defaultPrettyPrinter \u003d DEFAULT_PRETTY_PRINTER;\n        _generatorFeatures \u003d 0;\n        _generatorFeaturesToChange \u003d 0;\n        _formatWriteFeatures \u003d 0;\n        _formatWriteFeaturesToChange \u003d 0;\n    }",
    "begin_line": 110,
    "end_line": 122,
    "comment": "/** \n * Constructor used by ObjectMapper to create default configuration object instance.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected SerializationConfig(SerializationConfig src,\n            SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(src, mixins, rootNames, configOverrides);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 129,
    "end_line": 141,
    "comment": "/** \n * Copy-constructor used for making a copy to be used by new  {@link ObjectMapper}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "private SerializationConfig(SerializationConfig src, SubtypeResolver str)\n    {\n        super(src, str);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 150,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, int, int, int, int, int, int)",
    "snippet": "private SerializationConfig(SerializationConfig src,\n            int mapperFeatures, int serFeatures,\n            int generatorFeatures, int generatorFeatureMask,\n            int formatFeatures, int formatFeaturesMask)\n    {\n        super(src, mapperFeatures);\n        _serFeatures \u003d serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d generatorFeatures;\n        _generatorFeaturesToChange \u003d generatorFeatureMask;\n        _formatWriteFeatures \u003d formatFeatures;\n        _formatWriteFeaturesToChange \u003d formatFeaturesMask;\n    }",
    "begin_line": 162,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "private SerializationConfig(SerializationConfig src, BaseSettings base)\n    {\n        super(src, base);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 177,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "private SerializationConfig(SerializationConfig src, FilterProvider filters)\n    {\n        super(src);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d filters;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 189,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "private SerializationConfig(SerializationConfig src, Class\u003c?\u003e view)\n    {\n        super(src, view);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 201,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#213",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private SerializationConfig(SerializationConfig src, PropertyName rootName)\n    {\n        super(src, rootName);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 213,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected SerializationConfig(SerializationConfig src, ContextAttributes attrs)\n    {\n        super(src, attrs);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 228,
    "end_line": 238,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins)\n    {\n        super(src, mixins);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d src._defaultPrettyPrinter;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 243,
    "end_line": 253,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, PrettyPrinter)",
    "snippet": "protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP)\n    {\n        super(src);\n        _serFeatures \u003d src._serFeatures;\n        _filterProvider \u003d src._filterProvider;\n        _defaultPrettyPrinter \u003d defaultPP;\n        _generatorFeatures \u003d src._generatorFeatures;\n        _generatorFeaturesToChange \u003d src._generatorFeaturesToChange;\n        _formatWriteFeatures \u003d src._formatWriteFeatures;\n        _formatWriteFeaturesToChange \u003d src._formatWriteFeaturesToChange;\n    }",
    "begin_line": 258,
    "end_line": 268,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig._withBase#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "@Override _withBase(BaseSettings newBase) {\n        return (_base \u003d\u003d newBase) ? this : new SerializationConfig(this, newBase);\n    }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig._withMapperFeatures#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig._withMapperFeatures(int)",
    "snippet": "@Override _withMapperFeatures(int mapperFeatures) {\n        return new SerializationConfig(this, mapperFeatures, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 282,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withRootName#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override\n    public SerializationConfig withRootName(PropertyName rootName) {\n        if (rootName \u003d\u003d null) {\n            if (_rootName \u003d\u003d null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new SerializationConfig(this, rootName);\n    }",
    "begin_line": 289,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "@Override\n    public SerializationConfig with(SubtypeResolver str) {\n        return (str \u003d\u003d _subtypeResolver)? this : new SerializationConfig(this, str);\n    }",
    "begin_line": 301,
    "end_line": 303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withView#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public SerializationConfig withView(Class\u003c?\u003e view) {\n        return (_view \u003d\u003d view) ? this : new SerializationConfig(this, view);\n    }",
    "begin_line": 306,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "@Override\n    public SerializationConfig with(ContextAttributes attrs) {\n        return (attrs \u003d\u003d _attributes) ? this : new SerializationConfig(this, attrs);\n    }",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(java.text.DateFormat)",
    "snippet": "@Override\n    public SerializationConfig with(DateFormat df) {\n        SerializationConfig cfg \u003d super.with(df);\n        // Also need to toggle this feature based on existence of date format:\n        if (df \u003d\u003d null) {\n            return cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        }\n        return cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    }",
    "begin_line": 327,
    "end_line": 334,
    "comment": "/** \n * In addition to constructing instance with specified date format, will enable or disable \u003ccode\u003eSerializationFeature.WRITE_DATES_AS_TIMESTAMPS\u003c/code\u003e (enable if format set as null; disable if non-null)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig with(SerializationFeature feature)\n    {\n        int newSerFeatures \u003d _serFeatures | feature.getMask();\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 346,
    "end_line": 353,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig with(SerializationFeature first, SerializationFeature... features)\n    {\n        int newSerFeatures \u003d _serFeatures | first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures |\u003d f.getMask();\n        }\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 359,
    "end_line": 369,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig withFeatures(SerializationFeature... features)\n    {\n        int newSerFeatures \u003d _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures |\u003d f.getMask();\n        }\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 375,
    "end_line": 385,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig without(SerializationFeature feature)\n    {\n        int newSerFeatures \u003d _serFeatures \u0026 ~feature.getMask();\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 391,
    "end_line": 398,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#404",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig without(SerializationFeature first, SerializationFeature... features)\n    {\n        int newSerFeatures \u003d _serFeatures \u0026 ~first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures \u0026\u003d ~f.getMask();\n        }\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 404,
    "end_line": 414,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig withoutFeatures(SerializationFeature... features)\n    {\n        int newSerFeatures \u003d _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures \u0026\u003d ~f.getMask();\n        }\n        return (newSerFeatures \u003d\u003d _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 420,
    "end_line": 430,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#443",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig with(JsonGenerator.Feature feature)\n    {\n        int newSet \u003d _generatorFeatures | feature.getMask();\n        int newMask \u003d _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 443,
    "end_line": 451,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#459",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig withFeatures(JsonGenerator.Feature... features)\n    {\n        int newSet \u003d _generatorFeatures;\n        int newMask \u003d _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask \u003d f.getMask();\n            newSet |\u003d mask;\n            newMask |\u003d mask;\n        }\n        return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 459,
    "end_line": 472,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig without(JsonGenerator.Feature feature)\n    {\n        int newSet \u003d _generatorFeatures \u0026 ~feature.getMask();\n        int newMask \u003d _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 480,
    "end_line": 488,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig withoutFeatures(JsonGenerator.Feature... features)\n    {\n        int newSet \u003d _generatorFeatures;\n        int newMask \u003d _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask \u003d f.getMask();\n            newSet \u0026\u003d ~mask;\n            newMask |\u003d mask;\n        }\n        return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
    "begin_line": 496,
    "end_line": 509,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#522",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(FormatFeature)",
    "snippet": "public SerializationConfig with(FormatFeature feature)\n    {\n        int newSet \u003d _formatWriteFeatures | feature.getMask();\n        int newMask \u003d _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 522,
    "end_line": 530,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#538",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(FormatFeature)",
    "snippet": "public SerializationConfig withFeatures(FormatFeature... features)\n    {\n        int newSet \u003d _formatWriteFeatures;\n        int newMask \u003d _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask \u003d f.getMask();\n            newSet |\u003d mask;\n            newMask |\u003d mask;\n        }\n        return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 538,
    "end_line": 551,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#559",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(FormatFeature)",
    "snippet": "public SerializationConfig without(FormatFeature feature)\n    {\n        int newSet \u003d _formatWriteFeatures \u0026 ~feature.getMask();\n        int newMask \u003d _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 559,
    "end_line": 567,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#575",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(FormatFeature)",
    "snippet": "public SerializationConfig withoutFeatures(FormatFeature... features)\n    {\n        int newSet \u003d _formatWriteFeatures;\n        int newMask \u003d _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask \u003d f.getMask();\n            newSet \u0026\u003d ~mask;\n            newMask |\u003d mask;\n        }\n        return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }",
    "begin_line": 575,
    "end_line": 588,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFilters#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public SerializationConfig withFilters(FilterProvider filterProvider) {\n        return (filterProvider \u003d\u003d _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n    }",
    "begin_line": 596,
    "end_line": 598,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withPropertyInclusion#609",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Deprecated\n    public SerializationConfig withPropertyInclusion(JsonInclude.Value incl) {\n        _configOverrides.setDefaultInclusion(incl);\n        return this;\n    }",
    "begin_line": 609,
    "end_line": 612,
    "comment": "/** \n * Mutant factory method for constructing a new instance with different default inclusion criteria configuration.\n * @since 2.7\n * @deprecated Since 2.9; not needed any more\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withDefaultPrettyPrinter#617",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withDefaultPrettyPrinter(PrettyPrinter)",
    "snippet": "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp) {\n        return (_defaultPrettyPrinter \u003d\u003d pp) ? this:  new SerializationConfig(this, pp);\n    }",
    "begin_line": 617,
    "end_line": 619,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.constructDefaultPrettyPrinter#627",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.constructDefaultPrettyPrinter()",
    "snippet": "public PrettyPrinter constructDefaultPrettyPrinter() {\n        PrettyPrinter pp \u003d _defaultPrettyPrinter;\n        if (pp instanceof Instantiatable\u003c?\u003e) {\n            pp \u003d (PrettyPrinter) ((Instantiatable\u003c?\u003e) pp).createInstance();\n        }\n        return pp;\n    }",
    "begin_line": 627,
    "end_line": 633,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.initialize#648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.initialize(JsonGenerator)",
    "snippet": "public void initialize(JsonGenerator g)\n    {\n        if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\n            // but do not override an explicitly set one\n            if (g.getPrettyPrinter() \u003d\u003d null) {\n                PrettyPrinter pp \u003d constructDefaultPrettyPrinter();\n                if (pp !\u003d null) {\n                    g.setPrettyPrinter(pp);\n                }\n            }\n        }\n        @SuppressWarnings(\"deprecation\")\n        boolean useBigDec \u003d SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\n\n        int mask \u003d _generatorFeaturesToChange;\n        if ((mask !\u003d 0) || useBigDec) {\n            int newFlags \u003d _generatorFeatures;\n            // although deprecated, needs to be supported for now\n            if (useBigDec) {\n                int f \u003d JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\n                newFlags |\u003d f;\n                mask |\u003d f;\n            }\n            g.overrideStdFeatures(newFlags, mask);\n        }\n        if (_formatWriteFeaturesToChange !\u003d 0) {\n            g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);\n        }\n    }",
    "begin_line": 648,
    "end_line": 676,
    "comment": "/** \n * Method called by  {@link ObjectMapper} and {@link ObjectWriter}to modify those  {@link com.fasterxml.jackson.core.JsonGenerator.Feature} settingsthat have been configured via this config instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getSerializationInclusion#688",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getSerializationInclusion()",
    "snippet": "@Deprecated\n    public JsonInclude.Include getSerializationInclusion()\n    {\n        JsonInclude.Include incl \u003d getDefaultPropertyInclusion().getValueInclusion();\n        return (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS) ? JsonInclude.Include.ALWAYS : incl;\n    }",
    "begin_line": 688,
    "end_line": 692,
    "comment": "/** \n * @deprecated Since 2.7 use {@link #getDefaultPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.useRootWrapping#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.useRootWrapping()",
    "snippet": "@Override\n    public boolean useRootWrapping()\n    {\n        if (_rootName !\u003d null) { // empty String disables wrapping; non-empty enables\n            return !_rootName.isEmpty();\n        }\n        return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n    }",
    "begin_line": 701,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.isEnabled#709",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public final boolean isEnabled(SerializationFeature f) {\n        return (_serFeatures \u0026 f.getMask()) !\u003d 0;\n    }",
    "begin_line": 709,
    "end_line": 711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.isEnabled#720",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(JsonGenerator.Feature, JsonFactory)",
    "snippet": "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory) {\n        int mask \u003d f.getMask();\n        if ((_generatorFeaturesToChange \u0026 mask) !\u003d 0) {\n            return (_generatorFeatures \u0026 f.getMask()) !\u003d 0;\n        }\n        return factory.isEnabled(f);\n    }",
    "begin_line": 720,
    "end_line": 726,
    "comment": "/** \n * Accessor method that first checks if we have any overrides for feature, and only if not, checks state of passed-in factory.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.hasSerializationFeatures#734",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.hasSerializationFeatures(int)",
    "snippet": "public final boolean hasSerializationFeatures(int featureMask) {\n        return (_serFeatures \u0026 featureMask) \u003d\u003d featureMask;\n    }",
    "begin_line": 734,
    "end_line": 736,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getSerializationFeatures#738",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getSerializationFeatures()",
    "snippet": "public final int getSerializationFeatures() {\n        return _serFeatures;\n    }",
    "begin_line": 738,
    "end_line": 740,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getFilterProvider#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getFilterProvider()",
    "snippet": "public FilterProvider getFilterProvider() {\n        return _filterProvider;\n    }",
    "begin_line": 748,
    "end_line": 750,
    "comment": "/** \n * Method for getting provider used for locating filters given id (which is usually provided with filter annotations). Will be null if no provided was set for  {@link ObjectWriter}(or if serialization directly called from  {@link ObjectMapper})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getDefaultPrettyPrinter#762",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getDefaultPrettyPrinter()",
    "snippet": "public PrettyPrinter getDefaultPrettyPrinter() {\n        return _defaultPrettyPrinter;\n    }",
    "begin_line": 762,
    "end_line": 764,
    "comment": "/** \n * Accessor for configured blueprint \"default\"  {@link PrettyPrinter} touse, if default pretty-printing is enabled. \u003cp\u003e NOTE: returns the \"blueprint\" instance, and does NOT construct an instance ready to use; call  {@link #constructDefaultPrettyPrinter()} ifactually usable instance is desired.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.introspect#777",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.introspect(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT extends BeanDescription\u003e T introspect(JavaType type) {\n        return (T) getClassIntrospector().forSerialization(this, type, this);\n    }",
    "begin_line": 777,
    "end_line": 779,
    "comment": "/** \n * Method that will introspect full bean properties for the purpose of building a bean serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.SerializationFeature#428",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean)",
    "snippet": "private SerializationFeature(boolean defaultState) {\n        _defaultState \u003d defaultState;\n        _mask \u003d (1 \u003c\u003c ordinal());\n    }",
    "begin_line": 428,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#434",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()",
    "snippet": "@Override\n    public boolean enabledByDefault() { return _defaultState; }",
    "begin_line": 434,
    "end_line": 434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.getMask()",
    "snippet": "@Override\n    public int getMask() { return _mask; }",
    "begin_line": 438,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int)",
    "snippet": "@Override\n    public boolean enabledIn(int flags) { return (flags \u0026 _mask) !\u003d 0; }",
    "begin_line": 441,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider()",
    "snippet": "public SerializerProvider()\n    {\n        _config \u003d null;\n        _serializerFactory \u003d null;\n        _serializerCache \u003d new SerializerCache();\n        // Blueprints doesn\u0027t have access to any serializers...\n        _knownSerializers \u003d null;\n\n        _serializationView \u003d null;\n        _attributes \u003d null;\n\n        // not relevant for blueprint instance, could set either way:\n        _stdNullValueSerializer \u003d true;\n    }",
    "begin_line": 191,
    "end_line": 204,
    "comment": "/** \n * Constructor for creating master (or \"blue-print\") provider object, which is only used as the template for constructing per-binding instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected SerializerProvider(SerializerProvider src,\n            SerializationConfig config, SerializerFactory f)\n    {\n        _serializerFactory \u003d f;\n        _config \u003d config;\n\n        _serializerCache \u003d src._serializerCache;\n        _unknownTypeSerializer \u003d src._unknownTypeSerializer;\n        _keySerializer \u003d src._keySerializer;\n        _nullValueSerializer \u003d src._nullValueSerializer;\n        _nullKeySerializer \u003d src._nullKeySerializer;\n\n        _stdNullValueSerializer \u003d (_nullValueSerializer \u003d\u003d DEFAULT_NULL_KEY_SERIALIZER);\n\n        _serializationView \u003d config.getActiveView();\n        _attributes \u003d config.getAttributes();\n\n        /* Non-blueprint instances do have a read-only map; one that doesn\u0027t\n         * need synchronization for lookups.\n         */\n        _knownSerializers \u003d _serializerCache.getReadOnlyLookupMap();\n    }",
    "begin_line": 212,
    "end_line": 233,
    "comment": "/** \n * \"Copy-constructor\", used by sub-classes when creating actual non-blueprint instances to use.\n * @param src Blueprint object used as the baseline for this instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#240",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "protected SerializerProvider(SerializerProvider src)\n    {\n        // since this is assumed to be a blue-print instance, many settings missing:\n        _config \u003d null;\n        _serializationView \u003d null;\n        _serializerFactory \u003d null;\n        _knownSerializers \u003d null;\n\n        // and others initialized to default empty state\n        _serializerCache \u003d new SerializerCache();\n\n        _unknownTypeSerializer \u003d src._unknownTypeSerializer;\n        _keySerializer \u003d src._keySerializer;\n        _nullValueSerializer \u003d src._nullValueSerializer;\n        _nullKeySerializer \u003d src._nullKeySerializer;\n\n        _stdNullValueSerializer \u003d src._stdNullValueSerializer;\n    }",
    "begin_line": 240,
    "end_line": 257,
    "comment": "/** \n * Copy-constructor used when making a copy of a blueprint instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setDefaultKeySerializer#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setDefaultKeySerializer(JsonSerializer\u003cObject\u003e ks)\n    {\n        if (ks \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null JsonSerializer\");\n        }\n        _keySerializer \u003d ks;\n    }",
    "begin_line": 271,
    "end_line": 277,
    "comment": "/** \n * Method that can be used to specify serializer that will be used to write JSON property names matching null keys for Java Maps (which will throw an exception if try write such property name)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setNullValueSerializer#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setNullValueSerializer(JsonSerializer\u003cObject\u003e nvs)\n    {\n        if (nvs \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null JsonSerializer\");\n        }\n        _nullValueSerializer \u003d nvs;\n    }",
    "begin_line": 288,
    "end_line": 294,
    "comment": "/** \n * Method that can be used to specify serializer that will be used to write JSON values matching Java null values instead of default one (which simply writes JSON null). \u003cp\u003e Note that you can get finer control over serializer to use by overriding {@link #findNullValueSerializer}, which gets called once per each property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setNullKeySerializer#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setNullKeySerializer(JsonSerializer\u003cObject\u003e nks)\n    {\n        if (nks \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null JsonSerializer\");\n        }\n        _nullKeySerializer \u003d nks;\n    }",
    "begin_line": 305,
    "end_line": 311,
    "comment": "/** \n * Method that can be used to specify serializer to use for serializing all non-null JSON property names, unless more specific key serializer is found (i.e. if not custom key serializer has been registered for Java type). \u003cp\u003e Note that key serializer registration are different from value serializer registrations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getConfig#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getConfig()",
    "snippet": "@Override\n    public final SerializationConfig getConfig() { return _config; }",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * Method for accessing configuration for the serialization processing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getAnnotationIntrospector#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()",
    "snippet": "@Override\n    public final AnnotationIntrospector getAnnotationIntrospector() {\n        return _config.getAnnotationIntrospector();\n    }",
    "begin_line": 327,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getTypeFactory#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()",
    "snippet": "@Override\n    public final TypeFactory getTypeFactory() {\n        return _config.getTypeFactory();\n    }",
    "begin_line": 332,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getActiveView#337",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getActiveView()",
    "snippet": "@Override\n    public final Class\u003c?\u003e getActiveView() { return _serializationView; }",
    "begin_line": 337,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getSerializationView#343",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()",
    "snippet": "@Deprecated\n    public final Class\u003c?\u003e getSerializationView() { return _serializationView; }",
    "begin_line": 343,
    "end_line": 343,
    "comment": "/** \n * @deprecated Since 2.2, use {@link #getActiveView} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.canOverrideAccessModifiers#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()",
    "snippet": "@Override\n    public final boolean canOverrideAccessModifiers() {\n        return _config.canOverrideAccessModifiers();\n    }",
    "begin_line": 346,
    "end_line": 348,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isEnabled#351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override\n    public final boolean isEnabled(MapperFeature feature) {\n        return _config.isEnabled(feature);\n    }",
    "begin_line": 351,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultPropertyFormat#356",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType) {\n        return _config.getDefaultPropertyFormat(baseType);\n    }",
    "begin_line": 356,
    "end_line": 358,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultPropertyInclusion#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType) {\n        return _config.getDefaultPropertyInclusion();\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getLocale#374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getLocale()",
    "snippet": "@Override\n    public Locale getLocale() {\n        return _config.getLocale();\n    }",
    "begin_line": 374,
    "end_line": 376,
    "comment": "/** \n * Method for accessing default Locale to use: convenience method for \u003cpre\u003e getConfig().getLocale(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getTimeZone#385",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()",
    "snippet": "@Override\n    public TimeZone getTimeZone() {\n        return _config.getTimeZone();\n    }",
    "begin_line": 385,
    "end_line": 387,
    "comment": "/** \n * Method for accessing default TimeZone to use: convenience method for \u003cpre\u003e getConfig().getTimeZone(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getAttribute#396",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)",
    "snippet": "@Override\n    public Object getAttribute(Object key) {\n        return _attributes.getAttribute(key);\n    }",
    "begin_line": 396,
    "end_line": 398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setAttribute#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override\n    public SerializerProvider setAttribute(Object key, Object value)\n    {\n        _attributes \u003d _attributes.withPerCallAttribute(key, value);\n        return this;\n    }",
    "begin_line": 401,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isEnabled#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public final boolean isEnabled(SerializationFeature feature) {\n        return _config.isEnabled(feature);\n    }",
    "begin_line": 421,
    "end_line": 423,
    "comment": "/** \n * Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for: \u003cpre\u003e getConfig().isEnabled(feature); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.hasSerializationFeatures#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)",
    "snippet": "public final boolean hasSerializationFeatures(int featureMask) {\n        return _config.hasSerializationFeatures(featureMask);\n    }",
    "begin_line": 431,
    "end_line": 433,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getFilterProvider#442",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()",
    "snippet": "public final FilterProvider getFilterProvider() {\n        return _config.getFilterProvider();\n    }",
    "begin_line": 442,
    "end_line": 444,
    "comment": "/** \n * Convenience method for accessing provider to find serialization filters used, equivalent to calling: \u003cpre\u003e getConfig().getFilterProvider(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getGenerator#453",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getGenerator()",
    "snippet": "public JsonGenerator getGenerator() {\n        return null;\n    }",
    "begin_line": 453,
    "end_line": 455,
    "comment": "/** \n * \u003cp\u003e NOTE: current implementation simply returns `null` as generator is not yet assigned to this provider.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findObjectId#469",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e)",
    "snippet": "public abstract WritableObjectId findObjectId(Object forPojo,\n        ObjectIdGenerator\u003c?\u003e generatorType);",
    "begin_line": 469,
    "end_line": 470,
    "comment": "/** \n * Method called to find the Object Id for given POJO, if one has been generated. Will always return a non-null Object; contents vary depending on whether an Object Id already exists or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property)\n        throws JsonMappingException\n    {\n        // Fast lookup from local lookup thingy works?\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            // If not, maybe shared map already has it?\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                // ... possibly as fully typed?\n                ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n                if (ser \u003d\u003d null) {\n                    // If neither, must create\n                    ser \u003d _createAndCacheUntypedSerializer(valueType);\n                    // Not found? Must use the unknown type serializer, which will report error later on\n                    if (ser \u003d\u003d null) {\n                        ser \u003d getUnknownTypeSerializer(valueType);\n                        // Should this be added to lookups?\n                        if (CACHE_UNKNOWN_MAPPINGS) {\n                            _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                        }\n                        return ser;\n                    }\n                }\n            }\n        }\n        // at this point, resolution has occured, but not contextualization\n        return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n    }",
    "begin_line": 496,
    "end_line": 524,
    "comment": "/** \n * Method called to get hold of a serializer for a value of given type; or if no such serializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked). \u003cp\u003e Note: this method is only called for non-null values; not for keys or null values. For these, check out other accessor methods. \u003cp\u003e Note that serializers produced should NOT handle polymorphic serialization aspects; separate  {@link TypeSerializer} is to be constructed by callerif and as necessary.\n * @throws JsonMappingException if there are fatal problems withaccessing suitable serializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property)\n        throws JsonMappingException\n    {\n        if (valueType \u003d\u003d null) {\n            reportMappingProblem(\"Null passed for `valueType` of `findValueSerializer()`\");\n        }\n        // (see comments from above method)\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n        return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n    }",
    "begin_line": 539,
    "end_line": 561,
    "comment": "/** \n * Similar to  {@link #findValueSerializer(Class,BeanProperty)}, but takes full generics-aware type instead of raw class. This is necessary for accurate handling of external type information, to handle polymorphic types. \u003cp\u003e Note: this call will also contextualize serializer before returning it.\n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#570",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType) throws JsonMappingException\n    {\n        // (see comments from above method)\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n                if (ser \u003d\u003d null) {\n                    ser \u003d _createAndCacheUntypedSerializer(valueType);\n                    if (ser \u003d\u003d null) {\n                        ser \u003d getUnknownTypeSerializer(valueType);\n                        if (CACHE_UNKNOWN_MAPPINGS) {\n                            _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                        }\n                    }\n                }\n            }\n        }\n        return ser;\n    }",
    "begin_line": 570,
    "end_line": 590,
    "comment": "/** \n * Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#599",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType)\n        throws JsonMappingException\n    {\n        // (see comments from above method)\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                }\n            }\n        }\n        return ser;\n    }",
    "begin_line": 599,
    "end_line": 617,
    "comment": "/** \n * Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findPrimaryPropertySerializer#632",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e findPrimaryPropertySerializer(JavaType valueType, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                    // Should this be added to lookups?\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n        return (JsonSerializer\u003cObject\u003e) handlePrimaryContextualization(ser, property);\n    }",
    "begin_line": 632,
    "end_line": 651,
    "comment": "/** \n * Similar to  {@link #findValueSerializer(JavaType,BeanProperty)}, but used when finding \"primary\" property value serializer (one directly handling value of the property). Difference has to do with contextual resolution, and method(s) called: this method should only be called when caller is certain that this is the primary property value serializer.\n * @param property Property that is being handled; will never be null, and itstype has to match \u003ccode\u003evalueType\u003c/code\u003e parameter.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findPrimaryPropertySerializer#657",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e findPrimaryPropertySerializer(Class\u003c?\u003e valueType,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n                if (ser \u003d\u003d null) {\n                    ser \u003d _createAndCacheUntypedSerializer(valueType);\n                    if (ser \u003d\u003d null) {\n                        ser \u003d getUnknownTypeSerializer(valueType);\n                        if (CACHE_UNKNOWN_MAPPINGS) {\n                            _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                        }\n                        return ser;\n                    }\n                }\n            }\n        }\n        return (JsonSerializer\u003cObject\u003e) handlePrimaryContextualization(ser, property);\n    }",
    "begin_line": 657,
    "end_line": 679,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypedValueSerializer#696",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class\u003c?\u003e, boolean, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType,\n            boolean cache, BeanProperty property)\n        throws JsonMappingException\n    {\n        // Two-phase lookups; local non-shared cache, then shared:\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n        if (ser !\u003d null) {\n            return ser;\n        }\n        // If not, maybe shared map already has it?\n        ser \u003d _serializerCache.typedValueSerializer(valueType);\n        if (ser !\u003d null) {\n            return ser;\n        }\n\n        // Well, let\u0027s just compose from pieces:\n        ser \u003d findValueSerializer(valueType, property);\n        TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config,\n                _config.constructType(valueType));\n        if (typeSer !\u003d null) {\n            typeSer \u003d typeSer.forProperty(property);\n            ser \u003d new TypeWrappedSerializer(typeSer, ser);\n        }\n        if (cache) {\n            _serializerCache.addTypedSerializer(valueType, ser);\n        }\n        return ser;\n    }",
    "begin_line": 696,
    "end_line": 723,
    "comment": "/** \n * Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.\n * @param valueType Type for purpose of locating a serializer; usually dynamicruntime type, but can also be static declared type, depending on configuration\n * @param cache Whether resulting value serializer should be cached or not; this is justa hint\n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypedValueSerializer#741",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(JavaType valueType, boolean cache,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        // Two-phase lookups; local non-shared cache, then shared:\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n        if (ser !\u003d null) {\n            return ser;\n        }\n        // If not, maybe shared map already has it?\n        ser \u003d _serializerCache.typedValueSerializer(valueType);\n        if (ser !\u003d null) {\n            return ser;\n        }\n\n        // Well, let\u0027s just compose from pieces:\n        ser \u003d findValueSerializer(valueType, property);\n        TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, valueType);\n        if (typeSer !\u003d null) {\n            typeSer \u003d typeSer.forProperty(property);\n            ser \u003d new TypeWrappedSerializer(typeSer, ser);\n        }\n        if (cache) {\n            _serializerCache.addTypedSerializer(valueType, ser);\n        }\n        return ser;\n    }",
    "begin_line": 741,
    "end_line": 767,
    "comment": "/** \n * Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.\n * @param valueType Declared type of value being serialized (which may notbe actual runtime type); used for finding both value serializer and type serializer to use for adding polymorphic type (if any)\n * @param cache Whether resulting value serializer should be cached or not; this is justa hint \n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypeSerializer#776",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeSerializer findTypeSerializer(JavaType javaType) throws JsonMappingException {\n        return _serializerFactory.createTypeSerializer(_config, javaType);\n    }",
    "begin_line": 776,
    "end_line": 778,
    "comment": "/** \n * Method called to get the  {@link TypeSerializer} to use for including Type Id necessaryfor serializing for the given Java class. Useful for schema generators.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findKeySerializer#790",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findKeySerializer(JavaType keyType, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonSerializer\u003cObject\u003e ser \u003d _serializerFactory.createKeySerializer(_config, keyType, _keySerializer);\n        // 25-Feb-2011, tatu: As per [JACKSON-519], need to ensure contextuality works here, too\n        return _handleContextualResolvable(ser, property);\n    }",
    "begin_line": 790,
    "end_line": 796,
    "comment": "/** \n * Method called to get the serializer to use for serializing non-null Map keys. Separation from regular {@link #findValueSerializer} method is because actual writemethod must be different (@link JsonGenerator#writeFieldName}; but also since behavior for some key types may differ. \u003cp\u003e Note that the serializer itself can be called with instances of any Java object, but not nulls.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findKeySerializer#801",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findKeySerializer(Class\u003c?\u003e rawKeyType, BeanProperty property)\n        throws JsonMappingException\n    {\n        return findKeySerializer(_config.constructType(rawKeyType), property);\n    }",
    "begin_line": 801,
    "end_line": 805,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultNullKeySerializer#816",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()",
    "snippet": "public JsonSerializer\u003cObject\u003e getDefaultNullKeySerializer() {\n        return _nullKeySerializer;\n    }",
    "begin_line": 816,
    "end_line": 818,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultNullValueSerializer#823",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()",
    "snippet": "public JsonSerializer\u003cObject\u003e getDefaultNullValueSerializer() {\n        return _nullValueSerializer;\n    }",
    "begin_line": 823,
    "end_line": 825,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findNullKeySerializer#844",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findNullKeySerializer(JavaType serializationType,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        return _nullKeySerializer;\n    }",
    "begin_line": 844,
    "end_line": 849,
    "comment": "/** \n * Method called to find a serializer to use for null values for given declared type. Note that type is completely based on declared type, since nulls in Java have no type and thus runtime type can not be determined.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findNullValueSerializer#862",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findNullValueSerializer(BeanProperty property)\n        throws JsonMappingException {\n        return _nullValueSerializer;\n    }",
    "begin_line": 862,
    "end_line": 865,
    "comment": "/** \n * Method called to get the serializer to use for serializing null values for specified property. \u003cp\u003e Default implementation simply calls  {@link #getDefaultNullValueSerializer()}; can be overridden to add custom null serialization for properties of certain type or name. This gives method full granularity to basically override null handling for any specific property or class of properties.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getUnknownTypeSerializer#879",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e getUnknownTypeSerializer(Class\u003c?\u003e unknownType) {\n        // 23-Apr-2015, tatu: Only return shared instance if nominal type is Object.class\n        if (unknownType \u003d\u003d Object.class) {\n            return _unknownTypeSerializer;\n        }\n        // otherwise construct explicit instance with property handled type\n        return new UnknownSerializer(unknownType);\n    }",
    "begin_line": 879,
    "end_line": 886,
    "comment": "/** \n * Method called to get the serializer to use if provider can not determine an actual type-specific serializer to use; typically when none of  {@link SerializerFactory}instances are able to construct a serializer. \u003cp\u003e Typically, returned serializer will throw an exception, although alternatively  {@link com.fasterxml.jackson.databind.ser.std.ToStringSerializer}could be returned as well.\n * @param unknownType Type for which no serializer is found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isUnknownTypeSerializer#895",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "public boolean isUnknownTypeSerializer(JsonSerializer\u003c?\u003e ser) {\n        if ((ser \u003d\u003d _unknownTypeSerializer) || (ser \u003d\u003d null)) {\n            return true;\n        }\n        // 23-Apr-2015, tatu: \"empty\" serializer is trickier; needs to consider\n        //    error handling\n        if (isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n            if (ser.getClass() \u003d\u003d UnknownSerializer.class) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 895,
    "end_line": 907,
    "comment": "/** \n * Helper method called to see if given serializer is considered to be something returned by  {@link #getUnknownTypeSerializer}, that is, something for which no regular serializer was found or constructed.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.serializerInstance#926",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e serializerInstance(Annotated annotated,\n            Object serDef)\n        throws JsonMappingException;",
    "begin_line": 926,
    "end_line": 928,
    "comment": "/** \n * Method that can be called to construct and configure serializer instance, either given a  {@link Class} to instantiate (with default constructor),or an uninitialized serializer instance. Either way, serialize will be properly resolved (via  {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer}) and/or contextualized (via  {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}) as necessary.\n * @param annotated Annotated entity that contained definition\n * @param serDef Serializer definition: either an instance or class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.includeFilterInstance#940",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Object includeFilterInstance(BeanPropertyDefinition forProperty,\n            Class\u003c?\u003e filterClass)\n        throws JsonMappingException;",
    "begin_line": 940,
    "end_line": 942,
    "comment": "/** \n * Method that can be called to construct and configure  {@link JsonInclude}filter instance, given a  {@link Class} to instantiate (with default constructor, by default).\n * @param forProperty (optional) If filter is created for a property, that property;`null` if filter created via defaulting, global or per-type.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.includeFilterSuppressNulls#950",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)",
    "snippet": "public abstract boolean includeFilterSuppressNulls(Object filter)\n        throws JsonMappingException;",
    "begin_line": 950,
    "end_line": 951,
    "comment": "/** \n * Follow-up method that may be called after calling  {@link #includeFilterInstance}, to check handling of `null` values by the filter.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.handlePrimaryContextualization#969",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003c?\u003e handlePrimaryContextualization(JsonSerializer\u003c?\u003e ser,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        if (ser !\u003d null) {\n            if (ser instanceof ContextualSerializer) {\n                ser \u003d ((ContextualSerializer) ser).createContextual(this, property);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 969,
    "end_line": 979,
    "comment": "/** \n * Method called for primary property serializers (ones directly created to serialize values of a POJO property), to handle details of resolving {@link ContextualSerializer} with given property context.\n * @param property Property for which the given primary serializer is used; never null.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.handleSecondaryContextualization#997",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003c?\u003e handleSecondaryContextualization(JsonSerializer\u003c?\u003e ser,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        if (ser !\u003d null) {\n            if (ser instanceof ContextualSerializer) {\n                ser \u003d ((ContextualSerializer) ser).createContextual(this, property);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 997,
    "end_line": 1007,
    "comment": "/** \n * Method called for secondary property serializers (ones NOT directly created to serialize values of a POJO property but instead created as a dependant serializer -- such as value serializers for structured types, or serializers for root values) to handle details of resolving {@link ContextualDeserializer} with given property context.Given that these serializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.\n * @param property Property for which serializer is used, if any; nullwhen deserializing root values\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeValue#1022",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object, JsonGenerator)",
    "snippet": "public final void defaultSerializeValue(Object value, JsonGenerator gen) throws IOException\n    {\n        if (value \u003d\u003d null) {\n            if (_stdNullValueSerializer) { // minor perf optimization\n                gen.writeNull();\n            } else {\n                _nullValueSerializer.serialize(null, gen, this);\n            }\n        } else {\n            Class\u003c?\u003e cls \u003d value.getClass();\n            findTypedValueSerializer(cls, true, null).serialize(value, gen, this);\n        }\n    }",
    "begin_line": 1022,
    "end_line": 1034,
    "comment": "/** \n * Convenience method that will serialize given value (which can be null) using standard serializer locating functionality. It can be called for all values including field and Map values, but usually field values are best handled calling {@link #defaultSerializeField} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeField#1041",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String, java.lang.Object, JsonGenerator)",
    "snippet": "public final void defaultSerializeField(String fieldName, Object value, JsonGenerator gen)\n        throws IOException\n    {\n        gen.writeFieldName(fieldName);\n        if (value \u003d\u003d null) {\n            /* Note: can\u0027t easily check for suppression at this point\n             * any more; caller must check it.\n             */\n            if (_stdNullValueSerializer) { // minor perf optimization\n                gen.writeNull();\n            } else {\n                _nullValueSerializer.serialize(null, gen, this);\n            }\n        } else {\n            Class\u003c?\u003e cls \u003d value.getClass();\n            findTypedValueSerializer(cls, true, null).serialize(value, gen, this);\n        }\n    }",
    "begin_line": 1041,
    "end_line": 1058,
    "comment": "/** \n * Convenience method that will serialize given field with specified value. Value may be null. Serializer is done using the usual null) using standard serializer locating functionality.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateValue#1067",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long, JsonGenerator)",
    "snippet": "public final void defaultSerializeDateValue(long timestamp, JsonGenerator gen)\n        throws IOException\n    {\n        if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            gen.writeNumber(timestamp);\n        } else {\n            gen.writeString(_dateFormat().format(new Date(timestamp)));\n        }\n    }",
    "begin_line": 1067,
    "end_line": 1075,
    "comment": "/** \n * Method that will handle serialization of Date(-like) values, using {@link SerializationConfig} settings to determine expected serializationbehavior. Note: date here means \"full\" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateValue#1084",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date, JsonGenerator)",
    "snippet": "public final void defaultSerializeDateValue(Date date, JsonGenerator gen) throws IOException\n    {\n        if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            gen.writeNumber(date.getTime());\n        } else {\n            gen.writeString(_dateFormat().format(date));\n        }\n    }",
    "begin_line": 1084,
    "end_line": 1091,
    "comment": "/** \n * Method that will handle serialization of Date(-like) values, using {@link SerializationConfig} settings to determine expected serializationbehavior. Note: date here means \"full\" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateKey#1098",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long, JsonGenerator)",
    "snippet": "public void defaultSerializeDateKey(long timestamp, JsonGenerator gen) throws IOException\n    {\n        if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n            gen.writeFieldName(String.valueOf(timestamp));\n        } else {\n            gen.writeFieldName(_dateFormat().format(new Date(timestamp)));\n        }\n    }",
    "begin_line": 1098,
    "end_line": 1105,
    "comment": "/** \n * Method that will handle serialization of Dates used as  {@link java.util.Map} keys,based on  {@link SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS}value (and if using textual representation, configured date format)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateKey#1112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date, JsonGenerator)",
    "snippet": "public void defaultSerializeDateKey(Date date, JsonGenerator gen) throws IOException\n    {\n        if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n            gen.writeFieldName(String.valueOf(date.getTime()));\n        } else {\n            gen.writeFieldName(_dateFormat().format(date));\n        }\n    }",
    "begin_line": 1112,
    "end_line": 1119,
    "comment": "/** \n * Method that will handle serialization of Dates used as  {@link java.util.Map} keys,based on  {@link SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS}value (and if using textual representation, configured date format)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeNull#1121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(JsonGenerator)",
    "snippet": "public final void defaultSerializeNull(JsonGenerator gen) throws IOException\n    {\n        if (_stdNullValueSerializer) { // minor perf optimization\n            gen.writeNull();\n        } else {\n            _nullValueSerializer.serialize(null, gen, this);\n        }\n    }",
    "begin_line": 1121,
    "end_line": 1128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportMappingProblem#1143",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String, java.lang.Object)",
    "snippet": "public void reportMappingProblem(String message, Object... args) throws JsonMappingException {\n        throw mappingException(message, args);\n    }",
    "begin_line": 1143,
    "end_line": 1145,
    "comment": "/** \n * Helper method called to indicate problem; default behavior is to construct and throw a  {@link JsonMappingException}, but in future may collect more than one and only throw after certain number, or at the end of serialization.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadTypeDefinition#1154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportBadTypeDefinition(BeanDescription bean,\n            String msg, Object... msgArgs) throws JsonMappingException {\n        String beanDesc \u003d \"N/A\";\n        if (bean !\u003d null) {\n            beanDesc \u003d ClassUtil.nameOf(bean.getBeanClass());\n        }\n        msg \u003d String.format(\"Invalid type definition for type %s: %s\",\n                beanDesc, _format(msg, msgArgs));\n        throw InvalidDefinitionException.from(getGenerator(), msg, bean, null);\n    }",
    "begin_line": 1154,
    "end_line": 1163,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadPropertyDefinition#1172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003e T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop,\n            String message, Object... msgArgs) throws JsonMappingException {\n        message \u003d _format(message, msgArgs);\n        String propName \u003d \"N/A\";\n        if (prop !\u003d null) {\n            propName \u003d _quotedString(prop.getName());\n        }\n        String beanDesc \u003d \"N/A\";\n        if (bean !\u003d null) {\n            beanDesc \u003d ClassUtil.nameOf(bean.getBeanClass());\n        }\n        message \u003d String.format(\"Invalid definition for property %s (of type %s): %s\",\n                propName, beanDesc, message);\n        throw InvalidDefinitionException.from(getGenerator(), message, bean, prop);\n    }",
    "begin_line": 1172,
    "end_line": 1186,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "@Override\n    public \u003cT\u003e T reportBadDefinition(JavaType type, String msg) throws JsonMappingException {\n        throw InvalidDefinitionException.from(getGenerator(), msg, type);\n    }",
    "begin_line": 1189,
    "end_line": 1191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.Throwable)",
    "snippet": "public \u003cT\u003e T reportBadDefinition(JavaType type, String msg, Throwable cause)\n            throws JsonMappingException {\n        InvalidDefinitionException e \u003d InvalidDefinitionException.from(getGenerator(), msg, type);\n        e.initCause(cause);\n        throw e;\n    }",
    "begin_line": 1196,
    "end_line": 1201,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Throwable)",
    "snippet": "public \u003cT\u003e T reportBadDefinition(Class\u003c?\u003e raw, String msg, Throwable cause)\n            throws JsonMappingException {\n        InvalidDefinitionException e \u003d InvalidDefinitionException.from(getGenerator(), msg, constructType(raw));\n        e.initCause(cause);\n        throw e;\n    }",
    "begin_line": 1206,
    "end_line": 1211,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportMappingProblem#1220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable, java.lang.String, java.lang.Object)",
    "snippet": "public void reportMappingProblem(Throwable t, String message, Object... msgArgs) throws JsonMappingException {\n        message \u003d _format(message, msgArgs);\n        throw JsonMappingException.from(getGenerator(), message, t);\n    }",
    "begin_line": 1220,
    "end_line": 1223,
    "comment": "/** \n * Helper method called to indicate problem; default behavior is to construct and throw a  {@link JsonMappingException}, but in future may collect more than one and only throw after certain number, or at the end of serialization.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.mappingException#1241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated mappingException(String message, Object... msgArgs) {\n        return JsonMappingException.from(getGenerator(), _format(message, msgArgs));\n    }",
    "begin_line": 1241,
    "end_line": 1243,
    "comment": "/** \n * Factory method for constructing a  {@link JsonMappingException}; usually only indirectly used by calling {@link #reportMappingProblem(String,Object...)}.\n * @since 2.6\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.mappingException#1255",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable, java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated mappingException(Throwable t, String message, Object... msgArgs) {\n        return JsonMappingException.from(getGenerator(), _format(message, msgArgs), t);\n    }",
    "begin_line": 1255,
    "end_line": 1257,
    "comment": "/** \n * Factory method for constructing a  {@link JsonMappingException}; usually only indirectly used by calling {@link #reportMappingProblem(Throwable,String,Object...)}\n * @since 2.8\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._reportIncompatibleRootType#1265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void _reportIncompatibleRootType(Object value, JavaType rootType) throws IOException\n    {\n        // One special case: allow primitive/wrapper type coercion\n        if (rootType.isPrimitive()) {\n            Class\u003c?\u003e wrapperType \u003d ClassUtil.wrapperType(rootType.getRawClass());\n            // If it\u0027s just difference between wrapper, primitive, let it slide\n            if (wrapperType.isAssignableFrom(value.getClass())) {\n                return;\n            }\n        }\n        reportBadDefinition(rootType, String.format(\n                \"Incompatible types: declared root type (%s) vs %s\",\n                rootType, ClassUtil.classNameOf(value)));\n    }",
    "begin_line": 1265,
    "end_line": 1278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._findExplicitUntypedSerializer#1287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findExplicitUntypedSerializer(Class\u003c?\u003e runtimeType)\n        throws JsonMappingException\n    {        \n        // Fast lookup from local lookup thingy works?\n        JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(runtimeType);\n        if (ser \u003d\u003d null) {\n            // If not, maybe shared map already has it?\n            ser \u003d _serializerCache.untypedValueSerializer(runtimeType);\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(runtimeType);\n            }\n        }\n        /* 18-Sep-2014, tatu: This is unfortunate patch over related change\n         *    that pushes creation of \"unknown type\" serializer deeper down\n         *    in BeanSerializerFactory; as a result, we need to \"undo\" creation\n         *    here.\n         */\n        if (isUnknownTypeSerializer(ser)) {\n            return null;\n        }\n        return ser;\n    }",
    "begin_line": 1287,
    "end_line": 1308,
    "comment": "/** \n * Method that will try to find a serializer, either from cache or by constructing one; but will not return an \"unknown\" serializer if this can not be done but rather returns null.\n * @return Serializer if one can be found, null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createAndCacheUntypedSerializer#1321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createAndCacheUntypedSerializer(Class\u003c?\u003e rawType)\n        throws JsonMappingException\n    {\n        JavaType fullType \u003d _config.constructType(rawType);\n        JsonSerializer\u003cObject\u003e ser;\n        try {\n            ser \u003d _createUntypedSerializer(fullType);\n        } catch (IllegalArgumentException iae) {\n            /* We better only expose checked exceptions, since those\n             * are what caller is expected to handle\n             */\n            ser \u003d null; // doesn\u0027t matter but compiler whines otherwise\n            reportMappingProblem(iae, iae.getMessage());\n        }\n\n        if (ser !\u003d null) {\n            // 21-Dec-2015, tatu: Best to cache for both raw and full-type key\n            _serializerCache.addAndResolveNonTypedSerializer(rawType, fullType, ser, this);\n        }\n        return ser;\n    }",
    "begin_line": 1321,
    "end_line": 1341,
    "comment": "/** \n * Method that will try to construct a value serializer; and if one is successfully created, cache it for reuse.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createAndCacheUntypedSerializer#1343",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createAndCacheUntypedSerializer(JavaType type)\n        throws JsonMappingException\n    {        \n        JsonSerializer\u003cObject\u003e ser;\n        try {\n            ser \u003d _createUntypedSerializer(type);\n        } catch (IllegalArgumentException iae) {\n            // We better only expose checked exceptions, since those\n            // are what caller is expected to handle\n            ser \u003d null;\n            reportMappingProblem(iae, iae.getMessage());\n        }\n    \n        if (ser !\u003d null) {\n            // 21-Dec-2015, tatu: Should we also cache using raw key?\n            _serializerCache.addAndResolveNonTypedSerializer(type, ser, this);\n        }\n        return ser;\n    }",
    "begin_line": 1343,
    "end_line": 1361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createUntypedSerializer#1366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createUntypedSerializer(JavaType type)\n        throws JsonMappingException\n    {\n        /* 27-Mar-2015, tatu: Wish I knew exactly why/what, but [databind#738]\n         *    can be prevented by synchronizing on cache (not on \u0027this\u0027, however,\n         *    since there\u0027s one instance per serialization).\n         *   Perhaps not-yet-resolved instance might be exposed too early to callers.\n         */\n        synchronized (_serializerCache) {\n            // 17-Feb-2013, tatu: Used to call deprecated method (that passed property)\n            return (JsonSerializer\u003cObject\u003e)_serializerFactory.createSerializer(this, type);\n        }\n    }",
    "begin_line": 1366,
    "end_line": 1378,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._handleContextualResolvable#1385",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer\u003cObject\u003e _handleContextualResolvable(JsonSerializer\u003c?\u003e ser,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        if (ser instanceof ResolvableSerializer) {\n            ((ResolvableSerializer) ser).resolve(this);\n        }\n        return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n    }",
    "begin_line": 1385,
    "end_line": 1393,
    "comment": "/** \n * Helper method called to resolve and contextualize given serializer, if and as necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._handleResolvable#1396",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer\u003cObject\u003e _handleResolvable(JsonSerializer\u003c?\u003e ser)\n        throws JsonMappingException\n    {\n        if (ser instanceof ResolvableSerializer) {\n            ((ResolvableSerializer) ser).resolve(this);\n        }\n        return (JsonSerializer\u003cObject\u003e) ser;\n    }",
    "begin_line": 1396,
    "end_line": 1403,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._dateFormat#1411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._dateFormat()",
    "snippet": "protected final DateFormat _dateFormat()\n    {\n        if (_dateFormat !\u003d null) {\n            return _dateFormat;\n        }\n        /* At this point, all timezone configuration should have occured, with respect\n         * to default dateformat configuration. But we still better clone\n         * an instance as formatters are stateful, not thread-safe.\n         */\n        DateFormat df \u003d _config.getDateFormat();\n        _dateFormat \u003d df \u003d (DateFormat) df.clone();\n        // [databind#939]: 26-Sep-2015, tatu: With 2.6, formatter has been (pre)configured\n        // with TimeZone, so we should NOT try overriding it unlike with earlier versions\n        /*\n        TimeZone tz \u003d getTimeZone();\n        if (tz !\u003d df.getTimeZone()) {\n            df.setTimeZone(tz);\n        }\n        */\n        return df;\n    }",
    "begin_line": 1411,
    "end_line": 1431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.BaseSettings#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.BaseSettings(com.fasterxml.jackson.databind.introspect.ClassIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.PropertyNamingStrategy, com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e, java.text.DateFormat, com.fasterxml.jackson.databind.cfg.HandlerInstantiator, java.util.Locale, java.util.TimeZone, Base64Variant)",
    "snippet": "public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai,\n            PropertyNamingStrategy pns, TypeFactory tf,\n            TypeResolverBuilder\u003c?\u003e typer, DateFormat dateFormat, HandlerInstantiator hi,\n            Locale locale, TimeZone tz, Base64Variant defaultBase64)\n    {\n        _classIntrospector \u003d ci;\n        _annotationIntrospector \u003d ai;\n        _propertyNamingStrategy \u003d pns;\n        _typeFactory \u003d tf;\n        _typeResolverBuilder \u003d typer;\n        _dateFormat \u003d dateFormat;\n        _handlerInstantiator \u003d hi;\n        _locale \u003d locale;\n        _timeZone \u003d tz;\n        _defaultBase64 \u003d defaultBase64;\n    }",
    "begin_line": 133,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withClassIntrospector#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n        if (_classIntrospector \u003d\u003d ci) {\n            return this;\n        }\n        return new BaseSettings(ci, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 156,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withAnnotationIntrospector#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {\n        if (_annotationIntrospector \u003d\u003d ai) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, ai, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 165,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withInsertedAnnotationIntrospector#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withInsertedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector));\n    }",
    "begin_line": 174,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withAppendedAnnotationIntrospector#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withAppendedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai));\n    }",
    "begin_line": 178,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withPropertyNamingStrategy#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n        if (_propertyNamingStrategy \u003d\u003d pns) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, pns, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 192,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withTypeFactory#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public BaseSettings withTypeFactory(TypeFactory tf) {\n        if (_typeFactory \u003d\u003d tf) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, tf,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 201,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withTypeResolverBuilder#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withTypeResolverBuilder(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public BaseSettings withTypeResolverBuilder(TypeResolverBuilder\u003c?\u003e typer) {\n        if (_typeResolverBuilder \u003d\u003d typer) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,\n                typer, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 210,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withDateFormat#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withDateFormat(java.text.DateFormat)",
    "snippet": "public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat \u003d\u003d df) {\n            return this;\n        }\n        // 26-Sep-2015, tatu: Related to [databind#939], let\u0027s try to force TimeZone if\n        //   (but only if!) it has been set explicitly.\n        if ((df !\u003d null) \u0026\u0026 hasExplicitTimeZone()) {\n            df \u003d _force(df, _timeZone);\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 219,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withHandlerInstantiator#233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n        if (_handlerInstantiator \u003d\u003d hi) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, hi, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 233,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(java.util.Locale)",
    "snippet": "public BaseSettings with(Locale l) {\n        if (_locale \u003d\u003d l) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, l,\n                _timeZone, _defaultBase64);\n    }",
    "begin_line": 242,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(java.util.TimeZone)",
    "snippet": "public BaseSettings with(TimeZone tz)\n    {\n        if (tz \u003d\u003d null) {\n            throw new IllegalArgumentException();\n        }\n        if (tz \u003d\u003d _timeZone) {\n            return this;\n        }\n        \n        DateFormat df \u003d _force(_dateFormat, tz);\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }",
    "begin_line": 256,
    "end_line": 270,
    "comment": "/** \n * Fluent factory for constructing a new instance that uses specified TimeZone. Note that timezone used with also be assigned to configured  {@link DateFormat}, changing time formatting defaults.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(Base64Variant)",
    "snippet": "public BaseSettings with(Base64Variant base64) {\n        if (base64 \u003d\u003d _defaultBase64) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, base64);\n    }",
    "begin_line": 275,
    "end_line": 283,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getClassIntrospector#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getClassIntrospector()",
    "snippet": "public ClassIntrospector getClassIntrospector() {\n        return _classIntrospector;\n    }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getAnnotationIntrospector#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getAnnotationIntrospector()",
    "snippet": "public AnnotationIntrospector getAnnotationIntrospector() {\n        return _annotationIntrospector;\n    }",
    "begin_line": 295,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getPropertyNamingStrategy#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getPropertyNamingStrategy()",
    "snippet": "public PropertyNamingStrategy getPropertyNamingStrategy() {\n        return _propertyNamingStrategy;\n    }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTypeFactory#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTypeFactory()",
    "snippet": "public TypeFactory getTypeFactory() {\n        return _typeFactory;\n    }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTypeResolverBuilder#307",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTypeResolverBuilder()",
    "snippet": "public TypeResolverBuilder\u003c?\u003e getTypeResolverBuilder() {\n        return _typeResolverBuilder;\n    }",
    "begin_line": 307,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getDateFormat#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getDateFormat()",
    "snippet": "public DateFormat getDateFormat() {\n        return _dateFormat;\n    }",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getHandlerInstantiator#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getHandlerInstantiator()",
    "snippet": "public HandlerInstantiator getHandlerInstantiator() {\n        return _handlerInstantiator;\n    }",
    "begin_line": 315,
    "end_line": 317,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getLocale#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getLocale()",
    "snippet": "public Locale getLocale() {\n        return _locale;\n    }",
    "begin_line": 319,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTimeZone#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTimeZone()",
    "snippet": "public TimeZone getTimeZone() {\n        TimeZone tz \u003d _timeZone;\n        return (tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz;\n    }",
    "begin_line": 323,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.hasExplicitTimeZone#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.hasExplicitTimeZone()",
    "snippet": "public boolean hasExplicitTimeZone() {\n        return (_timeZone !\u003d null);\n    }",
    "begin_line": 335,
    "end_line": 337,
    "comment": "/** \n * Accessor that may be called to determine whether this settings object has been explicitly configured with a TimeZone (true), or is still relying on the default settings (false).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getBase64Variant#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getBase64Variant()",
    "snippet": "public Base64Variant getBase64Variant() {\n        return _defaultBase64;\n    }",
    "begin_line": 339,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings._force#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings._force(java.text.DateFormat, java.util.TimeZone)",
    "snippet": "private DateFormat _force(DateFormat df, TimeZone tz)\n    {\n        if (df instanceof StdDateFormat) {\n            return ((StdDateFormat) df).withTimeZone(tz);\n        }\n        // we don\u0027t know if original format might be shared; better create a clone:\n        df \u003d (DateFormat) df.clone();\n        df.setTimeZone(tz);\n        return df;\n    }",
    "begin_line": 349,
    "end_line": 358,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.ConfigOverride#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.ConfigOverride()",
    "snippet": "protected ConfigOverride() { }",
    "begin_line": 64,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.ConfigOverride#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.ConfigOverride(com.fasterxml.jackson.databind.cfg.ConfigOverride)",
    "snippet": "protected ConfigOverride(ConfigOverride src) {\n        _format \u003d src._format;\n        _include \u003d src._include;\n        _ignorals \u003d src._ignorals;\n        _isIgnoredType \u003d src._isIgnoredType;\n        _mergeable \u003d src._mergeable;\n    }",
    "begin_line": 65,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.empty#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.empty()",
    "snippet": "public static ConfigOverride empty() {\n        return Empty.INSTANCE;\n    }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * Accessor for immutable \"empty\" instance that has no configuration overrides defined.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getFormat#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getFormat()",
    "snippet": "public JsonFormat.Value getFormat() { return _format; }",
    "begin_line": 82,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getInclude#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getInclude()",
    "snippet": "public JsonInclude.Value getInclude() { return _include; }",
    "begin_line": 83,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getIgnorals#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getIgnorals()",
    "snippet": "public JsonIgnoreProperties.Value getIgnorals() { return _ignorals; }",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getIsIgnoredType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getIsIgnoredType()",
    "snippet": "public Boolean getIsIgnoredType() {\n        return _isIgnoredType;\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getSetterInfo#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getSetterInfo()",
    "snippet": "public JsonSetter.Value getSetterInfo() { return _setterInfo; }",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getVisibility#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getVisibility()",
    "snippet": "public JsonAutoDetect.Value getVisibility() { return _visibility; }",
    "begin_line": 99,
    "end_line": 99,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getMergeable#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getMergeable()",
    "snippet": "public Boolean getMergeable() { return _mergeable; }",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Empty.Empty#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.Empty()",
    "snippet": "private Empty() { }",
    "begin_line": 115,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.ConfigOverrides#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.ConfigOverrides()",
    "snippet": "public ConfigOverrides() {\n        this(null,\n                // !!! TODO: change to (ALWAYS, ALWAYS)?\n                JsonInclude.Value.empty(),\n                JsonSetter.Value.empty(),\n                VisibilityChecker.Std.defaultInstance(),\n                null\n        );\n    }",
    "begin_line": 52,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.ConfigOverrides#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.ConfigOverrides(java.util.Map\u003cjava.lang.Class\u003c?\u003e,com.fasterxml.jackson.databind.cfg.MutableConfigOverride\u003e, JsonInclude.Value, JsonSetter.Value, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, java.lang.Boolean)",
    "snippet": "protected ConfigOverrides(Map\u003cClass\u003c?\u003e, MutableConfigOverride\u003e overrides,\n            JsonInclude.Value defIncl,\n            JsonSetter.Value defSetter,\n            VisibilityChecker\u003c?\u003e defVisibility,\n            Boolean defMergeable) {\n        _overrides \u003d overrides;\n        _defaultInclusion \u003d defIncl;\n        _defaultSetterInfo \u003d defSetter;\n        _visibilityChecker \u003d defVisibility;\n        _defaultMergeable \u003d defMergeable;\n    }",
    "begin_line": 62,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.copy#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.copy()",
    "snippet": "public ConfigOverrides copy()\n    {\n        Map\u003cClass\u003c?\u003e, MutableConfigOverride\u003e newOverrides;\n        if (_overrides \u003d\u003d null) {\n            newOverrides \u003d null;\n        } else {\n            newOverrides \u003d _newMap();\n            for (Map.Entry\u003cClass\u003c?\u003e, MutableConfigOverride\u003e entry : _overrides.entrySet()) {\n                newOverrides.put(entry.getKey(), entry.getValue().copy());\n            }\n        }\n        return new ConfigOverrides(newOverrides,\n                _defaultInclusion, _defaultSetterInfo, _visibilityChecker, _defaultMergeable);\n    }",
    "begin_line": 74,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.findOverride#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.findOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public ConfigOverride findOverride(Class\u003c?\u003e type) {\n        if (_overrides \u003d\u003d null) {\n            return null;\n        }\n        return _overrides.get(type);\n    }",
    "begin_line": 95,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.findOrCreateOverride#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.findOrCreateOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public MutableConfigOverride findOrCreateOverride(Class\u003c?\u003e type) {\n        if (_overrides \u003d\u003d null) {\n            _overrides \u003d _newMap();\n        }\n        MutableConfigOverride override \u003d _overrides.get(type);\n        if (override \u003d\u003d null) {\n            override \u003d new MutableConfigOverride();\n            _overrides.put(type, override);\n        }\n        return override;\n    }",
    "begin_line": 102,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultInclusion#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultInclusion()",
    "snippet": "public JsonInclude.Value getDefaultInclusion() {\n        return _defaultInclusion;\n    }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultSetterInfo#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultSetterInfo()",
    "snippet": "public JsonSetter.Value getDefaultSetterInfo() {\n        return _defaultSetterInfo;\n    }",
    "begin_line": 124,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultMergeable#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultMergeable()",
    "snippet": "public Boolean getDefaultMergeable() {\n        return _defaultMergeable;\n    }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultVisibility#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultVisibility()",
    "snippet": "public VisibilityChecker\u003c?\u003e getDefaultVisibility() {\n        return _visibilityChecker;\n    }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultInclusion#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultInclusion(JsonInclude.Value)",
    "snippet": "public void setDefaultInclusion(JsonInclude.Value v) {\n        _defaultInclusion \u003d v;\n    }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultSetterInfo#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultSetterInfo(JsonSetter.Value)",
    "snippet": "public void setDefaultSetterInfo(JsonSetter.Value v) {\n        _defaultSetterInfo \u003d v;\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultMergeable#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultMergeable(java.lang.Boolean)",
    "snippet": "public void setDefaultMergeable(Boolean v) {\n        _defaultMergeable \u003d v;\n    }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultVisibility#163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public void setDefaultVisibility(VisibilityChecker\u003c?\u003e v) {\n        _visibilityChecker \u003d v;\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides._newMap#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides._newMap()",
    "snippet": "protected Map\u003cClass\u003c?\u003e, MutableConfigOverride\u003e _newMap() {\n        return new HashMap\u003cClass\u003c?\u003e, MutableConfigOverride\u003e();\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.getEmpty#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
    "snippet": "public static ContextAttributes getEmpty() {\n        return Impl.getEmpty();\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withSharedAttribute#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract ContextAttributes withSharedAttribute(Object key, Object value);",
    "begin_line": 33,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withSharedAttributes#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "public abstract ContextAttributes withSharedAttributes(Map\u003c?,?\u003e attributes);",
    "begin_line": 35,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withoutSharedAttribute#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withoutSharedAttribute(java.lang.Object)",
    "snippet": "public abstract ContextAttributes withoutSharedAttribute(Object key);",
    "begin_line": 37,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.getAttribute#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getAttribute(java.lang.Object)",
    "snippet": "public abstract Object getAttribute(Object key);",
    "begin_line": 48,
    "end_line": 48,
    "comment": "/** \n * Accessor for value of specified attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withPerCallAttribute#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withPerCallAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract ContextAttributes withPerCallAttribute(Object key, Object value);",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * Mutator used during call (via context) to set value of \"non-shared\" part of attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl(java.util.Map\u003c?,?\u003e)",
    "snippet": "protected Impl(Map\u003c?,?\u003e shared) {\n            _shared \u003d shared;\n            _nonShared \u003d null;\n        }",
    "begin_line": 92,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl(java.util.Map\u003c?,?\u003e, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected Impl(Map\u003c?,?\u003e shared, Map\u003cObject,Object\u003e nonShared) {\n            _shared \u003d shared;\n            _nonShared \u003d nonShared;\n        }",
    "begin_line": 97,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.getEmpty#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
    "snippet": "public static ContextAttributes getEmpty() {\n            return EMPTY;\n        }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withSharedAttribute#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override\n        public ContextAttributes withSharedAttribute(Object key, Object value)\n        {\n            Map\u003cObject,Object\u003e m;\n            // need to cover one special case, since EMPTY uses Immutable map:\n            if (this \u003d\u003d EMPTY) {\n                m \u003d new HashMap\u003cObject,Object\u003e(8);\n            } else {\n                m \u003d _copy(_shared);\n            }\n            m.put(key, value);\n            return new Impl(m);\n        }",
    "begin_line": 113,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withSharedAttributes#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "@Override\n        public ContextAttributes withSharedAttributes(Map\u003c?,?\u003e shared) {\n            return new Impl(shared);\n        }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withoutSharedAttribute#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withoutSharedAttribute(java.lang.Object)",
    "snippet": "@Override\n        public ContextAttributes withoutSharedAttribute(Object key)\n        {\n            // first couple of trivial optimizations\n            if (_shared.isEmpty()) {\n                return this;\n            }\n            if (_shared.containsKey(key)) {\n                if (_shared.size() \u003d\u003d 1) {\n                    return EMPTY;\n                }\n            } else { // if we didn\u0027t have it anyway, return as-is\n                return this;\n            }\n            // otherwise make copy, modify\n            Map\u003cObject,Object\u003e m \u003d _copy(_shared);\n            m.remove(key);\n            return new Impl(m);\n        }",
    "begin_line": 132,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.getAttribute#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getAttribute(java.lang.Object)",
    "snippet": "@Override\n        public Object getAttribute(Object key)\n        {\n            if (_nonShared !\u003d null) {\n                Object ob \u003d _nonShared.get(key);\n                if (ob !\u003d null) {\n                    if (ob \u003d\u003d NULL_SURROGATE) {\n                        return null;\n                    }\n                    return ob;\n                }\n            }\n            return _shared.get(key);\n        }",
    "begin_line": 158,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withPerCallAttribute#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withPerCallAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override\n        public ContextAttributes withPerCallAttribute(Object key, Object value)\n        {\n            // First: null value may need masking\n            if (value \u003d\u003d null) {\n                // need to mask nulls to ensure default values won\u0027t be showing\n                if (_shared.containsKey(key)) {\n                    value \u003d NULL_SURROGATE;\n                } else if ((_nonShared \u003d\u003d null) || !_nonShared.containsKey(key)) {\n                    // except if non-mutable shared list has no entry, we don\u0027t care\n                    return this;\n                } else {\n                    _nonShared.remove(key);\n                    return this;\n                }\n            }\n            // a special case: create non-shared instance if need be\n            if (_nonShared \u003d\u003d null) {\n                return nonSharedInstance(key, value);\n            }\n            _nonShared.put(key, value);\n            return this;\n        }",
    "begin_line": 173,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.nonSharedInstance#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.nonSharedInstance(java.lang.Object, java.lang.Object)",
    "snippet": "protected ContextAttributes nonSharedInstance(Object key, Object value)\n        {\n            Map\u003cObject,Object\u003e m \u003d new HashMap\u003cObject,Object\u003e();\n            if (value \u003d\u003d null) {\n                value \u003d NULL_SURROGATE;\n            }\n            m.put(key, value);\n            return new Impl(_shared, m);\n        }",
    "begin_line": 206,
    "end_line": 214,
    "comment": "/** \n * Overridable method that creates initial non-shared instance, with the first explicit set value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl._copy#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes._copy(java.util.Map\u003c?,?\u003e)",
    "snippet": "private Map\u003cObject,Object\u003e _copy(Map\u003c?,?\u003e src)\n        {\n            return new HashMap\u003cObject,Object\u003e(src);\n        }",
    "begin_line": 216,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.DeserializerFactoryConfig#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.DeserializerFactoryConfig()",
    "snippet": "public DeserializerFactoryConfig() {\n        this(null, null, null, null, null);\n    }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Constructor for creating basic configuration with no additional handlers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.DeserializerFactoryConfig#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.DeserializerFactoryConfig(com.fasterxml.jackson.databind.deser.Deserializers[], com.fasterxml.jackson.databind.deser.KeyDeserializers[], com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[], com.fasterxml.jackson.databind.AbstractTypeResolver[], com.fasterxml.jackson.databind.deser.ValueInstantiators[])",
    "snippet": "protected DeserializerFactoryConfig(Deserializers[] allAdditionalDeserializers,\n            KeyDeserializers[] allAdditionalKeyDeserializers,\n            BeanDeserializerModifier[] modifiers,\n            AbstractTypeResolver[] atr,\n            ValueInstantiators[] vi)\n    {\n        _additionalDeserializers \u003d (allAdditionalDeserializers \u003d\u003d null) ?\n                NO_DESERIALIZERS : allAdditionalDeserializers;\n        _additionalKeyDeserializers \u003d (allAdditionalKeyDeserializers \u003d\u003d null) ?\n                DEFAULT_KEY_DESERIALIZERS : allAdditionalKeyDeserializers;\n        _modifiers \u003d (modifiers \u003d\u003d null) ? NO_MODIFIERS : modifiers;\n        _abstractTypeResolvers \u003d (atr \u003d\u003d null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr;\n        _valueInstantiators \u003d (vi \u003d\u003d null) ? NO_VALUE_INSTANTIATORS : vi;\n    }",
    "begin_line": 78,
    "end_line": 91,
    "comment": "/** \n * Copy-constructor that will create an instance that contains defined set of additional deserializer providers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAdditionalDeserializers#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "public DeserializerFactoryConfig withAdditionalDeserializers(Deserializers additional)\n    {\n        if (additional \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null Deserializers\");\n        }\n        Deserializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional);\n        return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers,\n                _abstractTypeResolvers, _valueInstantiators);\n    }",
    "begin_line": 99,
    "end_line": 107,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same deserializer providers as this instance, plus one specified as argument. Additional provider will be added before existing ones, meaning it has priority over existing definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAdditionalKeyDeserializers#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "public DeserializerFactoryConfig withAdditionalKeyDeserializers(KeyDeserializers additional)\n    {\n        if (additional \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null KeyDeserializers\");\n        }\n        KeyDeserializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional);\n        return new DeserializerFactoryConfig(_additionalDeserializers, all, _modifiers,\n                _abstractTypeResolvers, _valueInstantiators);\n    }",
    "begin_line": 115,
    "end_line": 123,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same key deserializer providers as this instance, plus one specified as argument. Additional provider will be added before existing ones, meaning it has priority over existing definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withDeserializerModifier#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "public DeserializerFactoryConfig withDeserializerModifier(BeanDeserializerModifier modifier)\n    {\n        if (modifier \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null modifier\");\n        }\n        BeanDeserializerModifier[] all \u003d ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, all,\n                _abstractTypeResolvers, _valueInstantiators);\n    }",
    "begin_line": 131,
    "end_line": 139,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus one additional deserialiazer modifier. Added modifier has the highest priority (that is, it gets called before any already registered modifier).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAbstractTypeResolver#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "public DeserializerFactoryConfig withAbstractTypeResolver(AbstractTypeResolver resolver)\n    {\n        if (resolver \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null resolver\");\n        }\n        AbstractTypeResolver[] all \u003d ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver);\n        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n                all, _valueInstantiators);\n    }",
    "begin_line": 148,
    "end_line": 156,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus one additional abstract type resolver. Added resolver has the highest priority (that is, it gets called before any already registered resolver).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withValueInstantiators#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "public DeserializerFactoryConfig withValueInstantiators(ValueInstantiators instantiators) \n    {\n        if (instantiators \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null resolver\");\n        }\n        ValueInstantiators[] all \u003d ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators);\n        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n                _abstractTypeResolvers, all);\n    }",
    "begin_line": 168,
    "end_line": 176,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus specified additional value instantiator provider object. Added instantiator provider has the highest priority (that is, it gets called before any already registered resolver).\n * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for constructing POJO values during deserialization\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasDeserializers#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasDeserializers()",
    "snippet": "public boolean hasDeserializers() { return _additionalDeserializers.length \u003e 0; }",
    "begin_line": 178,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasKeyDeserializers#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasKeyDeserializers()",
    "snippet": "public boolean hasKeyDeserializers() { return _additionalKeyDeserializers.length \u003e 0; }",
    "begin_line": 180,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasDeserializerModifiers#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasDeserializerModifiers()",
    "snippet": "public boolean hasDeserializerModifiers() { return _modifiers.length \u003e 0; }",
    "begin_line": 182,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasAbstractTypeResolvers#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasAbstractTypeResolvers()",
    "snippet": "public boolean hasAbstractTypeResolvers() { return _abstractTypeResolvers.length \u003e 0; }",
    "begin_line": 184,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasValueInstantiators#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasValueInstantiators()",
    "snippet": "public boolean hasValueInstantiators() { return _valueInstantiators.length \u003e 0; }",
    "begin_line": 186,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.deserializers#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.deserializers()",
    "snippet": "public Iterable\u003cDeserializers\u003e deserializers() {\n        return new ArrayIterator\u003cDeserializers\u003e(_additionalDeserializers);\n    }",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.keyDeserializers#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.keyDeserializers()",
    "snippet": "public Iterable\u003cKeyDeserializers\u003e keyDeserializers() {\n        return new ArrayIterator\u003cKeyDeserializers\u003e(_additionalKeyDeserializers);\n    }",
    "begin_line": 192,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.deserializerModifiers#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.deserializerModifiers()",
    "snippet": "public Iterable\u003cBeanDeserializerModifier\u003e deserializerModifiers() {\n        return new ArrayIterator\u003cBeanDeserializerModifier\u003e(_modifiers);\n    }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.abstractTypeResolvers#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.abstractTypeResolvers()",
    "snippet": "public Iterable\u003cAbstractTypeResolver\u003e abstractTypeResolvers() {\n        return new ArrayIterator\u003cAbstractTypeResolver\u003e(_abstractTypeResolvers);\n    }",
    "begin_line": 200,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.valueInstantiators#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.valueInstantiators()",
    "snippet": "public Iterable\u003cValueInstantiators\u003e valueInstantiators() {\n        return new ArrayIterator\u003cValueInstantiators\u003e(_valueInstantiators);\n    }",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, int)",
    "snippet": "protected MapperConfig(BaseSettings base, int mapperFeatures)\n    {\n        _base \u003d base;\n        _mapperFeatures \u003d mapperFeatures;\n    }",
    "begin_line": 68,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e, int)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src, int mapperFeatures)\n    {\n        _base \u003d src._base;\n        _mapperFeatures \u003d mapperFeatures;\n    }",
    "begin_line": 74,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src, BaseSettings base)\n    {\n        _base \u003d base;\n        _mapperFeatures \u003d src._mapperFeatures;\n    }",
    "begin_line": 80,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src)\n    {\n        _base \u003d src._base;\n        _mapperFeatures \u003d src._mapperFeatures;\n    }",
    "begin_line": 86,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.collectFeatureDefaults#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.collectFeatureDefaults(java.lang.Class\u003cF\u003e)",
    "snippet": "public static \u003cF extends Enum\u003cF\u003e \u0026 ConfigFeature\u003e int collectFeatureDefaults(Class\u003cF\u003e enumClass)\n    {\n        int flags \u003d 0;\n        for (F value : enumClass.getEnumConstants()) {\n            if (value.enabledByDefault()) {\n                flags |\u003d value.getMask();\n            }\n        }\n        return flags;\n    }",
    "begin_line": 96,
    "end_line": 105,
    "comment": "/** \n * Method that calculates bit set (flags) of all features that are enabled by default.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.with#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract T with(MapperFeature... features);",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * Method for constructing and returning a new instance with specified mapper features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.without#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.without(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract T without(MapperFeature... features);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Method for constructing and returning a new instance with specified mapper features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.with#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "public abstract T with(MapperFeature feature, boolean state);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.isEnabled#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public final boolean isEnabled(MapperFeature f) {\n        return (_mapperFeatures \u0026 f.getMask()) !\u003d 0;\n    }",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Accessor for simple mapper features (which are shared for serialization, deserialization)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.hasMapperFeatures#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures(int)",
    "snippet": "public final boolean hasMapperFeatures(int featureMask) {\n        return (_mapperFeatures \u0026 featureMask) \u003d\u003d featureMask;\n    }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.isAnnotationProcessingEnabled#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled()",
    "snippet": "public final boolean isAnnotationProcessingEnabled() {\n        return isEnabled(MapperFeature.USE_ANNOTATIONS);\n    }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "/** \n * Method for determining whether annotation processing is enabled or not (default settings are typically that it is enabled; must explicitly disable).\n * @return True if annotation processing is enabled; false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.canOverrideAccessModifiers#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers()",
    "snippet": "public final boolean canOverrideAccessModifiers() {\n        return isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n    }",
    "begin_line": 175,
    "end_line": 177,
    "comment": "/** \n * Accessor for determining whether it is ok to try to force override of access modifiers to be able to get or set values of non-public Methods, Fields; to invoke non-public Constructors, Methods; or to instantiate non-public Classes. By default this is enabled, but on some platforms it needs to be prevented since if this would violate security constraints and cause failures.\n * @return True if access modifier overriding is allowed (and may be done forany Field, Method, Constructor or Class); false to prevent any attempts to override.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.shouldSortPropertiesAlphabetically#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically()",
    "snippet": "public final boolean shouldSortPropertiesAlphabetically() {\n        return isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);\n    }",
    "begin_line": 183,
    "end_line": 185,
    "comment": "/** \n * Accessor for checking whether default settings for property handling indicate that properties should be alphabetically ordered or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.useRootWrapping#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping()",
    "snippet": "public abstract boolean useRootWrapping();",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * Accessor for checking whether configuration indicates that \"root wrapping\" (use of an extra property/name pair at root level) is expected or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.compileString#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.compileString(java.lang.String)",
    "snippet": "public SerializableString compileString(String src) {\n        /* 20-Jan-2014, tatu: For now we will just construct it directly, but\n         *    for 2.4 need to allow overriding to support non-standard extensions\n         *    to be used by extensions like Afterburner.\n         */\n        return new SerializedString(src);\n    }",
    "begin_line": 211,
    "end_line": 217,
    "comment": "/** \n * Method for constructing a specialized textual object that can typically be serialized faster than basic  {@link java.lang.String} (dependingon escaping needed if any, char-to-byte encoding if needed).\n * @param src Text to represent\n * @return Optimized text object constructed\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getClassIntrospector#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector()",
    "snippet": "public ClassIntrospector getClassIntrospector() {\n        return _base.getClassIntrospector();\n    }",
    "begin_line": 225,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getAnnotationIntrospector#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()",
    "snippet": "public AnnotationIntrospector getAnnotationIntrospector() {\n        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n            return _base.getAnnotationIntrospector();\n        }\n        return NopAnnotationIntrospector.instance;\n    }",
    "begin_line": 235,
    "end_line": 240,
    "comment": "/** \n * Method for getting  {@link AnnotationIntrospector} configuredto introspect annotation values used for configuration. \u003cp\u003e Non-final since it is actually overridden by sub-classes (for now?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getPropertyNamingStrategy#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy()",
    "snippet": "public final PropertyNamingStrategy getPropertyNamingStrategy() {\n        return _base.getPropertyNamingStrategy();\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getHandlerInstantiator#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator()",
    "snippet": "public final HandlerInstantiator getHandlerInstantiator() {\n        return _base.getHandlerInstantiator();\n    }",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultTyper#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final TypeResolverBuilder\u003c?\u003e getDefaultTyper(JavaType baseType) {\n        return _base.getTypeResolverBuilder();\n    }",
    "begin_line": 262,
    "end_line": 264,
    "comment": "/** \n * Method called to locate a type info handler for types that do not have one explicitly declared via annotations (or other configuration). If such default handler is configured, it is returned; otherwise null is returned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getSubtypeResolver#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver()",
    "snippet": "public abstract SubtypeResolver getSubtypeResolver();",
    "begin_line": 266,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getTypeFactory#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()",
    "snippet": "public final TypeFactory getTypeFactory() {\n        return _base.getTypeFactory();\n    }",
    "begin_line": 268,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructType#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JavaType constructType(Class\u003c?\u003e cls) {\n        return getTypeFactory().constructType(cls);\n    }",
    "begin_line": 280,
    "end_line": 282,
    "comment": "/** \n * Helper method that will construct  {@link JavaType} for givenraw class. This is a simple short-cut for: \u003cpre\u003e getTypeFactory().constructType(cls); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructType#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(TypeReference\u003c?\u003e)",
    "snippet": "public final JavaType constructType(TypeReference\u003c?\u003e valueTypeRef) {\n        return getTypeFactory().constructType(valueTypeRef.getType());\n    }",
    "begin_line": 292,
    "end_line": 294,
    "comment": "/** \n * Helper method that will construct  {@link JavaType} for giventype reference This is a simple short-cut for: \u003cpre\u003e getTypeFactory().constructType(valueTypeRef); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructSpecializedType#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType, Class\u003c?\u003e subclass) {\n        return getTypeFactory().constructSpecializedType(baseType, subclass);\n    }",
    "begin_line": 296,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectClassAnnotations#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public BeanDescription introspectClassAnnotations(Class\u003c?\u003e cls) {\n        return introspectClassAnnotations(constructType(cls));\n    }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "/** \n * Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectClassAnnotations#318",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public BeanDescription introspectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forClassAnnotations(this, type, this);\n    }",
    "begin_line": 318,
    "end_line": 320,
    "comment": "/** \n * Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectDirectClassAnnotations#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public BeanDescription introspectDirectClassAnnotations(Class\u003c?\u003e cls) {\n        return introspectDirectClassAnnotations(constructType(cls));\n    }",
    "begin_line": 327,
    "end_line": 329,
    "comment": "/** \n * Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectDirectClassAnnotations#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final BeanDescription introspectDirectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n    }",
    "begin_line": 336,
    "end_line": 338,
    "comment": "/** \n * Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findConfigOverride#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract ConfigOverride findConfigOverride(Class\u003c?\u003e type);",
    "begin_line": 357,
    "end_line": 357,
    "comment": "/** \n * Accessor for finding  {@link ConfigOverride} to use forproperties of given type, if any exist; or return `null` if not. \u003cp\u003e Note that only directly associated override is found; no type hierarchy traversal is performed.\n * @since 2.8\n * @return Override object to use for the type, if defined; null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getConfigOverride#371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract ConfigOverride getConfigOverride(Class\u003c?\u003e type);",
    "begin_line": 371,
    "end_line": 371,
    "comment": "/** \n * Accessor for finding  {@link ConfigOverride} to use forproperties of given type, if any exist; or if none, return an immutable \"empty\" instance with no overrides. \u003cp\u003e Note that only directly associated override is found; no type hierarchy traversal is performed.\n * @since 2.9\n * @return Override object to use for the type, never null (but may be empty)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()",
    "snippet": "public abstract JsonInclude.Value getDefaultPropertyInclusion();",
    "begin_line": 379,
    "end_line": 379,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, used unless overridden by per-type or per-property overrides.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType);",
    "begin_line": 389,
    "end_line": 389,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type.\u003cbr\u003e NOTE: if no override found, defaults to value returned by {@link #getDefaultPropertyInclusion()}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#400",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e, JsonInclude.Value)",
    "snippet": "public JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType,\n            JsonInclude.Value defaultIncl)\n    {\n        JsonInclude.Value v \u003d getConfigOverride(baseType).getInclude();\n        if (v !\u003d null) {\n            return v;\n        }\n        return defaultIncl;\n    }",
    "begin_line": 400,
    "end_line": 408,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type; but if none found, returning given \u003ccode\u003edefaultIncl\u003c/code\u003e\n * @param defaultIncl Inclusion setting to return if no overrides found.\n * @since 2.8.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyFormat#417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType);",
    "begin_line": 417,
    "end_line": 417,
    "comment": "/** \n * Accessor for default format settings to use for serialization (and, to a degree deserialization), considering baseline settings and per-type defaults for given base type (if any).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyIgnorals#425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType);",
    "begin_line": 425,
    "end_line": 425,
    "comment": "/** \n * Accessor for default property ignorals to use, if any, for given base type, based on config overrides settings (see  {@link #findConfigOverride(Class)}).\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyIgnorals#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType,\n            AnnotatedClass actualClass);",
    "begin_line": 435,
    "end_line": 436,
    "comment": "/** \n * Helper method that may be called to see if there are property ignoral definitions from annotations (via  {@link AnnotatedClass}) or through \"config overrides\". If both exist, config overrides have precedence over class annotations.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultVisibilityChecker#447",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()",
    "snippet": "public abstract VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker();",
    "begin_line": 447,
    "end_line": 447,
    "comment": "/** \n * Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). Can be changed to allow different minimum visibility levels for auto-detection. Note that this is the global handler; individual types (classes) can further override active checker used (using {@link JsonAutoDetect} annotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultVisibilityChecker#459",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public abstract VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker(Class\u003c?\u003e baseType,\n            AnnotatedClass actualClass);",
    "begin_line": 459,
    "end_line": 460,
    "comment": "/** \n * Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). This is based on global defaults (as would be returned by  {@link #getDefaultVisibilityChecker()}, but then modified by possible class annotation (see  {@link JsonAutoDetect}) and/or per-type config override (see  {@link ConfigOverride#getVisibility()}).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultSetterInfo#470",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo()",
    "snippet": "public abstract JsonSetter.Value getDefaultSetterInfo();",
    "begin_line": 470,
    "end_line": 470,
    "comment": "/** \n * Accessor for the baseline setter info used as the global baseline, not considering possible per-type overrides.\n * @return Global base settings; never null\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultMergeable#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable()",
    "snippet": "public abstract Boolean getDefaultMergeable();",
    "begin_line": 480,
    "end_line": 480,
    "comment": "/** \n * Accessor for the baseline merge info used as the global baseline, not considering possible per-type overrides.\n * @return Global base settings; never null\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDateFormat#504",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat()",
    "snippet": "public final DateFormat getDateFormat() { return _base.getDateFormat(); }",
    "begin_line": 504,
    "end_line": 504,
    "comment": "/** \n * Method for accessing currently configured (textual) date format that will be used for reading or writing date values (in case of writing, only if textual output is configured; not if dates are to be serialized as time stamps). \u003cp\u003e Note that typically  {@link DateFormat} instances are \u003cb\u003enot thread-safe\u003c/b\u003e(at least ones provided by JDK): this means that calling code should clone format instance before using it. \u003cp\u003e This method is usually only called by framework itself, since there are convenience methods available via {@link DeserializationContext} and {@link SerializerProvider} thattake care of cloning and thread-safe reuse.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getLocale#511",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale()",
    "snippet": "public final Locale getLocale() { return _base.getLocale(); }",
    "begin_line": 511,
    "end_line": 511,
    "comment": "/** \n * Method for accessing the default  {@link java.util.Locale} to usefor formatting, unless overridden by local annotations. Initially set to  {@link Locale#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getTimeZone#518",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone()",
    "snippet": "public final TimeZone getTimeZone() { return _base.getTimeZone(); }",
    "begin_line": 518,
    "end_line": 518,
    "comment": "/** \n * Method for accessing the default  {@link java.util.TimeZone} to usefor formatting, unless overridden by local annotations. Initially set to  {@link TimeZone#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getActiveView#523",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView()",
    "snippet": "public abstract Class\u003c?\u003e getActiveView();",
    "begin_line": 523,
    "end_line": 523,
    "comment": "/** \n * Accessor for finding currently active view, if any (null if none)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getBase64Variant#532",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant()",
    "snippet": "public Base64Variant getBase64Variant() {\n        return _base.getBase64Variant();\n    }",
    "begin_line": 532,
    "end_line": 534,
    "comment": "/** \n * Method called during deserialization if Base64 encoded content needs to be decoded. Default version just returns default Jackson uses, which is modified-mime which does not add linefeeds (because those would have to be escaped in JSON strings); but this can be configured on  {@link ObjectWriter}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getAttributes#543",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes()",
    "snippet": "public abstract ContextAttributes getAttributes();",
    "begin_line": 543,
    "end_line": 543,
    "comment": "/** \n * Method for accessing per-instance shared (baseline/default) attribute values; these are used as the basis for per-call attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findRootName#548",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract PropertyName findRootName(JavaType rootType);",
    "begin_line": 548,
    "end_line": 548,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findRootName#553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract PropertyName findRootName(Class\u003c?\u003e rawRootType);",
    "begin_line": 553,
    "end_line": 553,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.typeResolverBuilderInstance#565",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e\u003e)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e typeResolverBuilderInstance(Annotated annotated,\n            Class\u003c? extends TypeResolverBuilder\u003c?\u003e\u003e builderClass)\n    {\n        HandlerInstantiator hi \u003d getHandlerInstantiator();\n        if (hi !\u003d null) {\n            TypeResolverBuilder\u003c?\u003e builder \u003d hi.typeResolverBuilderInstance(this, annotated, builderClass);\n            if (builder !\u003d null) {\n                return builder;\n            }\n        }\n        return (TypeResolverBuilder\u003c?\u003e) ClassUtil.createInstance(builderClass, canOverrideAccessModifiers());\n    }",
    "begin_line": 565,
    "end_line": 576,
    "comment": "/** \n * Method that can be called to obtain an instance of \u003ccode\u003eTypeIdResolver\u003c/code\u003e of specified type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.typeIdResolverInstance#582",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver\u003e)",
    "snippet": "public TypeIdResolver typeIdResolverInstance(Annotated annotated,\n            Class\u003c? extends TypeIdResolver\u003e resolverClass)\n    {\n        HandlerInstantiator hi \u003d getHandlerInstantiator();\n        if (hi !\u003d null) {\n            TypeIdResolver builder \u003d hi.typeIdResolverInstance(this, annotated, resolverClass);\n            if (builder !\u003d null) {\n                return builder;\n            }\n        }\n        return (TypeIdResolver) ClassUtil.createInstance(resolverClass, canOverrideAccessModifiers());\n    }",
    "begin_line": 582,
    "end_line": 593,
    "comment": "/** \n * Method that can be called to obtain an instance of \u003ccode\u003eTypeIdResolver\u003c/code\u003e of specified type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected MapperConfigBase(BaseSettings base,\n            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(base, DEFAULT_MAPPER_FEATURES);\n        _mixIns \u003d mixins;\n        _subtypeResolver \u003d str;\n        _rootNames \u003d rootNames;\n        _rootName \u003d null;\n        _view \u003d null;\n        // default to \"no attributes\"\n        _attributes \u003d ContextAttributes.getEmpty();\n        _configOverrides \u003d configOverrides;\n    }",
    "begin_line": 121,
    "end_line": 134,
    "comment": "/** \n * Constructor used when creating a new instance (compared to that of creating fluent copies)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,\n            SimpleMixInResolver mixins, RootNameLookup rootNames,\n            ConfigOverrides configOverrides)\n    {\n        super(src);\n        _mixIns \u003d mixins;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d configOverrides;\n    }",
    "begin_line": 139,
    "end_line": 151,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src)\n    {\n        super(src);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 157,
    "end_line": 167,
    "comment": "/** \n * Pass-through constructor used when no changes are needed to the base class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, BaseSettings base)\n    {\n        super(src, base);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 169,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#181",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, int)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, int mapperFeatures)\n    {\n        super(src, mapperFeatures);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 181,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, SubtypeResolver str) {\n        super(src);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d str;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 193,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, PropertyName rootName) {\n        super(src);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 204,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, Class\u003c?\u003e view)\n    {\n        super(src);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 215,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#230",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, SimpleMixInResolver mixins)\n    {\n        super(src);\n        _mixIns \u003d mixins;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d src._attributes;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 230,
    "end_line": 240,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src, ContextAttributes attr)\n    {\n        super(src);\n        _mixIns \u003d src._mixIns;\n        _subtypeResolver \u003d src._subtypeResolver;\n        _rootNames \u003d src._rootNames;\n        _rootName \u003d src._rootName;\n        _view \u003d src._view;\n        _attributes \u003d attr;\n        _configOverrides \u003d src._configOverrides;\n    }",
    "begin_line": 245,
    "end_line": 255,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase._withBase#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected abstract T _withBase(BaseSettings newBase);",
    "begin_line": 266,
    "end_line": 266,
    "comment": "/** \n * @since 2.9 (in this case, demoted from sub-classes)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase._withMapperFeatures#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase._withMapperFeatures(int)",
    "snippet": "protected abstract T _withMapperFeatures(int mapperFeatures);",
    "begin_line": 271,
    "end_line": 271,
    "comment": "/** \n * @since 2.9 (in this case, demoted from sub-classes)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public final T with(MapperFeature... features)\n    {\n        int newMapperFlags \u003d _mapperFeatures;\n        for (MapperFeature f : features) {\n            newMapperFlags |\u003d f.getMask();\n        }\n        if (newMapperFlags \u003d\u003d _mapperFeatures) {\n            return (T) this;\n        }\n        return _withMapperFeatures(newMapperFlags);\n    }",
    "begin_line": 285,
    "end_line": 295,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.without#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.without(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public final T without(MapperFeature... features)\n    {\n        int newMapperFlags \u003d _mapperFeatures;\n        for (MapperFeature f : features) {\n             newMapperFlags \u0026\u003d ~f.getMask();\n        }\n        if (newMapperFlags \u003d\u003d _mapperFeatures) {\n            return (T) this;\n        }\n        return _withMapperFeatures(newMapperFlags);\n    }",
    "begin_line": 303,
    "end_line": 313,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#317",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public final T with(MapperFeature feature, boolean state)\n    {\n        int newMapperFlags;\n        if (state) {\n            newMapperFlags \u003d _mapperFeatures | feature.getMask();\n        } else {\n            newMapperFlags \u003d _mapperFeatures \u0026 ~feature.getMask();\n        }\n        if (newMapperFlags \u003d\u003d _mapperFeatures) {\n            return (T) this;\n        }\n        return _withMapperFeatures(newMapperFlags);\n    }",
    "begin_line": 317,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T with(AnnotationIntrospector ai) {\n        return _withBase(_base.withAnnotationIntrospector(ai));\n    }",
    "begin_line": 344,
    "end_line": 346,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link AnnotationIntrospector} to use (replacing old one).\u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAppendedAnnotationIntrospector#352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAppendedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n    }",
    "begin_line": 352,
    "end_line": 354,
    "comment": "/** \n * Method for constructing and returning a new instance with additional {@link AnnotationIntrospector} appended (as the lowest priority one)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withInsertedAnnotationIntrospector#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withInsertedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n    }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Method for constructing and returning a new instance with additional {@link AnnotationIntrospector} inserted (as the highest priority one)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "public final T with(ClassIntrospector ci) {\n        return _withBase(_base.withClassIntrospector(ci));\n    }",
    "begin_line": 372,
    "end_line": 374,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link ClassIntrospector}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public abstract T with(ContextAttributes attrs);",
    "begin_line": 388,
    "end_line": 388,
    "comment": "/** \n * Method for constructing an instance that has specified contextual attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAttributes#396",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "public T withAttributes(Map\u003c?,?\u003e attributes) {\n        return with(getAttributes().withSharedAttributes(attributes));\n    }",
    "begin_line": 396,
    "end_line": 398,
    "comment": "/** \n * Method for constructing an instance that has only specified attributes, removing any attributes that exist before the call.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAttribute#406",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public T withAttribute(Object key, Object value) {\n        return with(getAttributes().withSharedAttribute(key, value));\n    }",
    "begin_line": 406,
    "end_line": 408,
    "comment": "/** \n * Method for constructing an instance that has specified value for attribute for given key.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withoutAttribute#416",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withoutAttribute(java.lang.Object)",
    "snippet": "public T withoutAttribute(Object key) {\n        return with(getAttributes().withoutSharedAttribute(key));\n    }",
    "begin_line": 416,
    "end_line": 418,
    "comment": "/** \n * Method for constructing an instance that has no value for attribute for given key.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public final T with(TypeFactory tf) {\n        return _withBase( _base.withTypeFactory(tf));\n    }",
    "begin_line": 431,
    "end_line": 433,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link TypeFactory}to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#439",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public final T with(TypeResolverBuilder\u003c?\u003e trb) {\n        return _withBase(_base.withTypeResolverBuilder(trb));\n    }",
    "begin_line": 439,
    "end_line": 441,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link TypeResolverBuilder} to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#451",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public final T with(PropertyNamingStrategy pns) {\n        return _withBase(_base.withPropertyNamingStrategy(pns));\n    }",
    "begin_line": 451,
    "end_line": 453,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link PropertyNamingStrategy}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#463",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public final T with(HandlerInstantiator hi) {\n        return _withBase(_base.withHandlerInstantiator(hi));\n    }",
    "begin_line": 463,
    "end_line": 465,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link HandlerInstantiator}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(Base64Variant)",
    "snippet": "public final T with(Base64Variant base64) {\n        return _withBase(_base.with(base64));\n    }",
    "begin_line": 477,
    "end_line": 479,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link Base64Variant} to use with base64-encoded binary values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.text.DateFormat)",
    "snippet": "public T with(DateFormat df) {\n        return _withBase(_base.withDateFormat(df));\n    }",
    "begin_line": 488,
    "end_line": 490,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link DateFormat}to use. \u003cp\u003e NOTE: non-final since \u003ccode\u003eSerializationConfig\u003c/code\u003e needs to override this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.util.Locale)",
    "snippet": "public final T with(Locale l) {\n        return _withBase(_base.with(l));\n    }",
    "begin_line": 496,
    "end_line": 498,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link java.util.Locale} to use for formatting.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#504",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.util.TimeZone)",
    "snippet": "public final T with(TimeZone tz) {\n        return _withBase(_base.with(tz));\n    }",
    "begin_line": 504,
    "end_line": 506,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link java.util.TimeZone} to use for formatting of date values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withRootName#524",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public abstract T withRootName(PropertyName rootName);",
    "begin_line": 524,
    "end_line": 524,
    "comment": "/** \n * Method for constructing and returning a new instance with different root name to use (none, if null). \u003cp\u003e Note that when a root name is set to a non-Empty String, this will automatically force use of root element wrapping with given name. If empty String passed, will disable root name wrapping; and if null used, will instead use \u003ccode\u003eSerializationFeature\u003c/code\u003e to determine if to use wrapping, and annotation (or default name) for actual root name to use.\n * @param rootName to use: if null, means \"use default\" (clear setting);if empty String (\"\") means that no root name wrapping is used; otherwise defines root name to use.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withRootName#526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withRootName(java.lang.String)",
    "snippet": "public T withRootName(String rootName) {\n        if (rootName \u003d\u003d null) {\n            return withRootName((PropertyName) null);\n        }\n        return withRootName(PropertyName.construct(rootName));\n    }",
    "begin_line": 526,
    "end_line": 531,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "public abstract T with(SubtypeResolver str);",
    "begin_line": 541,
    "end_line": 541,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link SubtypeResolver}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withView#547",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract T withView(Class\u003c?\u003e view);",
    "begin_line": 547,
    "end_line": 547,
    "comment": "/** \n * Method for constructing and returning a new instance with different view to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getSubtypeResolver#561",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getSubtypeResolver()",
    "snippet": "@Override\n    public final SubtypeResolver getSubtypeResolver() {\n        return _subtypeResolver;\n    }",
    "begin_line": 561,
    "end_line": 563,
    "comment": "/** \n * Accessor for object used for finding out all reachable subtypes for supertypes; needed when a logical type name is used instead of class name (or custom scheme).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getRootName#569",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getRootName()",
    "snippet": "@Deprecated getRootName() {\n        return (_rootName \u003d\u003d null) ? null : _rootName.getSimpleName();\n    }",
    "begin_line": 569,
    "end_line": 571,
    "comment": "/** \n * @deprecated Since 2.6 use {@link #getFullRootName} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getFullRootName#576",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getFullRootName()",
    "snippet": "public final PropertyName getFullRootName() {\n        return _rootName;\n    }",
    "begin_line": 576,
    "end_line": 578,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getActiveView#581",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getActiveView()",
    "snippet": "@Override\n    public final Class\u003c?\u003e getActiveView() {\n        return _view;\n    }",
    "begin_line": 581,
    "end_line": 583,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getAttributes#586",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getAttributes()",
    "snippet": "@Override\n    public final ContextAttributes getAttributes() {\n        return _attributes;\n    }",
    "begin_line": 586,
    "end_line": 588,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getConfigOverride#597",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final ConfigOverride getConfigOverride(Class\u003c?\u003e type) {\n        ConfigOverride override \u003d _configOverrides.findOverride(type);\n        return (override \u003d\u003d null) ? EMPTY_OVERRIDE : override;\n    }",
    "begin_line": 597,
    "end_line": 600,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findConfigOverride#603",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final ConfigOverride findConfigOverride(Class\u003c?\u003e type) {\n        return _configOverrides.findOverride(type);\n    }",
    "begin_line": 603,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyInclusion#608",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyInclusion()",
    "snippet": "@Override\n    public final JsonInclude.Value getDefaultPropertyInclusion() {\n        return _configOverrides.getDefaultInclusion();\n    }",
    "begin_line": 608,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyInclusion#613",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType) {\n        JsonInclude.Value v \u003d getConfigOverride(baseType).getInclude();\n        JsonInclude.Value def \u003d getDefaultPropertyInclusion();\n        if (def \u003d\u003d null) {\n            return v;\n        }\n        return def.withOverrides(v);\n    }",
    "begin_line": 613,
    "end_line": 620,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyFormat#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e type) {\n        ConfigOverride overrides \u003d _configOverrides.findOverride(type);\n        if (overrides !\u003d null) {\n            JsonFormat.Value v \u003d overrides.getFormat();\n            if (v !\u003d null) {\n                return v;\n            }\n        }\n        return EMPTY_FORMAT;\n    }",
    "begin_line": 623,
    "end_line": 632,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyIgnorals#635",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e type) {\n        ConfigOverride overrides \u003d _configOverrides.findOverride(type);\n        if (overrides !\u003d null) {\n            JsonIgnoreProperties.Value v \u003d overrides.getIgnorals();\n            if (v !\u003d null) {\n                return v;\n            }\n        }\n        // 01-May-2015, tatu: Could return `Value.empty()` but for now `null`\n        //   seems simpler as callers can avoid processing.\n        return null;\n    }",
    "begin_line": 635,
    "end_line": 646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyIgnorals#649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public final JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType,\n            AnnotatedClass actualClass)\n    {\n        AnnotationIntrospector intr \u003d getAnnotationIntrospector();\n        JsonIgnoreProperties.Value base \u003d (intr \u003d\u003d null) ? null\n                : intr.findPropertyIgnorals(actualClass);\n        JsonIgnoreProperties.Value overrides \u003d getDefaultPropertyIgnorals(baseType);\n        return JsonIgnoreProperties.Value.merge(base, overrides);\n    }",
    "begin_line": 649,
    "end_line": 657,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultVisibilityChecker#660",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker()",
    "snippet": "@Override\n    public final VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker()\n    {\n        VisibilityChecker\u003c?\u003e vchecker \u003d _configOverrides.getDefaultVisibility();\n        // then global overrides (disabling)\n        if ((_mapperFeatures \u0026 AUTO_DETECT_MASK) !\u003d 0) {\n            if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n                vchecker \u003d vchecker.withFieldVisibility(Visibility.NONE);\n            }\n            if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n                vchecker \u003d vchecker.withGetterVisibility(Visibility.NONE);\n            }\n            if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n                vchecker \u003d vchecker.withIsGetterVisibility(Visibility.NONE);\n            }\n            if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n                vchecker \u003d vchecker.withSetterVisibility(Visibility.NONE);\n            }\n            if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n                vchecker \u003d vchecker.withCreatorVisibility(Visibility.NONE);\n            }\n        }\n        return vchecker;\n    }",
    "begin_line": 660,
    "end_line": 682,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultVisibilityChecker#685",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override getDefaultVisibilityChecker(Class\u003c?\u003e baseType,\n            AnnotatedClass actualClass) {\n        VisibilityChecker\u003c?\u003e vc \u003d getDefaultVisibilityChecker();\n        AnnotationIntrospector intr \u003d getAnnotationIntrospector();\n        if (intr !\u003d null) {\n            vc \u003d intr.findAutoDetectVisibility(actualClass, vc);\n        }\n        ConfigOverride overrides \u003d _configOverrides.findOverride(baseType);\n        if (overrides !\u003d null) {\n            vc \u003d vc.withOverrides(overrides.getVisibility()); // ok to pass null\n        }\n        return vc;\n    }",
    "begin_line": 685,
    "end_line": 697,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultSetterInfo#700",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultSetterInfo()",
    "snippet": "@Override\n    public final JsonSetter.Value getDefaultSetterInfo() {\n        return _configOverrides.getDefaultSetterInfo();\n    }",
    "begin_line": 700,
    "end_line": 702,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultMergeable#705",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultMergeable()",
    "snippet": "@Override\n    public Boolean getDefaultMergeable() {\n        return _configOverrides.getDefaultMergeable();\n    }",
    "begin_line": 705,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findRootName#716",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findRootName(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public PropertyName findRootName(JavaType rootType) {\n        if (_rootName !\u003d null) {\n            return _rootName;\n        }\n        return _rootNames.findRootName(rootType, this);\n    }",
    "begin_line": 716,
    "end_line": 721,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findRootName#724",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findRootName(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public PropertyName findRootName(Class\u003c?\u003e rawRootType) {\n        if (_rootName !\u003d null) {\n            return _rootName;\n        }\n        return _rootNames.findRootName(rawRootType, this);\n    }",
    "begin_line": 724,
    "end_line": 729,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findMixInClassFor#742",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls) {\n        return _mixIns.findMixInClassFor(cls);\n    }",
    "begin_line": 742,
    "end_line": 744,
    "comment": "/** \n * Method that will check if there are \"mix-in\" classes (with mix-in annotations) for given class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.copy#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.copy()",
    "snippet": "@Override\n    public MixInResolver copy() {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 748,
    "end_line": 750,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.mixInCount#756",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.mixInCount()",
    "snippet": "public final int mixInCount() {\n        return _mixIns.localSize();\n    }",
    "begin_line": 756,
    "end_line": 758,
    "comment": "/** \n * Test-only method -- does not reflect possibly open-ended set that external mix-in resolver might provide.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.SerializerFactoryConfig#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()",
    "snippet": "public SerializerFactoryConfig() {\n        this(null, null, null);\n    }",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.SerializerFactoryConfig#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig(com.fasterxml.jackson.databind.ser.Serializers[], com.fasterxml.jackson.databind.ser.Serializers[], com.fasterxml.jackson.databind.ser.BeanSerializerModifier[])",
    "snippet": "protected SerializerFactoryConfig(Serializers[] allAdditionalSerializers,\n            Serializers[] allAdditionalKeySerializers,\n            BeanSerializerModifier[] modifiers)\n    {\n        _additionalSerializers \u003d (allAdditionalSerializers \u003d\u003d null) ?\n                NO_SERIALIZERS : allAdditionalSerializers;\n        _additionalKeySerializers \u003d (allAdditionalKeySerializers \u003d\u003d null) ?\n                NO_SERIALIZERS : allAdditionalKeySerializers;\n        _modifiers \u003d (modifiers \u003d\u003d null) ? NO_MODIFIERS : modifiers;\n    }",
    "begin_line": 45,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withAdditionalSerializers#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public SerializerFactoryConfig withAdditionalSerializers(Serializers additional)\n    {\n        if (additional \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null Serializers\");\n        }\n        Serializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\n        return new SerializerFactoryConfig(all, _additionalKeySerializers, _modifiers);\n    }",
    "begin_line": 56,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withAdditionalKeySerializers#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public SerializerFactoryConfig withAdditionalKeySerializers(Serializers additional)\n    {\n        if (additional \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null Serializers\");\n        }\n        Serializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\n        return new SerializerFactoryConfig(_additionalSerializers, all, _modifiers);\n    }",
    "begin_line": 65,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withSerializerModifier#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "public SerializerFactoryConfig withSerializerModifier(BeanSerializerModifier modifier)\n    {\n        if (modifier \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Can not pass null modifier\");\n        }\n        BeanSerializerModifier[] modifiers \u003d ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n        return new SerializerFactoryConfig(_additionalSerializers, _additionalKeySerializers, modifiers);\n    }",
    "begin_line": 74,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasSerializers#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasSerializers()",
    "snippet": "public boolean hasSerializers() { return _additionalSerializers.length \u003e 0; }",
    "begin_line": 83,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasKeySerializers#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasKeySerializers()",
    "snippet": "public boolean hasKeySerializers() { return _additionalKeySerializers.length \u003e 0; }",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasSerializerModifiers#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasSerializerModifiers()",
    "snippet": "public boolean hasSerializerModifiers() { return _modifiers.length \u003e 0; }",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.serializers#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.serializers()",
    "snippet": "public Iterable\u003cSerializers\u003e serializers() { return new ArrayIterator\u003cSerializers\u003e(_additionalSerializers); }",
    "begin_line": 86,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.keySerializers#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.keySerializers()",
    "snippet": "public Iterable\u003cSerializers\u003e keySerializers() { return new ArrayIterator\u003cSerializers\u003e(_additionalKeySerializers); }",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.serializerModifiers#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.serializerModifiers()",
    "snippet": "public Iterable\u003cBeanSerializerModifier\u003e serializerModifiers() { return new ArrayIterator\u003cBeanSerializerModifier\u003e(_modifiers); }",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.BasicDeserializerFactory#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.BasicDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "protected BasicDeserializerFactory(DeserializerFactoryConfig config) {\n        _factoryConfig \u003d config;\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.getFactoryConfig#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.getFactoryConfig()",
    "snippet": "public DeserializerFactoryConfig getFactoryConfig() {\n        return _factoryConfig;\n    }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * Method for getting current  {@link DeserializerFactoryConfig}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withConfig#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
    "begin_line": 124,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAdditionalDeserializers#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "@Override\n    public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n        return withConfig(_factoryConfig.withAdditionalDeserializers(additional));\n    }",
    "begin_line": 137,
    "end_line": 139,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional deserializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAdditionalKeyDeserializers#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "@Override\n    public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n        return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));\n    }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link KeyDeserializers}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withDeserializerModifier#155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "@Override\n    public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n        return withConfig(_factoryConfig.withDeserializerModifier(modifier));\n    }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link BeanDeserializerModifier}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAbstractTypeResolver#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "@Override\n    public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n        return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));\n    }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link AbstractTypeResolver}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withValueInstantiators#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "@Override\n    public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n        return withConfig(_factoryConfig.withValueInstantiators(instantiators));\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link ValueInstantiators}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.mapAbstractType#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.mapAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException\n    {\n        // first, general mappings\n        while (true) {\n            JavaType next \u003d _mapAbstractType2(config, type);\n            if (next \u003d\u003d null) {\n                return type;\n            }\n            // Should not have to worry about cycles; but better verify since they will invariably occur... :-)\n            // (also: guard against invalid resolution to a non-related type)\n            Class\u003c?\u003e prevCls \u003d type.getRawClass();\n            Class\u003c?\u003e nextCls \u003d next.getRawClass();\n            if ((prevCls \u003d\u003d nextCls) || !prevCls.isAssignableFrom(nextCls)) {\n                throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");\n            }\n            type \u003d next;\n        }\n    }",
    "begin_line": 184,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._mapAbstractType2#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._mapAbstractType2(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e currClass \u003d type.getRawClass();\n        if (_factoryConfig.hasAbstractTypeResolvers()) {\n            for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {\n                JavaType concrete \u003d resolver.findTypeMapping(config, type);\n                if (concrete !\u003d null \u0026\u0026 concrete.getRawClass() !\u003d currClass) {\n                    return concrete;\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 207,
    "end_line": 220,
    "comment": "/** \n * Method that will find abstract type mapping for specified type, doing a single lookup through registered abstract type resolvers; will not do recursive lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findValueInstantiator#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n\n        ValueInstantiator instantiator \u003d null;\n        // Check @JsonValueInstantiator before anything else\n        AnnotatedClass ac \u003d beanDesc.getClassInfo();\n        Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n        if (instDef !\u003d null) {\n            instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n        }\n        if (instantiator \u003d\u003d null) {\n            // Second: see if some of standard Jackson/JDK types might provide value\n            // instantiators.\n            instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n            if (instantiator \u003d\u003d null) {\n                instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n            }\n        }\n\n        // finally: anyone want to modify ValueInstantiator?\n        if (_factoryConfig.hasValueInstantiators()) {\n            for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n                instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n                // let\u0027s do sanity check; easier to spot buggy handlers\n                if (instantiator \u003d\u003d null) {\n                    ctxt.reportBadTypeDefinition(beanDesc,\n\t\t\t\t\t\t\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\",\n\t\t\t\t\t\tinsts.getClass().getName());\n                }\n            }\n        }\n\n        // Sanity check: does the chosen instantatior have incomplete creators?\n        if (instantiator.getIncompleteParameter() !\u003d null) {\n            final AnnotatedParameter nonAnnotatedParam \u003d instantiator.getIncompleteParameter();\n            final AnnotatedWithParams ctor \u003d nonAnnotatedParam.getOwner();\n            throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n        }\n\n        return instantiator;\n    }",
    "begin_line": 234,
    "end_line": 277,
    "comment": "/** \n * Value instantiator is created both based on creator annotations, and on optional externally provided instantiators (registered through module interface).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findStdValueInstantiator#279",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findStdValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        if (beanDesc.getBeanClass() \u003d\u003d JsonLocation.class) {\n            return new JsonLocationInstantiator();\n        }\n        return null;\n    }",
    "begin_line": 279,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._constructDefaultValueInstantiator#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._constructDefaultValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        CreatorCollector creators \u003d new CreatorCollector(beanDesc, ctxt.getConfig());\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        \n        // need to construct suitable visibility checker:\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker(beanDesc.getBeanClass(),\n                beanDesc.getClassInfo());\n\n        /* 24-Sep-2014, tatu: Tricky part first; need to merge resolved property information\n         *  (which has creator parameters sprinkled around) with actual creator\n         *  declarations (which are needed to access creator annotation, amongst other things).\n         *  Easiest to combine that info first, then pass it to remaining processing.\n         */\n        /* 15-Mar-2015, tatu: Alas, this won\u0027t help with constructors that only have implicit\n         *   names. Those will need to be resolved later on.\n         */\n        Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorDefs \u003d _findCreatorsFromProperties(ctxt,\n                beanDesc);\n        // Important: first add factory methods; then constructors, so\n        // latter can override former!\n        _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);\n        // constructors only usable on concrete types:\n        if (beanDesc.getType().isConcrete()) {\n            _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);\n        }\n        return creators.constructValueInstantiator(config);\n    }",
    "begin_line": 293,
    "end_line": 323,
    "comment": "/** \n * Method that will construct standard default  {@link ValueInstantiator}using annotations (like @JsonCreator) and visibility rules\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCreatorsFromProperties#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCreatorsFromProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException\n    {\n        Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e result \u003d Collections.emptyMap();\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            Iterator\u003cAnnotatedParameter\u003e it \u003d propDef.getConstructorParameters();\n            while (it.hasNext()) {\n                AnnotatedParameter param \u003d it.next();\n                AnnotatedWithParams owner \u003d param.getOwner();\n                BeanPropertyDefinition[] defs \u003d result.get(owner);\n                final int index \u003d param.getIndex();\n                \n                if (defs \u003d\u003d null) {\n                    if (result.isEmpty()) { // since emptyMap is immutable need to create a \u0027real\u0027 one\n                        result \u003d new LinkedHashMap\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e();\n                    }\n                    defs \u003d new BeanPropertyDefinition[owner.getParameterCount()];\n                    result.put(owner, defs);\n                } else {\n                    if (defs[index] !\u003d null) {\n                        throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);\n                    }\n                }\n                defs[index] \u003d propDef;\n            }\n        }\n        return result;\n    }",
    "begin_line": 325,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._valueInstantiatorInstance#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._valueInstantiatorInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException\n    {\n        if (instDef \u003d\u003d null) {\n            return null;\n        }\n\n        ValueInstantiator inst;\n        \n        if (instDef instanceof ValueInstantiator) {\n            return (ValueInstantiator) instDef;\n        }\n        if (!(instDef instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class\u003cKeyDeserializer\u003e instead\");\n        }\n        Class\u003c?\u003e instClass \u003d (Class\u003c?\u003e)instDef;\n        if (ClassUtil.isBogusClass(instClass)) {\n            return null;\n        }\n        if (!ValueInstantiator.class.isAssignableFrom(instClass)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class\u003cValueInstantiator\u003e\");\n        }\n        HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n        if (hi !\u003d null) {\n            inst \u003d hi.valueInstantiatorInstance(config, annotated, instClass);\n            if (inst !\u003d null) {\n                return inst;\n            }\n        }\n        return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());\n    }",
    "begin_line": 355,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addDeserializerConstructors#392",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]\u003e)",
    "snippet": "protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorParams)\n        throws JsonMappingException\n    {\n        // First things first: the \"default constructor\" (zero-arg\n        // constructor; whether implicit or explicit) is NOT included\n        // in list of constructors, so needs to be handled separately.\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (!creators.hasDefaultCreator() || _hasCreatorAnnotation(ctxt, defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        // 25-Jan-2017, tatu: As per [databind#1501], [databind#1502], [databind#1503], best\n        //     for now to skip attempts at using anything but no-args constructor (see\n        //     `InnerClassProperty` construction for that)\n        final boolean isNonStaticInnerClass \u003d beanDesc.isNonStaticInnerClass();\n        if (isNonStaticInnerClass) {\n            // TODO: look for `@JsonCreator` annotated ones, throw explicit exception?\n            return;\n        }\n\n        // may need to keep track for [#725]\n        List\u003cAnnotatedConstructor\u003e implicitCtors \u003d null;\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            JsonCreator.Mode creatorMode \u003d intr.findCreatorAnnotation(ctxt.getConfig(), ctor);\n            final boolean isCreator \u003d (creatorMode !\u003d null) \u0026\u0026 (creatorMode !\u003d JsonCreator.Mode.DISABLED);\n            BeanPropertyDefinition[] propDefs \u003d creatorParams.get(ctor);\n            final int argCount \u003d ctor.getParameterCount();\n\n            // some single-arg factory methods (String, number) are auto-detected\n            if (argCount \u003d\u003d 1) {\n                BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n                boolean useProps \u003d _checkIfCreatorPropertyBased(intr, ctor, argDef, creatorMode);\n\n                if (useProps) {\n                    SettableBeanProperty[] properties \u003d new SettableBeanProperty[1];\n                    PropertyName name \u003d (argDef \u003d\u003d null) ? null : argDef.getFullName();\n                    AnnotatedParameter arg \u003d ctor.getParameter(0);\n                    properties[0] \u003d constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValue(arg));\n                    creators.addPropertyCreator(ctor, isCreator, properties);\n                } else {\n                    /*boolean added \u003d */ _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));\n                    // one more thing: sever link to creator property, to avoid possible later\n                    // problems with \"unresolved\" constructor property\n                    if (argDef !\u003d null) {\n                        ((POJOPropertyBuilder) argDef).removeConstructors();\n                    }\n                }\n                // regardless, fully handled\n                continue;\n            }\n\n            // 2 or more args; all params must have names or be injectable\n            // 14-Mar-2015, tatu (2.6): Or, as per [#725], implicit names will also\n            //   do, with some constraints. But that will require bit post processing...\n\n            AnnotatedParameter nonAnnotatedParam \u003d null;\n            SettableBeanProperty[] properties \u003d new SettableBeanProperty[argCount];\n            int explicitNameCount \u003d 0;\n            int implicitWithCreatorCount \u003d 0;\n            int injectCount \u003d 0;\n\n            for (int i \u003d 0; i \u003c argCount; ++i) {\n                final AnnotatedParameter param \u003d ctor.getParameter(i);\n                BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n                JacksonInject.Value injectId \u003d intr.findInjectableValue(param);\n                final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n\n                if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                    ++explicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                if (injectId !\u003d null) {\n                    ++injectCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    _reportUnwrappedCreatorProperty(ctxt, beanDesc, param);\n                    /*\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++explicitNameCount;\n                    */\n                    continue;\n                }\n                // One more thing: implicit names are ok iff ctor has creator annotation\n                if (isCreator \u0026\u0026 (name !\u003d null \u0026\u0026 !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                if (nonAnnotatedParam \u003d\u003d null) {\n                    nonAnnotatedParam \u003d param;\n                }\n            }\n\n            final int namedCount \u003d explicitNameCount + implicitWithCreatorCount;\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || (explicitNameCount \u003e 0) || (injectCount \u003e 0)) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) \u003d\u003d argCount) {\n                    creators.addPropertyCreator(ctor, isCreator, properties);\n                    continue;\n                }\n                if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                    // Secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, isCreator, properties);\n                    continue;\n                }\n                // otherwise, epic fail?\n                // 16-Mar-2015, tatu: due to [#725], need to be more permissive. For now let\u0027s\n                //    only report problem if there\u0027s no implicit name\n                PropertyName impl \u003d _findImplicitParamName(nonAnnotatedParam, intr);\n                if (impl \u003d\u003d null || impl.isEmpty()) {\n                    // Let\u0027s consider non-static inner class as a special case...\n                    int ix \u003d nonAnnotatedParam.getIndex();\n                    // 25-Jan-2017, tatu: Non-static inner classes skipped altogether, now\n                    /*\n                    if ((ix \u003d\u003d 0) \u0026\u0026 isNonStaticInnerClass) {\n                        throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");\n                    }\n                    */\n                    throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                }\n            }\n            // [#725]: as a fallback, all-implicit names may work as well\n            if (!creators.hasDefaultCreator()) {\n                if (implicitCtors \u003d\u003d null) {\n                    implicitCtors \u003d new LinkedList\u003cAnnotatedConstructor\u003e();\n                }\n                implicitCtors.add(ctor);\n            }\n        }\n        // last option, as per [#725]: consider implicit-names-only, visible constructor,\n        // if just one found\n        if ((implicitCtors !\u003d null) \u0026\u0026 !creators.hasDelegatingCreator()\n                \u0026\u0026 !creators.hasPropertyBasedCreator()) {\n            _checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);\n        }\n    }",
    "begin_line": 392,
    "end_line": 543,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._checkImplicitlyNamedConstructors#545",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedConstructor\u003e)",
    "snippet": "protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List\u003cAnnotatedConstructor\u003e implicitCtors) throws JsonMappingException\n    {\n        AnnotatedConstructor found \u003d null;\n        SettableBeanProperty[] foundProps \u003d null;\n\n        // Further checks: (a) must have names for all parameters, (b) only one visible\n        // Also, since earlier matching of properties and creators relied on existence of\n        // `@JsonCreator` (or equivalent) annotation, we need to do bit more re-inspection...\n\n        main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount \u003d ctor.getParameterCount();\n            SettableBeanProperty[] properties \u003d new SettableBeanProperty[argCount];\n            for (int i \u003d 0; i \u003c argCount; ++i) {\n                final AnnotatedParameter param \u003d ctor.getParameter(i);\n                final PropertyName name \u003d _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name \u003d\u003d null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found !\u003d null) { // only one allowed\n                found \u003d null;\n                break;\n            }\n            found \u003d ctor;\n            foundProps \u003d properties;\n        }\n        // found one and only one visible? Ship it!\n        if (found !\u003d null) {\n            creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);\n            BasicBeanDescription bbd \u003d (BasicBeanDescription) beanDesc;\n            // Also: add properties, to keep error messages complete wrt known properties...\n            for (SettableBeanProperty prop : foundProps) {\n                PropertyName pn \u003d prop.getFullName();\n                if (!bbd.hasProperty(pn)) {\n                    BeanPropertyDefinition newDef \u003d SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);\n                    bbd.addProperty(newDef);\n                }\n            }\n        }\n    }",
    "begin_line": 545,
    "end_line": 597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._handleSingleArgumentConstructor#599",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._handleSingleArgumentConstructor(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, boolean, boolean)",
    "snippet": "protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException\n    {\n        // otherwise either \u0027simple\u0027 number, String, or general delegate:\n        Class\u003c?\u003e type \u003d ctor.getRawParameterType(0);\n        if (type \u003d\u003d String.class || type \u003d\u003d CharSequence.class) {\n            if (isCreator || isVisible) {\n                creators.addStringCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d int.class || type \u003d\u003d Integer.class) {\n            if (isCreator || isVisible) {\n                creators.addIntCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d long.class || type \u003d\u003d Long.class) {\n            if (isCreator || isVisible) {\n                creators.addLongCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d double.class || type \u003d\u003d Double.class) {\n            if (isCreator || isVisible) {\n                creators.addDoubleCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d boolean.class || type \u003d\u003d Boolean.class) {\n            if (isCreator || isVisible) {\n                creators.addBooleanCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        // Delegating Creator ok iff it has @JsonCreator (etc)\n        if (isCreator) {\n            creators.addDelegatingCreator(ctor, isCreator, null);\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 599,
    "end_line": 643,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addDeserializerFactoryMethods#645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]\u003e)",
    "snippet": "protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorParams)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n            JsonCreator.Mode creatorMode \u003d intr.findCreatorAnnotation(ctxt.getConfig(), factory);\n            final boolean isCreator \u003d (creatorMode !\u003d null) \u0026\u0026 (creatorMode !\u003d JsonCreator.Mode.DISABLED);\n            final int argCount \u003d factory.getParameterCount();\n            // zero-arg methods must be annotated; if so, are \"default creators\" [JACKSON-850]\n            if (argCount \u003d\u003d 0) {\n                if (isCreator) {\n                    creators.setDefaultCreator(factory);\n                }\n                continue;\n            }\n\n            final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n            // some single-arg factory methods (String, number) are auto-detected\n            if (argCount \u003d\u003d 1) {\n                BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n                boolean useProps \u003d _checkIfCreatorPropertyBased(intr, factory, argDef, creatorMode);\n                if (!useProps) { // not property based but delegating\n                    /*boolean added\u003d*/ _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);\n                    // 23-Sep-2016, tatu: [databind#1383]: Need to also sever link to avoid possible\n                    //    later problems with \"unresolved\" constructor property\n                    if (argDef !\u003d null) {\n                        ((POJOPropertyBuilder) argDef).removeConstructors();\n                    }\n                    continue;\n                }\n                // fall through if there\u0027s name\n            } else {\n                // more than 2 args, must have @JsonCreator\n                if (!isCreator) {\n                    continue;\n                }\n            }\n            // 1 or more args; all params must have name annotations\n            AnnotatedParameter nonAnnotatedParam \u003d null;            \n            SettableBeanProperty[] properties \u003d new SettableBeanProperty[argCount];\n            int implicitNameCount \u003d 0;\n            int explicitNameCount \u003d 0;\n            int injectCount \u003d 0;\n            \n            for (int i \u003d 0; i \u003c argCount; ++i) {\n                final AnnotatedParameter param \u003d factory.getParameter(i);\n                BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n                JacksonInject.Value injectable \u003d intr.findInjectableValue(param);\n                final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n\n                if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                    ++explicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);\n                    continue;\n                }\n                if (injectable !\u003d null) {\n                    ++injectCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);\n                    continue;\n                }\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    _reportUnwrappedCreatorProperty(ctxt, beanDesc, param);\n                    /*\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++implicitNameCount;\n                    */\n                    continue;\n                }\n                // One more thing: implicit names are ok iff ctor has creator annotation\n                if (isCreator) {\n                    if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                        ++implicitNameCount;\n                        properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);\n                        continue;\n                    }\n                }\n                /* 25-Sep-2014, tatu: Actually, we may end up \"losing\" naming due to higher-priority constructor\n                 *  (see TestCreators#testConstructorCreator() test). And just to avoid running into that problem,\n                 *  let\u0027s add one more work around\n                 */\n                /*\n                PropertyName name2 \u003d _findExplicitParamName(param, intr);\n                if (name2 !\u003d null \u0026\u0026 !name2.isEmpty()) {\n                    // Hmmh. Ok, fine. So what are we to do with it... ?\n                    // For now... skip. May need to revisit this, should this become problematic\n                    continue main_loop;\n                }\n                */\n                if (nonAnnotatedParam \u003d\u003d null) {\n                    nonAnnotatedParam \u003d param;\n                }\n            }\n            final int namedCount \u003d explicitNameCount + implicitNameCount;\n            \n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) \u003d\u003d argCount) {\n                    creators.addPropertyCreator(factory, isCreator, properties);\n                } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(factory, isCreator, properties);\n                } else { // otherwise, epic fail\n                    throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                }\n            }\n        }\n    }",
    "begin_line": 645,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._handleSingleArgumentFactory#760",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._handleSingleArgumentFactory(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, boolean)",
    "snippet": "protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e type \u003d factory.getRawParameterType(0);\n        \n        if (type \u003d\u003d String.class || type \u003d\u003d CharSequence.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addStringCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d int.class || type \u003d\u003d Integer.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addIntCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d long.class || type \u003d\u003d Long.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addLongCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d double.class || type \u003d\u003d Double.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addDoubleCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type \u003d\u003d boolean.class || type \u003d\u003d Boolean.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addBooleanCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (isCreator) {\n            creators.addDelegatingCreator(factory, isCreator, null);\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 760,
    "end_line": 803,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._reportUnwrappedCreatorProperty#807",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._reportUnwrappedCreatorProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, AnnotatedParameter param)\n        throws JsonMappingException\n    {\n        ctxt.reportBadDefinition(beanDesc.getType(), String.format(\n                \"Can not define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported\",\n                param.getIndex()));\n    }",
    "begin_line": 807,
    "end_line": 814,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.constructCreatorProperty#821",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.constructCreatorProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.PropertyName, int, com.fasterxml.jackson.databind.introspect.AnnotatedParameter, JacksonInject.Value)",
    "snippet": "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            JacksonInject.Value injectable)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        PropertyMetadata metadata;\n        {\n            if (intr \u003d\u003d null) {\n                metadata \u003d PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n            } else {\n                Boolean b \u003d intr.hasRequiredMarker(param);\n                String desc \u003d intr.findPropertyDescription(param);\n                Integer idx \u003d intr.findPropertyIndex(param);\n                String def \u003d intr.findPropertyDefaultValue(param);\n                metadata \u003d PropertyMetadata.construct(b, desc, idx, def);\n            }\n        }\n        JavaType type \u003d resolveMemberAndTypeAnnotations(ctxt, param, param.getType());\n        BeanProperty.Std property \u003d new BeanProperty.Std(name, type,\n                intr.findWrapperName(param), param, metadata);\n        // Type deserializer: either comes from property (and already resolved)\n        TypeDeserializer typeDeser \u003d (TypeDeserializer) type.getTypeHandler();\n        // or if not, based on type being referenced:\n        if (typeDeser \u003d\u003d null) {\n            typeDeser \u003d findTypeDeserializer(config, type);\n        }\n        // Note: contextualization of typeDeser _should_ occur in constructor of CreatorProperty\n        // so it is not called directly here\n\n        Object injectableValueId \u003d (injectable \u003d\u003d null) ? null : injectable.getId();\n        \n        SettableBeanProperty prop \u003d new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);\n        JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, param);\n        if (deser \u003d\u003d null) {\n            deser \u003d type.getValueHandler();\n        }\n        if (deser !\u003d null) {\n            // As per [databind#462] need to ensure we contextualize deserializer before passing it on\n            deser \u003d ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop \u003d prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }",
    "begin_line": 821,
    "end_line": 868,
    "comment": "/** \n * Method that will construct a property object that represents a logical property passed via Creator (constructor or static factory method)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findParamName#870",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        if (param !\u003d null \u0026\u0026 intr !\u003d null) {\n            PropertyName name \u003d intr.findNameForDeserialization(param);\n            if (name !\u003d null) {\n                return name;\n            }\n            // 14-Apr-2014, tatu: Need to also consider possible implicit name\n            //  (for JDK8, or via paranamer)\n\n            String str \u003d intr.findImplicitPropertyName(param);\n            if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n                return PropertyName.construct(str);\n            }\n        }\n        return null;\n    }",
    "begin_line": 870,
    "end_line": 886,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findImplicitParamName#888",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findImplicitParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        String str \u003d intr.findImplicitPropertyName(param);\n        if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n            return PropertyName.construct(str);\n        }\n        return null;\n    }",
    "begin_line": 888,
    "end_line": 895,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._checkIfCreatorPropertyBased#897",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._checkIfCreatorPropertyBased(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, JsonCreator.Mode)",
    "snippet": "protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef,\n            JsonCreator.Mode creatorMode)\n    {\n        if (creatorMode \u003d\u003d JsonCreator.Mode.PROPERTIES) {\n            return true;\n        }\n        if (creatorMode \u003d\u003d JsonCreator.Mode.DELEGATING) {\n            return false;\n        }\n        // If explicit name, or inject id, property-based\n        if (((propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed())\n                || (intr.findInjectableValue(creator.getParameter(0)) !\u003d null)) {\n            return true;\n        }\n        if (propDef !\u003d null) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we\u0027ll consider it property-based as well\n            String implName \u003d propDef.getName();\n            if (implName !\u003d null \u0026\u0026 !implName.isEmpty()) {\n                if (propDef.couldSerialize()) {\n                    return true;\n                }\n            }\n        }\n        // in absence of everything else, default to delegating\n        return false;\n    }",
    "begin_line": 897,
    "end_line": 924,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createArrayDeserializer#933",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createArrayDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        JavaType elemType \u003d type.getContentType();\n        \n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (elemTypeDeser \u003d\u003d null) {\n            elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n        }\n        // 23-Nov-2010, tatu: Custom array deserializer?\n        JsonDeserializer\u003c?\u003e  deser \u003d _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);\n        if (deser \u003d\u003d null) {\n            if (contentDeser \u003d\u003d null) {\n                Class\u003c?\u003e raw \u003d elemType.getRawClass();\n                if (elemType.isPrimitive()) {\n                    return PrimitiveArrayDeserializers.forType(raw);\n                } else if (raw \u003d\u003d String.class) {\n                    return StringArrayDeserializer.instance;\n                }\n            }\n            deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n        }\n        // and then new with 2.2: ability to post-process it too (Issue#120)\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }",
    "begin_line": 933,
    "end_line": 969,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createCollectionDeserializer#978",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createCollectionDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType \u003d type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d contentType.getValueHandler();\n        final DeserializationConfig config \u003d ctxt.getConfig();\n\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser \u003d contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser \u003d\u003d null) {\n            contentTypeDeser \u003d findTypeDeserializer(config, contentType);\n        }\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);\n        if (deser \u003d\u003d null) {\n            Class\u003c?\u003e collectionClass \u003d type.getRawClass();\n            if (contentDeser \u003d\u003d null) { // not defined by annotation\n                // One special type: EnumSet:\n                if (EnumSet.class.isAssignableFrom(collectionClass)) {\n                    deser \u003d new EnumSetDeserializer(contentType, null);\n                }\n            }\n        }\n\n        /* One twist: if we are being asked to instantiate an interface or\n         * abstract Collection, we need to either find something that implements\n         * the thing, or give up.\n         *\n         * Note that we do NOT try to guess based on secondary interfaces\n         * here; that would probably not work correctly since casts would\n         * fail later on (as the primary type is not the interface we\u0027d\n         * be implementing)\n         */\n        if (deser \u003d\u003d null) {\n            if (type.isInterface() || type.isAbstract()) {\n                CollectionType implType \u003d _mapAbstractCollectionType(type, config);\n                if (implType \u003d\u003d null) {\n                    // [databind#292]: Actually, may be fine, but only if polymorphich deser enabled\n                    if (type.getTypeHandler() \u003d\u003d null) {\n                        throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);\n                    }\n                    deser \u003d AbstractDeserializer.constructForNonPOJO(beanDesc);\n                } else {\n                    type \u003d implType;\n                    // But if so, also need to re-check creators...\n                    beanDesc \u003d config.introspectForCreation(type);\n                }\n            }\n            if (deser \u003d\u003d null) {\n                ValueInstantiator inst \u003d findValueInstantiator(ctxt, beanDesc);\n                if (!inst.canCreateUsingDefault()) {\n                    // [databind#161]: No default constructor for ArrayBlockingQueue...\n                    if (type.getRawClass() \u003d\u003d ArrayBlockingQueue.class) {\n                        return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst);\n                    }\n                }\n                // Can use more optimal deserializer if content type is String, so:\n                if (contentType.getRawClass() \u003d\u003d String.class) {\n                    // no value type deserializer because Strings are one of natural/native types:\n                    deser \u003d new StringCollectionDeserializer(type, contentDeser, inst);\n                } else {\n                    deser \u003d new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);\n                }\n            }\n        }\n        // allow post-processing it too\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser \u003d mod.modifyCollectionDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }",
    "begin_line": 978,
    "end_line": 1054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._mapAbstractCollectionType#1056",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._mapAbstractCollectionType(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)\n    {\n        Class\u003c?\u003e collectionClass \u003d type.getRawClass();\n        collectionClass \u003d _collectionFallbacks.get(collectionClass.getName());\n        if (collectionClass \u003d\u003d null) {\n            return null;\n        }\n        return (CollectionType) config.constructSpecializedType(type, collectionClass);\n    }",
    "begin_line": 1056,
    "end_line": 1064,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createCollectionLikeDeserializer#1068",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createCollectionLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType \u003d type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d contentType.getValueHandler();\n        final DeserializationConfig config \u003d ctxt.getConfig();\n\n        // Then optional type info (1.5): if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser \u003d contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser \u003d\u003d null) {\n            contentTypeDeser \u003d findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);\n        if (deser !\u003d null) {\n            // and then new with 2.2: ability to post-process it too (Issue#120)\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser \u003d mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1068,
    "end_line": 1094,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createMapDeserializer#1103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createMapDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        JavaType keyType \u003d type.getKeyType();\n        JavaType contentType \u003d type.getContentType();\n        \n        // First: is there annotation-specified deserializer for values?\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d (JsonDeserializer\u003cObject\u003e) contentType.getValueHandler();\n\n        // Ok: need a key deserializer (null indicates \u0027default\u0027 here)\n        KeyDeserializer keyDes \u003d (KeyDeserializer) keyType.getValueHandler();\n        // Then optional type info; either attached to type, or resolved separately:\n        TypeDeserializer contentTypeDeser \u003d contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser \u003d\u003d null) {\n            contentTypeDeser \u003d findTypeDeserializer(config, contentType);\n        }\n\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);\n\n        if (deser \u003d\u003d null) {\n            // Value handling is identical for all, but EnumMap requires special handling for keys\n            Class\u003c?\u003e mapClass \u003d type.getRawClass();\n            if (EnumMap.class.isAssignableFrom(mapClass)) {\n                ValueInstantiator inst;\n\n                // 06-Mar-2017, tatu: Should only need to check ValueInstantiator for\n                //    custom sub-classes, see [databind#1544]\n                if (mapClass \u003d\u003d EnumMap.class) {\n                    inst \u003d null;\n                } else {\n                    inst \u003d findValueInstantiator(ctxt, beanDesc);\n                }\n                Class\u003c?\u003e kt \u003d keyType.getRawClass();\n                if (kt \u003d\u003d null || !kt.isEnum()) {\n                    throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");\n                }\n                deser \u003d new EnumMapDeserializer(type, inst, null,\n                        contentDeser, contentTypeDeser, null);\n            }\n\n            // Otherwise, generic handler works ok.\n    \n            /* But there is one more twist: if we are being asked to instantiate\n             * an interface or abstract Map, we need to either find something\n             * that implements the thing, or give up.\n             *\n             * Note that we do NOT try to guess based on secondary interfaces\n             * here; that would probably not work correctly since casts would\n             * fail later on (as the primary type is not the interface we\u0027d\n             * be implementing)\n             */\n            if (deser \u003d\u003d null) {\n                if (type.isInterface() || type.isAbstract()) {\n                    @SuppressWarnings(\"rawtypes\")\n                    Class\u003c? extends Map\u003e fallback \u003d _mapFallbacks.get(mapClass.getName());\n                    if (fallback !\u003d null) {\n                        mapClass \u003d fallback;\n                        type \u003d (MapType) config.constructSpecializedType(type, mapClass);\n                        // But if so, also need to re-check creators...\n                        beanDesc \u003d config.introspectForCreation(type);\n                    } else {\n                        // [databind#292]: Actually, may be fine, but only if polymorphic deser enabled\n                        if (type.getTypeHandler() \u003d\u003d null) {\n                            throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);\n                        }\n                        deser \u003d AbstractDeserializer.constructForNonPOJO(beanDesc);\n                    }\n                }\n                if (deser \u003d\u003d null) {\n                    ValueInstantiator inst \u003d findValueInstantiator(ctxt, beanDesc);\n                    // 01-May-2016, tatu: Which base type to use here gets tricky, since\n                    //   most often it ought to be `Map` or `EnumMap`, but due to abstract\n                    //   mapping it will more likely be concrete type like `HashMap`.\n                    //   So, for time being, just pass `Map.class`\n                    MapDeserializer md \u003d new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);\n                    JsonIgnoreProperties.Value ignorals \u003d config.getDefaultPropertyIgnorals(Map.class,\n                            beanDesc.getClassInfo());\n                    Set\u003cString\u003e ignored \u003d (ignorals \u003d\u003d null) ? null\n                            : ignorals.findIgnoredForDeserialization();\n                    md.setIgnorableProperties(ignored);\n                    deser \u003d md;\n                }\n            }\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser \u003d mod.modifyMapDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1103,
    "end_line": 1199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createMapLikeDeserializer#1203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createMapLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType keyType \u003d type.getKeyType();\n        JavaType contentType \u003d type.getContentType();\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        \n        // First: is there annotation-specified deserializer for values?\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d (JsonDeserializer\u003cObject\u003e) contentType.getValueHandler();\n        \n        // Ok: need a key deserializer (null indicates \u0027default\u0027 here)\n        KeyDeserializer keyDes \u003d (KeyDeserializer) keyType.getValueHandler();\n        /* !!! 24-Jan-2012, tatu: NOTE: impls MUST use resolve() to find key deserializer!\n        if (keyDes \u003d\u003d null) {\n            keyDes \u003d p.findKeyDeserializer(config, keyType, property);\n        }\n        */\n        // Then optional type info (1.5); either attached to type, or resolve separately:\n        TypeDeserializer contentTypeDeser \u003d contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser \u003d\u003d null) {\n            contentTypeDeser \u003d findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);\n        if (deser !\u003d null) {\n            // and then new with 2.2: ability to post-process it too (Issue#120)\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser \u003d mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1203,
    "end_line": 1239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createEnumDeserializer#1251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createEnumDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        final Class\u003c?\u003e enumClass \u003d type.getRawClass();\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomEnumDeserializer(enumClass, config, beanDesc);\n\n        if (deser \u003d\u003d null) {\n            ValueInstantiator valueInstantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n            SettableBeanProperty[] creatorProps \u003d (valueInstantiator \u003d\u003d null) ? null\n                    : valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n            // May have @JsonCreator for static factory method:\n            for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n                if (_hasCreatorAnnotation(ctxt, factory)) {\n                    if (factory.getParameterCount() \u003d\u003d 0) { // [databind#960]\n                        deser \u003d EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory);\n                        break;\n                    }\n                    Class\u003c?\u003e returnType \u003d factory.getRawReturnType();\n                    // usually should be class, but may be just plain Enum\u003c?\u003e (for Enum.valueOf()?)\n                    if (returnType.isAssignableFrom(enumClass)) {\n                        deser \u003d EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps);\n                        break;\n                    }\n                }\n            }\n           \n            // Need to consider @JsonValue if one found\n            if (deser \u003d\u003d null) {\n                deser \u003d new EnumDeserializer(constructEnumResolver(enumClass,\n                        config, beanDesc.findJsonValueAccessor()),\n                        config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS));\n            }\n        }\n\n        // and then post-process it too\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser \u003d mod.modifyEnumDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1251,
    "end_line": 1295,
    "comment": "/** \n * Factory method for constructing serializers of  {@link Enum} types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createTreeDeserializer#1298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createTreeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        @SuppressWarnings(\"unchecked\")\n        Class\u003c? extends JsonNode\u003e nodeClass \u003d (Class\u003c? extends JsonNode\u003e) nodeType.getRawClass();\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer\u003c?\u003e custom \u003d _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);\n        if (custom !\u003d null) {\n            return custom;\n        }\n        return JsonNodeDeserializer.getDeserializer(nodeClass);\n    }",
    "begin_line": 1298,
    "end_line": 1311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createReferenceDeserializer#1314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createReferenceDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e createReferenceDeserializer(DeserializationContext ctxt,\n            ReferenceType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType \u003d type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer\u003cObject\u003e contentDeser \u003d contentType.getValueHandler();\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser \u003d contentType.getTypeHandler();\n        if (contentTypeDeser \u003d\u003d null) { // or if not, may be able to find:\n            contentTypeDeser \u003d findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d _findCustomReferenceDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);\n\n        if (deser \u003d\u003d null) {\n            // Just one referential type as of JDK 1.7 / Java 7: AtomicReference (Java 8 adds Optional)\n            if (type.isTypeOrSubTypeOf(AtomicReference.class)) {\n                Class\u003c?\u003e rawType \u003d type.getRawClass();\n                ValueInstantiator inst;\n                if (rawType \u003d\u003d AtomicReference.class) {\n                    inst \u003d null;\n                } else {\n                    /* 23-Oct-2016, tatu: Note that subtypes are probably not supportable\n                     *    without either forcing merging (to avoid having to create instance)\n                     *    or something else...\n                     */\n                    inst \u003d findValueInstantiator(ctxt, beanDesc);\n                }\n                return new AtomicReferenceDeserializer(type, inst, contentTypeDeser, contentDeser);\n            }\n        }\n        if (deser !\u003d null) {\n            // and then post-process\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser \u003d mod.modifyReferenceDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1314,
    "end_line": 1356,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findTypeDeserializer#1365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException\n    {\n        BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac \u003d bean.getClassInfo();\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n\n        /* Ok: if there is no explicit type info handler, we may want to\n         * use a default. If so, config object knows what to use.\n         */\n        Collection\u003cNamedType\u003e subtypes \u003d null;\n        if (b \u003d\u003d null) {\n            b \u003d config.getDefaultTyper(baseType);\n            if (b \u003d\u003d null) {\n                return null;\n            }\n        } else {\n            subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);\n        }\n        // May need to figure out default implementation, if none found yet\n        // (note: check for abstract type is not 100% mandatory, more of an optimization)\n        if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n            JavaType defaultType \u003d mapAbstractType(config, baseType);\n            if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n                b \u003d b.defaultImpl(defaultType.getRawClass());\n            }\n        }\n        return b.buildTypeDeserializer(config, baseType, subtypes);\n    }",
    "begin_line": 1365,
    "end_line": 1395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findOptionalStdDeserializer#1402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findOptionalStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);\n    }",
    "begin_line": 1402,
    "end_line": 1407,
    "comment": "/** \n * Overridable method called after checking all other types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createKeyDeserializer#1416",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        KeyDeserializer deser \u003d null;\n        if (_factoryConfig.hasKeyDeserializers()) {\n            BeanDescription beanDesc \u003d config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser \u003d d.findKeyDeserializer(type, config, beanDesc);\n                if (deser !\u003d null) {\n                    break;\n                }\n            }\n        }\n        // the only non-standard thing is this:\n        if (deser \u003d\u003d null) {\n            if (type.isEnumType()) {\n                deser \u003d _createEnumKeyDeserializer(ctxt, type);\n            } else {\n                deser \u003d StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n            }\n        }\n        // and then post-processing\n        if (deser !\u003d null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser \u003d mod.modifyKeyDeserializer(config, type, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "begin_line": 1416,
    "end_line": 1448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._createEnumKeyDeserializer#1450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._createEnumKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        Class\u003c?\u003e enumClass \u003d type.getRawClass();\n\n        BeanDescription beanDesc \u003d config.introspect(type);\n        // 24-Sep-2015, bim: a key deserializer is the preferred thing.\n        KeyDeserializer des \u003d findKeyDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n        if (des !\u003d null) {\n            return des;\n        } else {\n            // 24-Sep-2015, bim: if no key deser, look for enum deserializer first, then a plain deser.\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomEnumDeserializer(enumClass, config, beanDesc);\n            if (custom !\u003d null) {\n                return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom);\n            }\n            JsonDeserializer\u003c?\u003e valueDesForKey \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n            if (valueDesForKey !\u003d null) {\n                return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, valueDesForKey);\n            }\n        }\n        EnumResolver enumRes \u003d constructEnumResolver(enumClass, config, beanDesc.findJsonValueAccessor());\n        // May have @JsonCreator for static factory method:\n        for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n            if (_hasCreatorAnnotation(ctxt, factory)) {\n                int argCount \u003d factory.getParameterCount();\n                if (argCount \u003d\u003d 1) {\n                    Class\u003c?\u003e returnType \u003d factory.getRawReturnType();\n                    // usually should be class, but may be just plain Enum\u003c?\u003e (for Enum.valueOf()?)\n                    if (returnType.isAssignableFrom(enumClass)) {\n                        // note: mostly copied from \u0027EnumDeserializer.deserializerForCreator(...)\u0027\n                        if (factory.getRawParameterType(0) !\u003d String.class) {\n                            throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");\n                        }\n                        if (config.canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(factory.getMember(),\n                                    ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                        }\n                        return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory);\n                    }\n                }\n                throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                        +enumClass.getName()+\")\");\n            }\n        }\n        // Also, need to consider @JsonValue, if one found\n        return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);\n    }",
    "begin_line": 1450,
    "end_line": 1499,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findPropertyTypeDeserializer#1520",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findPropertyTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n            JavaType baseType, AnnotatedMember annotated)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, annotated, baseType);        \n        // Defaulting: if no annotations on member, check value class\n        if (b \u003d\u003d null) {\n            return findTypeDeserializer(config, baseType);\n        }\n        // but if annotations found, may need to resolve subtypes:\n        Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, annotated, baseType);\n        return b.buildTypeDeserializer(config, baseType, subtypes);\n    }",
    "begin_line": 1520,
    "end_line": 1534,
    "comment": "/** \n * Method called to create a type information deserializer for values of given non-container property, if one is needed. If not needed (no polymorphic handling configured for property), should return null. \u003cp\u003e Note that this method is only called for non-container bean properties, and not for values in container types or root values (or container properties)\n * @param baseType Declared base type of the value to deserializer (actualdeserializer type will be this type or its subtype)\n * @return Type deserializer to use for given base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findPropertyContentTypeDeserializer#1547",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findPropertyContentTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n            JavaType containerType, AnnotatedMember propertyEntity)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);        \n        JavaType contentType \u003d containerType.getContentType();\n        // Defaulting: if no annotations on member, check class\n        if (b \u003d\u003d null) {\n            return findTypeDeserializer(config, contentType);\n        }\n        // but if annotations found, may need to resolve subtypes:\n        Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, propertyEntity, contentType);\n        return b.buildTypeDeserializer(config, contentType, subtypes);\n    }",
    "begin_line": 1547,
    "end_line": 1562,
    "comment": "/** \n * Method called to find and create a type information deserializer for values of given container (list, array, map) property, if one is needed. If not needed (no polymorphic handling configured for property), should return null. \u003cp\u003e Note that this method is only called for container bean properties, and not for values in container types or root values (or non-container properties)\n * @param containerType Type of property; must be a container type\n * @param propertyEntity Field or method that contains container property\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findDefaultDeserializer#1571",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findDefaultDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e rawType \u003d type.getRawClass();\n        // Object (\"untyped\"), String equivalents:\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            // 11-Feb-2015, tatu: As per [databind#700] need to be careful wrt non-default Map, List.\n            DeserializationConfig config \u003d ctxt.getConfig();\n            JavaType lt, mt;\n            \n            if (_factoryConfig.hasAbstractTypeResolvers()) {\n                lt \u003d _findRemappedType(config, List.class);\n                mt \u003d _findRemappedType(config, Map.class);\n            } else {\n                lt \u003d mt \u003d null;\n            }\n            return new UntypedObjectDeserializer(lt, mt);\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            // [databind#199]: Can and should \u0027upgrade\u0027 to a Collection type:\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType[] tps \u003d tf.findTypeParameters(type, CLASS_ITERABLE);\n            JavaType elemType \u003d (tps \u003d\u003d null || tps.length !\u003d 1) ? TypeFactory.unknownType() : tps[0];\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            // Should we re-introspect beanDesc? For now let\u0027s not...\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        if (rawType \u003d\u003d CLASS_MAP_ENTRY) {\n            // 28-Apr-2015, tatu: TypeFactory does it all for us already so\n            JavaType kt \u003d type.containedTypeOrUnknown(0);\n            JavaType vt \u003d type.containedTypeOrUnknown(1);\n            TypeDeserializer vts \u003d (TypeDeserializer) vt.getTypeHandler();\n            if (vts \u003d\u003d null) {\n                vts \u003d findTypeDeserializer(ctxt.getConfig(), vt);\n            }\n            JsonDeserializer\u003cObject\u003e valueDeser \u003d vt.getValueHandler();\n            KeyDeserializer keyDes \u003d (KeyDeserializer) kt.getValueHandler();\n            return new MapEntryDeserializer(type, keyDes, valueDeser, vts);\n        }\n        String clsName \u003d rawType.getName();\n        if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n            // Primitives/wrappers, other Numbers:\n            JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d DateDeserializers.find(rawType, clsName);\n            }\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        // and a few Jackson types as well:\n        if (rawType \u003d\u003d TokenBuffer.class) {\n            return new TokenBufferDeserializer();\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d findOptionalStdDeserializer(ctxt, type, beanDesc);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        return JdkDeserializers.find(rawType, clsName);\n    }",
    "begin_line": 1571,
    "end_line": 1634,
    "comment": "/** \n * Helper method called to find one of default serializers for \"well-known\" platform types: JDK-provided types, and small number of public Jackson API types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findRemappedType#1636",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findRemappedType(com.fasterxml.jackson.databind.DeserializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JavaType _findRemappedType(DeserializationConfig config, Class\u003c?\u003e rawType) throws JsonMappingException {\n        JavaType type \u003d mapAbstractType(config, config.constructType(rawType));\n        return (type \u003d\u003d null || type.hasRawClass(rawType)) ? null : type;\n    }",
    "begin_line": 1636,
    "end_line": 1639,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomTreeNodeDeserializer#1647",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomTreeNodeDeserializer(java.lang.Class\u003c? extends com.fasterxml.jackson.databind.JsonNode\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomTreeNodeDeserializer(Class\u003c? extends JsonNode\u003e type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findTreeNodeDeserializer(type, config, beanDesc);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1647,
    "end_line": 1658,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomReferenceDeserializer#1660",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomReferenceDeserializer(com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomReferenceDeserializer(ReferenceType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer contentTypeDeserializer, JsonDeserializer\u003c?\u003e contentDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findReferenceDeserializer(type, config, beanDesc,\n                    contentTypeDeserializer, contentDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1660,
    "end_line": 1673,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomBeanDeserializer#1676",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomBeanDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonDeserializer\u003cObject\u003e _findCustomBeanDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findBeanDeserializer(type, config, beanDesc);\n            if (deser !\u003d null) {\n                return (JsonDeserializer\u003cObject\u003e) deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1676,
    "end_line": 1687,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomArrayDeserializer#1689",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomArrayDeserializer(com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomArrayDeserializer(ArrayType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer\u003c?\u003e elementDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findArrayDeserializer(type, config,\n                    beanDesc, elementTypeDeserializer, elementDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1689,
    "end_line": 1702,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomCollectionDeserializer#1704",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomCollectionDeserializer(com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomCollectionDeserializer(CollectionType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer\u003c?\u003e elementDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findCollectionDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1704,
    "end_line": 1717,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomCollectionLikeDeserializer#1719",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomCollectionLikeDeserializer(com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer\u003c?\u003e elementDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findCollectionLikeDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1719,
    "end_line": 1732,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomEnumDeserializer#1734",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomEnumDeserializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomEnumDeserializer(Class\u003c?\u003e type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findEnumDeserializer(type, config, beanDesc);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1734,
    "end_line": 1745,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomMapDeserializer#1747",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomMapDeserializer(com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomMapDeserializer(MapType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer\u003c?\u003e elementDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findMapDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1747,
    "end_line": 1761,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomMapLikeDeserializer#1763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomMapLikeDeserializer(com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomMapLikeDeserializer(MapLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer\u003c?\u003e elementDeserializer)\n        throws JsonMappingException\n    {\n        for (Deserializers d  : _factoryConfig.deserializers()) {\n            JsonDeserializer\u003c?\u003e deser \u003d d.findMapLikeDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1763,
    "end_line": 1777,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findDeserializerFromAnnotation#1793",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr !\u003d null) {\n            Object deserDef \u003d intr.findDeserializer(ann);\n            if (deserDef !\u003d null) {\n                return ctxt.deserializerInstance(ann, deserDef);\n            }\n        }\n        return null;\n    }",
    "begin_line": 1793,
    "end_line": 1805,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization; and if so, to instantiate, that deserializer to use. Note that deserializer will NOT yet be contextualized so caller needs to take care to call contextualization appropriately. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findKeyDeserializerFromAnnotation#1812",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findKeyDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n            throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr !\u003d null) {\n            Object deserDef \u003d intr.findKeyDeserializer(ann);\n            if (deserDef !\u003d null) {\n                return ctxt.keyDeserializerInstance(ann, deserDef);\n            }\n        }\n        return null;\n    }",
    "begin_line": 1812,
    "end_line": 1824,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findContentDeserializerFromAnnotation#1829",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findContentDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findContentDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr !\u003d null) {\n            Object deserDef \u003d intr.findContentDeserializer(ann);\n            if (deserDef !\u003d null) {\n                return ctxt.deserializerInstance(ann, deserDef);\n            }\n        }\n        return null;\n    }",
    "begin_line": 1829,
    "end_line": 1841,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.resolveMemberAndTypeAnnotations#1852",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.resolveMemberAndTypeAnnotations(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType resolveMemberAndTypeAnnotations(DeserializationContext ctxt,\n            AnnotatedMember member, JavaType type)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr \u003d\u003d null) {\n            return type;\n        }\n\n        // First things first: see if we can find annotations on declared\n        // type\n\n        if (type.isMapLikeType()) {\n            JavaType keyType \u003d type.getKeyType();\n            if (keyType !\u003d null) {\n                Object kdDef \u003d intr.findKeyDeserializer(member);\n                KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n                if (kd !\u003d null) {\n                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                    keyType \u003d type.getKeyType(); // just in case it\u0027s used below\n                }\n            }\n        }\n\n        if (type.hasContentType()) { // that is, is either container- or reference-type\n            Object cdDef \u003d intr.findContentDeserializer(member);\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n            if (cd !\u003d null) {\n                type \u003d type.withContentValueHandler(cd);\n            }\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(\n                    ctxt.getConfig(), type, (AnnotatedMember) member);            \t\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n        TypeDeserializer valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(),\n                    type, (AnnotatedMember) member);\n        if (valueTypeDeser !\u003d null) {\n            type \u003d type.withTypeHandler(valueTypeDeser);\n        }\n\n        // Second part: find actual type-override annotations on member, if any\n\n        // 18-Jun-2016, tatu: Should we re-do checks for annotations on refined\n        //   subtypes as well? Code pre-2.8 did not do this, but if we get bug\n        //   reports may need to consider\n        type \u003d intr.refineDeserializationType(ctxt.getConfig(), member, type);\n        return type;\n    }",
    "begin_line": 1852,
    "end_line": 1901,
    "comment": "/** \n * Helper method used to resolve additional type-related annotation information like type overrides, or handler (serializer, deserializer) overrides, so that from declared field, property or constructor parameter type is used as the base and modified based on annotations, if any.\n * @since 2.8 Combines functionality of \u003ccode\u003emodifyTypeByAnnotation\u003c/code\u003eand \u003ccode\u003eresolveType\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.constructEnumResolver#1903",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.constructEnumResolver(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected EnumResolver constructEnumResolver(Class\u003c?\u003e enumClass,\n            DeserializationConfig config, AnnotatedMember jsonValueAccessor)\n    {\n        if (jsonValueAccessor !\u003d null) {\n            if (config.canOverrideAccessModifiers()) {\n                ClassUtil.checkAndFixAccess(jsonValueAccessor.getMember(),\n                        config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            return EnumResolver.constructUnsafeUsingMethod(enumClass,\n                    jsonValueAccessor, config.getAnnotationIntrospector());\n        }\n        // 14-Mar-2016, tatu: We used to check `DeserializationFeature.READ_ENUMS_USING_TO_STRING`\n        //   here, but that won\u0027t do: it must be dynamically changeable...\n        return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());\n    }",
    "begin_line": 1903,
    "end_line": 1917,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._hasCreatorAnnotation#1922",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._hasCreatorAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected boolean _hasCreatorAnnotation(DeserializationContext ctxt,\n            Annotated ann) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr !\u003d null) {\n            JsonCreator.Mode mode \u003d intr.findCreatorAnnotation(ctxt.getConfig(), ann);\n            return (mode !\u003d null) \u0026\u0026 (mode !\u003d JsonCreator.Mode.DISABLED); \n        }\n        return false;\n    }",
    "begin_line": 1922,
    "end_line": 1930,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.modifyTypeByAnnotation#1945",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.modifyTypeByAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    protected JavaType modifyTypeByAnnotation(DeserializationContext ctxt,\n            Annotated a, JavaType type)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr \u003d\u003d null) {\n            return type;\n        }\n\n        // First, deserializers for key/value types?\n        /*\n        if (type.isMapLikeType()) {\n            JavaType keyType \u003d type.getKeyType();\n            // 21-Mar-2011, tatu: ... and associated deserializer too (unless already assigned)\n            //  (not 100% why or how, but this does seem to get called more than once, which\n            //   is not good: for now, let\u0027s just avoid errors)\n            if (keyType !\u003d null \u0026\u0026 keyType.getValueHandler() \u003d\u003d null) {\n                Object kdDef \u003d intr.findKeyDeserializer(a);\n                KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(a, kdDef);\n                if (kd !\u003d null) {\n                    type \u003d (T) ((MapLikeType) type).withKeyValueHandler(kd);\n                    keyType \u003d type.getKeyType(); // just in case it\u0027s used below\n                }\n            }            \n        }\n        JavaType contentType \u003d type.getContentType();\n        if (contentType !\u003d null) {\n           // ... as well as deserializer for contents:\n           if (contentType.getValueHandler() \u003d\u003d null) { // as with above, avoid resetting (which would trigger exception)\n               Object cdDef \u003d intr.findContentDeserializer(a);\n                JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(a, cdDef);\n                if (cd !\u003d null) {\n                    type \u003d (T) type.withContentValueHandler(cd);\n                }\n            }\n        }\n        */\n        // then: type refinement(s)?\n        return intr.refineDeserializationType(ctxt.getConfig(), a, type);\n    }",
    "begin_line": 1945,
    "end_line": 1984,
    "comment": "/** \n * Method called to see if given method has annotations that indicate a more specific type than what the argument specifies.\n * @deprecated Since 2.8; call {@link #resolveMemberAndTypeAnnotations} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.resolveType#1990",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.resolveType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Deprecated resolveType(DeserializationContext ctxt,\n            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n        throws JsonMappingException\n    {\n        return resolveMemberAndTypeAnnotations(ctxt, member, type);\n    }",
    "begin_line": 1990,
    "end_line": 1995,
    "comment": "/** \n * @deprecated since 2.8 call {@link #resolveMemberAndTypeAnnotations} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findJsonValueFor#2001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findJsonValueFor(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated _findJsonValueFor(DeserializationConfig config, JavaType enumType)\n    {\n        if (enumType \u003d\u003d null) {\n            return null;\n        }\n        BeanDescription beanDesc \u003d config.introspect(enumType);\n        return beanDesc.findJsonValueMethod();\n    }",
    "begin_line": 2001,
    "end_line": 2008,
    "comment": "/** \n * @deprecated since 2.8 call \u003ccode\u003efindJsonValueMethod\u003c/code\u003e on {@link BeanDescription} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.BeanDeserializerFactory#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "public BeanDeserializerFactory(DeserializerFactoryConfig config) {\n        super(config);\n    }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.withConfig#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "@Override\n    public DeserializerFactory withConfig(DeserializerFactoryConfig config)\n    {\n        if (_factoryConfig \u003d\u003d config) {\n            return this;\n        }\n        /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\n         *    and we pretty much have to here either choose between losing subtype instance\n         *    when registering additional deserializers, or losing deserializers.\n         *    Instead, let\u0027s actually just throw an error if this method is called when subtype\n         *    has not properly overridden this method; this to indicate problem as soon as possible.\n         */\n        ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\");\n        return new BeanDeserializerFactory(config);\n    }",
    "begin_line": 92,
    "end_line": 105,
    "comment": "/** \n * Method used by module registration functionality, to construct a new bean deserializer factory with different configuration settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.createBeanDeserializer#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom !\u003d null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() \u0026\u0026 !type.isPrimitive() \u0026\u0026 !type.isEnumType()) {\n            // Let\u0027s make it possible to materialize abstract types.\n            JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType !\u003d null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn\u0027t have constructors, for one)\n                 */\n                beanDesc \u003d config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer\u003cObject\u003e deser \u003d (JsonDeserializer\u003cObject\u003e) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser !\u003d null) {\n            return deser;\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        checkIllegalTypes(ctxt, type, beanDesc);\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }",
    "begin_line": 119,
    "end_line": 167,
    "comment": "/** \n * Method that  {@link DeserializerCache}s call to create a new deserializer for types other than Collections, Maps, arrays and enums.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.createBuilderBasedDeserializer#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public JsonDeserializer\u003cObject\u003e createBuilderBasedDeserializer(DeserializationContext ctxt,\n            JavaType valueType, BeanDescription beanDesc, Class\u003c?\u003e builderClass)\n                    throws JsonMappingException\n    {\n        // First: need a BeanDescription for builder class\n        JavaType builderType \u003d ctxt.constructType(builderClass);\n        BeanDescription builderDesc \u003d ctxt.getConfig().introspectForBuilder(builderType);\n        return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\n    }",
    "begin_line": 170,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.findStdDeserializer#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // note: we do NOT check for custom deserializers here, caller has already\n        // done that\n        JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n        // Also: better ensure these are post-processable?\n        if (deser !\u003d null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser \u003d mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "begin_line": 184,
    "end_line": 200,
    "comment": "/** \n * Method called by  {@link BeanDeserializerFactory} to see if there might be a standarddeserializer registered for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.materializeAbstractType#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JavaType materializeAbstractType(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // May have multiple resolvers, call in precedence order until one returns non-null\n        for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n            JavaType concrete \u003d r.resolveAbstractType(ctxt.getConfig(), beanDesc);\n            if (concrete !\u003d null) {\n                return concrete;\n            }\n        }\n        return null;\n    }",
    "begin_line": 202,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildBeanDeserializer#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // First: check what creators we can use, if any\n        ValueInstantiator valueInstantiator;\n        /* 04-Jun-2015, tatu: To work around [databind#636], need to catch the\n         *    issue, defer; this seems like a reasonable good place for now.\n         *   Note, however, that for non-Bean types (Collections, Maps) this\n         *   probably won\u0027t work and needs to be added elsewhere.\n         */\n        try {\n            valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n        } catch (NoClassDefFoundError error) {\n            return new ErrorThrowingDeserializer(error);\n        } catch (IllegalArgumentException e) {\n            // 05-Apr-2017, tatu: Although it might appear cleaner to require collector\n            //   to throw proper exception, it doesn\u0027t actually have reference to this\n            //   instance so...\n            throw InvalidDefinitionException.from(ctxt.getParser(), e.getMessage(),\n                    beanDesc, null);\n        }\n        BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(valueInstantiator);\n         // And then setters for deserializing from JSON Object\n        addBeanProps(ctxt, beanDesc, builder);\n        addObjectIdReader(ctxt, beanDesc, builder);\n\n        // managed/back reference fields/setters need special handling... first part\n        addBackReferenceProperties(ctxt, beanDesc, builder);\n        addInjectables(ctxt, beanDesc, builder);\n        \n        final DeserializationConfig config \u003d ctxt.getConfig();\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder \u003d mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        JsonDeserializer\u003c?\u003e deserializer;\n        if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\n            deserializer \u003d builder.buildAbstract();\n        } else {\n            deserializer \u003d builder.build();\n        }\n        // may have modifier(s) that wants to modify or replace serializer we just built\n        // (note that `resolve()` and `createContextual()` called later on)\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return (JsonDeserializer\u003cObject\u003e) deserializer;\n    }",
    "begin_line": 231,
    "end_line": 283,
    "comment": "/** \n * Method that is to actually build a bean deserializer instance. All basic sanity checks have been done to know that what we have may be a valid bean type, and that there are no default simple deserializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildBuilderBasedDeserializer#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonDeserializer\u003cObject\u003e buildBuilderBasedDeserializer(\n    \t\tDeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc)\n        throws JsonMappingException\n    {\n        // Creators, anyone? (to create builder itself)\n        ValueInstantiator valueInstantiator;\n        try {\n            valueInstantiator \u003d findValueInstantiator(ctxt, builderDesc);\n        } catch (NoClassDefFoundError error) {\n            return new ErrorThrowingDeserializer(error);\n        } catch (IllegalArgumentException e) {\n            // 05-Apr-2017, tatu: Although it might appear cleaner to require collector\n            //   to throw proper exception, it doesn\u0027t actually have reference to this\n            //   instance so...\n            throw InvalidDefinitionException.from(ctxt.getParser(), e.getMessage(),\n                    builderDesc, null);\n        }\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, builderDesc);\n        builder.setValueInstantiator(valueInstantiator);\n         // And then \"with methods\" for deserializing from JSON Object\n        addBeanProps(ctxt, builderDesc, builder);\n        addObjectIdReader(ctxt, builderDesc, builder);\n        \n        // managed/back reference fields/setters need special handling... first part\n        addBackReferenceProperties(ctxt, builderDesc, builder);\n        addInjectables(ctxt, builderDesc, builder);\n\n        JsonPOJOBuilder.Value builderConfig \u003d builderDesc.findPOJOBuilderConfig();\n        final String buildMethodName \u003d (builderConfig \u003d\u003d null) ?\n                JsonPOJOBuilder.DEFAULT_BUILD_METHOD : builderConfig.buildMethodName;\n        \n        // and lastly, find build method to use:\n        AnnotatedMethod buildMethod \u003d builderDesc.findMethod(buildMethodName, null);\n        if (buildMethod !\u003d null) { // note: can\u0027t yet throw error; may be given build method\n            if (config.canOverrideAccessModifiers()) {\n            \tClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n        }\n        builder.setPOJOBuilder(buildMethod, builderConfig);\n        // this may give us more information...\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder \u003d mod.updateBuilder(config, builderDesc, builder);\n            }\n        }\n        JsonDeserializer\u003c?\u003e deserializer \u003d builder.buildBuilderBased(\n        \t\tvalueType, buildMethodName);\n\n        // [JACKSON-440]: may have modifier(s) that wants to modify or replace serializer we just built:\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer \u003d mod.modifyDeserializer(config, builderDesc, deserializer);\n            }\n        }\n        return (JsonDeserializer\u003cObject\u003e) deserializer;\n    }",
    "begin_line": 293,
    "end_line": 349,
    "comment": "/** \n * Method for constructing a bean deserializer that uses specified intermediate Builder for binding data, and construction of the value instance. Note that implementation is mostly copied from the regular BeanDeserializer build method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addObjectIdReader#351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addObjectIdReader(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n        if (objectIdInfo \u003d\u003d null) {\n            return;\n        }\n        Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n        JavaType idType;\n        SettableBeanProperty idProp;\n        ObjectIdGenerator\u003c?\u003e gen;\n\n        ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n\n        // Just one special case: Property-based generator is trickier\n        if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n            PropertyName propName \u003d objectIdInfo.getPropertyName();\n            idProp \u003d builder.findProperty(propName);\n            if (idProp \u003d\u003d null) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n                        +beanDesc.getBeanClass().getName()+\": can not find property with name \u0027\"+propName+\"\u0027\");\n            }\n            idType \u003d idProp.getType();\n            gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n        } else {\n            JavaType type \u003d ctxt.constructType(implClass);\n            idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            idProp \u003d null;\n            gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        }\n        // also: unlike with value deserializers, let\u0027s just resolve one we need here\n        JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n        builder.setObjectIdReader(ObjectIdReader.construct(idType,\n                objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n    }",
    "begin_line": 351,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildThrowableDeserializer#389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public JsonDeserializer\u003cObject\u003e buildThrowableDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        // first: construct like a regular bean deserializer...\n        BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n\n        addBeanProps(ctxt, beanDesc, builder);\n        // (and assume there won\u0027t be any back references)\n\n        // But then let\u0027s decorate things a bit\n        /* To resolve [JACKSON-95], need to add \"initCause\" as setter\n         * for exceptions (sub-classes of Throwable).\n         */\n        AnnotatedMethod am \u003d beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\n        if (am !\u003d null) { // should never be null\n            SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am,\n                    new PropertyName(\"cause\"));\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, propDef,\n                    am.getParameterType(0));\n            if (prop !\u003d null) {\n                /* 21-Aug-2011, tatus: We may actually have found \u0027cause\u0027 property\n                 *   to set... but let\u0027s replace it just in case,\n                 *   otherwise can end up with odd errors.\n                 */\n                builder.addOrReplaceProperty(prop, true);\n            }\n        }\n\n        // And also need to ignore \"localizedMessage\"\n        builder.addIgnorable(\"localizedMessage\");\n        // Java 7 also added \"getSuppressed\", skip if we have such data:\n        builder.addIgnorable(\"suppressed\");\n        /* As well as \"message\": it will be passed via constructor,\n         * as there\u0027s no \u0027setMessage()\u0027 method\n        */\n        builder.addIgnorable(\"message\");\n\n        // update builder now that all information is in?\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder \u003d mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n        \n        /* At this point it ought to be a BeanDeserializer; if not, must assume\n         * it\u0027s some other thing that can handle deserialization ok...\n         */\n        if (deserializer instanceof BeanDeserializer) {\n            deserializer \u003d new ThrowableDeserializer((BeanDeserializer) deserializer);\n        }\n\n        // may have modifier(s) that wants to modify or replace serializer we just built:\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return (JsonDeserializer\u003cObject\u003e) deserializer;\n    }",
    "begin_line": 389,
    "end_line": 451,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructBeanDeserializerBuilder#465",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,\n            BeanDescription beanDesc) {\n        return new BeanDeserializerBuilder(beanDesc, ctxt);\n    }",
    "begin_line": 465,
    "end_line": 468,
    "comment": "/** \n * Overridable method that constructs a  {@link BeanDeserializerBuilder}which is used to accumulate information needed to create deserializer instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addBeanProps#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        final boolean isConcrete \u003d !beanDesc.getType().isAbstract();\n        final SettableBeanProperty[] creatorProps \u003d isConcrete\n                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n                : null;\n        final boolean hasCreatorProps \u003d (creatorProps !\u003d null);\n\n        // 01-May-2016, tatu: Which base type to use here gets tricky, since\n        //   it may often make most sense to use general type for overrides,\n        //   but what we have here may be more specific impl type. But for now\n        //   just use it as is.\n        JsonIgnoreProperties.Value ignorals \u003d ctxt.getConfig()\n                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                        beanDesc.getClassInfo());\n        Set\u003cString\u003e ignored;\n\n        if (ignorals !\u003d null) {\n            boolean ignoreAny \u003d ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            // Or explicit/implicit definitions?\n            ignored \u003d ignorals.getIgnored();\n            for (String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored \u003d Collections.emptySet();\n        }\n\n        // Also, do we have a fallback \"any\" setter?\n        AnnotatedMember anySetter \u003d beanDesc.findAnySetterAccessor();\n        if (anySetter !\u003d null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n        } else {\n            Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n            if (ignored2 !\u003d null) {\n                for (String propName : ignored2) {\n                    // allow ignoral of similarly named JSON property, but do not force;\n                    // latter means NOT adding this to \u0027ignored\u0027:\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters \u003d ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n                \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n        // Ok: let\u0027s then filter out property definitions\n        List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), ignored);\n\n        // After which we can let custom code change the set\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n\n        // At which point we still have all kinds of properties; not all with mutators:\n        for (BeanPropertyDefinition propDef : propDefs) {\n            SettableBeanProperty prop \u003d null;\n            \n            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             */\n            if (propDef.hasSetter()) {\n                AnnotatedMethod setter \u003d propDef.getSetter();\n                JavaType propertyType \u003d setter.getParameterType(0);\n                prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                AnnotatedField field \u003d propDef.getField();\n                JavaType propertyType \u003d field.getType();\n                prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else {\n                // NOTE: specifically getter, since field was already checked above\n                AnnotatedMethod getter \u003d propDef.getGetter();\n                if (getter !\u003d null) {\n                    if (useGettersAsSetters \u0026\u0026 _isSetterlessType(getter.getRawType())) {\n                        prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n                    } else if (!propDef.hasConstructorParameter()) {\n                        PropertyMetadata md \u003d propDef.getMetadata();\n                        // 25-Oct-2016, tatu: If merging enabled, might not need setter.\n                        //   We can not quite support this with creator parameters; in theory\n                        //   possibly, but right not not due to complexities of routing, so\n                        //   just prevent\n                        if (md.getMergeInfo() !\u003d null) {\n                            prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n                        }\n                    }\n                }\n            }\n\n            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n            //   (since they are never used anyway)\n            if (hasCreatorProps \u0026\u0026 propDef.hasConstructorParameter()) {\n                /* If property is passed via constructor parameter, we must\n                 * handle things in special way. Not sure what is the most optimal way...\n                 * for now, let\u0027s just call a (new) method in builder, which does nothing.\n                 */\n                // but let\u0027s call a method just to allow custom builders to be aware...\n                final String name \u003d propDef.getName();\n                CreatorProperty cprop \u003d null;\n                if (creatorProps !\u003d null) {\n                    for (SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) \u0026\u0026 (cp instanceof CreatorProperty)) {\n                            cprop \u003d (CreatorProperty) cp;\n                            break;\n                        }\n                    }\n                }\n                if (cprop \u003d\u003d null) {\n                    List\u003cString\u003e n \u003d new ArrayList\u003c\u003e();\n                    for (SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                            \"Could not find creator property with name \u0027%s\u0027 (known Creator properties: %s)\",\n                            name, n);\n                    continue;\n                }\n                if (prop !\u003d null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                Class\u003c?\u003e[] views \u003d propDef.findViews();\n                if (views \u003d\u003d null) {\n                    views \u003d beanDesc.findDefaultViews();\n                }\n                cprop.setViews(views);\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n            if (prop !\u003d null) {\n                // one more thing before adding to builder: copy any metadata\n                Class\u003c?\u003e[] views \u003d propDef.findViews();\n                if (views \u003d\u003d null) {\n                    views \u003d beanDesc.findDefaultViews();\n                }\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }",
    "begin_line": 477,
    "end_line": 620,
    "comment": "/** \n * Method called to figure out settable properties for the bean deserializer to use. \u003cp\u003e Note: designed to be overridable, and effort is made to keep interface similar between versions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory._isSetterlessType#622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory._isSetterlessType(java.lang.Class\u003c?\u003e)",
    "snippet": "private boolean _isSetterlessType(Class\u003c?\u003e rawType) {\n        // May also need to consider getters\n        // for Map/Collection properties; but with lowest precedence\n        // should only consider Collections and Maps, for now?\n        return Collection.class.isAssignableFrom(rawType)\n                || Map.class.isAssignableFrom(rawType);\n    }",
    "begin_line": 622,
    "end_line": 628,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.filterBeanProps#636",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "protected List\u003cBeanPropertyDefinition\u003e filterBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder,\n            List\u003cBeanPropertyDefinition\u003e propDefsIn,\n            Set\u003cString\u003e ignored)\n        throws JsonMappingException\n    {\n        ArrayList\u003cBeanPropertyDefinition\u003e result \u003d new ArrayList\u003cBeanPropertyDefinition\u003e(\n                Math.max(4, propDefsIn.size()));\n        HashMap\u003cClass\u003c?\u003e,Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e,Boolean\u003e();\n        // These are all valid setters, but we do need to introspect bit more\n        for (BeanPropertyDefinition property : propDefsIn) {\n            String name \u003d property.getName();\n            if (ignored.contains(name)) { // explicit ignoral using @JsonIgnoreProperties needs to block entries\n                continue;\n            }\n            if (!property.hasConstructorParameter()) { // never skip constructor params\n                Class\u003c?\u003e rawPropertyType \u003d property.getRawPrimaryType();\n                // Some types are declared as ignorable as well\n                if ((rawPropertyType !\u003d null)\n                        \u0026\u0026 isIgnorableType(ctxt.getConfig(), property, rawPropertyType, ignoredTypes)) {\n                    // important: make ignorable, to avoid errors if value is actually seen\n                    builder.addIgnorable(name);\n                    continue;\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }",
    "begin_line": 636,
    "end_line": 664,
    "comment": "/** \n * Helper method called to filter out explicit ignored properties, as well as properties that have \"ignorable types\". Note that this will not remove properties that have no setters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addBackReferenceProperties#672",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBackReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addBackReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        // and then back references, not necessarily found as regular properties\n        List\u003cBeanPropertyDefinition\u003e refProps \u003d beanDesc.findBackReferences();\n        if (refProps !\u003d null) {\n            for (BeanPropertyDefinition refProp : refProps) {\n                /*\n                AnnotatedMember m \u003d refProp.getMutator();\n                JavaType type;\n                if (m instanceof AnnotatedMethod) {\n                    type \u003d ((AnnotatedMethod) m).getParameterType(0);\n                } else {\n                    type \u003d m.getType();\n                    // 30-Mar-2017, tatu: Unfortunately it is not yet possible to make back-refs\n                    //    work through constructors; but let\u0027s at least indicate the issue for now\n                    if (m instanceof AnnotatedParameter) {\n                        ctxt.reportBadTypeDefinition(beanDesc,\n\"Can not bind back reference using Creator parameter (reference \u0027%s\u0027, parameter index #%d)\",\nname, ((AnnotatedParameter) m).getIndex());\n                    }\n                }\n                */\n                String refName \u003d refProp.findReferenceName();\n                builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt,\n                        beanDesc, refProp, refProp.getPrimaryType()));\n            }\n        }\n    }",
    "begin_line": 672,
    "end_line": 701,
    "comment": "/** \n * Method that will find if bean has any managed- or back-reference properties, and if so add them to bean, to be linked during resolution phase.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addReferenceProperties#704",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "@Deprecated addReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        addBackReferenceProperties(ctxt, beanDesc, builder);\n    }",
    "begin_line": 704,
    "end_line": 709,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addInjectables#715",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addInjectables(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addInjectables(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n        if (raw !\u003d null) {\n            for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n                AnnotatedMember m \u003d entry.getValue();\n                builder.addInjectable(PropertyName.construct(m.getName()),\n                        m.getType(),\n                        beanDesc.getClassAnnotations(), m, entry.getKey());\n            }\n        }\n    }",
    "begin_line": 715,
    "end_line": 728,
    "comment": "/** \n * Method called locate all members used for value injection (if any), constructor  {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructAnySetter#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,\n            BeanDescription beanDesc, AnnotatedMember mutator)\n        throws JsonMappingException\n    {\n        //find the java type based on the annotated setter method or setter field \n        BeanProperty prop;\n        JavaType keyType;\n        JavaType valueType;\n\n        if (mutator instanceof AnnotatedMethod) {\n            // we know it\u0027s a 2-arg method, second arg is the value\n            AnnotatedMethod am \u003d (AnnotatedMethod) mutator;\n            keyType \u003d am.getParameterType(0);\n            valueType \u003d am.getParameterType(1);\n            valueType \u003d resolveMemberAndTypeAnnotations(ctxt, mutator, valueType);\n            prop \u003d new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    valueType, null, mutator,\n                    PropertyMetadata.STD_OPTIONAL);\n\n        } else if (mutator instanceof AnnotatedField) {\n            AnnotatedField af \u003d (AnnotatedField) mutator;\n            // get the type from the content type of the map object\n            JavaType mapType \u003d af.getType();\n            mapType \u003d resolveMemberAndTypeAnnotations(ctxt, mutator, mapType);\n            keyType \u003d mapType.getKeyType();\n            valueType \u003d mapType.getContentType();\n            prop \u003d new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    mapType, null, mutator, PropertyMetadata.STD_OPTIONAL);\n        } else {\n            return ctxt.reportBadDefinition(beanDesc.getType(), String.format(\n                    \"Unrecognized mutator type for any setter: %s\", mutator.getClass()));\n        }\n        // First: see if there are explicitly specified \n        // and then possible direct deserializer override on accessor\n        KeyDeserializer keyDeser \u003d findKeyDeserializerFromAnnotation(ctxt, mutator);\n        if (keyDeser \u003d\u003d null) {\n            keyDeser \u003d keyType.getValueHandler();\n        }\n        if (keyDeser \u003d\u003d null) {\n            keyDeser \u003d ctxt.findKeyDeserializer(keyType, prop);\n        } else {\n            if (keyDeser instanceof ContextualKeyDeserializer) {\n                keyDeser \u003d ((ContextualKeyDeserializer) keyDeser)\n                        .createContextual(ctxt, prop);\n            }\n        }\n        JsonDeserializer\u003cObject\u003e deser \u003d findContentDeserializerFromAnnotation(ctxt, mutator);\n        if (deser \u003d\u003d null) {\n            deser \u003d valueType.getValueHandler();\n        }\n        if (deser !\u003d null) {\n            // As per [databind#462] need to ensure we contextualize deserializer before passing it on\n            deser \u003d (JsonDeserializer\u003cObject\u003e) ctxt.handlePrimaryContextualization(deser, prop, valueType);\n        }\n        TypeDeserializer typeDeser \u003d valueType.getTypeHandler();\n        return new SettableAnyProperty(prop, mutator, valueType,\n                keyDeser, deser, typeDeser);\n    }",
    "begin_line": 739,
    "end_line": 796,
    "comment": "/** \n * Method called to construct fallback  {@link SettableAnyProperty}for handling unknown bean properties, given a method that has been designated as such setter.\n * @param mutator Either 2-argument method (setter, with key and value), or Fieldthat contains Map; either way accessor used for passing \"any values\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructSettableProperty#805",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef,\n            JavaType propType0)\n        throws JsonMappingException\n    {\n        // need to ensure method is callable (for non-public)\n        AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\n        // 08-Sep-2016, tatu: issues like [databind#1342] suggest something fishy\n        //   going on; add sanity checks to try to pin down actual problem...\n        //   Possibly passing creator parameter?\n        if (mutator \u003d\u003d null) {\n            ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\n        }\n        JavaType type \u003d resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\n        // Does the Method specify the deserializer to use? If so, let\u0027s use it.\n        TypeDeserializer typeDeser \u003d type.getTypeHandler();\n        SettableBeanProperty prop;\n        if (mutator instanceof AnnotatedMethod) {\n            prop \u003d new MethodProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n        } else {\n            // 08-Sep-2016, tatu: wonder if we should verify it is `AnnotatedField` to be safe?\n            prop \u003d new FieldProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser \u003d\u003d null) {\n            deser \u003d type.getValueHandler();\n        }\n        if (deser !\u003d null) {\n            deser \u003d ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop \u003d prop.withValueDeserializer(deser);\n        }\n        // need to retain name of managed forward references:\n        AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n        if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n            prop.setManagedReferenceName(ref.getName());\n        }\n        ObjectIdInfo objectIdInfo \u003d propDef.findObjectIdInfo();\n        if (objectIdInfo !\u003d null){\n            prop.setObjectIdInfo(objectIdInfo);\n        }\n        return prop;\n    }",
    "begin_line": 805,
    "end_line": 848,
    "comment": "/** \n * Method that will construct a regular bean property setter using the given setter method.\n * @return Property constructed, if any; or null to indicate thatthere should be no property based on given definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructSetterlessProperty#854",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "snippet": "protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef)\n        throws JsonMappingException\n    {\n        final AnnotatedMethod getter \u003d propDef.getGetter();\n        JavaType type \u003d resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());\n        TypeDeserializer typeDeser \u003d type.getTypeHandler();\n        SettableBeanProperty prop \u003d new SetterlessProperty(propDef, type, typeDeser,\n                beanDesc.getClassAnnotations(), getter);\n        JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, getter);\n        if (deser \u003d\u003d null) {\n            deser \u003d type.getValueHandler();\n        }\n        if (deser !\u003d null) {\n            deser \u003d ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop \u003d prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }",
    "begin_line": 854,
    "end_line": 872,
    "comment": "/** \n * Method that will construct a regular bean property setter using the given setter method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.isPotentialBeanType#888",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isPotentialBeanType(Class\u003c?\u003e type)\n    {\n        String typeStr \u003d ClassUtil.canBeABeanType(type);\n        if (typeStr !\u003d null) {\n            throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");\n        }\n        if (ClassUtil.isProxyType(type)) {\n            throw new IllegalArgumentException(\"Can not deserialize Proxy class \"+type.getName()+\" as a Bean\");\n        }\n        /* also: can\u0027t deserialize some local classes: static are ok; in-method not;\n         * other non-static inner classes are ok\n         */\n        typeStr \u003d ClassUtil.isLocalType(type, true);\n        if (typeStr !\u003d null) {\n            throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");\n        }\n        return true;\n    }",
    "begin_line": 888,
    "end_line": 905,
    "comment": "/** \n * Helper method used to skip processing for types that we know can not be (i.e. are never consider to be) beans:  things like primitives, Arrays, Enums, and proxy types. \u003cp\u003e Note that usually we shouldn\u0027t really be getting these sort of types anyway; but better safe than sorry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.isIgnorableType#911",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Boolean\u003e)",
    "snippet": "protected boolean isIgnorableType(DeserializationConfig config, BeanPropertyDefinition propDef,\n            Class\u003c?\u003e type, Map\u003cClass\u003c?\u003e,Boolean\u003e ignoredTypes)\n    {\n        Boolean status \u003d ignoredTypes.get(type);\n        if (status !\u003d null) {\n            return status.booleanValue();\n        }\n        // 22-Oct-2016, tatu: Slight check to skip primitives, String\n        if ((type \u003d\u003d String.class) || type.isPrimitive()) {\n            status \u003d Boolean.FALSE;\n        } else {\n            // 21-Apr-2016, tatu: For 2.8, can specify config overrides\n            status \u003d config.getConfigOverride(type).getIsIgnoredType();\n            if (status \u003d\u003d null) {\n                BeanDescription desc \u003d config.introspectClassAnnotations(type);\n                status \u003d config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n                // We default to \u0027false\u0027, i.e. not ignorable\n                if (status \u003d\u003d null) {\n                    status \u003d Boolean.FALSE;\n                }\n            }\n        }\n        ignoredTypes.put(type, status);\n        return status.booleanValue();\n    }",
    "begin_line": 911,
    "end_line": 935,
    "comment": "/** \n * Helper method that will check whether given raw type is marked as always ignorable (for purpose of ignoring properties with type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.checkIllegalTypes#940",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        String full \u003d type.getRawClass().getName();\n\n        if (_cfgIllegalClassNames.contains(full)) {\n            ctxt.reportBadTypeDefinition(beanDesc,\n                    \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n        }\n    }",
    "begin_line": 940,
    "end_line": 952,
    "comment": "/** \n * @since 2.8.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.deser.DeserializerCache)",
    "snippet": "protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {\n        super(df, cache);\n    }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * Constructor that will pass specified deserializer factory and cache: cache may be null (in which case default implementation will be used), factory can not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src,\n            DeserializationConfig config, JsonParser jp, InjectableValues values) {\n        super(src, config, jp, values);\n    }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src,\n            DeserializerFactory factory) {\n        super(src, factory);\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src) {\n        super(src);\n    }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "/** \n * @since 2.4.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.copy#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.copy()",
    "snippet": "public DefaultDeserializationContext copy() {\n        throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Method needed to ensure that  {@link ObjectMapper#copy} will workproperly; specifically, that caches are cleared, but settings will otherwise remain identical; and that no sharing of state occurs.\n * @since 2.4.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.findObjectId#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e, ObjectIdResolver)",
    "snippet": "@Override\n    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType)\n    {\n        /* 02-Apr-2015, tatu: As per [databind#742] should allow \u0027null\u0027, similar to how\n         *   missing id already works.\n         */\n        if (id \u003d\u003d null) {\n            return null;\n        }\n\n        final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n\n        if (_objectIds \u003d\u003d null) {\n            _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey,ReadableObjectId\u003e();\n        } else {\n            ReadableObjectId entry \u003d _objectIds.get(key);\n            if (entry !\u003d null) {\n                return entry;\n            }\n        }\n\n        // Not seen yet, must create entry and configure resolver.\n        ObjectIdResolver resolver \u003d null;\n\n        if (_objectIdResolvers \u003d\u003d null) {\n            _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n        } else {\n            for (ObjectIdResolver res : _objectIdResolvers) {\n                if (res.canUseFor(resolverType)) {\n                    resolver \u003d res;\n                    break;\n                }\n            }\n        }\n\n        if (resolver \u003d\u003d null) {\n            resolver \u003d resolverType.newForDeserialization(this);\n            _objectIdResolvers.add(resolver);\n        }\n\n        ReadableObjectId entry \u003d createReadableObjectId(key);\n        entry.setResolver(resolver);\n        _objectIds.put(key, entry);\n        return entry;\n    }",
    "begin_line": 83,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.createReadableObjectId#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createReadableObjectId(IdKey)",
    "snippet": "protected ReadableObjectId createReadableObjectId(IdKey key) {\n        return new ReadableObjectId(key);\n    }",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Overridable factory method to create a new instance of ReadableObjectId or its subclass. It is meant to be overridden when custom ReadableObjectId is needed for  {@link #tryToResolveUnresolvedObjectId}. Default implementation simply constructs default  {@link ReadableObjectId} withgiven \u003ccode\u003ekey\u003c/code\u003e.\n * @param key The key to associate with the new ReadableObjectId\n * @return New ReadableObjectId instance\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.checkUnresolvedObjectId#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.checkUnresolvedObjectId()",
    "snippet": "@Override\n    public void checkUnresolvedObjectId() throws UnresolvedForwardReference\n    {\n        if (_objectIds \u003d\u003d null) {\n            return;\n        }\n        // 29-Dec-2014, tatu: As per [databind#299], may also just let unresolved refs be...\n        if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\n            return;\n        }\n        UnresolvedForwardReference exception \u003d null;\n        for (Entry\u003cIdKey,ReadableObjectId\u003e entry : _objectIds.entrySet()) {\n            ReadableObjectId roid \u003d entry.getValue();\n            if (!roid.hasReferringProperties()) {\n                continue;\n            }\n            // as per [databind#675], allow resolution at this point\n            if (tryToResolveUnresolvedObjectId(roid)) {\n                continue;\n            }\n            if (exception \u003d\u003d null) {\n                exception \u003d new UnresolvedForwardReference(getParser(), \"Unresolved forward references for: \");\n            }\n            Object key \u003d roid.getKey().key;\n            for (Iterator\u003cReferring\u003e iterator \u003d roid.referringProperties(); iterator.hasNext(); ) {\n                Referring referring \u003d iterator.next();\n                exception.addUnresolvedId(key, referring.getBeanType(), referring.getLocation());\n            }\n        }\n        if (exception !\u003d null) {\n            throw exception;\n        }\n    }",
    "begin_line": 145,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.tryToResolveUnresolvedObjectId#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.tryToResolveUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ReadableObjectId)",
    "snippet": "protected boolean tryToResolveUnresolvedObjectId(ReadableObjectId roid)\n    {\n        return roid.tryToResolveUnresolved(this);\n    }",
    "begin_line": 188,
    "end_line": 191,
    "comment": "/** \n * Overridable helper method called to try to resolve otherwise unresolvable  {@link ReadableObjectId}; and if this succeeds, return \u003ccode\u003etrue\u003c/code\u003e to indicate problem has been resolved in some way, so that caller can avoid reporting it as an error. \u003cp\u003e Default implementation simply calls  {@link ReadableObjectId#tryToResolveUnresolved} andreturns whatever it returns.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.deserializerInstance#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public JsonDeserializer\u003cObject\u003e deserializerInstance(Annotated ann, Object deserDef)\n        throws JsonMappingException\n    {\n        if (deserDef \u003d\u003d null) {\n            return null;\n        }\n        JsonDeserializer\u003c?\u003e deser;\n        \n        if (deserDef instanceof JsonDeserializer) {\n            deser \u003d (JsonDeserializer\u003c?\u003e) deserDef;\n        } else {\n            /* Alas, there\u0027s no way to force return type of \"either class\n             * X or Y\" -- need to throw an exception after the fact\n             */\n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned deserializer definition of type \"+deserDef.getClass().getName()+\"; expected type JsonDeserializer or Class\u003cJsonDeserializer\u003e instead\");\n            }\n            Class\u003c?\u003e deserClass \u003d (Class\u003c?\u003e)deserDef;\n            // there are some known \"no class\" markers to consider too:\n            if (deserClass \u003d\u003d JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!JsonDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()+\"; expected Class\u003cJsonDeserializer\u003e\");\n            }\n            HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n            deser \u003d (hi \u003d\u003d null) ? null : hi.deserializerInstance(_config, ann, deserClass);\n            if (deser \u003d\u003d null) {\n                deser \u003d (JsonDeserializer\u003c?\u003e) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        // First: need to resolve\n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return (JsonDeserializer\u003cObject\u003e) deser;\n    }",
    "begin_line": 201,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.keyDeserializerInstance#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@Override\n    public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef)\n        throws JsonMappingException\n    {\n        if (deserDef \u003d\u003d null) {\n            return null;\n        }\n\n        KeyDeserializer deser;\n        \n        if (deserDef instanceof KeyDeserializer) {\n            deser \u003d (KeyDeserializer) deserDef;\n        } else {\n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                        +deserDef.getClass().getName()\n                        +\"; expected type KeyDeserializer or Class\u003cKeyDeserializer\u003e instead\");\n            }\n            Class\u003c?\u003e deserClass \u003d (Class\u003c?\u003e)deserDef;\n            // there are some known \"no class\" markers to consider too:\n            if (deserClass \u003d\u003d KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!KeyDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()\n                        +\"; expected Class\u003cKeyDeserializer\u003e\");\n            }\n            HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n            deser \u003d (hi \u003d\u003d null) ? null : hi.keyDeserializerInstance(_config, ann, deserClass);\n            if (deser \u003d\u003d null) {\n                deser \u003d (KeyDeserializer) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        // First: need to resolve\n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return deser;\n    }",
    "begin_line": 241,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.with#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.with(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "public abstract DefaultDeserializationContext with(DeserializerFactory factory);",
    "begin_line": 291,
    "end_line": 291,
    "comment": "/** \n * Fluent factory method used for constructing a blueprint instance with different factory\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.createInstance#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createInstance(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public abstract DefaultDeserializationContext createInstance(\n            DeserializationConfig config, JsonParser jp, InjectableValues values);",
    "begin_line": 297,
    "end_line": 298,
    "comment": "/** \n * Method called to create actual usable per-deserialization context instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#317",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "public Impl(DeserializerFactory df) {\n            super(df, null);\n        }",
    "begin_line": 317,
    "end_line": 319,
    "comment": "/** \n * Default constructor for a blueprint object, which will use the standard {@link DeserializerCache}, given factory.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected Impl(Impl src,\n                DeserializationConfig config, JsonParser jp, InjectableValues values) {\n            super(src, config, jp, values);\n        }",
    "begin_line": 321,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl)",
    "snippet": "protected Impl(Impl src) { super(src); }",
    "begin_line": 326,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#328",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected Impl(Impl src, DeserializerFactory factory) {\n            super(src, factory);\n        }",
    "begin_line": 328,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.copy#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.copy()",
    "snippet": "@Override\n        public DefaultDeserializationContext copy() {\n            ClassUtil.verifyMustOverride(Impl.class, this, \"copy\");\n           return new Impl(this);\n        }",
    "begin_line": 333,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.createInstance#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createInstance(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "@Override\n        public DefaultDeserializationContext createInstance(DeserializationConfig config,\n                JsonParser p, InjectableValues values) {\n            return new Impl(this, config, p, values);\n        }",
    "begin_line": 339,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.with#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.with(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "@Override\n        public DefaultDeserializationContext with(DeserializerFactory factory) {\n            return new Impl(this, factory);\n        }",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.DeserializerCache#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.DeserializerCache()",
    "snippet": "public DeserializerCache() { }",
    "begin_line": 59,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.writeReplace#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.writeReplace()",
    "snippet": "Object writeReplace() {\n        // instead of making this transient, just clear it:\n        _incompleteDeserializers.clear();\n        // TODO: clear out \"cheap\" cached deserializers?\n        return this;\n    }",
    "begin_line": 67,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.cachedDeserializersCount#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.cachedDeserializersCount()",
    "snippet": "public int cachedDeserializersCount() {\n        return _cachedDeserializers.size();\n    }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Method that can be used to determine how many deserializers this provider is caching currently  (if it does caching: default implementation does) Exact count depends on what kind of deserializers get cached; default implementation caches only dynamically constructed deserializers, but not eagerly constructed standard deserializers (which is different from how serializer provider works). \u003cp\u003e The main use case for this method is to allow conditional flushing of deserializer cache, if certain number of entries is reached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.flushCachedDeserializers#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.flushCachedDeserializers()",
    "snippet": "public void flushCachedDeserializers() {\n        _cachedDeserializers.clear();       \n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Method that will drop all dynamically constructed deserializers (ones that are counted as result value for  {@link #cachedDeserializersCount}). This can be used to remove memory usage (in case some deserializers are only used once or so), or to force re-construction of deserializers after configuration changes for mapper than owns the provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findValueDeserializer#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType propertyType)\n        throws JsonMappingException\n    {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n        if (deser \u003d\u003d null) {\n            // If not, need to request factory to construct (or recycle)\n            deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n            if (deser \u003d\u003d null) {\n                /* Should we let caller handle it? Let\u0027s have a helper method\n                 * decide it; can throw an exception, or return a valid\n                 * deserializer\n                 */\n                deser \u003d _handleUnknownValueDeserializer(ctxt, propertyType);\n            }\n        }\n        return deser;\n    }",
    "begin_line": 135,
    "end_line": 152,
    "comment": "/** \n * Method called to get hold of a deserializer for a value of given type; or if no such deserializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked). \u003cp\u003e Note: this method is only called for value types; not for keys. Key deserializers can be accessed using  {@link #findKeyDeserializer}. \u003cp\u003e Note also that deserializer returned is guaranteed to be resolved (if it is of type  {@link ResolvableDeserializer}), but not contextualized (wrt  {@link ContextualDeserializer}): caller has to handle latter if necessary.\n * @param ctxt Deserialization context\n * @param propertyType Declared type of the value to deserializer (obtained using\u0027setter\u0027 method signature and/or type annotations\n * @throws JsonMappingException if there are fatal problems withaccessing suitable deserializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findKeyDeserializer#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type)\n        throws JsonMappingException\n    {\n        KeyDeserializer kd \u003d factory.createKeyDeserializer(ctxt, type);\n        if (kd \u003d\u003d null) { // if none found, need to use a placeholder that\u0027ll fail\n            return _handleUnknownKeyDeserializer(ctxt, type);\n        }\n        // First: need to resolve?\n        if (kd instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) kd).resolve(ctxt);\n        }\n        return kd;\n    }",
    "begin_line": 162,
    "end_line": 175,
    "comment": "/** \n * Method called to get hold of a deserializer to use for deserializing keys for  {@link java.util.Map}.\n * @throws JsonMappingException if there are fatal problems withaccessing suitable key deserializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.hasValueDeserializerFor#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.hasValueDeserializerFor(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean hasValueDeserializerFor(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type)\n        throws JsonMappingException\n    {\n        /* Note: mostly copied from findValueDeserializer, except for\n         * handling of unknown types\n         */\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser \u003d\u003d null) {\n            deser \u003d _createAndCacheValueDeserializer(ctxt, factory, type);\n        }\n        return (deser !\u003d null);\n    }",
    "begin_line": 182,
    "end_line": 194,
    "comment": "/** \n * Method called to find out whether provider would be able to find a deserializer for given type, using a root reference (i.e. not through fields or membership in an array or collection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._findCachedDeserializer#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._findCachedDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findCachedDeserializer(JavaType type)\n    {\n        if (type \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Null JavaType passed\");\n        }\n        if (_hasCustomValueHandler(type)) {\n            return null;\n        }\n        return _cachedDeserializers.get(type);\n    }",
    "begin_line": 202,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createAndCacheValueDeserializer#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type)\n        throws JsonMappingException\n    {\n        /* Only one thread to construct deserializers at any given point in time;\n         * limitations necessary to ensure that only completely initialized ones\n         * are visible and used.\n         */\n        synchronized (_incompleteDeserializers) {\n            // Ok, then: could it be that due to a race condition, deserializer can now be found?\n            JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n            int count \u003d _incompleteDeserializers.size();\n            // Or perhaps being resolved right now?\n            if (count \u003e 0) {\n                deser \u003d _incompleteDeserializers.get(type);\n                if (deser !\u003d null) {\n                    return deser;\n                }\n            }\n            // Nope: need to create and possibly cache\n            try {\n                return _createAndCache2(ctxt, factory, type);\n            } finally {\n                // also: any deserializers that have been created are complete by now\n                if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                    _incompleteDeserializers.clear();\n                }\n            }\n        }\n    }",
    "begin_line": 220,
    "end_line": 252,
    "comment": "/** \n * Method that will try to create a deserializer for given type, and resolve and cache it if necessary\n * @param ctxt Currently active deserialization context\n * @param type Type of property to deserialize\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createAndCache2#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type)\n        throws JsonMappingException\n    {\n        JsonDeserializer\u003cObject\u003e deser;\n        try {\n            deser \u003d _createDeserializer(ctxt, factory, type);\n        } catch (IllegalArgumentException iae) {\n            // We better only expose checked exceptions, since those\n            // are what caller is expected to handle\n            throw JsonMappingException.from(ctxt, iae.getMessage(), iae);\n        }\n        if (deser \u003d\u003d null) {\n            return null;\n        }\n        /* cache resulting deserializer? always true for \"plain\" BeanDeserializer\n         * (but can be re-defined for sub-classes by using @JsonCachable!)\n         */\n        // 27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers\n        boolean addToCache \u003d !_hasCustomValueHandler(type) \u0026\u0026 deser.isCachable();\n\n        /* we will temporarily hold on to all created deserializers (to\n         * handle cyclic references, and possibly reuse non-cached\n         * deserializers (list, map))\n         */\n        /* 07-Jun-2010, tatu: Danger: [JACKSON-296] was caused by accidental\n         *   resolution of a reference -- couple of ways to prevent this;\n         *   either not add Lists or Maps, or clear references eagerly.\n         *   Let\u0027s actually do both; since both seem reasonable.\n         */\n        /* Need to resolve? Mostly done for bean deserializers; required for\n         * resolving cyclic references.\n         */\n        if (deser instanceof ResolvableDeserializer) {\n            _incompleteDeserializers.put(type, deser);\n            ((ResolvableDeserializer)deser).resolve(ctxt);\n            _incompleteDeserializers.remove(type);\n        }\n        if (addToCache) {\n            _cachedDeserializers.put(type, deser);\n        }\n        return deser;\n    }",
    "begin_line": 258,
    "end_line": 300,
    "comment": "/** \n * Method that handles actual construction (via factory) and caching (both intermediate and eventual)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createDeserializer#314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n\n        // First things first: do we need to use abstract type mapping?\n        if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n            type \u003d factory.mapAbstractType(config, type);\n        }\n        BeanDescription beanDesc \u003d config.introspect(type);\n        // Then: does type define explicit deserializer to use, with annotation(s)?\n        JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt,\n                beanDesc.getClassInfo());\n        if (deser !\u003d null) {\n            return deser;\n        }\n\n        // If not, may have further type-modification annotations to check:\n        JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n        if (newType !\u003d type) {\n            type \u003d newType;\n            beanDesc \u003d config.introspect(newType);\n        }\n\n        // We may also have a Builder type to consider...\n        Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n        if (builder !\u003d null) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(\n            \t\tctxt, type, beanDesc, builder);\n        }\n\n        // Or perhaps a Converter?\n        Converter\u003cObject,Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n        if (conv \u003d\u003d null) { // nope, just construct in normal way\n            return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n        }\n        // otherwise need to do bit of introspection\n        JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n        // One more twist, as per [databind#288]; probably need to get new BeanDesc\n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc \u003d config.introspect(delegateType);\n        }\n        return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType,\n                _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n    }",
    "begin_line": 314,
    "end_line": 359,
    "comment": "/** \n * Method that does the heavy lifting of checking for per-type annotations, find out full type, and figure out which actual factory method to call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createDeserializer2#361",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _createDeserializer2(DeserializationContext ctxt,\n            DeserializerFactory factory, JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        // If not, let\u0027s see which factory method to use:\n        if (type.isEnumType()) {\n            return factory.createEnumDeserializer(ctxt, type, beanDesc);\n        }\n        if (type.isContainerType()) {\n            if (type.isArrayType()) {\n                return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n            }\n            if (type.isMapLikeType()) {\n                // 11-Mar-2017, tatu: As per [databind#1554], also need to block\n                //    handling as Map if overriden with \"as POJO\" option.\n                // Ideally we\u0027d determine it bit later on (to allow custom handler checks)\n                // but that won\u0027t work for other reasons. So do it here.\n                // (read: rewrite for 3.0)\n                JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n                if ((format \u003d\u003d null) || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n                    MapLikeType mlt \u003d (MapLikeType) type;\n                    if (mlt.isTrueMapType()) {\n                        return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc);\n                    }\n                    return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n                }\n            }\n            if (type.isCollectionLikeType()) {\n                /* 03-Aug-2012, tatu: As per [databind#40], one exception is if shape\n                 *   is to be Shape.OBJECT. Ideally we\u0027d determine it bit later on\n                 *   (to allow custom handler checks), but that won\u0027t work for other\n                 *   reasons. So do it here.\n                 */\n                JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n                if ((format \u003d\u003d null) || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n                    CollectionLikeType clt \u003d (CollectionLikeType) type;\n                    if (clt.isTrueCollectionType()) {\n                        return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n                    }\n                    return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n                }\n            }\n        }\n        if (type.isReferenceType()) {\n            return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc);\n        }\n        if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n            return factory.createTreeDeserializer(config, type, beanDesc);\n        }\n        return factory.createBeanDeserializer(ctxt, type, beanDesc);\n    }",
    "begin_line": 361,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findDeserializerFromAnnotation#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException\n    {\n        Object deserDef \u003d ctxt.getAnnotationIntrospector().findDeserializer(ann);\n        if (deserDef \u003d\u003d null) {\n            return null;\n        }\n        JsonDeserializer\u003cObject\u003e deser \u003d ctxt.deserializerInstance(ann, deserDef);\n        // One more thing however: may need to also apply a converter:\n        return findConvertingDeserializer(ctxt, ann, deser);\n    }",
    "begin_line": 419,
    "end_line": 430,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findConvertingDeserializer#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findConvertingDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findConvertingDeserializer(DeserializationContext ctxt,\n            Annotated a, JsonDeserializer\u003cObject\u003e deser)\n        throws JsonMappingException\n    {\n        Converter\u003cObject,Object\u003e conv \u003d findConverter(ctxt, a);\n        if (conv \u003d\u003d null) {\n            return deser;\n        }\n        JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n        return (JsonDeserializer\u003cObject\u003e) new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, deser);\n    }",
    "begin_line": 438,
    "end_line": 448,
    "comment": "/** \n * Helper method that will check whether given annotated entity (usually class, but may also be a property accessor) indicates that a  {@link Converter} is tobe used; and if so, to construct and return suitable serializer for it. If not, will simply return given serializer as is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findConverter#450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findConverter(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected Converter\u003cObject,Object\u003e findConverter(DeserializationContext ctxt,\n            Annotated a)\n        throws JsonMappingException\n    {\n        Object convDef \u003d ctxt.getAnnotationIntrospector().findDeserializationConverter(a);\n        if (convDef \u003d\u003d null) {\n            return null;\n        }\n        return ctxt.converterInstance(a, convDef);\n    }",
    "begin_line": 450,
    "end_line": 459,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.modifyTypeByAnnotation#476",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.modifyTypeByAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,\n            Annotated a, JavaType type)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        if (intr \u003d\u003d null) {\n            return type;\n        }\n\n        // First things first: find explicitly annotated deserializer(s)\n\n        // then key/value handlers  (annotated deserializers)?\n        if (type.isMapLikeType()) {\n            JavaType keyType \u003d type.getKeyType();\n            // 21-Mar-2011, tatu: ... and associated deserializer too (unless already assigned)\n            //   (not 100% why or how, but this does seem to get called more than once, which\n            //   is not good: for now, let\u0027s just avoid errors)\n            if (keyType !\u003d null \u0026\u0026 keyType.getValueHandler() \u003d\u003d null) {\n                Object kdDef \u003d intr.findKeyDeserializer(a);\n                if (kdDef !\u003d null) {\n                    KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(a, kdDef);\n                    if (kd !\u003d null) {\n                        type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                        keyType \u003d type.getKeyType(); // just in case it\u0027s used below\n                    }\n                }\n            }            \n        }\n        JavaType contentType \u003d type.getContentType();\n        if (contentType !\u003d null) {\n            if (contentType.getValueHandler() \u003d\u003d null) { // as with above, avoid resetting (which would trigger exception)\n                Object cdDef \u003d intr.findContentDeserializer(a);\n                if (cdDef !\u003d null) {\n                    JsonDeserializer\u003c?\u003e cd \u003d null;\n                    if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n                        cdDef \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n                    } else {\n                        Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                        if (cdClass !\u003d null) {\n                            cd \u003d ctxt.deserializerInstance(a, cdClass);\n                        }\n                    }\n                    if (cd !\u003d null) {\n                        type \u003d type.withContentValueHandler(cd);\n                    }\n                }\n            }\n        }\n\n        // And after handlers, possible type refinements\n        // (note: could possibly avoid this if explicit deserializer was invoked?)\n        type \u003d intr.refineDeserializationType(ctxt.getConfig(), a, type);\n        \n        return type;\n    }",
    "begin_line": 476,
    "end_line": 530,
    "comment": "/** \n * Method called to see if given method has annotations that indicate a more specific type than what the argument specifies. If annotations are present, they must specify compatible Class; instance of which can be assigned using the method. This means that the Class has to be raw class of type, or its sub-class (or, implementing class if original Class instance is an interface).\n * @param a Method or field that the type is associated with\n * @param type Type derived from the setter argument\n * @return Original type if no annotations are present; or a morespecific type derived from it if type annotation(s) was found\n * @throws JsonMappingException if invalid annotation is found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._hasCustomValueHandler#544",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._hasCustomValueHandler(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private boolean _hasCustomValueHandler(JavaType t) {\n        if (t.isContainerType()) {\n            JavaType ct \u003d t.getContentType();\n            if (ct !\u003d null) {\n                return (ct.getValueHandler() !\u003d null) || (ct.getTypeHandler() !\u003d null);\n            }\n        }\n        return false;\n    }",
    "begin_line": 544,
    "end_line": 552,
    "comment": "/** \n * Helper method used to prevent both caching and cache lookups for structured types that have custom value handlers\n * @since 2.4.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._verifyAsClass#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._verifyAsClass(java.lang.Object, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private Class\u003c?\u003e _verifyAsClass(Object src, String methodName, Class\u003c?\u003e noneClass)\n    {\n        if (src \u003d\u003d null) {\n            return null;\n        }\n        if (!(src instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n        }\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) src;\n        if (cls \u003d\u003d noneClass || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }",
    "begin_line": 554,
    "end_line": 567,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._handleUnknownValueDeserializer#575",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._handleUnknownValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type)\n        throws JsonMappingException\n    {\n        // Let\u0027s try to figure out the reason, to give better error messages\n        Class\u003c?\u003e rawClass \u003d type.getRawClass();\n        if (!ClassUtil.isConcrete(rawClass)) {\n            return ctxt.reportBadDefinition(type, \"Can not find a Value deserializer for abstract type \"+type);\n        }\n        return ctxt.reportBadDefinition(type, \"Can not find a Value deserializer for type \"+type);\n    }",
    "begin_line": 575,
    "end_line": 584,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._handleUnknownKeyDeserializer#586",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._handleUnknownKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type)\n        throws JsonMappingException\n    {\n        return ctxt.reportBadDefinition(type, \"Can not find a (Map) Key deserializer for type \"+type);\n    }",
    "begin_line": 586,
    "end_line": 590,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAdditionalDeserializers#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "public abstract DeserializerFactory withAdditionalDeserializers(Deserializers additional);",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional deserializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAdditionalKeyDeserializers#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "public abstract DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional);",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link KeyDeserializers}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withDeserializerModifier#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "public abstract DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier);",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link BeanDeserializerModifier}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAbstractTypeResolver#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "public abstract DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver);",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link AbstractTypeResolver}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withValueInstantiators#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "public abstract DeserializerFactory withValueInstantiators(ValueInstantiators instantiators);",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link ValueInstantiators}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.mapAbstractType#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.mapAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n        throws JsonMappingException;",
    "begin_line": 93,
    "end_line": 94,
    "comment": "/** \n * Method that can be called to try to resolve an abstract type (interface, abstract class) into a concrete type, or at least something \"more concrete\" (abstract class instead of interface). Will either return passed type, or a more specific type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.findValueInstantiator#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.findValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Method that is to find all creators (constructors, factory methods) for the bean type to deserialize.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createBeanDeserializer#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Method called to create (or, for completely immutable deserializers, reuse) a deserializer that can convert JSON content into values of specified Java \"bean\" (POJO) type. At this point it is known that the type is not otherwise recognized as one of structured types (array, Collection, Map) or a well-known JDK type (enum, primitives/wrappers, String); this method only gets called if other options are exhausted. This also means that this method can be overridden to add support for custom types.\n * @param type Type to be deserialized\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createBuilderBasedDeserializer#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e createBuilderBasedDeserializer(\n    \t\tDeserializationContext ctxt, JavaType type, BeanDescription beanDesc,\n    \t\tClass\u003c?\u003e builderClass)\n        throws JsonMappingException;",
    "begin_line": 124,
    "end_line": 127,
    "comment": "/** \n * Method called to create a deserializer that will use specified Builder class for building value instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createEnumDeserializer#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createEnumDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createReferenceDeserializer#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createReferenceDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createReferenceDeserializer(DeserializationContext ctxt,\n            ReferenceType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 137,
    "end_line": 139,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createTreeDeserializer#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createTreeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createTreeDeserializer(DeserializationConfig config,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Method called to create and return a deserializer that can construct JsonNode(s) from JSON content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createArrayDeserializer#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createArrayDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Method called to create (or, for completely immutable deserializers, reuse) a deserializer that can convert JSON content into values of specified Java type.\n * @param type Type to be deserialized\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createCollectionDeserializer#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createCollectionDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createCollectionLikeDeserializer#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createCollectionLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createMapDeserializer#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createMapDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createMapLikeDeserializer#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createMapLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, BeanDescription beanDesc)\n        throws JsonMappingException;",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createKeyDeserializer#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException;",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Method called to find if factory knows how to create a key deserializer for specified type; currently this means checking if a module has registered possible deserializers.\n * @return Key deserializer to use for specified type, if one found; null if not(and default key deserializer should be used)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.findTypeDeserializer#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException;",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * Method called to find and create a type information deserializer for given base type, if one is needed. If not needed (no polymorphic handling configured for type), should return null. \u003cp\u003e Note that this method is usually only directly called for values of container (Collection, array, Map) types and root values, but not for bean property values.\n * @param baseType Declared base type of the value to deserializer (actualdeserializer type will be this type or its subtype)\n * @return Type deserializer to use for given base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructEnumKeyDeserializer#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructEnumKeyDeserializer(com.fasterxml.jackson.databind.util.EnumResolver)",
    "snippet": "public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumResolver) {\n        return new StdKeyDeserializer.EnumKD(enumResolver, null);\n    }",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructEnumKeyDeserializer#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructEnumKeyDeserializer(com.fasterxml.jackson.databind.util.EnumResolver, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumResolver,\n            AnnotatedMethod factory) {\n        return new StdKeyDeserializer.EnumKD(enumResolver, factory);\n    }",
    "begin_line": 37,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructDelegatingKeyDeserializer#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructDelegatingKeyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public static KeyDeserializer constructDelegatingKeyDeserializer(DeserializationConfig config,\n            JavaType type, JsonDeserializer\u003c?\u003e deser)\n    {\n        return new StdKeyDeserializer.DelegatingKD(type.getRawClass(), deser);\n    }",
    "begin_line": 42,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.findStringBasedKeyDeserializer#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.findStringBasedKeyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConfig config,\n            JavaType type)\n    {\n        /* We don\u0027t need full deserialization information, just need to\n         * know creators.\n         */\n        BeanDescription beanDesc \u003d config.introspect(type);\n        // Ok, so: can we find T(String) constructor?\n        Constructor\u003c?\u003e ctor \u003d beanDesc.findSingleArgConstructor(String.class);\n        if (ctor !\u003d null) {\n            if (config.canOverrideAccessModifiers()) {\n                ClassUtil.checkAndFixAccess(ctor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            return new StdKeyDeserializer.StringCtorKeyDeserializer(ctor);\n        }\n        /* or if not, \"static T valueOf(String)\" (or equivalent marked\n         * with @JsonCreator annotation?)\n         */\n        Method m \u003d beanDesc.findFactoryMethod(String.class);\n        if (m !\u003d null){\n            if (config.canOverrideAccessModifiers()) {\n                ClassUtil.checkAndFixAccess(m, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            return new StdKeyDeserializer.StringFactoryKeyDeserializer(m);\n        }\n        // nope, no such luck...\n        return null;\n    }",
    "begin_line": 48,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.findKeyDeserializer#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override\n    public KeyDeserializer findKeyDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException\n    {\n        Class\u003c?\u003e raw \u003d type.getRawClass();\n        // 23-Apr-2013, tatu: Map primitive types, just in case one was given\n        if (raw.isPrimitive()) {\n            raw \u003d ClassUtil.wrapperType(raw);\n        }\n        return StdKeyDeserializer.forType(raw);\n    }",
    "begin_line": 84,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.instance#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.instance()",
    "snippet": "public static Java7Support instance() {\n        return IMPL;\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.findTransient#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.findTransient(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public abstract Boolean findTransient(Annotated a);",
    "begin_line": 38,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.hasCreatorAnnotation#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public abstract Boolean hasCreatorAnnotation(Annotated a);",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.findConstructorName#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "public abstract PropertyName findConstructorName(AnnotatedParameter p);",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getClassJavaNioFilePath#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getClassJavaNioFilePath()",
    "snippet": "public abstract Class\u003c?\u003e getClassJavaNioFilePath();",
    "begin_line": 44,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getDeserializerForJavaNioFilePath#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getDeserializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e getDeserializerForJavaNioFilePath(Class\u003c?\u003e rawType);",
    "begin_line": 46,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getSerializerForJavaNioFilePath#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getSerializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonSerializer\u003c?\u003e getSerializerForJavaNioFilePath(Class\u003c?\u003e rawType);",
    "begin_line": 48,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.Java7SupportImpl#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.Java7SupportImpl()",
    "snippet": "public Java7SupportImpl() {\n        // Trigger loading of annotations that only JDK 7 has...\n        Class\u003c?\u003e cls \u003d Transient.class;\n        cls \u003d ConstructorProperties.class;\n        _bogus \u003d cls;\n    }",
    "begin_line": 22,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getClassJavaNioFilePath#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getClassJavaNioFilePath()",
    "snippet": "@Override\n    public Class\u003c?\u003e getClassJavaNioFilePath() {\n        return Path.class;\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getDeserializerForJavaNioFilePath#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getDeserializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public JsonDeserializer\u003c?\u003e getDeserializerForJavaNioFilePath(Class\u003c?\u003e rawType) {\n        if (rawType \u003d\u003d Path.class) {\n            return new NioPathDeserializer();\n        }\n        return null;\n    }",
    "begin_line": 35,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getSerializerForJavaNioFilePath#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getSerializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public JsonSerializer\u003c?\u003e getSerializerForJavaNioFilePath(Class\u003c?\u003e rawType) {\n        if (Path.class.isAssignableFrom(rawType)) {\n            return new NioPathSerializer();\n        }\n        return null;\n    }",
    "begin_line": 43,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.findTransient#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.findTransient(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Boolean findTransient(Annotated a) {\n        Transient t \u003d a.getAnnotation(Transient.class);\n        if (t !\u003d null) {\n            return t.value();\n        }\n        return null;\n    }",
    "begin_line": 51,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.hasCreatorAnnotation#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Boolean hasCreatorAnnotation(Annotated a) {\n        ConstructorProperties props \u003d a.getAnnotation(ConstructorProperties.class);\n        // 08-Nov-2015, tatu: One possible check would be to ensure there is at least\n        //    one name iff constructor has arguments. But seems unnecessary for now.\n        if (props !\u003d null) {\n            return Boolean.TRUE;\n        }\n        return null;\n    }",
    "begin_line": 60,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.findConstructorName#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "@Override\n    public PropertyName findConstructorName(AnnotatedParameter p)\n    {\n        AnnotatedWithParams ctor \u003d p.getOwner();\n        if (ctor !\u003d null) {\n            ConstructorProperties props \u003d ctor.getAnnotation(ConstructorProperties.class);\n            if (props !\u003d null) {\n                String[] names \u003d props.value();\n                int ix \u003d p.getIndex();\n                if (ix \u003c names.length) {\n                    return PropertyName.construct(names[ix]);\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 71,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.Annotated#17",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()",
    "snippet": "protected Annotated() { }",
    "begin_line": 17,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getAnnotation#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "public abstract \u003cA extends Annotation\u003e A getAnnotation(Class\u003cA\u003e acls);",
    "begin_line": 19,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hasAnnotation#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hasAnnotation(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract boolean hasAnnotation(Class\u003c?\u003e acls);",
    "begin_line": 21,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hasOneOf#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "public abstract boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses);",
    "begin_line": 26,
    "end_line": 26,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getAnnotated#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getAnnotated()",
    "snippet": "public abstract AnnotatedElement getAnnotated();",
    "begin_line": 33,
    "end_line": 33,
    "comment": "/** \n * Method that can be used to find actual JDK element that this instance represents. It is non-null, except for method/constructor parameters which do not have a JDK counterpart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getModifiers#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getModifiers()",
    "snippet": "protected abstract int getModifiers();",
    "begin_line": 35,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.isPublic#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.isPublic()",
    "snippet": "public boolean isPublic() {\n        return Modifier.isPublic(getModifiers());\n    }",
    "begin_line": 37,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getName#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getName()",
    "snippet": "public abstract String getName();",
    "begin_line": 41,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getType#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getType()",
    "snippet": "public abstract JavaType getType();",
    "begin_line": 49,
    "end_line": 49,
    "comment": "/** \n * Full generic type of the annotated element; definition of what exactly this means depends on sub-class.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getType#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getType(com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "@Deprecated\n    public final JavaType getType(TypeBindings bogus) {\n        return getType();\n    }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "/** \n * @deprecated Since 2.7 Use {@link #getType()} instead. To be removed from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getGenericType#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getGenericType()",
    "snippet": "@Deprecated\n    public Type getGenericType() {\n        return getRawType();\n    }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * JDK declared generic type of the annotated element; definition of what exactly this means depends on sub-class. Note that such type can not be reliably resolved without  {@link TypeResolutionContext}, and as a result use of this method was deprecated in Jackson 2.7: see {@link #getType} for replacement.\n * @deprecated Since 2.7 should instead use {@link #getType()}. To be removed from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getRawType#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getRawType()",
    "snippet": "public abstract Class\u003c?\u003e getRawType();",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * \"Raw\" type (type-erased class) of the annotated element; definition of what exactly this means depends on sub-class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.equals#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.equals(java.lang.Object)",
    "snippet": "@Override\n    public abstract boolean equals(Object o);",
    "begin_line": 82,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hashCode#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hashCode()",
    "snippet": "@Override\n    public abstract int hashCode();",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.toString#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.toString()",
    "snippet": "@Override\n    public abstract String toString();",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.AnnotatedClass#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.AnnotatedClass(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.util.Annotations, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": " AnnotatedClass(JavaType type, Class\u003c?\u003e rawType, List\u003cJavaType\u003e superTypes,\n            Class\u003c?\u003e primaryMixIn, Annotations classAnnotations, TypeBindings bindings, \n            AnnotationIntrospector aintr, MixInResolver mir, TypeFactory tf)\n    {\n        _type \u003d type;\n        _class \u003d rawType;\n        _classAnnotations \u003d classAnnotations;\n        _bindings \u003d bindings;\n        _superTypes \u003d superTypes;\n        _annotationIntrospector \u003d aintr;\n        _typeFactory \u003d tf;\n        _mixInResolver \u003d mir;\n        _primaryMixIn \u003d primaryMixIn;\n    }",
    "begin_line": 122,
    "end_line": 135,
    "comment": "/** \n * Constructor will not do any initializations, to allow for configuring instances differently depending on use cases\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.construct#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.construct(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "@Deprecated\n    public static AnnotatedClass construct(JavaType type, MapperConfig\u003c?\u003e config) {\n        return construct(type, config, (MixInResolver) config);\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.construct#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.construct(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Deprecated\n    public static AnnotatedClass construct(JavaType type, MapperConfig\u003c?\u003e config,\n            MixInResolver mir)\n    {\n        return AnnotatedClassResolver.resolve(config, type, mir);\n    }",
    "begin_line": 149,
    "end_line": 153,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.constructWithoutSuperTypes#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "@Deprecated\n    public static AnnotatedClass constructWithoutSuperTypes(Class\u003c?\u003e raw, MapperConfig\u003c?\u003e config) {\n        return constructWithoutSuperTypes(raw, config, config);\n    }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.constructWithoutSuperTypes#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Deprecated\n    public static AnnotatedClass constructWithoutSuperTypes(Class\u003c?\u003e raw, MapperConfig\u003c?\u003e config,\n            MixInResolver mir)\n    {\n        return AnnotatedClassResolver.resolveWithoutSuperTypes(config, raw, mir);\n    }",
    "begin_line": 172,
    "end_line": 176,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.resolveType#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.resolveType(java.lang.reflect.Type)",
    "snippet": "@Override\n    public JavaType resolveType(Type type) {\n        return _typeFactory.constructType(type, _bindings);\n    }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotated#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotated()",
    "snippet": "@Override\n    public Class\u003c?\u003e getAnnotated() { return _class; }",
    "begin_line": 196,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getModifiers#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getModifiers()",
    "snippet": "@Override\n    public int getModifiers() { return _class.getModifiers(); }",
    "begin_line": 199,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getName#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getName()",
    "snippet": "@Override\n    public String getName() { return _class.getName(); }",
    "begin_line": 202,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotation#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override\n    public \u003cA extends Annotation\u003e A getAnnotation(Class\u003cA\u003e acls) {\n        return _classAnnotations.get(acls);\n    }",
    "begin_line": 205,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasAnnotation#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasAnnotation(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public boolean hasAnnotation(Class\u003c?\u003e acls) {\n        return _classAnnotations.has(acls);\n    }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasOneOf#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override\n    public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses) {\n        return _classAnnotations.hasOneOf(annoClasses);\n    }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getRawType#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getRawType()",
    "snippet": "@Override\n    public Class\u003c?\u003e getRawType() {\n        return _class;\n    }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getType#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getType()",
    "snippet": "@Override\n    public JavaType getType() {\n        return _type;\n    }",
    "begin_line": 225,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotations#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotations()",
    "snippet": "public Annotations getAnnotations() {\n        return _classAnnotations;\n    }",
    "begin_line": 235,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasAnnotations#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasAnnotations()",
    "snippet": "public boolean hasAnnotations() {\n        return _classAnnotations.size() \u003e 0;\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getDefaultConstructor#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getDefaultConstructor()",
    "snippet": "public AnnotatedConstructor getDefaultConstructor() {\n        return _creators().defaultConstructor;\n    }",
    "begin_line": 243,
    "end_line": 245,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getConstructors#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getConstructors()",
    "snippet": "public List\u003cAnnotatedConstructor\u003e getConstructors() {\n        return _creators().constructors;\n    }",
    "begin_line": 247,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getFactoryMethods#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getFactoryMethods()",
    "snippet": "public List\u003cAnnotatedMethod\u003e getFactoryMethods() {\n        return _creators().creatorMethods;\n    }",
    "begin_line": 254,
    "end_line": 256,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getStaticMethods#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getStaticMethods()",
    "snippet": "@Deprecated\n    public List\u003cAnnotatedMethod\u003e getStaticMethods() {\n        return getFactoryMethods();\n    }",
    "begin_line": 262,
    "end_line": 264,
    "comment": "/** \n * @deprecated Since 2.9; use {@link #getFactoryMethods} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._creators#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._creators()",
    "snippet": "private final Creators _creators() {\n        Creators c \u003d _creators;\n        if (c \u003d\u003d null) {\n            _creators \u003d c \u003d AnnotatedCreatorCollector.collectCreators(_annotationIntrospector,\n                    this,\n                    _type, _primaryMixIn);\n        }\n        return c;\n    }",
    "begin_line": 266,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.memberMethods#276",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.memberMethods()",
    "snippet": "public Iterable\u003cAnnotatedMethod\u003e memberMethods() {\n        return _methods();\n    }",
    "begin_line": 276,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getMemberMethodCount#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getMemberMethodCount()",
    "snippet": "public int getMemberMethodCount() {\n        return _methods().size();\n    }",
    "begin_line": 280,
    "end_line": 282,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.findMethod#284",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public AnnotatedMethod findMethod(String name, Class\u003c?\u003e[] paramTypes) {\n        return _methods().find(name, paramTypes);\n    }",
    "begin_line": 284,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._methods#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._methods()",
    "snippet": "private final AnnotatedMethodMap _methods() {\n        AnnotatedMethodMap m \u003d _memberMethods;\n        if (m \u003d\u003d null) {\n            _memberMethods \u003d m \u003d AnnotatedMethodCollector.collectMethods(_annotationIntrospector,\n                    this,\n                    _mixInResolver, _typeFactory,\n                    _type, _superTypes, _primaryMixIn);\n        }\n        return m;\n    }",
    "begin_line": 288,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getFieldCount#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getFieldCount()",
    "snippet": "public int getFieldCount() {\n        return _fields().size();\n    }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.fields#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.fields()",
    "snippet": "public Iterable\u003cAnnotatedField\u003e fields() {\n        return _fields();\n    }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._fields#307",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._fields()",
    "snippet": "private final List\u003cAnnotatedField\u003e _fields() {\n        List\u003cAnnotatedField\u003e f \u003d _fields;\n        if (f \u003d\u003d null) {\n            _fields \u003d f \u003d AnnotatedFieldCollector.collectFields(_annotationIntrospector,\n                    this,\n                    _mixInResolver, _typeFactory,\n                    _type);\n        }\n        return f;\n    }",
    "begin_line": 307,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.isNonStaticInnerClass#321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.isNonStaticInnerClass()",
    "snippet": "public boolean isNonStaticInnerClass()\n    {\n        Boolean B \u003d _nonStaticInnerClass;\n        if (B \u003d\u003d null) {\n            _nonStaticInnerClass \u003d B \u003d ClassUtil.isNonStaticInnerClass(_class);\n        }\n        return B.booleanValue();\n    }",
    "begin_line": 321,
    "end_line": 328,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.toString#337",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.toString()",
    "snippet": "@Override\n    public String toString() {\n        return \"[AnnotedClass \"+_class.getName()+\"]\";\n    }",
    "begin_line": 337,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hashCode#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        return _class.getName().hashCode();\n    }",
    "begin_line": 342,
    "end_line": 344,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.equals#347",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (o \u003d\u003d this) return true;\n        if (!ClassUtil.hasClass(o, getClass())) {\n            return false;\n        }\n        return ((AnnotatedClass) o)._class \u003d\u003d _class;\n    }",
    "begin_line": 347,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Creators.Creators#379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators(com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedConstructor\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedMethod\u003e)",
    "snippet": "public Creators(AnnotatedConstructor defCtor,\n                List\u003cAnnotatedConstructor\u003e ctors,\n                List\u003cAnnotatedMethod\u003e ctorMethods)\n        {\n            defaultConstructor \u003d defCtor;\n            constructors \u003d ctors;\n            creatorMethods \u003d ctorMethods;\n        }",
    "begin_line": 379,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.AnnotatedClassResolver#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.AnnotatedClassResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": " AnnotatedClassResolver(MapperConfig\u003c?\u003e config, JavaType type, MixInResolver r) {\n        _config \u003d config;\n        _type \u003d type;\n        _class \u003d type.getRawClass();\n        _mixInResolver \u003d r;\n        _bindings \u003d type.getBindings();\n        _intr \u003d config.isAnnotationProcessingEnabled()\n                ? config.getAnnotationIntrospector() : null;\n        _primaryMixin \u003d _config.findMixInClassFor(_class);\n    }",
    "begin_line": 36,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.AnnotatedClassResolver#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.AnnotatedClassResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": " AnnotatedClassResolver(MapperConfig\u003c?\u003e config, Class\u003c?\u003e cls, MixInResolver r) {\n        _config \u003d config;\n        _type \u003d null;\n        _class \u003d cls;\n        _mixInResolver \u003d r;\n        _bindings \u003d TypeBindings.emptyBindings();\n        if (config \u003d\u003d null) {\n            _intr \u003d null;\n            _primaryMixin \u003d null;\n        } else {\n            _intr \u003d config.isAnnotationProcessingEnabled()\n                    ? config.getAnnotationIntrospector() : null;\n            _primaryMixin \u003d _config.findMixInClassFor(_class);\n        }\n    }",
    "begin_line": 47,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolve#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolve(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolve(MapperConfig\u003c?\u003e config, JavaType forType,\n            MixInResolver r)\n    {\n        return new AnnotatedClassResolver(config, forType, r).resolveFully();\n    }",
    "begin_line": 63,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config, JavaType forType,\n            MixInResolver r)\n    {\n        return new AnnotatedClassResolver(config, forType, r).resolveWithoutSuperTypes();\n    }",
    "begin_line": 69,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config, Class\u003c?\u003e forType) {\n        return resolveWithoutSuperTypes(config, forType, config);\n    }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config, Class\u003c?\u003e forType,\n            MixInResolver r)\n    {\n        return new AnnotatedClassResolver(config, forType, r).resolveWithoutSuperTypes();\n    }",
    "begin_line": 79,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.createPrimordial#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.createPrimordial(java.lang.Class\u003c?\u003e)",
    "snippet": "static AnnotatedClass createPrimordial(Class\u003c?\u003e raw) {\n        Annotations noClassAnn \u003d new AnnotationMap();\n        List\u003cJavaType\u003e superTypes \u003d Collections.emptyList();\n        return new AnnotatedClass(null, raw, superTypes, null, noClassAnn,\n                TypeBindings.emptyBindings(), null, null, null);\n    }",
    "begin_line": 89,
    "end_line": 94,
    "comment": "/** \n * Internal helper class used for resolving a small set of \"primordial\" types for which we do not accept any annotation information or overrides. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveFully#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveFully()",
    "snippet": "AnnotatedClass resolveFully() {\n        List\u003cJavaType\u003e superTypes \u003d ClassUtil.findSuperTypes(_type, null, false);\n        Annotations classAnn \u003d resolveClassAnnotations(superTypes);\n        return new AnnotatedClass(_type, _class, superTypes, _primaryMixin, classAnn, _bindings,\n                _intr, _mixInResolver, _config.getTypeFactory());\n\n    }",
    "begin_line": 96,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes()",
    "snippet": "AnnotatedClass resolveWithoutSuperTypes() {\n        List\u003cJavaType\u003e superTypes \u003d Collections.\u003cJavaType\u003eemptyList();\n        Annotations classAnn \u003d resolveClassAnnotations(superTypes);\n        return new AnnotatedClass(null, _class, superTypes, _primaryMixin, classAnn,\n                _bindings, _intr, _config, _config.getTypeFactory());\n    }",
    "begin_line": 104,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveClassAnnotations#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveClassAnnotations(java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "private Annotations resolveClassAnnotations(List\u003cJavaType\u003e superTypes)\n    {\n        // Should skip processing if annotation processing disabled\n        if (_intr \u003d\u003d null) {\n            return NO_ANNOTATIONS;\n        }\n        AnnotationCollector resolvedCA \u003d AnnotationCollector.emptyCollector();\n        // add mix-in annotations first (overrides)\n        if (_primaryMixin !\u003d null) {\n            resolvedCA \u003d _addClassMixIns(resolvedCA, _class, _primaryMixin);\n        }\n        // then annotations from the class itself:\n        resolvedCA \u003d _addAnnotationsIfNotPresent(resolvedCA,\n                ClassUtil.findClassAnnotations(_class));\n\n        // and then from super types\n        for (JavaType type : superTypes) {\n            // and mix mix-in annotations in-between\n            if (_mixInResolver !\u003d null) {\n                Class\u003c?\u003e cls \u003d type.getRawClass();\n                resolvedCA \u003d _addClassMixIns(resolvedCA, cls,\n                        _mixInResolver.findMixInClassFor(cls));\n            }\n            resolvedCA \u003d _addAnnotationsIfNotPresent(resolvedCA,\n                    ClassUtil.findClassAnnotations(type.getRawClass()));\n        }\n        /* and finally... any annotations there might be for plain\n         * old Object.class: separate because for all other purposes\n         * it is just ignored (not included in super types)\n         */\n        // 12-Jul-2009, tatu: Should this be done for interfaces too?\n        //  For now, yes, seems useful for some cases, and not harmful for any?\n        if (_mixInResolver !\u003d null) {\n            resolvedCA \u003d _addClassMixIns(resolvedCA, Object.class,\n                    _mixInResolver.findMixInClassFor(Object.class));\n        }\n        return resolvedCA.asAnnotations();\n    }",
    "begin_line": 122,
    "end_line": 159,
    "comment": "/** \n * Initialization method that will recursively collect Jackson annotations for this class and all super classes and interfaces.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addClassMixIns#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addClassMixIns(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private AnnotationCollector _addClassMixIns(AnnotationCollector annotations,\n            Class\u003c?\u003e target, Class\u003c?\u003e mixin)\n    {\n        if (mixin !\u003d null) {\n            // Ok, first: annotations from mix-in class itself:\n            annotations \u003d _addAnnotationsIfNotPresent(annotations, ClassUtil.findClassAnnotations(mixin));\n    \n            // And then from its supertypes, if any. But note that we will only consider\n            // super-types up until reaching the masked class (if found); this because\n            // often mix-in class is a sub-class (for convenience reasons).\n            // And if so, we absolutely must NOT include super types of masked class,\n            // as that would inverse precedence of annotations.\n            for (Class\u003c?\u003e parent : ClassUtil.findSuperClasses(mixin, target, false)) {\n                annotations \u003d _addAnnotationsIfNotPresent(annotations, ClassUtil.findClassAnnotations(parent));\n            }\n        }\n        return annotations;\n    }",
    "begin_line": 161,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addAnnotationsIfNotPresent#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addAnnotationsIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation[])",
    "snippet": "private AnnotationCollector _addAnnotationsIfNotPresent(AnnotationCollector c,\n            Annotation[] anns)\n    {\n        if (anns !\u003d null) {\n            for (Annotation ann : anns) { // first: direct annotations\n                // note: we will NOT filter out non-Jackson annotations any more\n                if (!c.isPresent(ann)) {\n                    c \u003d c.addOrOverride(ann);\n                    if (_intr.isAnnotationBundle(ann)) {\n                        c \u003d _addFromBundleIfNotPresent(c, ann);\n                    }\n                }\n            }\n        }\n        return c;\n    }",
    "begin_line": 180,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addFromBundleIfNotPresent#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addFromBundleIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation)",
    "snippet": "private AnnotationCollector _addFromBundleIfNotPresent(AnnotationCollector c,\n            Annotation bundle)\n    {\n        for (Annotation ann : ClassUtil.findClassAnnotations(bundle.annotationType())) {\n            // minor optimization: by-pass 2 common JDK meta-annotations\n            if ((ann instanceof Target) || (ann instanceof Retention)) {\n                continue;\n            }\n            if (!c.isPresent(ann)) {\n                c \u003d c.addOrOverride(ann);\n                if (_intr.isAnnotationBundle(ann)) {\n                    c \u003d _addFromBundleIfNotPresent(c, ann);\n                }\n            }\n        }\n        return c;\n    }",
    "begin_line": 197,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.AnnotationCollector#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.AnnotationCollector(java.lang.Object)",
    "snippet": "protected AnnotationCollector(Object d) {\n        _data \u003d d;\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyAnnotations#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyAnnotations()",
    "snippet": "public static Annotations emptyAnnotations() { return NO_ANNOTATIONS; }",
    "begin_line": 29,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyCollector#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyCollector()",
    "snippet": "public static AnnotationCollector emptyCollector() {\n        return EmptyCollector.instance;\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyCollector#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyCollector(java.lang.Object)",
    "snippet": "public static AnnotationCollector emptyCollector(Object data) {\n        return new EmptyCollector(data);\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.asAnnotations#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "public abstract Annotations asAnnotations();",
    "begin_line": 39,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.asAnnotationMap#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "public abstract AnnotationMap asAnnotationMap();",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.getData#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.getData()",
    "snippet": "public Object getData() {\n        return _data;\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.isPresent#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "public abstract boolean isPresent(Annotation ann);",
    "begin_line": 52,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.addOrOverride#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "public abstract AnnotationCollector addOrOverride(Annotation ann);",
    "begin_line": 54,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.EmptyCollector#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.EmptyCollector(java.lang.Object)",
    "snippet": " EmptyCollector(Object data) { super(data); }",
    "begin_line": 66,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.asAnnotations#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override\n        public Annotations asAnnotations() {\n            return NO_ANNOTATIONS;\n        }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.asAnnotationMap#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override\n        public AnnotationMap asAnnotationMap() {\n            return new AnnotationMap();\n        }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.isPresent#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public boolean isPresent(Annotation ann) { return false; }",
    "begin_line": 79,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.addOrOverride#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public AnnotationCollector addOrOverride(Annotation ann) {\n            return new OneCollector(_data, ann.annotationType(), ann);\n        }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.OneCollector#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneCollector(java.lang.Object, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public OneCollector(Object data,\n                Class\u003c?\u003e type, Annotation value) {\n            super(data);\n            _type \u003d type;\n            _value \u003d value;\n        }",
    "begin_line": 92,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.asAnnotations#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override\n        public Annotations asAnnotations() {\n            return new OneAnnotation(_type, _value);\n        }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.asAnnotationMap#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override\n        public AnnotationMap asAnnotationMap() {\n            return AnnotationMap.of(_type, _value);\n        }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.isPresent#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public boolean isPresent(Annotation ann) {\n            return ann.annotationType() \u003d\u003d _type;\n        }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.addOrOverride#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public AnnotationCollector addOrOverride(Annotation ann) {\n            final Class\u003c?\u003e type \u003d ann.annotationType();\n            // true override? Just replace in-place, return\n            if (_type \u003d\u003d type) {\n                _value \u003d ann;\n                return this;\n            }\n            return new NCollector(_data, _type, _value, type, ann);\n        }",
    "begin_line": 115,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.NCollector#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.NCollector(java.lang.Object, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public NCollector(Object data,\n                Class\u003c?\u003e type1, Annotation value1,\n                Class\u003c?\u003e type2, Annotation value2) {\n            super(data);\n            _annotations \u003d new HashMap\u003c\u003e();\n            _annotations.put(type1, value1);\n            _annotations.put(type2, value2);\n        }",
    "begin_line": 130,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.asAnnotations#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override\n        public Annotations asAnnotations() {\n            if (_annotations.size() \u003d\u003d 2) {\n                Iterator\u003cMap.Entry\u003cClass\u003c?\u003e,Annotation\u003e\u003e it \u003d _annotations.entrySet().iterator();\n                Map.Entry\u003cClass\u003c?\u003e,Annotation\u003e en1 \u003d it.next(), en2 \u003d it.next();\n                return new TwoAnnotations(en1.getKey(), en1.getValue(),\n                        en2.getKey(), en2.getValue());\n            }\n            return new AnnotationMap(_annotations);\n        }",
    "begin_line": 140,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.asAnnotationMap#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override\n        public AnnotationMap asAnnotationMap() {\n            AnnotationMap result \u003d new AnnotationMap();\n            for (Annotation ann : _annotations.values()) {\n                result.add(ann);\n            }\n            return result;\n        }",
    "begin_line": 151,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.isPresent#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public boolean isPresent(Annotation ann) {\n            return _annotations.containsKey(ann.annotationType());\n        }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.addOrOverride#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override\n        public AnnotationCollector addOrOverride(Annotation ann) {\n            _annotations.put(ann.annotationType(), ann);\n            return this;\n        }",
    "begin_line": 165,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.NoAnnotations#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.NoAnnotations()",
    "snippet": " NoAnnotations() { }",
    "begin_line": 188,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.get#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override\n        public \u003cA extends Annotation\u003e A get(Class\u003cA\u003e cls) {\n            return null;\n        }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.has#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n        public boolean has(Class\u003c?\u003e cls) {\n            return false;\n        }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.hasOneOf#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override\n        public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses) {\n            return false;\n        }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.size#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override\n        public int size() {\n            return 0;\n        }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.OneAnnotation#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneAnnotation(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public OneAnnotation(Class\u003c?\u003e type, Annotation value) {\n            _type \u003d type;\n            _value \u003d value;\n        }",
    "begin_line": 219,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.get#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        @Override\n        public \u003cA extends Annotation\u003e A get(Class\u003cA\u003e cls) {\n            if (_type \u003d\u003d cls) {\n                return (A) _value;\n            }\n            return null;\n        }",
    "begin_line": 226,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.has#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n        public boolean has(Class\u003c?\u003e cls) {\n            return (_type \u003d\u003d cls);\n        }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.hasOneOf#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override\n        public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses) {\n            for (Class\u003c?\u003e cls : annoClasses) {\n                if (cls \u003d\u003d _type) {\n                    return true;\n                }\n            }\n            return false;\n        }",
    "begin_line": 239,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.size#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override\n        public int size() {\n            return 1;\n        }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.TwoAnnotations#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.TwoAnnotations(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public TwoAnnotations(Class\u003c?\u003e type1, Annotation value1,\n                Class\u003c?\u003e type2, Annotation value2) {\n            _type1 \u003d type1;\n            _value1 \u003d value1;\n            _type2 \u003d type2;\n            _value2 \u003d value2;\n        }",
    "begin_line": 262,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.get#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        @Override\n        public \u003cA extends Annotation\u003e A get(Class\u003cA\u003e cls) {\n            if (_type1 \u003d\u003d cls) {\n                return (A) _value1;\n            }\n            if (_type2 \u003d\u003d cls) {\n                return (A) _value2;\n            }\n            return null;\n        }",
    "begin_line": 272,
    "end_line": 280,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.has#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n        public boolean has(Class\u003c?\u003e cls) {\n            return (_type1 \u003d\u003d cls) || (_type2 \u003d\u003d cls);\n        }",
    "begin_line": 283,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.hasOneOf#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override\n        public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses) {\n            for (Class\u003c?\u003e cls : annoClasses) {\n                if ((cls \u003d\u003d _type1) || (cls \u003d\u003d _type2)) {\n                    return true;\n                }\n            }\n            return false;\n        }",
    "begin_line": 288,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.size#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override\n        public int size() {\n            return 2;\n        }",
    "begin_line": 298,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.AnnotationMap#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.AnnotationMap()",
    "snippet": "public AnnotationMap() { }",
    "begin_line": 18,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.of#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.of(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public static AnnotationMap of(Class\u003c?\u003e type, Annotation value) {\n        HashMap\u003cClass\u003c?\u003e,Annotation\u003e ann \u003d new HashMap\u003c\u003e(4);\n        ann.put(type, value);\n        return new AnnotationMap(ann);\n    }",
    "begin_line": 20,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.AnnotationMap#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.AnnotationMap(java.util.HashMap\u003cjava.lang.Class\u003c?\u003e,java.lang.annotation.Annotation\u003e)",
    "snippet": " AnnotationMap(HashMap\u003cClass\u003c?\u003e,Annotation\u003e a) {\n        _annotations \u003d a;\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.get#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cA extends Annotation\u003e A get(Class\u003cA\u003e cls)\n    {\n        if (_annotations \u003d\u003d null) {\n            return null;\n        }\n        return (A) _annotations.get(cls);\n    }",
    "begin_line": 38,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.has#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public boolean has(Class\u003c?\u003e cls)\n    {\n        if (_annotations \u003d\u003d null) {\n            return false;\n        }\n        return _annotations.containsKey(cls);\n    }",
    "begin_line": 47,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.hasOneOf#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override\n    public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses) {\n        if (_annotations !\u003d null) {\n            for (int i \u003d 0, end \u003d annoClasses.length; i \u003c end; ++i) {\n                if (_annotations.containsKey(annoClasses[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 62,
    "end_line": 71,
    "comment": "/** \n * Helper method that can be used for a \"bulk\" check to see if at least one of given annotation types is included within this map.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.annotations#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.annotations()",
    "snippet": "public Iterable\u003cAnnotation\u003e annotations() {\n        if (_annotations \u003d\u003d null || _annotations.size() \u003d\u003d 0) {\n            return Collections.emptyList();\n        }\n        return _annotations.values();\n    }",
    "begin_line": 82,
    "end_line": 87,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.merge#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.merge(com.fasterxml.jackson.databind.introspect.AnnotationMap, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "public static AnnotationMap merge(AnnotationMap primary, AnnotationMap secondary)\n    {\n        if (primary \u003d\u003d null || primary._annotations \u003d\u003d null || primary._annotations.isEmpty()) {\n            return secondary;\n        }\n        if (secondary \u003d\u003d null || secondary._annotations \u003d\u003d null || secondary._annotations.isEmpty()) {\n            return primary;\n        }\n        HashMap\u003cClass\u003c?\u003e,Annotation\u003e annotations \u003d new HashMap\u003cClass\u003c?\u003e,Annotation\u003e();\n        // add secondary ones first\n        for (Annotation ann : secondary._annotations.values()) {\n            annotations.put(ann.annotationType(), ann);\n        }\n        // to be overridden by primary ones\n        for (Annotation ann : primary._annotations.values()) {\n            annotations.put(ann.annotationType(), ann);\n        }\n        return new AnnotationMap(annotations);\n    }",
    "begin_line": 89,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.size#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.size()",
    "snippet": "@Override\n    public int size() {\n        return (_annotations \u003d\u003d null) ? 0 : _annotations.size();\n    }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.addIfNotPresent#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.addIfNotPresent(java.lang.annotation.Annotation)",
    "snippet": "public boolean addIfNotPresent(Annotation ann)\n    {\n        if (_annotations \u003d\u003d null || !_annotations.containsKey(ann.annotationType())) {\n            _add(ann);\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 118,
    "end_line": 125,
    "comment": "/** \n * Method called to add specified annotation in the Map, but only if it didn\u0027t yet exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.add#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.add(java.lang.annotation.Annotation)",
    "snippet": "public boolean add(Annotation ann) {\n        return _add(ann);\n    }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Method called to add specified annotation in the Map.\n * @return True if the addition changed the contents, that is, this map did notalready have specified annotation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.toString#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.toString()",
    "snippet": "@Override\n    public String toString() {\n        if (_annotations \u003d\u003d null) {\n            return \"[null]\";\n        }\n        return _annotations.toString();\n    }",
    "begin_line": 138,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap._add#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap._add(java.lang.annotation.Annotation)",
    "snippet": "protected final boolean _add(Annotation ann) {\n        if (_annotations \u003d\u003d null) {\n            _annotations \u003d new HashMap\u003cClass\u003c?\u003e,Annotation\u003e();\n        }\n        Annotation previous \u003d _annotations.put(ann.annotationType(), ann);\n        return (previous \u003d\u003d null) || !previous.equals(ann);\n    }",
    "begin_line": 151,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "protected BasicBeanDescription(POJOPropertiesCollector coll,\n            JavaType type, AnnotatedClass classDef)\n    {\n        super(type);\n        _propCollector \u003d coll;\n        _config \u003d coll.getConfig();\n        // NOTE: null config only for some pre-constructed types\n        if (_config \u003d\u003d null) {\n            _annotationIntrospector \u003d null;\n        } else {\n            _annotationIntrospector \u003d _config.getAnnotationIntrospector();\n        }\n        _classInfo \u003d classDef;\n    }",
    "begin_line": 93,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected BasicBeanDescription(MapperConfig\u003c?\u003e config,\n            JavaType type, AnnotatedClass classDef, List\u003cBeanPropertyDefinition\u003e props)\n    {\n        super(type);\n        _propCollector \u003d null;\n        _config \u003d config;\n        // NOTE: null config only for some pre-constructed types\n        if (_config \u003d\u003d null) {\n            _annotationIntrospector \u003d null;\n        } else {\n            _annotationIntrospector \u003d _config.getAnnotationIntrospector();\n        }\n        _classInfo \u003d classDef;\n        _properties \u003d props;\n    }",
    "begin_line": 112,
    "end_line": 126,
    "comment": "/** \n * Alternate constructor used in cases where property information is not needed, only class info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "protected BasicBeanDescription(POJOPropertiesCollector coll)\n    {\n        this(coll, coll.getType(), coll.getClassDef());\n        _objectIdInfo \u003d coll.getObjectIdInfo();\n    }",
    "begin_line": 128,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forDeserialization#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forDeserialization(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll) {\n        return new BasicBeanDescription(coll);\n    }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Factory method to use for constructing an instance to use for building deserializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forSerialization#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forSerialization(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll) {\n        return new BasicBeanDescription(coll);\n    }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Factory method to use for constructing an instance to use for building serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forOtherUse#155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forOtherUse(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public static BasicBeanDescription forOtherUse(MapperConfig\u003c?\u003e config,\n            JavaType type, AnnotatedClass ac)\n    {\n        return new BasicBeanDescription(config, type,\n                ac, Collections.\u003cBeanPropertyDefinition\u003eemptyList());\n    }",
    "begin_line": 155,
    "end_line": 160,
    "comment": "/** \n * Factory method to use for constructing an instance to use for purposes other than building serializers or deserializers; will only have information on class, not on properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._properties#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._properties()",
    "snippet": "protected List\u003cBeanPropertyDefinition\u003e _properties() {\n        if (_properties \u003d\u003d null) {\n            _properties \u003d _propCollector.getProperties();\n        }\n        return _properties;\n    }",
    "begin_line": 162,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.removeProperty#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.removeProperty(java.lang.String)",
    "snippet": "public boolean removeProperty(String propName)\n    {\n        Iterator\u003cBeanPropertyDefinition\u003e it \u003d _properties().iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition prop \u003d it.next();\n            if (prop.getName().equals(propName)) {\n                it.remove();\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 182,
    "end_line": 193,
    "comment": "/** \n * Method that can be used to prune unwanted properties, during construction of serializers and deserializers. Use with utmost care, if at all...\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.addProperty#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.addProperty(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "snippet": "public boolean addProperty(BeanPropertyDefinition def)\n    {\n        // first: ensure we do not have such property\n        if (hasProperty(def.getFullName())) {\n            return false;\n        }\n        _properties().add(def);\n        return true;\n    }",
    "begin_line": 195,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.hasProperty#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.hasProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public boolean hasProperty(PropertyName name) {\n        return findProperty(name) !\u003d null;\n    }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findProperty#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public BeanPropertyDefinition findProperty(PropertyName name)\n    {\n        for (BeanPropertyDefinition prop : _properties()) {\n            if (prop.hasName(name)) {\n                return prop;\n            }\n        }\n        return null;\n    }",
    "begin_line": 215,
    "end_line": 223,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getClassInfo#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getClassInfo()",
    "snippet": "@Override\n    public AnnotatedClass getClassInfo() { return _classInfo; }",
    "begin_line": 232,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getObjectIdInfo#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getObjectIdInfo()",
    "snippet": "@Override\n    public ObjectIdInfo getObjectIdInfo() { return  _objectIdInfo; }",
    "begin_line": 235,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findProperties#238",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findProperties()",
    "snippet": "@Override\n    public List\u003cBeanPropertyDefinition\u003e findProperties() {\n        return _properties();\n    }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findJsonValueMethod#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueMethod()",
    "snippet": "@Override\n    @Deprecated findJsonValueMethod() {\n        return (_propCollector \u003d\u003d null) ? null\n                : _propCollector.getJsonValueMethod();\n    }",
    "begin_line": 244,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findJsonValueAccessor#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueAccessor()",
    "snippet": "@Override findJsonValueAccessor() {\n        return (_propCollector \u003d\u003d null) ? null\n                : _propCollector.getJsonValueAccessor();\n    }",
    "begin_line": 250,
    "end_line": 253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getIgnoredPropertyNames#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getIgnoredPropertyNames()",
    "snippet": "@Override\n    public Set\u003cString\u003e getIgnoredPropertyNames() {\n        Set\u003cString\u003e ign \u003d (_propCollector \u003d\u003d null) ? null\n                : _propCollector.getIgnoredPropertyNames();\n        if (ign \u003d\u003d null) {\n            return Collections.emptySet();\n        }\n        return ign;\n    }",
    "begin_line": 256,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.hasKnownClassAnnotations#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.hasKnownClassAnnotations()",
    "snippet": "@Override\n    public boolean hasKnownClassAnnotations() {\n        return _classInfo.hasAnnotations();\n    }",
    "begin_line": 266,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getClassAnnotations#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getClassAnnotations()",
    "snippet": "@Override\n    public Annotations getClassAnnotations() {\n        return _classInfo.getAnnotations();\n    }",
    "begin_line": 271,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.bindingsForBeanType#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.bindingsForBeanType()",
    "snippet": "@Override\n    @Deprecated bindingsForBeanType() {\n        return _type.getBindings();\n    }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.resolveType#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.resolveType(java.lang.reflect.Type)",
    "snippet": "@Override\n    @Deprecated resolveType(java.lang.reflect.Type jdkType) {\n        if (jdkType \u003d\u003d null) {\n            return null;\n        }\n        return _config.getTypeFactory().constructType(jdkType, _type.getBindings());\n    }",
    "begin_line": 283,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDefaultConstructor#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDefaultConstructor()",
    "snippet": "@Override\n    public AnnotatedConstructor findDefaultConstructor() {\n        return _classInfo.getDefaultConstructor();\n    }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findAnySetterAccessor#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findAnySetterAccessor()",
    "snippet": "@Override\n    public AnnotatedMember findAnySetterAccessor() throws IllegalArgumentException\n    {\n        if (_propCollector !\u003d null) {\n            AnnotatedMethod anyMethod \u003d _propCollector.getAnySetterMethod();\n            if (anyMethod !\u003d null) {\n                // Also, let\u0027s be somewhat strict on how field name is to be\n                // passed; String, Object make sense, others not so much.\n    \n                /* !!! 18-May-2009, tatu: how about enums? Can add support if\n                 *  requested; easy enough for devs to add support within method.\n                 */\n                Class\u003c?\u003e type \u003d anyMethod.getRawParameterType(0);\n                if ((type !\u003d String.class) \u0026\u0026 (type !\u003d Object.class)) {\n                    throw new IllegalArgumentException(String.format(\n\"Invalid \u0027any-setter\u0027 annotation on method \u0027%s()\u0027: first argument not of type String or Object, but %s\",\nanyMethod.getName(), type.getName()));\n                }\n                return anyMethod;\n            }\n            AnnotatedMember anyField \u003d _propCollector.getAnySetterField();\n            if (anyField !\u003d null) {\n                // For now let\u0027s require a Map; in future can add support for other\n                // types like perhaps Iterable\u003cMap.Entry\u003e?\n                Class\u003c?\u003e type \u003d anyField.getRawType();\n                if (!Map.class.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(String.format(\n\"Invalid \u0027any-setter\u0027 annotation on field \u0027%s\u0027: type is not instance of java.util.Map\",\nanyField.getName()));\n                }\n                return anyField;\n            }\n        }\n        return null;\n    }",
    "begin_line": 296,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findInjectables#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findInjectables()",
    "snippet": "@Override\n    public Map\u003cObject, AnnotatedMember\u003e findInjectables() {\n        if (_propCollector !\u003d null) {\n            return _propCollector.getInjectables();\n        }\n        return Collections.emptyMap();\n    }",
    "begin_line": 332,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getConstructors#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getConstructors()",
    "snippet": "@Override\n    public List\u003cAnnotatedConstructor\u003e getConstructors() {\n        return _classInfo.getConstructors();\n    }",
    "begin_line": 340,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.instantiateBean#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.instantiateBean(boolean)",
    "snippet": "@Override\n    public Object instantiateBean(boolean fixAccess) {\n        AnnotatedConstructor ac \u003d _classInfo.getDefaultConstructor();\n        if (ac \u003d\u003d null) {\n            return null;\n        }\n        if (fixAccess) {\n            ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n        }\n        try {\n            return ac.getAnnotated().newInstance();\n        } catch (Exception e) {\n            Throwable t \u003d e;\n            while (t.getCause() !\u003d null) {\n                t \u003d t.getCause();\n            }\n            ClassUtil.throwIfError(t);\n            ClassUtil.throwIfRTE(t);\n            throw new IllegalArgumentException(\"Failed to instantiate bean of type \"+_classInfo.getAnnotated().getName()+\": (\"+t.getClass().getName()+\") \"+t.getMessage(), t);\n        }\n    }",
    "begin_line": 345,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findMethod#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "@Override\n    public AnnotatedMethod findMethod(String name, Class\u003c?\u003e[] paramTypes) {\n        return _classInfo.findMethod(name, paramTypes);\n    }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findExpectedFormat#384",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findExpectedFormat(JsonFormat.Value)",
    "snippet": "@Override\n    public JsonFormat.Value findExpectedFormat(JsonFormat.Value defValue)\n    {\n        // 15-Apr-2016, tatu: Let\u0027s check both per-type defaults and annotations; per-type\n        //   defaults having higher precedence, so start with that\n        if (_annotationIntrospector !\u003d null) {\n            JsonFormat.Value v \u003d _annotationIntrospector.findFormat(_classInfo);\n            if (v !\u003d null) {\n                if (defValue \u003d\u003d null) {\n                    defValue \u003d v;\n                } else {\n                    defValue \u003d defValue.withOverrides(v);\n                }\n            }\n        }\n        JsonFormat.Value v \u003d _config.getDefaultPropertyFormat(_classInfo.getRawType());\n        if (v !\u003d null) {\n            if (defValue \u003d\u003d null) {\n                defValue \u003d v;\n            } else {\n                defValue \u003d defValue.withOverrides(v);\n            }\n        }\n        return defValue;\n    }",
    "begin_line": 384,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDefaultViews#410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDefaultViews()",
    "snippet": "@Override findDefaultViews()\n    {\n        if (!_defaultViewsResolved) {\n            _defaultViewsResolved \u003d true;\n            Class\u003c?\u003e[] def \u003d (_annotationIntrospector \u003d\u003d null) ? null\n                    : _annotationIntrospector.findViews(_classInfo);\n            // one more twist: if default inclusion disabled, need to force empty set of views\n            if (def \u003d\u003d null) {\n                if (!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    def \u003d NO_VIEWS;\n                }\n            }\n            _defaultViews \u003d def;\n        }\n        return _defaultViews;\n    }",
    "begin_line": 410,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findSerializationConverter#434",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findSerializationConverter()",
    "snippet": "@Override\n    public Converter\u003cObject,Object\u003e findSerializationConverter()\n    {\n        if (_annotationIntrospector \u003d\u003d null) {\n            return null;\n        }\n        return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n    }",
    "begin_line": 434,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPropertyInclusion#449",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Override\n    public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue) {\n        if (_annotationIntrospector !\u003d null) {\n            JsonInclude.Value incl \u003d _annotationIntrospector.findPropertyInclusion(_classInfo);\n            if (incl !\u003d null) {\n                return (defValue \u003d\u003d null) ? incl : defValue.withOverrides(incl);\n            }\n        }\n        return defValue;\n    }",
    "begin_line": 449,
    "end_line": 457,
    "comment": "/** \n * Method for determining whether null properties should be written out for a Bean of introspected type. This is based on global feature (lowest priority, passed as argument) and per-class annotation (highest priority).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findAnyGetter#466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findAnyGetter()",
    "snippet": "@Override\n    public AnnotatedMember findAnyGetter() throws IllegalArgumentException\n    {\n        AnnotatedMember anyGetter \u003d (_propCollector \u003d\u003d null) ? null\n                : _propCollector.getAnyGetter();\n        if (anyGetter !\u003d null) {\n            /* For now let\u0027s require a Map; in future can add support for other\n             * types like perhaps Iterable\u003cMap.Entry\u003e?\n             */\n            Class\u003c?\u003e type \u003d anyGetter.getRawType();\n            if (!Map.class.isAssignableFrom(type)) {\n                throw new IllegalArgumentException(\"Invalid \u0027any-getter\u0027 annotation on method \"+anyGetter.getName()+\"(): return type is not instance of java.util.Map\");\n            }\n        }\n        return anyGetter;\n    }",
    "begin_line": 466,
    "end_line": 480,
    "comment": "/** \n * Method used to locate the method of introspected class that implements  {@link com.fasterxml.jackson.annotation.JsonAnyGetter}. If no such method exists null is returned. If more than one are found, an exception is thrown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findBackReferences#483",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findBackReferences()",
    "snippet": "@Override\n    public List\u003cBeanPropertyDefinition\u003e findBackReferences()\n    {\n        List\u003cBeanPropertyDefinition\u003e result \u003d null;\n        HashSet\u003cString\u003e names \u003d null;\n        for (BeanPropertyDefinition property : _properties()) {\n            AnnotationIntrospector.ReferenceProperty refDef \u003d property.findReferenceType();\n            if ((refDef \u003d\u003d null) || !refDef.isBackReference()) {\n                continue;\n            }\n            final String refName \u003d refDef.getName();\n            if (result \u003d\u003d null) {\n                result \u003d new ArrayList\u003cBeanPropertyDefinition\u003e();\n                names \u003d new HashSet\u003c\u003e();\n                names.add(refName);\n            } else {\n                if (!names.add(refName)) {\n                    throw new IllegalArgumentException(\"Multiple back-reference properties with name \u0027\"+refName+\"\u0027\");\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }",
    "begin_line": 483,
    "end_line": 505,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findBackReferenceProperties#509",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findBackReferenceProperties()",
    "snippet": "@Deprecated findBackReferenceProperties()\n    {\n        List\u003cBeanPropertyDefinition\u003e props \u003d findBackReferences();\n        if (props \u003d\u003d null) {\n            return null;\n        }\n        Map\u003cString,AnnotatedMember\u003e result \u003d new HashMap\u003c\u003e();\n        for (BeanPropertyDefinition prop : props) {\n            result.put(prop.getName(), prop.getMutator());\n        }\n        return result;\n    }",
    "begin_line": 509,
    "end_line": 520,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getFactoryMethods#529",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getFactoryMethods()",
    "snippet": "@Override\n    public List\u003cAnnotatedMethod\u003e getFactoryMethods()\n    {\n        // must filter out anything that clearly is not a factory method\n        List\u003cAnnotatedMethod\u003e candidates \u003d _classInfo.getFactoryMethods();\n        if (candidates.isEmpty()) {\n            return candidates;\n        }\n        ArrayList\u003cAnnotatedMethod\u003e result \u003d new ArrayList\u003cAnnotatedMethod\u003e();\n        for (AnnotatedMethod am : candidates) {\n            if (isFactoryMethod(am)) {\n                result.add(am);\n            }\n        }\n        return result;\n    }",
    "begin_line": 529,
    "end_line": 543,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findSingleArgConstructor#546",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findSingleArgConstructor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public Constructor\u003c?\u003e findSingleArgConstructor(Class\u003c?\u003e... argTypes)\n    {\n        for (AnnotatedConstructor ac : _classInfo.getConstructors()) {\n            // This list is already filtered to only include accessible\n            /* (note: for now this is a redundant check; but in future\n             * that may change; thus leaving here for now)\n             */\n            if (ac.getParameterCount() \u003d\u003d 1) {\n                Class\u003c?\u003e actArg \u003d ac.getRawParameterType(0);\n                for (Class\u003c?\u003e expArg : argTypes) {\n                    if (expArg \u003d\u003d actArg) {\n                        return ac.getAnnotated();\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 546,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findFactoryMethod#566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findFactoryMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public Method findFactoryMethod(Class\u003c?\u003e... expArgTypes)\n    {\n        // So, of all single-arg static methods:\n        for (AnnotatedMethod am : _classInfo.getFactoryMethods()) {\n            // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n            if (isFactoryMethod(am) \u0026\u0026 am.getParameterCount() \u003d\u003d 1) {\n                // And must take one of expected arg types (or supertype)\n                Class\u003c?\u003e actualArgType \u003d am.getRawParameterType(0);\n                for (Class\u003c?\u003e expArgType : expArgTypes) {\n                    // And one that matches what we would pass in\n                    if (actualArgType.isAssignableFrom(expArgType)) {\n                        return am.getAnnotated();\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 566,
    "end_line": 583,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.isFactoryMethod#585",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.isFactoryMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected boolean isFactoryMethod(AnnotatedMethod am)\n    {\n        // First: return type must be compatible with the introspected class\n        // (i.e. allowed to be sub-class, although usually is the same class)\n        Class\u003c?\u003e rt \u003d am.getRawReturnType();\n        if (!getBeanClass().isAssignableFrom(rt)) {\n            return false;\n        }\n        /* Also: must be a recognized factory method, meaning:\n         * (a) marked with @JsonCreator annotation, or\n         * (b) \"valueOf\" (at this point, need not be public)\n         */\n        JsonCreator.Mode mode \u003d _annotationIntrospector.findCreatorAnnotation(this._config, am);\n        if ((mode !\u003d null) \u0026\u0026 (mode !\u003d JsonCreator.Mode.DISABLED)) {\n            return true;\n        }\n        final String name \u003d am.getName();\n        // 24-Oct-2016, tatu: As per [databind#1429] must ensure takes exactly one arg\n        if (\"valueOf\".equals(name)) {\n            if (am.getParameterCount() \u003d\u003d 1) {\n                return true;\n            }\n        }\n        // [databind#208] Also accept \"fromString()\", if takes String or CharSequence\n        if (\"fromString\".equals(name)) {\n            if (am.getParameterCount() \u003d\u003d 1) {\n                Class\u003c?\u003e cls \u003d am.getRawParameterType(0);\n                if (cls \u003d\u003d String.class || CharSequence.class.isAssignableFrom(cls)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 585,
    "end_line": 618,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._findCreatorPropertyName#624",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._findCreatorPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "@Deprecated _findCreatorPropertyName(AnnotatedParameter param)\n    {\n        PropertyName name \u003d _annotationIntrospector.findNameForDeserialization(param);\n        if (name \u003d\u003d null || name.isEmpty()) {\n            String str \u003d _annotationIntrospector.findImplicitPropertyName(param);\n            if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n                name \u003d PropertyName.construct(str);\n            }\n        }\n        return name;\n    }",
    "begin_line": 624,
    "end_line": 634,
    "comment": "/** \n * @deprecated since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPOJOBuilder#643",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPOJOBuilder()",
    "snippet": "@Override\n    public Class\u003c?\u003e findPOJOBuilder() {\n        return (_annotationIntrospector \u003d\u003d null) ?\n    \t\t\tnull : _annotationIntrospector.findPOJOBuilder(_classInfo);\n    }",
    "begin_line": 643,
    "end_line": 646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPOJOBuilderConfig#649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPOJOBuilderConfig()",
    "snippet": "@Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig()\n    {\n        return (_annotationIntrospector \u003d\u003d null) ?\n                null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);\n    }",
    "begin_line": 649,
    "end_line": 653,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDeserializationConverter#656",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDeserializationConverter()",
    "snippet": "@Override\n    public Converter\u003cObject,Object\u003e findDeserializationConverter()\n    {\n        if (_annotationIntrospector \u003d\u003d null) {\n            return null;\n        }\n        return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));\n    }",
    "begin_line": 656,
    "end_line": 662,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findClassDescription#665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findClassDescription()",
    "snippet": "@Override\n    public String findClassDescription() {\n        return (_annotationIntrospector \u003d\u003d null) ?\n                null : _annotationIntrospector.findClassDescription(_classInfo);\n    }",
    "begin_line": 665,
    "end_line": 668,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._findPropertyFields#689",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._findPropertyFields(java.util.Collection\u003cjava.lang.String\u003e, boolean)",
    "snippet": "@Deprecated\n    public LinkedHashMap\u003cString,AnnotatedField\u003e _findPropertyFields(\n            Collection\u003cString\u003e ignoredProperties, boolean forSerialization)\n    {\n        LinkedHashMap\u003cString,AnnotatedField\u003e results \u003d new LinkedHashMap\u003cString,AnnotatedField\u003e();\n        for (BeanPropertyDefinition property : _properties()) {\n            AnnotatedField f \u003d property.getField();\n            if (f !\u003d null) {\n                String name \u003d property.getName();\n                if (ignoredProperties !\u003d null) {\n                    if (ignoredProperties.contains(name)) {\n                        continue;\n                    }\n                }\n                results.put(name, f);\n            }\n        }\n        return results;\n    }",
    "begin_line": 689,
    "end_line": 706,
    "comment": "/** \n * @param ignoredProperties (optional) names of properties to ignore;any fields that would be recognized as one of these properties is ignored.\n * @param forSerialization If true, will collect serializable propertyfields; if false, deserializable\n * @return Ordered Map with logical property name as key, andmatching field as value.\n * @deprecated Since 2.7.2, does not seem to be used?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._createConverter#715",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._createConverter(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected Converter\u003cObject,Object\u003e _createConverter(Object converterDef)\n    {\n        if (converterDef \u003d\u003d null) {\n            return null;\n        }\n        if (converterDef instanceof Converter\u003c?,?\u003e) {\n            return (Converter\u003cObject,Object\u003e) converterDef;\n        }\n        if (!(converterDef instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n                    +converterDef.getClass().getName()+\"; expected type Converter or Class\u003cConverter\u003e instead\");\n        }\n        Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e)converterDef;\n        // there are some known \"no class\" markers to consider too:\n        if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n            return null;\n        }\n        if (!Converter.class.isAssignableFrom(converterClass)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n                    +converterClass.getName()+\"; expected Class\u003cConverter\u003e\");\n        }\n        HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n        Converter\u003c?,?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n        if (conv \u003d\u003d null) {\n            conv \u003d (Converter\u003c?,?\u003e) ClassUtil.createInstance(converterClass,\n                    _config.canOverrideAccessModifiers());\n        }\n        return (Converter\u003cObject,Object\u003e) conv;\n    }",
    "begin_line": 715,
    "end_line": 743,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.BasicClassIntrospector#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.BasicClassIntrospector()",
    "snippet": "public BasicClassIntrospector() {\n        // a small cache should go a long way here\n        _cachedFCA \u003d new LRUMap\u003cJavaType,BasicBeanDescription\u003e(16, 64);\n    }",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forSerialization#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forSerialization(SerializationConfig cfg,\n            JavaType type, MixInResolver r)\n    {\n        // minor optimization: for some JDK types do minimal introspection\n        BasicBeanDescription desc \u003d _findStdTypeDesc(type);\n        if (desc \u003d\u003d null) {\n            // As per [databind#550], skip full introspection for some of standard\n            // structured types as well\n            desc \u003d _findStdJdkCollectionDesc(cfg, type);\n            if (desc \u003d\u003d null) {\n                desc \u003d BasicBeanDescription.forSerialization(collectProperties(cfg,\n                        type, r, true, \"set\"));\n            }\n            // Also: this is a superset of \"forClassAnnotations\", so may optimize by optional add:\n            _cachedFCA.putIfAbsent(type, desc);\n        }\n        return desc;\n    }",
    "begin_line": 77,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDeserialization#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDeserialization(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forDeserialization(DeserializationConfig cfg,\n            JavaType type, MixInResolver r)\n    {\n        // minor optimization: for some JDK types do minimal introspection\n        BasicBeanDescription desc \u003d _findStdTypeDesc(type);\n        if (desc \u003d\u003d null) {\n            // As per [Databind#550], skip full introspection for some of standard\n            // structured types as well\n            desc \u003d _findStdJdkCollectionDesc(cfg, type);\n            if (desc \u003d\u003d null) {\n                desc \u003d BasicBeanDescription.forDeserialization(collectProperties(cfg,\n                        \t\ttype, r, false, \"set\"));\n            }\n            // Also: this is a superset of \"forClassAnnotations\", so may optimize by optional add:\n            _cachedFCA.putIfAbsent(type, desc);\n        }\n        return desc;\n    }",
    "begin_line": 97,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDeserializationWithBuilder#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDeserializationWithBuilder(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,\n            JavaType type, MixInResolver r)\n    {\n        // no std JDK types with Builders, so:\n\n        BasicBeanDescription desc \u003d BasicBeanDescription.forDeserialization(collectPropertiesWithBuilder(cfg,\n                type, r, false));\n        // this is still a superset of \"forClassAnnotations\", so may optimize by optional add:\n        _cachedFCA.putIfAbsent(type, desc);\n        return desc;\n    }",
    "begin_line": 117,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forCreation#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forCreation(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forCreation(DeserializationConfig cfg,\n            JavaType type, MixInResolver r)\n    {\n        BasicBeanDescription desc \u003d _findStdTypeDesc(type);\n        if (desc \u003d\u003d null) {\n\n            // As per [Databind#550], skip full introspection for some of standard\n            // structured types as well\n            desc \u003d _findStdJdkCollectionDesc(cfg, type);\n            if (desc \u003d\u003d null) {\n                desc \u003d BasicBeanDescription.forDeserialization(\n            \t\tcollectProperties(cfg, type, r, false, \"set\"));\n            }\n        }\n        // should this be cached for FCA?\n        return desc;\n    }",
    "begin_line": 130,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forClassAnnotations#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forClassAnnotations(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r)\n    {\n        BasicBeanDescription desc \u003d _findStdTypeDesc(type);\n        if (desc \u003d\u003d null) {\n            desc \u003d _cachedFCA.get(type);\n            if (desc \u003d\u003d null) {\n                desc \u003d BasicBeanDescription.forOtherUse(config, type,\n                        _resolveAnnotatedClass(config, type, r));\n                _cachedFCA.put(type, desc);\n            }\n        }\n        return desc;\n    }",
    "begin_line": 149,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDirectClassAnnotations#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override\n    public BasicBeanDescription forDirectClassAnnotations(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r)\n    {\n        BasicBeanDescription desc \u003d _findStdTypeDesc(type);\n        if (desc \u003d\u003d null) {\n            desc \u003d BasicBeanDescription.forOtherUse(config, type,\n                    _resolveAnnotatedWithoutSuperTypes(config, type, r));\n        }\n        return desc;\n    }",
    "begin_line": 165,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.collectProperties#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, boolean, java.lang.String)",
    "snippet": "protected POJOPropertiesCollector collectProperties(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r, boolean forSerialization,\n            String mutatorPrefix)\n    {\n        return constructPropertyCollector(config,\n                _resolveAnnotatedClass(config, type, r),\n                type, forSerialization, mutatorPrefix);\n    }",
    "begin_line": 182,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.collectPropertiesWithBuilder#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectPropertiesWithBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, boolean)",
    "snippet": "protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r, boolean forSerialization)\n    {\n        AnnotatedClass ac \u003d _resolveAnnotatedClass(config, type, r);\n        AnnotationIntrospector ai \u003d config.isAnnotationProcessingEnabled() ? config.getAnnotationIntrospector() : null;\n        JsonPOJOBuilder.Value builderConfig \u003d (ai \u003d\u003d null) ? null : ai.findPOJOBuilderConfig(ac);\n        String mutatorPrefix \u003d (builderConfig \u003d\u003d null) ? JsonPOJOBuilder.DEFAULT_WITH_PREFIX : builderConfig.withPrefix;\n        return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix);\n    }",
    "begin_line": 191,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.constructPropertyCollector#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.constructPropertyCollector(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType, boolean, java.lang.String)",
    "snippet": "protected POJOPropertiesCollector constructPropertyCollector(MapperConfig\u003c?\u003e config,\n            AnnotatedClass ac, JavaType type, boolean forSerialization, String mutatorPrefix)\n    {\n        return new POJOPropertiesCollector(config, forSerialization, type, ac, mutatorPrefix);\n    }",
    "begin_line": 205,
    "end_line": 209,
    "comment": "/** \n * Overridable method called for creating  {@link POJOPropertiesCollector} instanceto use; override is needed if a custom sub-class is to be used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._findStdTypeDesc#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._findStdTypeDesc(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BasicBeanDescription _findStdTypeDesc(JavaType type)\n    {\n        Class\u003c?\u003e cls \u003d type.getRawClass();\n        if (cls.isPrimitive()) {\n            if (cls \u003d\u003d Boolean.TYPE) {\n                return BOOLEAN_DESC;\n            }\n            if (cls \u003d\u003d Integer.TYPE) {\n                return INT_DESC;\n            }\n            if (cls \u003d\u003d Long.TYPE) {\n                return LONG_DESC;\n            }\n        } else {\n            if (cls \u003d\u003d String.class) {\n                return STRING_DESC;\n            }\n        }\n        return null;\n    }",
    "begin_line": 215,
    "end_line": 234,
    "comment": "/** \n * Method called to see if type is one of core JDK types that we have cached for efficiency.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._isStdJDKCollection#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._isStdJDKCollection(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected boolean _isStdJDKCollection(JavaType type)\n    {\n        if (!type.isContainerType() || type.isArrayType()) {\n            return false;\n        }\n        Class\u003c?\u003e raw \u003d type.getRawClass();\n        String pkgName \u003d ClassUtil.getPackageName(raw);\n        if (pkgName !\u003d null) {\n            if (pkgName.startsWith(\"java.lang\")\n                    || pkgName.startsWith(\"java.util\")) {\n                /* 23-Sep-2014, tatu: Should we be conservative here (minimal number\n                 *    of matches), or ambitious? Let\u0027s do latter for now.\n                 */\n                if (Collection.class.isAssignableFrom(raw)\n                        || Map.class.isAssignableFrom(raw)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 241,
    "end_line": 261,
    "comment": "/** \n * Helper method used to decide whether we can omit introspection for members (methods, fields, constructors); we may do so for a limited number of container types JDK provides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._findStdJdkCollectionDesc#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._findStdJdkCollectionDesc(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BasicBeanDescription _findStdJdkCollectionDesc(MapperConfig\u003c?\u003e cfg, JavaType type)\n    {\n        if (_isStdJDKCollection(type)) {\n            return BasicBeanDescription.forOtherUse(cfg, type,\n                    _resolveAnnotatedClass(cfg, type, cfg));\n        }\n        return null;\n    }",
    "begin_line": 263,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._resolveAnnotatedClass#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._resolveAnnotatedClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "protected AnnotatedClass _resolveAnnotatedClass(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r) {\n        return AnnotatedClassResolver.resolve(config, type, r);\n    }",
    "begin_line": 275,
    "end_line": 278,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._resolveAnnotatedWithoutSuperTypes#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._resolveAnnotatedWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "protected AnnotatedClass _resolveAnnotatedWithoutSuperTypes(MapperConfig\u003c?\u003e config,\n            JavaType type, MixInResolver r) {\n        return AnnotatedClassResolver.resolveWithoutSuperTypes(config, type, r);\n    }",
    "begin_line": 283,
    "end_line": 286,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.findMixInClassFor#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls);",
    "begin_line": 35,
    "end_line": 35,
    "comment": "/** \n * Method that will check if there are \"mix-in\" classes (with mix-in annotations) for given class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.copy#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.copy()",
    "snippet": "public MixInResolver copy();",
    "begin_line": 45,
    "end_line": 45,
    "comment": "/** \n * Method called to create a new, non-shared copy, to be used by different \u003ccode\u003eObjectMapper\u003c/code\u003e instance, and one that should not be connected to this instance, if resolver has mutable state. If resolver is immutable may simply return `this`.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.ClassIntrospector#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()",
    "snippet": "protected ClassIntrospector() { }",
    "begin_line": 48,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forSerialization#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forSerialization(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forSerialization(SerializationConfig cfg,\n    \t\tJavaType type, MixInResolver r);",
    "begin_line": 60,
    "end_line": 61,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for serialization purposes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDeserialization#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDeserialization(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDeserialization(DeserializationConfig cfg,\n    \t\tJavaType type, MixInResolver r);",
    "begin_line": 67,
    "end_line": 68,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for deserialization purposes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDeserializationWithBuilder#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDeserializationWithBuilder(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,\n    \t\tJavaType type, MixInResolver r);",
    "begin_line": 75,
    "end_line": 76,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for constructing deserializers that use intermediate Builder objects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forCreation#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forCreation(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forCreation(DeserializationConfig cfg, JavaType type,\n            MixInResolver r);",
    "begin_line": 84,
    "end_line": 85,
    "comment": "/** \n * Factory method that constructs an introspector that has information necessary for creating instances of given class (\"creator\"), as well as class annotations, but no information on member methods\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forClassAnnotations#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forClassAnnotations(MapperConfig\u003c?\u003e cfg, JavaType type,\n            MixInResolver r);",
    "begin_line": 92,
    "end_line": 93,
    "comment": "/** \n * Factory method that constructs an introspector that only has information regarding annotations class itself (or its supertypes) has, but nothing on methods or constructors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDirectClassAnnotations#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDirectClassAnnotations(MapperConfig\u003c?\u003e cfg, JavaType type,\n            MixInResolver r);",
    "begin_line": 100,
    "end_line": 101,
    "comment": "/** \n * Factory method that constructs an introspector that only has information regarding annotations class itself has (but NOT including its supertypes), but nothing on methods or constructors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.JacksonAnnotationIntrospector#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()",
    "snippet": "public JacksonAnnotationIntrospector() { }",
    "begin_line": 106,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.version#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.version()",
    "snippet": "@Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.readResolve#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.readResolve()",
    "snippet": "protected Object readResolve() {\n        if (_annotationsInside \u003d\u003d null) {\n            _annotationsInside \u003d new LRUMap\u003cClass\u003c?\u003e,Boolean\u003e(48, 48);\n        }\n        return this;\n    }",
    "begin_line": 113,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.setConstructorPropertiesImpliesCreator#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.setConstructorPropertiesImpliesCreator(boolean)",
    "snippet": "public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b)\n    {\n        _cfgConstructorPropertiesImpliesCreator \u003d b;\n        return this;\n    }",
    "begin_line": 136,
    "end_line": 140,
    "comment": "/** \n * Method for changing behavior of  {@link java.beans.ConstructorProperties}: if set to `true`, existence DOES indicate that the given constructor should be considered a creator; `false` that it should NOT be considered a creator without explicit use of \u003ccode\u003eJsonCreator\u003c/code\u003e annotation. \u003cp\u003e Default setting is `true`\n * @since 2.7.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isAnnotationBundle#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isAnnotationBundle(java.lang.annotation.Annotation)",
    "snippet": "@Override\n    public boolean isAnnotationBundle(Annotation ann) {\n        // 22-Sep-2015, tatu: Caching here has modest effect on JavaSE, and only\n        //   mostly in degenerate cases where introspection used more often than\n        //   it should (like recreating ObjectMapper once per read/write).\n        //   But it may be more beneficial on platforms like Android (should verify)\n        Class\u003c?\u003e type \u003d ann.annotationType();\n        Boolean b \u003d _annotationsInside.get(type);\n        if (b \u003d\u003d null) {\n            b \u003d type.getAnnotation(JacksonAnnotationsInside.class) !\u003d null;\n            _annotationsInside.putIfAbsent(type, b);\n        }\n        return b.booleanValue();\n    }",
    "begin_line": 153,
    "end_line": 165,
    "comment": "/** \n * Annotations with meta-annotation  {@link JacksonAnnotationsInside}are considered bundles.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findEnumValue#179",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValue(java.lang.Enum\u003c?\u003e)",
    "snippet": "@Override\n    @Deprecated findEnumValue(Enum\u003c?\u003e value)\n    {\n        // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.\n        //   Unfortunately can not quite use standard AnnotatedClass here (due to various\n        //   reasons, including odd representation JVM uses); has to do for now\n        try {\n            // We know that values are actually static fields with matching name so:\n            Field f \u003d value.getClass().getField(value.name());\n            if (f !\u003d null) {\n                JsonProperty prop \u003d f.getAnnotation(JsonProperty.class);\n                if (prop !\u003d null) {\n                    String n \u003d prop.value();\n                    if (n !\u003d null \u0026\u0026 !n.isEmpty()) {\n                        return n;\n                    }\n                }\n            }\n        } catch (SecurityException e) {\n            // 17-Sep-2015, tatu: Anything we could/should do here?\n        } catch (NoSuchFieldException e) {\n            // 17-Sep-2015, tatu: should not really happen. But... can we do anything?\n        }\n        return value.name();\n    }",
    "begin_line": 179,
    "end_line": 202,
    "comment": "/** \n * Since 2.6, we have supported use of  {@link JsonProperty} for specifyingexplicit serialized name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findEnumValues#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValues(java.lang.Class\u003c?\u003e, java.lang.Enum\u003c?\u003e[], java.lang.String[])",
    "snippet": "@Override findEnumValues(Class\u003c?\u003e enumType, Enum\u003c?\u003e[] enumValues, String[] names) {\n        HashMap\u003cString,String\u003e expl \u003d null;\n        for (Field f : ClassUtil.getDeclaredFields(enumType)) {\n            if (!f.isEnumConstant()) {\n                continue;\n            }\n            JsonProperty prop \u003d f.getAnnotation(JsonProperty.class);\n            if (prop \u003d\u003d null) {\n                continue;\n            }\n            String n \u003d prop.value();\n            if (n.isEmpty()) {\n                continue;\n            }\n            if (expl \u003d\u003d null) {\n                expl \u003d new HashMap\u003cString,String\u003e();\n            }\n            expl.put(f.getName(), n);\n        }\n        // and then stitch them together if and as necessary\n        if (expl !\u003d null) {\n            for (int i \u003d 0, end \u003d enumValues.length; i \u003c end; ++i) {\n                String defName \u003d enumValues[i].name();\n                String explValue \u003d expl.get(defName);\n                if (explValue !\u003d null) {\n                    names[i] \u003d explValue;\n                }\n            }\n        }\n        return names;\n    }",
    "begin_line": 205,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDefaultEnumValue#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDefaultEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e)",
    "snippet": "@Override\n    public Enum\u003c?\u003e findDefaultEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumCls) {\n        return ClassUtil.findFirstAnnotatedEnumValue(enumCls, JsonEnumDefaultValue.class);\n    }",
    "begin_line": 247,
    "end_line": 249,
    "comment": "/** \n * Finds the Enum value that should be considered the default value, if possible. \u003cp\u003e This implementation relies on  {@link JsonEnumDefaultValue} annotation to determine the default value if present.\n * @param enumCls The Enum class to scan for the default value.\n * @return null if none found or it\u0027s not possible to determine one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findRootName#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public PropertyName findRootName(AnnotatedClass ac)\n    {\n        JsonRootName ann \u003d _findAnnotation(ac, JsonRootName.class);\n        if (ann \u003d\u003d null) {\n            return null;\n        }\n        String ns \u003d ann.namespace();\n        if (ns !\u003d null \u0026\u0026 ns.length() \u003d\u003d 0) {\n            ns \u003d null;\n        }\n        return PropertyName.construct(ann.value(), ns);\n    }",
    "begin_line": 258,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyIgnorals#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override findPropertyIgnorals(Annotated a)\n    {\n        JsonIgnoreProperties v \u003d _findAnnotation(a, JsonIgnoreProperties.class);\n        if (v \u003d\u003d null) {\n            return JsonIgnoreProperties.Value.empty();\n        }\n        return JsonIgnoreProperties.Value.from(v);\n    }",
    "begin_line": 272,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isIgnorableType#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Boolean isIgnorableType(AnnotatedClass ac) {\n        JsonIgnoreType ignore \u003d _findAnnotation(ac, JsonIgnoreType.class);\n        return (ignore \u003d\u003d null) ? null : ignore.value();\n    }",
    "begin_line": 282,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findFilterId#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findFilterId(Annotated a) {\n        JsonFilter ann \u003d _findAnnotation(a, JsonFilter.class);\n        if (ann !\u003d null) {\n            String id \u003d ann.value();\n            // Empty String is same as not having annotation, to allow overrides\n            if (id.length() \u003e 0) {\n                return id;\n            }\n        }\n        return null;\n    }",
    "begin_line": 288,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNamingStrategy#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Object findNamingStrategy(AnnotatedClass ac)\n    {\n        JsonNaming ann \u003d _findAnnotation(ac, JsonNaming.class);\n        return (ann \u003d\u003d null) ? null : ann.value();\n    }",
    "begin_line": 301,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findClassDescription#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public String findClassDescription(AnnotatedClass ac) {\n        JsonClassDescription ann \u003d _findAnnotation(ac, JsonClassDescription.class);\n        return (ann \u003d\u003d null) ? null : ann.value();\n    }",
    "begin_line": 308,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findAutoDetectVisibility#320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "@Override\n    public VisibilityChecker\u003c?\u003e findAutoDetectVisibility(AnnotatedClass ac,\n        VisibilityChecker\u003c?\u003e checker)\n    {\n        JsonAutoDetect ann \u003d _findAnnotation(ac, JsonAutoDetect.class);\n        return (ann \u003d\u003d null) ? checker : checker.with(ann);\n    }",
    "begin_line": 320,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findImplicitPropertyName#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public String findImplicitPropertyName(AnnotatedMember m) {\n        PropertyName n \u003d _findConstructorName(m);\n        return (n \u003d\u003d null) ? null : n.getSimpleName();\n    }",
    "begin_line": 334,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyAliases#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public List\u003cPropertyName\u003e findPropertyAliases(Annotated m) {\n        JsonAlias ann \u003d _findAnnotation(m, JsonAlias.class);\n        if (ann \u003d\u003d null) {\n            return null;\n        }\n        String[] strs \u003d ann.value();\n        final int len \u003d strs.length;\n        if (len \u003d\u003d 0) {\n            return Collections.emptyList();\n        }\n        List\u003cPropertyName\u003e result \u003d new ArrayList\u003c\u003e(len);\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result.add(PropertyName.construct(strs[i]));\n        }\n        return result;\n    }",
    "begin_line": 340,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasIgnoreMarker#358",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\n        return _isIgnorable(m);\n    }",
    "begin_line": 358,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasRequiredMarker#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public Boolean hasRequiredMarker(AnnotatedMember m)\n    {\n        JsonProperty ann \u003d _findAnnotation(m, JsonProperty.class);\n        if (ann !\u003d null) {\n            return ann.required();\n        }\n        return null;\n    }",
    "begin_line": 363,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyAccess#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonProperty.Access findPropertyAccess(Annotated m) {\n        JsonProperty ann \u003d _findAnnotation(m, JsonProperty.class);\n        if (ann !\u003d null) {\n            return ann.access();\n        }\n        return null;\n    }",
    "begin_line": 373,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyDescription#382",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public String findPropertyDescription(Annotated ann) {\n        JsonPropertyDescription desc \u003d _findAnnotation(ann, JsonPropertyDescription.class);\n        return (desc \u003d\u003d null) ? null : desc.value();\n    }",
    "begin_line": 382,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyIndex#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Integer findPropertyIndex(Annotated ann) {\n        JsonProperty prop \u003d _findAnnotation(ann, JsonProperty.class);\n        if (prop !\u003d null) {\n          int ix \u003d prop.index();\n          if (ix !\u003d JsonProperty.INDEX_UNKNOWN) {\n               return Integer.valueOf(ix);\n          }\n        }\n        return null;\n    }",
    "begin_line": 388,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyDefaultValue#400",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public String findPropertyDefaultValue(Annotated ann) {\n        JsonProperty prop \u003d _findAnnotation(ann, JsonProperty.class);\n        if (prop \u003d\u003d null) {\n            return null;\n        }\n        String str \u003d prop.defaultValue();\n        // Since annotations do not allow nulls, need to assume empty means \"none\"\n        return str.isEmpty() ? null : str;\n    }",
    "begin_line": 400,
    "end_line": 408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findFormat#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonFormat.Value findFormat(Annotated ann) {\n        JsonFormat f \u003d _findAnnotation(ann, JsonFormat.class);\n        return (f \u003d\u003d null)  ? null : new JsonFormat.Value(f);\n    }",
    "begin_line": 411,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findReferenceType#417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override        \n    public ReferenceProperty findReferenceType(AnnotatedMember member)\n    {\n        JsonManagedReference ref1 \u003d _findAnnotation(member, JsonManagedReference.class);\n        if (ref1 !\u003d null) {\n            return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        JsonBackReference ref2 \u003d _findAnnotation(member, JsonBackReference.class);\n        if (ref2 !\u003d null) {\n            return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }",
    "begin_line": 417,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findUnwrappingNameTransformer#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)\n    {\n        JsonUnwrapped ann \u003d _findAnnotation(member, JsonUnwrapped.class);\n        // if not enabled, just means annotation is not enabled; not necessarily\n        // that unwrapping should not be done (relevant when using chained introspectors)\n        if (ann \u003d\u003d null || !ann.enabled()) {\n            return null;\n        }\n        String prefix \u003d ann.prefix();\n        String suffix \u003d ann.suffix();\n        return NameTransformer.simpleTransformer(prefix, suffix);\n    }",
    "begin_line": 431,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findInjectableValue#445",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override findInjectableValue(AnnotatedMember m) {\n        JacksonInject ann \u003d _findAnnotation(m, JacksonInject.class);\n        if (ann \u003d\u003d null) {\n            return null;\n        }\n        // Empty String means that we should use name of declared value class.\n        JacksonInject.Value v \u003d JacksonInject.Value.from(ann);\n        if (!v.hasId()) {\n            Object id;\n            // slight complication; for setters, type \n            if (!(m instanceof AnnotatedMethod)) {\n                id \u003d m.getRawType().getName();\n            } else {\n                AnnotatedMethod am \u003d (AnnotatedMethod) m;\n                if (am.getParameterCount() \u003d\u003d 0) { // getter\n                    id \u003d m.getRawType().getName();\n                } else { // setter\n                    id \u003d am.getRawParameterType(0).getName();\n                }\n            }\n            v \u003d v.withId(id);\n        }\n        return v;\n    }",
    "begin_line": 445,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findInjectableValueId#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    @Deprecated findInjectableValueId(AnnotatedMember m) {\n        JacksonInject.Value v \u003d findInjectableValue(m);\n        return (v \u003d\u003d null) ? null : v.getId();\n    }",
    "begin_line": 472,
    "end_line": 475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findViews#478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Class\u003c?\u003e[] findViews(Annotated a)\n    {\n        JsonView ann \u003d _findAnnotation(a, JsonView.class);\n        return (ann \u003d\u003d null) ? null : ann.value();\n    }",
    "begin_line": 478,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.resolveSetterConflict#485",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override resolveSetterConflict(MapperConfig\u003c?\u003e config,\n            AnnotatedMethod setter1, AnnotatedMethod setter2)\n    {\n        Class\u003c?\u003e cls1 \u003d setter1.getRawParameterType(0);\n        Class\u003c?\u003e cls2 \u003d setter2.getRawParameterType(0);\n        \n        // First: prefer primitives over non-primitives\n        // 11-Dec-2015, tatu: TODO, perhaps consider wrappers for primitives too?\n        if (cls1.isPrimitive()) {\n            if (!cls2.isPrimitive()) {\n                return setter1;\n            }\n        } else if (cls2.isPrimitive()) {\n            return setter2;\n        }\n        \n        if (cls1 \u003d\u003d String.class) {\n            if (cls2 !\u003d String.class) {\n                return setter1;\n            }\n        } else if (cls2 \u003d\u003d String.class) {\n            return setter2;\n        }\n\n        return null;\n    }",
    "begin_line": 485,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findTypeResolver#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public TypeResolverBuilder\u003c?\u003e findTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedClass ac, JavaType baseType)\n    {\n        return _findTypeResolver(config, ac, baseType);\n    }",
    "begin_line": 519,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyTypeResolver#526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public TypeResolverBuilder\u003c?\u003e findPropertyTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedMember am, JavaType baseType)\n    {\n        /* As per definition of @JsonTypeInfo, should only apply to contents of container\n         * (collection, map) types, not container types themselves:\n         */\n        // 17-Apr-2016, tatu: For 2.7.4 make sure ReferenceType also included\n        if (baseType.isContainerType() || baseType.isReferenceType()) {\n            return null;\n        }\n        // No per-member type overrides (yet)\n        return _findTypeResolver(config, am, baseType);\n    }",
    "begin_line": 526,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyContentTypeResolver#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public TypeResolverBuilder\u003c?\u003e findPropertyContentTypeResolver(MapperConfig\u003c?\u003e config,\n            AnnotatedMember am, JavaType containerType)\n    {\n        /* First: let\u0027s ensure property is a container type: caller should have\n         * verified but just to be sure\n         */\n        if (containerType.getContentType() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Must call method with a container or reference type (got \"+containerType+\")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }",
    "begin_line": 541,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSubtypes#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public List\u003cNamedType\u003e findSubtypes(Annotated a)\n    {\n        JsonSubTypes t \u003d _findAnnotation(a, JsonSubTypes.class);\n        if (t \u003d\u003d null) return null;\n        JsonSubTypes.Type[] types \u003d t.value();\n        ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(types.length);\n        for (JsonSubTypes.Type type : types) {\n            result.add(new NamedType(type.value(), type.name()));\n        }\n        return result;\n    }",
    "begin_line": 554,
    "end_line": 564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findTypeName#567",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override        \n    public String findTypeName(AnnotatedClass ac)\n    {\n        JsonTypeName tn \u003d _findAnnotation(ac, JsonTypeName.class);\n        return (tn \u003d\u003d null) ? null : tn.value();\n    }",
    "begin_line": 567,
    "end_line": 571,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isTypeId#574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public Boolean isTypeId(AnnotatedMember member) {\n        return _hasAnnotation(member, JsonTypeId.class);\n    }",
    "begin_line": 574,
    "end_line": 576,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findObjectIdInfo#585",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        JsonIdentityInfo info \u003d _findAnnotation(ann, JsonIdentityInfo.class);\n        if (info \u003d\u003d null || info.generator() \u003d\u003d ObjectIdGenerators.None.class) {\n            return null;\n        }\n        // In future may need to allow passing namespace?\n        PropertyName name \u003d PropertyName.construct(info.property());\n        return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }",
    "begin_line": 585,
    "end_line": 593,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findObjectReferenceInfo#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "@Override\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        JsonIdentityReference ref \u003d _findAnnotation(ann, JsonIdentityReference.class);\n        if (ref \u003d\u003d null) {\n            return objectIdInfo;\n        }\n        if (objectIdInfo \u003d\u003d null) {\n            objectIdInfo \u003d ObjectIdInfo.empty();\n        }\n        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n    }",
    "begin_line": 596,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializer#614",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findSerializer(Annotated a)\n    {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.using();\n            if (serClass !\u003d JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        \n        /* 18-Oct-2010, tatu: [JACKSON-351] @JsonRawValue handled just here, for now;\n         *  if we need to get raw indicator from other sources need to add\n         *  separate accessor within {@link AnnotationIntrospector} interface.\n         */\n        JsonRawValue annRaw \u003d  _findAnnotation(a, JsonRawValue.class);\n        if ((annRaw !\u003d null) \u0026\u0026 annRaw.value()) {\n            // let\u0027s construct instance with nominal type:\n            Class\u003c?\u003e cls \u003d a.getRawType();\n            return new RawSerializer\u003cObject\u003e(cls);\n        }       \n        return null;\n    }",
    "begin_line": 614,
    "end_line": 636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findKeySerializer#639",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findKeySerializer(Annotated a)\n    {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.keyUsing();\n            if (serClass !\u003d JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 639,
    "end_line": 650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findContentSerializer#653",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findContentSerializer(Annotated a)\n    {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.contentUsing();\n            if (serClass !\u003d JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 653,
    "end_line": 664,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNullSerializer#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findNullSerializer(Annotated a)\n    {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.nullsUsing();\n            if (serClass !\u003d JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 667,
    "end_line": 678,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyInclusion#681",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonInclude.Value findPropertyInclusion(Annotated a)\n    {\n        JsonInclude inc \u003d _findAnnotation(a, JsonInclude.class);\n        JsonInclude.Value value \u003d (inc \u003d\u003d null) ? JsonInclude.Value.empty() : JsonInclude.Value.from(inc);\n\n        // only consider deprecated variant if we didn\u0027t have non-deprecated one:\n        if (value.getValueInclusion() \u003d\u003d JsonInclude.Include.USE_DEFAULTS) {\n            value \u003d _refinePropertyInclusion(a, value);\n        }\n        return value;\n    }",
    "begin_line": 681,
    "end_line": 691,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._refinePropertyInclusion#694",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._refinePropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Value)",
    "snippet": "@SuppressWarnings(\"deprecation\")\n    private JsonInclude.Value _refinePropertyInclusion(Annotated a, JsonInclude.Value value) {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        if (ann !\u003d null) {\n            switch (ann.include()) {\n            case ALWAYS:\n                return value.withValueInclusion(JsonInclude.Include.ALWAYS);\n            case NON_NULL:\n                return value.withValueInclusion(JsonInclude.Include.NON_NULL);\n            case NON_DEFAULT:\n                return value.withValueInclusion(JsonInclude.Include.NON_DEFAULT);\n            case NON_EMPTY:\n                return value.withValueInclusion(JsonInclude.Include.NON_EMPTY);\n            case DEFAULT_INCLUSION:\n            default:\n            }\n        }\n        return value;\n    }",
    "begin_line": 694,
    "end_line": 711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationTyping#714",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonSerialize.Typing findSerializationTyping(Annotated a)\n    {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        return (ann \u003d\u003d null) ? null : ann.typing();\n    }",
    "begin_line": 714,
    "end_line": 718,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationConverter#721",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findSerializationConverter(Annotated a) {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }",
    "begin_line": 721,
    "end_line": 724,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationContentConverter#727",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\n        return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }",
    "begin_line": 727,
    "end_line": 730,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.refineSerializationType#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType refineSerializationType(final MapperConfig\u003c?\u003e config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type \u003d baseType;\n        final TypeFactory tf \u003d config.getTypeFactory();\n\n        final JsonSerialize jsonSer \u003d _findAnnotation(a, JsonSerialize.class);\n        \n        // Ok: start by refining the main type itself; common to all types\n\n        final Class\u003c?\u003e serClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.as());\n        if (serClass !\u003d null) {\n            if (type.hasRawClass(serClass)) {\n                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n                //    static typing this way\n                type \u003d type.withStaticTyping();\n            } else {\n                Class\u003c?\u003e currRaw \u003d type.getRawClass();\n                try {\n                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                    //   may be needed here too in future?\n                    if (serClass.isAssignableFrom(currRaw)) { // common case\n                        type \u003d tf.constructGeneralizedType(type, serClass);\n                    } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well\n                        type \u003d tf.constructSpecializedType(type, serClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                        type, serClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen type %s with annotation (value %s), from \u0027%s\u0027: %s\",\n                                    type, serClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n        }\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType \u003d type.getKeyType();\n            final Class\u003c?\u003e keyClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.keyAs());\n            if (keyClass !\u003d null) {\n                if (keyType.hasRawClass(keyClass)) {\n                    keyType \u003d keyType.withStaticTyping();\n                } else {\n                    Class\u003c?\u003e currRaw \u003d keyType.getRawClass();\n                    try {\n                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                        //   specialize (narrow) type sometimes, even if more commonly opposite\n                        //   is needed.\n                        if (keyClass.isAssignableFrom(currRaw)) { // common case\n                            keyType \u003d tf.constructGeneralizedType(keyType, keyClass);\n                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                            keyType \u003d tf.constructSpecializedType(keyType, keyClass);\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                            keyType, keyClass.getName()));\n                        }\n                    } catch (IllegalArgumentException iae) {\n                        throw new JsonMappingException(null,\n                                String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",\n                                        type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                        iae);\n                    }\n                }\n                type \u003d ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n\n        JavaType contentType \u003d type.getContentType();\n        if (contentType !\u003d null) { // collection[like], map[like], array, reference\n            // And then value types for all containers:\n           final Class\u003c?\u003e contentClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.contentAs());\n           if (contentClass !\u003d null) {\n               if (contentType.hasRawClass(contentClass)) {\n                   contentType \u003d contentType.withStaticTyping();\n               } else {\n                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                   //   specialize (narrow) type sometimes, even if more commonly opposite\n                   //   is needed.\n                   Class\u003c?\u003e currRaw \u003d contentType.getRawClass();\n                   try {\n                       if (contentClass.isAssignableFrom(currRaw)) { // common case\n                           contentType \u003d tf.constructGeneralizedType(contentType, contentClass);\n                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                           contentType \u003d tf.constructSpecializedType(contentType, contentClass);\n                       } else {\n                           throw new JsonMappingException(null,\n                                   String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                           contentType, contentClass.getName()));\n                       }\n                   } catch (IllegalArgumentException iae) { // shouldn\u0027t really happen\n                       throw new JsonMappingException(null,\n                               String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",\n                                       type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                       iae);\n                   }\n               }\n               type \u003d type.withContentType(contentType);\n           }\n        }\n        return type;\n    }",
    "begin_line": 739,
    "end_line": 845,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationType#849",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    @Deprecated findSerializationType(Annotated am) {\n        return null;\n    }",
    "begin_line": 849,
    "end_line": 851,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationKeyType#855",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @Deprecated findSerializationKeyType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 855,
    "end_line": 857,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationContentType#861",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @Deprecated findSerializationContentType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 861,
    "end_line": 863,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationPropertyOrder#872",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order \u003d _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order \u003d\u003d null) ? null : order.value();\n    }",
    "begin_line": 872,
    "end_line": 875,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationSortAlphabetically#878",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }",
    "begin_line": 878,
    "end_line": 880,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findSortAlpha#882",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findSortAlpha(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order \u003d _findAnnotation(ann, JsonPropertyOrder.class);\n        // 23-Jun-2015, tatu: as per [databind#840], let\u0027s only consider\n        //  `true` to have any significance.\n        if ((order !\u003d null) \u0026\u0026 order.alphabetic()) {\n            return Boolean.TRUE;\n        }\n        return null;\n    }",
    "begin_line": 882,
    "end_line": 890,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findAndAddVirtualProperties#893",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "@Override\n    public void findAndAddVirtualProperties(MapperConfig\u003c?\u003e config, AnnotatedClass ac,\n            List\u003cBeanPropertyWriter\u003e properties) {\n        JsonAppend ann \u003d _findAnnotation(ac, JsonAppend.class);\n        if (ann \u003d\u003d null) {\n            return;\n        }\n        final boolean prepend \u003d ann.prepend();\n        JavaType propType \u003d null;\n\n        // First: any attribute-backed properties?\n        JsonAppend.Attr[] attrs \u003d ann.attrs();\n        for (int i \u003d 0, len \u003d attrs.length; i \u003c len; ++i) {\n            if (propType \u003d\u003d null) {\n                propType \u003d config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw \u003d _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        // Then: general-purpose virtual properties?\n        JsonAppend.Prop[] props \u003d ann.props();\n        for (int i \u003d 0, len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter bpw \u003d _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }",
    "begin_line": 893,
    "end_line": 928,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructVirtualProperty#930",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Attr, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr,\n            MapperConfig\u003c?\u003e config, AnnotatedClass ac, JavaType type)\n    {\n        PropertyMetadata metadata \u003d attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        // could add Index, Description in future, if those matter\n        String attrName \u003d attr.value();\n\n        // allow explicit renaming; if none, default to attribute name\n        PropertyName propName \u003d _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName \u003d PropertyName.construct(attrName);\n        }\n        // now, then, we need a placeholder for member (no real Field/Method):\n        AnnotatedMember member \u003d new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type);\n        // and with that and property definition\n        SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        // can construct the property writer\n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }",
    "begin_line": 930,
    "end_line": 952,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructVirtualProperty#954",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Prop, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop,\n            MapperConfig\u003c?\u003e config, AnnotatedClass ac)\n    {\n        PropertyMetadata metadata \u003d prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName \u003d _propertyName(prop.name(), prop.namespace());\n        JavaType type \u003d config.constructType(prop.type());\n        // now, then, we need a placeholder for member (no real Field/Method):\n        AnnotatedMember member \u003d new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type);\n        // and with that and property definition\n        SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class\u003c?\u003e implClass \u003d prop.value();\n\n        HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw \u003d (hi \u003d\u003d null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw \u003d\u003d null) {\n            bpw \u003d (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        // one more thing: give it necessary contextual information\n        return bpw.withConfig(config, ac, propDef, type);\n    }",
    "begin_line": 954,
    "end_line": 980,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNameForSerialization#989",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        JsonGetter jg \u003d _findAnnotation(a, JsonGetter.class);\n        if (jg !\u003d null) {\n            return PropertyName.construct(jg.value());\n        }\n        JsonProperty pann \u003d _findAnnotation(a, JsonProperty.class);\n        if (pann !\u003d null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_SER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
    "begin_line": 989,
    "end_line": 1003,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAsValue#1006",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override hasAsValue(Annotated a) {\n        JsonValue ann \u003d _findAnnotation(a, JsonValue.class);\n        if (ann \u003d\u003d null) {\n            return null;\n        }\n        return ann.value();\n    }",
    "begin_line": 1006,
    "end_line": 1012,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnyGetter#1015",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override hasAnyGetter(Annotated a) {\n        JsonAnyGetter ann \u003d _findAnnotation(a, JsonAnyGetter.class);\n        if (ann \u003d\u003d null) {\n            return null;\n        }\n        return ann.enabled();\n    }",
    "begin_line": 1015,
    "end_line": 1021,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnyGetterAnnotation#1025",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n    @Deprecated hasAnyGetterAnnotation(AnnotatedMethod am) {\n        // No dedicated disabling; regular @JsonIgnore used if needs to be ignored (handled separately)\n        return _hasAnnotation(am, JsonAnyGetter.class);\n    }",
    "begin_line": 1025,
    "end_line": 1028,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAsValueAnnotation#1032",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n    @Deprecated hasAsValueAnnotation(AnnotatedMethod am) {\n        JsonValue ann \u003d _findAnnotation(am, JsonValue.class);\n        // value of \u0027false\u0027 means disabled...\n        return (ann !\u003d null) \u0026\u0026 ann.value();\n    }",
    "begin_line": 1032,
    "end_line": 1036,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializer#1045",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findDeserializer(Annotated a)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonDeserializer\u003e deserClass \u003d ann.using();\n            if (deserClass !\u003d JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1045,
    "end_line": 1056,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findKeyDeserializer#1059",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findKeyDeserializer(Annotated a)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\n        if (ann !\u003d null) {\n            Class\u003c? extends KeyDeserializer\u003e deserClass \u003d ann.keyUsing();\n            if (deserClass !\u003d KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1059,
    "end_line": 1069,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findContentDeserializer#1072",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findContentDeserializer(Annotated a)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\n        if (ann !\u003d null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class\u003c? extends JsonDeserializer\u003e deserClass \u003d ann.contentUsing();\n            if (deserClass !\u003d JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1072,
    "end_line": 1083,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationConverter#1086",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Object findDeserializationConverter(Annotated a)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\n        return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }",
    "begin_line": 1086,
    "end_line": 1090,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationContentConverter#1093",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n    public Object findDeserializationContentConverter(AnnotatedMember a)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\n        return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }",
    "begin_line": 1093,
    "end_line": 1097,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.refineDeserializationType#1106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType refineDeserializationType(final MapperConfig\u003c?\u003e config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type \u003d baseType;\n        final TypeFactory tf \u003d config.getTypeFactory();\n\n        final JsonDeserialize jsonDeser \u003d _findAnnotation(a, JsonDeserialize.class);\n        \n        // Ok: start by refining the main type itself; common to all types\n        final Class\u003c?\u003e valueClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.as());\n        if ((valueClass !\u003d null) \u0026\u0026 !type.hasRawClass(valueClass)) {\n            try {\n                type \u003d tf.constructSpecializedType(type, valueClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to narrow type %s with annotation (value %s), from \u0027%s\u0027: %s\",\n                                type, valueClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType \u003d type.getKeyType();\n            final Class\u003c?\u003e keyClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.keyAs());\n            if (keyClass !\u003d null) {\n                try {\n                    keyType \u003d tf.constructSpecializedType(keyType, keyClass);\n                    type \u003d ((MapLikeType) type).withKeyType(keyType);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n        }\n        JavaType contentType \u003d type.getContentType();\n        if (contentType !\u003d null) { // collection[like], map[like], array, reference\n            // And then value types for all containers:\n            final Class\u003c?\u003e contentClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.contentAs());\n            if (contentClass !\u003d null) {\n                try {\n                    contentType \u003d tf.constructSpecializedType(contentType, contentClass);\n                    type \u003d type.withContentType(contentType);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n        }\n        return type;\n    }",
    "begin_line": 1106,
    "end_line": 1161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationContentType#1165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @Deprecated findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        return null;\n    }",
    "begin_line": 1165,
    "end_line": 1167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationType#1171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @Deprecated findDeserializationType(Annotated am, JavaType baseType) {\n        return null;\n    }",
    "begin_line": 1171,
    "end_line": 1173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationKeyType#1177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @Deprecated findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        return null;\n    }",
    "begin_line": 1177,
    "end_line": 1179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findValueInstantiator#1188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Object findValueInstantiator(AnnotatedClass ac)\n    {\n        JsonValueInstantiator ann \u003d _findAnnotation(ac, JsonValueInstantiator.class);\n        // no \u0027null\u0027 marker yet, so:\n        return (ann \u003d\u003d null) ? null : ann.value();\n    }",
    "begin_line": 1188,
    "end_line": 1193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPOJOBuilder#1196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Class\u003c?\u003e findPOJOBuilder(AnnotatedClass ac)\n    {\n        JsonDeserialize ann \u003d _findAnnotation(ac, JsonDeserialize.class);\n        return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.builder());\n    }",
    "begin_line": 1196,
    "end_line": 1200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPOJOBuilderConfig#1203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)\n    {\n        JsonPOJOBuilder ann \u003d _findAnnotation(ac, JsonPOJOBuilder.class);\n        return (ann \u003d\u003d null) ? null : new JsonPOJOBuilder.Value(ann);\n    }",
    "begin_line": 1203,
    "end_line": 1207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNameForDeserialization#1216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public PropertyName findNameForDeserialization(Annotated a)\n    {\n        // @JsonSetter has precedence over @JsonProperty, being more specific\n        // @JsonDeserialize implies that there is a property, but no name\n        JsonSetter js \u003d _findAnnotation(a, JsonSetter.class);\n        if (js !\u003d null) {\n            return PropertyName.construct(js.value());\n        }\n        JsonProperty pann \u003d _findAnnotation(a, JsonProperty.class);\n        if (pann !\u003d null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_DESER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
    "begin_line": 1216,
    "end_line": 1232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnySetter#1235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public Boolean hasAnySetter(Annotated a) {\n        JsonAnySetter ann \u003d _findAnnotation(a, JsonAnySetter.class);\n        return (ann \u003d\u003d null) ? null : ann.enabled();\n    }",
    "begin_line": 1235,
    "end_line": 1238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSetterInfo#1241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonSetter.Value findSetterInfo(Annotated a) {\n        return JsonSetter.Value.from(_findAnnotation(a, JsonSetter.class));\n    }",
    "begin_line": 1241,
    "end_line": 1243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findMergeInfo#1246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override findMergeInfo(Annotated a) {\n        JsonMerge ann \u003d _findAnnotation(a, JsonMerge.class);\n        return (ann \u003d\u003d null) ? null : ann.value().asBoolean();\n    }",
    "begin_line": 1246,
    "end_line": 1249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnySetterAnnotation#1253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n    @Deprecated hasAnySetterAnnotation(AnnotatedMethod am) {\n        return _hasAnnotation(am, JsonAnySetter.class);\n    }",
    "begin_line": 1253,
    "end_line": 1255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasCreatorAnnotation#1259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    @Deprecated hasCreatorAnnotation(Annotated a)\n    {\n        /* No dedicated disabling; regular @JsonIgnore used if needs to be\n         * ignored (and if so, is handled prior to this method getting called)\n         */\n         JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\n         if (ann !\u003d null) {\n             return (ann.mode() !\u003d JsonCreator.Mode.DISABLED);\n         }\n         // 19-Apr-2016, tatu: As per [databind#1197], [databind#1122] (and some related),\n         //    may or may not consider it a creator\n         if (_cfgConstructorPropertiesImpliesCreator ) {\n             if (a instanceof AnnotatedConstructor) {\n                 if (_java7Helper !\u003d null) {\n                     Boolean b \u003d _java7Helper.hasCreatorAnnotation(a);\n                     if (b !\u003d null) {\n                         return b.booleanValue();\n                     }\n                 }\n             }\n         }\n         return false;\n    }",
    "begin_line": 1259,
    "end_line": 1281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findCreatorBinding#1285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    @Deprecated findCreatorBinding(Annotated a) {\n        JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\n        return (ann \u003d\u003d null) ? null : ann.mode();\n    }",
    "begin_line": 1285,
    "end_line": 1288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findCreatorAnnotation#1291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override\n    public JsonCreator.Mode findCreatorAnnotation(MapperConfig\u003c?\u003e config, Annotated a) {\n        JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\n        if (ann !\u003d null) {\n            return ann.mode();\n        }\n\n        if (_cfgConstructorPropertiesImpliesCreator\n                \u0026\u0026 config.isEnabled(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)\n            ) {\n            if (a instanceof AnnotatedConstructor) {\n                if (_java7Helper !\u003d null) {\n                    Boolean b \u003d _java7Helper.hasCreatorAnnotation(a);\n                    if ((b !\u003d null) \u0026\u0026 b.booleanValue()) {\n                        // 13-Sep-2016, tatu: Judgment call, but I don\u0027t think JDK ever implies\n                        //    use of delegate; assumes as-properties implicitly\n                        return JsonCreator.Mode.PROPERTIES;\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 1291,
    "end_line": 1312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._isIgnorable#1320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected boolean _isIgnorable(Annotated a)\n    {\n        JsonIgnore ann \u003d _findAnnotation(a, JsonIgnore.class);\n        if (ann !\u003d null) {\n            return ann.value();\n        }\n        if (_java7Helper !\u003d null) {\n            Boolean b \u003d _java7Helper.findTransient(a);\n            if (b !\u003d null) {\n                return b.booleanValue();\n            }\n        }\n        return false;\n    }",
    "begin_line": 1320,
    "end_line": 1333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._classIfExplicit#1335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._classIfExplicit(java.lang.Class\u003c?\u003e)",
    "snippet": "protected Class\u003c?\u003e _classIfExplicit(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }",
    "begin_line": 1335,
    "end_line": 1340,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._classIfExplicit#1342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._classIfExplicit(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "protected Class\u003c?\u003e _classIfExplicit(Class\u003c?\u003e cls, Class\u003c?\u003e implicit) {\n        cls \u003d _classIfExplicit(cls);\n        return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\n    }",
    "begin_line": 1342,
    "end_line": 1345,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._propertyName#1347",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._propertyName(java.lang.String, java.lang.String)",
    "snippet": "protected PropertyName _propertyName(String localName, String namespace) {\n        if (localName.isEmpty()) {\n            return PropertyName.USE_DEFAULT;\n        }\n        if (namespace \u003d\u003d null || namespace.isEmpty()) {\n            return PropertyName.construct(localName);\n        }\n        return PropertyName.construct(localName, namespace);\n    }",
    "begin_line": 1347,
    "end_line": 1355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findConstructorName#1357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findConstructorName(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected PropertyName _findConstructorName(Annotated a)\n    {\n        if (a instanceof AnnotatedParameter) {\n            AnnotatedParameter p \u003d (AnnotatedParameter) a;\n            AnnotatedWithParams ctor \u003d p.getOwner();\n\n            if (ctor !\u003d null) {\n                if (_java7Helper !\u003d null) {\n                    PropertyName name \u003d _java7Helper.findConstructorName(p);\n                    if (name !\u003d null) {\n                        return name;\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 1357,
    "end_line": 1373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findTypeResolver#1380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"deprecation\")\n    protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config,\n            Annotated ann, JavaType baseType)\n    {\n        // First: maybe we have explicit type resolver?\n        TypeResolverBuilder\u003c?\u003e b;\n        JsonTypeInfo info \u003d _findAnnotation(ann, JsonTypeInfo.class);\n        JsonTypeResolver resAnn \u003d _findAnnotation(ann, JsonTypeResolver.class);\n        \n        if (resAnn !\u003d null) {\n            if (info \u003d\u003d null) {\n                return null;\n            }\n            /* let\u0027s not try to force access override (would need to pass\n             * settings through if we did, since that\u0027s not doable on some\n             * platforms)\n             */\n            b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else { // if not, use standard one, if indicated by annotations\n            if (info \u003d\u003d null) {\n                return null;\n            }\n            // bit special; must return \u0027marker\u0027 to block use of default typing:\n            if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b \u003d _constructStdTypeResolverBuilder();\n        }\n        // Does it define a custom type id resolver?\n        JsonTypeIdResolver idResInfo \u003d _findAnnotation(ann, JsonTypeIdResolver.class);\n        TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null\n                : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes !\u003d null) {\n            idRes.init(baseType);\n        }\n        b \u003d b.init(info.use(), idRes);\n        /* 13-Aug-2011, tatu: One complication; external id\n         *   only works for properties; so if declared for a Class, we will need\n         *   to map it to \"PROPERTY\" instead of \"EXTERNAL_PROPERTY\"\n         */\n        JsonTypeInfo.As inclusion \u003d info.include();\n        if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n            inclusion \u003d JsonTypeInfo.As.PROPERTY;\n        }\n        b \u003d b.inclusion(inclusion);\n        b \u003d b.typeProperty(info.property());\n        Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n\n        // 08-Dec-2014, tatu: To deprecate `JsonTypeInfo.None` we need to use other placeholder(s);\n        //   and since `java.util.Void` has other purpose (to indicate \"deser as null\"), we\u0027ll instead\n        //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no\n        //   valid use (can not instantiate as default)\n        if (defaultImpl !\u003d JsonTypeInfo.None.class \u0026\u0026 !defaultImpl.isAnnotation()) {\n            b \u003d b.defaultImpl(defaultImpl);\n        }\n        b \u003d b.typeIdVisibility(info.visible());\n        return b;\n    }",
    "begin_line": 1380,
    "end_line": 1436,
    "comment": "/** \n * Helper method called to construct and initialize instance of  {@link TypeResolverBuilder}if given annotated element indicates one is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructStdTypeResolverBuilder#1442",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructStdTypeResolverBuilder()",
    "snippet": "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new StdTypeResolverBuilder();\n    }",
    "begin_line": 1442,
    "end_line": 1444,
    "comment": "/** \n * Helper method for constructing standard  {@link TypeResolverBuilder}implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructNoTypeResolverBuilder#1450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructNoTypeResolverBuilder()",
    "snippet": "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return StdTypeResolverBuilder.noTypeInfoBuilder();\n    }",
    "begin_line": 1450,
    "end_line": 1452,
    "comment": "/** \n * Helper method for dealing with \"no type info\" marker; can\u0027t be null (as it\u0027d be replaced by default typing)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.SimpleMixInResolver#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides) {\n        _overrides \u003d overrides;\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.SimpleMixInResolver#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, java.util.Map\u003ccom.fasterxml.jackson.databind.type.ClassKey,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "protected SimpleMixInResolver(ClassIntrospector.MixInResolver overrides,\n            Map\u003cClassKey,Class\u003c?\u003e\u003e mixins) {\n        _overrides \u003d overrides;\n        _localMixIns \u003d mixins;\n    }",
    "begin_line": 39,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.withOverrides#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.withOverrides(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public SimpleMixInResolver withOverrides(ClassIntrospector.MixInResolver overrides) {\n        return new SimpleMixInResolver(overrides, _localMixIns);\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Mutant factory for constructor a new resolver instance with given mix-in resolver override.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.withoutLocalDefinitions#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.withoutLocalDefinitions()",
    "snippet": "public SimpleMixInResolver withoutLocalDefinitions() {\n        return new SimpleMixInResolver(_overrides, null);\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Mutant factory method that constructs a new instance that has no locally defined mix-in/target mappings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.setLocalDefinitions#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.setLocalDefinitions(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public void setLocalDefinitions(Map\u003cClass\u003c?\u003e, Class\u003c?\u003e\u003e sourceMixins) {\n        if (sourceMixins \u003d\u003d null || sourceMixins.isEmpty()) {\n            _localMixIns \u003d null;\n        } else {\n            Map\u003cClassKey,Class\u003c?\u003e\u003e mixIns \u003d new HashMap\u003cClassKey,Class\u003c?\u003e\u003e(sourceMixins.size());\n            for (Map.Entry\u003cClass\u003c?\u003e,Class\u003c?\u003e\u003e en : sourceMixins.entrySet()) {\n                mixIns.put(new ClassKey(en.getKey()), en.getValue());\n            }\n            _localMixIns \u003d mixIns;\n        }\n    }",
    "begin_line": 61,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.addLocalDefinition#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.addLocalDefinition(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public void addLocalDefinition(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n        if (_localMixIns \u003d\u003d null) {\n            _localMixIns \u003d new HashMap\u003cClassKey,Class\u003c?\u003e\u003e();\n        }\n        _localMixIns.put(new ClassKey(target), mixinSource);\n    }",
    "begin_line": 73,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.copy#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.copy()",
    "snippet": "@Override\n    public SimpleMixInResolver copy() {\n        ClassIntrospector.MixInResolver overrides \u003d (_overrides \u003d\u003d null)\n                ? null : _overrides.copy();\n        Map\u003cClassKey,Class\u003c?\u003e\u003e mixIns \u003d (_localMixIns \u003d\u003d null)\n                ? null : new HashMap\u003cClassKey,Class\u003c?\u003e\u003e(_localMixIns);\n        return new SimpleMixInResolver(overrides, mixIns);\n    }",
    "begin_line": 81,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.findMixInClassFor#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls)\n    {\n        Class\u003c?\u003e mixin \u003d (_overrides \u003d\u003d null) ? null : _overrides.findMixInClassFor(cls);\n        if (mixin \u003d\u003d null \u0026\u0026 (_localMixIns !\u003d null)) {\n            mixin \u003d _localMixIns.get(new ClassKey(cls));\n        }\n        return mixin;\n    }",
    "begin_line": 90,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.localSize#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.localSize()",
    "snippet": "public int localSize() {\n        return (_localMixIns \u003d\u003d null) ? 0 : _localMixIns.size();\n    }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.with#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(JsonAutoDetect)",
    "snippet": "public T with(JsonAutoDetect ann);",
    "begin_line": 29,
    "end_line": 29,
    "comment": "/** \n * Builder method that will return an instance that has same settings as this instance has, except for values that given annotation overrides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withOverrides#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withOverrides(JsonAutoDetect.Value)",
    "snippet": "public T withOverrides(JsonAutoDetect.Value vis);",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * Method that can be used for merging default values from `this` instance with specified overrides; and either return `this` if overrides had no effect (that is, result would be equal), or a new instance with merged visibility settings.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.with#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(Visibility)",
    "snippet": "public T with(Visibility v);",
    "begin_line": 51,
    "end_line": 51,
    "comment": "/** \n * Builder method that will create and return an instance that has specified {@link Visibility} value to use for all property elements.Typical usage would be something like: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().with(Visibility.NONE)); \u003c/pre\u003e (which would basically disable all auto-detection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withVisibility#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withVisibility(PropertyAccessor, Visibility)",
    "snippet": "public T withVisibility(PropertyAccessor method, Visibility v);",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * Builder method that will create and return an instance that has specified {@link Visibility} value to use for specified property.Typical usage would be: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().withVisibility(JsonMethod.FIELD, Visibility.ANY)); \u003c/pre\u003e (which would basically enable auto-detection for all member fields)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withGetterVisibility#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withGetterVisibility(Visibility)",
    "snippet": "public T withGetterVisibility(Visibility v);",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for regular (\"getXxx\") getters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withIsGetterVisibility#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withIsGetterVisibility(Visibility)",
    "snippet": "public T withIsGetterVisibility(Visibility v);",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for \"is-getters\" (\"isXxx\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withSetterVisibility#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withSetterVisibility(Visibility)",
    "snippet": "public T withSetterVisibility(Visibility v);",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for setters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withCreatorVisibility#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withCreatorVisibility(Visibility)",
    "snippet": "public T withCreatorVisibility(Visibility v);",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for creator methods (constructors, factory methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withFieldVisibility#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withFieldVisibility(Visibility)",
    "snippet": "public T withFieldVisibility(Visibility v);",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for fields.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isGetterVisible#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isGetterVisible(Method m);",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as regular getter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isGetterVisible#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isGetterVisible(AnnotatedMethod m);",
    "begin_line": 104,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isIsGetterVisible#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isIsGetterVisible(Method m);",
    "begin_line": 111,
    "end_line": 111,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as is-getter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isIsGetterVisible#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isIsGetterVisible(AnnotatedMethod m);",
    "begin_line": 112,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isSetterVisible#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isSetterVisible(Method m);",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as setter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isSetterVisible#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isSetterVisible(AnnotatedMethod m);",
    "begin_line": 120,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isCreatorVisible#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(java.lang.reflect.Member)",
    "snippet": "public boolean isCreatorVisible(Member m);",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as Creator, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isCreatorVisible#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public boolean isCreatorVisible(AnnotatedMember m);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isFieldVisible#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(java.lang.reflect.Field)",
    "snippet": "public boolean isFieldVisible(Field f);",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * Method for checking whether given field is auto-detectable as property, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isFieldVisible#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)",
    "snippet": "public boolean isFieldVisible(AnnotatedField f);",
    "begin_line": 136,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.defaultInstance#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.defaultInstance()",
    "snippet": "public static Std defaultInstance() { return DEFAULT; }",
    "begin_line": 178,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(JsonAutoDetect)",
    "snippet": "public Std(JsonAutoDetect ann)\n        {\n            // let\u0027s combine checks for enabled/disabled, with minimum level checks:\n            _getterMinLevel \u003d ann.getterVisibility();\n            _isGetterMinLevel \u003d ann.isGetterVisibility();\n            _setterMinLevel \u003d ann.setterVisibility();\n            _creatorMinLevel \u003d ann.creatorVisibility();\n            _fieldMinLevel \u003d ann.fieldVisibility();\n        }",
    "begin_line": 186,
    "end_line": 194,
    "comment": "/** \n * Constructor used for building instance that has minumum visibility levels as indicated by given annotation instance\n * @param ann Annotations to use for determining minimum visibility levels\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(Visibility, Visibility, Visibility, Visibility, Visibility)",
    "snippet": "public Std(Visibility getter, Visibility isGetter, Visibility setter,\n                Visibility creator, Visibility field)\n        {\n            _getterMinLevel \u003d getter;\n            _isGetterMinLevel \u003d isGetter;\n            _setterMinLevel \u003d setter;\n            _creatorMinLevel \u003d creator;\n            _fieldMinLevel \u003d field;\n        }",
    "begin_line": 199,
    "end_line": 207,
    "comment": "/** \n * Constructor that allows directly specifying minimum visibility levels to use\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(Visibility)",
    "snippet": "public Std(Visibility v)\n        {\n            // typically we shouldn\u0027t get this value; but let\u0027s handle it if we do:\n            if (v \u003d\u003d Visibility.DEFAULT) {\n                _getterMinLevel \u003d DEFAULT._getterMinLevel;\n                _isGetterMinLevel \u003d DEFAULT._isGetterMinLevel;\n                _setterMinLevel \u003d DEFAULT._setterMinLevel;\n                _creatorMinLevel \u003d DEFAULT._creatorMinLevel;\n                _fieldMinLevel \u003d DEFAULT._fieldMinLevel;\n            } else {\n                _getterMinLevel \u003d v;\n                _isGetterMinLevel \u003d v;\n                _setterMinLevel \u003d v;\n                _creatorMinLevel \u003d v;\n                _fieldMinLevel \u003d v;\n            }\n        }",
    "begin_line": 215,
    "end_line": 231,
    "comment": "/** \n * Constructor that will assign given visibility value for all properties.\n * @param v level to use for all property types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.construct#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.construct(JsonAutoDetect.Value)",
    "snippet": "public static Std construct(JsonAutoDetect.Value vis) {\n            return DEFAULT.withOverrides(vis);\n        }",
    "begin_line": 236,
    "end_line": 238,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._with#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker._with(Visibility, Visibility, Visibility, Visibility, Visibility)",
    "snippet": "protected Std _with(Visibility g, Visibility isG, Visibility s,\n                Visibility cr, Visibility f) {\n            if ((g \u003d\u003d _getterMinLevel)\n                    \u0026\u0026 (isG \u003d\u003d _isGetterMinLevel)\n                    \u0026\u0026 (s \u003d\u003d _setterMinLevel)\n                    \u0026\u0026 (cr \u003d\u003d _creatorMinLevel)\n                    \u0026\u0026 (f \u003d\u003d _fieldMinLevel)\n                    ) {\n                return this;\n            }\n            return new Std(g, isG, s, cr, f);\n        }",
    "begin_line": 247,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.with#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(JsonAutoDetect)",
    "snippet": "@Override\n        public Std with(JsonAutoDetect ann)\n        {\n            Std curr \u003d this;\n            if (ann !\u003d null) {\n                return _with(\n                        _defaultOrOverride(_getterMinLevel, ann.getterVisibility()),\n                        _defaultOrOverride(_isGetterMinLevel, ann.isGetterVisibility()),\n                        _defaultOrOverride(_setterMinLevel, ann.setterVisibility()),\n                        _defaultOrOverride(_creatorMinLevel, ann.creatorVisibility()),\n                        _defaultOrOverride(_fieldMinLevel, ann.fieldVisibility())\n                        );\n            }\n            return curr;\n        }",
    "begin_line": 261,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withOverrides#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withOverrides(JsonAutoDetect.Value)",
    "snippet": "@Override withOverrides(JsonAutoDetect.Value vis)\n        {\n            Std curr \u003d this;\n            if (vis !\u003d null) {\n                return _with(\n                        _defaultOrOverride(_getterMinLevel, vis.getGetterVisibility()),\n                        _defaultOrOverride(_isGetterMinLevel, vis.getIsGetterVisibility()),\n                        _defaultOrOverride(_setterMinLevel, vis.getSetterVisibility()),\n                        _defaultOrOverride(_creatorMinLevel, vis.getCreatorVisibility()),\n                        _defaultOrOverride(_fieldMinLevel, vis.getFieldVisibility())\n                        );\n            }\n            return curr;\n        }",
    "begin_line": 277,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._defaultOrOverride#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker._defaultOrOverride(Visibility, Visibility)",
    "snippet": "private Visibility _defaultOrOverride(Visibility defaults, Visibility override) {\n            if (override \u003d\u003d Visibility.DEFAULT) {\n                return defaults;\n            }\n            return override;\n        }",
    "begin_line": 292,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.with#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(Visibility)",
    "snippet": "@Override\n        public Std with(Visibility v)\n        {\n            if (v \u003d\u003d Visibility.DEFAULT) {\n                return DEFAULT;\n            }\n            return new Std(v);\n        }",
    "begin_line": 300,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withVisibility#309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withVisibility(PropertyAccessor, Visibility)",
    "snippet": "@Override\n        public Std withVisibility(PropertyAccessor method, Visibility v)\n        {\n            switch (method) {\n            case GETTER:\n                return withGetterVisibility(v);\n            case SETTER:\n                return withSetterVisibility(v);\n            case CREATOR:\n                return withCreatorVisibility(v);\n            case FIELD:\n                return withFieldVisibility(v);\n            case IS_GETTER:\n                return withIsGetterVisibility(v);\n            case ALL:\n                return with(v);\n            //case NONE:\n            default:\n                // break;\n                return this;\n            }\n        }",
    "begin_line": 309,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withGetterVisibility#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withGetterVisibility(Visibility)",
    "snippet": "@Override\n        public Std withGetterVisibility(Visibility v) {\n            if (v \u003d\u003d Visibility.DEFAULT) v \u003d DEFAULT._getterMinLevel;\n            if (_getterMinLevel \u003d\u003d v) return this;\n            return new Std(v, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n        }",
    "begin_line": 332,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withIsGetterVisibility#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withIsGetterVisibility(Visibility)",
    "snippet": "@Override\n        public Std withIsGetterVisibility(Visibility v) {\n            if (v \u003d\u003d Visibility.DEFAULT) v \u003d DEFAULT._isGetterMinLevel;\n            if (_isGetterMinLevel \u003d\u003d v) return this;\n            return new Std(_getterMinLevel, v, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n        }",
    "begin_line": 339,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withSetterVisibility#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withSetterVisibility(Visibility)",
    "snippet": "@Override\n        public Std withSetterVisibility(Visibility v) {\n            if (v \u003d\u003d Visibility.DEFAULT) v \u003d DEFAULT._setterMinLevel;\n            if (_setterMinLevel \u003d\u003d v) return this;\n            return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n        }",
    "begin_line": 346,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withCreatorVisibility#353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withCreatorVisibility(Visibility)",
    "snippet": "@Override\n        public Std withCreatorVisibility(Visibility v) {\n            if (v \u003d\u003d Visibility.DEFAULT) v \u003d DEFAULT._creatorMinLevel;\n            if (_creatorMinLevel \u003d\u003d v) return this;\n            return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n        }",
    "begin_line": 353,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withFieldVisibility#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withFieldVisibility(Visibility)",
    "snippet": "@Override\n        public Std withFieldVisibility(Visibility v) {\n            if (v \u003d\u003d Visibility.DEFAULT)  v \u003d DEFAULT._fieldMinLevel;\n            if (_fieldMinLevel \u003d\u003d v) return this;\n            return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, v);\n        }",
    "begin_line": 360,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isCreatorVisible#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(java.lang.reflect.Member)",
    "snippet": "@Override\n        public boolean isCreatorVisible(Member m) {\n            return _creatorMinLevel.isVisible(m);\n        }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isCreatorVisible#378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override\n        public boolean isCreatorVisible(AnnotatedMember m) {\n            return isCreatorVisible(m.getMember());\n        }",
    "begin_line": 378,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isFieldVisible#383",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(java.lang.reflect.Field)",
    "snippet": "@Override\n        public boolean isFieldVisible(Field f) {\n            return _fieldMinLevel.isVisible(f);\n        }",
    "begin_line": 383,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isFieldVisible#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)",
    "snippet": "@Override\n        public boolean isFieldVisible(AnnotatedField f) {\n            return isFieldVisible(f.getAnnotated());\n        }",
    "begin_line": 388,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isGetterVisible#393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override\n        public boolean isGetterVisible(Method m) {\n            return _getterMinLevel.isVisible(m);\n        }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isGetterVisible#398",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n        public boolean isGetterVisible(AnnotatedMethod m) {\n             return isGetterVisible(m.getAnnotated());\n        }",
    "begin_line": 398,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isIsGetterVisible#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override\n        public boolean isIsGetterVisible(Method m) {\n            return _isGetterMinLevel.isVisible(m);\n        }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isIsGetterVisible#408",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n        public boolean isIsGetterVisible(AnnotatedMethod m) {\n            return isIsGetterVisible(m.getAnnotated());\n        }",
    "begin_line": 408,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isSetterVisible#413",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override\n        public boolean isSetterVisible(Method m) {\n            return _setterMinLevel.isVisible(m);\n        }",
    "begin_line": 413,
    "end_line": 415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isSetterVisible#418",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override\n        public boolean isSetterVisible(AnnotatedMethod m) {\n            return isSetterVisible(m.getAnnotated());\n        }",
    "begin_line": 418,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.toString#429",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.toString()",
    "snippet": "@Override\n        public String toString() {\n            return String.format(\"[Visibility: getter\u003d%s,isGetter\u003d%s,setter\u003d%s,creator\u003d%s,field\u003d%s]\",\n                    _getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n        }",
    "begin_line": 429,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.NamedType#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(java.lang.Class\u003c?\u003e)",
    "snippet": "public NamedType(Class\u003c?\u003e c) { this(c, null); }",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.NamedType#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public NamedType(Class\u003c?\u003e c, String name) {\n        _class \u003d c;\n        _hashCode \u003d c.getName().hashCode();\n        setName(name);\n    }",
    "begin_line": 18,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getType#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.getType()",
    "snippet": "public Class\u003c?\u003e getType() { return _class; }",
    "begin_line": 24,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getName#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.getName()",
    "snippet": "public String getName() { return _name; }",
    "begin_line": 25,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.setName#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.setName(java.lang.String)",
    "snippet": "public void setName(String name) { _name \u003d (name \u003d\u003d null || name.length() \u003d\u003d 0) ? null : name; }",
    "begin_line": 26,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hasName#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.hasName()",
    "snippet": "public boolean hasName() { return _name !\u003d null; }",
    "begin_line": 28,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.equals#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n        return _class \u003d\u003d ((NamedType) o)._class;\n    }",
    "begin_line": 34,
    "end_line": 39,
    "comment": "/** \n * Equality is defined based on class only, not on name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hashCode#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.hashCode()",
    "snippet": "@Override\n    public int hashCode() { return _hashCode; }",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.toString#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.toString()",
    "snippet": "@Override\n    public String toString() {\n    \treturn \"[NamedType, class \"+_class.getName()+\", name: \"\n    \t        +(_name \u003d\u003d null ? \"null\" :(\"\u0027\"+_name+\"\u0027\"))+\"]\";\n    }",
    "begin_line": 45,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.registerSubtypes#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "public abstract void registerSubtypes(NamedType... types);",
    "begin_line": 28,
    "end_line": 28,
    "comment": "/** \n * Method for registering specified subtypes (possibly including type names); for type entries without name, non-qualified class name as used as name (unless overridden by annotation).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.registerSubtypes#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract void registerSubtypes(Class\u003c?\u003e... classes);",
    "begin_line": 30,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByClass#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config, \n            AnnotatedMember property, JavaType baseType) {\n        // for backwards compatibility...\n        return collectAndResolveSubtypes(property, config,\n                config.getAnnotationIntrospector(), baseType);\n    }",
    "begin_line": 50,
    "end_line": 55,
    "comment": "/** \n * Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type, typically needed for serialization (converting from type to type name).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByClass#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,\n            AnnotatedClass baseType) {\n        // for backwards compatibility...\n        return collectAndResolveSubtypes(baseType, config, config.getAnnotationIntrospector());\n    }",
    "begin_line": 68,
    "end_line": 72,
    "comment": "/** \n * Method for finding out all reachable subtypes for given type, such that access is by type, typically needed for serialization (converting from type to type name).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByTypeId#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config, \n            AnnotatedMember property, JavaType baseType) {\n        // for backwards compatibility...\n        return collectAndResolveSubtypes(property, config,\n                config.getAnnotationIntrospector(), baseType);\n    }",
    "begin_line": 86,
    "end_line": 91,
    "comment": "/** \n * Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type id, typically needed for deserialization (converting from type id to type).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByTypeId#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,\n            AnnotatedClass baseType) {\n        // for backwards compatibility...\n        return collectAndResolveSubtypes(baseType, config, config.getAnnotationIntrospector());\n    }",
    "begin_line": 104,
    "end_line": 108,
    "comment": "/** \n * Method for finding out all reachable subtypes for given type, such that access is by type id, typically needed for deserialization (converting from type id to type).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypes#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypes(AnnotatedMember property,\n            MapperConfig\u003c?\u003e config, AnnotationIntrospector ai, JavaType baseType) {\n        return collectAndResolveSubtypesByClass(config, property, baseType);\n    }",
    "begin_line": 123,
    "end_line": 126,
    "comment": "/** \n * @deprecated Since 2.6 Use either{@link #collectAndResolveSubtypesByClass(MapperConfig,AnnotatedMember,JavaType)}or  {@link #collectAndResolveSubtypesByTypeId(MapperConfig,AnnotatedMember,JavaType)}instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypes#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Deprecated\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypes(AnnotatedClass baseType,\n            MapperConfig\u003c?\u003e config, AnnotationIntrospector ai) {\n        return collectAndResolveSubtypesByClass(config, baseType);\n    }",
    "begin_line": 135,
    "end_line": 138,
    "comment": "/** \n * @deprecated Since 2.6 Use either{@link #collectAndResolveSubtypesByClass(MapperConfig,AnnotatedClass)}or  {@link #collectAndResolveSubtypesByTypeId(MapperConfig,AnnotatedClass)}instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.StdSubtypeResolver#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.StdSubtypeResolver()",
    "snippet": "public StdSubtypeResolver() { }",
    "begin_line": 24,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.registerSubtypes#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "@Override    \n    public void registerSubtypes(NamedType... types) {\n        if (_registeredSubtypes \u003d\u003d null) {\n            _registeredSubtypes \u003d new LinkedHashSet\u003cNamedType\u003e();\n        }\n        for (NamedType type : types) {\n            _registeredSubtypes.add(type);\n        }\n    }",
    "begin_line": 33,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.registerSubtypes#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public void registerSubtypes(Class\u003c?\u003e... classes) {\n        NamedType[] types \u003d new NamedType[classes.length];\n        for (int i \u003d 0, len \u003d classes.length; i \u003c len; ++i) {\n            types[i] \u003d new NamedType(classes[i]);\n        }\n        registerSubtypes(types);\n    }",
    "begin_line": 43,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByClass#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config, \n            AnnotatedMember property, JavaType baseType)\n    {\n        final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        // for backwards compatibility, must allow null here:\n        Class\u003c?\u003e rawBase \u003d (baseType \u003d\u003d null) ? property.getRawType() : baseType.getRawClass();\n        \n        HashMap\u003cNamedType, NamedType\u003e collected \u003d new HashMap\u003cNamedType, NamedType\u003e();\n        // start with registered subtypes (which have precedence)\n        if (_registeredSubtypes !\u003d null) {\n            for (NamedType subtype : _registeredSubtypes) {\n                // is it a subtype of root type?\n                if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n                    AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());\n                    _collectAndResolve(curr, subtype, config, ai, collected);\n                }\n            }\n        }\n        \n        // then annotated types for property itself\n            Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\n            if (st !\u003d null) {\n                for (NamedType nt : st) {\n                    AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            nt.getType());\n                    _collectAndResolve(ac, nt, config, ai, collected);\n                }            \n        }\n\n        NamedType rootType \u003d new NamedType(rawBase, null);\n        AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n            \n        // and finally subtypes via annotations from base type (recursively)\n        _collectAndResolve(ac, rootType, config, ai, collected);\n\n        return new ArrayList\u003cNamedType\u003e(collected.values());\n    }",
    "begin_line": 58,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByClass#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,\n            AnnotatedClass type)\n    {\n        final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        HashMap\u003cNamedType, NamedType\u003e subtypes \u003d new HashMap\u003cNamedType, NamedType\u003e();\n        // then consider registered subtypes (which have precedence over annotations)\n        if (_registeredSubtypes !\u003d null) {\n            Class\u003c?\u003e rawBase \u003d type.getRawType();\n            for (NamedType subtype : _registeredSubtypes) {\n                // is it a subtype of root type?\n                if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n                    AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());\n                    _collectAndResolve(curr, subtype, config, ai, subtypes);\n                }\n            }\n        }\n        // and then check subtypes via annotations from base type (recursively)\n        NamedType rootType \u003d new NamedType(type.getRawType(), null);\n        _collectAndResolve(type, rootType, config, ai, subtypes);\n        return new ArrayList\u003cNamedType\u003e(subtypes.values());\n    }",
    "begin_line": 98,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByTypeId#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config, \n            AnnotatedMember property, JavaType baseType)\n    {\n        final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\n\n        // Need to keep track of classes that have been handled already \n        Set\u003cClass\u003c?\u003e\u003e typesHandled \u003d new HashSet\u003cClass\u003c?\u003e\u003e();\n        Map\u003cString,NamedType\u003e byName \u003d new LinkedHashMap\u003cString,NamedType\u003e();\n\n        // start with lowest-precedence, which is from type hierarchy\n        NamedType rootType \u003d new NamedType(rawBase, null);\n        AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                rawBase);\n        _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n        \n        // then with definitions from property\n            Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\n            if (st !\u003d null) {\n                for (NamedType nt : st) {\n                    ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n                    _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n                }            \n        }\n        // and finally explicit type registrations (highest precedence)\n        if (_registeredSubtypes !\u003d null) {\n            for (NamedType subtype : _registeredSubtypes) {\n                // is it a subtype of root type?\n                if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n                    AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());\n                    _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\n                }\n            }\n        }\n        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n    }",
    "begin_line": 128,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByTypeId#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override\n    public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,\n            AnnotatedClass baseType)\n    {\n        final Class\u003c?\u003e rawBase \u003d baseType.getRawType();\n        Set\u003cClass\u003c?\u003e\u003e typesHandled \u003d new HashSet\u003cClass\u003c?\u003e\u003e();\n        Map\u003cString,NamedType\u003e byName \u003d new LinkedHashMap\u003cString,NamedType\u003e();\n\n        NamedType rootType \u003d new NamedType(rawBase, null);\n        _collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);\n        \n        if (_registeredSubtypes !\u003d null) {\n            for (NamedType subtype : _registeredSubtypes) {\n                // is it a subtype of root type?\n                if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n                    AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());\n                    _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\n                }\n            }\n        }\n        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n    }",
    "begin_line": 167,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._collectAndResolve#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._collectAndResolve(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, java.util.HashMap\u003ccom.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected void _collectAndResolve(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig\u003c?\u003e config, AnnotationIntrospector ai,\n            HashMap\u003cNamedType, NamedType\u003e collectedSubtypes)\n    {\n        if (!namedType.hasName()) {\n            String name \u003d ai.findTypeName(annotatedType);\n            if (name !\u003d null) {\n                namedType \u003d new NamedType(namedType.getType(), name);\n            }\n        }\n\n        // First things first: is base type itself included?\n        if (collectedSubtypes.containsKey(namedType)) {\n            // if so, no recursion; however, may need to update name?\n            if (namedType.hasName()) {\n                NamedType prev \u003d collectedSubtypes.get(namedType);\n                if (!prev.hasName()) {\n                    collectedSubtypes.put(namedType, namedType);\n                }\n            }\n            return;\n        }\n        // if it wasn\u0027t, add and check subtypes recursively\n        collectedSubtypes.put(namedType, namedType);\n        Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\n        if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\n            for (NamedType subtype : st) {\n                AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                        subtype.getType());\n                _collectAndResolve(subtypeClass, subtype, config, ai, collectedSubtypes);\n            }\n        }\n    }",
    "begin_line": 200,
    "end_line": 232,
    "comment": "/** \n * Method called to find subtypes for a specific type (class), using type (class) as the unique key (in case of conflicts).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._collectAndResolveByTypeId#238",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._collectAndResolveByTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected void _collectAndResolveByTypeId(AnnotatedClass annotatedType, NamedType namedType,\n            MapperConfig\u003c?\u003e config,\n            Set\u003cClass\u003c?\u003e\u003e typesHandled, Map\u003cString,NamedType\u003e byName)\n    {\n        final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        if (!namedType.hasName()) {\n            String name \u003d ai.findTypeName(annotatedType);\n            if (name !\u003d null) {\n                namedType \u003d new NamedType(namedType.getType(), name);\n            }\n        }\n        if (namedType.hasName()) {\n            byName.put(namedType.getName(), namedType);\n        }\n\n        // only check subtypes if this type hadn\u0027t yet been handled\n        if (typesHandled.add(namedType.getType())) {\n            Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\n            if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\n                for (NamedType subtype : st) {\n                    AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n                            subtype.getType());\n                    _collectAndResolveByTypeId(subtypeClass, subtype, config, typesHandled, byName);\n                }\n            }\n        }\n    }",
    "begin_line": 238,
    "end_line": 264,
    "comment": "/** \n * Method called to find subtypes for a specific type (class), using type id as the unique key (in case of conflicts).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._combineNamedAndUnnamed#270",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._combineNamedAndUnnamed(java.lang.Class\u003c?\u003e, java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected Collection\u003cNamedType\u003e _combineNamedAndUnnamed(Class\u003c?\u003e rawBase,\n            Set\u003cClass\u003c?\u003e\u003e typesHandled, Map\u003cString,NamedType\u003e byName)\n    {\n        ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(byName.values());\n\n        // Ok, so... we will figure out which classes have no explicitly assigned name,\n        // by removing Classes from Set. And for remaining classes, add an anonymous\n        // marker\n        for (NamedType t : byName.values()) {\n            typesHandled.remove(t.getType());\n        }\n        for (Class\u003c?\u003e cls : typesHandled) {\n            // 27-Apr-2017, tatu: [databind#1616] Do not add base type itself unless\n            //     it is concrete (or has explicit type name)\n            if ((cls \u003d\u003d rawBase) \u0026\u0026 Modifier.isAbstract(cls.getModifiers())) {\n                continue;\n            }\n            result.add(new NamedType(cls));\n        }\n        return result;\n    }",
    "begin_line": 270,
    "end_line": 290,
    "comment": "/** \n * Helper method used for merging explicitly named types and handled classes without explicit names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.JsonNodeFactory#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)",
    "snippet": "public JsonNodeFactory(boolean bigDecimalExact)\n    {\n        _cfgBigDecimalExact \u003d bigDecimalExact;\n    }",
    "begin_line": 61,
    "end_line": 64,
    "comment": "/** \n * Main constructor \u003cp\u003eThe only argument to this constructor is a boolean telling whether {@link DecimalNode} instances must be built with exact representations of{@link BigDecimal} instances.\u003c/p\u003e\u003cp\u003eThis has quite an influence since, for instance, a BigDecimal (and, therefore, a DecimalNode) constructed from input string  {@code \"1.0\"} andanother constructed with input string  {@code \"1.00\"} \u003cb\u003ewill not\u003c/b\u003e beequal, since their scale differs (1 in the first case, 2 in the second case).\u003c/p\u003e \u003cp\u003eNote that setting the argument to  {@code true} does \u003ci\u003enot\u003c/i\u003eguarantee a strict inequality between JSON representations: input texts {@code \"0.1\"} and {@code \"1e-1\"}, for instance, yield two equivalent BigDecimal instances since they have the same scale (1).\u003c/p\u003e \u003cp\u003eThe no-arg constructor (and the default  {@link #instance}) calls this constructor with  {@code false} as an argument.\u003c/p\u003e\n * @param bigDecimalExact see description\n * @see BigDecimal\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.JsonNodeFactory#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory()",
    "snippet": "protected JsonNodeFactory()\n    {\n        this(false);\n    }",
    "begin_line": 72,
    "end_line": 75,
    "comment": "/** \n * Default constructor \u003cp\u003eThis calls  {@link #JsonNodeFactory(boolean)} with {@code false}as an argument.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.withExactBigDecimals#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals(boolean)",
    "snippet": "public static JsonNodeFactory withExactBigDecimals(boolean bigDecimalExact)\n    {\n        return bigDecimalExact ? decimalsAsIs : decimalsNormalized;\n    }",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Return a factory instance with the desired behavior for BigDecimals \u003cp\u003eSee  {@link #JsonNodeFactory(boolean)} for a full description.\u003c/p\u003e\n * @param bigDecimalExact see description\n * @return a factory instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.booleanNode#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode(boolean)",
    "snippet": "@Override\n    public BooleanNode booleanNode(boolean v) {\n        return v ? BooleanNode.getTrue() : BooleanNode.getFalse();\n    }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Factory method for getting an instance of JSON boolean value (either literal \u0027true\u0027 or \u0027false\u0027)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.nullNode#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode()",
    "snippet": "@Override\n    public NullNode nullNode() { return NullNode.getInstance(); }",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * Factory method for getting an instance of JSON null node (which represents literal null value)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(byte)",
    "snippet": "@Override\n    public NumericNode numberNode(byte v) { return IntNode.valueOf(v); }",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 8-bit value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Byte)",
    "snippet": "@Override\n    public ValueNode numberNode(Byte value) {\n        return (value \u003d\u003d null) ? nullNode() : IntNode.valueOf(value.intValue());\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(short)",
    "snippet": "@Override\n    public NumericNode numberNode(short v) { return ShortNode.valueOf(v); }",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 16-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Short)",
    "snippet": "@Override\n    public ValueNode numberNode(Short value) {\n        return (value \u003d\u003d null) ? nullNode() : ShortNode.valueOf(value);\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(int)",
    "snippet": "@Override\n    public NumericNode numberNode(int v) { return IntNode.valueOf(v); }",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 32-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Integer)",
    "snippet": "@Override\n    public ValueNode numberNode(Integer value) {\n        return (value \u003d\u003d null) ? nullNode() : IntNode.valueOf(value.intValue());\n    }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(long)",
    "snippet": "@Override\n    public NumericNode numberNode(long v) {\n        return LongNode.valueOf(v);\n    }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 64-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Long)",
    "snippet": "@Override\n    public ValueNode numberNode(Long v) {\n        if (v \u003d\u003d null) {\n            return nullNode();\n        }\n        return LongNode.valueOf(v.longValue());\n    }",
    "begin_line": 186,
    "end_line": 191,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigInteger)",
    "snippet": "@Override\n    public ValueNode numberNode(BigInteger v) {\n        if (v \u003d\u003d null) {\n            return nullNode();\n        }\n        return BigIntegerNode.valueOf(v);\n    }",
    "begin_line": 198,
    "end_line": 203,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given unlimited range integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(float)",
    "snippet": "@Override\n    public NumericNode numberNode(float v) { return FloatNode.valueOf((float) v); }",
    "begin_line": 210,
    "end_line": 210,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 32-bit floating point value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Float)",
    "snippet": "@Override\n    public ValueNode numberNode(Float value) {\n        return (value \u003d\u003d null) ? nullNode() : FloatNode.valueOf(value.floatValue());\n    }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(double)",
    "snippet": "@Override\n    public NumericNode numberNode(double v) { return DoubleNode.valueOf(v); }",
    "begin_line": 228,
    "end_line": 228,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 64-bit floating point value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Double)",
    "snippet": "@Override\n    public ValueNode numberNode(Double value) {\n        return (value \u003d\u003d null) ? nullNode() : DoubleNode.valueOf(value.doubleValue());\n    }",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigDecimal)",
    "snippet": "@Override\n    public ValueNode numberNode(BigDecimal v)\n    {\n        if (v \u003d\u003d null) {\n            return nullNode();\n        }\n\n        /*\n         * If the user wants the exact representation of this big decimal,\n         * return the value directly\n         */\n        if (_cfgBigDecimalExact)\n            return DecimalNode.valueOf(v);\n\n        /*\n         * If the user has asked to strip trailing zeroes, however, there is\n         * this bug to account for:\n         *\n         * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d6480539\n         *\n         * In short: zeroes are never stripped out of 0! We therefore _have_\n         * to compare with BigDecimal.ZERO...\n         */\n        return v.compareTo(BigDecimal.ZERO) \u003d\u003d 0 ? DecimalNode.ZERO\n            : DecimalNode.valueOf(v.stripTrailingZeros());\n    }",
    "begin_line": 252,
    "end_line": 276,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given unlimited precision floating point value \u003cp\u003eIn the event that the factory has been built to normalize decimal values, the BigDecimal argument will be stripped off its trailing zeroes, using  {@link BigDecimal#stripTrailingZeros()}.\u003c/p\u003e\n * @see #JsonNodeFactory(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.textNode#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode(java.lang.String)",
    "snippet": "@Override\n    public TextNode textNode(String text) { return TextNode.valueOf(text); }",
    "begin_line": 289,
    "end_line": 289,
    "comment": "/** \n * Factory method for constructing a node that represents JSON String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.binaryNode#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[])",
    "snippet": "@Override\n    public BinaryNode binaryNode(byte[] data) { return BinaryNode.valueOf(data); }",
    "begin_line": 297,
    "end_line": 297,
    "comment": "/** \n * Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.binaryNode#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[], int, int)",
    "snippet": "@Override\n    public BinaryNode binaryNode(byte[] data, int offset, int length) {\n        return BinaryNode.valueOf(data, offset, length);\n    }",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.arrayNode#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode()",
    "snippet": "@Override\n    public ArrayNode arrayNode() { return new ArrayNode(this); }",
    "begin_line": 319,
    "end_line": 319,
    "comment": "/** \n * Factory method for constructing an empty JSON Array node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.arrayNode#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode(int)",
    "snippet": "@Override\n    public ArrayNode arrayNode(int capacity) { return new ArrayNode(this, capacity); }",
    "begin_line": 327,
    "end_line": 327,
    "comment": "/** \n * Factory method for constructing a JSON Array node with an initial capacity\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.objectNode#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode()",
    "snippet": "@Override\n    public ObjectNode objectNode() { return new ObjectNode(this); }",
    "begin_line": 333,
    "end_line": 333,
    "comment": "/** \n * Factory method for constructing an empty JSON Object (\"struct\") node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.pojoNode#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode(java.lang.Object)",
    "snippet": "@Override\n    public ValueNode pojoNode(Object pojo) { return new POJONode(pojo); }",
    "begin_line": 342,
    "end_line": 342,
    "comment": "/** \n * Factory method for constructing a wrapper for POJO (\"Plain Old Java Object\") objects; these will get serialized using data binding, usually as JSON Objects, but in some cases as JSON Strings or other node types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.rawValueNode#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode(com.fasterxml.jackson.databind.util.RawValue)",
    "snippet": "@Override\n    public ValueNode rawValueNode(RawValue value) {\n        return new POJONode(value);\n    }",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory._inIntRange#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange(long)",
    "snippet": "protected boolean _inIntRange(long l)\n    {\n        int i \u003d (int) l;\n        long l2 \u003d (long) i;\n        return (l2 \u003d\u003d l);\n    }",
    "begin_line": 355,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.BasicSerializerFactory#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "protected BasicSerializerFactory(SerializerFactoryConfig config) {\n        _factoryConfig \u003d (config \u003d\u003d null) ? new SerializerFactoryConfig() : config;\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * We will provide default constructor to allow sub-classing, but make it protected so that no non-singleton instances of the class will be instantiated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.getFactoryConfig#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig()",
    "snippet": "public SerializerFactoryConfig getFactoryConfig() {\n        return _factoryConfig;\n    }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Method for getting current  {@link SerializerFactoryConfig}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withConfig#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "public abstract SerializerFactory withConfig(SerializerFactoryConfig config);",
    "begin_line": 159,
    "end_line": 159,
    "comment": "/** \n * Method used for creating a new instance of this factory, but with different configuration. Reason for specifying factory method (instead of plain constructor) is to allow proper sub-classing of factories. \u003cp\u003e Note that custom sub-classes generally \u003cb\u003emust override\u003c/b\u003e implementation of this method, as it usually requires instantiating a new instance of factory type. Check out javadocs for {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withAdditionalSerializers#166",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override\n    public final SerializerFactory withAdditionalSerializers(Serializers additional) {\n        return withConfig(_factoryConfig.withAdditionalSerializers(additional));\n    }",
    "begin_line": 166,
    "end_line": 168,
    "comment": "/** \n * Convenience method for creating a new factory instance with an additional serializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withAdditionalKeySerializers#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override\n    public final SerializerFactory withAdditionalKeySerializers(Serializers additional) {\n        return withConfig(_factoryConfig.withAdditionalKeySerializers(additional));\n    }",
    "begin_line": 175,
    "end_line": 177,
    "comment": "/** \n * Convenience method for creating a new factory instance with an additional key serializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withSerializerModifier#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "@Override\n    public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) {\n        return withConfig(_factoryConfig.withSerializerModifier(modifier));\n    }",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional bean serializer modifier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createSerializer#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public abstract JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,\n            JavaType type)\n        throws JsonMappingException;",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createKeySerializer#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e createKeySerializer(SerializationConfig config,\n            JavaType keyType, JsonSerializer\u003cObject\u003e defaultImpl)\n    {\n        // We should not need any member method info; at most class annotations for Map type\n        // ... at least, not here.\n        BeanDescription beanDesc \u003d config.introspectClassAnnotations(keyType.getRawClass());\n        JsonSerializer\u003c?\u003e ser \u003d null;\n        // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n        if (_factoryConfig.hasKeySerializers()) {\n            // Only thing we have here are module-provided key serializers:\n            for (Serializers serializers : _factoryConfig.keySerializers()) {\n                ser \u003d serializers.findSerializer(config, keyType, beanDesc);\n                if (ser !\u003d null) {\n                    break;\n                }\n            }\n        }\n        if (ser \u003d\u003d null) {\n            ser \u003d defaultImpl;\n            if (ser \u003d\u003d null) {\n                ser \u003d StdKeySerializers.getStdKeySerializer(config, keyType.getRawClass(), false);\n                // As per [databind#47], also need to support @JsonValue\n                if (ser \u003d\u003d null) {\n                    beanDesc \u003d config.introspect(keyType);\n                    AnnotatedMember am \u003d beanDesc.findJsonValueAccessor();\n                    if (am !\u003d null) {\n                        final Class\u003c?\u003e rawType \u003d am.getRawType();\n                        JsonSerializer\u003c?\u003e delegate \u003d StdKeySerializers.getStdKeySerializer(config,\n                                rawType, true);\n                        if (config.canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(am.getMember(),\n                                    config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                        }\n                        ser \u003d new JsonValueSerializer(am, delegate);\n                    } else {\n                        ser \u003d StdKeySerializers.getFallbackKeySerializer(config, keyType.getRawClass());\n                    }\n                }\n            }\n        }\n        \n        // [databind#120]: Allow post-processing\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser \u003d mod.modifyKeySerializer(config, keyType, beanDesc, ser);\n            }\n        }\n        return (JsonSerializer\u003cObject\u003e) ser;\n    }",
    "begin_line": 202,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createTypeSerializer#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public TypeSerializer createTypeSerializer(SerializationConfig config,\n            JavaType baseType)\n    {\n        BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac \u003d bean.getClassInfo();\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n        /* Ok: if there is no explicit type info handler, we may want to\n         * use a default. If so, config object knows what to use.\n         */\n        Collection\u003cNamedType\u003e subtypes \u003d null;\n        if (b \u003d\u003d null) {\n            b \u003d config.getDefaultTyper(baseType);\n        } else {\n            subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByClass(config, ac);\n        }\n        if (b \u003d\u003d null) {\n            return null;\n        }\n        // 10-Jun-2015, tatu: Since not created for Bean Property, no need for post-processing\n        //    wrt EXTERNAL_PROPERTY\n        return b.buildTypeSerializer(config, baseType, subtypes);\n    }",
    "begin_line": 258,
    "end_line": 280,
    "comment": "/** \n * Method called to construct a type serializer for values with given declared base type. This is called for values other than those of bean property types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.customSerializers#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers()",
    "snippet": "protected abstract Iterable\u003cSerializers\u003e customSerializers();",
    "begin_line": 288,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByLookup#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type,\n            SerializationConfig config, BeanDescription beanDesc,\n            boolean staticTyping)\n    {\n        Class\u003c?\u003e raw \u003d type.getRawClass();\n        String clsName \u003d raw.getName();\n        JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n        if (ser \u003d\u003d null) {\n            Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n            if (serClass !\u003d null) {\n                // 07-Jan-2017, tatu: Should never fail (since we control constructors),\n                //   but if it does will throw `IllegalArgumentException` with description,\n                //   which we could catch, re-title.\n                return ClassUtil.createInstance(serClass, false);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 300,
    "end_line": 317,
    "comment": "/** \n * Method that will use fast lookup (and identity comparison) methods to see if we know serializer to use for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByAnnotations#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByAnnotations(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e raw \u003d type.getRawClass();\n        // First: JsonSerializable?\n        if (JsonSerializable.class.isAssignableFrom(raw)) {\n            return SerializableSerializer.instance;\n        }\n        // Second: @JsonValue for any type\n        AnnotatedMember valueAccessor \u003d beanDesc.findJsonValueAccessor();\n        if (valueAccessor !\u003d null) {\n            if (prov.canOverrideAccessModifiers()) {\n                ClassUtil.checkAndFixAccess(valueAccessor.getMember(),\n                        prov.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueAccessor);\n            return new JsonValueSerializer(valueAccessor, ser);\n        }\n        // No well-known annotations...\n        return null;\n    }",
    "begin_line": 335,
    "end_line": 356,
    "comment": "/** \n * Method called to see if one of primary per-class annotations (or related, like implementing of  {@link JsonSerializable}) determines the serializer to use. \u003cp\u003e Currently handles things like: \u003cul\u003e \u003cli\u003eIf type implements  {@link JsonSerializable}, use that \u003c/li\u003e \u003cli\u003eIf type has  {@link com.fasterxml.jackson.annotation.JsonValue} annotation (or equivalent), build serializerbased on that property \u003c/li\u003e \u003c/ul\u003e\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByPrimaryType#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class\u003c?\u003e raw \u003d type.getRawClass();\n        \n        // Then check for optional/external serializers \n        JsonSerializer\u003c?\u003e ser \u003d findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser !\u003d null) {\n            return ser;\n        }\n        \n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        if (Map.Entry.class.isAssignableFrom(raw)) {\n            // 18-Oct-2015, tatu: With 2.7, need to dig type info:\n            JavaType mapEntryType \u003d type.findSuperType(Map.Entry.class);\n\n            // 28-Apr-2015, tatu: TypeFactory does it all for us already so\n            JavaType kt \u003d mapEntryType.containedTypeOrUnknown(0);\n            JavaType vt \u003d mapEntryType.containedTypeOrUnknown(1);\n            return buildMapEntrySerializer(prov, type, beanDesc, staticTyping, kt, vt);\n        }\n        if (ByteBuffer.class.isAssignableFrom(raw)) {\n            return new ByteBufferSerializer();\n        }\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return new InetAddressSerializer();\n        }\n        if (InetSocketAddress.class.isAssignableFrom(raw)) {\n            return new InetSocketAddressSerializer();\n        }\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return new TimeZoneSerializer();\n        }\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        if (Number.class.isAssignableFrom(raw)) {\n            // 21-May-2014, tatu: Couple of alternatives actually\n            JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n            if (format !\u003d null) {\n                switch (format.getShape()) {\n                case STRING:\n                    return ToStringSerializer.instance;\n                case OBJECT: // need to bail out to let it be serialized as POJO\n                case ARRAY: // or, I guess ARRAY; otherwise no point in speculating\n                    return null;\n                default:\n                }\n            }\n            return NumberSerializer.instance;\n        }\n        if (Enum.class.isAssignableFrom(raw)) {\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        return null;\n    }",
    "begin_line": 365,
    "end_line": 427,
    "comment": "/** \n * Method for checking if we can determine serializer to use based on set of known primary types, checking for set of known base types (exact matches having been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e). This does not include \"secondary\" interfaces, but mostly concrete or abstract base classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findOptionalStdSerializer#434",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e findOptionalStdSerializer(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc, boolean staticTyping)\n        throws JsonMappingException\n    {\n        return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(), type, beanDesc);\n    }",
    "begin_line": 434,
    "end_line": 439,
    "comment": "/** \n * Overridable method called after checking all other types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByAddonType#449",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByAddonType(SerializationConfig config,\n            JavaType javaType, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException\n    {\n        Class\u003c?\u003e rawType \u003d javaType.getRawClass();\n\n        if (Iterator.class.isAssignableFrom(rawType)) {\n            JavaType[] params \u003d config.getTypeFactory().findTypeParameters(javaType, Iterator.class);\n            JavaType vt \u003d (params \u003d\u003d null || params.length !\u003d 1) ?\n                    TypeFactory.unknownType() : params[0];\n            return buildIteratorSerializer(config, javaType, beanDesc, staticTyping, vt);\n        }\n        if (Iterable.class.isAssignableFrom(rawType)) {\n            JavaType[] params \u003d config.getTypeFactory().findTypeParameters(javaType, Iterable.class);\n            JavaType vt \u003d (params \u003d\u003d null || params.length !\u003d 1) ?\n                    TypeFactory.unknownType() : params[0];\n            return buildIterableSerializer(config, javaType, beanDesc,  staticTyping, vt);\n        }\n        if (CharSequence.class.isAssignableFrom(rawType)) {\n            return ToStringSerializer.instance;\n        }\n        return null;\n    }",
    "begin_line": 449,
    "end_line": 470,
    "comment": "/** \n * Reflection-based serialized find method, which checks if given class implements one of recognized \"add-on\" interfaces. Add-on here means a role that is usually or can be a secondary trait: for example, bean classes may implement  {@link Iterable}, but their main function is usually something else. The reason for\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerFromAnnotation#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov,\n            Annotated a)\n        throws JsonMappingException\n    {\n        Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n        if (serDef \u003d\u003d null) {\n            return null;\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n        // One more thing however: may need to also apply a converter:\n        return (JsonSerializer\u003cObject\u003e) findConvertingSerializer(prov, a, ser);\n    }",
    "begin_line": 480,
    "end_line": 491,
    "comment": "/** \n * Helper method called to check if a class or method has an annotation (@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using) that tells the class to use for serialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findConvertingSerializer#499",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e findConvertingSerializer(SerializerProvider prov,\n            Annotated a, JsonSerializer\u003c?\u003e ser)\n        throws JsonMappingException\n    {\n        Converter\u003cObject,Object\u003e conv \u003d findConverter(prov, a);\n        if (conv \u003d\u003d null) {\n            return ser;\n        }\n        JavaType delegateType \u003d conv.getOutputType(prov.getTypeFactory());\n        return new StdDelegatingSerializer(conv, delegateType, ser);\n    }",
    "begin_line": 499,
    "end_line": 509,
    "comment": "/** \n * Helper method that will check whether given annotated entity (usually class, but may also be a property accessor) indicates that a  {@link Converter} is tobe used; and if so, to construct and return suitable serializer for it. If not, will simply return given serializer as is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findConverter#511",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected Converter\u003cObject,Object\u003e findConverter(SerializerProvider prov,\n            Annotated a)\n        throws JsonMappingException\n    {\n        Object convDef \u003d prov.getAnnotationIntrospector().findSerializationConverter(a);\n        if (convDef \u003d\u003d null) {\n            return null;\n        }\n        return prov.converterInstance(a, convDef);\n    }",
    "begin_line": 511,
    "end_line": 520,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildContainerSerializer#531",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildContainerSerializer(SerializerProvider prov,\n            JavaType type, BeanDescription beanDesc, boolean staticTyping)\n        throws JsonMappingException\n    {\n        final SerializationConfig config \u003d prov.getConfig();\n\n        /* [databind#23], 15-Mar-2013, tatu: must force static handling of root value type,\n         *   with just one important exception: if value type is \"untyped\", let\u0027s\n         *   leave it as is; no clean way to make it work.\n         */\n        if (!staticTyping \u0026\u0026 type.useStaticType()) {\n            if (!type.isContainerType() || !type.getContentType().isJavaLangObject()) {\n                staticTyping \u003d true;\n            }\n        }\n        \n        // Let\u0027s see what we can learn about element/content/value type, type serializer for it:\n        JavaType elementType \u003d type.getContentType();\n        TypeSerializer elementTypeSerializer \u003d createTypeSerializer(config,\n                elementType);\n\n        // if elements have type serializer, can not force static typing:\n        if (elementTypeSerializer !\u003d null) {\n            staticTyping \u003d false;\n        }\n        JsonSerializer\u003cObject\u003e elementValueSerializer \u003d _findContentSerializer(prov,\n                beanDesc.getClassInfo());\n        if (type.isMapLikeType()) { // implements java.util.Map\n            MapLikeType mlt \u003d (MapLikeType) type;\n            /* 29-Sep-2012, tatu: This is actually too early to (try to) find\n             *  key serializer from property annotations, and can lead to caching\n             *  issues (see [databind#75]). Instead, must be done from \u0027createContextual()\u0027 call.\n             *  But we do need to check class annotations.\n             */\n            JsonSerializer\u003cObject\u003e keySerializer \u003d _findKeySerializer(prov, beanDesc.getClassInfo());\n            if (mlt.isTrueMapType()) {\n                return buildMapSerializer(prov, (MapType) mlt, beanDesc, staticTyping,\n                        keySerializer, elementTypeSerializer, elementValueSerializer);\n            }\n            // With Map-like, just 2 options: (1) Custom, (2) Annotations\n            JsonSerializer\u003c?\u003e ser \u003d null;\n            MapLikeType mlType \u003d (MapLikeType) type;\n            for (Serializers serializers : customSerializers()) { // (1) Custom\n                ser \u003d serializers.findMapLikeSerializer(config,\n                        mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n                if (ser !\u003d null) {\n                    break;\n                }\n            }\n            if (ser \u003d\u003d null) { // (2) Annotations-based ones:\n                ser \u003d findSerializerByAnnotations(prov, type, beanDesc);\n            }\n            if (ser !\u003d null) {\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        ser \u003d mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n                    }\n                }\n            }\n            return ser;\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return buildCollectionSerializer(prov,  (CollectionType) clt, beanDesc, staticTyping,\n                        elementTypeSerializer, elementValueSerializer);\n            }\n            // With Map-like, just 2 options: (1) Custom, (2) Annotations\n            JsonSerializer\u003c?\u003e ser \u003d null;\n            CollectionLikeType clType \u003d (CollectionLikeType) type;\n            for (Serializers serializers : customSerializers()) { // (1) Custom\n                ser \u003d serializers.findCollectionLikeSerializer(config,\n                        clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n                if (ser !\u003d null) {\n                    break;\n                }\n            }\n            if (ser \u003d\u003d null) { // (2) Annotations-based ones:\n                ser \u003d findSerializerByAnnotations(prov, type, beanDesc);\n            }\n            if (ser !\u003d null) {\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        ser \u003d mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n                    }\n                }\n            }\n            return ser;\n        }\n        if (type.isArrayType()) {\n            return buildArraySerializer(prov, (ArrayType) type, beanDesc, staticTyping,\n                    elementTypeSerializer, elementValueSerializer);\n        }\n        return null;\n    }",
    "begin_line": 531,
    "end_line": 625,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildCollectionSerializer#633",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildCollectionSerializer(SerializerProvider prov,\n            CollectionType type, BeanDescription beanDesc, boolean staticTyping,\n            TypeSerializer elementTypeSerializer, JsonSerializer\u003cObject\u003e elementValueSerializer) \n        throws JsonMappingException\n    {\n        SerializationConfig config \u003d prov.getConfig();\n        JsonSerializer\u003c?\u003e ser \u003d null;\n        // Order of lookups:\n        // 1. Custom serializers\n        // 2. Annotations (@JsonValue, @JsonDeserialize)\n        // 3. Defaults\n        for (Serializers serializers : customSerializers()) { // (1) Custom\n            ser \u003d serializers.findCollectionSerializer(config,\n                    type, beanDesc, elementTypeSerializer, elementValueSerializer);\n            if (ser !\u003d null) {\n                break;\n            }\n        }\n\n        if (ser \u003d\u003d null) {\n            ser \u003d findSerializerByAnnotations(prov, type, beanDesc); // (2) Annotations\n            if (ser \u003d\u003d null) {\n                // We may also want to use serialize Collections \"as beans\", if (and only if)\n                // this is specified with `@JsonFormat(shape\u003dObject)`\n                JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n                if ((format !\u003d null) \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n                    return null;\n                }\n                Class\u003c?\u003e raw \u003d type.getRawClass();\n                if (EnumSet.class.isAssignableFrom(raw)) {\n                    // this may or may not be available (Class doesn\u0027t; type of field/method does)\n                    JavaType enumType \u003d type.getContentType();\n                    // and even if nominally there is something, only use if it really is enum\n                    if (!enumType.isEnumType()) {\n                        enumType \u003d null;\n                    }\n                    ser \u003d buildEnumSetSerializer(enumType);\n                } else {\n                    Class\u003c?\u003e elementRaw \u003d type.getContentType().getRawClass();\n                    if (isIndexedList(raw)) {\n                        if (elementRaw \u003d\u003d String.class) {\n                            // [JACKSON-829] Must NOT use if we have custom serializer\n                            if (ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                                ser \u003d IndexedStringListSerializer.instance;\n                            }\n                        } else {\n                            ser \u003d buildIndexedListSerializer(type.getContentType(), staticTyping,\n                                elementTypeSerializer, elementValueSerializer);\n                        }\n                    } else if (elementRaw \u003d\u003d String.class) {\n                        // [JACKSON-829] Must NOT use if we have custom serializer\n                        if (ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                            ser \u003d StringCollectionSerializer.instance;\n                        }\n                    }\n                    if (ser \u003d\u003d null) {\n                        ser \u003d buildCollectionSerializer(type.getContentType(), staticTyping,\n                                elementTypeSerializer, elementValueSerializer);\n                    }\n                }\n            }\n        }\n        // [databind#120]: Allow post-processing\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser \u003d mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 633,
    "end_line": 702,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for {@link java.util.List} types that support efficient by-index access\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.isIndexedList#710",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isIndexedList(Class\u003c?\u003e cls)\n    {\n        return RandomAccess.class.isAssignableFrom(cls);\n    }",
    "begin_line": 710,
    "end_line": 713,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIndexedListSerializer#715",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public  ContainerSerializer\u003c?\u003e buildIndexedListSerializer(JavaType elemType,\n            boolean staticTyping, TypeSerializer vts, JsonSerializer\u003cObject\u003e valueSerializer) {\n        return new IndexedListSerializer(elemType, staticTyping, vts, valueSerializer);\n    }",
    "begin_line": 715,
    "end_line": 718,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildCollectionSerializer#720",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public ContainerSerializer\u003c?\u003e buildCollectionSerializer(JavaType elemType,\n            boolean staticTyping, TypeSerializer vts, JsonSerializer\u003cObject\u003e valueSerializer) {\n        return new CollectionSerializer(elemType, staticTyping, vts, valueSerializer);\n    }",
    "begin_line": 720,
    "end_line": 723,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildEnumSetSerializer#725",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003c?\u003e buildEnumSetSerializer(JavaType enumType) {\n        return new EnumSetSerializer(enumType);\n    }",
    "begin_line": 725,
    "end_line": 727,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildMapSerializer#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildMapSerializer(SerializerProvider prov,\n            MapType type, BeanDescription beanDesc,\n            boolean staticTyping, JsonSerializer\u003cObject\u003e keySerializer,\n            TypeSerializer elementTypeSerializer, JsonSerializer\u003cObject\u003e elementValueSerializer)\n        throws JsonMappingException\n    {\n        // [databind#467]: This is where we could allow serialization \"as POJO\": But! It\u0027s\n        // nasty to undo, and does not apply on per-property basis. So, hardly optimal\n        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n        if ((format !\u003d null) \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n            return null;\n        }\n\n        JsonSerializer\u003c?\u003e ser \u003d null;\n\n        // Order of lookups:\n        // 1. Custom serializers\n        // 2. Annotations (@JsonValue, @JsonDeserialize)\n        // 3. Defaults\n        \n        final SerializationConfig config \u003d prov.getConfig();\n        for (Serializers serializers : customSerializers()) { // (1) Custom\n            ser \u003d serializers.findMapSerializer(config, type, beanDesc,\n                    keySerializer, elementTypeSerializer, elementValueSerializer);\n            if (ser !\u003d null) { break; }\n        }\n        if (ser \u003d\u003d null) {\n            ser \u003d findSerializerByAnnotations(prov, type, beanDesc); // (2) Annotations\n            if (ser \u003d\u003d null) {\n                Object filterId \u003d findFilterId(config, beanDesc);\n                // 01-May-2016, tatu: Which base type to use here gets tricky, since\n                //   most often it ought to be `Map` or `EnumMap`, but due to abstract\n                //   mapping it will more likely be concrete type like `HashMap`.\n                //   So, for time being, just pass `Map.class`\n                JsonIgnoreProperties.Value ignorals \u003d config.getDefaultPropertyIgnorals(Map.class,\n                        beanDesc.getClassInfo());\n                Set\u003cString\u003e ignored \u003d (ignorals \u003d\u003d null) ? null\n                        : ignorals.findIgnoredForSerialization();\n                MapSerializer mapSer \u003d MapSerializer.construct(ignored,\n                        type, staticTyping, elementTypeSerializer,\n                        keySerializer, elementValueSerializer, filterId);\n                ser \u003d _checkMapContentInclusion(prov, beanDesc, mapSer);\n            }\n        }\n        // [databind#120]: Allow post-processing\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser \u003d mod.modifyMapSerializer(config, type, beanDesc, ser);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 739,
    "end_line": 790,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for {@link java.util.Map} types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._checkMapContentInclusion#799",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.std.MapSerializer)",
    "snippet": "@SuppressWarnings(\"deprecation\")\n    protected MapSerializer _checkMapContentInclusion(SerializerProvider prov,\n            BeanDescription beanDesc, MapSerializer mapSer)\n        throws JsonMappingException\n    {\n        final JavaType contentType \u003d mapSer.getContentType();\n        JsonInclude.Value inclV \u003d _findInclusionWithContent(prov, beanDesc,\n                contentType, Map.class);\n\n        // Need to support global legacy setting, for now:\n        JsonInclude.Include incl \u003d (inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n        if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS\n                || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n            if (!prov.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n                return mapSer.withContentInclusion(null, true);\n            }\n            return mapSer;\n        }\n\n        // NOTE: mostly copied from `PropertyBuilder`; would be nice to refactor\n        // but code is not identical nor are these types related\n        Object valueToSuppress;\n        boolean suppressNulls \u003d true; // almost always, but possibly not with CUSTOM\n\n        switch (incl) {\n        case NON_DEFAULT:\n            valueToSuppress \u003d BeanUtil.getDefaultValue(contentType);\n            if (valueToSuppress !\u003d null) {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            valueToSuppress \u003d contentType.isReferenceType()\n                    ? MapSerializer.MARKER_FOR_EMPTY : null;\n            break;\n        case NON_EMPTY:\n            valueToSuppress \u003d MapSerializer.MARKER_FOR_EMPTY;\n            break;\n        case CUSTOM: // new with 2.9\n            valueToSuppress \u003d prov.includeFilterInstance(null, inclV.getContentFilter());\n            if (valueToSuppress \u003d\u003d null) { // is this legal?\n                suppressNulls \u003d true;\n            } else {\n                suppressNulls \u003d prov.includeFilterSuppressNulls(valueToSuppress);\n            }\n            break;\n        case NON_NULL:\n        default: // should not matter but...\n            valueToSuppress \u003d null;\n            break;\n        }\n        return mapSer.withContentInclusion(valueToSuppress, suppressNulls);\n    }",
    "begin_line": 799,
    "end_line": 853,
    "comment": "/** \n * Helper method that does figures out content inclusion value to use, if any, and construct re-configured  {@link MapSerializer} appropriately.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildMapEntrySerializer#858",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildMapEntrySerializer(SerializerProvider prov,\n            JavaType type, BeanDescription beanDesc, boolean staticTyping,\n            JavaType keyType, JavaType valueType)\n        throws JsonMappingException\n    {\n        // [databind#865]: Allow serialization \"as POJO\" -- note: to undo, declare\n        //   serialization as `Shape.NATURAL` instead; that\u0027s JSON Object too.\n        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n        if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n            return null;\n        }\n        MapEntrySerializer ser \u003d new MapEntrySerializer(valueType, keyType, valueType,\n                staticTyping, createTypeSerializer(prov.getConfig(), valueType), null);\n\n        final JavaType contentType \u003d ser.getContentType();\n        JsonInclude.Value inclV \u003d _findInclusionWithContent(prov, beanDesc,\n                contentType, Map.Entry.class);\n\n        // Need to support global legacy setting, for now:\n        JsonInclude.Include incl \u003d (inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n        if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS\n                || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n            return ser;\n        }\n\n        // NOTE: mostly copied from `PropertyBuilder`; would be nice to refactor\n        // but code is not identical nor are these types related\n        Object valueToSuppress;\n        boolean suppressNulls \u003d true; // almost always, but possibly not with CUSTOM\n\n        switch (incl) {\n        case NON_DEFAULT:\n            valueToSuppress \u003d BeanUtil.getDefaultValue(contentType);\n            if (valueToSuppress !\u003d null) {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT:\n            valueToSuppress \u003d contentType.isReferenceType()\n                    ? MapSerializer.MARKER_FOR_EMPTY : null;\n            break;\n        case NON_EMPTY:\n            valueToSuppress \u003d MapSerializer.MARKER_FOR_EMPTY;\n            break;\n        case CUSTOM:\n            valueToSuppress \u003d prov.includeFilterInstance(null, inclV.getContentFilter());\n            if (valueToSuppress \u003d\u003d null) { // is this legal?\n                suppressNulls \u003d true;\n            } else {\n                suppressNulls \u003d prov.includeFilterSuppressNulls(valueToSuppress);\n            }\n            break;\n        case NON_NULL:\n        default: // should not matter but...\n            valueToSuppress \u003d null;\n            break;\n        }\n        return ser.withContentInclusion(valueToSuppress, suppressNulls);\n    }",
    "begin_line": 858,
    "end_line": 918,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findInclusionWithContent#928",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonInclude.Value _findInclusionWithContent(SerializerProvider prov,\n            BeanDescription beanDesc,\n            JavaType contentType, Class\u003c?\u003e configType)\n        throws JsonMappingException\n    {\n        final SerializationConfig config \u003d prov.getConfig();\n\n        // Defaulting gets complicated because we might have two distinct\n        //   axis to consider: Container type itself , and then value (content) type.\n        //  Start with Container-defaults, then use more-specific value override, if any.\n\n        // Start by getting global setting, overridden by Map-type-override\n        JsonInclude.Value inclV \u003d beanDesc.findPropertyInclusion(config.getDefaultPropertyInclusion());\n        inclV \u003d config.getDefaultPropertyInclusion(configType, inclV);\n\n        // and then merge content-type overrides, if any. But note that there\u0027s\n        // content-to-value inclusion shift we have to do\n        JsonInclude.Value valueIncl \u003d config.getDefaultPropertyInclusion(contentType.getRawClass(), null);\n\n        if (valueIncl !\u003d null) {\n            switch (valueIncl.getValueInclusion()) {\n            case USE_DEFAULTS:\n                break;\n            case CUSTOM:\n                inclV \u003d inclV.withContentFilter(valueIncl.getContentFilter());\n                break;\n            default:\n                inclV \u003d inclV.withContentInclusion(valueIncl.getValueInclusion());\n            }\n        }\n        return inclV;\n    }",
    "begin_line": 928,
    "end_line": 959,
    "comment": "/** \n * Helper method used for finding inclusion definitions for structured container types like \u003ccode\u003eMap\u003c/code\u003es and referential types (like \u003ccode\u003eAtomicReference\u003c/code\u003e).\n * @param contentType Declared full content type of container\n * @param configType Raw base type under which `configOverride`, if any, needs to be defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildArraySerializer#971",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildArraySerializer(SerializerProvider prov,\n            ArrayType type, BeanDescription beanDesc,\n            boolean staticTyping,\n            TypeSerializer elementTypeSerializer, JsonSerializer\u003cObject\u003e elementValueSerializer)\n        throws JsonMappingException\n    {\n        // 25-Jun-2015, tatu: Note that unlike with Collection(Like) and Map(Like) types, array\n        //   types can not be annotated (in theory I guess we could have mix-ins but... ?)\n        //   so we need not do primary annotation lookup here.\n        //   So all we need is (1) Custom, (2) Default array serializers\n        SerializationConfig config \u003d prov.getConfig();\n        JsonSerializer\u003c?\u003e ser \u003d null;\n\n        for (Serializers serializers : customSerializers()) { // (1) Custom\n             ser \u003d serializers.findArraySerializer(config,\n                     type, beanDesc, elementTypeSerializer, elementValueSerializer);\n             if (ser !\u003d null) {\n                 break;\n             }\n        }\n        \n        if (ser \u003d\u003d null) {\n             Class\u003c?\u003e raw \u003d type.getRawClass();\n             // Important: do NOT use standard serializers if non-standard element value serializer specified\n             if (elementValueSerializer \u003d\u003d null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                 if (String[].class \u003d\u003d raw) {\n                     ser \u003d StringArraySerializer.instance;\n                 } else {\n                     // other standard types?\n                     ser \u003d StdArraySerializers.findStandardImpl(raw);\n                 }\n             }\n             if (ser \u003d\u003d null) {\n                 ser \u003d new ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer,\n                         elementValueSerializer);\n             }\n         }\n         // [databind#120]: Allow post-processing\n         if (_factoryConfig.hasSerializerModifiers()) {\n             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                 ser \u003d mod.modifyArraySerializer(config, type, beanDesc, ser);\n             }\n         }\n         return ser;\n    }",
    "begin_line": 971,
    "end_line": 1015,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for \u003ccode\u003eObject[]\u003c/code\u003e (and subtypes, except for String).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIteratorSerializer#1026",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildIteratorSerializer(SerializationConfig config,\n            JavaType type, BeanDescription beanDesc, boolean staticTyping,\n            JavaType valueType)\n        throws JsonMappingException\n    {\n        return new IteratorSerializer(valueType, staticTyping, createTypeSerializer(config, valueType));\n    }",
    "begin_line": 1026,
    "end_line": 1032,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIterableSerializer#1037",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildIterableSerializer(SerializationConfig config,\n            JavaType type, BeanDescription beanDesc, boolean staticTyping,\n            JavaType valueType)\n        throws JsonMappingException\n    {\n        return new IterableSerializer(valueType, staticTyping, createTypeSerializer(config, valueType));\n    }",
    "begin_line": 1037,
    "end_line": 1043,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildEnumSerializer#1045",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildEnumSerializer(SerializationConfig config,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        /* As per [databind#24], may want to use alternate shape, serialize as JSON Object.\n         * Challenge here is that EnumSerializer does not know how to produce\n         * POJO style serialization, so we must handle that special case separately;\n         * otherwise pass it to EnumSerializer.\n         */\n        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n        if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n            // one special case: suppress serialization of \"getDeclaringClass()\"...\n            ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n            // returning null will mean that eventually BeanSerializer gets constructed\n            return null;\n        }\n        @SuppressWarnings(\"unchecked\")\n        Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) type.getRawClass();\n        JsonSerializer\u003c?\u003e ser \u003d EnumSerializer.construct(enumClass, config, beanDesc, format);\n        // [databind#120]: Allow post-processing\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser \u003d mod.modifyEnumSerializer(config, type, beanDesc, ser);\n            }\n        }\n        return ser;\n    }",
    "begin_line": 1045,
    "end_line": 1071,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findKeySerializer#1084",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findKeySerializer(SerializerProvider prov,\n            Annotated a)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n        Object serDef \u003d intr.findKeySerializer(a);\n        if (serDef !\u003d null) {\n            return prov.serializerInstance(a, serDef);\n        }\n        return null;\n    }",
    "begin_line": 1084,
    "end_line": 1094,
    "comment": "/** \n * Helper method called to try to find whether there is an annotation in the class that indicates key serializer to use. If so, will try to instantiate key serializer and return it; otherwise returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findContentSerializer#1101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findContentSerializer(SerializerProvider prov,\n            Annotated a)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n        Object serDef \u003d intr.findContentSerializer(a);\n        if (serDef !\u003d null) {\n            return prov.serializerInstance(a, serDef);\n        }\n        return null;\n    }",
    "begin_line": 1101,
    "end_line": 1111,
    "comment": "/** \n * Helper method called to try to find whether there is an annotation in the class that indicates content (\"value\") serializer to use. If so, will try to instantiate value serializer and return it; otherwise returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findFilterId#1117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc) {\n        return config.getAnnotationIntrospector().findFilterId((Annotated)beanDesc.getClassInfo());\n    }",
    "begin_line": 1117,
    "end_line": 1119,
    "comment": "/** \n * Method called to find filter that is configured to be used with bean serializer being built, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.usesStaticTyping#1129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "protected boolean usesStaticTyping(SerializationConfig config,\n            BeanDescription beanDesc, TypeSerializer typeSer)\n    {\n        /* 16-Aug-2010, tatu: If there is a (value) type serializer, we can not force\n         *    static typing; that would make it impossible to handle expected subtypes\n         */\n        if (typeSer !\u003d null) {\n            return false;\n        }\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n        if (t !\u003d null \u0026\u0026 t !\u003d JsonSerialize.Typing.DEFAULT_TYPING) {\n            return (t \u003d\u003d JsonSerialize.Typing.STATIC);\n        }\n        return config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n    }",
    "begin_line": 1129,
    "end_line": 1144,
    "comment": "/** \n * Helper method to check whether global settings and/or class annotations for the bean class indicate that static typing (declared types)  should be used for properties. (instead of dynamic runtime types).\n * @since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.BeanSerializerFactory#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.BeanSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "protected BeanSerializerFactory(SerializerFactoryConfig config)\n    {\n        super(config);\n    }",
    "begin_line": 80,
    "end_line": 83,
    "comment": "/** \n * Constructor for creating instances with specified configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.withConfig#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "@Override\n    public SerializerFactory withConfig(SerializerFactoryConfig config)\n    {\n        if (_factoryConfig \u003d\u003d config) {\n            return this;\n        }\n        /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\n         *    and we pretty much have to here either choose between losing subtype instance\n         *    when registering additional serializers, or losing serializers.\n         *    Instead, let\u0027s actually just throw an error if this method is called when subtype\n         *    has not properly overridden this method; this to indicate problem as soon as possible.\n         */\n        if (getClass() !\u003d BeanSerializerFactory.class) {\n            throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName()\n                    +\") has not properly overridden method \u0027withAdditionalSerializers\u0027: can not instantiate subtype with \"\n                    +\"additional serializer definitions\");\n        }\n        return new BeanSerializerFactory(config);\n    }",
    "begin_line": 92,
    "end_line": 109,
    "comment": "/** \n * Method used by module registration functionality, to attach additional serializer providers into this serializer factory. This is typically handled by constructing a new instance with additional serializers, to ensure thread-safe access.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.customSerializers#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.customSerializers()",
    "snippet": "@Override\n    protected Iterable\u003cSerializers\u003e customSerializers() {\n        return _factoryConfig.serializers();\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.createSerializer#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,\n            JavaType origType)\n        throws JsonMappingException\n    {\n        // Very first thing, let\u0027s check if there is explicit serializer annotation:\n        final SerializationConfig config \u003d prov.getConfig();\n        BeanDescription beanDesc \u003d config.introspect(origType);\n        JsonSerializer\u003c?\u003e ser \u003d findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        if (ser !\u003d null) {\n            return (JsonSerializer\u003cObject\u003e) ser;\n        }\n        boolean staticTyping;\n        // Next: we may have annotations that further indicate actual type to use (a super type)\n        final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType type;\n\n        if (intr \u003d\u003d null) {\n            type \u003d origType;\n        } else {\n            try {\n                type \u003d intr.refineSerializationType(config, beanDesc.getClassInfo(), origType);\n            } catch (JsonMappingException e) {\n                return prov.reportBadTypeDefinition(beanDesc, e.getMessage());\n            }\n        }\n        if (type \u003d\u003d origType) { // no changes, won\u0027t force static typing\n            staticTyping \u003d false;\n        } else { // changes; assume static typing; plus, need to re-introspect if class differs\n            staticTyping \u003d true;\n            if (!type.hasRawClass(origType.getRawClass())) {\n                beanDesc \u003d config.introspect(type);\n            }\n        }\n        // Slight detour: do we have a Converter to consider?\n        Converter\u003cObject,Object\u003e conv \u003d beanDesc.findSerializationConverter();\n        if (conv \u003d\u003d null) { // no, simple\n            return (JsonSerializer\u003cObject\u003e) _createSerializer2(prov, type, beanDesc, staticTyping);\n        }\n        JavaType delegateType \u003d conv.getOutputType(prov.getTypeFactory());\n        \n        // One more twist, as per [databind#288]; probably need to get new BeanDesc\n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc \u003d config.introspect(delegateType);\n            // [#359]: explicitly check (again) for @JsonSerializer...\n            ser \u003d findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        }\n        // [databind#731]: Should skip if nominally java.lang.Object\n        if (ser \u003d\u003d null \u0026\u0026 !delegateType.isJavaLangObject()) {\n            ser \u003d _createSerializer2(prov, delegateType, beanDesc, true);\n        }\n        return new StdDelegatingSerializer(conv, delegateType, ser);\n    }",
    "begin_line": 134,
    "end_line": 185,
    "comment": "/** \n * Main serializer constructor method. We will have to be careful with respect to ordering of various method calls: essentially we want to reliably figure out which classes are standard types, and which are beans. The problem is that some bean Classes may implement standard interfaces (say,  {@link java.lang.Iterable}. \u003cp\u003e Note: sub-classes may choose to complete replace implementation, if they want to alter priority of serializer lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory._createSerializer2#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e _createSerializer2(SerializerProvider prov,\n            JavaType type, BeanDescription beanDesc, boolean staticTyping)\n        throws JsonMappingException\n    {\n        JsonSerializer\u003c?\u003e ser \u003d null;\n        final SerializationConfig config \u003d prov.getConfig();\n        \n        // Container types differ from non-container types\n        // (note: called method checks for module-provided serializers)\n        if (type.isContainerType()) {\n            if (!staticTyping) {\n                staticTyping \u003d usesStaticTyping(config, beanDesc, null);\n            }\n            // 03-Aug-2012, tatu: As per [databind#40], may require POJO serializer...\n            ser \u003d  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n            // Will return right away, since called method does post-processing:\n            if (ser !\u003d null) {\n                return ser;\n            }\n        } else {\n            if (type.isReferenceType()) {\n                ser \u003d findReferenceSerializer(prov, (ReferenceType) type, beanDesc, staticTyping);\n            } else {\n                // Modules may provide serializers of POJO types:\n                for (Serializers serializers : customSerializers()) {\n                    ser \u003d serializers.findSerializer(config, type, beanDesc);\n                    if (ser !\u003d null) {\n                        break;\n                    }\n                }\n            }\n            // 25-Jun-2015, tatu: Then JsonSerializable, @JsonValue etc. NOTE! Prior to 2.6,\n            //    this call was BEFORE custom serializer lookup, which was wrong.\n            if (ser \u003d\u003d null) {\n                ser \u003d findSerializerByAnnotations(prov, type, beanDesc);\n            }\n        }\n        \n        if (ser \u003d\u003d null) {\n            // Otherwise, we will check \"primary types\"; both marker types that\n            // indicate specific handling (JsonSerializable), or main types that have\n            // precedence over container types\n            ser \u003d findSerializerByLookup(type, config, beanDesc, staticTyping);\n            if (ser \u003d\u003d null) {\n                ser \u003d findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n                if (ser \u003d\u003d null) {\n                    // And this is where this class comes in: if type is not a\n                    // known \"primary JDK type\", perhaps it\u0027s a bean? We can still\n                    // get a null, if we can\u0027t find a single suitable bean property.\n                    ser \u003d findBeanSerializer(prov, type, beanDesc);\n                    // Finally: maybe we can still deal with it as an implementation of some basic JDK interface?\n                    if (ser \u003d\u003d null) {\n                        ser \u003d findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                        // 18-Sep-2014, tatu: Actually, as per [jackson-databind#539], need to get\n                        //   \u0027unknown\u0027 serializer assigned earlier, here, so that it gets properly\n                        //   post-processed\n                        if (ser \u003d\u003d null) {\n                            ser \u003d prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                        }\n                    }\n                }\n            }\n        }\n        if (ser !\u003d null) {\n            // [databind#120]: Allow post-processing\n            if (_factoryConfig.hasSerializerModifiers()) {\n                for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                    ser \u003d mod.modifySerializer(config, beanDesc, ser);\n                }\n            }\n        }\n        return ser;\n    }",
    "begin_line": 187,
    "end_line": 259,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findBeanSerializer#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonSerializer\u003cObject\u003e findBeanSerializer(SerializerProvider prov, JavaType type,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // First things first: we know some types are not beans...\n        if (!isPotentialBeanType(type.getRawClass())) {\n            // 03-Aug-2012, tatu: Except we do need to allow serializers for Enums,\n            //   as per [databind#24]\n            if (!type.isEnumType()) {\n                return null;\n            }\n        }\n        return constructBeanSerializer(prov, beanDesc);\n    }",
    "begin_line": 272,
    "end_line": 285,
    "comment": "/** \n * Method that will try to construct a  {@link BeanSerializer} forgiven class. Returns null if no properties are found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findReferenceSerializer#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "public JsonSerializer\u003c?\u003e findReferenceSerializer(SerializerProvider prov, ReferenceType refType,\n            BeanDescription beanDesc, boolean staticTyping)\n        throws JsonMappingException\n    {\n        JavaType contentType \u003d refType.getContentType(); \n        TypeSerializer contentTypeSerializer \u003d contentType.getTypeHandler();\n        final SerializationConfig config \u003d prov.getConfig();\n        if (contentTypeSerializer \u003d\u003d null) {\n            contentTypeSerializer \u003d createTypeSerializer(config, contentType);\n        }\n        JsonSerializer\u003cObject\u003e contentSerializer \u003d contentType.getValueHandler();\n        for (Serializers serializers : customSerializers()) {\n            JsonSerializer\u003c?\u003e ser \u003d serializers.findReferenceSerializer(config, refType, beanDesc,\n                    contentTypeSerializer, contentSerializer);\n            if (ser !\u003d null) {\n                return ser;\n            }\n        }\n        if (refType.isTypeOrSubTypeOf(AtomicReference.class)) {\n            return buildAtomicReferenceSerializer(prov, refType, beanDesc, staticTyping,\n                    contentTypeSerializer, contentSerializer);\n        }\n        return null;\n    }",
    "begin_line": 290,
    "end_line": 313,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.buildAtomicReferenceSerializer#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildAtomicReferenceSerializer(SerializerProvider prov,\n            ReferenceType refType, BeanDescription beanDesc, boolean staticTyping,\n            TypeSerializer contentTypeSerializer, JsonSerializer\u003cObject\u003e contentSerializer)\n        throws JsonMappingException\n    {\n        final JavaType contentType \u003d refType.getReferencedType();\n        JsonInclude.Value inclV \u003d _findInclusionWithContent(prov, beanDesc,\n                contentType, AtomicReference.class);\n        \n        // Need to support global legacy setting, for now:\n        JsonInclude.Include incl \u003d (inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n        Object valueToSuppress;\n        boolean suppressNulls;\n\n        if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS\n                || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n            valueToSuppress \u003d null;\n            suppressNulls \u003d false;\n        } else {\n            suppressNulls \u003d true;\n            switch (incl) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d BeanUtil.getDefaultValue(contentType);\n                if (valueToSuppress !\u003d null) {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_ABSENT:\n                valueToSuppress \u003d contentType.isReferenceType()\n                        ? MapSerializer.MARKER_FOR_EMPTY : null;\n                break;\n            case NON_EMPTY:\n                valueToSuppress \u003d MapSerializer.MARKER_FOR_EMPTY;\n                break;\n            case CUSTOM:\n                valueToSuppress \u003d prov.includeFilterInstance(null, inclV.getContentFilter());\n                if (valueToSuppress \u003d\u003d null) { // is this legal?\n                    suppressNulls \u003d true;\n                } else {\n                    suppressNulls \u003d prov.includeFilterSuppressNulls(valueToSuppress);\n                }\n                break;\n            case NON_NULL:\n            default: // should not matter but...\n                valueToSuppress \u003d null;\n                break;\n            }\n        }\n        AtomicReferenceSerializer ser \u003d new AtomicReferenceSerializer(refType, staticTyping,\n                contentTypeSerializer, contentSerializer);\n        return ser.withContentInclusion(valueToSuppress, suppressNulls);\n    }",
    "begin_line": 315,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findPropertyTypeSerializer#380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n            SerializationConfig config, AnnotatedMember accessor)\n        throws JsonMappingException\n    {\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);        \n        TypeSerializer typeSer;\n\n        // Defaulting: if no annotations on member, check value class\n        if (b \u003d\u003d null) {\n            typeSer \u003d createTypeSerializer(config, baseType);\n        } else {\n            Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByClass(\n                    config, accessor, baseType);\n            typeSer \u003d b.buildTypeSerializer(config, baseType, subtypes);\n        }\n        return typeSer;\n    }",
    "begin_line": 380,
    "end_line": 397,
    "comment": "/** \n * Method called to create a type information serializer for values of given non-container property if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param baseType Declared type to use as the base type for type information serializer\n * @return Type serializer to use for property values, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findPropertyContentTypeSerializer#409",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType,\n            SerializationConfig config, AnnotatedMember accessor)\n        throws JsonMappingException\n    {\n        JavaType contentType \u003d containerType.getContentType();\n        AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n        TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyContentTypeResolver(config, accessor, containerType);        \n        TypeSerializer typeSer;\n\n        // Defaulting: if no annotations on member, check value class\n        if (b \u003d\u003d null) {\n            typeSer \u003d createTypeSerializer(config, contentType);\n        } else {\n            Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByClass(config,\n                    accessor, contentType);\n            typeSer \u003d b.buildTypeSerializer(config, contentType, subtypes);\n        }\n        return typeSer;\n    }",
    "begin_line": 409,
    "end_line": 427,
    "comment": "/** \n * Method called to create a type information serializer for values of given container property if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param containerType Declared type of the container to use as the base type for type information serializer\n * @return Type serializer to use for property value contents, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructBeanSerializer#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n        // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n        if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n//            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n        }\n        final SerializationConfig config \u003d prov.getConfig();\n        BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        // First: any detectable (auto-detect, annotations) properties to serialize?\n        List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n        if (props \u003d\u003d null) {\n            props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n        } else {\n            props \u003d removeOverlappingTypeIds(prov, beanDesc, builder, props);\n        }\n        \n        // [databind#638]: Allow injection of \"virtual\" properties:\n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        // [JACKSON-440] Need to allow modification bean properties to serialize:\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props \u003d mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        // Any properties to suppress?\n        props \u003d filterBeanProperties(config, beanDesc, props);\n\n        // Need to allow reordering of properties to serialize\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props \u003d mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        /* And if Object Id is needed, some preparation for that as well: better\n         * do before view handling, mostly for the custom id case which needs\n         * access to a property\n         */\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n\n        AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n        if (anyGetter !\u003d null) {\n            JavaType type \u003d anyGetter.getType();\n            // copied from BasicSerializerFactory.buildMapSerializer():\n            boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType \u003d type.getContentType();\n            TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n            // last 2 nulls; don\u0027t know key, value serializers (yet)\n            // 23-Feb-2015, tatu: As per [databind#705], need to support custom serializers\n            JsonSerializer\u003c?\u003e anySer \u003d findSerializerFromAnnotation(prov, anyGetter);\n            if (anySer \u003d\u003d null) {\n                // TODO: support \u0027@JsonIgnoreProperties\u0027 with any setter?\n                anySer \u003d MapSerializer.construct(/* ignored props*/ (Set\u003cString\u003e) null,\n                        type, staticTyping, typeSer, null, null, /*filterId*/ null);\n            }\n            // TODO: can we find full PropertyName?\n            PropertyName name \u003d PropertyName.construct(anyGetter.getName());\n            BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null,\n                    anyGetter, PropertyMetadata.STD_OPTIONAL);\n            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n        }\n        // Next: need to gather view information, if any:\n        processViews(config, builder);\n\n        // Finally: let interested parties mess with the result bit more...\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                builder \u003d mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n\n        JsonSerializer\u003cObject\u003e ser \u003d null;\n        try {\n            ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n        } catch (RuntimeException e) {\n            prov.reportBadTypeDefinition(beanDesc, \"Failed to construct BeanSerializer for %s: (%s) %s\",\n                    beanDesc.getType(), e.getClass().getName(), e.getMessage());\n        }\n        if (ser \u003d\u003d null) {\n            // If we get this far, there were no properties found, so no regular BeanSerializer\n            // would be constructed. But, couple of exceptions.\n            // First: if there are known annotations, just create \u0027empty bean\u0027 serializer\n            if (beanDesc.hasKnownClassAnnotations()) {\n                return builder.createDummy();\n            }\n        }\n        return ser;\n    }",
    "begin_line": 441,
    "end_line": 539,
    "comment": "/** \n * Method called to construct serializer for serializing specified bean type.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructObjectIdHandler#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructObjectIdHandler(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,\n            BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props)\n        throws JsonMappingException\n    {\n        ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n        if (objectIdInfo \u003d\u003d null) {\n            return null;\n        }\n        ObjectIdGenerator\u003c?\u003e gen;\n        Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n\n        // Just one special case: Property-based generator is trickier\n        if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n            String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n            BeanPropertyWriter idProp \u003d null;\n\n            for (int i \u003d 0, len \u003d props.size() ;; ++i) {\n                if (i \u003d\u003d len) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n                            +\": can not find property with name \u0027\"+propName+\"\u0027\");\n                }\n                BeanPropertyWriter prop \u003d props.get(i);\n                if (propName.equals(prop.getName())) {\n                    idProp \u003d prop;\n                    /* Let\u0027s force it to be the first property to output\n                     * (although it may still get rearranged etc)\n                     */\n                    if (i \u003e 0) {\n                        props.remove(i);\n                        props.add(0, idProp);\n                    }\n                    break;\n                }\n            }\n            JavaType idType \u003d idProp.getType();\n            gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n            // one more thing: must ensure that ObjectIdWriter does not actually write the value:\n            return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            \n        } \n        // other types are simpler\n        JavaType type \u003d prov.constructType(implClass);\n        // Could require type to be passed explicitly, but we should be able to find it too:\n        JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n                objectIdInfo.getAlwaysAsId());\n    }",
    "begin_line": 541,
    "end_line": 588,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructFilteredBeanWriter#595",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructFilteredBeanWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, java.lang.Class\u003c?\u003e[])",
    "snippet": "protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer,\n            Class\u003c?\u003e[] inViews)\n    {\n        return FilteredBeanPropertyWriter.constructViewBased(writer, inViews);\n    }",
    "begin_line": 595,
    "end_line": 599,
    "comment": "/** \n * Method called to construct a filtered writer, for given view definitions. Default implementation constructs filter that checks active view type to views property is to be included in.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructPropertyBuilder#601",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructPropertyBuilder(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected PropertyBuilder constructPropertyBuilder(SerializationConfig config,\n            BeanDescription beanDesc)\n    {\n        return new PropertyBuilder(config, beanDesc);\n    }",
    "begin_line": 601,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructBeanSerializerBuilder#607",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializerBuilder(com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) {\n        return new BeanSerializerBuilder(beanDesc);\n    }",
    "begin_line": 607,
    "end_line": 609,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.isPotentialBeanType#625",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.isPotentialBeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isPotentialBeanType(Class\u003c?\u003e type)\n    {\n        return (ClassUtil.canBeABeanType(type) \u003d\u003d null) \u0026\u0026 !ClassUtil.isProxyType(type);\n    }",
    "begin_line": 625,
    "end_line": 628,
    "comment": "/** \n * Helper method used to skip processing for types that we know can not be (i.e. are never consider to be) beans:  things like primitives, Arrays, Enums, and proxy types. \u003cp\u003e Note that usually we shouldn\u0027t really be getting these sort of types anyway; but better safe than sorry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findBeanProperties#634",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov,\n            BeanDescription beanDesc, BeanSerializerBuilder builder)\n        throws JsonMappingException\n    {\n        List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n        final SerializationConfig config \u003d prov.getConfig();\n\n        // ignore specified types\n        removeIgnorableTypes(config, beanDesc, properties);\n        \n        // and possibly remove ones without matching mutator...\n        if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n            removeSetterlessGetters(config, beanDesc, properties);\n        }\n        \n        // nothing? can\u0027t proceed (caller may or may not throw an exception)\n        if (properties.isEmpty()) {\n            return null;\n        }\n        // null is for value type serializer, which we don\u0027t have access to from here (ditto for bean prop)\n        boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null);\n        PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n        \n        ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n        for (BeanPropertyDefinition property : properties) {\n            final AnnotatedMember accessor \u003d property.getAccessor();\n            // Type id? Requires special handling:\n            if (property.isTypeId()) {\n                if (accessor !\u003d null) {\n                    builder.setTypeId(accessor);\n                }\n                continue;\n            }\n            // suppress writing of back references\n            AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n            if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n                continue;\n            }\n            if (accessor instanceof AnnotatedMethod) {\n                result.add(_constructWriter(prov, property, pb, staticTyping, (AnnotatedMethod) accessor));\n            } else {\n                result.add(_constructWriter(prov, property, pb, staticTyping, (AnnotatedField) accessor));\n            }\n        }\n        return result;\n    }",
    "begin_line": 634,
    "end_line": 679,
    "comment": "/** \n * Method used to collect all actual serializable properties. Can be overridden to implement custom detection schemes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.filterBeanProperties#691",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.filterBeanProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e filterBeanProperties(SerializationConfig config,\n            BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props)\n    {\n        // 01-May-2016, tatu: Which base type to use here gets tricky, since\n        //   it may often make most sense to use general type for overrides,\n        //   but what we have here may be more specific impl type. But for now\n        //   just use it as is.\n        JsonIgnoreProperties.Value ignorals \u003d config.getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                beanDesc.getClassInfo());\n        if (ignorals !\u003d null) {\n            Set\u003cString\u003e ignored \u003d ignorals.findIgnoredForSerialization();\n            if (!ignored.isEmpty()) {\n                Iterator\u003cBeanPropertyWriter\u003e it \u003d props.iterator();\n                while (it.hasNext()) {\n                    if (ignored.contains(it.next().getName())) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return props;\n    }",
    "begin_line": 691,
    "end_line": 712,
    "comment": "/** \n * Overridable method that can filter out properties. Default implementation checks annotations class may have.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.processViews#723",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.processViews(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)",
    "snippet": "protected void processViews(SerializationConfig config, BeanSerializerBuilder builder)\n    {\n        // whether non-annotated fields are included by default or not is configurable\n        List\u003cBeanPropertyWriter\u003e props \u003d builder.getProperties();\n        boolean includeByDefault \u003d config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n        final int propCount \u003d props.size();\n        int viewsFound \u003d 0;\n        BeanPropertyWriter[] filtered \u003d new BeanPropertyWriter[propCount];\n        // Simple: view information is stored within individual writers, need to combine:\n        for (int i \u003d 0; i \u003c propCount; ++i) {\n            BeanPropertyWriter bpw \u003d props.get(i);\n            Class\u003c?\u003e[] views \u003d bpw.getViews();\n            if (views \u003d\u003d null) { // no view info? include or exclude by default?\n                if (includeByDefault) {\n                    filtered[i] \u003d bpw;\n                }\n            } else {\n                ++viewsFound;\n                filtered[i] \u003d constructFilteredBeanWriter(bpw, views);\n            }\n        }\n        // minor optimization: if no view info, include-by-default, can leave out filtering info altogether:\n        if (includeByDefault \u0026\u0026 viewsFound \u003d\u003d 0) {\n            return;\n        }\n        builder.setFilteredProperties(filtered);\n    }",
    "begin_line": 723,
    "end_line": 749,
    "comment": "/** \n * Method called to handle view information for constructed serializer, based on bean property writers. \u003cp\u003e Note that this method is designed to be overridden by sub-classes if they want to provide custom view handling. As such it is not considered an internal implementation detail, and will be supported as part of API going forward.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeIgnorableTypes#757",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeIgnorableTypes(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc,\n            List\u003cBeanPropertyDefinition\u003e properties)\n    {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        HashMap\u003cClass\u003c?\u003e,Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e,Boolean\u003e();\n        Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property \u003d it.next();\n            AnnotatedMember accessor \u003d property.getAccessor();\n            /* 22-Oct-2016, tatu: Looks like this removal is an important part of\n             *    processing, as taking it out will result in a few test failures...\n             *    But should probably be done somewhere else, not here?\n             */\n            if (accessor \u003d\u003d null) {\n                it.remove();\n                continue;\n            }\n            Class\u003c?\u003e type \u003d property.getRawPrimaryType();\n            Boolean result \u003d ignores.get(type);\n            if (result \u003d\u003d null) {\n                // 21-Apr-2016, tatu: For 2.8, can specify config overrides\n                result \u003d config.getConfigOverride(type).getIsIgnoredType();\n                if (result \u003d\u003d null) {\n                    BeanDescription desc \u003d config.introspectClassAnnotations(type);\n                    AnnotatedClass ac \u003d desc.getClassInfo();\n                    result \u003d intr.isIgnorableType(ac);\n                    // default to false, non-ignorable\n                    if (result \u003d\u003d null) {\n                        result \u003d Boolean.FALSE;\n                    }\n                }\n                ignores.put(type, result);\n            }\n            // lotsa work, and yes, it is ignorable type, so:\n            if (result.booleanValue()) {\n                it.remove();\n            }\n        }\n    }",
    "begin_line": 757,
    "end_line": 795,
    "comment": "/** \n * Method that will apply by-type limitations (as per [JACKSON-429]); by default this is based on  {@link com.fasterxml.jackson.annotation.JsonIgnoreType}annotation but can be supplied by module-provided introspectors too. Starting with 2.8 there are also \"Config overrides\" to consider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeSetterlessGetters#800",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeSetterlessGetters(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc,\n            List\u003cBeanPropertyDefinition\u003e properties)\n    {\n        Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property \u003d it.next();\n            // one caveat: only remove implicit properties;\n            // explicitly annotated ones should remain\n            if (!property.couldDeserialize() \u0026\u0026 !property.isExplicitlyIncluded()) {\n                it.remove();\n            }\n        }\n    }",
    "begin_line": 800,
    "end_line": 812,
    "comment": "/** \n * Helper method that will remove all properties that do not have a mutator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeOverlappingTypeIds#820",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeOverlappingTypeIds(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e removeOverlappingTypeIds(SerializerProvider prov,\n            BeanDescription beanDesc, BeanSerializerBuilder builder,\n            List\u003cBeanPropertyWriter\u003e props)\n    {\n        for (int i \u003d 0, end \u003d props.size(); i \u003c end; ++i) {\n            BeanPropertyWriter bpw \u003d props.get(i);\n            TypeSerializer td \u003d bpw.getTypeSerializer();\n            if ((td \u003d\u003d null) || (td.getTypeInclusion() !\u003d As.EXTERNAL_PROPERTY)) {\n                continue;\n            }\n            String n \u003d td.getPropertyName();\n            PropertyName typePropName \u003d PropertyName.construct(n);\n\n            for (BeanPropertyWriter w2 : props) {\n                if ((w2 !\u003d bpw) \u0026\u0026 w2.wouldConflictWithName(typePropName)) {\n                    bpw.assignTypeSerializer(null);\n                    break;\n                }\n            }\n        }\n        return props;\n    }",
    "begin_line": 820,
    "end_line": 841,
    "comment": "/** \n * Helper method called to ensure that we do not have \"duplicate\" type ids. Added to resolve [databind#222]\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory._constructWriter#853",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.ser.PropertyBuilder, boolean, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef,\n            PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor)\n        throws JsonMappingException\n    {\n        final PropertyName name \u003d propDef.getFullName();\n        JavaType type \u003d accessor.getType();\n        BeanProperty.Std property \u003d new BeanProperty.Std(name, type, propDef.getWrapperName(),\n                accessor, propDef.getMetadata());\n\n        // Does member specify a serializer? If so, let\u0027s use it.\n        JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov,\n                accessor);\n        // Unlike most other code paths, serializer produced\n        // here will NOT be resolved or contextualized, unless done here, so:\n        if (annotatedSerializer instanceof ResolvableSerializer) {\n            ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n        }\n        // 05-Sep-2013, tatu: should be primary property serializer so:\n        annotatedSerializer \u003d prov.handlePrimaryContextualization(annotatedSerializer, property);\n        // And how about polymorphic typing? First special to cover JAXB per-field settings:\n        TypeSerializer contentTypeSer \u003d null;\n        // 16-Feb-2014, cgc: contentType serializers for collection-like and map-like types\n        if (type.isContainerType() || type.isReferenceType()) {\n            contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n        }\n        // and if not JAXB collection/array with annotations, maybe regular type info?\n        TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n        return pb.buildWriter(prov, propDef, type, annotatedSerializer,\n                        typeSer, contentTypeSer, accessor, staticTyping);\n    }",
    "begin_line": 853,
    "end_line": 883,
    "comment": "/** \n * Secondary helper method for constructing  {@link BeanPropertyWriter} forgiven member (field or method).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()",
    "snippet": "protected DefaultSerializerProvider() { super(); }",
    "begin_line": 66,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected DefaultSerializerProvider(SerializerProvider src,\n            SerializationConfig config,SerializerFactory f) {\n        super(src, config, f);\n    }",
    "begin_line": 68,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)",
    "snippet": "protected DefaultSerializerProvider(DefaultSerializerProvider src) {\n        super(src);\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.createInstance#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "public abstract DefaultSerializerProvider createInstance(SerializationConfig config,\n            SerializerFactory jsf);",
    "begin_line": 82,
    "end_line": 83,
    "comment": "/** \n * Method that sub-classes need to implement: used to create a non-blueprint instances from the blueprint. This is needed to retain state during serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.copy#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()",
    "snippet": "public DefaultSerializerProvider copy() {\n        throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\");\n    }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Method needed to ensure that  {@link ObjectMapper#copy} will workproperly; specifically, that caches are cleared, but settings will otherwise remain identical; and that no sharing of state occurs.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializerInstance#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@Override\n    public JsonSerializer\u003cObject\u003e serializerInstance(Annotated annotated, Object serDef)\n            throws JsonMappingException\n    {\n        if (serDef \u003d\u003d null) {\n            return null;\n        }\n        JsonSerializer\u003c?\u003e ser;\n        \n        if (serDef instanceof JsonSerializer) {\n            ser \u003d (JsonSerializer\u003c?\u003e) serDef;\n        } else {\n            // Alas, there\u0027s no way to force return type of \"either class\n            // X or Y\" -- need to throw an exception after the fact\n            if (!(serDef instanceof Class)) {\n                reportBadDefinition(annotated.getType(),\n                        \"AnnotationIntrospector returned serializer definition of type \"\n                        +serDef.getClass().getName()+\"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n            }\n            Class\u003c?\u003e serClass \u003d (Class\u003c?\u003e)serDef;\n            // there are some known \"no class\" markers to consider too:\n            if (serClass \u003d\u003d JsonSerializer.None.class || ClassUtil.isBogusClass(serClass)) {\n                return null;\n            }\n            if (!JsonSerializer.class.isAssignableFrom(serClass)) {\n                reportBadDefinition(annotated.getType(),\n                        \"AnnotationIntrospector returned Class \"\n                        +serClass.getName()+\"; expected Class\u003cJsonSerializer\u003e\");\n            }\n            HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n            ser \u003d (hi \u003d\u003d null) ? null : hi.serializerInstance(_config, annotated, serClass);\n            if (ser \u003d\u003d null) {\n                ser \u003d (JsonSerializer\u003c?\u003e) ClassUtil.createInstance(serClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        return (JsonSerializer\u003cObject\u003e) _handleResolvable(ser);\n    }",
    "begin_line": 104,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.includeFilterInstance#143",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public Object includeFilterInstance(BeanPropertyDefinition forProperty,\n            Class\u003c?\u003e filterClass)\n    {\n        if (filterClass \u003d\u003d null) {\n            return null;\n        }\n        HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n        Object filter \u003d (hi \u003d\u003d null) ? null : hi.includeFilterInstance(_config, forProperty, filterClass);\n        if (filter \u003d\u003d null) {\n            filter \u003d ClassUtil.createInstance(filterClass,\n                    _config.canOverrideAccessModifiers());\n        }\n        return filter;\n    }",
    "begin_line": 143,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.includeFilterSuppressNulls#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(java.lang.Object)",
    "snippet": "@Override\n    public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException\n    {\n        if (filter \u003d\u003d null) {\n            return true;\n        }\n        // should let filter decide what to do with nulls:\n        // But just case, let\u0027s handle unexpected (from our perspective) problems explicitly\n        try {\n            return filter.equals(null);\n        } catch (Throwable t) {\n            String msg \u003d String.format(\n\"Problem determining whether filter of type \u0027%s\u0027 should filter out `null` values: (%s) %s\",\nfilter.getClass().getName(), t.getClass().getName(), t.getMessage());\n            reportBadDefinition(filter.getClass(), msg, t);\n            return false; // never gets here\n        }\n    }",
    "begin_line": 159,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.findObjectId#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e)",
    "snippet": "@Override\n    public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator\u003c?\u003e generatorType)\n    {\n        if (_seenObjectIds \u003d\u003d null) {\n            _seenObjectIds \u003d _createObjectIdMap();\n        } else {\n            WritableObjectId oid \u003d _seenObjectIds.get(forPojo);\n            if (oid !\u003d null) {\n                return oid;\n            }\n        }\n        // Not seen yet; must add an entry, return it. For that, we need generator\n        ObjectIdGenerator\u003c?\u003e generator \u003d null;\n        \n        if (_objectIdGenerators \u003d\u003d null) {\n            _objectIdGenerators \u003d new ArrayList\u003cObjectIdGenerator\u003c?\u003e\u003e(8);\n        } else {\n            for (int i \u003d 0, len \u003d _objectIdGenerators.size(); i \u003c len; ++i) {\n                ObjectIdGenerator\u003c?\u003e gen \u003d _objectIdGenerators.get(i);\n                if (gen.canUseFor(generatorType)) {\n                    generator \u003d gen;\n                    break;\n                }\n            }\n        }\n        if (generator \u003d\u003d null) {\n            generator \u003d generatorType.newForSerialization(this);\n            _objectIdGenerators.add(generator);\n        }\n        WritableObjectId oid \u003d new WritableObjectId(generator);\n        _seenObjectIds.put(forPojo, oid);\n        return oid;\n    }",
    "begin_line": 184,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._createObjectIdMap#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap()",
    "snippet": "protected Map\u003cObject,WritableObjectId\u003e _createObjectIdMap()\n    {\n        /* 06-Aug-2013, tatu: We may actually want to use equality,\n         *   instead of identity... so:\n         */\n        if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID)) {\n            return new HashMap\u003cObject,WritableObjectId\u003e();\n        }\n        return new IdentityHashMap\u003cObject,WritableObjectId\u003e();\n    }",
    "begin_line": 224,
    "end_line": 233,
    "comment": "/** \n * Overridable helper method used for creating  {@link java.util.Map}used for storing mappings from serializable objects to their Object Ids.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.hasSerializerFor#248",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(java.lang.Class\u003c?\u003e, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean hasSerializerFor(Class\u003c?\u003e cls, AtomicReference\u003cThrowable\u003e cause)\n    {\n        // 07-Nov-2015, tatu: One special case, Object.class; will work only if\n        //   empty beans are allowed or custom serializer registered. Easiest to\n        //   check here.\n        if (cls \u003d\u003d Object.class) {\n            if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n                return true;\n            }\n        }\n        \n        try {\n            JsonSerializer\u003c?\u003e ser \u003d _findExplicitUntypedSerializer(cls);\n            return (ser !\u003d null);\n        } catch (JsonMappingException e) {\n            if (cause !\u003d null) {\n                cause.set(e);\n            }\n        } catch (RuntimeException e) {\n            if (cause \u003d\u003d null) { // earlier behavior\n                throw e;\n            }\n            cause.set(e);\n        }\n        return false;\n    }",
    "begin_line": 248,
    "end_line": 273,
    "comment": "/** \n * Method that can be called to see if this serializer provider can find a serializer for an instance of given class. \u003cp\u003e Note that no Exceptions are thrown, including unchecked ones: implementations are to swallow exceptions if necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.getGenerator#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator()",
    "snippet": "@Override\n    public JsonGenerator getGenerator() {\n        return _generator;\n    }",
    "begin_line": 283,
    "end_line": 285,
    "comment": "/** \n * Accessor for the  {@link JsonGenerator} currently in use for serializingcontent. Null for blueprint instances; non-null for actual active provider instances.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object)",
    "snippet": "public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        _generator \u003d gen;\n        if (value \u003d\u003d null) {\n            _serializeNull(gen);\n            return;\n        }\n        final Class\u003c?\u003e cls \u003d value.getClass();\n        // true, since we do want to cache root-level typed serializers (ditto for null property)\n        final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n\n        PropertyName rootName \u003d _config.getFullRootName();\n        if (rootName \u003d\u003d null) { // not explicitly specified\n            if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n                _serialize(gen, value, ser, _config.findRootName(cls));\n                return;\n            }\n        } else if (!rootName.isEmpty()) {\n            _serialize(gen, value, ser, rootName);\n            return;\n        }\n        _serialize(gen, value, ser);\n    }",
    "begin_line": 299,
    "end_line": 321,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}for serializing given value, using serializers that this provider has access to (via caching and/or creating new serializers as need be).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException\n    {\n        _generator \u003d gen;\n        if (value \u003d\u003d null) {\n            _serializeNull(gen);\n            return;\n        }\n        // Let\u0027s ensure types are compatible at this point\n        if (!rootType.getRawClass().isAssignableFrom(value.getClass())) {\n            _reportIncompatibleRootType(value, rootType);\n        }\n        // root value, not reached via property:\n        JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(rootType, true, null);\n        PropertyName rootName \u003d _config.getFullRootName();\n        if (rootName \u003d\u003d null) { // not explicitly specified\n            if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n                _serialize(gen, value, ser, _config.findRootName(rootType));\n                return;\n            }\n        } else if (!rootName.isEmpty()) {\n            _serialize(gen, value, ser, rootName);\n            return;\n        }\n        _serialize(gen, value, ser);\n    }",
    "begin_line": 334,
    "end_line": 358,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}for serializing given value (assumed to be of specified root type, instead of runtime type of value), using serializers that this provider has access to (via caching and/or creating new serializers as need be),\n * @param rootType Type to use for locating serializer to use, instead of actualruntime type. Must be actual type, or one of its super types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType,\n            JsonSerializer\u003cObject\u003e ser) throws IOException\n    {\n        _generator \u003d gen;\n        if (value \u003d\u003d null) {\n            _serializeNull(gen);\n            return;\n        }\n        // Let\u0027s ensure types are compatible at this point\n        if ((rootType !\u003d null) \u0026\u0026 !rootType.getRawClass().isAssignableFrom(value.getClass())) {\n            _reportIncompatibleRootType(value, rootType);\n        }\n        // root value, not reached via property:\n        if (ser \u003d\u003d null) {\n            ser \u003d findTypedValueSerializer(rootType, true, null);\n        }\n        PropertyName rootName \u003d _config.getFullRootName();\n        if (rootName \u003d\u003d null) { // not explicitly specified\n            if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n                rootName \u003d (rootType \u003d\u003d null)\n                        ? _config.findRootName(value.getClass())\n                        : _config.findRootName(rootType);\n                _serialize(gen, value, ser, rootName);\n                return;\n            }\n        } else if (!rootName.isEmpty()) {\n            _serialize(gen, value, ser, rootName);\n            return;\n        }\n        _serialize(gen, value, ser);\n    }",
    "begin_line": 372,
    "end_line": 402,
    "comment": "/** \n * The method to be called by  {@link ObjectWriter}for serializing given value (assumed to be of specified root type, instead of runtime type of value), when it may know specific {@link JsonSerializer} to use.\n * @param rootType Type to use for locating serializer to use, instead of actualruntime type, if no serializer is passed\n * @param ser Root Serializer to use, if not null\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializePolymorphic#410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "public void serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType,\n            JsonSerializer\u003cObject\u003e valueSer, TypeSerializer typeSer)\n        throws IOException\n    {\n        _generator \u003d gen;\n        if (value \u003d\u003d null) {\n            _serializeNull(gen);\n            return;\n        }\n        // Let\u0027s ensure types are compatible at this point\n        if ((rootType !\u003d null) \u0026\u0026 !rootType.getRawClass().isAssignableFrom(value.getClass())) {\n            _reportIncompatibleRootType(value, rootType);\n        }\n        /* 12-Jun-2015, tatu: nominal root type is necessary for Maps at least;\n         *   possibly collections, but can cause problems for other polymorphic\n         *   types. We really need to distinguish between serialization type,\n         *   base type; but right we don\u0027t. Hence this check\n         */\n        if (valueSer \u003d\u003d null) {\n            if ((rootType !\u003d null) \u0026\u0026 rootType.isContainerType()) {\n                valueSer \u003d findValueSerializer(rootType, null);\n            } else {\n                valueSer \u003d findValueSerializer(value.getClass(), null);\n            }\n        }\n\n        final boolean wrap;\n        PropertyName rootName \u003d _config.getFullRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                gen.writeStartObject();\n                PropertyName pname \u003d _config.findRootName(value.getClass());\n                gen.writeFieldName(pname.simpleAsEncoded(_config));\n            }\n        } else if (rootName.isEmpty()) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            gen.writeStartObject();\n            gen.writeFieldName(rootName.getSimpleName());\n        }\n        try {\n            valueSer.serializeWithType(value, gen, this, typeSer);\n            if (wrap) {\n                gen.writeEndObject();\n            }\n        } catch (Exception e) {\n            throw _wrapAsIOE(gen, e);\n        }\n    }",
    "begin_line": 410,
    "end_line": 460,
    "comment": "/** \n * Alternate serialization call used for polymorphic types, when  {@link TypeSerializer}is already known, but the actual serializer may or may not be.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serialize#462",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private final void _serialize(JsonGenerator gen, Object value,\n            JsonSerializer\u003cObject\u003e ser, PropertyName rootName)\n        throws IOException\n    {\n        try {\n            gen.writeStartObject();\n            gen.writeFieldName(rootName.simpleAsEncoded(_config));\n            ser.serialize(value, gen, this);\n            gen.writeEndObject();\n        } catch (Exception e) {\n            throw _wrapAsIOE(gen, e);\n        }\n    }",
    "begin_line": 462,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serialize#476",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "private final void _serialize(JsonGenerator gen, Object value,\n            JsonSerializer\u003cObject\u003e ser)\n        throws IOException\n    {\n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) {\n            throw _wrapAsIOE(gen, e);\n        }\n    }",
    "begin_line": 476,
    "end_line": 485,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serializeNull#492",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull(JsonGenerator)",
    "snippet": "protected void _serializeNull(JsonGenerator gen) throws IOException\n    {\n        JsonSerializer\u003cObject\u003e ser \u003d getDefaultNullValueSerializer();\n        try {\n            ser.serialize(null, gen, this);\n        } catch (Exception e) {\n            throw _wrapAsIOE(gen, e);\n        }\n    }",
    "begin_line": 492,
    "end_line": 500,
    "comment": "/** \n * Helper method called when root value to serialize is null\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._wrapAsIOE#502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._wrapAsIOE(JsonGenerator, java.lang.Exception)",
    "snippet": "private IOException _wrapAsIOE(JsonGenerator g, Exception e) {\n        if (e instanceof IOException) {\n            return (IOException) e;\n        }\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \"+e.getClass().getName()+\"]\";\n        }\n        return new JsonMappingException(g, msg, e);\n    }",
    "begin_line": 502,
    "end_line": 511,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.cachedSerializersCount#530",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount()",
    "snippet": "public int cachedSerializersCount() {\n        return _serializerCache.size();\n    }",
    "begin_line": 530,
    "end_line": 532,
    "comment": "/** \n * Method that can be used to determine how many serializers this provider is caching currently (if it does caching: default implementation does) Exact count depends on what kind of serializers get cached; default implementation caches all serializers, including ones that are eagerly constructed (for optimal access speed) \u003cp\u003e  The main use case for this method is to allow conditional flushing of serializer cache, if certain number of entries is reached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.flushCachedSerializers#540",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers()",
    "snippet": "public void flushCachedSerializers() {\n        _serializerCache.flush();\n    }",
    "begin_line": 540,
    "end_line": 542,
    "comment": "/** \n * Method that will drop all serializers currently cached by this provider. This can be used to remove memory usage (in case some serializers are only used once or so), or to force re-construction of serializers after configuration changes for mapper than owns the provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.acceptJsonFormatVisitor#557",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor)\n        throws JsonMappingException\n    {\n        if (javaType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"A class must be provided\");\n        }\n        /* no need for embedded type information for JSON schema generation (all\n         * type information it needs is accessible via \"untyped\" serializer)\n         */\n        visitor.setProvider(this);\n        findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType);\n    }",
    "begin_line": 557,
    "end_line": 568,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}to to expose the format of the given to to the given visitor\n * @param javaType The type for which to generate format\n * @param visitor the visitor to accept the format\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.generateJsonSchema#580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated generateJsonSchema(Class\u003c?\u003e type)\n        throws JsonMappingException\n    {\n        /* no need for embedded type information for JSON schema generation (all\n         * type information it needs is accessible via \"untyped\" serializer)\n         */\n        JsonSerializer\u003cObject\u003e ser \u003d findValueSerializer(type, null);\n        JsonNode schemaNode \u003d (ser instanceof SchemaAware) ?\n                ((SchemaAware) ser).getSchema(this, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n        if (!(schemaNode instanceof ObjectNode)) {\n            throw new IllegalArgumentException(\"Class \" + type.getName()\n                    +\" would not be serialized as a JSON object and therefore has no schema\");\n        }\n        return new com.fasterxml.jackson.databind.jsonschema.JsonSchema((ObjectNode) schemaNode);\n    }",
    "begin_line": 580,
    "end_line": 594,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper}to generate \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON schema\u003c/a\u003e for given type.\n * @param type The type for which to generate schema\n * @deprecated Should not be used any more\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#610",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()",
    "snippet": "public Impl() { super(); }",
    "begin_line": 610,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#611",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl)",
    "snippet": "public Impl(Impl src) { super(src); }",
    "begin_line": 611,
    "end_line": 611,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#613",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected Impl(SerializerProvider src, SerializationConfig config,\n                SerializerFactory f) {\n            super(src, config, f);\n        }",
    "begin_line": 613,
    "end_line": 616,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.copy#619",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()",
    "snippet": "@Override\n        public DefaultSerializerProvider copy()\n        {\n            if (getClass() !\u003d Impl.class) {\n                return super.copy();\n            }\n            return new Impl(this);\n        }",
    "begin_line": 619,
    "end_line": 625,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.createInstance#628",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "@Override\n        public Impl createInstance(SerializationConfig config, SerializerFactory jsf) {\n            return new Impl(this, config, jsf);\n        }",
    "begin_line": 628,
    "end_line": 630,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.SerializerCache#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()",
    "snippet": "public SerializerCache() { }",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.getReadOnlyLookupMap#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap()",
    "snippet": "public ReadOnlyClassToSerializerMap getReadOnlyLookupMap()\n    {\n        ReadOnlyClassToSerializerMap m \u003d _readOnlyMap.get();\n        if (m !\u003d null) {\n            return m;\n        }\n        return _makeReadOnlyLookupMap();\n    }",
    "begin_line": 48,
    "end_line": 55,
    "comment": "/** \n * Method that can be called to get a read-only instance populated from the most recent version of the shared lookup Map.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache._makeReadOnlyLookupMap#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache._makeReadOnlyLookupMap()",
    "snippet": "private final synchronized ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap() {\n        // double-locking; safe, but is it really needed? Not doing that is only a perf problem,\n        // not correctness\n        ReadOnlyClassToSerializerMap m \u003d _readOnlyMap.get();\n        if (m \u003d\u003d null) {\n            m \u003d ReadOnlyClassToSerializerMap.from(_sharedMap);\n            _readOnlyMap.set(m);\n        }\n        return m;\n    }",
    "begin_line": 57,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.size#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.size()",
    "snippet": "public synchronized int size() {\n        return _sharedMap.size();\n    }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.untypedValueSerializer#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e untypedValueSerializer(Class\u003c?\u003e type)\n    {\n        synchronized (this) {\n            return _sharedMap.get(new TypeKey(type, false));\n        }\n    }",
    "begin_line": 82,
    "end_line": 87,
    "comment": "/** \n * Method that checks if the shared (and hence, synchronized) lookup Map might have untyped serializer for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.untypedValueSerializer#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e untypedValueSerializer(JavaType type)\n    {\n        synchronized (this) {\n            return _sharedMap.get(new TypeKey(type, false));\n        }\n    }",
    "begin_line": 89,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.typedValueSerializer#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e typedValueSerializer(JavaType type)\n    {\n        synchronized (this) {\n            return _sharedMap.get(new TypeKey(type, true));\n        }\n    }",
    "begin_line": 96,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.typedValueSerializer#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e typedValueSerializer(Class\u003c?\u003e cls)\n    {\n        synchronized (this) {\n            return _sharedMap.get(new TypeKey(cls, true));\n        }\n    }",
    "begin_line": 103,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addTypedSerializer#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void addTypedSerializer(JavaType type, JsonSerializer\u003cObject\u003e ser)\n    {\n        synchronized (this) {\n            if (_sharedMap.put(new TypeKey(type, true), ser) \u003d\u003d null) {\n                // let\u0027s invalidate the read-only copy, too, to get it updated\n                _readOnlyMap.set(null);\n            }\n        }\n    }",
    "begin_line": 121,
    "end_line": 129,
    "comment": "/** \n * Method called if none of lookups succeeded, and caller had to construct a serializer. If so, we will update the shared lookup map so that it can be resolved via it next time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addTypedSerializer#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void addTypedSerializer(Class\u003c?\u003e cls, JsonSerializer\u003cObject\u003e ser)\n    {\n        synchronized (this) {\n            if (_sharedMap.put(new TypeKey(cls, true), ser) \u003d\u003d null) {\n                // let\u0027s invalidate the read-only copy, too, to get it updated\n                _readOnlyMap.set(null);\n            }\n        }\n    }",
    "begin_line": 131,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(Class\u003c?\u003e type, JsonSerializer\u003cObject\u003e ser,\n            SerializerProvider provider)\n        throws JsonMappingException\n    {\n        synchronized (this) {\n            if (_sharedMap.put(new TypeKey(type, false), ser) \u003d\u003d null) {\n                _readOnlyMap.set(null);\n            }\n            // Need resolution to handle cyclic POJO type dependencies\n            /* 14-May-2011, tatu: Resolving needs to be done in synchronized manner;\n             *   this because while we do need to register instance first, we also must\n             *   keep lock until resolution is complete.\n             */\n            if (ser instanceof ResolvableSerializer) {\n                ((ResolvableSerializer) ser).resolve(provider);\n            }\n        }\n    }",
    "begin_line": 141,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(JavaType type, JsonSerializer\u003cObject\u003e ser,\n            SerializerProvider provider)\n        throws JsonMappingException\n    {\n        synchronized (this) {\n            if (_sharedMap.put(new TypeKey(type, false), ser) \u003d\u003d null) {\n                _readOnlyMap.set(null);\n            }\n            // Need resolution to handle cyclic POJO type dependencies\n            /* 14-May-2011, tatu: Resolving needs to be done in synchronized manner;\n             *   this because while we do need to register instance first, we also must\n             *   keep lock until resolution is complete.\n             */\n            if (ser instanceof ResolvableSerializer) {\n                ((ResolvableSerializer) ser).resolve(provider);\n            }\n        }\n    }",
    "begin_line": 160,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(Class\u003c?\u003e rawType, JavaType fullType,\n            JsonSerializer\u003cObject\u003e ser,\n            SerializerProvider provider)\n        throws JsonMappingException\n    {\n        synchronized (this) {\n            Object ob1 \u003d _sharedMap.put(new TypeKey(rawType, false), ser);\n            Object ob2 \u003d _sharedMap.put(new TypeKey(fullType, false), ser);\n            if ((ob1 \u003d\u003d null) || (ob2 \u003d\u003d null)) {\n                _readOnlyMap.set(null);\n            }\n            if (ser instanceof ResolvableSerializer) {\n                ((ResolvableSerializer) ser).resolve(provider);\n            }\n        }\n    }",
    "begin_line": 185,
    "end_line": 200,
    "comment": "/** \n * Another alternative that will cover both access via raw type and matching fully resolved type, in one fell swoop.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.flush#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.flush()",
    "snippet": "public synchronized void flush() {\n        _sharedMap.clear();\n    }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Method called by StdSerializerProvider#flushCachedSerializers() to clear all cached serializers\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withAdditionalSerializers#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public abstract SerializerFactory withAdditionalSerializers(Serializers additional);",
    "begin_line": 26,
    "end_line": 26,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional serializer provider; equivalent to calling \u003cpre\u003e withConfig(getConfig().withAdditionalSerializers(additional)); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withAdditionalKeySerializers#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public abstract SerializerFactory withAdditionalKeySerializers(Serializers additional);",
    "begin_line": 28,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withSerializerModifier#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "public abstract SerializerFactory withSerializerModifier(BeanSerializerModifier modifier);",
    "begin_line": 37,
    "end_line": 37,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional bean serializer modifier; equivalent to calling \u003cpre\u003e withConfig(getConfig().withSerializerModifier(modifier)); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createSerializer#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,\n            JavaType baseType)\n        throws JsonMappingException;",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Method called to create (or, for immutable serializers, reuse) a serializer for given type. \n * @param prov Provider that needs to be used to resolve annotation-providedserializers (but NOT for others)\n * @since 2.1 (earlier versions had method with different signature)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createTypeSerializer#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract TypeSerializer createTypeSerializer(SerializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException;",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Method called to create a type information serializer for given base type, if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param baseType Declared type to use as the base type for type information serializer\n * @return Type serializer to use for the base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createKeySerializer#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e createKeySerializer(SerializationConfig config,\n            JavaType type, JsonSerializer\u003cObject\u003e defaultImpl)\n        throws JsonMappingException;",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Method called to create serializer to use for serializing JSON property names (which must be output as \u003ccode\u003eJsonToken.FIELD_NAME\u003c/code\u003e) for Map that has specified declared key type, and is for specified property (or, if property is null, as root value)\n * @param type Declared type for Map keys\n * @param defaultImpl Default key serializer implementation to use, if no custom onesare found (may be null)\n * @return Serializer to use, if factory knows it; null if not (in which case defaultserializer is to be used)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.FailingSerializer#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.FailingSerializer(java.lang.String)",
    "snippet": "public FailingSerializer(String msg) {\n        super(Object.class);\n        _msg \u003d msg;\n    }",
    "begin_line": 27,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.serialize#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator g, SerializerProvider provider) throws IOException\n    {\n        provider.reportMappingProblem(_msg);\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.getSchema#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return null;\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.acceptJsonFormatVisitor#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n    {\n        ;\n    }",
    "begin_line": 44,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.UnknownSerializer#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.UnknownSerializer()",
    "snippet": "public UnknownSerializer() {\n        super(Object.class);\n    }",
    "begin_line": 16,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.UnknownSerializer#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.UnknownSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public UnknownSerializer(Class\u003c?\u003e cls) {\n        super(cls, false);\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.serialize#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException\n    {\n        // 27-Nov-2009, tatu: As per [JACKSON-201] may or may not fail...\n        if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n            failForEmpty(provider, value);\n        }\n        // But if it\u0027s fine, we\u0027ll just output empty JSON Object:\n        gen.writeStartObject();\n        gen.writeEndObject();\n    }",
    "begin_line": 28,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.serializeWithType#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public final void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider,\n            TypeSerializer typeSer) throws IOException\n    {\n        if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n            failForEmpty(provider, value);\n        }\n        typeSer.writeTypePrefixForObject(value, gen);\n        typeSer.writeTypeSuffixForObject(value, gen);\n    }",
    "begin_line": 40,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.isEmpty#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override\n    public boolean isEmpty(SerializerProvider provider, Object value) {\n        return true;\n    }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.getSchema#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return null;\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.acceptJsonFormatVisitor#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n        throws JsonMappingException\n    { \n        visitor.expectAnyFormat(typeHint);\n    }",
    "begin_line": 61,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.failForEmpty#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "protected void failForEmpty(SerializerProvider prov, Object value)\n            throws JsonMappingException {\n        prov.reportBadDefinition(handledType(), String.format(\n                \"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\",\n                value.getClass().getName()));\n    }",
    "begin_line": 67,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.BooleanSerializer#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.BooleanSerializer(boolean)",
    "snippet": "public BooleanSerializer(boolean forPrimitive) {\n        super(forPrimitive ? Boolean.TYPE : Boolean.class, false);\n        _forPrimitive \u003d forPrimitive;\n    }",
    "begin_line": 41,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.createContextual#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override\n    public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        JsonFormat.Value format \u003d findFormatOverrides(serializers,\n                property, Boolean.class);\n        if (format !\u003d null) {\n            JsonFormat.Shape shape \u003d format.getShape();\n            if (shape.isNumeric()) {\n                return new AsNumber(_forPrimitive);\n            }\n        }\n        return this;\n    }",
    "begin_line": 47,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.serialize#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator g, SerializerProvider provider) throws IOException {\n        g.writeBoolean(Boolean.TRUE.equals(value));\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.serializeWithType#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public final void serializeWithType(Object value, JsonGenerator g, SerializerProvider provider,\n            TypeSerializer typeSer) throws IOException\n    {\n        g.writeBoolean(Boolean.TRUE.equals(value));\n    }",
    "begin_line": 67,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.getSchema#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n        return createSchemaNode(\"boolean\", !_forPrimitive);\n    }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.acceptJsonFormatVisitor#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        visitor.expectBooleanFormat(typeHint);\n    }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.AsNumber#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.AsNumber(boolean)",
    "snippet": "public AsNumber(boolean forPrimitive) {\n            super(forPrimitive ? Boolean.TYPE : Boolean.class, false);\n            _forPrimitive \u003d forPrimitive;\n        }",
    "begin_line": 101,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.serialize#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator g, SerializerProvider provider) throws IOException {\n            g.writeNumber((Boolean.FALSE.equals(value)) ? 0 : 1);\n        }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.serializeWithType#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n        public final void serializeWithType(Object value, JsonGenerator g, SerializerProvider provider,\n                TypeSerializer typeSer) throws IOException\n        {\n            // 27-Mar-2017, tatu: Actually here we CAN NOT serialize as number without type,\n            //    since with natural types that would map to number, not boolean. So choice\n            //    comes to between either add type id, or serialize as boolean. Choose\n            //    latter at this point\n            g.writeBoolean(Boolean.TRUE.equals(value));\n        }",
    "begin_line": 112,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.acceptJsonFormatVisitor#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n            // 27-Mar-2017, tatu: As usual, bit tricky but... seems like we should call\n            //    visitor for actual representation\n            visitIntFormat(visitor, typeHint, NumberType.INT);\n        }",
    "begin_line": 123,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.createContextual#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override\n        public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,\n                BeanProperty property) throws JsonMappingException\n        {\n            JsonFormat.Value format \u003d findFormatOverrides(serializers,\n                    property, Boolean.class);\n            if (format !\u003d null) {\n                JsonFormat.Shape shape \u003d format.getShape();\n                if (!shape.isNumeric()) {\n                    return new BooleanSerializer(_forPrimitive);\n                }\n            }\n            return this;\n        }",
    "begin_line": 130,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.CalendarSerializer#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()",
    "snippet": "public CalendarSerializer() { this(null, null); }",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.CalendarSerializer#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public CalendarSerializer(Boolean useTimestamp, DateFormat customFormat) {\n        super(Calendar.class, useTimestamp, customFormat);\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.withFormat#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "@Override\n    public CalendarSerializer withFormat(Boolean timestamp, DateFormat customFormat) {\n        return new CalendarSerializer(timestamp, customFormat);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer._timestamp#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer._timestamp(java.util.Calendar)",
    "snippet": "@Override\n    protected long _timestamp(Calendar value) {\n        return (value \u003d\u003d null) ? 0L : value.getTimeInMillis();\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.serialize#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.serialize(java.util.Calendar, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n    {\n        if (_asTimestamp(provider)) {\n            jgen.writeNumber(_timestamp(value));\n        } else if (_customFormat !\u003d null) {\n            // 21-Feb-2011, tatu: not optimal, but better than alternatives:\n            synchronized (_customFormat) {\n                // _customformat cannot parse Calendar, so Date should be passed\n                jgen.writeString(_customFormat.format(value.getTime()));\n            }\n        } else {\n            provider.defaultSerializeDateValue(value.getTime(), jgen);\n        }\n    }",
    "begin_line": 40,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.DateSerializer#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.DateSerializer()",
    "snippet": "public DateSerializer() {\n        this(null, null);\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.DateSerializer#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.DateSerializer(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public DateSerializer(Boolean useTimestamp, DateFormat customFormat) {\n        super(Date.class, useTimestamp, customFormat);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.withFormat#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "@Override\n    public DateSerializer withFormat(Boolean timestamp, DateFormat customFormat) {\n        return new DateSerializer(timestamp, customFormat);\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer._timestamp#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer._timestamp(java.util.Date)",
    "snippet": "@Override\n    protected long _timestamp(Date value) {\n        return (value \u003d\u003d null) ? 0L : value.getTime();\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.serialize#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.serialize(java.util.Date, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Date value, JsonGenerator gen, SerializerProvider provider) throws IOException\n    {\n        if (_asTimestamp(provider)) {\n            gen.writeNumber(_timestamp(value));\n        } else if (_customFormat !\u003d null) {\n            // 21-Feb-2011, tatu: not optimal, but better than alternatives:\n            synchronized (_customFormat) {\n                gen.writeString(_customFormat.format(value));\n            }\n        } else {\n            provider.defaultSerializeDateValue(value, gen);\n        }\n    }",
    "begin_line": 45,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.DateTimeSerializerBase#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.DateTimeSerializerBase(java.lang.Class\u003cT\u003e, java.lang.Boolean, java.text.DateFormat)",
    "snippet": "protected DateTimeSerializerBase(Class\u003cT\u003e type,\n            Boolean useTimestamp, DateFormat customFormat)\n    {\n        super(type);\n        _useTimestamp \u003d useTimestamp;\n        _customFormat \u003d customFormat;\n    }",
    "begin_line": 38,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.withFormat#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public abstract DateTimeSerializerBase\u003cT\u003e withFormat(Boolean timestamp, DateFormat customFormat);",
    "begin_line": 46,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.createContextual#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override\n    public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property !\u003d null) {\n            JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\n            if (format !\u003d null) {\n            \t// Simple case first: serialize as numeric timestamp?\n                JsonFormat.Shape shape \u003d format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n                if ((shape \u003d\u003d JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz \u003d format.getTimeZone();\n                    final String pattern \u003d format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc \u003d format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df \u003d new SimpleDateFormat(pattern, loc);\n                    if (tz \u003d\u003d null) {\n                        tz \u003d serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 49,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.isEmpty#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, T)",
    "snippet": "@Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        // 09-Mar-2017, tatu: as per [databind#1550] timestamp 0 is NOT \"empty\"; but\n        //   with versions up to 2.8.x this was the case. Fixed for 2.9.\n//        return _timestamp(value) \u003d\u003d 0L;\n        return false;\n    }",
    "begin_line": 88,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._timestamp#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._timestamp(T)",
    "snippet": "protected abstract long _timestamp(T value);",
    "begin_line": 95,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.getSchema#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        //todo: (ryan) add a format for the date in the schema?\n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }",
    "begin_line": 98,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.acceptJsonFormatVisitor#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }",
    "begin_line": 104,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.serialize#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers)\n        throws IOException;",
    "begin_line": 116,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._asTimestamp#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "protected boolean _asTimestamp(SerializerProvider serializers)\n    {\n        if (_useTimestamp !\u003d null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat \u003d\u003d null) {\n            if (serializers !\u003d null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            // 12-Jun-2014, tatu: Is it legal not to have provider? Was NPE:ing earlier so leave a check\n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }",
    "begin_line": 125,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._acceptJsonFormatVisitor#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, boolean)",
    "snippet": "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n\t\tboolean asNumber) throws JsonMappingException\n    {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }",
    "begin_line": 140,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.NullSerializer#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()",
    "snippet": "private NullSerializer() { super(Object.class); }",
    "begin_line": 26,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.serialize#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        gen.writeNull();\n    }",
    "begin_line": 29,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.serializeWithType#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider serializers,\n            TypeSerializer typeSer)\n        throws IOException\n    {\n        gen.writeNull();\n    }",
    "begin_line": 40,
    "end_line": 45,
    "comment": "/** \n * Although this method should rarely get called, for convenience we should override it, and handle it same way as \"natural\" types: by serializing exactly as is, without type decorations. The most common possible use case is that of delegation by JSON filter; caller can not know what kind of serializer it gets handed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.getSchema#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return createSchemaNode(\"null\");\n    }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.acceptJsonFormatVisitor#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        visitor.expectNullFormat(typeHint);\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.NumberSerializer#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.NumberSerializer(java.lang.Class\u003c? extends java.lang.Number\u003e)",
    "snippet": "public NumberSerializer(Class\u003c? extends Number\u003e rawType) {\n        super(rawType, false);\n        // since this will NOT be constructed for Integer or Long, only case is:\n        _isInt \u003d (rawType \u003d\u003d BigInteger.class);\n    }",
    "begin_line": 34,
    "end_line": 38,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.serialize#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(java.lang.Number, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException\n    {\n        // should mostly come in as one of these two:\n        if (value instanceof BigDecimal) {\n            g.writeNumber((BigDecimal) value);\n        } else if (value instanceof BigInteger) {\n            g.writeNumber((BigInteger) value);\n            \n        // These should not occur, as more specific methods should have been called; but\n        // just in case let\u0027s cover all bases:\n        } else if (value instanceof Long) {\n            g.writeNumber(value.longValue());\n        } else if (value instanceof Double) {\n            g.writeNumber(value.doubleValue());\n        } else if (value instanceof Float) {\n            g.writeNumber(value.floatValue());\n        } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {\n            g.writeNumber(value.intValue()); // doesn\u0027t need to be cast to smaller numbers\n        } else {\n            // We\u0027ll have to use fallback \"untyped\" number write method\n            g.writeNumber(value.toString());\n        }\n    }",
    "begin_line": 41,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.getSchema#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n        return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\n    }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.acceptJsonFormatVisitor#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        if (_isInt) {\n            visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else {\n            Class\u003c?\u003e h \u003d handledType();\n            if (h \u003d\u003d BigDecimal.class) {\n                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n            } else {\n                // otherwise bit unclear what to call... but let\u0027s try:\n                /*JsonNumberFormatVisitor v2 \u003d*/ visitor.expectNumberFormat(typeHint);\n            }\n        }\n    }",
    "begin_line": 71,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializers.NumberSerializers#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.NumberSerializers()",
    "snippet": "protected NumberSerializers() { }",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializers.addAll#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e\u003e)",
    "snippet": "public static void addAll(Map\u003cString, JsonSerializer\u003c?\u003e\u003e allDeserializers) {\n        allDeserializers.put(Integer.class.getName(), new IntegerSerializer(Integer.class));\n        allDeserializers.put(Integer.TYPE.getName(), new IntegerSerializer(Integer.TYPE));\n        allDeserializers.put(Long.class.getName(), new LongSerializer(Long.class));\n        allDeserializers.put(Long.TYPE.getName(), new LongSerializer(Long.TYPE));\n\n        allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance);\n        allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance);\n        allDeserializers.put(Short.class.getName(), ShortSerializer.instance);\n        allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance);\n\n        // Numbers, limited length floating point\n        allDeserializers.put(Double.class.getName(), new DoubleSerializer(Double.class));\n        allDeserializers.put(Double.TYPE.getName(), new DoubleSerializer(Double.TYPE));\n        allDeserializers.put(Float.class.getName(), FloatSerializer.instance);\n        allDeserializers.put(Float.TYPE.getName(), FloatSerializer.instance);\n    }",
    "begin_line": 25,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.Base#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base(java.lang.Class\u003c?\u003e, JsonParser.NumberType, java.lang.String)",
    "snippet": "protected Base(Class\u003c?\u003e cls, JsonParser.NumberType numberType,\n                String schemaType) {\n            super(cls, false);\n            _numberType \u003d numberType;\n            _schemaType \u003d schemaType;\n            _isInt \u003d (numberType \u003d\u003d JsonParser.NumberType.INT)\n                    || (numberType \u003d\u003d JsonParser.NumberType.LONG)\n                    || (numberType \u003d\u003d JsonParser.NumberType.BIG_INTEGER);\n        }",
    "begin_line": 55,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.getSchema#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n            return createSchemaNode(_schemaType, true);\n        }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.acceptJsonFormatVisitor#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,\n                JavaType typeHint) throws JsonMappingException\n        {\n            if (_isInt) {\n                visitIntFormat(visitor, typeHint, _numberType);\n            } else {\n                visitFloatFormat(visitor, typeHint, _numberType);\n            }\n        }",
    "begin_line": 71,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.createContextual#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override\n        public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov,\n                BeanProperty property) throws JsonMappingException\n        {\n            JsonFormat.Value format \u003d findFormatOverrides(prov, property, handledType());\n            if (format !\u003d null) {\n                switch (format.getShape()) {\n                case STRING:\n                    return ToStringSerializer.instance;\n                default:\n                }\n            }\n            return this;\n        }",
    "begin_line": 82,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortSerializer.ShortSerializer#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer()",
    "snippet": "public ShortSerializer() {\n            super(Short.class, JsonParser.NumberType.INT, \"number\");\n        }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortSerializer.serialize#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Short) value).shortValue());\n        }",
    "begin_line": 112,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.IntegerSerializer#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntegerSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public IntegerSerializer(Class\u003c?\u003e type) {\n            super(type, JsonParser.NumberType.INT, \"integer\");\n        }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.serialize#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Integer) value).intValue());\n        }",
    "begin_line": 135,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.serializeWithType#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n        public void serializeWithType(Object value, JsonGenerator gen,\n                SerializerProvider provider, TypeSerializer typeSer)\n                throws IOException {\n            // no type info, just regular serialization\n            serialize(value, gen, provider);\n        }",
    "begin_line": 142,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntLikeSerializer.IntLikeSerializer#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer()",
    "snippet": "public IntLikeSerializer() {\n            super(Number.class, JsonParser.NumberType.INT, \"integer\");\n        }",
    "begin_line": 159,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntLikeSerializer.serialize#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Number) value).intValue());\n        }",
    "begin_line": 164,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongSerializer.LongSerializer#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public LongSerializer(Class\u003c?\u003e cls) {\n            super(cls, JsonParser.NumberType.LONG, \"number\");\n        }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongSerializer.serialize#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Long) value).longValue());\n        }",
    "begin_line": 177,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatSerializer.FloatSerializer#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer()",
    "snippet": "public FloatSerializer() {\n            super(Float.class, JsonParser.NumberType.FLOAT, \"number\");\n        }",
    "begin_line": 187,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatSerializer.serialize#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Float) value).floatValue());\n        }",
    "begin_line": 192,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.DoubleSerializer#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public DoubleSerializer(Class\u003c?\u003e cls) {\n            super(cls, JsonParser.NumberType.DOUBLE, \"number\");\n        }",
    "begin_line": 207,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.serialize#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(Object value, JsonGenerator gen,\n                SerializerProvider provider) throws IOException {\n            gen.writeNumber(((Double) value).doubleValue());\n        }",
    "begin_line": 212,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.serializeWithType#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n        public void serializeWithType(Object value, JsonGenerator gen,\n                SerializerProvider provider, TypeSerializer typeSer)\n                throws IOException {\n            // no type info, just regular serialization\n            serialize(value, gen, provider);\n        }",
    "begin_line": 219,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdJdkSerializers.all#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.all()",
    "snippet": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all()\n    {\n        HashMap\u003cClass\u003c?\u003e,Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e,Object\u003e();\n\n        // First things that \u0027toString()\u0027 can handle\n        sers.put(java.net.URL.class, new ToStringSerializer(java.net.URL.class));\n        sers.put(java.net.URI.class, new ToStringSerializer(java.net.URI.class));\n\n        sers.put(Currency.class, new ToStringSerializer(Currency.class));\n        sers.put(UUID.class, new UUIDSerializer());\n        sers.put(java.util.regex.Pattern.class, new ToStringSerializer(java.util.regex.Pattern.class));\n        sers.put(Locale.class, new ToStringSerializer(Locale.class));\n\n        // then atomic types (note: AtomicReference defined elsewhere)\n        sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n        sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n        sers.put(AtomicLong.class, AtomicLongSerializer.class);\n\n        // then other types that need specialized serializers\n        sers.put(File.class, FileSerializer.class);\n        sers.put(Class.class, ClassSerializer.class);\n\n        // And then some stranger types... not 100% they are needed but:\n        sers.put(Void.class, NullSerializer.instance);\n        sers.put(Void.TYPE, NullSerializer.instance);\n\n        // 09-Jan-2015, tatu: As per [databind#1073], let\u0027s try to guard against possibility\n        //   of some environments missing `java.sql.` types\n        try {\n            // note: timestamps are very similar to java.util.Date, thus serialized as such\n            sers.put(java.sql.Timestamp.class, DateSerializer.instance);\n    \n            // leave some of less commonly used ones as lazy, no point in proactive construction\n            sers.put(java.sql.Date.class, SqlDateSerializer.class);\n            sers.put(java.sql.Time.class, SqlTimeSerializer.class);\n        } catch (NoClassDefFoundError e) {\n            // nothing much we can do here; could log, but probably not useful for now.\n        }\n        \n        return sers.entrySet();\n    }",
    "begin_line": 25,
    "end_line": 65,
    "comment": "/** \n * Method called by  {@link BasicSerializerFactory} to accessall serializers this class provides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.AtomicBooleanSerializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicBooleanSerializer()",
    "snippet": "public AtomicBooleanSerializer() { super(AtomicBoolean.class, false); }",
    "begin_line": 76,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.serialize#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicBoolean, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(AtomicBoolean value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {\n            gen.writeBoolean(value.get());\n        }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.getSchema#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n            return createSchemaNode(\"boolean\", true);\n        }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.acceptJsonFormatVisitor#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n            visitor.expectBooleanFormat(typeHint);\n        }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.AtomicIntegerSerializer#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicIntegerSerializer()",
    "snippet": "public AtomicIntegerSerializer() { super(AtomicInteger.class, false); }",
    "begin_line": 97,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.serialize#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicInteger, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(AtomicInteger value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {\n            gen.writeNumber(value.get());\n        }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.getSchema#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n            return createSchemaNode(\"integer\", true);\n        }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.acceptJsonFormatVisitor#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n        {\n            visitIntFormat(visitor, typeHint, JsonParser.NumberType.INT);\n        }",
    "begin_line": 110,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.AtomicLongSerializer#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicLongSerializer()",
    "snippet": "public AtomicLongSerializer() { super(AtomicLong.class, false); }",
    "begin_line": 119,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.serialize#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicLong, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n        public void serialize(AtomicLong value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {\n            gen.writeNumber(value.get());\n        }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.getSchema#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n            return createSchemaNode(\"integer\", true);\n        }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.acceptJsonFormatVisitor#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n            throws JsonMappingException\n        {\n            visitIntFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        }",
    "begin_line": 132,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.StdScalarSerializer#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class\u003cT\u003e)",
    "snippet": "protected StdScalarSerializer(Class\u003cT\u003e t) {\n        super(t);\n    }",
    "begin_line": 18,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.StdScalarSerializer#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected StdScalarSerializer(Class\u003c?\u003e t, boolean dummy) {\n        super((Class\u003cT\u003e) t);\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "/** \n * Alternate constructor that is (alas!) needed to work around kinks of generic type handling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.serializeWithType#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.serializeWithType(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public void serializeWithType(T value, JsonGenerator g, SerializerProvider provider,\n            TypeSerializer typeSer) throws IOException\n    {\n        typeSer.writeTypePrefixForScalar(value, g);\n        serialize(value, g, provider);\n        typeSer.writeTypeSuffixForScalar(value, g);\n    }",
    "begin_line": 39,
    "end_line": 45,
    "comment": "/** \n * Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix. This should work for most cases; some sub-classes may want to change this behavior.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.getSchema#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n        throws JsonMappingException\n    {\n        return createSchemaNode(\"string\", true);\n    }",
    "begin_line": 48,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.acceptJsonFormatVisitor#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n        throws JsonMappingException\n    {\n        // 13-Sep-2013, tatu: Let\u0027s assume it\u0027s usually a String, right?\n        visitStringFormat(visitor, typeHint);\n    }",
    "begin_line": 55,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class\u003cT\u003e)",
    "snippet": "protected StdSerializer(Class\u003cT\u003e t) {\n        _handledType \u003d t;\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected StdSerializer(JavaType type) {\n        _handledType \u003d (Class\u003cT\u003e) type.getRawClass();\n    }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected StdSerializer(Class\u003c?\u003e t, boolean dummy) {\n        _handledType \u003d (Class\u003cT\u003e) t;\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Alternate constructor that is (alas!) needed to work around kinks of generic type handling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.ser.std.StdSerializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected StdSerializer(StdSerializer\u003c?\u003e src) {\n        _handledType \u003d (Class\u003cT\u003e) src._handledType;\n    }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.handledType#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()",
    "snippet": "@Override\n    public Class\u003cT\u003e handledType() { return _handledType; }",
    "begin_line": 91,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.serialize#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider)\n        throws IOException;",
    "begin_line": 100,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.acceptJsonFormatVisitor#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n        throws JsonMappingException\n    {\n        visitor.expectAnyFormat(typeHint);\n    }",
    "begin_line": 114,
    "end_line": 118,
    "comment": "/** \n * Default implementation specifies no format. This behavior is usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.getSchema#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException\n    {\n        return createSchemaNode(\"string\");\n    }",
    "begin_line": 125,
    "end_line": 128,
    "comment": "/** \n * Default implementation simply claims type is \"string\"; usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.getSchema#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type, boolean)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)\n        throws JsonMappingException\n    {\n        ObjectNode schema \u003d (ObjectNode) getSchema(provider, typeHint);\n        if (!isOptional) {\n            schema.put(\"required\", !isOptional);\n        }\n        return schema;\n    }",
    "begin_line": 135,
    "end_line": 143,
    "comment": "/** \n * Default implementation simply claims type is \"string\"; usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.createSchemaNode#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)",
    "snippet": "protected ObjectNode createSchemaNode(String type)\n    {\n        ObjectNode schema \u003d JsonNodeFactory.instance.objectNode();\n        schema.put(\"type\", type);\n        return schema;\n    }",
    "begin_line": 151,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.createSchemaNode#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String, boolean)",
    "snippet": "protected ObjectNode createSchemaNode(String type, boolean isOptional)\n    {\n        ObjectNode schema \u003d createSchemaNode(type);\n        if (!isOptional) {\n            schema.put(\"required\", !isOptional);\n        }\n        return schema;\n    }",
    "begin_line": 158,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitStringFormat#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void visitStringFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n            throws JsonMappingException {\n        /*JsonStringFormatVisitor v2 \u003d*/ visitor.expectStringFormat(typeHint);\n    }",
    "begin_line": 173,
    "end_line": 176,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitStringFormat#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)",
    "snippet": "protected void visitStringFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            JsonValueFormat format)\n        throws JsonMappingException\n    {\n        JsonStringFormatVisitor v2 \u003d visitor.expectStringFormat(typeHint);\n        if (v2 !\u003d null) {\n            v2.format(format);\n        }\n    }",
    "begin_line": 185,
    "end_line": 193,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String, but that there is a more refined logical type\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitIntFormat#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType)",
    "snippet": "protected void visitIntFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            NumberType numberType)\n        throws JsonMappingException\n    {\n        JsonIntegerFormatVisitor v2 \u003d visitor.expectIntegerFormat(typeHint);\n        if (_neitherNull(v2, numberType)) {\n            v2.numberType(numberType);\n        }\n    }",
    "begin_line": 201,
    "end_line": 209,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitIntFormat#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)",
    "snippet": "protected void visitIntFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            NumberType numberType, JsonValueFormat format)\n        throws JsonMappingException\n    {\n        JsonIntegerFormatVisitor v2 \u003d visitor.expectIntegerFormat(typeHint);\n        if (v2 !\u003d null) {\n            if (numberType !\u003d null) {\n                v2.numberType(numberType);\n            }\n            if (format !\u003d null) {\n                v2.format(format);\n            }\n        }\n    }",
    "begin_line": 218,
    "end_line": 231,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number, but that there is also a further format restriction involved.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitFloatFormat#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType)",
    "snippet": "protected void visitFloatFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            NumberType numberType)\n        throws JsonMappingException\n    {\n        JsonNumberFormatVisitor v2 \u003d visitor.expectNumberFormat(typeHint);\n        if (v2 !\u003d null) {\n            v2.numberType(numberType);\n        }\n    }",
    "begin_line": 239,
    "end_line": 247,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is a floating-point JSON number.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitArrayFormat#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void visitArrayFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            JsonSerializer\u003c?\u003e itemSerializer, JavaType itemType)\n        throws JsonMappingException\n    {\n        JsonArrayFormatVisitor v2 \u003d visitor.expectArrayFormat(typeHint);\n        if (_neitherNull(v2, itemSerializer)) {\n            v2.itemsFormat(itemSerializer, itemType);\n        }\n    }",
    "begin_line": 252,
    "end_line": 260,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitArrayFormat#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)",
    "snippet": "protected void visitArrayFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n            JsonFormatTypes itemType)\n        throws JsonMappingException\n    {\n        JsonArrayFormatVisitor v2 \u003d visitor.expectArrayFormat(typeHint);\n        if (v2 !\u003d null) {\n            v2.itemsFormat(itemType);\n        }\n    }",
    "begin_line": 265,
    "end_line": 273,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.wrapAndThrow#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String)",
    "snippet": "public void wrapAndThrow(SerializerProvider provider,\n            Throwable t, Object bean, String fieldName)\n        throws IOException\n    {\n        /* 05-Mar-2009, tatu: But one nasty edge is when we get\n         *   StackOverflow: usually due to infinite loop. But that\n         *   usually gets hidden within an InvocationTargetException...\n         */\n        while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n            t \u003d t.getCause();\n        }\n        // Errors and \"plain\" to be passed as is\n        ClassUtil.throwIfError(t);\n        // Ditto for IOExceptions... except for mapping exceptions!\n        boolean wrap \u003d (provider \u003d\u003d null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS);\n        if (t instanceof IOException) {\n            if (!wrap || !(t instanceof JsonMappingException)) {\n                throw (IOException) t;\n            }\n        } else if (!wrap) {\n            ClassUtil.throwIfRTE(t);\n        }\n        // Need to add reference information\n        throw JsonMappingException.wrapWithPath(t, bean, fieldName);\n    }",
    "begin_line": 293,
    "end_line": 317,
    "comment": "/** \n * Method that will modify caught exception (passed in as argument) as necessary to include reference information, and to ensure it is a subtype of  {@link IOException}, or an unchecked exception. \u003cp\u003e Rules for wrapping and unwrapping are bit complicated; essentially: \u003cul\u003e \u003cli\u003eErrors are to be passed as is (if uncovered via unwrapping) \u003cli\u003e\"Plain\" IOExceptions (ones that are not of type {@link JsonMappingException} are to be passed as is\u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.wrapAndThrow#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, int)",
    "snippet": "public void wrapAndThrow(SerializerProvider provider,\n            Throwable t, Object bean, int index)\n        throws IOException\n    {\n        while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n            t \u003d t.getCause();\n        }\n        // Errors are to be passed as is\n        ClassUtil.throwIfError(t);\n        // Ditto for IOExceptions... except for mapping exceptions!\n        boolean wrap \u003d (provider \u003d\u003d null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS);\n        if (t instanceof IOException) {\n            if (!wrap || !(t instanceof JsonMappingException)) {\n                throw (IOException) t;\n            }\n        } else if (!wrap) {\n            ClassUtil.throwIfRTE(t);\n        }\n        // Need to add reference information\n        throw JsonMappingException.wrapWithPath(t, bean, index);\n    }",
    "begin_line": 319,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findContextualConvertingSerializer#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e findContextualConvertingSerializer(SerializerProvider provider,\n            BeanProperty property, JsonSerializer\u003c?\u003e existingSerializer)\n        throws JsonMappingException\n    {\n        // 08-Dec-2016, tatu: to fix [databind#357], need to prevent recursive calls for\n        //     same property\n        @SuppressWarnings(\"unchecked\")\n        Map\u003cObject,Object\u003e conversions \u003d (Map\u003cObject,Object\u003e) provider.getAttribute(KEY_CONTENT_CONVERTER_LOCK);\n        if (conversions !\u003d null) {\n            Object lock \u003d conversions.get(property);\n            if (lock !\u003d null) {\n                return existingSerializer;\n            }\n        } else {\n            conversions \u003d new IdentityHashMap\u003c\u003e();\n            provider.setAttribute(KEY_CONTENT_CONVERTER_LOCK, conversions);\n        }\n        conversions.put(property, Boolean.TRUE);\n        try {\n            JsonSerializer\u003c?\u003e ser \u003d findConvertingContentSerializer(provider, property, existingSerializer);\n            if (ser !\u003d null) {\n                return provider.handleSecondaryContextualization(ser, property);\n            }\n        } finally {\n            conversions.remove(property);\n        }\n        return existingSerializer;\n    }",
    "begin_line": 357,
    "end_line": 384,
    "comment": "/** \n * Helper method that can be used to see if specified property has annotation indicating that a converter is to be used for contained values (contents of structured types; array/List/Map values)\n * @param existingSerializer (optional) configured contentserializer if one already exists.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findConvertingContentSerializer#390",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "@Deprecated\n    protected JsonSerializer\u003c?\u003e findConvertingContentSerializer(SerializerProvider provider,\n            BeanProperty prop, JsonSerializer\u003c?\u003e existingSerializer)\n        throws JsonMappingException\n    {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        if (_neitherNull(intr, prop)) {\n            AnnotatedMember m \u003d prop.getMember();\n            if (m !\u003d null) {\n                Object convDef \u003d intr.findSerializationContentConverter(m);\n                if (convDef !\u003d null) {\n                    Converter\u003cObject,Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n                    JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n                    // [databind#731]: Should skip if nominally java.lang.Object\n                    if ((existingSerializer \u003d\u003d null) \u0026\u0026 !delegateType.isJavaLangObject()) {\n                        existingSerializer \u003d provider.findValueSerializer(delegateType);\n                    }\n                    return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n                }\n            }\n        }\n        return existingSerializer;\n    }",
    "begin_line": 390,
    "end_line": 411,
    "comment": "/** \n * @deprecated Since 2.9 use {link {@link #findContextualConvertingSerializer} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findPropertyFilter#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object)",
    "snippet": "protected PropertyFilter findPropertyFilter(SerializerProvider provider,\n            Object filterId, Object valueToFilter)\n        throws JsonMappingException\n    {\n        FilterProvider filters \u003d provider.getFilterProvider();\n        // Not ok to miss the provider, if a filter is declared to be needed.\n        if (filters \u003d\u003d null) {\n            provider.reportBadDefinition(handledType(),\n                    \"Can not resolve PropertyFilter with id \u0027\"+filterId+\"\u0027; no FilterProvider configured\");\n        }\n        // But whether unknown ids are ok just depends on filter provider; if we get null that\u0027s fine\n        return filters.findPropertyFilter(filterId, valueToFilter);\n    }",
    "begin_line": 419,
    "end_line": 431,
    "comment": "/** \n * Helper method used to locate filter that is needed, based on filter id this serializer was constructed with.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findFormatOverrides#442",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonFormat.Value findFormatOverrides(SerializerProvider provider,\n            BeanProperty prop, Class\u003c?\u003e typeForDefaults)\n    {\n        if (prop !\u003d null) {\n            return prop.findPropertyFormat(provider.getConfig(), typeForDefaults);\n        }\n        // even without property or AnnotationIntrospector, may have type-specific defaults\n        return provider.getDefaultPropertyFormat(typeForDefaults);\n    }",
    "begin_line": 442,
    "end_line": 450,
    "comment": "/** \n * Helper method that may be used to find if this deserializer has specific {@link JsonFormat} settings, either via property, or through type-specificdefaulting.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findFormatFeature#461",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e, JsonFormat.Feature)",
    "snippet": "protected Boolean findFormatFeature(SerializerProvider provider,\n            BeanProperty prop, Class\u003c?\u003e typeForDefaults, JsonFormat.Feature feat)\n    {\n        JsonFormat.Value format \u003d findFormatOverrides(provider, prop, typeForDefaults);\n        if (format !\u003d null) {\n            return format.getFeature(feat);\n        }\n        return null;\n    }",
    "begin_line": 461,
    "end_line": 469,
    "comment": "/** \n * Convenience method that uses  {@link #findFormatOverrides} to find possibledefaults and/of overrides, and then calls \u003ccode\u003eJsonFormat.Value.getFeature(...)\u003c/code\u003e to find whether that feature has been specifically marked as enabled or disabled.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findIncludeOverrides#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonInclude.Value findIncludeOverrides(SerializerProvider provider,\n            BeanProperty prop, Class\u003c?\u003e typeForDefaults)\n    {\n        if (prop !\u003d null) {\n            return prop.findPropertyInclusion(provider.getConfig(), typeForDefaults);\n        }\n        // even without property or AnnotationIntrospector, may have type-specific defaults\n        return provider.getDefaultPropertyInclusion(typeForDefaults);\n    }",
    "begin_line": 474,
    "end_line": 482,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findAnnotatedContentSerializer#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "protected JsonSerializer\u003c?\u003e findAnnotatedContentSerializer(SerializerProvider serializers,\n            BeanProperty property)\n        throws JsonMappingException\n    {\n        if (property !\u003d null) {\n            // First: if we have a property, may have property-annotation overrides\n            AnnotatedMember m \u003d property.getMember();\n            final AnnotationIntrospector intr \u003d serializers.getAnnotationIntrospector();\n            if (m !\u003d null) {\n                Object serDef \u003d intr.findContentSerializer(m);\n                if (serDef !\u003d null) {\n                    return serializers.serializerInstance(m, serDef);\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 489,
    "end_line": 505,
    "comment": "/** \n * Convenience method for finding out possibly configured content value serializer.\n * @since 2.7.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.isDefaultSerializer#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected boolean isDefaultSerializer(JsonSerializer\u003c?\u003e serializer) {\n        return ClassUtil.isJacksonStdImpl(serializer);\n    }",
    "begin_line": 519,
    "end_line": 521,
    "comment": "/** \n * Method that can be called to determine if given serializer is the default serializer Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on serializer class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer._neitherNull#526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object, java.lang.Object)",
    "snippet": "protected final static boolean _neitherNull(Object a, Object b) {\n        return (a !\u003d null) \u0026\u0026 (b !\u003d null);\n    }",
    "begin_line": 526,
    "end_line": 528,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer._nonEmpty#533",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection\u003c?\u003e)",
    "snippet": "protected final static boolean _nonEmpty(Collection\u003c?\u003e c) {\n        return (c !\u003d null) \u0026\u0026 !c.isEmpty();\n    }",
    "begin_line": 533,
    "end_line": 535,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.StringSerializer#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()",
    "snippet": "public StringSerializer() { super(String.class, false); }",
    "begin_line": 31,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.isEmpty#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override\n    public boolean isEmpty(SerializerProvider prov, Object value) {\n        String str \u003d (String) value;\n        return str.length() \u003d\u003d 0;\n    }",
    "begin_line": 34,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.serialize#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        gen.writeString((String) value);\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.serializeWithType#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public final void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider,\n            TypeSerializer typeSer) throws IOException\n    {\n        // no type info, just regular serialization\n        gen.writeString((String) value);\n    }",
    "begin_line": 45,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.getSchema#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n        return createSchemaNode(\"string\", true);\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.acceptJsonFormatVisitor#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        visitStringFormat(visitor, typeHint);\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.ToStringSerializer#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()",
    "snippet": "public ToStringSerializer() { super(Object.class); }",
    "begin_line": 38,
    "end_line": 38,
    "comment": "/** \n * \u003cp\u003e Note: usually you should NOT create new instances, but instead use {@link #instance} which is stateless and fully thread-safe. However,there are cases where constructor is needed; for example, when using explicit serializer annotations like {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.ToStringSerializer#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public ToStringSerializer(Class\u003c?\u003e handledType) {\n        super(handledType, false);\n    }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "/** \n * Sometimes it may actually make sense to retain actual handled type, so...\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.isEmpty#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override\n    public boolean isEmpty(SerializerProvider prov, Object value) {\n        return value.toString().isEmpty();\n    }",
    "begin_line": 50,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.serialize#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider)\n        throws IOException\n    {\n        gen.writeString(value.toString());\n    }",
    "begin_line": 55,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.serializeWithType#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider,\n            TypeSerializer typeSer)\n        throws IOException\n    {\n        typeSer.writeTypePrefixForScalar(value, gen);\n        serialize(value, gen, provider);\n        typeSer.writeTypeSuffixForScalar(value, gen);\n    }",
    "begin_line": 73,
    "end_line": 80,
    "comment": "/** \n * Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix. This should work for most cases; some sub-classes may want to change this behavior.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.getSchema#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return createSchemaNode(\"string\", true);\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.acceptJsonFormatVisitor#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        visitStringFormat(visitor, typeHint);\n    }",
    "begin_line": 88,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.UUIDSerializer#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.UUIDSerializer()",
    "snippet": "public UUIDSerializer() { super(UUID.class); }",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.isEmpty#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.util.UUID)",
    "snippet": "@Override\n    public boolean isEmpty(SerializerProvider prov, UUID value)\n    {\n        // Null UUID is empty, so...\n        if (value.getLeastSignificantBits() \u003d\u003d 0L\n                \u0026\u0026 value.getMostSignificantBits() \u003d\u003d 0L) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 26,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.serialize#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.serialize(java.util.UUID, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(UUID value, JsonGenerator gen, SerializerProvider provider)\n        throws IOException\n    {\n        // First: perhaps we could serialize it as raw binary data?\n        if (gen.canWriteBinaryNatively()) {\n            /* 07-Dec-2013, tatu: One nasty case; that of TokenBuffer. While it can\n             *   technically retain binary data, we do not want to do use binary\n             *   with it, as that results in UUIDs getting converted to Base64 for\n             *   most conversions.\n             */\n            if (!(gen instanceof TokenBuffer)) {\n                gen.writeBinary(_asBytes(value));\n                return;\n            }\n        }\n        \n        // UUID.toString() works ok functionally, but we can make it go much faster\n        // (by 4x with micro-benchmark)\n\n        final char[] ch \u003d new char[36];\n        final long msb \u003d value.getMostSignificantBits();\n        _appendInt((int) (msb \u003e\u003e 32), ch, 0);\n        ch[8] \u003d \u0027-\u0027;\n        int i \u003d (int) msb;\n        _appendShort(i \u003e\u003e\u003e 16, ch, 9);\n        ch[13] \u003d \u0027-\u0027;\n        _appendShort(i, ch, 14);\n        ch[18] \u003d \u0027-\u0027;\n\n        final long lsb \u003d value.getLeastSignificantBits();\n        _appendShort((int) (lsb \u003e\u003e\u003e 48), ch, 19);\n        ch[23] \u003d \u0027-\u0027;\n        _appendShort((int) (lsb \u003e\u003e\u003e 32), ch, 24);\n        _appendInt((int) lsb, ch, 28);\n\n        gen.writeString(ch, 0, 36);\n    }",
    "begin_line": 37,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendInt#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendInt(int, char[], int)",
    "snippet": "private static void _appendInt(int bits, char[] ch, int offset)\n    {\n        _appendShort(bits \u003e\u003e 16, ch, offset);\n        _appendShort(bits, ch, offset+4);\n    }",
    "begin_line": 75,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendShort#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendShort(int, char[], int)",
    "snippet": "private static void _appendShort(int bits, char[] ch, int offset)\n    {\n        ch[offset] \u003d HEX_CHARS[(bits \u003e\u003e 12) \u0026 0xF];\n        ch[++offset] \u003d HEX_CHARS[(bits \u003e\u003e 8) \u0026 0xF];\n        ch[++offset] \u003d HEX_CHARS[(bits \u003e\u003e 4) \u0026 0xF];\n        ch[++offset] \u003d HEX_CHARS[bits  \u0026 0xF];\n\n    }",
    "begin_line": 81,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._asBytes#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._asBytes(java.util.UUID)",
    "snippet": "private final static byte[] _asBytes(UUID uuid)\n    {\n        byte[] buffer \u003d new byte[16];\n        long hi \u003d uuid.getMostSignificantBits();\n        long lo \u003d uuid.getLeastSignificantBits();\n        _appendInt((int) (hi \u003e\u003e 32), buffer, 0);\n        _appendInt((int) hi, buffer, 4);\n        _appendInt((int) (lo \u003e\u003e 32), buffer, 8);\n        _appendInt((int) lo, buffer, 12);\n        return buffer;\n    }",
    "begin_line": 90,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendInt#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendInt(int, byte[], int)",
    "snippet": "private final static void _appendInt(int value, byte[] buffer, int offset)\n    {\n        buffer[offset] \u003d (byte) (value \u003e\u003e 24);\n        buffer[++offset] \u003d (byte) (value \u003e\u003e 16);\n        buffer[++offset] \u003d (byte) (value \u003e\u003e 8);\n        buffer[++offset] \u003d (byte) value;\n    }",
    "begin_line": 102,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack(Class\u003c?\u003e rootType) {\n        this(null, rootType);\n    }",
    "begin_line": 20,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e)",
    "snippet": "private ClassStack(ClassStack parent, Class\u003c?\u003e curr) {\n        _parent \u003d parent;\n        _current \u003d curr;\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.child#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.child(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack child(Class\u003c?\u003e cls) {\n        return new ClassStack(this, cls);\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * @return New stack frame, if addition is ok; null if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.addSelfReference#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.addSelfReference(com.fasterxml.jackson.databind.type.ResolvedRecursiveType)",
    "snippet": "public void addSelfReference(ResolvedRecursiveType ref)\n    {\n        if (_selfRefs \u003d\u003d null) {\n            _selfRefs \u003d new ArrayList\u003cResolvedRecursiveType\u003e();\n        }\n        _selfRefs.add(ref);\n    }",
    "begin_line": 40,
    "end_line": 46,
    "comment": "/** \n * Method called to indicate that there is a self-reference from deeper down in stack pointing into type this stack frame represents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.resolveSelfReferences#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.resolveSelfReferences(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public void resolveSelfReferences(JavaType resolved)\n    {\n        if (_selfRefs !\u003d null) {\n            for (ResolvedRecursiveType ref : _selfRefs) {\n                ref.setReference(resolved);\n            }\n        }\n    }",
    "begin_line": 53,
    "end_line": 60,
    "comment": "/** \n * Method called when type that this stack frame represents is fully resolved, allowing self-references to be completed (if there are any)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.find#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.find(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack find(Class\u003c?\u003e cls)\n    {\n        if (_current \u003d\u003d cls) return this;\n        for (ClassStack curr \u003d _parent; curr !\u003d null; curr \u003d curr._parent) {\n            if (curr._current \u003d\u003d cls) {\n                return curr;\n            }\n        }\n        return null;\n    }",
    "begin_line": 62,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.toString#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.toString()",
    "snippet": "@Override\n    public String toString() {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\"[ClassStack (self-refs: \")\n            .append((_selfRefs \u003d\u003d null) ? \"0\" : String.valueOf(_selfRefs.size()))\n            .append(\u0027)\u0027)\n                    ;\n        for (ClassStack curr \u003d this; curr !\u003d null; curr \u003d curr._parent) {\n            sb.append(\u0027 \u0027).append(curr._current.getName());\n        }\n        sb.append(\u0027]\u0027);\n        return sb.toString();\n    }",
    "begin_line": 74,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls) {\n        this(cls, TypeBindings.emptyBindings(), null, null);\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Constructor only used by core Jackson databind functionality; should never be called by application code. \u003cp\u003e As with other direct construction that by-passes  {@link TypeFactory}, no introspection occurs with respect to super-types; caller must be aware of consequences if using this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts) {\n        this(cls, bindings, superClass, superInts, null, null, false);\n    }",
    "begin_line": 36,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected SimpleType(TypeBase base) {\n        super(base);\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "/** \n * Simple copy-constructor, usually used when upgrading/refining a simple type into more specialized type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(cls, bindings, superClass, superInts,\n                0, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 51,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, int extraHash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(cls, bindings, superClass, superInts, \n                extraHash, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 64,
    "end_line": 70,
    "comment": "/** \n * Pass-through constructor used by  {@link ReferenceType}.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.constructUnsafe#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.constructUnsafe(java.lang.Class\u003c?\u003e)",
    "snippet": "public static SimpleType constructUnsafe(Class\u003c?\u003e raw) {\n        return new SimpleType(raw, null,\n                // 18-Oct-2015, tatu: Should be ok to omit possible super-types, right?\n                null, null, null, null, false);\n    }",
    "begin_line": 81,
    "end_line": 85,
    "comment": "/** \n * Method used by core Jackson classes: NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. \u003cp\u003e NOTE: public only because it is called by \u003ccode\u003eObjectMapper\u003c/code\u003e which is not in same package\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.construct#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.construct(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public static SimpleType construct(Class\u003c?\u003e cls)\n    {\n        /* Let\u0027s add sanity checks, just to ensure no\n         * Map/Collection entries are constructed\n         */\n        if (Map.class.isAssignableFrom(cls)) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\");\n        }\n        if (Collection.class.isAssignableFrom(cls)) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\");\n        }\n        // ... and while we are at it, not array types either\n        if (cls.isArray()) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\");\n        }\n        TypeBindings b \u003d TypeBindings.emptyBindings();\n        return new SimpleType(cls, b,\n                _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);\n    }",
    "begin_line": 101,
    "end_line": 119,
    "comment": "/** \n * Method that should NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. Instead, please use  {@link TypeFactory}\u0027s \u003ccode\u003econstructType\u003c/code\u003e methods which handle introspection appropriately. \u003cp\u003e Note that prior to 2.7, method usage was not limited and would typically have worked acceptably: the problem comes from inability to resolve super-type information, for which  {@link TypeFactory} is needed.\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._narrow#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    @Deprecated\n    protected JavaType _narrow(Class\u003c?\u003e subclass)\n    {\n        if (_class \u003d\u003d subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.9\n        if (!_class.isAssignableFrom(subclass)) {\n            /*\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n                    */\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // Otherwise, stitch together the hierarchy. First, super-class\n        Class\u003c?\u003e next \u003d subclass.getSuperclass();\n        if (next \u003d\u003d _class) { // straight up parent class? Great.\n            return new SimpleType(subclass, _bindings, this,\n                    _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n        }\n        if ((next !\u003d null) \u0026\u0026 _class.isAssignableFrom(next)) {\n            JavaType superb \u003d _narrow(next);\n            return new SimpleType(subclass, _bindings, superb,\n                    null, _valueHandler, _typeHandler, _asStatic);\n        }\n        // if not found, try a super-interface\n        Class\u003c?\u003e[] nextI \u003d subclass.getInterfaces();\n        for (Class\u003c?\u003e iface : nextI) {\n            if (iface \u003d\u003d _class) { // directly implemented\n                return new SimpleType(subclass, _bindings, null,\n                        new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic);\n            }\n            if (_class.isAssignableFrom(iface)) { // indirect, so recurse\n                JavaType superb \u003d _narrow(iface);\n                return new SimpleType(subclass, _bindings, null,\n                        new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic);\n            }\n        }\n        // should not get here but...\n        throw new IllegalArgumentException(\"Internal error: Can not resolve sub-type for Class \"+subclass.getName()+\" to \"\n                +_class.getName());\n    }",
    "begin_line": 123,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentType#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\");\n    }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withTypeHandler#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public SimpleType withTypeHandler(Object h) {\n        if (_typeHandler \u003d\u003d h) {\n            return this;\n        }\n        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);\n    }",
    "begin_line": 175,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentTypeHandler#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public JavaType withContentTypeHandler(Object h) {\n        // no content type, so:\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\");\n    }",
    "begin_line": 183,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withValueHandler#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public SimpleType withValueHandler(Object h) {\n        if (h \u003d\u003d _valueHandler) {\n            return this;\n        }\n        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);\n    }",
    "begin_line": 189,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentValueHandler#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public  SimpleType withContentValueHandler(Object h) {\n        // no content type, so:\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\");\n    }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withStaticTyping#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withStaticTyping()",
    "snippet": "@Override\n    public SimpleType withStaticTyping() {\n        return _asStatic ? this : new SimpleType(_class, _bindings,\n                _superClass, _superInterfaces, _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 203,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.refine#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        // SimpleType means something not-specialized, so:\n        return null;\n    }",
    "begin_line": 209,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.buildCanonicalName#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.buildCanonicalName()",
    "snippet": "@Override\n    protected String buildCanonicalName()\n    {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(_class.getName());\n\n        final int count \u003d _bindings.size();\n        if (count \u003e 0) {\n            sb.append(\u0027\u003c\u0027);\n            for (int i \u003d 0; i \u003c count; ++i) {\n                JavaType t \u003d containedType(i);\n                if (i \u003e 0) {\n                    sb.append(\u0027,\u0027);\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append(\u0027\u003e\u0027);\n        }\n        return sb.toString();\n    }",
    "begin_line": 216,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.isContainerType#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.isContainerType()",
    "snippet": "@Override\n    public boolean isContainerType() { return false; }",
    "begin_line": 243,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.hasContentType#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.hasContentType()",
    "snippet": "@Override\n    public boolean hasContentType() { return false; }",
    "begin_line": 246,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getErasedSignature#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getGenericSignature#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n        _classSignature(_class, sb, false);\n\n        final int count \u003d _bindings.size();\n        if (count \u003e 0) {\n            sb.append(\u0027\u003c\u0027);\n            for (int i \u003d 0; i \u003c count; ++i) {\n                sb \u003d containedType(i).getGenericSignature(sb);\n            }\n            sb.append(\u0027\u003e\u0027);\n        }\n        sb.append(\u0027;\u0027);\n        return sb;\n    }",
    "begin_line": 254,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._buildSuperClass#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._buildSuperClass(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "private static JavaType _buildSuperClass(Class\u003c?\u003e superClass, TypeBindings b)\n    {\n        if (superClass \u003d\u003d null) {\n            return null;\n        }\n        if (superClass \u003d\u003d Object.class) {\n            return TypeFactory.unknownType();\n        }\n        JavaType superSuper \u003d _buildSuperClass(superClass.getSuperclass(), b);\n        return new SimpleType(superClass, b,\n                superSuper, null, null, null, false);\n    }",
    "begin_line": 282,
    "end_line": 293,
    "comment": "/** \n * Helper method we need to recursively build skeletal representations of superclasses.\n * @since 2.7 -- remove when not needed (2.8?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.toString#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.toString()",
    "snippet": "@Override\n    public String toString()\n    {\n        StringBuilder sb \u003d new StringBuilder(40);\n        sb.append(\"[simple type, class \").append(buildCanonicalName()).append(\u0027]\u0027);\n        return sb.toString();\n    }",
    "begin_line": 302,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.equals#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n\n        SimpleType other \u003d (SimpleType) o;\n\n        // Classes must be identical... \n        if (other._class !\u003d this._class) return false;\n\n        // And finally, generic bindings, if any\n        TypeBindings b1 \u003d _bindings;\n        TypeBindings b2 \u003d other._bindings;\n        return b1.equals(b2);\n    }",
    "begin_line": 310,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected TypeBase(Class\u003c?\u003e raw, TypeBindings bindings, JavaType superClass, JavaType[] superInts,\n            int hash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(raw, hash, valueHandler, typeHandler, asStatic);\n        _bindings \u003d (bindings \u003d\u003d null) ? NO_BINDINGS : bindings;\n        _superClass \u003d superClass;\n        _superInterfaces \u003d superInts;\n    }",
    "begin_line": 41,
    "end_line": 49,
    "comment": "/** \n * Main constructor to use by extending classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected TypeBase(TypeBase base) {\n        super(base);\n        _superClass \u003d base._superClass;\n        _superInterfaces \u003d base._superInterfaces;\n        _bindings \u003d base._bindings;\n    }",
    "begin_line": 56,
    "end_line": 61,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.toCanonical#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.toCanonical()",
    "snippet": "@Override\n    public String toCanonical()\n    {\n        String str \u003d _canonicalName;\n        if (str \u003d\u003d null) {\n            str \u003d buildCanonicalName();\n        }\n        return str;\n    }",
    "begin_line": 64,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.buildCanonicalName#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.buildCanonicalName()",
    "snippet": "protected String buildCanonicalName() {\n        return _class.getName();\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getGenericSignature#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 78,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getErasedSignature#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 81,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getBindings#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getBindings()",
    "snippet": "@Override\n    public TypeBindings getBindings() {\n        return _bindings;\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeCount#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeCount()",
    "snippet": "@Override\n    public int containedTypeCount() {\n        return _bindings.size();\n    }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedType#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedType(int)",
    "snippet": "@Override\n    public JavaType containedType(int index) {\n        return _bindings.getBoundType(index);\n    }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeName#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeName(int)",
    "snippet": "@Override\n    @Deprecated\n    public String containedTypeName(int index) {\n        return _bindings.getBoundName(index);\n    }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getSuperClass#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getSuperClass()",
    "snippet": "@Override\n    public JavaType getSuperClass() {\n        return _superClass;\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getInterfaces#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getInterfaces()",
    "snippet": "@Override\n    public List\u003cJavaType\u003e getInterfaces() {\n        if (_superInterfaces \u003d\u003d null) {\n            return Collections.emptyList();\n        }\n        switch (_superInterfaces.length) {\n        case 0:\n            return Collections.emptyList();\n        case 1:\n            return Collections.singletonList(_superInterfaces[0]);\n        }\n        return Arrays.asList(_superInterfaces);\n    }",
    "begin_line": 110,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findSuperType#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JavaType findSuperType(Class\u003c?\u003e rawTarget)\n    {\n        if (rawTarget \u003d\u003d _class) {\n            return this;\n        }\n        // Check super interfaces first:\n        if (rawTarget.isInterface() \u0026\u0026 (_superInterfaces !\u003d null)) {\n            for (int i \u003d 0, count \u003d _superInterfaces.length; i \u003c count; ++i) {\n                JavaType type \u003d _superInterfaces[i].findSuperType(rawTarget);\n                if (type !\u003d null) {\n                    return type;\n                }\n            }\n        }\n        // and if not found, super class and its supertypes\n        if (_superClass !\u003d null) {\n            JavaType type \u003d _superClass.findSuperType(rawTarget);\n            if (type !\u003d null) {\n                return type;\n            }\n        }\n        return null;\n    }",
    "begin_line": 124,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findTypeParameters#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public JavaType[] findTypeParameters(Class\u003c?\u003e expType)\n    {\n        JavaType match \u003d findSuperType(expType);\n        if (match \u003d\u003d null) {\n            return NO_TYPES;\n        }\n        return match.getBindings().typeParameterArray();\n    }",
    "begin_line": 149,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serializeWithType#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serializeWithType(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public void serializeWithType(JsonGenerator gen, SerializerProvider provider,\n            TypeSerializer typeSer)\n        throws IOException, JsonProcessingException\n    {\n        typeSer.writeTypePrefixForScalar(this, gen);\n        this.serialize(gen, provider);\n        typeSer.writeTypeSuffixForScalar(this, gen);\n    }",
    "begin_line": 165,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serialize#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serialize(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(JsonGenerator gen, SerializerProvider provider)\n            throws IOException, JsonProcessingException\n    {\n        gen.writeString(toCanonical());\n    }",
    "begin_line": 175,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._classSignature#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._classSignature(java.lang.Class\u003c?\u003e, java.lang.StringBuilder, boolean)",
    "snippet": "protected static StringBuilder _classSignature(Class\u003c?\u003e cls, StringBuilder sb,\n           boolean trailingSemicolon)\n    {\n        if (cls.isPrimitive()) {\n            if (cls \u003d\u003d Boolean.TYPE) {                \n                sb.append(\u0027Z\u0027);\n            } else if (cls \u003d\u003d Byte.TYPE) {\n                sb.append(\u0027B\u0027);\n            }\n            else if (cls \u003d\u003d Short.TYPE) {\n                sb.append(\u0027S\u0027);\n            }\n            else if (cls \u003d\u003d Character.TYPE) {\n                sb.append(\u0027C\u0027);\n            }\n            else if (cls \u003d\u003d Integer.TYPE) {\n                sb.append(\u0027I\u0027);\n            }\n            else if (cls \u003d\u003d Long.TYPE) {\n                sb.append(\u0027J\u0027);\n            }\n            else if (cls \u003d\u003d Float.TYPE) {\n                sb.append(\u0027F\u0027);\n            }\n            else if (cls \u003d\u003d Double.TYPE) {\n                sb.append(\u0027D\u0027);\n            }\n            else if (cls \u003d\u003d Void.TYPE) {\n                sb.append(\u0027V\u0027);\n            } else {\n                throw new IllegalStateException(\"Unrecognized primitive type: \"+cls.getName());\n            }\n        } else {\n            sb.append(\u0027L\u0027);\n            String name \u003d cls.getName();\n            for (int i \u003d 0, len \u003d name.length(); i \u003c len; ++i) {\n                char c \u003d name.charAt(i);\n                if (c \u003d\u003d \u0027.\u0027) c \u003d \u0027/\u0027;\n                sb.append(c);\n            }\n            if (trailingSemicolon) {\n                sb.append(\u0027;\u0027);\n            }\n        }\n        return sb;\n    }",
    "begin_line": 191,
    "end_line": 236,
    "comment": "/** \n * @param trailingSemicolon Whether to add trailing semicolon for non-primitive(reference) types or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._bogusSuperClass#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._bogusSuperClass(java.lang.Class\u003c?\u003e)",
    "snippet": "protected static JavaType _bogusSuperClass(Class\u003c?\u003e cls) {\n        Class\u003c?\u003e parent \u003d cls.getSuperclass();\n        if (parent \u003d\u003d null) {\n            return null;\n        }\n        return TypeFactory.unknownType();\n    }",
    "begin_line": 247,
    "end_line": 253,
    "comment": "/** \n * Internal helper method used to figure out nominal super-class for deprecated factory methods / constructors, where we are not given properly resolved supertype hierarchy. Will basically give `JavaType` for `java.lang.Object` for classes other than `java.lafgn.Object`; null for others.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.TypeBindings#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.TypeBindings(java.lang.String[], com.fasterxml.jackson.databind.JavaType[], java.lang.String[])",
    "snippet": "private TypeBindings(String[] names, JavaType[] types, String[] uvars)\n    {\n        _names \u003d (names \u003d\u003d null) ? NO_STRINGS : names;\n        _types \u003d (types \u003d\u003d null) ? NO_TYPES : types;\n        if (_names.length !\u003d _types.length) {\n            throw new IllegalArgumentException(\"Mismatching names (\"+_names.length+\"), types (\"+_types.length+\")\");\n        }\n        int h \u003d 1;\n        for (int i \u003d 0, len \u003d _types.length; i \u003c len; ++i) {\n            h +\u003d _types[i].hashCode();\n        }\n        _unboundVariables \u003d uvars;\n        _hashCode \u003d h;\n    }",
    "begin_line": 52,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.emptyBindings#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
    "snippet": "public static TypeBindings emptyBindings() {\n        return EMPTY;\n    }",
    "begin_line": 67,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.readResolve#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.readResolve()",
    "snippet": "protected Object readResolve() {\n        if ((_names \u003d\u003d null) || (_names.length \u003d\u003d 0)) {\n            return EMPTY;\n        }\n        return this;\n    }",
    "begin_line": 72,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, List\u003cJavaType\u003e typeList)\n    {\n        JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ?\n                NO_TYPES : typeList.toArray(new JavaType[typeList.size()]);\n        return create(erasedType, types);\n    }",
    "begin_line": 83,
    "end_line": 88,
    "comment": "/** \n * Factory method for constructing bindings for given class using specified type parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType[] types)\n    {\n        if (types \u003d\u003d null) {\n            types \u003d NO_TYPES;\n        } else switch (types.length) {\n        case 1:\n            return create(erasedType, types[0]);\n        case 2:\n            return create(erasedType, types[0], types[1]);\n        }\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        String[] names;\n        if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\n            names \u003d NO_STRINGS;\n        } else {\n            int len \u003d vars.length;\n            names \u003d new String[len];\n            for (int i \u003d 0; i \u003c len; ++i) {\n                names[i] \u003d vars[i].getName();\n            }\n        }\n        // Check here to give better error message\n        if (names.length !\u003d types.length) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                   +\" with \"+types.length+\" type parameter\"\n                   +((types.length \u003d\u003d 1) ? \"\" : \"s\")+\": class expects \"+names.length);\n        }\n        return new TypeBindings(names, types, null);\n    }",
    "begin_line": 90,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType typeArg1)\n    {\n        // 30-Oct-2015, tatu: Minor optimization for relatively common cases\n        TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor1(erasedType);\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen !\u003d 1) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 1 type parameter: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName() },\n                new JavaType[] { typeArg1 }, null);\n    }",
    "begin_line": 120,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType typeArg1, JavaType typeArg2)\n    {\n        // 30-Oct-2015, tatu: Minor optimization for relatively common cases\n        TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor2(erasedType);\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen !\u003d 2) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 2 type parameters: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() },\n                new JavaType[] { typeArg1, typeArg2 }, null);\n    }",
    "begin_line": 133,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType, JavaType typeArg1)\n    {\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen \u003d\u003d 0) {\n            return EMPTY;\n        }\n        if (varLen !\u003d 1) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 1 type parameter: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName() },\n                new JavaType[] { typeArg1 }, null);\n    }",
    "begin_line": 151,
    "end_line": 164,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType, JavaType[] types)\n    {\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\n            return EMPTY;\n        }\n        if (types \u003d\u003d null) {\n            types \u003d NO_TYPES;\n        }\n        int len \u003d vars.length;\n        String[] names \u003d new String[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            names[i] \u003d vars[i].getName();\n        }\n        // Check here to give better error message\n        if (names.length !\u003d types.length) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                   +\" with \"+types.length+\" type parameter\"\n                   +((types.length \u003d\u003d 1) ? \"\" : \"s\")+\": class expects \"+names.length);\n        }\n        return new TypeBindings(names, types, null);\n    }",
    "begin_line": 171,
    "end_line": 192,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.withUnboundVariable#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.withUnboundVariable(java.lang.String)",
    "snippet": "public TypeBindings withUnboundVariable(String name)\n    {\n        int len \u003d (_unboundVariables \u003d\u003d null) ? 0 : _unboundVariables.length;\n        String[] names \u003d  (len \u003d\u003d 0)\n                ? new String[1] : Arrays.copyOf(_unboundVariables, len+1);\n        names[len] \u003d name;\n        return new TypeBindings(_names, _types, names);\n    }",
    "begin_line": 199,
    "end_line": 206,
    "comment": "/** \n * Method for creating an instance that has same bindings as this object, plus an indicator for additional type variable that may be unbound within this context; this is needed to resolve recursive self-references.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.findBoundType#217",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.findBoundType(java.lang.String)",
    "snippet": "public JavaType findBoundType(String name)\n    {\n        for (int i \u003d 0, len \u003d _names.length; i \u003c len; ++i) {\n            if (name.equals(_names[i])) {\n                JavaType t \u003d _types[i];\n                if (t instanceof ResolvedRecursiveType) {\n                    ResolvedRecursiveType rrt \u003d (ResolvedRecursiveType) t;\n                    JavaType t2 \u003d rrt.getSelfReferencedType();\n                    if (t2 !\u003d null) {\n                        t \u003d t2;\n                    } else {\n                        /* 25-Feb-2016, tatu: Looks like a potential problem, but alas\n                         *   we have a test where this should NOT fail and things... seem\n                         *   to work. So be it.\n                         */\n/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter \u0027%s\u0027 (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n*/\n                    }\n                }\n                return t;\n            }\n        }\n        return null;\n    }",
    "begin_line": 217,
    "end_line": 243,
    "comment": "/** \n * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.isEmpty#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return (_types.length \u003d\u003d 0);\n    }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.size#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.size()",
    "snippet": "public int size() { \n        return _types.length;\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Returns number of bindings contained\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundName#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundName(int)",
    "snippet": "public String getBoundName(int index)\n    {\n        if (index \u003c 0 || index \u003e\u003d _names.length) {\n            return null;\n        }\n        return _names[index];\n    }",
    "begin_line": 256,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundType#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundType(int)",
    "snippet": "public JavaType getBoundType(int index)\n    {\n        if (index \u003c 0 || index \u003e\u003d _types.length) {\n            return null;\n        }\n        return _types[index];\n    }",
    "begin_line": 264,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getTypeParameters#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getTypeParameters()",
    "snippet": "public List\u003cJavaType\u003e getTypeParameters()\n    {\n        if (_types.length \u003d\u003d 0) {\n            return Collections.emptyList();\n        }\n        return Arrays.asList(_types);\n    }",
    "begin_line": 275,
    "end_line": 281,
    "comment": "/** \n * Accessor for getting bound types in declaration order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hasUnbound#286",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hasUnbound(java.lang.String)",
    "snippet": "public boolean hasUnbound(String name) {\n        if (_unboundVariables !\u003d null) {\n            for (int i \u003d _unboundVariables.length; --i \u003e\u003d 0; ) {\n                if (name.equals(_unboundVariables[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 286,
    "end_line": 295,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.asKey#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.asKey(java.lang.Class\u003c?\u003e)",
    "snippet": "public Object asKey(Class\u003c?\u003e rawBase) {\n        // safe to pass _types array without copy since it is not exposed via\n        // any access, nor modified by this class\n        return new AsKey(rawBase, _types, _hashCode);\n    }",
    "begin_line": 303,
    "end_line": 307,
    "comment": "/** \n * Factory method that will create an object that can be used as a key for caching purposes by  {@link TypeFactory}\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.toString#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override public String toString()\n    {\n        if (_types.length \u003d\u003d 0) {\n            return \"\u003c\u003e\";\n        }\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027\u003c\u0027);\n        for (int i \u003d 0, len \u003d _types.length; i \u003c len; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n//            sb \u003d _types[i].appendBriefDescription(sb);\n            String sig \u003d _types[i].getGenericSignature();\n            sb.append(sig);\n        }\n        sb.append(\u0027\u003e\u0027);\n        return sb.toString();\n    }",
    "begin_line": 315,
    "end_line": 332,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hashCode#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override public int hashCode() { return _hashCode; }",
    "begin_line": 334,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.equals#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (!ClassUtil.hasClass(o, getClass())) {\n            return false;\n        }\n        TypeBindings other \u003d (TypeBindings) o;\n        int len \u003d _types.length;\n        if (len !\u003d other.size()) {\n            return false;\n        }\n        JavaType[] otherTypes \u003d other._types;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            if (!otherTypes[i].equals(_types[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 336,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.typeParameterArray#362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.typeParameterArray()",
    "snippet": "protected JavaType[] typeParameterArray() {\n        return _types;\n    }",
    "begin_line": 362,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor1#394",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor1(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor1(Class\u003c?\u003e erasedType)\n        {\n            if (erasedType \u003d\u003d Collection.class) {\n                return VARS_COLLECTION;\n            }\n            if (erasedType \u003d\u003d List.class) {\n                return VARS_LIST;\n            }\n            if (erasedType \u003d\u003d ArrayList.class) {\n                return VARS_ARRAY_LIST;\n            }\n            if (erasedType \u003d\u003d AbstractList.class) {\n                return VARS_ABSTRACT_LIST;\n            }\n            if (erasedType \u003d\u003d Iterable.class) {\n                return VARS_ITERABLE;\n            }\n            return erasedType.getTypeParameters();\n        }",
    "begin_line": 394,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor2#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor2(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor2(Class\u003c?\u003e erasedType)\n        {\n            if (erasedType \u003d\u003d Map.class) {\n                return VARS_MAP;\n            }\n            if (erasedType \u003d\u003d HashMap.class) {\n                return VARS_HASH_MAP;\n            }\n            if (erasedType \u003d\u003d LinkedHashMap.class) {\n                return VARS_LINKED_HASH_MAP;\n            }\n            return erasedType.getTypeParameters();\n        }",
    "begin_line": 414,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.AsKey#439",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.AsKey(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[], int)",
    "snippet": "public AsKey(Class\u003c?\u003e raw, JavaType[] params, int hash) {\n            _raw \u003d raw ;\n            _params \u003d params;\n            _hash \u003d hash;\n        }",
    "begin_line": 439,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.hashCode#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override\n        public int hashCode() { return _hash; }",
    "begin_line": 446,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.equals#449",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(Object o) {\n            if (o \u003d\u003d this) return true;\n            if (o \u003d\u003d null) return false;\n            if (o.getClass() !\u003d getClass()) return false;\n            AsKey other \u003d (AsKey) o;\n\n            if ((_hash \u003d\u003d other._hash) \u0026\u0026 (_raw \u003d\u003d other._raw)) {\n                final JavaType[] otherParams \u003d other._params;\n                final int len \u003d _params.length;\n\n                if (len \u003d\u003d otherParams.length) {\n                    for (int i \u003d 0; i \u003c len; ++i) {\n                        if (!_params[i].equals(otherParams[i])) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }",
    "begin_line": 449,
    "end_line": 469,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.toString#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override\n        public String toString() {\n            return _raw.getName()+\"\u003c\u003e\";\n        }",
    "begin_line": 472,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory()",
    "snippet": "private TypeFactory() {\n        this(null);\n    }",
    "begin_line": 144,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache) {\n        if (typeCache \u003d\u003d null) {\n            typeCache \u003d new LRUMap\u003cObject,JavaType\u003e(16, 200);\n        }\n        _typeCache \u003d typeCache;\n        _parser \u003d new TypeParser(this);\n        _modifiers \u003d null;\n        _classLoader \u003d null;\n    }",
    "begin_line": 151,
    "end_line": 159,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e, com.fasterxml.jackson.databind.type.TypeParser, com.fasterxml.jackson.databind.type.TypeModifier[], java.lang.ClassLoader)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)\n    {\n        if (typeCache \u003d\u003d null) {\n            typeCache \u003d new LRUMap\u003cObject,JavaType\u003e(16, 200);\n        }\n        _typeCache \u003d typeCache;\n        // As per [databind#894] must ensure we have back-linkage from TypeFactory:\n        _parser \u003d p.withFactory(this);\n        _modifiers \u003d mods;\n        _classLoader \u003d classLoader;\n    }",
    "begin_line": 161,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withModifier#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "snippet": "public TypeFactory withModifier(TypeModifier mod) \n    {\n        LRUMap\u003cObject,JavaType\u003e typeCache \u003d _typeCache;\n        TypeModifier[] mods;\n        if (mod \u003d\u003d null) { // mostly for unit tests\n            mods \u003d null;\n            // 30-Jun-2016, tatu: for some reason expected semantics are to clear cache\n            //    in this case; can\u0027t recall why, but keeping the same\n            typeCache \u003d null;\n        } else if (_modifiers \u003d\u003d null) {\n            mods \u003d new TypeModifier[] { mod };\n        } else {\n            mods \u003d ArrayBuilders.insertInListNoDup(_modifiers, mod);\n        }\n        return new TypeFactory(typeCache, _parser, mods, _classLoader);\n    }",
    "begin_line": 174,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withClassLoader#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(java.lang.ClassLoader)",
    "snippet": "public TypeFactory withClassLoader(ClassLoader classLoader) {\n        return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withCache#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withCache(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public TypeFactory withCache(LRUMap\u003cObject,JavaType\u003e cache)  {\n        return new TypeFactory(cache, _parser, _modifiers, _classLoader);\n    }",
    "begin_line": 202,
    "end_line": 204,
    "comment": "/** \n * Mutant factory method that will construct new  {@link TypeFactory} withidentical settings except for different cache; most likely one with bigger maximum size.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.defaultInstance#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()",
    "snippet": "public static TypeFactory defaultInstance() { return instance; }",
    "begin_line": 211,
    "end_line": 211,
    "comment": "/** \n * Method used to access the globally shared instance, which has no custom configuration. Used by \u003ccode\u003eObjectMapper\u003c/code\u003e to get the default factory when constructed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.clearCache#223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.clearCache()",
    "snippet": "public void clearCache() {\n        _typeCache.clear();\n    }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "/** \n * Method that will clear up any cached type definitions that may be cached by this  {@link TypeFactory} instance.This method should not be commonly used, that is, only use it if you know there is a problem with retention of type definitions; the most likely (and currently only known) problem is retention of  {@link Class} instances via {@link JavaType} reference.\n * @since 2.4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.getClassLoader#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()",
    "snippet": "public ClassLoader getClassLoader() {\n        return _classLoader;\n    }",
    "begin_line": 227,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.unknownType#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknownType()",
    "snippet": "public static JavaType unknownType() {\n        return defaultInstance()._unknownType();\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Method for constructing a marker type that indicates missing generic type information, which is handled same as simple type for \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.rawClass#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.rawClass(java.lang.reflect.Type)",
    "snippet": "public static Class\u003c?\u003e rawClass(Type t) {\n        if (t instanceof Class\u003c?\u003e) {\n            return (Class\u003c?\u003e) t;\n        }\n        // Should be able to optimize bit more in future...\n        return defaultInstance().constructType(t).getRawClass();\n    }",
    "begin_line": 252,
    "end_line": 258,
    "comment": "/** \n * Static helper method that can be called to figure out type-erased call for given JDK type. It can be called statically since type resolution process can never change actual type-erased class; thereby static default instance is used for determination.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findClass#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findClass(java.lang.String)",
    "snippet": "public Class\u003c?\u003e findClass(String className) throws ClassNotFoundException\n    {\n        if (className.indexOf(\u0027.\u0027) \u003c 0) {\n            Class\u003c?\u003e prim \u003d _findPrimitive(className);\n            if (prim !\u003d null) {\n                return prim;\n            }\n        }\n        // Two-phase lookup: first using context ClassLoader; then default\n        Throwable prob \u003d null;\n        ClassLoader loader \u003d this.getClassLoader();\n        if (loader \u003d\u003d null) {\n            loader \u003d \tThread.currentThread().getContextClassLoader();\n        }\n        if (loader !\u003d null) {\n            try {\n                return classForName(className, true, loader);\n            } catch (Exception e) {\n                prob \u003d ClassUtil.getRootCause(e);\n            }\n        }\n        try {\n            return classForName(className);\n        } catch (Exception e) {\n            if (prob \u003d\u003d null) {\n                prob \u003d ClassUtil.getRootCause(e);\n            }\n        }\n        ClassUtil.throwIfRTE(prob);\n        throw new ClassNotFoundException(prob.getMessage(), prob);\n    }",
    "begin_line": 272,
    "end_line": 302,
    "comment": "/** \n * Low-level lookup method moved from  {@link com.fasterxml.jackson.databind.util.ClassUtil}, to allow for overriding of lookup functionality in environments like OSGi.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String, boolean, java.lang.ClassLoader)",
    "snippet": "protected Class\u003c?\u003e classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException {\n    \treturn Class.forName(name, true, loader);\n    }",
    "begin_line": 304,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e classForName(String name) throws ClassNotFoundException {\n        return Class.forName(name);\n    }",
    "begin_line": 309,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findPrimitive#313",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e _findPrimitive(String className)\n    {\n        if (\"int\".equals(className)) return Integer.TYPE;\n        if (\"long\".equals(className)) return Long.TYPE;\n        if (\"float\".equals(className)) return Float.TYPE;\n        if (\"double\".equals(className)) return Double.TYPE;\n        if (\"boolean\".equals(className)) return Boolean.TYPE;\n        if (\"byte\".equals(className)) return Byte.TYPE;\n        if (\"char\".equals(className)) return Character.TYPE;\n        if (\"short\".equals(className)) return Short.TYPE;\n        if (\"void\".equals(className)) return Void.TYPE;\n        return null;\n    }",
    "begin_line": 313,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSpecializedType#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType, Class\u003c?\u003e subclass)\n    {\n        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n        final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\n        if (rawBase \u003d\u003d subclass) {\n            return baseType;\n        }\n\n        JavaType newType;\n\n        // also: if we start from untyped, not much to save\n        do { // bogus loop to be able to break\n            if (rawBase \u003d\u003d Object.class) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());\n                break;\n            }\n            if (!rawBase.isAssignableFrom(subclass)) {\n                throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));\n            }\n            // A few special cases where we can simplify handling:\n\n            // (1) Original target type has no generics -- just resolve subtype\n            if (baseType.getBindings().isEmpty()) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());     \n                break;\n            }\n            // (2) A small set of \"well-known\" List/Map subtypes where can take a short-cut\n            if (baseType.isContainerType()) {\n                if (baseType.isMapLikeType()) {\n                    if ((subclass \u003d\u003d HashMap.class)\n                            || (subclass \u003d\u003d LinkedHashMap.class)\n                            || (subclass \u003d\u003d EnumMap.class)\n                            || (subclass \u003d\u003d TreeMap.class)) {\n                        newType \u003d _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                        break;\n                    }\n                } else if (baseType.isCollectionLikeType()) {\n                    if ((subclass \u003d\u003d ArrayList.class)\n                            || (subclass \u003d\u003d LinkedList.class)\n                            || (subclass \u003d\u003d HashSet.class)\n                            || (subclass \u003d\u003d TreeSet.class)) {\n                        newType \u003d _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));\n                        break;\n                    }\n                    // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,\n                    //    but they are impl details and we basically do not care...\n                    if (rawBase \u003d\u003d EnumSet.class) {\n                        return baseType;\n                    }\n                }\n            }\n            // (3) Sub-class does not take type parameters -- just resolve subtype\n            int typeParamCount \u003d subclass.getTypeParameters().length;\n            if (typeParamCount \u003d\u003d 0) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());     \n                break;\n            }\n            \n            // If not, we\u0027ll need to do more thorough forward+backwards resolution. Sigh.\n\n            // 20-Oct-2015, tatu: Container, Map-types somewhat special. There is\n            //    a way to fully resolve and merge hierarchies; but that gets expensive\n            //    so let\u0027s, for now, try to create close-enough approximation that\n            //    is not 100% same, structurally, but has equivalent information for\n            //    our specific neeeds.\n            // 29-Mar-2016, tatu: See [databind#1173]  (and test `TypeResolverTest`)\n            //  for a case where this code does get invoked: not ideal\n            // 29-Jun-2016, tatu: As to bindings, this works for [databind#1215], but\n            //  not certain it would reliably work... but let\u0027s hope for best for now\n            TypeBindings tb \u003d _bindingsForSubtype(baseType, typeParamCount, subclass);\n            if (baseType.isInterface()) {\n                newType \u003d baseType.refine(subclass, tb, null, new JavaType[] { baseType });\n            } else {\n                newType \u003d baseType.refine(subclass, tb, baseType, NO_TYPES);\n            }\n            // Only SimpleType returns null, but if so just resolve regularly\n            if (newType \u003d\u003d null) {\n                newType \u003d _fromClass(null, subclass, tb);\n            }\n        } while (false);\n\n        // 25-Sep-2016, tatu: As per [databind#1384] also need to ensure handlers get\n        //   copied as well\n        newType \u003d newType.withHandlersFrom(baseType);\n        return newType;\n\n        // 20-Oct-2015, tatu: Old simplistic approach\n        \n        /*\n        // Currently mostly SimpleType instances can become something else\n        if (baseType instanceof SimpleType) {\n            // and only if subclass is an array, Collection or Map\n            if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass)) {\n                // need to assert type compatibility...\n                if (!baseType.getRawClass().isAssignableFrom(subclass)) {\n                    throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);\n                }\n                // this _should_ work, right?\n                JavaType subtype \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());\n                // one more thing: handlers to copy?\n                Object h \u003d baseType.getValueHandler();\n                if (h !\u003d null) {\n                    subtype \u003d subtype.withValueHandler(h);\n                }\n                h \u003d baseType.getTypeHandler();\n                if (h !\u003d null) {\n                    subtype \u003d subtype.withTypeHandler(h);\n                }\n                return subtype;\n            }\n        }\n        // But there is the need for special case for arrays too, it seems\n        if (baseType instanceof ArrayType) {\n            if (subclass.isArray()) {\n                // actually see if it might be a no-op first:\n                ArrayType at \u003d (ArrayType) baseType;\n                Class\u003c?\u003e rawComp \u003d subclass.getComponentType();\n                if (at.getContentType().getRawClass() \u003d\u003d rawComp) {\n                    return baseType;\n                }\n                JavaType componentType \u003d _fromAny(null, rawComp, null);\n                return ((ArrayType) baseType).withComponentType(componentType);\n            }\n        }\n\n        // otherwise regular narrowing should work just fine\n        return baseType.narrowBy(subclass);\n        */\n    }",
    "begin_line": 340,
    "end_line": 473,
    "comment": "/** \n * Factory method for creating a subtype of given base type, as defined by specified subclass; but retaining generic type information if any. Can be used, for example, to get equivalent of \"HashMap\u0026lt;String,Integer\u0026gt;\" from \"Map\u0026lt;String,Integer\u0026gt;\" by giving \u003ccode\u003eHashMap.class\u003c/code\u003e as subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._bindingsForSubtype#475",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._bindingsForSubtype(com.fasterxml.jackson.databind.JavaType, int, java.lang.Class\u003c?\u003e)",
    "snippet": "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class\u003c?\u003e subclass)\n    {\n        // But otherwise gets bit tricky, as we need to partially resolve the type hierarchy\n        // (hopefully passing null Class for root is ok)\n        int baseCount \u003d baseType.containedTypeCount();\n        if (baseCount \u003d\u003d typeParamCount) {\n            if (typeParamCount \u003d\u003d 1) {\n                return TypeBindings.create(subclass, baseType.containedType(0));\n            }\n            if (typeParamCount \u003d\u003d 2) {\n                return TypeBindings.create(subclass, baseType.containedType(0),\n                        baseType.containedType(1));\n            }\n            List\u003cJavaType\u003e types \u003d new ArrayList\u003cJavaType\u003e(baseCount);\n            for (int i \u003d 0; i \u003c baseCount; ++i) {\n                types.add(baseType.containedType(i));\n            }\n            return TypeBindings.create(subclass, types);\n        }\n        // Otherwise, two choices: match N first, or empty. Do latter, for now\n        return TypeBindings.emptyBindings();\n    }",
    "begin_line": 475,
    "end_line": 496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructGeneralizedType#508",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructGeneralizedType(JavaType baseType, Class\u003c?\u003e superClass)\n    {\n        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n        final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\n        if (rawBase \u003d\u003d superClass) {\n            return baseType;\n        }\n        JavaType superType \u003d baseType.findSuperType(superClass);\n        if (superType \u003d\u003d null) {\n            // Most likely, caller did not verify sub/super-type relationship\n            if (!superClass.isAssignableFrom(rawBase)) {\n                throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));\n            }\n            // 01-Nov-2015, tatu: Should never happen, but ch\n            throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));\n        }\n        return superType;\n    }",
    "begin_line": 508,
    "end_line": 528,
    "comment": "/** \n * Method similar to  {@link #constructSpecializedType}, but that creates a less-specific type of given type. Usually this is as simple as simply finding super-type with type erasure of \u003ccode\u003esuperClass\u003c/code\u003e, but there may be need for some additional work-arounds.\n * @param superClass\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructFromCanonical#540",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)",
    "snippet": "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException\n    {\n        return _parser.parse(canonical);\n    }",
    "begin_line": 540,
    "end_line": 543,
    "comment": "/** \n * Factory method for constructing a  {@link JavaType} out of its canonicalrepresentation (see  {@link JavaType#toCanonical()}).\n * @param canonical Canonical string representation of a type\n * @throws IllegalArgumentException If canonical representation is malformed,or class that type represents (including its generic parameters) is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType[] findTypeParameters(JavaType type, Class\u003c?\u003e expType)\n    {\n        JavaType match \u003d type.findSuperType(expType);\n        if (match \u003d\u003d null) {\n            return NO_TYPES;\n        }\n        return match.getBindings().typeParameterArray();\n    }",
    "begin_line": 554,
    "end_line": 561,
    "comment": "/** \n * Method that is to figure out actual type parameters that given class binds to generic types defined by given (generic) interface or class. This could mean, for example, trying to figure out key and value types for Map implementations.\n * @param type Sub-type (leaf type) that implements \u003ccode\u003eexpType\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#567",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "@Deprecated findTypeParameters(Class\u003c?\u003e clz, Class\u003c?\u003e expType, TypeBindings bindings) {\n        return findTypeParameters(constructType(clz, bindings), expType);\n    }",
    "begin_line": 567,
    "end_line": 569,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#575",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated findTypeParameters(Class\u003c?\u003e clz, Class\u003c?\u003e expType) {\n        return findTypeParameters(constructType(clz), expType);\n    }",
    "begin_line": 575,
    "end_line": 577,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.moreSpecificType#589",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType moreSpecificType(JavaType type1, JavaType type2)\n    {\n        if (type1 \u003d\u003d null) {\n            return type2;\n        }\n        if (type2 \u003d\u003d null) {\n            return type1;\n        }\n        Class\u003c?\u003e raw1 \u003d type1.getRawClass();\n        Class\u003c?\u003e raw2 \u003d type2.getRawClass();\n        if (raw1 \u003d\u003d raw2) {\n            return type1;\n        }\n        // TODO: maybe try sub-classing, to retain generic types?\n        if (raw1.isAssignableFrom(raw2)) {\n            return type2;\n        }\n        return type1;\n    }",
    "begin_line": 589,
    "end_line": 607,
    "comment": "/** \n * Method that can be called to figure out more specific of two types (if they are related; that is, one implements or extends the other); or if not related, return the primary type.\n * @param type1 Primary type to consider\n * @param type2 Secondary type to consider\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type type) {\n        return _fromAny(null, type, EMPTY_BINDINGS);\n    }",
    "begin_line": 615,
    "end_line": 617,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#619",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "public JavaType constructType(Type type, TypeBindings bindings) {\n        return _fromAny(null, type, bindings);\n    }",
    "begin_line": 619,
    "end_line": 621,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(TypeReference\u003c?\u003e)",
    "snippet": "public JavaType constructType(TypeReference\u003c?\u003e typeRef)\n    {\n        // 19-Oct-2015, tatu: Simpler variant like so should work\n        return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);\n\n        // but if not, due to funky sub-classing, type variables, what follows\n        // is a more complete processing a la Java ClassMate.\n\n        /*\n        final Class\u003c?\u003e refdRawType \u003d typeRef.getClass();\n        JavaType type \u003d _fromClass(null, refdRawType, EMPTY_BINDINGS);\n        JavaType genType \u003d type.findSuperType(TypeReference.class);\n        if (genType \u003d\u003d null) { // sanity check; shouldn\u0027t occur\n            throw new IllegalArgumentException(\"Unparameterized GenericType instance (\"+refdRawType.getName()+\")\");\n        }\n        TypeBindings b \u003d genType.getBindings();\n        JavaType[] params \u003d b.typeParameterArray();\n        if (params.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"Unparameterized GenericType instance (\"+refdRawType.getName()+\")\");\n        }\n        return params[0];\n        */\n    }",
    "begin_line": 623,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JavaType constructType(Type type, Class\u003c?\u003e contextClass) {\n        JavaType contextType \u003d (contextClass \u003d\u003d null) ? null : constructType(contextClass);\n        return constructType(type, contextType);\n    }",
    "begin_line": 651,
    "end_line": 654,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#660",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public JavaType constructType(Type type, JavaType contextType) {\n        TypeBindings bindings;\n        if (contextType \u003d\u003d null) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d contextType.getBindings();\n            // 16-Nov-2016, tatu: Unfortunately as per [databind#1456] this can\u0027t\n            //   be made to work for some cases used to work (even if accidentally);\n            //   however, we can try a simple heuristic to increase chances of\n            //   compatibility from 2.6 code\n            if (type.getClass() !\u003d Class.class) {\n                // Ok: so, ideally we would test super-interfaces if necessary;\n                // but let\u0027s assume most if not all cases are for classes.\n                while (bindings.isEmpty()) {\n                    contextType \u003d contextType.getSuperClass();\n                    if (contextType \u003d\u003d null) {\n                        break;\n                    }\n                    bindings \u003d contextType.getBindings();\n                }\n            }\n        }\n        return _fromAny(null, type, bindings);\n    }",
    "begin_line": 660,
    "end_line": 683,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#697",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(java.lang.Class\u003c?\u003e)",
    "snippet": "public ArrayType constructArrayType(Class\u003c?\u003e elementType) {\n        return ArrayType.construct(_fromAny(null, elementType, null), null);\n    }",
    "begin_line": 697,
    "end_line": 699,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for element type (and other contained types)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#707",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ArrayType constructArrayType(JavaType elementType) {\n        return ArrayType.construct(elementType, null);\n    }",
    "begin_line": 707,
    "end_line": 709,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#717",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,\n            Class\u003c?\u003e elementClass) {\n        return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 717,
    "end_line": 721,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#729",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,\n            JavaType elementType) {\n        // 19-Oct-2015, tatu: Allow case of no-type-variables, since it seems likely to be\n        //    a valid use case here\n        return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));\n    }",
    "begin_line": 729,
    "end_line": 735,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#743",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass, Class\u003c?\u003e elementClass) {\n        return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 743,
    "end_line": 746,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#754",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass, JavaType elementType) {\n        JavaType type \u003d _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));\n        if (type instanceof CollectionLikeType) {\n            return (CollectionLikeType) type;\n        }\n        return CollectionLikeType.upgradeFrom(type, elementType);\n    }",
    "begin_line": 754,
    "end_line": 761,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#769",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass,\n            Class\u003c?\u003e keyClass, Class\u003c?\u003e valueClass) {\n        JavaType kt, vt;\n        if (mapClass \u003d\u003d Properties.class) {\n            kt \u003d vt \u003d CORE_TYPE_STRING;\n        } else {\n            kt \u003d _fromClass(null, keyClass, EMPTY_BINDINGS);\n            vt \u003d _fromClass(null, valueClass, EMPTY_BINDINGS);\n        }\n        return constructMapType(mapClass, kt, vt);\n    }",
    "begin_line": 769,
    "end_line": 779,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#787",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass, JavaType keyType, JavaType valueType) {\n        return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, keyType, valueType));\n    }",
    "begin_line": 787,
    "end_line": 790,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#798",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass, Class\u003c?\u003e keyClass, Class\u003c?\u003e valueClass) {\n        return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 798,
    "end_line": 802,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#810",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass, JavaType keyType, JavaType valueType) {\n        // 19-Oct-2015, tatu: Allow case of no-type-variables, since it seems likely to be\n        //    a valid use case here\n        JavaType type \u003d _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));\n        if (type instanceof MapLikeType) {\n            return (MapLikeType) type;\n        }\n        return MapLikeType.upgradeFrom(type, keyType, valueType);\n    }",
    "begin_line": 810,
    "end_line": 819,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#826",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public JavaType constructSimpleType(Class\u003c?\u003e rawType, JavaType[] parameterTypes) {\n        return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));\n    }",
    "begin_line": 826,
    "end_line": 828,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization. \u003cp\u003e NOTE: was briefly deprecated for 2.6.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#838",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Deprecated\n    public JavaType constructSimpleType(Class\u003c?\u003e rawType, Class\u003c?\u003e parameterTarget,\n            JavaType[] parameterTypes)\n    {\n        return constructSimpleType(rawType, parameterTypes);\n    }",
    "begin_line": 838,
    "end_line": 842,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization.\n * @since 2.6\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructReferenceType#847",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructReferenceType(Class\u003c?\u003e rawType, JavaType referredType)\n    {\n        return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);\n    }",
    "begin_line": 847,
    "end_line": 852,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.uncheckedSimpleType#866",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated uncheckedSimpleType(Class\u003c?\u003e cls) {\n        // 18-Oct-2015, tatu: Not sure how much problem missing super-type info is here\n        return _constructSimple(cls, EMPTY_BINDINGS, null, null);\n    }",
    "begin_line": 866,
    "end_line": 869,
    "comment": "/** \n * Method that use by core Databind functionality, and that should NOT be called by application code outside databind package. \u003cp\u003e  Unchecked here not only means that no checks are made as to whether given class might be non-simple type (like  {@link CollectionType}) but also that most of supertype information is not gathered. This means that unless called on primitive types or {@link java.lang.String}, results are probably not what you want to use.\n * @deprecated Since 2.8, to indicate users should never call this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#898",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e parametrized, Class\u003c?\u003e... parameterClasses) {\n        int len \u003d parameterClasses.length;\n        JavaType[] pt \u003d new JavaType[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            pt[i] \u003d _fromClass(null, parameterClasses[i], null);\n        }\n        return constructParametricType(parametrized, pt);\n    }",
    "begin_line": 898,
    "end_line": 905,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametrizedType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametrizedType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametrizedType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param parametrized Actual full type\n * @param parameterClasses Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#934",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e rawType, JavaType... parameterTypes)\n    {\n        return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));\n    }",
    "begin_line": 934,
    "end_line": 937,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametrizedType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametrizedType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametrizedType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param rawType Actual type-erased type\n * @param parameterTypes Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#942",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructParametrizedType(Class\u003c?\u003e parametrized, Class\u003c?\u003e parametersFor,\n            JavaType... parameterTypes)\n    {\n        return constructParametricType(parametrized, parameterTypes);\n    }",
    "begin_line": 942,
    "end_line": 946,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#951",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructParametrizedType(Class\u003c?\u003e parametrized, Class\u003c?\u003e parametersFor,\n            Class\u003c?\u003e... parameterClasses)\n    {\n        return constructParametricType(parametrized, parameterClasses);\n    }",
    "begin_line": 951,
    "end_line": 955,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionType#975",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e)",
    "snippet": "public CollectionType constructRawCollectionType(Class\u003c? extends Collection\u003e collectionClass) {\n        return constructCollectionType(collectionClass, unknownType());\n    }",
    "begin_line": 975,
    "end_line": 977,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionLikeType#990",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructRawCollectionLikeType(Class\u003c?\u003e collectionClass) {\n        return constructCollectionLikeType(collectionClass, unknownType());\n    }",
    "begin_line": 990,
    "end_line": 992,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapType#1005",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class\u003c? extends java.util.Map\u003e)",
    "snippet": "public MapType constructRawMapType(Class\u003c? extends Map\u003e mapClass) {\n        return constructMapType(mapClass, unknownType(), unknownType());\n    }",
    "begin_line": 1005,
    "end_line": 1007,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapLikeType#1020",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructRawMapLikeType(Class\u003c?\u003e mapClass) {\n        return constructMapLikeType(mapClass, unknownType(), unknownType());\n    }",
    "begin_line": 1020,
    "end_line": 1022,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._mapType#1030",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._mapType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _mapType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        JavaType kt, vt;\n\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig\n        if (rawClass \u003d\u003d Properties.class) {\n            kt \u003d vt \u003d CORE_TYPE_STRING;\n        } else {\n            List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n            // ok to have no types (\"raw\")\n            switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt \u003d vt \u003d _unknownType();\n                break;\n            case 2:\n                kt \u003d typeParams.get(0);\n                vt \u003d typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }\n        }\n        return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);\n    }",
    "begin_line": 1030,
    "end_line": 1054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._collectionType#1056",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._collectionType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _collectionType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n        // ok to have no types (\"raw\")\n        JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct \u003d _unknownType();\n        } else if (typeParams.size() \u003d\u003d 1) {\n            ct \u003d typeParams.get(0);\n        } else {\n            throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }",
    "begin_line": 1056,
    "end_line": 1070,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._referenceType#1072",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._referenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _referenceType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n        // ok to have no types (\"raw\")\n        JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct \u003d _unknownType();\n        } else if (typeParams.size() \u003d\u003d 1) {\n            ct \u003d typeParams.get(0);\n        } else {\n            throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }",
    "begin_line": 1072,
    "end_line": 1086,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._constructSimple#1096",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _constructSimple(Class\u003c?\u003e raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        if (bindings.isEmpty()) {\n            JavaType result \u003d _findWellKnownSimple(raw);\n            if (result !\u003d null) {\n                return result;\n            }\n        }\n        return _newSimpleType(raw, bindings, superClass, superInterfaces);\n    }",
    "begin_line": 1096,
    "end_line": 1106,
    "comment": "/** \n * Factory method to call when no special  {@link JavaType} is needed,no generic parameters are passed. Default implementation may check pre-constructed values for \"well-known\" types, but if none found will simply call  {@link #_newSimpleType}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._newSimpleType#1115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _newSimpleType(Class\u003c?\u003e raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        return new SimpleType(raw, bindings, superClass, superInterfaces);\n    }",
    "begin_line": 1115,
    "end_line": 1119,
    "comment": "/** \n * Factory method that is to create a new  {@link SimpleType} with nochecks whatsoever. Default implementation calls the single argument constructor of  {@link SimpleType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._unknownType#1121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._unknownType()",
    "snippet": "protected JavaType _unknownType() {\n        /* 15-Sep-2015, tatu: Prior to 2.7, we constructed new instance for each call.\n         *    This may have been due to potential mutability of the instance; but that\n         *    should not be issue any more, and creation is somewhat wasteful. So let\u0027s\n         *    try reusing singleton/flyweight instance.\n         */\n        return CORE_TYPE_OBJECT;\n    }",
    "begin_line": 1121,
    "end_line": 1128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findWellKnownSimple#1137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JavaType _findWellKnownSimple(Class\u003c?\u003e clz) {\n        if (clz.isPrimitive()) {\n            if (clz \u003d\u003d CLS_BOOL) return CORE_TYPE_BOOL;\n            if (clz \u003d\u003d CLS_INT) return CORE_TYPE_INT;\n            if (clz \u003d\u003d CLS_LONG) return CORE_TYPE_LONG;\n        } else {\n            if (clz \u003d\u003d CLS_STRING) return CORE_TYPE_STRING;\n            if (clz \u003d\u003d CLS_OBJECT) return CORE_TYPE_OBJECT; // since 2.7\n        }\n        return null;\n    }",
    "begin_line": 1137,
    "end_line": 1147,
    "comment": "/** \n * Helper method called to see if requested, non-generic-parameterized type is one of common, \"well-known\" types, instances of which are pre-constructed and do not need dynamic caching.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromAny#1160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromAny(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)\n    {\n        JavaType resultType;\n\n        // simple class?\n        if (type instanceof Class\u003c?\u003e) {\n            // Important: remove possible bindings since this is type-erased thingy\n            resultType \u003d _fromClass(context, (Class\u003c?\u003e) type, EMPTY_BINDINGS);\n        }\n        // But if not, need to start resolving.\n        else if (type instanceof ParameterizedType) {\n            resultType \u003d _fromParamType(context, (ParameterizedType) type, bindings);\n        }\n        else if (type instanceof JavaType) { // [databind#116]\n            // no need to modify further if we already had JavaType\n            return (JavaType) type;\n        }\n        else if (type instanceof GenericArrayType) {\n            resultType \u003d _fromArrayType(context, (GenericArrayType) type, bindings);\n        }\n        else if (type instanceof TypeVariable\u003c?\u003e) {\n            resultType \u003d _fromVariable(context, (TypeVariable\u003c?\u003e) type, bindings);\n        }\n        else if (type instanceof WildcardType) {\n            resultType \u003d _fromWildcard(context, (WildcardType) type, bindings);\n        } else {\n            // sanity check\n            throw new IllegalArgumentException(\"Unrecognized Type: \"+((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n        }\n        /* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         */\n        if (_modifiers !\u003d null) {\n            TypeBindings b \u003d resultType.getBindings();\n            if (b \u003d\u003d null) {\n                b \u003d EMPTY_BINDINGS;\n            }\n            for (TypeModifier mod : _modifiers) {\n                JavaType t \u003d mod.modifyType(resultType, type, b, this);\n                if (t \u003d\u003d null) {\n                    throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));\n                }\n                resultType \u003d t;\n            }\n        }\n        return resultType;\n    }",
    "begin_line": 1160,
    "end_line": 1208,
    "comment": "/** \n * Factory method that can be used if type information is passed as Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods (usually for a return or argument type).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromClass#1214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings)\n    {\n        // Very first thing: small set of core types we know well:\n        JavaType result \u003d _findWellKnownSimple(rawType);\n        if (result !\u003d null) {\n            return result;\n        }\n        // Barring that, we may have recently constructed an instance\n        final Object key;\n        if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\n            key \u003d rawType;\n        } else {\n            key \u003d bindings.asKey(rawType);\n        }\n        result \u003d _typeCache.get(key); // ok, cache object is synced\n        if (result !\u003d null) {\n            return result;\n        }\n\n        // 15-Oct-2015, tatu: recursive reference?\n        if (context \u003d\u003d null) {\n            context \u003d new ClassStack(rawType);\n        } else {\n            ClassStack prev \u003d context.find(rawType);\n            if (prev !\u003d null) {\n                // Self-reference: needs special handling, then...\n                ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\n                prev.addSelfReference(selfRef);\n                return selfRef;\n            }\n            // no, but need to update context to allow for proper cycle resolution\n            context \u003d context.child(rawType);\n        }\n\n        // First: do we have an array type?\n        if (rawType.isArray()) {\n            result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);\n        } else {\n            // If not, need to proceed by first resolving parent type hierarchy\n            \n            JavaType superClass;\n            JavaType[] superInterfaces;\n\n            if (rawType.isInterface()) {\n                superClass \u003d null;\n                superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\n            } else {\n                // Note: even Enums can implement interfaces, so can not drop those\n                superClass \u003d _resolveSuperClass(context, rawType, bindings);\n                superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\n            }\n\n            // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\n            if (rawType \u003d\u003d Properties.class) {\n                result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);\n            }\n            // And then check what flavor of type we got. Start by asking resolved\n            // super-type if refinement is all that is needed?\n            else if (superClass !\u003d null) {\n                result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\n            }\n            // if not, perhaps we are now resolving a well-known class or interface?\n            if (result \u003d\u003d null) {\n                result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces); \n                if (result \u003d\u003d null) {\n                    result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                    if (result \u003d\u003d null) {\n                        // but if nothing else, \"simple\" class for now:\n                        result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                    }\n                }\n            }\n        }\n        context.resolveSelfReferences(result);\n        // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\n        //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\n        if (!result.hasHandlers()) {\n            _typeCache.putIfAbsent(key, result); // cache object syncs\n        }\n        return result;\n    }",
    "begin_line": 1214,
    "end_line": 1296,
    "comment": "/** \n * @param bindings Mapping of formal parameter declarations (for generictypes) into actual types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperClass#1298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _resolveSuperClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings parentBindings)\n    {\n        Type parent \u003d ClassUtil.getGenericSuperclass(rawType);\n        if (parent \u003d\u003d null) {\n            return null;\n        }\n        return _fromAny(context, parent, parentBindings);\n    }",
    "begin_line": 1298,
    "end_line": 1305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperInterfaces#1307",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class\u003c?\u003e rawType, TypeBindings parentBindings)\n    {\n        Type[] types \u003d ClassUtil.getGenericInterfaces(rawType);\n        if (types \u003d\u003d null || types.length \u003d\u003d 0) {\n            return NO_TYPES;\n        }\n        int len \u003d types.length;\n        JavaType[] resolved \u003d new JavaType[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            Type type \u003d types[i];\n            resolved[i] \u003d _fromAny(context, type, parentBindings);\n        }\n        return resolved;\n    }",
    "begin_line": 1307,
    "end_line": 1320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownClass#1327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        if (bindings \u003d\u003d null) {\n            bindings \u003d TypeBindings.emptyBindings();\n        }\n        \n        // Quite simple when we resolving exact class/interface; start with that\n        if (rawType \u003d\u003d Map.class) {\n            return _mapType(rawType, bindings, superClass, superInterfaces);\n        }\n        if (rawType \u003d\u003d Collection.class) {\n            return _collectionType(rawType, bindings, superClass, superInterfaces);\n        }\n        // and since 2.6 one referential type\n        if (rawType \u003d\u003d AtomicReference.class) {\n            return _referenceType(rawType, bindings, superClass, superInterfaces);\n        }\n        // 01-Nov-2015, tatu: As of 2.7, couple of potential `CollectionLikeType`s (like\n        //    `Iterable`, `Iterator`), and `MapLikeType`s (`Map.Entry`) are not automatically\n        //    detected, related to difficulties in propagating type upwards (Iterable, for\n        //    example, is a weak, tag-on type). They may be detectable in future.\n        return null;\n    }",
    "begin_line": 1327,
    "end_line": 1350,
    "comment": "/** \n * Helper class used to check whether exact class for which type is being constructed is one of well-known base interfaces or classes that indicates alternate {@link JavaType} implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownInterface#1352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownInterface(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        // But that\u0027s not all: may be possible current type actually implements an\n        // interface type. So...\n        final int intCount \u003d superInterfaces.length;\n\n        for (int i \u003d 0; i \u003c intCount; ++i) {\n            JavaType result \u003d superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);\n            if (result !\u003d null) {\n                return result;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1352,
    "end_line": 1366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromParamType#1372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.ParameterizedType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)\n    {\n        // Assumption here is we\u0027ll always get Class, not one of other Types\n        Class\u003c?\u003e rawType \u003d (Class\u003c?\u003e) ptype.getRawType();\n\n        // 29-Oct-2015, tatu: For performance reasons, let\u0027s streamline handling of\n        //   couple of not-so-useful parametric types\n        if (rawType \u003d\u003d CLS_ENUM) {\n            return CORE_TYPE_ENUM;\n        }\n        if (rawType \u003d\u003d CLS_COMPARABLE) {\n            return CORE_TYPE_COMPARABLE;\n        }\n        if (rawType \u003d\u003d CLS_CLASS) {\n            return CORE_TYPE_CLASS;\n        }\n\n        // First: what is the actual base type? One odd thing is that \u0027getRawType\u0027\n        // returns Type, not Class\u003c?\u003e as one might expect. But let\u0027s assume it is\n        // always of type Class: if not, need to add more code to resolve it to Class.        \n        Type[] args \u003d ptype.getActualTypeArguments();\n        int paramCount \u003d (args \u003d\u003d null) ? 0 : args.length;\n        JavaType[] pt;\n        TypeBindings newBindings;        \n\n        if (paramCount \u003d\u003d 0) {\n            newBindings \u003d EMPTY_BINDINGS;\n        } else {\n            pt \u003d new JavaType[paramCount];\n            for (int i \u003d 0; i \u003c paramCount; ++i) {\n                pt[i] \u003d _fromAny(context, args[i], parentBindings);\n            }\n            newBindings \u003d TypeBindings.create(rawType, pt);\n        }\n        return _fromClass(context, rawType, newBindings);\n    }",
    "begin_line": 1372,
    "end_line": 1408,
    "comment": "/** \n * This method deals with parameterized types, that is, first class generic classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromArrayType#1410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.GenericArrayType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)\n    {\n        JavaType elementType \u003d _fromAny(context, type.getGenericComponentType(), bindings);\n        return ArrayType.construct(elementType, bindings);\n    }",
    "begin_line": 1410,
    "end_line": 1414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromVariable#1416",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.TypeVariable\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromVariable(ClassStack context, TypeVariable\u003c?\u003e var, TypeBindings bindings)\n    {\n        // ideally should find it via bindings:\n        final String name \u003d var.getName();\n        JavaType type \u003d bindings.findBoundType(name);\n        if (type !\u003d null) {\n            return type;\n        }\n        // but if not, use bounds... note that approach here is simplistic; not taking\n        // into account possible multiple bounds, nor consider upper bounds.\n        if (bindings.hasUnbound(name)) {\n            return CORE_TYPE_OBJECT;\n        }\n        bindings \u003d bindings.withUnboundVariable(name);\n\n        Type[] bounds \u003d var.getBounds();\n        return _fromAny(context, bounds[0], bindings);\n    }",
    "begin_line": 1416,
    "end_line": 1433,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWildcard#1435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.WildcardType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)\n    {\n        /* Similar to challenges with TypeVariable, we may have multiple upper bounds.\n         * But it is also possible that if upper bound defaults to Object, we might\n         * want to consider lower bounds instead.\n         * For now, we won\u0027t try anything more advanced; above is just for future reference.\n         */\n        return _fromAny(context, type.getUpperBounds()[0], bindings);\n    }",
    "begin_line": 1435,
    "end_line": 1443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.TypeParser#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser(TypeFactory f) {\n        _factory \u003d f;\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.withFactory#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.withFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser withFactory(TypeFactory f) {\n        return (f \u003d\u003d _factory) ? this : new TypeParser(f);\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "/** \n * @since 2.6.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parse#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parse(java.lang.String)",
    "snippet": "public JavaType parse(String canonical) throws IllegalArgumentException\n    {\n        canonical \u003d canonical.trim();\n        MyTokenizer tokens \u003d new MyTokenizer(canonical);\n        JavaType type \u003d parseType(tokens);\n        // must be end, now\n        if (tokens.hasMoreTokens()) {\n            throw _problem(tokens, \"Unexpected tokens after complete type\");\n        }\n        return type;\n    }",
    "begin_line": 30,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseType#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseType(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected JavaType parseType(MyTokenizer tokens)\n        throws IllegalArgumentException\n    {\n        if (!tokens.hasMoreTokens()) {\n            throw _problem(tokens, \"Unexpected end-of-string\");\n        }\n        Class\u003c?\u003e base \u003d findClass(tokens.nextToken(), tokens);\n\n        // either end (ok, non generic type), or generics\n        if (tokens.hasMoreTokens()) {\n            String token \u003d tokens.nextToken();\n            if (\"\u003c\".equals(token)) {\n                List\u003cJavaType\u003e parameterTypes \u003d parseTypes(tokens);\n                TypeBindings b \u003d TypeBindings.create(base, parameterTypes);\n                return _factory._fromClass(null, base, b);\n            }\n            // can be comma that separates types, or closing \u0027\u003e\u0027\n            tokens.pushBack(token);\n        }\n        return _factory._fromClass(null, base, null);\n    }",
    "begin_line": 42,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseTypes#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseTypes(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected List\u003cJavaType\u003e parseTypes(MyTokenizer tokens)\n        throws IllegalArgumentException\n    {\n        ArrayList\u003cJavaType\u003e types \u003d new ArrayList\u003cJavaType\u003e();\n        while (tokens.hasMoreTokens()) {\n            types.add(parseType(tokens));\n            if (!tokens.hasMoreTokens()) break;\n            String token \u003d tokens.nextToken();\n            if (\"\u003e\".equals(token)) return types;\n            if (!\",\".equals(token)) {\n                throw _problem(tokens, \"Unexpected token \u0027\"+token+\"\u0027, expected \u0027,\u0027 or \u0027\u003e\u0027)\");\n            }\n        }\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }",
    "begin_line": 64,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.findClass#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.findClass(java.lang.String, com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected Class\u003c?\u003e findClass(String className, MyTokenizer tokens)\n    {\n        try {\n            return _factory.findClass(className);\n        } catch (Exception e) {\n            ClassUtil.throwIfRTE(e);\n            throw _problem(tokens, \"Can not locate class \u0027\"+className+\"\u0027, problem: \"+e.getMessage());\n        }\n    }",
    "begin_line": 80,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser._problem#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser._problem(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer, java.lang.String)",
    "snippet": "protected IllegalArgumentException _problem(MyTokenizer tokens, String msg)\n    {\n        return new IllegalArgumentException(\"Failed to parse type \u0027\"+tokens.getAllInput()\n                +\"\u0027 (remaining: \u0027\"+tokens.getRemainingInput()+\"\u0027): \"+msg);\n    }",
    "begin_line": 90,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.MyTokenizer#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer(java.lang.String)",
    "snippet": "public MyTokenizer(String str) {            \n            super(str, \"\u003c,\u003e\", true);\n            _input \u003d str;\n        }",
    "begin_line": 105,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.hasMoreTokens#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.hasMoreTokens()",
    "snippet": "@Override\n        public boolean hasMoreTokens() {\n            return (_pushbackToken !\u003d null) || super.hasMoreTokens();\n        }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.nextToken#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.nextToken()",
    "snippet": "@Override\n        public String nextToken() {\n            String token;\n            if (_pushbackToken !\u003d null) {\n                token \u003d _pushbackToken;\n                _pushbackToken \u003d null;\n            } else {\n                token \u003d super.nextToken();\n            }\n            _index +\u003d token.length();\n            return token;\n        }",
    "begin_line": 116,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.pushBack#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.pushBack(java.lang.String)",
    "snippet": "public void pushBack(String token) {\n            _pushbackToken \u003d token;\n            _index -\u003d token.length();\n        }",
    "begin_line": 128,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getAllInput#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getAllInput()",
    "snippet": "public String getAllInput() { return _input; }",
    "begin_line": 133,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getUsedInput#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getUsedInput()",
    "snippet": "public String getUsedInput() { return _input.substring(0, _index); }",
    "begin_line": 134,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getRemainingInput#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getRemainingInput()",
    "snippet": "public String getRemainingInput() { return _input.substring(_index); }",
    "begin_line": 135,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.emptyIterator#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.emptyIterator()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static \u003cT\u003e Iterator\u003cT\u003e emptyIterator() {\n        return (Iterator\u003cT\u003e) EMPTY_ITERATOR;\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cJavaType\u003e findSuperTypes(JavaType type, Class\u003c?\u003e endBefore,\n            boolean addClassItself) {\n        if ((type \u003d\u003d null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {\n            return Collections.emptyList();\n        }\n        List\u003cJavaType\u003e result \u003d new ArrayList\u003cJavaType\u003e(8);\n        _addSuperTypes(type, endBefore, result, addClassItself);\n        return result;\n    }",
    "begin_line": 58,
    "end_line": 66,
    "comment": "/** \n * Method that will find all sub-classes and implemented interfaces of a given class or interface. Classes are listed in order of precedence, starting with the immediate super-class, followed by interfaces class directly declares to implemented, and then recursively followed by parent of super-class and so forth. Note that \u003ccode\u003eObject.class\u003c/code\u003e is not included in the list regardless of whether \u003ccode\u003eendBefore\u003c/code\u003e argument is defined or not.\n * @param endBefore Super-type to NOT include in results, if any; whenencountered, will be ignored (and no super types are checked).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findRawSuperTypes#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findRawSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, boolean addClassItself) {\n        if ((cls \u003d\u003d null) || (cls \u003d\u003d endBefore) || (cls \u003d\u003d Object.class)) {\n            return Collections.emptyList();\n        }\n        List\u003cClass\u003c?\u003e\u003e result \u003d new ArrayList\u003cClass\u003c?\u003e\u003e(8);\n        _addRawSuperTypes(cls, endBefore, result, addClassItself);\n        return result;\n    }",
    "begin_line": 71,
    "end_line": 78,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperClasses#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findSuperClasses(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore,\n            boolean addClassItself) {\n        List\u003cClass\u003c?\u003e\u003e result \u003d new LinkedList\u003cClass\u003c?\u003e\u003e();\n        if ((cls !\u003d null) \u0026\u0026 (cls !\u003d endBefore))  {\n            if (addClassItself) {\n                result.add(cls);\n            }\n            while ((cls \u003d cls.getSuperclass()) !\u003d null) {\n                if (cls \u003d\u003d endBefore) {\n                    break;\n                }\n                result.add(cls);\n            }\n        }\n        return result;\n    }",
    "begin_line": 87,
    "end_line": 102,
    "comment": "/** \n * Method for finding all super classes (but not super interfaces) of given class, starting with the immediate super class and ending in the most distant one. Class itself is included if \u003ccode\u003eaddClassItself\u003c/code\u003e is true.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated findSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore) {\n        return findSuperTypes(cls, endBefore, new ArrayList\u003cClass\u003c?\u003e\u003e(8));\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Deprecated findSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, List\u003cClass\u003c?\u003e\u003e result) {\n        _addRawSuperTypes(cls, endBefore, result, false);\n        return result;\n    }",
    "begin_line": 110,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._addSuperTypes#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, java.util.Collection\u003ccom.fasterxml.jackson.databind.JavaType\u003e, boolean)",
    "snippet": "private static void _addSuperTypes(JavaType type, Class\u003c?\u003e endBefore, Collection\u003cJavaType\u003e result,\n            boolean addClassItself)\n    {\n        if (type \u003d\u003d null) {\n            return;\n        }\n        final Class\u003c?\u003e cls \u003d type.getRawClass();\n        if (cls \u003d\u003d endBefore || cls \u003d\u003d Object.class) { return; }\n        if (addClassItself) {\n            if (result.contains(type)) { // already added, no need to check supers\n                return;\n            }\n            result.add(type);\n        }\n        for (JavaType intCls : type.getInterfaces()) {\n            _addSuperTypes(intCls, endBefore, result, true);\n        }\n        _addSuperTypes(type.getSuperClass(), endBefore, result, true);\n    }",
    "begin_line": 115,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._addRawSuperTypes#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e, boolean)",
    "snippet": "private static void _addRawSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, Collection\u003cClass\u003c?\u003e\u003e result, boolean addClassItself) {\n        if (cls \u003d\u003d endBefore || cls \u003d\u003d null || cls \u003d\u003d Object.class) { return; }\n        if (addClassItself) {\n            if (result.contains(cls)) { // already added, no need to check supers\n                return;\n            }\n            result.add(cls);\n        }\n        for (Class\u003c?\u003e intCls : _interfaces(cls)) {\n            _addRawSuperTypes(intCls, endBefore, result, true);\n        }\n        _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true);\n    }",
    "begin_line": 135,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.canBeABeanType#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String canBeABeanType(Class\u003c?\u003e type)\n    {\n        // First: language constructs that ain\u0027t beans:\n        if (type.isAnnotation()) {\n            return \"annotation\";\n        }\n        if (type.isArray()) {\n            return \"array\";\n        }\n        if (type.isEnum()) {\n            return \"enum\";\n        }\n        if (type.isPrimitive()) {\n            return \"primitive\";\n        }\n\n        // Anything else? Seems valid, then\n        return null;\n    }",
    "begin_line": 159,
    "end_line": 177,
    "comment": "/** \n * @return Null if class might be a bean; type String (that identifieswhy it\u0027s not a bean) if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isLocalType#179",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static String isLocalType(Class\u003c?\u003e type, boolean allowNonStatic)\n    {\n        /* As per [JACKSON-187], GAE seems to throw SecurityExceptions\n         * here and there... and GAE itself has a bug, too\n         * (see []). Bah. So we need to catch some wayward exceptions on GAE\n         */\n        try {\n            // one more: method locals, anonymous, are not good:\n            if (hasEnclosingMethod(type)) {\n                return \"local/anonymous\";\n            }\n            \n            /* But how about non-static inner classes? Can\u0027t construct\n             * easily (theoretically, we could try to check if parent\n             * happens to be enclosing... but that gets convoluted)\n             */\n            if (!allowNonStatic) {\n                if (!Modifier.isStatic(type.getModifiers())) {\n                    if (getEnclosingClass(type) !\u003d null) {\n                        return \"non-static member class\";\n                    }\n                }\n            }\n        }\n        catch (SecurityException e) { }\n        catch (NullPointerException e) { }\n        return null;\n    }",
    "begin_line": 179,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getOuterClass#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getOuterClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getOuterClass(Class\u003c?\u003e type)\n    {\n        // as above, GAE has some issues...\n        try {\n            // one more: method locals, anonymous, are not good:\n            if (hasEnclosingMethod(type)) {\n                return null;\n            }\n            if (!Modifier.isStatic(type.getModifiers())) {\n                return getEnclosingClass(type);\n            }\n        } catch (SecurityException e) { }\n        return null;\n    }",
    "begin_line": 211,
    "end_line": 224,
    "comment": "/** \n * Method for finding enclosing class for non-static inner classes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isProxyType#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isProxyType(Class\u003c?\u003e type)\n    {\n        // As per [databind#57], should NOT disqualify JDK proxy:\n        /*\n        // Then: well-known proxy (etc) classes\n        if (Proxy.isProxyClass(type)) {\n            return true;\n        }\n        */\n        String name \u003d type.getName();\n        // Hibernate uses proxies heavily as well:\n        if (name.startsWith(\"net.sf.cglib.proxy.\")\n            || name.startsWith(\"org.hibernate.proxy.\")) {\n            return true;\n        }\n        // Not one of known proxies, nope:\n        return false;\n    }",
    "begin_line": 232,
    "end_line": 249,
    "comment": "/** \n * Helper method used to weed out dynamic Proxy types; types that do not expose concrete method API that we could use to figure out automatic Bean (property) based serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isConcrete#255",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isConcrete(Class\u003c?\u003e type)\n    {\n        int mod \u003d type.getModifiers();\n        return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n    }",
    "begin_line": 255,
    "end_line": 259,
    "comment": "/** \n * Helper method that checks if given class is a concrete one; that is, not an interface or abstract class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isConcrete#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.reflect.Member)",
    "snippet": "public static boolean isConcrete(Member member)\n    {\n        int mod \u003d member.getModifiers();\n        return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n    }",
    "begin_line": 261,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isCollectionMapOrArray#267",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isCollectionMapOrArray(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isCollectionMapOrArray(Class\u003c?\u003e type)\n    {\n        if (type.isArray()) return true;\n        if (Collection.class.isAssignableFrom(type)) return true;\n        if (Map.class.isAssignableFrom(type)) return true;\n        return false;\n    }",
    "begin_line": 267,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isBogusClass#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isBogusClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isBogusClass(Class\u003c?\u003e cls) {\n        return (cls \u003d\u003d Void.class || cls \u003d\u003d Void.TYPE\n                || cls \u003d\u003d com.fasterxml.jackson.databind.annotation.NoClass.class);\n    }",
    "begin_line": 275,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isNonStaticInnerClass#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isNonStaticInnerClass(Class\u003c?\u003e cls) {\n        return !Modifier.isStatic(cls.getModifiers())\n                \u0026\u0026 (getEnclosingClass(cls) !\u003d null);\n    }",
    "begin_line": 280,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isObjectOrPrimitive#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isObjectOrPrimitive(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isObjectOrPrimitive(Class\u003c?\u003e cls) {\n        return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\n    }",
    "begin_line": 288,
    "end_line": 290,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasClass#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasClass(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean hasClass(Object inst, Class\u003c?\u003e raw) {\n        // 10-Nov-2016, tatu: Could use `Class.isInstance()` if we didn\u0027t care\n        //    about being exactly that type\n        return (inst !\u003d null) \u0026\u0026 (inst.getClass() \u003d\u003d raw);\n    }",
    "begin_line": 295,
    "end_line": 299,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.verifyMustOverride#304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.verifyMustOverride(java.lang.Class\u003c?\u003e, java.lang.Object, java.lang.String)",
    "snippet": "public static void verifyMustOverride(Class\u003c?\u003e expType, Object instance,\n            String method)\n    {\n        if (instance.getClass() !\u003d expType) {\n            throw new IllegalStateException(String.format(\n                    \"Sub-class %s (of class %s) must override method \u0027%s\u0027\",\n                instance.getClass().getName(), expType.getName(), method));\n        }\n    }",
    "begin_line": 304,
    "end_line": 312,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasGetterSignature#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasGetterSignature(java.lang.reflect.Method)",
    "snippet": "@Deprecated hasGetterSignature(Method m)\n    {\n        // First: static methods can\u0027t be getters\n        if (Modifier.isStatic(m.getModifiers())) {\n            return false;\n        }\n        // Must take no args\n        Class\u003c?\u003e[] pts \u003d m.getParameterTypes();\n        if (pts !\u003d null \u0026\u0026 pts.length !\u003d 0) {\n            return false;\n        }\n        // Can\u0027t be a void method\n        if (Void.TYPE \u003d\u003d m.getReturnType()) {\n            return false;\n        }\n        // Otherwise looks ok:\n        return true;\n    }",
    "begin_line": 324,
    "end_line": 341,
    "comment": "/** \n * @deprecated Since 2.6 not used; may be removed before 3.x\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfError#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfError(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfError(Throwable t) {\n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        return t;\n    }",
    "begin_line": 355,
    "end_line": 360,
    "comment": "/** \n * Helper method that will check if argument is an  {@link Error}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfRTE#368",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfRTE(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfRTE(Throwable t) {\n        if (t instanceof RuntimeException) {\n            throw (RuntimeException) t;\n        }\n        return t;\n    }",
    "begin_line": 368,
    "end_line": 373,
    "comment": "/** \n * Helper method that will check if argument is an  {@link RuntimeException}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfIOE#381",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfIOE(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfIOE(Throwable t) throws IOException {\n        if (t instanceof IOException) {\n            throw (IOException) t;\n        }\n        return t;\n    }",
    "begin_line": 381,
    "end_line": 386,
    "comment": "/** \n * Helper method that will check if argument is an  {@link IOException}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getRootCause#398",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getRootCause(java.lang.Throwable)",
    "snippet": "public static Throwable getRootCause(Throwable t)\n    {\n        while (t.getCause() !\u003d null) {\n            t \u003d t.getCause();\n        }\n        return t;\n    }",
    "begin_line": 398,
    "end_line": 404,
    "comment": "/** \n * Method that can be used to find the \"root cause\", innermost of chained (wrapped) exceptions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwRootCauseIfIOE#413",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwRootCauseIfIOE(java.lang.Throwable)",
    "snippet": "public static Throwable throwRootCauseIfIOE(Throwable t) throws IOException {\n        return throwIfIOE(getRootCause(t));\n    }",
    "begin_line": 413,
    "end_line": 415,
    "comment": "/** \n * Method that works like by calling  {@link #getRootCause} and theneither throwing it (if instanceof  {@link IOException}), or return.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsIAE#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable)",
    "snippet": "public static void throwAsIAE(Throwable t) {\n        throwAsIAE(t, t.getMessage());\n    }",
    "begin_line": 421,
    "end_line": 423,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsIAE#430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void throwAsIAE(Throwable t, String msg)\n    {\n        throwIfRTE(t);\n        throwIfError(t);\n        throw new IllegalArgumentException(msg, t);\n    }",
    "begin_line": 430,
    "end_line": 435,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} (and withspecified message) if it is a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsMappingException#440",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsMappingException(com.fasterxml.jackson.databind.DeserializationContext, java.io.IOException)",
    "snippet": "public static \u003cT\u003e T throwAsMappingException(DeserializationContext ctxt,\n            IOException e0) throws JsonMappingException {\n        if (e0 instanceof JsonMappingException) {\n            throw (JsonMappingException) e0;\n        }\n        JsonMappingException e \u003d JsonMappingException.from(ctxt, e0.getMessage());\n        e.initCause(e0);\n        throw e;\n    }",
    "begin_line": 440,
    "end_line": 448,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.unwrapAndThrowAsIAE#455",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t)\n    {\n        throwAsIAE(getRootCause(t));\n    }",
    "begin_line": 455,
    "end_line": 458,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.unwrapAndThrowAsIAE#465",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t, String msg)\n    {\n        throwAsIAE(getRootCause(t), msg);\n    }",
    "begin_line": 465,
    "end_line": 468,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.closeOnFailAndThrowAsIAE#479",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIAE(JsonGenerator, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIAE(JsonGenerator g, Exception fail)\n            throws IOException\n    {\n        /* 04-Mar-2014, tatu: Let\u0027s try to prevent auto-closing of\n         *    structures, which typically causes more damage.\n         */\n        g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n        try {\n            g.close();\n        } catch (Exception e) {\n            fail.addSuppressed(e);\n        }\n        throwIfIOE(fail);\n        throwIfRTE(fail);\n        throw new RuntimeException(fail);\n    }",
    "begin_line": 479,
    "end_line": 494,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close output generator in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.closeOnFailAndThrowAsIAE#505",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIAE(JsonGenerator, java.io.Closeable, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIAE(JsonGenerator g,\n            Closeable toClose, Exception fail)\n        throws IOException\n    {\n        if (g !\u003d null) {\n            g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n            try {\n                g.close();\n            } catch (Exception e) {\n                fail.addSuppressed(e);\n            }\n        }\n        if (toClose !\u003d null) {\n            try {\n                toClose.close();\n            } catch (Exception e) {\n                fail.addSuppressed(e);\n            }\n        }\n        throwIfIOE(fail);\n        throwIfRTE(fail);\n        throw new RuntimeException(fail);\n    }",
    "begin_line": 505,
    "end_line": 527,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close given  {@link Closeable}in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.createInstance#548",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.createInstance(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003e T createInstance(Class\u003cT\u003e cls, boolean canFixAccess)\n        throws IllegalArgumentException\n    {\n        Constructor\u003cT\u003e ctor \u003d findConstructor(cls, canFixAccess);\n        if (ctor \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default (no arg) constructor\");\n        }\n        try {\n            return ctor.newInstance();\n        } catch (Exception e) {\n            ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to instantiate class \"+cls.getName()+\", problem: \"+e.getMessage());\n            return null;\n        }\n    }",
    "begin_line": 548,
    "end_line": 561,
    "comment": "/** \n * Method that can be called to try to create an instantiate of specified type. Instantiation is done using default no-argument constructor.\n * @param canFixAccess Whether it is possible to try to change accessrights of the default constructor (in case it is not publicly accessible) or not.\n * @throws IllegalArgumentException If instantiation fails for any reason;except for cases where constructor throws an unchecked exception (which will be passed as is)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findConstructor#563",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findConstructor(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003e Constructor\u003cT\u003e findConstructor(Class\u003cT\u003e cls, boolean forceAccess)\n        throws IllegalArgumentException\n    {\n        try {\n            Constructor\u003cT\u003e ctor \u003d cls.getDeclaredConstructor();\n            if (forceAccess) {\n                checkAndFixAccess(ctor, forceAccess);\n            } else {\n                // Has to be public...\n                if (!Modifier.isPublic(ctor.getModifiers())) {\n                    throw new IllegalArgumentException(\"Default constructor for \"+cls.getName()+\" is not accessible (non-public?): not allowed to try modify access via Reflection: can not instantiate type\");\n                }\n            }\n            return ctor;\n        } catch (NoSuchMethodException e) {\n            ;\n        } catch (Exception e) {\n            ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to find default constructor of class \"+cls.getName()+\", problem: \"+e.getMessage());\n        }\n        return null;\n    }",
    "begin_line": 563,
    "end_line": 583,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.classOf#594",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.classOf(java.lang.Object)",
    "snippet": "public static Class\u003c?\u003e classOf(Object inst) {\n        if (inst \u003d\u003d null) {\n            return null;\n        }\n        return inst.getClass();\n    }",
    "begin_line": 594,
    "end_line": 599,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nonNull#604",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nonNull(T, T)",
    "snippet": "public static \u003cT\u003e T nonNull(T valueOrNull, T defaultValue) {\n        return (valueOrNull \u003d\u003d null) ? defaultValue : valueOrNull;\n    }",
    "begin_line": 604,
    "end_line": 606,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nullOrToString#611",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nullOrToString(java.lang.Object)",
    "snippet": "public static String nullOrToString(Object value) {\n        if (value \u003d\u003d null) {\n            return null;\n        }\n        return value.toString();\n    }",
    "begin_line": 611,
    "end_line": 616,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nonNullString#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nonNullString(java.lang.String)",
    "snippet": "public static String nonNullString(String str) {\n        if (str \u003d\u003d null) {\n            return \"\";\n        }\n        return str;\n    }",
    "begin_line": 621,
    "end_line": 626,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.quotedOr#634",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.quotedOr(java.lang.Object, java.lang.String)",
    "snippet": "public static String quotedOr(Object str, String forNull) {\n        if (str \u003d\u003d null) {\n            return forNull;\n        }\n        return String.format(\"\\\"%s\\\"\", str);\n    }",
    "begin_line": 634,
    "end_line": 639,
    "comment": "/** \n * Returns either quoted value (with double-quotes) -- if argument non-null String -- or String NULL (no quotes) (if null).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getClassDescription#652",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getClassDescription(java.lang.Object)",
    "snippet": "public static String getClassDescription(Object classOrInstance)\n    {\n        if (classOrInstance \u003d\u003d null) {\n            return \"unknown\";\n        }\n        Class\u003c?\u003e cls \u003d (classOrInstance instanceof Class\u003c?\u003e) ?\n            (Class\u003c?\u003e) classOrInstance : classOrInstance.getClass();\n        return cls.getName();\n    }",
    "begin_line": 652,
    "end_line": 660,
    "comment": "/** \n * Helper method used to construct appropriate description when passed either type (Class) or an instance; in latter case, class of instance is to be used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.classNameOf#665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.classNameOf(java.lang.Object)",
    "snippet": "public static String classNameOf(Object inst) {\n        if (inst \u003d\u003d null) {\n            return \"[null]\";\n        }\n        return inst.getClass().getName();\n    }",
    "begin_line": 665,
    "end_line": 670,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nameOf#678",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String nameOf(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return \"[null]\";\n        }\n        if (cls.isArray()) {\n            return nameOf(cls.getComponentType())+\"[]\";\n        }\n        if (cls.isPrimitive()) {\n            cls.getSimpleName();\n        }\n        return cls.getName();\n    }",
    "begin_line": 678,
    "end_line": 689,
    "comment": "/** \n * Returns either `cls.getName()` (if `cls` not null), or \"[null]\" if `cls` is null.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nameOf#697",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(com.fasterxml.jackson.databind.util.Named)",
    "snippet": "public static String nameOf(Named named) {\n        if (named \u003d\u003d null) {\n            return \"[null]\";\n        }\n        return String.format(\"\u0027%s\u0027\", named.getName());\n    }",
    "begin_line": 697,
    "end_line": 702,
    "comment": "/** \n * Returns either (double-)quoted `named.getName()` (if `named` not null), or \"[null]\" if `named` is null.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.defaultValue#714",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.defaultValue(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Object defaultValue(Class\u003c?\u003e cls)\n    {\n        if (cls \u003d\u003d Integer.TYPE) {\n            return Integer.valueOf(0);\n        }\n        if (cls \u003d\u003d Long.TYPE) {\n            return Long.valueOf(0L);\n        }\n        if (cls \u003d\u003d Boolean.TYPE) {\n            return Boolean.FALSE;\n        }\n        if (cls \u003d\u003d Double.TYPE) {\n            return Double.valueOf(0.0);\n        }\n        if (cls \u003d\u003d Float.TYPE) {\n            return Float.valueOf(0.0f);\n        }\n        if (cls \u003d\u003d Byte.TYPE) {\n            return Byte.valueOf((byte) 0);\n        }\n        if (cls \u003d\u003d Short.TYPE) {\n            return Short.valueOf((short) 0);\n        }\n        if (cls \u003d\u003d Character.TYPE) {\n            return \u0027\\0\u0027;\n        }\n        throw new IllegalArgumentException(\"Class \"+cls.getName()+\" is not a primitive type\");\n    }",
    "begin_line": 714,
    "end_line": 741,
    "comment": "/** \n * Helper method used to get default value for wrappers used for primitive types (0 for Integer etc)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.wrapperType#747",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.wrapperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e wrapperType(Class\u003c?\u003e primitiveType)\n    {\n        if (primitiveType \u003d\u003d Integer.TYPE) {\n            return Integer.class;\n        }\n        if (primitiveType \u003d\u003d Long.TYPE) {\n            return Long.class;\n        }\n        if (primitiveType \u003d\u003d Boolean.TYPE) {\n            return Boolean.class;\n        }\n        if (primitiveType \u003d\u003d Double.TYPE) {\n            return Double.class;\n        }\n        if (primitiveType \u003d\u003d Float.TYPE) {\n            return Float.class;\n        }\n        if (primitiveType \u003d\u003d Byte.TYPE) {\n            return Byte.class;\n        }\n        if (primitiveType \u003d\u003d Short.TYPE) {\n            return Short.class;\n        }\n        if (primitiveType \u003d\u003d Character.TYPE) {\n            return Character.class;\n        }\n        throw new IllegalArgumentException(\"Class \"+primitiveType.getName()+\" is not a primitive type\");\n    }",
    "begin_line": 747,
    "end_line": 774,
    "comment": "/** \n * Helper method for finding wrapper type for given primitive type (why isn\u0027t there one in JDK?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.primitiveType#782",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e primitiveType(Class\u003c?\u003e type)\n    {\n        if (type.isPrimitive()) {\n            return type;\n        }\n        \n        if (type \u003d\u003d Integer.class) {\n            return Integer.TYPE;\n        }\n        if (type \u003d\u003d Long.class) {\n            return Long.TYPE;\n        }\n        if (type \u003d\u003d Boolean.class) {\n            return Boolean.TYPE;\n        }\n        if (type \u003d\u003d Double.class) {\n            return Double.TYPE;\n        }\n        if (type \u003d\u003d Float.class) {\n            return Float.TYPE;\n        }\n        if (type \u003d\u003d Byte.class) {\n            return Byte.TYPE;\n        }\n        if (type \u003d\u003d Short.class) {\n            return Short.TYPE;\n        }\n        if (type \u003d\u003d Character.class) {\n            return Character.TYPE;\n        }\n        return null;\n    }",
    "begin_line": 782,
    "end_line": 813,
    "comment": "/** \n * Method that can be used to find primitive type for given class if (but only if) it is either wrapper type or primitive type; returns `null` if type is neither.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.checkAndFixAccess#830",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member)",
    "snippet": "@Deprecated\n    public static void checkAndFixAccess(Member member) {\n        checkAndFixAccess(member, false);\n    }",
    "begin_line": 830,
    "end_line": 832,
    "comment": "/** \n * Equivalent to call: \u003cpre\u003e checkAndFixAccess(member, false); \u003c/pre\u003e\n * @deprecated Since 2.7 call variant that takes boolean flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.checkAndFixAccess#845",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member, boolean)",
    "snippet": "public static void checkAndFixAccess(Member member, boolean force)\n    {\n        // We know all members are also accessible objects...\n        AccessibleObject ao \u003d (AccessibleObject) member;\n\n        /* 14-Jan-2009, tatu: It seems safe and potentially beneficial to\n         *   always to make it accessible (latter because it will force\n         *   skipping checks we have no use for...), so let\u0027s always call it.\n         */\n        try {\n            if (force || \n                    (!Modifier.isPublic(member.getModifiers())\n                            || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {\n                ao.setAccessible(true);\n            }\n        } catch (SecurityException se) {\n            // 17-Apr-2009, tatu: Related to [JACKSON-101]: this can fail on platforms like\n            // Google App Engine); so let\u0027s only fail if we really needed it...\n            if (!ao.isAccessible()) {\n                Class\u003c?\u003e declClass \u003d member.getDeclaringClass();\n                throw new IllegalArgumentException(\"Can not access \"+member+\" (from class \"+declClass.getName()+\"; failed to set access: \"+se.getMessage());\n            }\n        }\n    }",
    "begin_line": 845,
    "end_line": 868,
    "comment": "/** \n * Method that is called if a  {@link Member} may need forced access,to force a field, method or constructor to be accessible: this is done by calling  {@link AccessibleObject#setAccessible(boolean)}.\n * @param member Accessor to call \u003ccode\u003esetAccessible()\u003c/code\u003e on.\n * @param force Whether to always try to make accessor accessible (true),or only if needed as per access rights (false)\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#882",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumSet\u003c?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumSet\u003c?\u003e s)\n    {\n        // First things first: if not empty, easy to determine\n        if (!s.isEmpty()) {\n            return findEnumType(s.iterator().next());\n        }\n        // Otherwise need to locate using an internal field\n        return EnumTypeLocator.instance.enumTypeFor(s);\n    }",
    "begin_line": 882,
    "end_line": 890,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#898",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumMap\u003c?,?\u003e m)\n    {\n        if (!m.isEmpty()) {\n            return findEnumType(m.keySet().iterator().next());\n        }\n        // Otherwise need to locate using an internal field\n        return EnumTypeLocator.instance.enumTypeFor(m);\n    }",
    "begin_line": 898,
    "end_line": 905,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#914",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Enum\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Enum\u003c?\u003e en)\n    {\n        // enums with \"body\" are sub-classes of the formal type\n    \tClass\u003c?\u003e ec \u003d en.getClass();\n    \tif (ec.getSuperclass() !\u003d Enum.class) {\n    \t    ec \u003d ec.getSuperclass();\n    \t}\n    \treturn (Class\u003c? extends Enum\u003c?\u003e\u003e) ec;\n    }",
    "begin_line": 914,
    "end_line": 922,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given enumeration. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#931",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Class\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Class\u003c?\u003e cls)\n    {\n        // enums with \"body\" are sub-classes of the formal type\n        if (cls.getSuperclass() !\u003d Enum.class) {\n            cls \u003d cls.getSuperclass();\n        }\n        return (Class\u003c? extends Enum\u003c?\u003e\u003e) cls;\n    }",
    "begin_line": 931,
    "end_line": 938,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given class of an enumeration value. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findFirstAnnotatedEnumValue#951",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findFirstAnnotatedEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e, java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT extends Annotation\u003e Enum\u003c?\u003e findFirstAnnotatedEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumClass, Class\u003cT\u003e annotationClass)\n    {\n        Field[] fields \u003d getDeclaredFields(enumClass);\n        for (Field field : fields) {\n            if (field.isEnumConstant()) {\n                Annotation defaultValueAnnotation \u003d field.getAnnotation(annotationClass);\n                if (defaultValueAnnotation !\u003d null) {\n                    final String name \u003d field.getName();\n                    for (Enum\u003c?\u003e enumValue : enumClass.getEnumConstants()) {\n                        if (name.equals(enumValue.name())) {\n                            return enumValue;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 951,
    "end_line": 968,
    "comment": "/** \n * A method that will look for the first Enum value annotated with the given Annotation. \u003cp\u003e If there\u0027s more than one value annotated, the first one found will be returned. Which one exactly is used is undetermined.\n * @param enumClass The Enum class to scan for a value with the given annotation\n * @param annotationClass The annotation to look for.\n * @return the Enum value annotated with the given Annotation or {@code null} if none is found.\n * @throws IllegalArgumentException if there\u0027s a reflection issue accessing the Enum\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isJacksonStdImpl#986",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Object)",
    "snippet": "public static boolean isJacksonStdImpl(Object impl) {\n        return (impl \u003d\u003d null) || isJacksonStdImpl(impl.getClass());\n    }",
    "begin_line": 986,
    "end_line": 988,
    "comment": "/** \n * Method that can be called to determine if given Object is the default implementation Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on handler (serializer, deserializer etc)class. \u003cp\u003e NOTE: passing `null` is legal, and will result in \u003ccode\u003etrue\u003c/code\u003e being returned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isJacksonStdImpl#990",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isJacksonStdImpl(Class\u003c?\u003e implClass) {\n        return (implClass.getAnnotation(JacksonStdImpl.class) !\u003d null);\n    }",
    "begin_line": 990,
    "end_line": 992,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getPackageName#1006",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageName(Class\u003c?\u003e cls) {\n        Package pkg \u003d cls.getPackage();\n        return (pkg \u003d\u003d null) ? null : pkg.getName();\n    }",
    "begin_line": 1006,
    "end_line": 1009,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasEnclosingMethod#1014",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasEnclosingMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean hasEnclosingMethod(Class\u003c?\u003e cls) {\n        return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\n    }",
    "begin_line": 1014,
    "end_line": 1016,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaredFields#1021",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredFields(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Field[] getDeclaredFields(Class\u003c?\u003e cls) {\n        return cls.getDeclaredFields();\n    }",
    "begin_line": 1021,
    "end_line": 1023,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaredMethods#1028",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredMethods(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method[] getDeclaredMethods(Class\u003c?\u003e cls) {\n        return cls.getDeclaredMethods();\n    }",
    "begin_line": 1028,
    "end_line": 1030,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findClassAnnotations#1035",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Annotation[] findClassAnnotations(Class\u003c?\u003e cls) {\n        if (isObjectOrPrimitive(cls)) {\n            return NO_ANNOTATIONS;\n        }\n        return cls.getDeclaredAnnotations();\n    }",
    "begin_line": 1035,
    "end_line": 1040,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getClassMethods#1049",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getClassMethods(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method[] getClassMethods(Class\u003c?\u003e cls)\n    {\n        try {\n            return ClassUtil.getDeclaredMethods(cls);\n        } catch (final NoClassDefFoundError ex) {\n            // One of the methods had a class that was not found in the cls.getClassLoader.\n            // Maybe the developer was nice and has a different class loader for this context.\n            final ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();\n            if (loader \u003d\u003d null){\n                // Nope... this is going to end poorly\n                throw ex;\n            }\n            final Class\u003c?\u003e contextClass;\n            try {\n                contextClass \u003d loader.loadClass(cls.getName());\n            } catch (ClassNotFoundException e) {\n                ex.addSuppressed(e);\n                throw ex;\n            }\n            return contextClass.getDeclaredMethods(); // Cross fingers\n        }\n    }",
    "begin_line": 1049,
    "end_line": 1070,
    "comment": "/** \n * Helper method that gets methods declared in given class; usually a simple thing, but sometimes (as per [databind#785]) more complicated, depending on classloader setup.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getConstructors#1075",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructors(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Ctor[] getConstructors(Class\u003c?\u003e cls) {\n        // Note: can NOT skip abstract classes as they may be used with mix-ins\n        // and for regular use shouldn\u0027t really matter.\n        if (cls.isInterface() || isObjectOrPrimitive(cls)) {\n            return NO_CTORS;\n        }\n        Constructor\u003c?\u003e[] rawCtors \u003d cls.getDeclaredConstructors();\n        final int len \u003d rawCtors.length;\n        Ctor[] result \u003d new Ctor[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result[i] \u003d new Ctor(rawCtors[i]);\n        }\n        return result;\n    }",
    "begin_line": 1075,
    "end_line": 1088,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaringClass#1096",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getDeclaringClass(Class\u003c?\u003e cls) {\n        return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();\n    }",
    "begin_line": 1096,
    "end_line": 1098,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getGenericSuperclass#1103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericSuperclass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type getGenericSuperclass(Class\u003c?\u003e cls) {\n        return cls.getGenericSuperclass();\n    }",
    "begin_line": 1103,
    "end_line": 1105,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getGenericInterfaces#1110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type[] getGenericInterfaces(Class\u003c?\u003e cls) {\n        return cls.getGenericInterfaces();\n    }",
    "begin_line": 1110,
    "end_line": 1112,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getEnclosingClass#1117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getEnclosingClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getEnclosingClass(Class\u003c?\u003e cls) {\n        // Caching does not seem worthwhile, as per profiling\n        return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\n    }",
    "begin_line": 1117,
    "end_line": 1120,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._interfaces#1122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._interfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "private static Class\u003c?\u003e[] _interfaces(Class\u003c?\u003e cls) {\n        return cls.getInterfaces();\n    }",
    "begin_line": 1122,
    "end_line": 1124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.EnumTypeLocator#1143",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.EnumTypeLocator()",
    "snippet": "private EnumTypeLocator() {\n            //JDK uses following fields to store information about actual Enumeration\n            // type for EnumSets, EnumMaps...\n    \t        enumSetTypeField \u003d locateField(EnumSet.class, \"elementType\", Class.class);\n    \t        enumMapTypeField \u003d locateField(EnumMap.class, \"elementType\", Class.class);\n        }",
    "begin_line": 1143,
    "end_line": 1148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumSet\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumSet\u003c?\u003e set)\n        {\n            if (enumSetTypeField !\u003d null) {\n                return (Class\u003c? extends Enum\u003c?\u003e\u003e) get(set, enumSetTypeField);\n            }\n            throw new IllegalStateException(\"Can not figure out type for EnumSet (odd JDK platform?)\");\n        }",
    "begin_line": 1151,
    "end_line": 1157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumMap\u003c?,?\u003e set)\n        {\n            if (enumMapTypeField !\u003d null) {\n                return (Class\u003c? extends Enum\u003c?\u003e\u003e) get(set, enumMapTypeField);\n            }\n            throw new IllegalStateException(\"Can not figure out type for EnumMap (odd JDK platform?)\");\n        }",
    "begin_line": 1160,
    "end_line": 1166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.get#1168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.get(java.lang.Object, java.lang.reflect.Field)",
    "snippet": "private Object get(Object bean, Field field)\n        {\n            try {\n                return field.get(bean);\n            } catch (Exception e) {\n                throw new IllegalArgumentException(e);\n            }\n        }",
    "begin_line": 1168,
    "end_line": 1175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.locateField#1177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.locateField(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Field locateField(Class\u003c?\u003e fromClass, String expectedName, Class\u003c?\u003e type)\n        {\n            Field found \u003d null;\n    \t        // First: let\u0027s see if we can find exact match:\n            Field[] fields \u003d getDeclaredFields(fromClass);\n    \t        for (Field f : fields) {\n    \t            if (expectedName.equals(f.getName()) \u0026\u0026 f.getType() \u003d\u003d type) {\n    \t                found \u003d f;\n    \t                break;\n    \t            }\n    \t        }\n    \t        // And if not, if there is just one field with the type, that field\n    \t        if (found \u003d\u003d null) {\n    \t            for (Field f : fields) {\n    \t                if (f.getType() \u003d\u003d type) {\n    \t                    // If more than one, can\u0027t choose\n    \t                    if (found !\u003d null) return null;\n    \t                    found \u003d f;\n    \t                }\n    \t            }\n    \t        }\n    \t        if (found !\u003d null) { // it\u0027s non-public, need to force accessible\n    \t            try {\n    \t                found.setAccessible(true);\n    \t            } catch (Throwable t) { }\n    \t        }\n    \t        return found;\n        }",
    "begin_line": 1177,
    "end_line": 1204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.Ctor#1229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.Ctor(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "public Ctor(Constructor\u003c?\u003e ctor) {\n            _ctor \u003d ctor;\n        }",
    "begin_line": 1229,
    "end_line": 1231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getConstructor#1233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructor()",
    "snippet": "public Constructor\u003c?\u003e getConstructor() {\n            return _ctor;\n        }",
    "begin_line": 1233,
    "end_line": 1235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParamCount#1237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParamCount()",
    "snippet": "public int getParamCount() {\n            int c \u003d _paramCount;\n            if (c \u003c 0) {\n                c \u003d _ctor.getParameterTypes().length;\n                _paramCount \u003d c;\n            }\n            return c;\n        }",
    "begin_line": 1237,
    "end_line": 1244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaringClass#1246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass()",
    "snippet": "public Class\u003c?\u003e getDeclaringClass() {\n            return _ctor.getDeclaringClass();\n        }",
    "begin_line": 1246,
    "end_line": 1248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaredAnnotations#1250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredAnnotations()",
    "snippet": "public Annotation[] getDeclaredAnnotations() {\n            Annotation[] result \u003d _annotations;\n            if (result \u003d\u003d null) {\n                result \u003d _ctor.getDeclaredAnnotations();\n                _annotations \u003d result;\n            }\n            return result;\n        }",
    "begin_line": 1250,
    "end_line": 1257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParameterAnnotations#1259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParameterAnnotations()",
    "snippet": "public  Annotation[][] getParameterAnnotations() {\n            Annotation[][] result \u003d _paramAnnotations;\n            if (result \u003d\u003d null) {\n                result \u003d _ctor.getParameterAnnotations();\n                _paramAnnotations \u003d result;\n            }\n            return result;\n        }",
    "begin_line": 1259,
    "end_line": 1266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.LRUMap#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int, int)",
    "snippet": "public LRUMap(int initialEntries, int maxEntries)\n    {\n        // We\u0027ll use concurrency level of 4, seems reasonable\n        _map \u003d new ConcurrentHashMap\u003cK,V\u003e(initialEntries, 0.8f, 4);\n        _maxEntries \u003d maxEntries;\n    }",
    "begin_line": 32,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.put#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.put(K, V)",
    "snippet": "public V put(K key, V value) {\n        if (_map.size() \u003e\u003d _maxEntries) {\n            // double-locking, yes, but safe here; trying to avoid \"clear storms\"\n            synchronized (this) {\n                if (_map.size() \u003e\u003d _maxEntries) {\n                    clear();\n                }\n            }\n        }\n        return _map.put(key, value);\n    }",
    "begin_line": 39,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.putIfAbsent#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent(K, V)",
    "snippet": "public V putIfAbsent(K key, V value) {\n        // not 100% optimal semantically, but better from correctness (never exceeds\n        // defined maximum) and close enough all in all:\n        if (_map.size() \u003e\u003d _maxEntries) {\n            synchronized (this) {\n                if (_map.size() \u003e\u003d _maxEntries) {\n                    clear();\n                }\n            }\n        }\n        return _map.putIfAbsent(key, value);\n    }",
    "begin_line": 54,
    "end_line": 65,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.get#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)",
    "snippet": "public V get(Object key) {  return _map.get(key); }",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.clear#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.clear()",
    "snippet": "public void clear() { _map.clear(); }",
    "begin_line": 70,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.size#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.size()",
    "snippet": "public int size() { return _map.size(); }",
    "begin_line": 71,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readObject#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream in) throws IOException {\n        _jdkSerializeMaxEntries \u003d in.readInt();\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.writeObject#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream out) throws IOException {\n        out.writeInt(_jdkSerializeMaxEntries);\n    }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readResolve#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readResolve()",
    "snippet": "protected Object readResolve() {\n        return new LRUMap\u003cObject,Object\u003e(_jdkSerializeMaxEntries, _jdkSerializeMaxEntries);\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.RootNameLookup#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()",
    "snippet": "public RootNameLookup() {\n        _rootNames \u003d new LRUMap\u003cClassKey,PropertyName\u003e(20, 200);\n   }",
    "begin_line": 21,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.findRootName#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public PropertyName findRootName(JavaType rootType, MapperConfig\u003c?\u003e config) {\n        return findRootName(rootType.getRawClass(), config);\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.findRootName#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.findRootName(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public PropertyName findRootName(Class\u003c?\u003e rootType, MapperConfig\u003c?\u003e config)\n    {\n        ClassKey key \u003d new ClassKey(rootType);\n        PropertyName name \u003d _rootNames.get(key); \n        if (name !\u003d null) {\n            return name;\n        }\n        BeanDescription beanDesc \u003d config.introspectClassAnnotations(rootType);\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        AnnotatedClass ac \u003d beanDesc.getClassInfo();\n        name \u003d intr.findRootName(ac);\n        // No answer so far? Let\u0027s just default to using simple class name\n        if (name \u003d\u003d null || !name.hasSimpleName()) {\n            // Should we strip out enclosing class tho? For now, nope:\n            name \u003d PropertyName.construct(rootType.getSimpleName());\n        }\n        _rootNames.put(key, name);\n        return name;\n    }",
    "begin_line": 29,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.readResolve#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.readResolve()",
    "snippet": "protected Object readResolve() {\n        return new RootNameLookup();\n    }",
    "begin_line": 59,
    "end_line": 61,
    "comment": "/** \n * Need to override to reproduce cache object via constructor, instead of serialize/deserialize (since we do NOT want to retain cached data)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat()",
    "snippet": "public StdDateFormat() {\n        _locale \u003d DEFAULT_LOCALE;\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat(java.util.TimeZone, java.util.Locale)",
    "snippet": "@Deprecated StdDateFormat(TimeZone tz, Locale loc) {\n        _timezone \u003d tz;\n        _locale \u003d loc;\n    }",
    "begin_line": 139,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat(java.util.TimeZone, java.util.Locale, java.lang.Boolean)",
    "snippet": "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient) {\n        _timezone \u003d tz;\n        _locale \u003d loc;\n        _lenient \u003d lenient;\n    }",
    "begin_line": 144,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getDefaultTimeZone#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getDefaultTimeZone()",
    "snippet": "public static TimeZone getDefaultTimeZone() {\n        return DEFAULT_TIMEZONE;\n    }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withTimeZone#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withTimeZone(java.util.TimeZone)",
    "snippet": "public StdDateFormat withTimeZone(TimeZone tz) {\n        if (tz \u003d\u003d null) {\n            tz \u003d DEFAULT_TIMEZONE;\n        }\n        if ((tz \u003d\u003d _timezone) || tz.equals(_timezone)) {\n            return this;\n        }\n        return new StdDateFormat(tz, _locale, _lenient);\n    }",
    "begin_line": 158,
    "end_line": 166,
    "comment": "/** \n * Method used for creating a new instance with specified timezone; if no timezone specified, defaults to the default timezone (UTC).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withLocale#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withLocale(java.util.Locale)",
    "snippet": "public StdDateFormat withLocale(Locale loc) {\n        if (loc.equals(_locale)) {\n            return this;\n        }\n        return new StdDateFormat(_timezone, loc, _lenient);\n    }",
    "begin_line": 168,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withLenient#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withLenient(java.lang.Boolean)",
    "snippet": "public StdDateFormat withLenient(Boolean b) {\n        if (_equals(b, _lenient)) {\n            return this;\n        }\n        return new StdDateFormat(_timezone, _locale, b);\n    }",
    "begin_line": 178,
    "end_line": 183,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.clone#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.clone()",
    "snippet": "@Override\n    public StdDateFormat clone() {\n        /* Although there is that much state to share, we do need to\n         * orchestrate a bit, mostly since timezones may be changed\n         */\n        return new StdDateFormat(_timezone, _locale, _lenient);\n    }",
    "begin_line": 186,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getISO8601Format#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(java.util.TimeZone)",
    "snippet": "@Deprecated\n    public static DateFormat getISO8601Format(TimeZone tz) {\n        return getISO8601Format(tz, DEFAULT_LOCALE);\n    }",
    "begin_line": 197,
    "end_line": 199,
    "comment": "/** \n * @deprecated Since 2.4; use variant that takes Locale\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getISO8601Format#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(java.util.TimeZone, java.util.Locale)",
    "snippet": "public static DateFormat getISO8601Format(TimeZone tz, Locale loc) {\n        return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);\n    }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * Method for getting a non-shared DateFormat instance that uses specified timezone and can handle simple ISO-8601 compliant date format.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getRFC1123Format#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getRFC1123Format(java.util.TimeZone, java.util.Locale)",
    "snippet": "public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) {\n        return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);\n    }",
    "begin_line": 219,
    "end_line": 222,
    "comment": "/** \n * Method for getting a non-shared DateFormat instance that uses specific timezone and can handle RFC-1123 compliant date format.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getTimeZone#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getTimeZone()",
    "snippet": "@Override getTimeZone() {\n        return _timezone;\n    }",
    "begin_line": 231,
    "end_line": 233,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.setTimeZone#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.setTimeZone(java.util.TimeZone)",
    "snippet": "@Override\n    public void setTimeZone(TimeZone tz)\n    {\n        /* DateFormats are timezone-specific (via Calendar contained),\n         * so need to reset instances if timezone changes:\n         */\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone \u003d tz;\n        }\n    }",
    "begin_line": 236,
    "end_line": 245,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.setLenient#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.setLenient(boolean)",
    "snippet": "@Override setLenient(boolean enabled) {\n        Boolean newValue \u003d Boolean.valueOf(enabled);\n        if (!_equals(newValue, _lenient)) {\n            _lenient \u003d newValue;\n            // and since leniency settings may have been used:\n            _clearFormats();\n        }\n    }",
    "begin_line": 253,
    "end_line": 260,
    "comment": "/** \n * Need to override since we need to keep track of leniency locally, and not via underlying  {@link Calendar} instance like base classdoes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.isLenient#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.isLenient()",
    "snippet": "@Override isLenient() {\n        // default is, I believe, true\n        return (_lenient \u003d\u003d null) || _lenient.booleanValue();\n    }",
    "begin_line": 263,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parse#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parse(java.lang.String)",
    "snippet": "@Override\n    public Date parse(String dateStr) throws ParseException\n    {\n        dateStr \u003d dateStr.trim();\n        ParsePosition pos \u003d new ParsePosition(0);\n\n        Date dt;\n\n        if (looksLikeISO8601(dateStr)) { // also includes \"plain\"\n            dt \u003d parseAsISO8601(dateStr, pos, true);\n        } else {\n            // Also consider \"stringified\" simple time stamp\n            int i \u003d dateStr.length();\n            while (--i \u003e\u003d 0) {\n                char ch \u003d dateStr.charAt(i);\n                if (ch \u003c \u00270\u0027 || ch \u003e \u00279\u0027) {\n                    // 07-Aug-2013, tatu: And [databind#267] points out that negative numbers should also work\n                    if (i \u003e 0 || ch !\u003d \u0027-\u0027) {\n                        break;\n                    }\n                }\n            }\n            if ((i \u003c 0)\n                // let\u0027s just assume negative numbers are fine (can\u0027t be RFC-1123 anyway); check length for positive\n                    \u0026\u0026 (dateStr.charAt(0) \u003d\u003d \u0027-\u0027 || NumberInput.inLongRange(dateStr, false))) {\n                dt \u003d new Date(Long.parseLong(dateStr));\n            } else {\n                // Otherwise, fall back to using RFC 1123\n                dt \u003d parseAsRFC1123(dateStr, pos);\n            }\n        }\n        if (dt !\u003d null) {\n            return dt;\n        }\n\n        StringBuilder sb \u003d new StringBuilder();\n        for (String f : ALL_FORMATS) {\n            if (sb.length() \u003e 0) {\n                sb.append(\"\\\", \\\"\");\n            } else {\n                sb.append(\u0027\"\u0027);\n            }\n            sb.append(f);\n        }\n        sb.append(\u0027\"\u0027);\n        throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());\n    }",
    "begin_line": 275,
    "end_line": 322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parse#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parse(java.lang.String, java.text.ParsePosition)",
    "snippet": "@Override\n    public Date parse(String dateStr, ParsePosition pos)\n    {\n        if (looksLikeISO8601(dateStr)) { // also includes \"plain\"\n            try {\n                return parseAsISO8601(dateStr, pos, false);\n            } catch (ParseException e) { // will NOT be thrown due to false but is declared...\n                return null;\n            }\n        }\n        // Also consider \"stringified\" simple time stamp\n        int i \u003d dateStr.length();\n        while (--i \u003e\u003d 0) {\n            char ch \u003d dateStr.charAt(i);\n            if (ch \u003c \u00270\u0027 || ch \u003e \u00279\u0027) {\n                // 07-Aug-2013, tatu: And [databind#267] points out that negative numbers should also work\n                if (i \u003e 0 || ch !\u003d \u0027-\u0027) {\n                    break;\n                }\n            }\n        }\n        if (i \u003c 0) { // all digits\n            // let\u0027s just assume negative numbers are fine (can\u0027t be RFC-1123 anyway); check length for positive\n            if (dateStr.charAt(0) \u003d\u003d \u0027-\u0027 || NumberInput.inLongRange(dateStr, false)) {\n                return new Date(Long.parseLong(dateStr));\n            }\n        }\n        // Otherwise, fall back to using RFC 1123\n        return parseAsRFC1123(dateStr, pos);\n    }",
    "begin_line": 325,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.format#362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)",
    "snippet": "@Override\n    public StringBuffer format(Date date, StringBuffer toAppendTo,\n            FieldPosition fieldPosition)\n    {\n        if (_formatISO8601 \u003d\u003d null) {\n            _formatISO8601 \u003d _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale, _lenient);\n        }\n        return _formatISO8601.format(date, toAppendTo, fieldPosition);\n    }",
    "begin_line": 362,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.toString#379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.toString()",
    "snippet": "@Override\n    public String toString() {\n        return String.format(\"DateFormat %s: (timezone: %s, locale: %s)\",\n                getClass().getName(), _timezone, _locale);\n    }",
    "begin_line": 379,
    "end_line": 382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.toPattern#384",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.toPattern()",
    "snippet": "public String toPattern() { // same as SimpleDateFormat\n        StringBuilder sb \u003d new StringBuilder(100);\n        sb.append(\"[one of: \u0027\")\n            .append(DATE_FORMAT_STR_ISO8601)\n            .append(\"\u0027, \u0027\")\n            .append(DATE_FORMAT_STR_RFC1123)\n            .append(\"\u0027 (\")\n            ;\n        sb.append(Boolean.FALSE.equals(_lenient) ?\n                \"strict\" : \"lenient\")\n            .append(\")]\");\n        return sb.toString();\n    }",
    "begin_line": 384,
    "end_line": 396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.equals#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.equals(java.lang.Object)",
    "snippet": "@Override equals(Object o) {\n        return (o \u003d\u003d this);\n    }",
    "begin_line": 399,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.hashCode#404",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.hashCode()",
    "snippet": "@Override hashCode() {\n        return System.identityHashCode(this);\n    }",
    "begin_line": 404,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._equals#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._equals(T, T)",
    "snippet": "protected static \u003cT\u003e boolean _equals(T value1, T value2) {\n        if (value1 \u003d\u003d value2) {\n            return true;\n        }\n        return (value1 !\u003d null) \u0026\u0026 value1.equals(value2);\n    }",
    "begin_line": 414,
    "end_line": 419,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.looksLikeISO8601#425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.looksLikeISO8601(java.lang.String)",
    "snippet": "protected boolean looksLikeISO8601(String dateStr)\n    {\n        if (dateStr.length() \u003e\u003d 5\n            \u0026\u0026 Character.isDigit(dateStr.charAt(0))\n            \u0026\u0026 Character.isDigit(dateStr.charAt(3))\n            \u0026\u0026 dateStr.charAt(4) \u003d\u003d \u0027-\u0027\n            ) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 425,
    "end_line": 435,
    "comment": "/** \n * Overridable helper method used to figure out which of supported formats is the likeliest match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parseAsISO8601#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsISO8601(java.lang.String, java.text.ParsePosition, boolean)",
    "snippet": "protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors)\n            throws ParseException\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format (\u0027Z\u0027 \u003d\u003d \"UTC\")? If yes, that\u0027s\n         * quite simple because we already set date format timezone to be\n         * UTC, and hence can just strip out \u0027Z\u0027 altogether\n         */\n        int len \u003d dateStr.length();\n        char c \u003d dateStr.charAt(len-1);\n        DateFormat df;\n        String formatStr;\n\n        // Need to support \"plain\" date...\n        if (len \u003c\u003d 10 \u0026\u0026 Character.isDigit(c)) {\n            df \u003d _formatPlain;\n            formatStr \u003d DATE_FORMAT_STR_PLAIN;\n            if (df \u003d\u003d null) {\n                df \u003d _formatPlain \u003d _cloneFormat(DATE_FORMAT_PLAIN, formatStr,\n                        _timezone, _locale, _lenient);\n            }\n        } else if (c \u003d\u003d \u0027Z\u0027) {\n            df \u003d _formatISO8601_z;\n            formatStr \u003d DATE_FORMAT_STR_ISO8601_Z;\n            if (df \u003d\u003d null) {\n                df \u003d _formatISO8601_z \u003d _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                        _timezone, _locale, _lenient);\n            }\n            // may be missing milliseconds... if so, add\n            if (dateStr.charAt(len-4) \u003d\u003d \u0027:\u0027) {\n                StringBuilder sb \u003d new StringBuilder(dateStr);\n                sb.insert(len-1, \".000\");\n                dateStr \u003d sb.toString();\n            }\n        } else {\n            // Let\u0027s see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                c \u003d dateStr.charAt(len-3);\n                if (c \u003d\u003d \u0027:\u0027) { // remove optional colon\n                    // remove colon\n                    StringBuilder sb \u003d new StringBuilder(dateStr);\n                    sb.delete(len-3, len-2);\n                    dateStr \u003d sb.toString();\n                } else if (c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027) { // missing minutes\n                    // let\u0027s just append \u002700\u0027\n                    dateStr +\u003d \"00\";\n                }\n                // Milliseconds partial or missing; and even seconds are optional\n                len \u003d dateStr.length();\n                // remove \u0027T\u0027, \u0027+\u0027/\u0027-\u0027 and 4-digit timezone-offset\n                int timeLen \u003d len - dateStr.lastIndexOf(\u0027T\u0027) - 6;\n                if (timeLen \u003c 12) { // 8 for hh:mm:ss, 4 for .sss\n                    int offset \u003d len - 5; // insertion offset, before tz-offset\n                    StringBuilder sb \u003d new StringBuilder(dateStr);\n                    switch (timeLen) {\n                    case 11:\n                        sb.insert(offset, \u00270\u0027); break;\n                    case 10:\n                        sb.insert(offset, \"00\"); break;\n                    case 9: // is this legal? (just second fraction marker)\n                        sb.insert(offset, \"000\"); break;\n                    case 8:\n                        sb.insert(offset, \".000\"); break;\n                    case 7: // not legal to have single-digit second\n                        break;\n                    case 6: // probably not legal, but let\u0027s allow\n                        sb.insert(offset, \"00.000\");\n                    case 5: // is legal to omit seconds\n                        sb.insert(offset, \":00.000\");\n                    }\n                    dateStr \u003d sb.toString();\n                }\n                df \u003d _formatISO8601;\n                formatStr \u003d DATE_FORMAT_STR_ISO8601;\n                if (_formatISO8601 \u003d\u003d null) {\n                    df \u003d _formatISO8601 \u003d _cloneFormat(DATE_FORMAT_ISO8601, formatStr,\n                            _timezone, _locale, _lenient);\n                }\n            } else {\n                // If not, plain date. Easiest to just patch \u0027Z\u0027 in the end?\n                StringBuilder sb \u003d new StringBuilder(dateStr);\n                // And possible also millisecond part if missing\n                int timeLen \u003d len - dateStr.lastIndexOf(\u0027T\u0027) - 1;\n                if (timeLen \u003c 12) { // missing, or partial\n                    switch (timeLen) {\n                    case 11: sb.append(\u00270\u0027);\n                    case 10: sb.append(\u00270\u0027);\n                    case 9: sb.append(\u00270\u0027);\n                        break;\n                    default:\n                        sb.append(\".000\");\n                    }\n                }\n                sb.append(\u0027Z\u0027);\n                dateStr \u003d sb.toString();\n                df \u003d _formatISO8601_z;\n                formatStr \u003d DATE_FORMAT_STR_ISO8601_Z;\n                if (df \u003d\u003d null) {\n                    df \u003d _formatISO8601_z \u003d _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                            _timezone, _locale, _lenient);\n                }\n            }\n        }\n        Date dt \u003d df.parse(dateStr, pos);\n        // 22-Dec-2015, tatu: With non-lenient, may get null\n        if (dt \u003d\u003d null) {\n            throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format \u0027%s\u0027, parsing fails (leniency? %s)\",\n                           dateStr, formatStr, _lenient),\n               pos.getErrorIndex());\n        }\n        return dt;\n    }",
    "begin_line": 437,
    "end_line": 552,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parseAsRFC1123#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsRFC1123(java.lang.String, java.text.ParsePosition)",
    "snippet": "protected Date parseAsRFC1123(String dateStr, ParsePosition pos)\n    {\n        if (_formatRFC1123 \u003d\u003d null) {\n            _formatRFC1123 \u003d _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);\n        }\n        return _formatRFC1123.parse(dateStr, pos);\n    }",
    "begin_line": 554,
    "end_line": 561,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.hasTimeZone#563",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.hasTimeZone(java.lang.String)",
    "snippet": "private final static boolean hasTimeZone(String str)\n    {\n        // Only accept \"+hh\", \"+hhmm\" and \"+hh:mm\" (and with minus), so\n        int len \u003d str.length();\n        if (len \u003e\u003d 6) {\n            char c \u003d str.charAt(len-6);\n            if (c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027) return true;\n            c \u003d str.charAt(len-5);\n            if (c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027) return true;\n            c \u003d str.charAt(len-3);\n            if (c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027) return true;\n        }\n        return false;\n    }",
    "begin_line": 563,
    "end_line": 576,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._cloneFormat#578",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(java.text.DateFormat, java.lang.String, java.util.TimeZone, java.util.Locale, java.lang.Boolean)",
    "snippet": "private final static DateFormat _cloneFormat(DateFormat df, String format,\n            TimeZone tz, Locale loc, Boolean lenient)\n    {\n        if (!loc.equals(DEFAULT_LOCALE)) {\n            df \u003d new SimpleDateFormat(format, loc);\n            df.setTimeZone((tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz);\n        } else {\n            df \u003d (DateFormat) df.clone();\n            if (tz !\u003d null) {\n                df.setTimeZone(tz);\n            }\n        }\n        if (lenient !\u003d null) {\n            df.setLenient(lenient.booleanValue());\n        }\n        return df;\n    }",
    "begin_line": 578,
    "end_line": 594,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._clearFormats#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._clearFormats()",
    "snippet": "protected void _clearFormats() {\n        _formatRFC1123 \u003d null;\n        _formatISO8601 \u003d null;\n        _formatISO8601_z \u003d null;\n        _formatPlain \u003d null;\n    }",
    "begin_line": 596,
    "end_line": 601,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]