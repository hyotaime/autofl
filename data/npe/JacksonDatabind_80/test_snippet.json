[
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.testBaseTypeId1616()",
    "snippet": "public void testBaseTypeId1616() throws Exception\n    {\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Collection\u003cNamedType\u003e subtypes \u003d new StdSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                mapper.getDeserializationConfig(),\n                // note: `null` is fine here as `AnnotatedMember`:\n                null,\n                mapper.constructType(Base1616.class));\n        assertEquals(2, subtypes.size());\n        Set\u003cString\u003e ok \u003d new HashSet\u003c\u003e(Arrays.asList(\"A\", \"B\"));\n        for (NamedType type : subtypes) {\n            String id \u003d type.getName();\n            if (!ok.contains(id)) {\n                fail(\"Unexpected id \u0027\"+id+\"\u0027 (mapping to: \"+type.getType()+\"), should be one of: \"+ok);\n            }\n        }\n    }",
    "begin_line": 44,
    "end_line": 60,
    "comment": "",
    "child_ranges": [
      "(line 46,col 9)-(line 46,col 49)",
      "(line 47,col 9)-(line 51,col 54)",
      "(line 52,col 9)-(line 52,col 41)",
      "(line 53,col 9)-(line 53,col 64)",
      "(line 54,col 9)-(line 59,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.testSerialization()",
    "snippet": "public void testSerialization() throws Exception\n    {\n        // Note: need to use wrapper array just so that we can define\n        // static type on serialization. If we had root static types,\n        // could use those; but at the moment root type is dynamic\n        \n        assertEquals(\"[{\\\"doggy\\\":{\\\"name\\\":\\\"Spot\\\",\\\"ageInYears\\\":3}}]\",\n                MAPPER.writeValueAsString(new Animal[] { new Dog(\"Spot\", 3) }));\n        assertEquals(\"[{\\\"MaineCoon\\\":{\\\"name\\\":\\\"Belzebub\\\",\\\"purrs\\\":true}}]\",\n                MAPPER.writeValueAsString(new Animal[] { new MaineCoon(\"Belzebub\", true)}));\n    }",
    "begin_line": 62,
    "end_line": 72,
    "comment": "",
    "child_ranges": [
      "(line 68,col 9)-(line 69,col 80)",
      "(line 70,col 9)-(line 71,col 92)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.testRoundTrip()",
    "snippet": "public void testRoundTrip() throws Exception\n    {\n        Animal[] input \u003d new Animal[] {\n                new Dog(\"Odie\", 7),\n                null,\n                new MaineCoon(\"Piru\", false),\n                new Persian(\"Khomeini\", true)\n        };\n        String json \u003d MAPPER.writeValueAsString(input);\n        List\u003cAnimal\u003e output \u003d MAPPER.readValue(json,\n                TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class));\n        assertEquals(input.length, output.size());\n        for (int i \u003d 0, len \u003d input.length; i \u003c len; ++i) {\n            assertEquals(\"Entry #\"+i+\" differs, input \u003d \u0027\"+json+\"\u0027\",\n                input[i], output.get(i));\n        }\n    }",
    "begin_line": 74,
    "end_line": 90,
    "comment": "",
    "child_ranges": [
      "(line 76,col 9)-(line 81,col 10)",
      "(line 82,col 9)-(line 82,col 55)",
      "(line 83,col 9)-(line 84,col 102)",
      "(line 85,col 9)-(line 85,col 50)",
      "(line 86,col 9)-(line 89,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.testRoundTripMap()",
    "snippet": "public void testRoundTripMap() throws Exception\n    {\n        AnimalMap input \u003d new AnimalMap();\n        input.put(\"venla\", new MaineCoon(\"Venla\", true));\n        input.put(\"ama\", new Dog(\"Amadeus\", 13));\n        String json \u003d MAPPER.writeValueAsString(input);\n        AnimalMap output \u003d MAPPER.readValue(json, AnimalMap.class);\n        assertNotNull(output);\n        assertEquals(AnimalMap.class, output.getClass());\n        assertEquals(input.size(), output.size());\n\n        // for some reason, straight comparison won\u0027t work...\n        for (String name : input.keySet()) {\n            Animal in \u003d input.get(name);\n            Animal out \u003d output.get(name);\n            if (!in.equals(out)) {\n                fail(\"Animal in input was [\"+in+\"]; output not matching: [\"+out+\"]\");\n            }\n        }\n    }",
    "begin_line": 92,
    "end_line": 111,
    "comment": "",
    "child_ranges": [
      "(line 94,col 9)-(line 94,col 42)",
      "(line 95,col 9)-(line 95,col 57)",
      "(line 96,col 9)-(line 96,col 49)",
      "(line 97,col 9)-(line 97,col 55)",
      "(line 98,col 9)-(line 98,col 67)",
      "(line 99,col 9)-(line 99,col 30)",
      "(line 100,col 9)-(line 100,col 57)",
      "(line 101,col 9)-(line 101,col 50)",
      "(line 104,col 9)-(line 110,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n        return name.equals(((Animal) o).name);\n    }",
    "begin_line": 131,
    "end_line": 136,
    "comment": "",
    "child_ranges": [
      "(line 132,col 9)-(line 132,col 35)",
      "(line 133,col 9)-(line 133,col 36)",
      "(line 134,col 9)-(line 134,col 53)",
      "(line 135,col 9)-(line 135,col 46)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.toString()",
    "snippet": "@Override\n    public String toString() {\n        return getClass().toString() + \"(\u0027\"+name+\"\u0027)\";\n    }",
    "begin_line": 139,
    "end_line": 141,
    "comment": "",
    "child_ranges": [
      "(line 140,col 9)-(line 140,col 54)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Dog()",
    "snippet": "public Dog() { }",
    "begin_line": 148,
    "end_line": 148,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Dog(java.lang.String, int)",
    "snippet": "public Dog(String n, int y) {\n        name \u003d n;\n        ageInYears \u003d y;\n    }",
    "begin_line": 149,
    "end_line": 152,
    "comment": "",
    "child_ranges": [
      "(line 150,col 9)-(line 150,col 17)",
      "(line 151,col 9)-(line 151,col 23)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        return super.equals(o)\n            \u0026\u0026 ((Dog) o).ageInYears \u003d\u003d ageInYears;\n    }",
    "begin_line": 155,
    "end_line": 158,
    "comment": "",
    "child_ranges": [
      "(line 156,col 9)-(line 157,col 50)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Cat()",
    "snippet": "public Cat() { }",
    "begin_line": 167,
    "end_line": 167,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Cat(java.lang.String, boolean)",
    "snippet": "public Cat(String n, boolean p) {\n        name \u003d n;\n        purrs \u003d p;\n    }",
    "begin_line": 168,
    "end_line": 171,
    "comment": "",
    "child_ranges": [
      "(line 169,col 9)-(line 169,col 17)",
      "(line 170,col 9)-(line 170,col 18)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        return super.equals(o) \u0026\u0026 ((Cat) o).purrs \u003d\u003d purrs;\n    }",
    "begin_line": 174,
    "end_line": 176,
    "comment": "",
    "child_ranges": [
      "(line 175,col 9)-(line 175,col 59)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.toString()",
    "snippet": "@Override\n    public String toString() {\n        return super.toString()+\"(purrs: \"+purrs+\")\";\n    }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "child_ranges": [
      "(line 180,col 9)-(line 180,col 53)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.MaineCoon()",
    "snippet": "public MaineCoon() { super(); }",
    "begin_line": 188,
    "end_line": 188,
    "comment": "",
    "child_ranges": [
      "(line 188,col 26)-(line 188,col 33)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.MaineCoon(java.lang.String, boolean)",
    "snippet": "public MaineCoon(String n, boolean p) {\n        super(n, p);\n    }",
    "begin_line": 189,
    "end_line": 191,
    "comment": "",
    "child_ranges": [
      "(line 190,col 9)-(line 190,col 20)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Persian()",
    "snippet": "public Persian() { super(); }",
    "begin_line": 196,
    "end_line": 196,
    "comment": "",
    "child_ranges": [
      "(line 196,col 24)-(line 196,col 31)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/jsontype/TestTypeNames.java",
    "signature": "com.fasterxml.jackson.databind.jsontype.TestTypeNames.Persian(java.lang.String, boolean)",
    "snippet": "public Persian(String n, boolean p) {\n        super(n, p);\n    }",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "child_ranges": [
      "(line 198,col 9)-(line 198,col 20)"
    ]
  }
]