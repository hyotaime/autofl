[
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int, int)",
    "snippet": "private long binomialCoefficient(int n, int k) throws MathArithmeticException {\n        if (binomialCache.size() \u003e n) {\n            Long cachedResult \u003d binomialCache.get(n).get(Integer.valueOf(k));\n            if (cachedResult !\u003d null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result \u003d -1;\n        if ((n \u003d\u003d k) || (k \u003d\u003d 0)) {\n            result \u003d 1;\n        } else if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n            result \u003d n;\n        } else {\n            // Reduce stack depth for larger values of n\n            if (k \u003c n - 100) {\n                binomialCoefficient(n - 100, k);\n            }\n            if (k \u003e 100) {\n                binomialCoefficient(n - 100, k - 100);\n            }\n            result \u003d MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result \u003d\u003d -1) {\n            throw new MathArithmeticException();\n        }\n        for (int i \u003d binomialCache.size(); i \u003c n + 1; i++) {\n            binomialCache.add(new HashMap\u003cInteger, Long\u003e());\n        }\n        binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));\n        return result;\n    }",
    "begin_line": 51,
    "end_line": 82,
    "comment": "/** \n * Exact (caching) recursive implementation to test against\n */\n",
    "child_ranges": [
      "(line 52,col 9)-(line 57,col 9)",
      "(line 58,col 9)-(line 58,col 25)",
      "(line 59,col 9)-(line 73,col 9)",
      "(line 74,col 9)-(line 76,col 9)",
      "(line 77,col 9)-(line 79,col 9)",
      "(line 80,col 9)-(line 80,col 75)",
      "(line 81,col 9)-(line 81,col 22)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.factorial(int)",
    "snippet": "private long factorial(int n) {\n        long result \u003d 1;\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\n            result *\u003d i;\n        }\n        return result;\n    }",
    "begin_line": 87,
    "end_line": 93,
    "comment": "/** \n * Exact direct multiplication implementation to test against\n */\n",
    "child_ranges": [
      "(line 88,col 9)-(line 88,col 24)",
      "(line 89,col 9)-(line 91,col 9)",
      "(line 92,col 9)-(line 92,col 22)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.test0Choose0()",
    "snippet": "@Test\n    public void test0Choose0() {\n        Assert.assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n        Assert.assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n        Assert.assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n    }",
    "begin_line": 97,
    "end_line": 101,
    "comment": "/** \n * Verify that b(0,0) \u003d 1 \n */\n",
    "child_ranges": [
      "(line 98,col 9)-(line 98,col 78)",
      "(line 99,col 9)-(line 99,col 75)",
      "(line 100,col 9)-(line 100,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()",
    "snippet": "@Test\n    public void testAddAndCheck() {\n        int big \u003d Integer.MAX_VALUE;\n        int bigNeg \u003d Integer.MIN_VALUE;\n        Assert.assertEquals(big, MathUtils.addAndCheck(big, 0));\n        try {\n            MathUtils.addAndCheck(big, 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n        try {\n            MathUtils.addAndCheck(bigNeg, -1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n    }",
    "begin_line": 104,
    "end_line": 118,
    "comment": "",
    "child_ranges": [
      "(line 105,col 9)-(line 105,col 36)",
      "(line 106,col 9)-(line 106,col 39)",
      "(line 107,col 9)-(line 107,col 64)",
      "(line 108,col 9)-(line 112,col 9)",
      "(line 113,col 9)-(line 117,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()",
    "snippet": "@Test\n    public void testAddAndCheckLong() {\n        long max \u003d Long.MAX_VALUE;\n        long min \u003d Long.MIN_VALUE;\n        Assert.assertEquals(max, MathUtils.addAndCheck(max, 0L));\n        Assert.assertEquals(min, MathUtils.addAndCheck(min, 0L));\n        Assert.assertEquals(max, MathUtils.addAndCheck(0L, max));\n        Assert.assertEquals(min, MathUtils.addAndCheck(0L, min));\n        Assert.assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n        Assert.assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n        Assert.assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));\n        Assert.assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));\n        testAddAndCheckLongFailure(max, 1L);\n        testAddAndCheckLongFailure(min, -1L);\n        testAddAndCheckLongFailure(1L, max);\n        testAddAndCheckLongFailure(-1L, min);\n    }",
    "begin_line": 121,
    "end_line": 136,
    "comment": "",
    "child_ranges": [
      "(line 122,col 9)-(line 122,col 34)",
      "(line 123,col 9)-(line 123,col 34)",
      "(line 124,col 9)-(line 124,col 65)",
      "(line 125,col 9)-(line 125,col 65)",
      "(line 126,col 9)-(line 126,col 65)",
      "(line 127,col 9)-(line 127,col 65)",
      "(line 128,col 9)-(line 128,col 63)",
      "(line 129,col 9)-(line 129,col 63)",
      "(line 130,col 9)-(line 130,col 65)",
      "(line 131,col 9)-(line 131,col 70)",
      "(line 132,col 9)-(line 132,col 44)",
      "(line 133,col 9)-(line 133,col 45)",
      "(line 134,col 9)-(line 134,col 44)",
      "(line 135,col 9)-(line 135,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long, long)",
    "snippet": "private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n    }",
    "begin_line": 138,
    "end_line": 145,
    "comment": "",
    "child_ranges": [
      "(line 139,col 9)-(line 144,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()",
    "snippet": "@Test\n    public void testBinomialCoefficient() {\n        long[] bcoef5 \u003d {\n            1,\n            5,\n            10,\n            10,\n            5,\n            1 };\n        long[] bcoef6 \u003d {\n            1,\n            6,\n            15,\n            20,\n            15,\n            6,\n            1 };\n        for (int i \u003d 0; i \u003c 6; i++) {\n            Assert.assertEquals(\"5 choose \" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));\n        }\n        for (int i \u003d 0; i \u003c 7; i++) {\n            Assert.assertEquals(\"6 choose \" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));\n        }\n\n        for (int n \u003d 1; n \u003c 10; n++) {\n            for (int k \u003d 0; k \u003c\u003d n; k++) {\n                Assert.assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n                Assert.assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n                Assert.assertEquals(n + \" choose \" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n            }\n        }\n\n        int[] n \u003d { 34, 66, 100, 1500, 1500 };\n        int[] k \u003d { 17, 33, 10, 1500 - 4, 4 };\n        for (int i \u003d 0; i \u003c n.length; i++) {\n            long expected \u003d binomialCoefficient(n[i], k[i]);\n            Assert.assertEquals(n[i] + \" choose \" + k[i], expected,\n                MathUtils.binomialCoefficient(n[i], k[i]));\n            Assert.assertEquals(n[i] + \" choose \" + k[i], expected,\n                MathUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);\n            Assert.assertEquals(\"log(\" + n[i] + \" choose \" + k[i] + \")\", FastMath.log(expected),\n                MathUtils.binomialCoefficientLog(n[i], k[i]), 0.0);\n        }\n    }",
    "begin_line": 148,
    "end_line": 190,
    "comment": "",
    "child_ranges": [
      "(line 149,col 9)-(line 155,col 16)",
      "(line 156,col 9)-(line 163,col 16)",
      "(line 164,col 9)-(line 166,col 9)",
      "(line 167,col 9)-(line 169,col 9)",
      "(line 171,col 9)-(line 177,col 9)",
      "(line 179,col 9)-(line 179,col 46)",
      "(line 180,col 9)-(line 180,col 46)",
      "(line 181,col 9)-(line 189,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge()",
    "snippet": "@Test\n    public void testBinomialCoefficientLarge() throws Exception {\n        // This tests all legal and illegal values for n \u003c\u003d 200.\n        for (int n \u003d 0; n \u003c\u003d 200; n++) {\n            for (int k \u003d 0; k \u003c\u003d n; k++) {\n                long ourResult \u003d -1;\n                long exactResult \u003d -1;\n                boolean shouldThrow \u003d false;\n                boolean didThrow \u003d false;\n                try {\n                    ourResult \u003d MathUtils.binomialCoefficient(n, k);\n                } catch (MathArithmeticException ex) {\n                    didThrow \u003d true;\n                }\n                try {\n                    exactResult \u003d binomialCoefficient(n, k);\n                } catch (MathArithmeticException ex) {\n                    shouldThrow \u003d true;\n                }\n                Assert.assertEquals(n + \" choose \" + k, exactResult, ourResult);\n                Assert.assertEquals(n + \" choose \" + k, shouldThrow, didThrow);\n                Assert.assertTrue(n + \" choose \" + k, (n \u003e 66 || !didThrow));\n\n                if (!shouldThrow \u0026\u0026 exactResult \u003e 1) {\n                    Assert.assertEquals(n + \" choose \" + k, 1.,\n                        MathUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);\n                    Assert.assertEquals(n + \" choose \" + k, 1,\n                        MathUtils.binomialCoefficientLog(n, k) / FastMath.log(exactResult), 1e-10);\n                }\n            }\n        }\n\n        long ourResult \u003d MathUtils.binomialCoefficient(300, 3);\n        long exactResult \u003d binomialCoefficient(300, 3);\n        Assert.assertEquals(exactResult, ourResult);\n\n        ourResult \u003d MathUtils.binomialCoefficient(700, 697);\n        exactResult \u003d binomialCoefficient(700, 697);\n        Assert.assertEquals(exactResult, ourResult);\n\n        // This one should throw\n        try {\n            MathUtils.binomialCoefficient(700, 300);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // Expected\n        }\n\n        int n \u003d 10000;\n        ourResult \u003d MathUtils.binomialCoefficient(n, 3);\n        exactResult \u003d binomialCoefficient(n, 3);\n        Assert.assertEquals(exactResult, ourResult);\n        Assert.assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);\n        Assert.assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);\n\n    }",
    "begin_line": 197,
    "end_line": 251,
    "comment": "/** \n * Tests correctness for large n and sharpness of upper bound in API doc JIRA: MATH-241\n */\n",
    "child_ranges": [
      "(line 199,col 9)-(line 226,col 9)",
      "(line 228,col 9)-(line 228,col 63)",
      "(line 229,col 9)-(line 229,col 55)",
      "(line 230,col 9)-(line 230,col 52)",
      "(line 232,col 9)-(line 232,col 60)",
      "(line 233,col 9)-(line 233,col 52)",
      "(line 234,col 9)-(line 234,col 52)",
      "(line 237,col 9)-(line 242,col 9)",
      "(line 244,col 9)-(line 244,col 22)",
      "(line 245,col 9)-(line 245,col 56)",
      "(line 246,col 9)-(line 246,col 48)",
      "(line 247,col 9)-(line 247,col 52)",
      "(line 248,col 9)-(line 248,col 95)",
      "(line 249,col 9)-(line 249,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()",
    "snippet": "@Test\n    public void testBinomialCoefficientFail() {\n        try {\n            MathUtils.binomialCoefficient(4, 5);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficientDouble(4, 5);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficientLog(4, 5);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficient(-1, -2);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficientDouble(-1, -2);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficientLog(-1, -2);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n\n        try {\n            MathUtils.binomialCoefficient(67, 30);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.binomialCoefficient(67, 34);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // ignored\n        }\n        double x \u003d MathUtils.binomialCoefficientDouble(1030, 515);\n        Assert.assertTrue(\"expecting infinite binomial coefficient\", Double\n            .isInfinite(x));\n    }",
    "begin_line": 254,
    "end_line": 310,
    "comment": "",
    "child_ranges": [
      "(line 255,col 9)-(line 260,col 9)",
      "(line 262,col 9)-(line 267,col 9)",
      "(line 269,col 9)-(line 274,col 9)",
      "(line 276,col 9)-(line 281,col 9)",
      "(line 282,col 9)-(line 287,col 9)",
      "(line 288,col 9)-(line 293,col 9)",
      "(line 295,col 9)-(line 300,col 9)",
      "(line 301,col 9)-(line 306,col 9)",
      "(line 307,col 9)-(line 307,col 66)",
      "(line 308,col 9)-(line 309,col 28)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCompareToEpsilon()",
    "snippet": "@Test\n    public void testCompareToEpsilon() {\n        Assert.assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));\n        Assert.assertTrue(MathUtils.compareTo(152.308, 152.32, .011) \u003c 0);\n        Assert.assertTrue(MathUtils.compareTo(152.33, 152.318, .011) \u003e 0);\n        Assert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, +0.0, Double.MIN_VALUE));\n        Assert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, -0.0, Double.MIN_VALUE));\n    }",
    "begin_line": 313,
    "end_line": 319,
    "comment": "",
    "child_ranges": [
      "(line 314,col 9)-(line 314,col 74)",
      "(line 315,col 9)-(line 315,col 74)",
      "(line 316,col 9)-(line 316,col 74)",
      "(line 317,col 9)-(line 317,col 94)",
      "(line 318,col 9)-(line 318,col 94)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCompareToMaxUlps()",
    "snippet": "@Test\n    public void testCompareToMaxUlps() {\n        double a     \u003d 152.32;\n        double delta \u003d FastMath.ulp(a);\n        for (int i \u003d 0; i \u003c\u003d 10; ++i) {\n            if (i \u003c\u003d 5) {\n                Assert.assertEquals( 0, MathUtils.compareTo(a, a + i * delta, 5));\n                Assert.assertEquals( 0, MathUtils.compareTo(a, a - i * delta, 5));\n            } else {\n                Assert.assertEquals(-1, MathUtils.compareTo(a, a + i * delta, 5));\n                Assert.assertEquals(+1, MathUtils.compareTo(a, a - i * delta, 5));\n            }\n        }\n\n        Assert.assertEquals( 0, MathUtils.compareTo(-0.0, 0.0, 0));\n\n        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 0));\n        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 1));\n        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 0));\n        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 1));\n\n        Assert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 0));\n        Assert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 1));\n        Assert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 0));\n        Assert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 1));\n\n        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 0));\n        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 1));\n        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 2));\n\n        Assert.assertEquals( 0, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n        Assert.assertEquals(-1, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 0));\n\n        Assert.assertEquals(+1, MathUtils.compareTo(Double.MAX_VALUE, Double.NaN, Integer.MAX_VALUE));\n        Assert.assertEquals(+1, MathUtils.compareTo(Double.NaN, Double.MAX_VALUE, Integer.MAX_VALUE));\n\n    }",
    "begin_line": 322,
    "end_line": 357,
    "comment": "",
    "child_ranges": [
      "(line 323,col 9)-(line 323,col 30)",
      "(line 324,col 9)-(line 324,col 39)",
      "(line 325,col 9)-(line 333,col 9)",
      "(line 335,col 9)-(line 335,col 67)",
      "(line 337,col 9)-(line 337,col 81)",
      "(line 338,col 9)-(line 338,col 81)",
      "(line 339,col 9)-(line 339,col 81)",
      "(line 340,col 9)-(line 340,col 81)",
      "(line 342,col 9)-(line 342,col 81)",
      "(line 343,col 9)-(line 343,col 81)",
      "(line 344,col 9)-(line 344,col 81)",
      "(line 345,col 9)-(line 345,col 81)",
      "(line 347,col 9)-(line 347,col 93)",
      "(line 348,col 9)-(line 348,col 93)",
      "(line 349,col 9)-(line 349,col 93)",
      "(line 351,col 9)-(line 351,col 100)",
      "(line 352,col 9)-(line 352,col 100)",
      "(line 354,col 9)-(line 354,col 102)",
      "(line 355,col 9)-(line 355,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCosh()",
    "snippet": "@Test\n    public void testCosh() {\n        double x \u003d 3.0;\n        double expected \u003d 10.06766;\n        Assert.assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n    }",
    "begin_line": 360,
    "end_line": 364,
    "comment": "",
    "child_ranges": [
      "(line 361,col 9)-(line 361,col 23)",
      "(line 362,col 9)-(line 362,col 35)",
      "(line 363,col 9)-(line 363,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()",
    "snippet": "@Test\n    public void testCoshNaN() {\n        Assert.assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n    }",
    "begin_line": 367,
    "end_line": 369,
    "comment": "",
    "child_ranges": [
      "(line 368,col 9)-(line 368,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaN()",
    "snippet": "@Test\n    public void testEqualsIncludingNaN() {\n        double[] testArray \u003d {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d };\n        for (int i \u003d 0; i \u003c testArray.length; i++) {\n            for (int j \u003d 0; j \u003c testArray.length; j++) {\n                if (i \u003d\u003d j) {\n                    Assert.assertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));\n                    Assert.assertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));\n                } else {\n                    Assert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));\n                    Assert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));\n                }\n            }\n        }\n    }",
    "begin_line": 372,
    "end_line": 390,
    "comment": "",
    "child_ranges": [
      "(line 373,col 9)-(line 378,col 17)",
      "(line 379,col 9)-(line 389,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsWithAllowedDelta()",
    "snippet": "@Test\n    public void testEqualsWithAllowedDelta() {\n        Assert.assertTrue(MathUtils.equals(153.0000, 153.0000, .0625));\n        Assert.assertTrue(MathUtils.equals(153.0000, 153.0625, .0625));\n        Assert.assertTrue(MathUtils.equals(152.9375, 153.0000, .0625));\n        Assert.assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));\n        Assert.assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));\n        Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));\n        Assert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        Assert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));\n        Assert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n    }",
    "begin_line": 393,
    "end_line": 403,
    "comment": "",
    "child_ranges": [
      "(line 394,col 9)-(line 394,col 71)",
      "(line 395,col 9)-(line 395,col 71)",
      "(line 396,col 9)-(line 396,col 71)",
      "(line 397,col 9)-(line 397,col 72)",
      "(line 398,col 9)-(line 398,col 72)",
      "(line 399,col 9)-(line 399,col 74)",
      "(line 400,col 9)-(line 400,col 101)",
      "(line 401,col 9)-(line 401,col 101)",
      "(line 402,col 9)-(line 402,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testMath475()",
    "snippet": "@Test\n    public void testMath475() {\n        final double a \u003d 1.7976931348623182E16;\n        final double b \u003d FastMath.nextUp(a);\n\n        double diff \u003d FastMath.abs(a - b);\n        // Because they are adjacent floating point numbers, \"a\" and \"b\" are\n        // considered equal even though the allowed error is smaller than\n        // their difference.\n        Assert.assertTrue(MathUtils.equals(a, b, 0.5 * diff));\n\n        final double c \u003d FastMath.nextUp(b);\n        diff \u003d FastMath.abs(a - c);\n        // Because \"a\" and \"c\" are not adjacent, the tolerance is taken into\n        // account for assessing equality.\n        Assert.assertTrue(MathUtils.equals(a, c, diff));\n        Assert.assertFalse(MathUtils.equals(a, c, (1 - 1e-16) * diff));\n    }",
    "begin_line": 406,
    "end_line": 422,
    "comment": "",
    "child_ranges": [
      "(line 407,col 9)-(line 407,col 47)",
      "(line 408,col 9)-(line 408,col 44)",
      "(line 410,col 9)-(line 410,col 42)",
      "(line 414,col 9)-(line 414,col 62)",
      "(line 416,col 9)-(line 416,col 44)",
      "(line 417,col 9)-(line 417,col 35)",
      "(line 420,col 9)-(line 420,col 56)",
      "(line 421,col 9)-(line 421,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaNWithAllowedDelta()",
    "snippet": "@Test\n    public void testEqualsIncludingNaNWithAllowedDelta() {\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));\n    }",
    "begin_line": 425,
    "end_line": 435,
    "comment": "",
    "child_ranges": [
      "(line 426,col 9)-(line 426,col 83)",
      "(line 427,col 9)-(line 427,col 83)",
      "(line 428,col 9)-(line 428,col 83)",
      "(line 429,col 9)-(line 429,col 85)",
      "(line 430,col 9)-(line 430,col 113)",
      "(line 431,col 9)-(line 431,col 113)",
      "(line 432,col 9)-(line 432,col 114)",
      "(line 433,col 9)-(line 433,col 84)",
      "(line 434,col 9)-(line 434,col 84)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testFloatEqualsWithAllowedUlps()",
    "snippet": "@Test\n    public void testFloatEqualsWithAllowedUlps() {\n        Assert.assertTrue(\"+0.0f \u003d\u003d -0.0f\",MathUtils.equals(0.0f, -0.0f));\n        Assert.assertTrue(\"+0.0f \u003d\u003d -0.0f (1 ulp)\",MathUtils.equals(0.0f, -0.0f, 1));\n        float oneFloat \u003d 1.0f;\n        Assert.assertTrue(\"1.0f \u003d\u003d 1.0f + 1 ulp\",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));\n        Assert.assertTrue(\"1.0f \u003d\u003d 1.0f + 1 ulp (1 ulp)\",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));\n        Assert.assertFalse(\"1.0f !\u003d 1.0f + 2 ulp (1 ulp)\",MathUtils.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));\n\n        Assert.assertTrue(MathUtils.equals(153.0f, 153.0f, 1));\n\n        // These tests need adjusting for floating point precision\n//        Assert.assertTrue(MathUtils.equals(153.0f, 153.00000000000003f, 1));\n//        Assert.assertFalse(MathUtils.equals(153.0f, 153.00000000000006f, 1));\n//        Assert.assertTrue(MathUtils.equals(153.0f, 152.99999999999997f, 1));\n//        Assert.assertFalse(MathUtils.equals(153f, 152.99999999999994f, 1));\n//\n//        Assert.assertTrue(MathUtils.equals(-128.0f, -127.99999999999999f, 1));\n//        Assert.assertFalse(MathUtils.equals(-128.0f, -127.99999999999997f, 1));\n//        Assert.assertTrue(MathUtils.equals(-128.0f, -128.00000000000003f, 1));\n//        Assert.assertFalse(MathUtils.equals(-128.0f, -128.00000000000006f, 1));\n\n        Assert.assertTrue(MathUtils.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));\n\n        Assert.assertTrue(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));\n\n        Assert.assertFalse(MathUtils.equals(Float.NaN, Float.NaN, 1));\n        Assert.assertFalse(MathUtils.equals(Float.NaN, Float.NaN, 0));\n        Assert.assertFalse(MathUtils.equals(Float.NaN, 0, 0));\n        Assert.assertFalse(MathUtils.equals(Float.NaN, Float.POSITIVE_INFINITY, 0));\n        Assert.assertFalse(MathUtils.equals(Float.NaN, Float.NEGATIVE_INFINITY, 0));\n\n        Assert.assertFalse(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));\n    }",
    "begin_line": 439,
    "end_line": 473,
    "comment": "",
    "child_ranges": [
      "(line 440,col 9)-(line 440,col 74)",
      "(line 441,col 9)-(line 441,col 85)",
      "(line 442,col 9)-(line 442,col 30)",
      "(line 443,col 9)-(line 443,col 135)",
      "(line 444,col 9)-(line 444,col 146)",
      "(line 445,col 9)-(line 445,col 147)",
      "(line 447,col 9)-(line 447,col 63)",
      "(line 460,col 9)-(line 460,col 97)",
      "(line 461,col 9)-(line 461,col 90)",
      "(line 463,col 9)-(line 463,col 97)",
      "(line 464,col 9)-(line 464,col 90)",
      "(line 466,col 9)-(line 466,col 70)",
      "(line 467,col 9)-(line 467,col 70)",
      "(line 468,col 9)-(line 468,col 62)",
      "(line 469,col 9)-(line 469,col 84)",
      "(line 470,col 9)-(line 470,col 84)",
      "(line 472,col 9)-(line 472,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsWithAllowedUlps()",
    "snippet": "@Test\n    public void testEqualsWithAllowedUlps() {\n        Assert.assertTrue(MathUtils.equals(0.0, -0.0, 1));\n\n        Assert.assertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));\n        Assert.assertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));\n\n        final double nUp1 \u003d FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);\n        final double nnUp1 \u003d FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);\n        Assert.assertTrue(MathUtils.equals(1.0, nUp1, 1));\n        Assert.assertTrue(MathUtils.equals(nUp1, nnUp1, 1));\n        Assert.assertFalse(MathUtils.equals(1.0, nnUp1, 1));\n\n        Assert.assertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));\n        Assert.assertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));\n\n        Assert.assertTrue(MathUtils.equals(153.0, 153.0, 1));\n\n        Assert.assertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));\n        Assert.assertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));\n        Assert.assertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));\n        Assert.assertFalse(MathUtils.equals(153, 152.99999999999994, 1));\n\n        Assert.assertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));\n        Assert.assertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));\n        Assert.assertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));\n        Assert.assertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));\n\n        Assert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n\n        Assert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));\n\n        Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));\n        Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 0));\n        Assert.assertFalse(MathUtils.equals(Double.NaN, 0, 0));\n        Assert.assertFalse(MathUtils.equals(Double.NaN, Double.POSITIVE_INFINITY, 0));\n        Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NEGATIVE_INFINITY, 0));\n\n        Assert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));\n    }",
    "begin_line": 476,
    "end_line": 516,
    "comment": "",
    "child_ranges": [
      "(line 477,col 9)-(line 477,col 58)",
      "(line 479,col 9)-(line 479,col 74)",
      "(line 480,col 9)-(line 480,col 79)",
      "(line 482,col 9)-(line 482,col 77)",
      "(line 483,col 9)-(line 483,col 80)",
      "(line 484,col 9)-(line 484,col 58)",
      "(line 485,col 9)-(line 485,col 60)",
      "(line 486,col 9)-(line 486,col 60)",
      "(line 488,col 9)-(line 488,col 70)",
      "(line 489,col 9)-(line 489,col 71)",
      "(line 491,col 9)-(line 491,col 61)",
      "(line 493,col 9)-(line 493,col 74)",
      "(line 494,col 9)-(line 494,col 75)",
      "(line 495,col 9)-(line 495,col 74)",
      "(line 496,col 9)-(line 496,col 73)",
      "(line 498,col 9)-(line 498,col 76)",
      "(line 499,col 9)-(line 499,col 77)",
      "(line 500,col 9)-(line 500,col 76)",
      "(line 501,col 9)-(line 501,col 77)",
      "(line 503,col 9)-(line 503,col 99)",
      "(line 504,col 9)-(line 504,col 91)",
      "(line 506,col 9)-(line 506,col 99)",
      "(line 507,col 9)-(line 507,col 92)",
      "(line 509,col 9)-(line 509,col 72)",
      "(line 510,col 9)-(line 510,col 72)",
      "(line 511,col 9)-(line 511,col 63)",
      "(line 512,col 9)-(line 512,col 86)",
      "(line 513,col 9)-(line 513,col 86)",
      "(line 515,col 9)-(line 515,col 105)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsIncludingNaNWithAllowedUlps()",
    "snippet": "@Test\n    public void testEqualsIncludingNaNWithAllowedUlps() {\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));\n\n        final double nUp1 \u003d FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);\n        final double nnUp1 \u003d FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));\n\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));\n\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));\n    }",
    "begin_line": 519,
    "end_line": 555,
    "comment": "",
    "child_ranges": [
      "(line 520,col 9)-(line 520,col 70)",
      "(line 522,col 9)-(line 522,col 86)",
      "(line 523,col 9)-(line 523,col 91)",
      "(line 525,col 9)-(line 525,col 77)",
      "(line 526,col 9)-(line 526,col 80)",
      "(line 527,col 9)-(line 527,col 70)",
      "(line 528,col 9)-(line 528,col 72)",
      "(line 529,col 9)-(line 529,col 72)",
      "(line 531,col 9)-(line 531,col 82)",
      "(line 532,col 9)-(line 532,col 83)",
      "(line 534,col 9)-(line 534,col 73)",
      "(line 536,col 9)-(line 536,col 86)",
      "(line 537,col 9)-(line 537,col 87)",
      "(line 538,col 9)-(line 538,col 86)",
      "(line 539,col 9)-(line 539,col 85)",
      "(line 541,col 9)-(line 541,col 88)",
      "(line 542,col 9)-(line 542,col 89)",
      "(line 543,col 9)-(line 543,col 88)",
      "(line 544,col 9)-(line 544,col 89)",
      "(line 546,col 9)-(line 546,col 111)",
      "(line 547,col 9)-(line 547,col 103)",
      "(line 549,col 9)-(line 549,col 111)",
      "(line 550,col 9)-(line 550,col 104)",
      "(line 552,col 9)-(line 552,col 83)",
      "(line 554,col 9)-(line 554,col 117)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEquals()",
    "snippet": "@Test\n    public void testArrayEquals() {\n        Assert.assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        Assert.assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        Assert.assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        Assert.assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        Assert.assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        Assert.assertTrue(MathUtils.equals(new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }, new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        Assert.assertFalse(MathUtils.equals(new double[] { Double.NaN },\n                                     new double[] { Double.NaN }));\n        Assert.assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n                                     new double[] { Double.NEGATIVE_INFINITY }));\n        Assert.assertFalse(MathUtils.equals(new double[] { 1d },\n                                     new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n\n    }",
    "begin_line": 558,
    "end_line": 579,
    "comment": "",
    "child_ranges": [
      "(line 559,col 9)-(line 559,col 72)",
      "(line 560,col 9)-(line 560,col 72)",
      "(line 561,col 9)-(line 561,col 78)",
      "(line 563,col 9)-(line 563,col 81)",
      "(line 564,col 9)-(line 564,col 86)",
      "(line 565,col 9)-(line 571,col 40)",
      "(line 572,col 9)-(line 573,col 67)",
      "(line 574,col 9)-(line 575,col 81)",
      "(line 576,col 9)-(line 577,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEqualsIncludingNaN()",
    "snippet": "@Test\n    public void testArrayEqualsIncludingNaN() {\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));\n\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));\n        Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] {\n                    Double.NaN, Double.POSITIVE_INFINITY,\n                    Double.NEGATIVE_INFINITY, 1d, 0d\n                }, new double[] {\n                    Double.NaN, Double.POSITIVE_INFINITY,\n                    Double.NEGATIVE_INFINITY, 1d, 0d\n                }));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },\n                                                 new double[] { Double.NEGATIVE_INFINITY }));\n        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },\n                                                 new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n    }",
    "begin_line": 582,
    "end_line": 600,
    "comment": "",
    "child_ranges": [
      "(line 583,col 9)-(line 583,col 84)",
      "(line 584,col 9)-(line 584,col 84)",
      "(line 585,col 9)-(line 585,col 90)",
      "(line 587,col 9)-(line 587,col 93)",
      "(line 588,col 9)-(line 588,col 98)",
      "(line 589,col 9)-(line 595,col 20)",
      "(line 596,col 9)-(line 597,col 93)",
      "(line 598,col 9)-(line 599,col 119)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorial()",
    "snippet": "@Test\n    public void testFactorial() {\n        for (int i \u003d 1; i \u003c 21; i++) {\n            Assert.assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            Assert.assertEquals(i + \"! \", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            Assert.assertEquals(i + \"! \", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n\n        Assert.assertEquals(\"0\", 1, MathUtils.factorial(0));\n        Assert.assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        Assert.assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }",
    "begin_line": 603,
    "end_line": 613,
    "comment": "",
    "child_ranges": [
      "(line 604,col 9)-(line 608,col 9)",
      "(line 610,col 9)-(line 610,col 60)",
      "(line 611,col 9)-(line 611,col 76)",
      "(line 612,col 9)-(line 612,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()",
    "snippet": "@Test\n    public void testFactorialFail() {\n        try {\n            MathUtils.factorial(-1);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorialDouble(-1);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorialLog(-1);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n        try {\n            MathUtils.factorial(21);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // ignored\n        }\n        Assert.assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n    }",
    "begin_line": 616,
    "end_line": 642,
    "comment": "",
    "child_ranges": [
      "(line 617,col 9)-(line 622,col 9)",
      "(line 623,col 9)-(line 628,col 9)",
      "(line 629,col 9)-(line 634,col 9)",
      "(line 635,col 9)-(line 640,col 9)",
      "(line 641,col 9)-(line 641,col 115)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testGcd()",
    "snippet": "@Test\n    public void testGcd() {\n        int a \u003d 30;\n        int b \u003d 50;\n        int c \u003d 77;\n\n        Assert.assertEquals(0, MathUtils.gcd(0, 0));\n\n        Assert.assertEquals(b, MathUtils.gcd(0, b));\n        Assert.assertEquals(a, MathUtils.gcd(a, 0));\n        Assert.assertEquals(b, MathUtils.gcd(0, -b));\n        Assert.assertEquals(a, MathUtils.gcd(-a, 0));\n\n        Assert.assertEquals(10, MathUtils.gcd(a, b));\n        Assert.assertEquals(10, MathUtils.gcd(-a, b));\n        Assert.assertEquals(10, MathUtils.gcd(a, -b));\n        Assert.assertEquals(10, MathUtils.gcd(-a, -b));\n\n        Assert.assertEquals(1, MathUtils.gcd(a, c));\n        Assert.assertEquals(1, MathUtils.gcd(-a, c));\n        Assert.assertEquals(1, MathUtils.gcd(a, -c));\n        Assert.assertEquals(1, MathUtils.gcd(-a, -c));\n\n        Assert.assertEquals(3 * (1\u003c\u003c15), MathUtils.gcd(3 * (1\u003c\u003c20), 9 * (1\u003c\u003c15)));\n\n        Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n        Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n        Assert.assertEquals(1\u003c\u003c30, MathUtils.gcd(1\u003c\u003c30, -Integer.MIN_VALUE));\n        try {\n            // gcd(Integer.MIN_VALUE, 0) \u003e Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) \u003e Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) \u003e Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n    }",
    "begin_line": 645,
    "end_line": 693,
    "comment": "",
    "child_ranges": [
      "(line 646,col 9)-(line 646,col 19)",
      "(line 647,col 9)-(line 647,col 19)",
      "(line 648,col 9)-(line 648,col 19)",
      "(line 650,col 9)-(line 650,col 52)",
      "(line 652,col 9)-(line 652,col 52)",
      "(line 653,col 9)-(line 653,col 52)",
      "(line 654,col 9)-(line 654,col 53)",
      "(line 655,col 9)-(line 655,col 53)",
      "(line 657,col 9)-(line 657,col 53)",
      "(line 658,col 9)-(line 658,col 54)",
      "(line 659,col 9)-(line 659,col 54)",
      "(line 660,col 9)-(line 660,col 55)",
      "(line 662,col 9)-(line 662,col 52)",
      "(line 663,col 9)-(line 663,col 53)",
      "(line 664,col 9)-(line 664,col 53)",
      "(line 665,col 9)-(line 665,col 54)",
      "(line 667,col 9)-(line 667,col 82)",
      "(line 669,col 9)-(line 669,col 84)",
      "(line 670,col 9)-(line 670,col 85)",
      "(line 671,col 9)-(line 671,col 77)",
      "(line 672,col 9)-(line 678,col 9)",
      "(line 679,col 9)-(line 685,col 9)",
      "(line 686,col 9)-(line 692,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testGcdLong()",
    "snippet": "@Test\n    public void testGcdLong(){\n        long a \u003d 30;\n        long b \u003d 50;\n        long c \u003d 77;\n\n        Assert.assertEquals(0, MathUtils.gcd(0L, 0));\n\n        Assert.assertEquals(b, MathUtils.gcd(0, b));\n        Assert.assertEquals(a, MathUtils.gcd(a, 0));\n        Assert.assertEquals(b, MathUtils.gcd(0, -b));\n        Assert.assertEquals(a, MathUtils.gcd(-a, 0));\n\n        Assert.assertEquals(10, MathUtils.gcd(a, b));\n        Assert.assertEquals(10, MathUtils.gcd(-a, b));\n        Assert.assertEquals(10, MathUtils.gcd(a, -b));\n        Assert.assertEquals(10, MathUtils.gcd(-a, -b));\n\n        Assert.assertEquals(1, MathUtils.gcd(a, c));\n        Assert.assertEquals(1, MathUtils.gcd(-a, c));\n        Assert.assertEquals(1, MathUtils.gcd(a, -c));\n        Assert.assertEquals(1, MathUtils.gcd(-a, -c));\n\n        Assert.assertEquals(3L * (1L\u003c\u003c45), MathUtils.gcd(3L * (1L\u003c\u003c50), 9L * (1L\u003c\u003c45)));\n\n        Assert.assertEquals(1L\u003c\u003c45, MathUtils.gcd(1L\u003c\u003c45, Long.MIN_VALUE));\n\n        Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(Long.MAX_VALUE, 0L));\n        Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(-Long.MAX_VALUE, 0L));\n        Assert.assertEquals(1, MathUtils.gcd(60247241209L, 153092023L));\n        try {\n            // gcd(Long.MIN_VALUE, 0) \u003e Long.MAX_VALUE\n            MathUtils.gcd(Long.MIN_VALUE, 0);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Long.MIN_VALUE) \u003e Long.MAX_VALUE\n            MathUtils.gcd(0, Long.MIN_VALUE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Long.MIN_VALUE, Long.MIN_VALUE) \u003e Long.MAX_VALUE\n            MathUtils.gcd(Long.MIN_VALUE, Long.MIN_VALUE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n    }",
    "begin_line": 696,
    "end_line": 746,
    "comment": "",
    "child_ranges": [
      "(line 697,col 9)-(line 697,col 20)",
      "(line 698,col 9)-(line 698,col 20)",
      "(line 699,col 9)-(line 699,col 20)",
      "(line 701,col 9)-(line 701,col 53)",
      "(line 703,col 9)-(line 703,col 52)",
      "(line 704,col 9)-(line 704,col 52)",
      "(line 705,col 9)-(line 705,col 53)",
      "(line 706,col 9)-(line 706,col 53)",
      "(line 708,col 9)-(line 708,col 53)",
      "(line 709,col 9)-(line 709,col 54)",
      "(line 710,col 9)-(line 710,col 54)",
      "(line 711,col 9)-(line 711,col 55)",
      "(line 713,col 9)-(line 713,col 52)",
      "(line 714,col 9)-(line 714,col 53)",
      "(line 715,col 9)-(line 715,col 53)",
      "(line 716,col 9)-(line 716,col 54)",
      "(line 718,col 9)-(line 718,col 88)",
      "(line 720,col 9)-(line 720,col 75)",
      "(line 722,col 9)-(line 722,col 79)",
      "(line 723,col 9)-(line 723,col 80)",
      "(line 724,col 9)-(line 724,col 72)",
      "(line 725,col 9)-(line 731,col 9)",
      "(line 732,col 9)-(line 738,col 9)",
      "(line 739,col 9)-(line 745,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testGcdConsistency()",
    "snippet": "@Test\n    public void testGcdConsistency() {\n        int[] primeList \u003d {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};\n        ArrayList\u003cInteger\u003e primes \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 0; i \u003c primeList.length; i++) {\n            primes.add(Integer.valueOf(primeList[i]));\n        }\n        RandomDataImpl randomData \u003d new RandomDataImpl();\n        for (int i \u003d 0; i \u003c 20; i++) {\n            Object[] sample \u003d randomData.nextSample(primes, 4);\n            int p1 \u003d ((Integer) sample[0]).intValue();\n            int p2 \u003d ((Integer) sample[1]).intValue();\n            int p3 \u003d ((Integer) sample[2]).intValue();\n            int p4 \u003d ((Integer) sample[3]).intValue();\n            int i1 \u003d p1 * p2 * p3;\n            int i2 \u003d p1 * p2 * p4;\n            int gcd \u003d p1 * p2;\n            Assert.assertEquals(gcd, MathUtils.gcd(i1, i2));\n            long l1 \u003d i1;\n            long l2 \u003d i2;\n            Assert.assertEquals(gcd, MathUtils.gcd(l1, l2));\n        }\n    }",
    "begin_line": 749,
    "end_line": 770,
    "comment": "",
    "child_ranges": [
      "(line 750,col 9)-(line 750,col 71)",
      "(line 751,col 9)-(line 751,col 61)",
      "(line 752,col 9)-(line 754,col 9)",
      "(line 755,col 9)-(line 755,col 57)",
      "(line 756,col 9)-(line 769,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testHash()",
    "snippet": "@Test\n    public void testHash() {\n        double[] testArray \u003d {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d,\n            1E-14,\n            (1 + 1E-14),\n            Double.MIN_VALUE,\n            Double.MAX_VALUE };\n        for (int i \u003d 0; i \u003c testArray.length; i++) {\n            for (int j \u003d 0; j \u003c testArray.length; j++) {\n                if (i \u003d\u003d j) {\n                    Assert.assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n                    Assert.assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n                } else {\n                    Assert.assertTrue(MathUtils.hash(testArray[i]) !\u003d MathUtils.hash(testArray[j]));\n                    Assert.assertTrue(MathUtils.hash(testArray[j]) !\u003d MathUtils.hash(testArray[i]));\n                }\n            }\n        }\n    }",
    "begin_line": 773,
    "end_line": 795,
    "comment": "",
    "child_ranges": [
      "(line 774,col 9)-(line 783,col 31)",
      "(line 784,col 9)-(line 794,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayHash()",
    "snippet": "@Test\n    public void testArrayHash() {\n        Assert.assertEquals(0, MathUtils.hash((double[]) null));\n        Assert.assertEquals(MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }),\n                     MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        Assert.assertFalse(MathUtils.hash(new double[] { 1d }) \u003d\u003d\n                    MathUtils.hash(new double[] { FastMath.nextAfter(1d, 2d) }));\n        Assert.assertFalse(MathUtils.hash(new double[] { 1d }) \u003d\u003d\n                    MathUtils.hash(new double[] { 1d, 1d }));\n    }",
    "begin_line": 798,
    "end_line": 812,
    "comment": "",
    "child_ranges": [
      "(line 799,col 9)-(line 799,col 64)",
      "(line 800,col 9)-(line 807,col 40)",
      "(line 808,col 9)-(line 809,col 81)",
      "(line 810,col 9)-(line 811,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testPermutedArrayHash()",
    "snippet": "@Test\n    public void testPermutedArrayHash() {\n        double[] original \u003d new double[10];\n        double[] permuted \u003d new double[10];\n        RandomDataImpl random \u003d new RandomDataImpl();\n\n        // Generate 10 distinct random values\n        for (int i \u003d 0; i \u003c 10; i++) {\n            original[i] \u003d random.nextUniform(i + 0.5, i + 0.75);\n        }\n\n        // Generate a random permutation, making sure it is not the identity\n        boolean isIdentity \u003d true;\n        do {\n            int[] permutation \u003d random.nextPermutation(10, 10);\n            for (int i \u003d 0; i \u003c 10; i++) {\n                if (i !\u003d permutation[i]) {\n                    isIdentity \u003d false;\n                }\n                permuted[i] \u003d original[permutation[i]];\n            }\n        } while (isIdentity);\n\n        // Verify that permuted array has different hash\n        Assert.assertFalse(MathUtils.hash(original) \u003d\u003d MathUtils.hash(permuted));\n    }",
    "begin_line": 818,
    "end_line": 842,
    "comment": "/** \n * Make sure that permuted arrays do not hash to the same value.\n */\n",
    "child_ranges": [
      "(line 819,col 9)-(line 819,col 43)",
      "(line 820,col 9)-(line 820,col 43)",
      "(line 821,col 9)-(line 821,col 53)",
      "(line 824,col 9)-(line 826,col 9)",
      "(line 829,col 9)-(line 829,col 34)",
      "(line 830,col 9)-(line 838,col 29)",
      "(line 841,col 9)-(line 841,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()",
    "snippet": "@Test\n    public void testIndicatorByte() {\n        Assert.assertEquals((byte)1, MathUtils.indicator((byte)2));\n        Assert.assertEquals((byte)1, MathUtils.indicator((byte)0));\n        Assert.assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n    }",
    "begin_line": 845,
    "end_line": 849,
    "comment": "",
    "child_ranges": [
      "(line 846,col 9)-(line 846,col 67)",
      "(line 847,col 9)-(line 847,col 67)",
      "(line 848,col 9)-(line 848,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()",
    "snippet": "@Test\n    public void testIndicatorDouble() {\n        double delta \u003d 0.0;\n        Assert.assertEquals(1.0, MathUtils.indicator(2.0), delta);\n        Assert.assertEquals(1.0, MathUtils.indicator(0.0), delta);\n        Assert.assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n        Assert.assertTrue(Double.isNaN(MathUtils.indicator(Double.NaN)));\n    }",
    "begin_line": 852,
    "end_line": 858,
    "comment": "",
    "child_ranges": [
      "(line 853,col 9)-(line 853,col 27)",
      "(line 854,col 9)-(line 854,col 66)",
      "(line 855,col 9)-(line 855,col 66)",
      "(line 856,col 9)-(line 856,col 68)",
      "(line 857,col 9)-(line 857,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()",
    "snippet": "@Test\n    public void testIndicatorFloat() {\n        float delta \u003d 0.0F;\n        Assert.assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n        Assert.assertEquals(1.0F, MathUtils.indicator(0.0F), delta);\n        Assert.assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n    }",
    "begin_line": 861,
    "end_line": 866,
    "comment": "",
    "child_ranges": [
      "(line 862,col 9)-(line 862,col 27)",
      "(line 863,col 9)-(line 863,col 68)",
      "(line 864,col 9)-(line 864,col 68)",
      "(line 865,col 9)-(line 865,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()",
    "snippet": "@Test\n    public void testIndicatorInt() {\n        Assert.assertEquals(1, MathUtils.indicator((2)));\n        Assert.assertEquals(1, MathUtils.indicator((0)));\n        Assert.assertEquals((-1), MathUtils.indicator((-2)));\n    }",
    "begin_line": 869,
    "end_line": 873,
    "comment": "",
    "child_ranges": [
      "(line 870,col 9)-(line 870,col 57)",
      "(line 871,col 9)-(line 871,col 57)",
      "(line 872,col 9)-(line 872,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()",
    "snippet": "@Test\n    public void testIndicatorLong() {\n        Assert.assertEquals(1L, MathUtils.indicator(2L));\n        Assert.assertEquals(1L, MathUtils.indicator(0L));\n        Assert.assertEquals(-1L, MathUtils.indicator(-2L));\n    }",
    "begin_line": 876,
    "end_line": 880,
    "comment": "",
    "child_ranges": [
      "(line 877,col 9)-(line 877,col 57)",
      "(line 878,col 9)-(line 878,col 57)",
      "(line 879,col 9)-(line 879,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()",
    "snippet": "@Test\n    public void testIndicatorShort() {\n        Assert.assertEquals((short)1, MathUtils.indicator((short)2));\n        Assert.assertEquals((short)1, MathUtils.indicator((short)0));\n        Assert.assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n    }",
    "begin_line": 883,
    "end_line": 887,
    "comment": "",
    "child_ranges": [
      "(line 884,col 9)-(line 884,col 69)",
      "(line 885,col 9)-(line 885,col 69)",
      "(line 886,col 9)-(line 886,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLcm()",
    "snippet": "@Test\n    public void testLcm() {\n        int a \u003d 30;\n        int b \u003d 50;\n        int c \u003d 77;\n\n        Assert.assertEquals(0, MathUtils.lcm(0, b));\n        Assert.assertEquals(0, MathUtils.lcm(a, 0));\n        Assert.assertEquals(b, MathUtils.lcm(1, b));\n        Assert.assertEquals(a, MathUtils.lcm(a, 1));\n        Assert.assertEquals(150, MathUtils.lcm(a, b));\n        Assert.assertEquals(150, MathUtils.lcm(-a, b));\n        Assert.assertEquals(150, MathUtils.lcm(a, -b));\n        Assert.assertEquals(150, MathUtils.lcm(-a, -b));\n        Assert.assertEquals(2310, MathUtils.lcm(a, c));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        Assert.assertEquals((1\u003c\u003c20)*15, MathUtils.lcm((1\u003c\u003c20)*3, (1\u003c\u003c20)*5));\n\n        // Special case\n        Assert.assertEquals(0, MathUtils.lcm(0, 0));\n\n        try {\n            // lcm \u003d\u003d abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            // lcm \u003d\u003d abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1\u003c\u003c20);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n    }",
    "begin_line": 890,
    "end_line": 934,
    "comment": "",
    "child_ranges": [
      "(line 891,col 9)-(line 891,col 19)",
      "(line 892,col 9)-(line 892,col 19)",
      "(line 893,col 9)-(line 893,col 19)",
      "(line 895,col 9)-(line 895,col 52)",
      "(line 896,col 9)-(line 896,col 52)",
      "(line 897,col 9)-(line 897,col 52)",
      "(line 898,col 9)-(line 898,col 52)",
      "(line 899,col 9)-(line 899,col 54)",
      "(line 900,col 9)-(line 900,col 55)",
      "(line 901,col 9)-(line 901,col 55)",
      "(line 902,col 9)-(line 902,col 56)",
      "(line 903,col 9)-(line 903,col 55)",
      "(line 907,col 9)-(line 907,col 77)",
      "(line 910,col 9)-(line 910,col 52)",
      "(line 912,col 9)-(line 918,col 9)",
      "(line 920,col 9)-(line 926,col 9)",
      "(line 928,col 9)-(line 933,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLcmLong()",
    "snippet": "@Test\n    public void testLcmLong() {\n        long a \u003d 30;\n        long b \u003d 50;\n        long c \u003d 77;\n\n        Assert.assertEquals(0, MathUtils.lcm(0, b));\n        Assert.assertEquals(0, MathUtils.lcm(a, 0));\n        Assert.assertEquals(b, MathUtils.lcm(1, b));\n        Assert.assertEquals(a, MathUtils.lcm(a, 1));\n        Assert.assertEquals(150, MathUtils.lcm(a, b));\n        Assert.assertEquals(150, MathUtils.lcm(-a, b));\n        Assert.assertEquals(150, MathUtils.lcm(a, -b));\n        Assert.assertEquals(150, MathUtils.lcm(-a, -b));\n        Assert.assertEquals(2310, MathUtils.lcm(a, c));\n\n        Assert.assertEquals(Long.MAX_VALUE, MathUtils.lcm(60247241209L, 153092023L));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        Assert.assertEquals((1L\u003c\u003c50)*15, MathUtils.lcm((1L\u003c\u003c45)*3, (1L\u003c\u003c50)*5));\n\n        // Special case\n        Assert.assertEquals(0L, MathUtils.lcm(0L, 0L));\n\n        try {\n            // lcm \u003d\u003d abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Long.MIN_VALUE, 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n\n        try {\n            // lcm \u003d\u003d abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Long.MIN_VALUE, 1\u003c\u003c20);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n\n        Assert.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),\n            MathUtils.lcm((long)Integer.MAX_VALUE, Integer.MAX_VALUE - 1));\n        try {\n            MathUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException expected) {\n            // expected\n        }\n    }",
    "begin_line": 937,
    "end_line": 985,
    "comment": "",
    "child_ranges": [
      "(line 938,col 9)-(line 938,col 20)",
      "(line 939,col 9)-(line 939,col 20)",
      "(line 940,col 9)-(line 940,col 20)",
      "(line 942,col 9)-(line 942,col 52)",
      "(line 943,col 9)-(line 943,col 52)",
      "(line 944,col 9)-(line 944,col 52)",
      "(line 945,col 9)-(line 945,col 52)",
      "(line 946,col 9)-(line 946,col 54)",
      "(line 947,col 9)-(line 947,col 55)",
      "(line 948,col 9)-(line 948,col 55)",
      "(line 949,col 9)-(line 949,col 56)",
      "(line 950,col 9)-(line 950,col 55)",
      "(line 952,col 9)-(line 952,col 85)",
      "(line 956,col 9)-(line 956,col 80)",
      "(line 959,col 9)-(line 959,col 55)",
      "(line 961,col 9)-(line 967,col 9)",
      "(line 969,col 9)-(line 975,col 9)",
      "(line 977,col 9)-(line 978,col 75)",
      "(line 979,col 9)-(line 984,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLog()",
    "snippet": "@Test\n    public void testLog() {\n        Assert.assertEquals(2.0, MathUtils.log(2, 4), 0);\n        Assert.assertEquals(3.0, MathUtils.log(2, 8), 0);\n        Assert.assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n        Assert.assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n        Assert.assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n        Assert.assertEquals(0, MathUtils.log(0, 10), 0);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n    }",
    "begin_line": 988,
    "end_line": 996,
    "comment": "",
    "child_ranges": [
      "(line 989,col 9)-(line 989,col 57)",
      "(line 990,col 9)-(line 990,col 57)",
      "(line 991,col 9)-(line 991,col 62)",
      "(line 992,col 9)-(line 992,col 62)",
      "(line 993,col 9)-(line 993,col 61)",
      "(line 994,col 9)-(line 994,col 56)",
      "(line 995,col 9)-(line 995,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()",
    "snippet": "@Test\n    public void testMulAndCheck() {\n        int big \u003d Integer.MAX_VALUE;\n        int bigNeg \u003d Integer.MIN_VALUE;\n        Assert.assertEquals(big, MathUtils.mulAndCheck(big, 1));\n        try {\n            MathUtils.mulAndCheck(big, 2);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n        try {\n            MathUtils.mulAndCheck(bigNeg, 2);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n    }",
    "begin_line": 999,
    "end_line": 1013,
    "comment": "",
    "child_ranges": [
      "(line 1000,col 9)-(line 1000,col 36)",
      "(line 1001,col 9)-(line 1001,col 39)",
      "(line 1002,col 9)-(line 1002,col 64)",
      "(line 1003,col 9)-(line 1007,col 9)",
      "(line 1008,col 9)-(line 1012,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()",
    "snippet": "@Test\n    public void testMulAndCheckLong() {\n        long max \u003d Long.MAX_VALUE;\n        long min \u003d Long.MIN_VALUE;\n        Assert.assertEquals(max, MathUtils.mulAndCheck(max, 1L));\n        Assert.assertEquals(min, MathUtils.mulAndCheck(min, 1L));\n        Assert.assertEquals(0L, MathUtils.mulAndCheck(max, 0L));\n        Assert.assertEquals(0L, MathUtils.mulAndCheck(min, 0L));\n        Assert.assertEquals(max, MathUtils.mulAndCheck(1L, max));\n        Assert.assertEquals(min, MathUtils.mulAndCheck(1L, min));\n        Assert.assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n        Assert.assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n        Assert.assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));\n        Assert.assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));\n        testMulAndCheckLongFailure(max, 2L);\n        testMulAndCheckLongFailure(2L, max);\n        testMulAndCheckLongFailure(min, 2L);\n        testMulAndCheckLongFailure(2L, min);\n        testMulAndCheckLongFailure(min, -1L);\n        testMulAndCheckLongFailure(-1L, min);\n    }",
    "begin_line": 1016,
    "end_line": 1035,
    "comment": "",
    "child_ranges": [
      "(line 1017,col 9)-(line 1017,col 34)",
      "(line 1018,col 9)-(line 1018,col 34)",
      "(line 1019,col 9)-(line 1019,col 65)",
      "(line 1020,col 9)-(line 1020,col 65)",
      "(line 1021,col 9)-(line 1021,col 64)",
      "(line 1022,col 9)-(line 1022,col 64)",
      "(line 1023,col 9)-(line 1023,col 65)",
      "(line 1024,col 9)-(line 1024,col 65)",
      "(line 1025,col 9)-(line 1025,col 64)",
      "(line 1026,col 9)-(line 1026,col 64)",
      "(line 1027,col 9)-(line 1027,col 65)",
      "(line 1028,col 9)-(line 1028,col 68)",
      "(line 1029,col 9)-(line 1029,col 44)",
      "(line 1030,col 9)-(line 1030,col 44)",
      "(line 1031,col 9)-(line 1031,col 44)",
      "(line 1032,col 9)-(line 1032,col 44)",
      "(line 1033,col 9)-(line 1033,col 45)",
      "(line 1034,col 9)-(line 1034,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long, long)",
    "snippet": "private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n    }",
    "begin_line": 1037,
    "end_line": 1044,
    "comment": "",
    "child_ranges": [
      "(line 1038,col 9)-(line 1043,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeAngle()",
    "snippet": "@Test\n    public void testNormalizeAngle() {\n        for (double a \u003d -15.0; a \u003c\u003d 15.0; a +\u003d 0.1) {\n            for (double b \u003d -15.0; b \u003c\u003d 15.0; b +\u003d 0.2) {\n                double c \u003d MathUtils.normalizeAngle(a, b);\n                Assert.assertTrue((b - FastMath.PI) \u003c\u003d c);\n                Assert.assertTrue(c \u003c\u003d (b + FastMath.PI));\n                double twoK \u003d FastMath.rint((a - c) / FastMath.PI);\n                Assert.assertEquals(c, a - twoK * FastMath.PI, 1.0e-14);\n            }\n        }\n    }",
    "begin_line": 1047,
    "end_line": 1057,
    "comment": "",
    "child_ranges": [
      "(line 1048,col 9)-(line 1056,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testReduce()",
    "snippet": "@Test\n    public void testReduce() {\n        final double period \u003d -12.222;\n        final double offset \u003d 13;\n\n        final double delta \u003d 1.5;\n\n        double orig \u003d offset + 122456789 * period + delta;\n        double expected \u003d delta;\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, period, offset),\n                            1e-7);\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, -period, offset),\n                            1e-7);\n\n        orig \u003d offset - 123356789 * period - delta;\n        expected \u003d Math.abs(period) - delta;\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, period, offset),\n                            1e-6);\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, -period, offset),\n                            1e-6);\n\n        orig \u003d offset - 123446789 * period + delta;\n        expected \u003d delta;\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, period, offset),\n                            1e-6);\n        Assert.assertEquals(expected,\n                            MathUtils.reduce(orig, -period, offset),\n                            1e-6);\n\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, Double.NaN, offset)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.NaN, period, offset)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period, Double.NaN)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period,\n                Double.POSITIVE_INFINITY)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n                period, offset)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,\n                Double.POSITIVE_INFINITY, offset)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,\n                Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n                period, Double.POSITIVE_INFINITY)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n                Double.POSITIVE_INFINITY, offset)));\n        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n                Double.POSITIVE_INFINITY,  Double.POSITIVE_INFINITY)));\n    }",
    "begin_line": 1060,
    "end_line": 1110,
    "comment": "",
    "child_ranges": [
      "(line 1061,col 9)-(line 1061,col 38)",
      "(line 1062,col 9)-(line 1062,col 33)",
      "(line 1064,col 9)-(line 1064,col 33)",
      "(line 1066,col 9)-(line 1066,col 58)",
      "(line 1067,col 9)-(line 1067,col 32)",
      "(line 1068,col 9)-(line 1070,col 34)",
      "(line 1071,col 9)-(line 1073,col 34)",
      "(line 1075,col 9)-(line 1075,col 51)",
      "(line 1076,col 9)-(line 1076,col 44)",
      "(line 1077,col 9)-(line 1079,col 34)",
      "(line 1080,col 9)-(line 1082,col 34)",
      "(line 1084,col 9)-(line 1084,col 51)",
      "(line 1085,col 9)-(line 1085,col 25)",
      "(line 1086,col 9)-(line 1088,col 34)",
      "(line 1089,col 9)-(line 1091,col 34)",
      "(line 1093,col 9)-(line 1093,col 84)",
      "(line 1094,col 9)-(line 1094,col 86)",
      "(line 1095,col 9)-(line 1095,col 84)",
      "(line 1096,col 9)-(line 1097,col 44)",
      "(line 1098,col 9)-(line 1099,col 34)",
      "(line 1100,col 9)-(line 1101,col 52)",
      "(line 1102,col 9)-(line 1103,col 70)",
      "(line 1104,col 9)-(line 1105,col 52)",
      "(line 1106,col 9)-(line 1107,col 52)",
      "(line 1108,col 9)-(line 1109,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testReduceComparedWithNormalizeAngle()",
    "snippet": "@Test\n    public void testReduceComparedWithNormalizeAngle() {\n        final double tol \u003d Math.ulp(1d);\n        final double period \u003d 2 * Math.PI;\n        for (double a \u003d -15; a \u003c\u003d 15; a +\u003d 0.5) {\n            for (double center \u003d -15; center \u003c\u003d 15; center +\u003d 1) {\n                final double nA \u003d MathUtils.normalizeAngle(a, center);\n                final double offset \u003d center - Math.PI;\n                final double r \u003d MathUtils.reduce(a, period, offset);\n                Assert.assertEquals(nA, r + offset, tol);\n            }\n        }\n    }",
    "begin_line": 1113,
    "end_line": 1124,
    "comment": "",
    "child_ranges": [
      "(line 1114,col 9)-(line 1114,col 40)",
      "(line 1115,col 9)-(line 1115,col 42)",
      "(line 1116,col 9)-(line 1123,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeArray()",
    "snippet": "@Test\n    public void testNormalizeArray() {\n        double[] testValues1 \u003d new double[] {1, 1, 2};\n        TestUtils.assertEquals(\n                new double[] {.25, .25, .5},\n                MathUtils.normalizeArray(testValues1, 1),\n                Double.MIN_VALUE);\n\n        double[] testValues2 \u003d new double[] {-1, -1, 1};\n        TestUtils.assertEquals(\n                new double[] {1, 1, -1},\n                MathUtils.normalizeArray(testValues2, 1),\n                Double.MIN_VALUE);\n\n        // Ignore NaNs\n        double[] testValues3 \u003d new double[] {-1, -1, Double.NaN, 1, Double.NaN};\n        TestUtils.assertEquals(\n                new double[] {1, 1,Double.NaN, -1, Double.NaN},\n                MathUtils.normalizeArray(testValues3, 1),\n                Double.MIN_VALUE);\n\n        // Zero sum -\u003e MathArithmeticException\n        double[] zeroSum \u003d new double[] {-1, 1};\n        try {\n            MathUtils.normalizeArray(zeroSum, 1);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        // Infinite elements -\u003e MathArithmeticException\n        double[] hasInf \u003d new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};\n        try {\n            MathUtils.normalizeArray(hasInf, 1);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // Infinite target -\u003e MathIllegalArgumentException\n        try {\n            MathUtils.normalizeArray(testValues1, Double.POSITIVE_INFINITY);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // NaN target -\u003e MathIllegalArgumentException\n        try {\n            MathUtils.normalizeArray(testValues1, Double.NaN);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n    }",
    "begin_line": 1127,
    "end_line": 1173,
    "comment": "",
    "child_ranges": [
      "(line 1128,col 9)-(line 1128,col 54)",
      "(line 1129,col 9)-(line 1132,col 34)",
      "(line 1134,col 9)-(line 1134,col 56)",
      "(line 1135,col 9)-(line 1138,col 34)",
      "(line 1141,col 9)-(line 1141,col 80)",
      "(line 1142,col 9)-(line 1145,col 34)",
      "(line 1148,col 9)-(line 1148,col 48)",
      "(line 1149,col 9)-(line 1152,col 47)",
      "(line 1155,col 9)-(line 1155,col 75)",
      "(line 1156,col 9)-(line 1159,col 52)",
      "(line 1162,col 9)-(line 1165,col 52)",
      "(line 1168,col 9)-(line 1171,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()",
    "snippet": "@Test\n    public void testRoundDouble() {\n        double x \u003d 1.234567890;\n        Assert.assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n\n        // JIRA MATH-151\n        Assert.assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);\n        Assert.assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);\n        double xx \u003d 39.0;\n        xx \u003d xx + 245d / 1000d;\n        Assert.assertEquals(39.25, MathUtils.round(xx, 2), 0.0);\n\n        // BZ 35904\n        Assert.assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n        Assert.assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n        Assert.assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n        Assert.assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n        Assert.assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);\n        Assert.assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);\n        Assert.assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);\n        Assert.assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);\n        Assert.assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);\n\n        Assert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        Assert.assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        Assert.assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n            Assert.fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        Assert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, 1923);\n            Assert.fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // MATH-151\n        Assert.assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        // special values\n        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n        Assert.assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n    }",
    "begin_line": 1176,
    "end_line": 1282,
    "comment": "",
    "child_ranges": [
      "(line 1177,col 9)-(line 1177,col 31)",
      "(line 1178,col 9)-(line 1178,col 62)",
      "(line 1179,col 9)-(line 1179,col 63)",
      "(line 1180,col 9)-(line 1180,col 64)",
      "(line 1183,col 9)-(line 1183,col 68)",
      "(line 1184,col 9)-(line 1184,col 91)",
      "(line 1185,col 9)-(line 1185,col 25)",
      "(line 1186,col 9)-(line 1186,col 31)",
      "(line 1187,col 9)-(line 1187,col 64)",
      "(line 1190,col 9)-(line 1190,col 70)",
      "(line 1191,col 9)-(line 1191,col 70)",
      "(line 1192,col 9)-(line 1192,col 70)",
      "(line 1193,col 9)-(line 1193,col 70)",
      "(line 1194,col 9)-(line 1194,col 71)",
      "(line 1195,col 9)-(line 1195,col 71)",
      "(line 1196,col 9)-(line 1196,col 71)",
      "(line 1197,col 9)-(line 1197,col 71)",
      "(line 1198,col 9)-(line 1198,col 71)",
      "(line 1200,col 9)-(line 1200,col 88)",
      "(line 1201,col 9)-(line 1201,col 89)",
      "(line 1202,col 9)-(line 1202,col 90)",
      "(line 1203,col 9)-(line 1203,col 90)",
      "(line 1204,col 9)-(line 1204,col 91)",
      "(line 1205,col 9)-(line 1205,col 92)",
      "(line 1207,col 9)-(line 1207,col 85)",
      "(line 1208,col 9)-(line 1208,col 86)",
      "(line 1209,col 9)-(line 1209,col 87)",
      "(line 1210,col 9)-(line 1210,col 87)",
      "(line 1211,col 9)-(line 1211,col 88)",
      "(line 1212,col 9)-(line 1212,col 89)",
      "(line 1214,col 9)-(line 1214,col 86)",
      "(line 1215,col 9)-(line 1215,col 87)",
      "(line 1216,col 9)-(line 1216,col 88)",
      "(line 1217,col 9)-(line 1217,col 88)",
      "(line 1218,col 9)-(line 1218,col 89)",
      "(line 1219,col 9)-(line 1219,col 90)",
      "(line 1221,col 9)-(line 1221,col 90)",
      "(line 1222,col 9)-(line 1222,col 91)",
      "(line 1223,col 9)-(line 1223,col 92)",
      "(line 1224,col 9)-(line 1224,col 92)",
      "(line 1225,col 9)-(line 1225,col 93)",
      "(line 1226,col 9)-(line 1226,col 94)",
      "(line 1227,col 9)-(line 1227,col 96)",
      "(line 1228,col 9)-(line 1228,col 98)",
      "(line 1230,col 9)-(line 1230,col 90)",
      "(line 1231,col 9)-(line 1231,col 91)",
      "(line 1232,col 9)-(line 1232,col 92)",
      "(line 1233,col 9)-(line 1233,col 92)",
      "(line 1234,col 9)-(line 1234,col 93)",
      "(line 1235,col 9)-(line 1235,col 94)",
      "(line 1236,col 9)-(line 1236,col 96)",
      "(line 1237,col 9)-(line 1237,col 98)",
      "(line 1238,col 9)-(line 1238,col 96)",
      "(line 1239,col 9)-(line 1239,col 98)",
      "(line 1241,col 9)-(line 1241,col 88)",
      "(line 1242,col 9)-(line 1242,col 89)",
      "(line 1243,col 9)-(line 1243,col 90)",
      "(line 1244,col 9)-(line 1244,col 90)",
      "(line 1245,col 9)-(line 1245,col 91)",
      "(line 1246,col 9)-(line 1246,col 92)",
      "(line 1247,col 9)-(line 1247,col 94)",
      "(line 1248,col 9)-(line 1248,col 96)",
      "(line 1250,col 9)-(line 1250,col 97)",
      "(line 1251,col 9)-(line 1251,col 95)",
      "(line 1253,col 9)-(line 1258,col 9)",
      "(line 1260,col 9)-(line 1260,col 83)",
      "(line 1261,col 9)-(line 1261,col 84)",
      "(line 1262,col 9)-(line 1262,col 85)",
      "(line 1263,col 9)-(line 1263,col 85)",
      "(line 1264,col 9)-(line 1264,col 86)",
      "(line 1265,col 9)-(line 1265,col 87)",
      "(line 1267,col 9)-(line 1272,col 9)",
      "(line 1275,col 9)-(line 1275,col 94)",
      "(line 1278,col 9)-(line 1278,col 80)",
      "(line 1279,col 9)-(line 1279,col 63)",
      "(line 1280,col 9)-(line 1280,col 105)",
      "(line 1281,col 9)-(line 1281,col 105)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()",
    "snippet": "@Test\n    public void testRoundFloat() {\n        float x \u003d 1.234567890f;\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);\n\n        // BZ 35904\n        Assert.assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);\n        Assert.assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);\n        Assert.assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);\n        Assert.assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);\n        Assert.assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);\n        Assert.assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);\n        Assert.assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);\n\n        Assert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        Assert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        Assert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        Assert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        Assert.assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        Assert.assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        Assert.assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);\n            Assert.fail();\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n\n        Assert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, 1923);\n            Assert.fail();\n        } catch (MathIllegalArgumentException ex) {\n            // success\n        }\n\n        // special values\n        TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);\n        Assert.assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);\n        Assert.assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);\n        Assert.assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);\n    }",
    "begin_line": 1285,
    "end_line": 1379,
    "comment": "",
    "child_ranges": [
      "(line 1286,col 9)-(line 1286,col 31)",
      "(line 1287,col 9)-(line 1287,col 63)",
      "(line 1288,col 9)-(line 1288,col 64)",
      "(line 1289,col 9)-(line 1289,col 65)",
      "(line 1292,col 9)-(line 1292,col 70)",
      "(line 1293,col 9)-(line 1293,col 70)",
      "(line 1294,col 9)-(line 1294,col 71)",
      "(line 1295,col 9)-(line 1295,col 71)",
      "(line 1296,col 9)-(line 1296,col 71)",
      "(line 1297,col 9)-(line 1297,col 71)",
      "(line 1298,col 9)-(line 1298,col 71)",
      "(line 1300,col 9)-(line 1300,col 89)",
      "(line 1301,col 9)-(line 1301,col 90)",
      "(line 1302,col 9)-(line 1302,col 91)",
      "(line 1303,col 9)-(line 1303,col 91)",
      "(line 1304,col 9)-(line 1304,col 92)",
      "(line 1305,col 9)-(line 1305,col 93)",
      "(line 1307,col 9)-(line 1307,col 86)",
      "(line 1308,col 9)-(line 1308,col 87)",
      "(line 1309,col 9)-(line 1309,col 88)",
      "(line 1310,col 9)-(line 1310,col 88)",
      "(line 1311,col 9)-(line 1311,col 89)",
      "(line 1312,col 9)-(line 1312,col 90)",
      "(line 1314,col 9)-(line 1314,col 87)",
      "(line 1315,col 9)-(line 1315,col 88)",
      "(line 1316,col 9)-(line 1316,col 89)",
      "(line 1317,col 9)-(line 1317,col 89)",
      "(line 1318,col 9)-(line 1318,col 90)",
      "(line 1319,col 9)-(line 1319,col 91)",
      "(line 1321,col 9)-(line 1321,col 91)",
      "(line 1322,col 9)-(line 1322,col 92)",
      "(line 1323,col 9)-(line 1323,col 93)",
      "(line 1324,col 9)-(line 1324,col 93)",
      "(line 1325,col 9)-(line 1325,col 94)",
      "(line 1326,col 9)-(line 1326,col 95)",
      "(line 1327,col 9)-(line 1327,col 98)",
      "(line 1328,col 9)-(line 1328,col 100)",
      "(line 1330,col 9)-(line 1330,col 91)",
      "(line 1331,col 9)-(line 1331,col 92)",
      "(line 1332,col 9)-(line 1332,col 93)",
      "(line 1333,col 9)-(line 1333,col 93)",
      "(line 1334,col 9)-(line 1334,col 94)",
      "(line 1335,col 9)-(line 1335,col 95)",
      "(line 1336,col 9)-(line 1336,col 98)",
      "(line 1337,col 9)-(line 1337,col 100)",
      "(line 1338,col 9)-(line 1338,col 98)",
      "(line 1339,col 9)-(line 1339,col 100)",
      "(line 1341,col 9)-(line 1341,col 89)",
      "(line 1342,col 9)-(line 1342,col 90)",
      "(line 1343,col 9)-(line 1343,col 91)",
      "(line 1344,col 9)-(line 1344,col 91)",
      "(line 1345,col 9)-(line 1345,col 92)",
      "(line 1346,col 9)-(line 1346,col 93)",
      "(line 1347,col 9)-(line 1347,col 96)",
      "(line 1348,col 9)-(line 1348,col 98)",
      "(line 1350,col 9)-(line 1350,col 99)",
      "(line 1351,col 9)-(line 1351,col 97)",
      "(line 1353,col 9)-(line 1358,col 9)",
      "(line 1360,col 9)-(line 1360,col 84)",
      "(line 1361,col 9)-(line 1361,col 85)",
      "(line 1362,col 9)-(line 1362,col 86)",
      "(line 1363,col 9)-(line 1363,col 86)",
      "(line 1364,col 9)-(line 1364,col 87)",
      "(line 1365,col 9)-(line 1365,col 88)",
      "(line 1367,col 9)-(line 1372,col 9)",
      "(line 1375,col 9)-(line 1375,col 79)",
      "(line 1376,col 9)-(line 1376,col 66)",
      "(line 1377,col 9)-(line 1377,col 104)",
      "(line 1378,col 9)-(line 1378,col 104)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignByte()",
    "snippet": "@Test\n    public void testSignByte() {\n        Assert.assertEquals((byte) 1, MathUtils.sign((byte) 2));\n        Assert.assertEquals((byte) 0, MathUtils.sign((byte) 0));\n        Assert.assertEquals((byte) (-1), MathUtils.sign((byte) (-2)));\n    }",
    "begin_line": 1382,
    "end_line": 1386,
    "comment": "",
    "child_ranges": [
      "(line 1383,col 9)-(line 1383,col 64)",
      "(line 1384,col 9)-(line 1384,col 64)",
      "(line 1385,col 9)-(line 1385,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignDouble()",
    "snippet": "@Test\n    public void testSignDouble() {\n        double delta \u003d 0.0;\n        Assert.assertEquals(1.0, MathUtils.sign(2.0), delta);\n        Assert.assertEquals(0.0, MathUtils.sign(0.0), delta);\n        Assert.assertEquals(-1.0, MathUtils.sign(-2.0), delta);\n        TestUtils.assertSame(-0. / 0., MathUtils.sign(Double.NaN));\n    }",
    "begin_line": 1389,
    "end_line": 1395,
    "comment": "",
    "child_ranges": [
      "(line 1390,col 9)-(line 1390,col 27)",
      "(line 1391,col 9)-(line 1391,col 61)",
      "(line 1392,col 9)-(line 1392,col 61)",
      "(line 1393,col 9)-(line 1393,col 63)",
      "(line 1394,col 9)-(line 1394,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignFloat()",
    "snippet": "@Test\n    public void testSignFloat() {\n        float delta \u003d 0.0F;\n        Assert.assertEquals(1.0F, MathUtils.sign(2.0F), delta);\n        Assert.assertEquals(0.0F, MathUtils.sign(0.0F), delta);\n        Assert.assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);\n        TestUtils.assertSame(Float.NaN, MathUtils.sign(Float.NaN));\n    }",
    "begin_line": 1398,
    "end_line": 1404,
    "comment": "",
    "child_ranges": [
      "(line 1399,col 9)-(line 1399,col 27)",
      "(line 1400,col 9)-(line 1400,col 63)",
      "(line 1401,col 9)-(line 1401,col 63)",
      "(line 1402,col 9)-(line 1402,col 65)",
      "(line 1403,col 9)-(line 1403,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignInt()",
    "snippet": "@Test\n    public void testSignInt() {\n        Assert.assertEquals(1, MathUtils.sign(2));\n        Assert.assertEquals(0, MathUtils.sign(0));\n        Assert.assertEquals((-1), MathUtils.sign((-2)));\n    }",
    "begin_line": 1407,
    "end_line": 1411,
    "comment": "",
    "child_ranges": [
      "(line 1408,col 9)-(line 1408,col 50)",
      "(line 1409,col 9)-(line 1409,col 50)",
      "(line 1410,col 9)-(line 1410,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignLong()",
    "snippet": "@Test\n    public void testSignLong() {\n        Assert.assertEquals(1L, MathUtils.sign(2L));\n        Assert.assertEquals(0L, MathUtils.sign(0L));\n        Assert.assertEquals(-1L, MathUtils.sign(-2L));\n    }",
    "begin_line": 1414,
    "end_line": 1418,
    "comment": "",
    "child_ranges": [
      "(line 1415,col 9)-(line 1415,col 52)",
      "(line 1416,col 9)-(line 1416,col 52)",
      "(line 1417,col 9)-(line 1417,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSignShort()",
    "snippet": "@Test\n    public void testSignShort() {\n        Assert.assertEquals((short) 1, MathUtils.sign((short) 2));\n        Assert.assertEquals((short) 0, MathUtils.sign((short) 0));\n        Assert.assertEquals((short) (-1), MathUtils.sign((short) (-2)));\n    }",
    "begin_line": 1421,
    "end_line": 1425,
    "comment": "",
    "child_ranges": [
      "(line 1422,col 9)-(line 1422,col 66)",
      "(line 1423,col 9)-(line 1423,col 66)",
      "(line 1424,col 9)-(line 1424,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSinh()",
    "snippet": "@Test\n    public void testSinh() {\n        double x \u003d 3.0;\n        double expected \u003d 10.01787;\n        Assert.assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n    }",
    "begin_line": 1428,
    "end_line": 1432,
    "comment": "",
    "child_ranges": [
      "(line 1429,col 9)-(line 1429,col 23)",
      "(line 1430,col 9)-(line 1430,col 35)",
      "(line 1431,col 9)-(line 1431,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()",
    "snippet": "@Test\n    public void testSinhNaN() {\n        Assert.assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n    }",
    "begin_line": 1435,
    "end_line": 1437,
    "comment": "",
    "child_ranges": [
      "(line 1436,col 9)-(line 1436,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()",
    "snippet": "@Test\n    public void testSubAndCheck() {\n        int big \u003d Integer.MAX_VALUE;\n        int bigNeg \u003d Integer.MIN_VALUE;\n        Assert.assertEquals(big, MathUtils.subAndCheck(big, 0));\n        Assert.assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));\n        Assert.assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));\n        try {\n            MathUtils.subAndCheck(big, -1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n        try {\n            MathUtils.subAndCheck(bigNeg, 1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n    }",
    "begin_line": 1440,
    "end_line": 1456,
    "comment": "",
    "child_ranges": [
      "(line 1441,col 9)-(line 1441,col 36)",
      "(line 1442,col 9)-(line 1442,col 39)",
      "(line 1443,col 9)-(line 1443,col 64)",
      "(line 1444,col 9)-(line 1444,col 75)",
      "(line 1445,col 9)-(line 1445,col 69)",
      "(line 1446,col 9)-(line 1450,col 9)",
      "(line 1451,col 9)-(line 1455,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()",
    "snippet": "@Test\n    public void testSubAndCheckErrorMessage() {\n        int big \u003d Integer.MAX_VALUE;\n        try {\n            MathUtils.subAndCheck(big, -1);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            Assert.assertTrue(ex.getMessage().length() \u003e 1);\n        }\n    }",
    "begin_line": 1459,
    "end_line": 1467,
    "comment": "",
    "child_ranges": [
      "(line 1460,col 9)-(line 1460,col 36)",
      "(line 1461,col 9)-(line 1466,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()",
    "snippet": "@Test\n    public void testSubAndCheckLong() {\n        long max \u003d Long.MAX_VALUE;\n        long min \u003d Long.MIN_VALUE;\n        Assert.assertEquals(max, MathUtils.subAndCheck(max, 0));\n        Assert.assertEquals(min, MathUtils.subAndCheck(min, 0));\n        Assert.assertEquals(-max, MathUtils.subAndCheck(0, max));\n        Assert.assertEquals(min + 1, MathUtils.subAndCheck(min, -1));\n        // min \u003d\u003d -1-max\n        Assert.assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));\n        Assert.assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));\n        testSubAndCheckLongFailure(0L, min);\n        testSubAndCheckLongFailure(max, -1L);\n        testSubAndCheckLongFailure(min, 1L);\n    }",
    "begin_line": 1470,
    "end_line": 1483,
    "comment": "",
    "child_ranges": [
      "(line 1471,col 9)-(line 1471,col 34)",
      "(line 1472,col 9)-(line 1472,col 34)",
      "(line 1473,col 9)-(line 1473,col 64)",
      "(line 1474,col 9)-(line 1474,col 64)",
      "(line 1475,col 9)-(line 1475,col 65)",
      "(line 1476,col 9)-(line 1476,col 69)",
      "(line 1478,col 9)-(line 1478,col 71)",
      "(line 1479,col 9)-(line 1479,col 70)",
      "(line 1480,col 9)-(line 1480,col 44)",
      "(line 1481,col 9)-(line 1481,col 45)",
      "(line 1482,col 9)-(line 1482,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long, long)",
    "snippet": "private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n\n    }",
    "begin_line": 1485,
    "end_line": 1493,
    "comment": "",
    "child_ranges": [
      "(line 1486,col 9)-(line 1491,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testPow()",
    "snippet": "@Test\n    public void testPow() {\n\n        Assert.assertEquals(1801088541, MathUtils.pow(21, 7));\n        Assert.assertEquals(1, MathUtils.pow(21, 0));\n        try {\n            MathUtils.pow(21, -7);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        Assert.assertEquals(1801088541, MathUtils.pow(21, 7l));\n        Assert.assertEquals(1, MathUtils.pow(21, 0l));\n        try {\n            MathUtils.pow(21, -7l);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        Assert.assertEquals(1801088541l, MathUtils.pow(21l, 7));\n        Assert.assertEquals(1l, MathUtils.pow(21l, 0));\n        try {\n            MathUtils.pow(21l, -7);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        Assert.assertEquals(1801088541l, MathUtils.pow(21l, 7l));\n        Assert.assertEquals(1l, MathUtils.pow(21l, 0l));\n        try {\n            MathUtils.pow(21l, -7l);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        BigInteger twentyOne \u003d BigInteger.valueOf(21l);\n        Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));\n        Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));\n        try {\n            MathUtils.pow(twentyOne, -7);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));\n        Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));\n        try {\n            MathUtils.pow(twentyOne, -7l);\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));\n        Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));\n        try {\n            MathUtils.pow(twentyOne, BigInteger.valueOf(-7l));\n            Assert.fail(\"Expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected behavior\n        }\n\n        BigInteger bigOne \u003d\n            new BigInteger(\"1543786922199448028351389769265814882661837148\" +\n                           \"4763915343722775611762713982220306372888519211\" +\n                           \"560905579993523402015636025177602059044911261\");\n        Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103));\n        Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103l));\n        Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));\n\n    }",
    "begin_line": 1496,
    "end_line": 1570,
    "comment": "",
    "child_ranges": [
      "(line 1498,col 9)-(line 1498,col 62)",
      "(line 1499,col 9)-(line 1499,col 53)",
      "(line 1500,col 9)-(line 1505,col 9)",
      "(line 1507,col 9)-(line 1507,col 63)",
      "(line 1508,col 9)-(line 1508,col 54)",
      "(line 1509,col 9)-(line 1514,col 9)",
      "(line 1516,col 9)-(line 1516,col 64)",
      "(line 1517,col 9)-(line 1517,col 55)",
      "(line 1518,col 9)-(line 1523,col 9)",
      "(line 1525,col 9)-(line 1525,col 65)",
      "(line 1526,col 9)-(line 1526,col 56)",
      "(line 1527,col 9)-(line 1532,col 9)",
      "(line 1534,col 9)-(line 1534,col 55)",
      "(line 1535,col 9)-(line 1535,col 90)",
      "(line 1536,col 9)-(line 1536,col 73)",
      "(line 1537,col 9)-(line 1542,col 9)",
      "(line 1544,col 9)-(line 1544,col 91)",
      "(line 1545,col 9)-(line 1545,col 74)",
      "(line 1546,col 9)-(line 1551,col 9)",
      "(line 1553,col 9)-(line 1553,col 111)",
      "(line 1554,col 9)-(line 1554,col 87)",
      "(line 1555,col 9)-(line 1560,col 9)",
      "(line 1562,col 9)-(line 1565,col 76)",
      "(line 1566,col 9)-(line 1566,col 67)",
      "(line 1567,col 9)-(line 1567,col 68)",
      "(line 1568,col 9)-(line 1568,col 88)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testL1DistanceDouble()",
    "snippet": "@Test\n    public void testL1DistanceDouble() {\n        double[] p1 \u003d { 2.5,  0.0 };\n        double[] p2 \u003d { -0.5, 4.0 };\n        Assert.assertTrue(MathUtils.equals(7.0, MathUtils.distance1(p1, p2), 1));\n    }",
    "begin_line": 1573,
    "end_line": 1577,
    "comment": "",
    "child_ranges": [
      "(line 1574,col 9)-(line 1574,col 36)",
      "(line 1575,col 9)-(line 1575,col 36)",
      "(line 1576,col 9)-(line 1576,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testL1DistanceInt()",
    "snippet": "@Test\n    public void testL1DistanceInt() {\n        int[] p1 \u003d { 3, 0 };\n        int[] p2 \u003d { 0, 4 };\n        Assert.assertEquals(7, MathUtils.distance1(p1, p2));\n    }",
    "begin_line": 1580,
    "end_line": 1584,
    "comment": "",
    "child_ranges": [
      "(line 1581,col 9)-(line 1581,col 28)",
      "(line 1582,col 9)-(line 1582,col 28)",
      "(line 1583,col 9)-(line 1583,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testL2DistanceDouble()",
    "snippet": "@Test\n    public void testL2DistanceDouble() {\n        double[] p1 \u003d { 2.5,  0.0 };\n        double[] p2 \u003d { -0.5, 4.0 };\n        Assert.assertTrue(MathUtils.equals(5.0, MathUtils.distance(p1, p2), 1));\n    }",
    "begin_line": 1587,
    "end_line": 1591,
    "comment": "",
    "child_ranges": [
      "(line 1588,col 9)-(line 1588,col 36)",
      "(line 1589,col 9)-(line 1589,col 36)",
      "(line 1590,col 9)-(line 1590,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testL2DistanceInt()",
    "snippet": "@Test\n    public void testL2DistanceInt() {\n        int[] p1 \u003d { 3, 0 };\n        int[] p2 \u003d { 0, 4 };\n        Assert.assertTrue(MathUtils.equals(5, MathUtils.distance(p1, p2), 1));\n    }",
    "begin_line": 1594,
    "end_line": 1598,
    "comment": "",
    "child_ranges": [
      "(line 1595,col 9)-(line 1595,col 28)",
      "(line 1596,col 9)-(line 1596,col 28)",
      "(line 1597,col 9)-(line 1597,col 78)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLInfDistanceDouble()",
    "snippet": "@Test\n    public void testLInfDistanceDouble() {\n        double[] p1 \u003d { 2.5,  0.0 };\n        double[] p2 \u003d { -0.5, 4.0 };\n        Assert.assertTrue(MathUtils.equals(4.0, MathUtils.distanceInf(p1, p2), 1));\n    }",
    "begin_line": 1601,
    "end_line": 1605,
    "comment": "",
    "child_ranges": [
      "(line 1602,col 9)-(line 1602,col 36)",
      "(line 1603,col 9)-(line 1603,col 36)",
      "(line 1604,col 9)-(line 1604,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLInfDistanceInt()",
    "snippet": "@Test\n    public void testLInfDistanceInt() {\n        int[] p1 \u003d { 3, 0 };\n        int[] p2 \u003d { 0, 4 };\n        Assert.assertEquals(4, MathUtils.distanceInf(p1, p2));\n    }",
    "begin_line": 1608,
    "end_line": 1612,
    "comment": "",
    "child_ranges": [
      "(line 1609,col 9)-(line 1609,col 28)",
      "(line 1610,col 9)-(line 1610,col 28)",
      "(line 1611,col 9)-(line 1611,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCheckOrder()",
    "snippet": "@Test\n    public void testCheckOrder() {\n        MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15},\n                             MathUtils.OrderDirection.INCREASING, true);\n        MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2},\n                             MathUtils.OrderDirection.INCREASING, false);\n        MathUtils.checkOrder(new double[] {3, -5.5, -11, -27.5},\n                             MathUtils.OrderDirection.DECREASING, true);\n        MathUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},\n                             MathUtils.OrderDirection.DECREASING, false);\n\n        try {\n            MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},\n                                 MathUtils.OrderDirection.INCREASING, true);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},\n                                 MathUtils.OrderDirection.INCREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},\n                                 MathUtils.OrderDirection.DECREASING, true);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},\n                                 MathUtils.OrderDirection.DECREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkOrder(new double[] {3, 0, -5.5, -11, -10},\n                                 MathUtils.OrderDirection.DECREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n    }",
    "begin_line": 1615,
    "end_line": 1660,
    "comment": "",
    "child_ranges": [
      "(line 1616,col 9)-(line 1617,col 72)",
      "(line 1618,col 9)-(line 1619,col 73)",
      "(line 1620,col 9)-(line 1621,col 72)",
      "(line 1622,col 9)-(line 1623,col 73)",
      "(line 1625,col 9)-(line 1631,col 9)",
      "(line 1632,col 9)-(line 1638,col 9)",
      "(line 1639,col 9)-(line 1645,col 9)",
      "(line 1646,col 9)-(line 1652,col 9)",
      "(line 1653,col 9)-(line 1659,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIsMonotone()",
    "snippet": "@Test\n    public void testIsMonotone() {\n        if(MathUtils.isMonotone(new double[] {-15, -5.5, -1, -1, 2,15},\n                             MathUtils.OrderDirection.INCREASING, true) ){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n\n        if(MathUtils.isMonotone(new double[] {-15, -5.5,-1,-2,2},\n                             MathUtils.OrderDirection.INCREASING, false)){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n\n        if(MathUtils.isMonotone(new double[] {3,3,-5.5,-11,-27.5},\n                             MathUtils.OrderDirection.DECREASING, true)){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n        if( MathUtils.isMonotone(new double[] {3,-1,0,-5.5,-11,-27.5},\n                             MathUtils.OrderDirection.DECREASING, false) ){\n        Assert.fail(\"an exception should have been thrown\");\n        }\n\n    }",
    "begin_line": 1663,
    "end_line": 1683,
    "comment": "",
    "child_ranges": [
      "(line 1664,col 9)-(line 1667,col 9)",
      "(line 1669,col 9)-(line 1672,col 9)",
      "(line 1674,col 9)-(line 1677,col 9)",
      "(line 1678,col 9)-(line 1681,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testIsMonotoneComparable()",
    "snippet": "@Test\n    public void testIsMonotoneComparable() {\n        if(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-1), new Double(2), new Double(15)},\n                             MathUtils.OrderDirection.INCREASING, true) ){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n\n        if(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-2), new Double(2)},\n                             MathUtils.OrderDirection.INCREASING, false)){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n\n        if(MathUtils.isMonotone(new Double[] {new Double(3), new Double(3), new Double(-5.5), new Double(-11), new Double(-27.5)},\n                             MathUtils.OrderDirection.DECREASING, true)){\n            Assert.fail(\"an exception should have been thrown\");\n        }\n        if( MathUtils.isMonotone(new Double[] {new Double(3), new Double(-1), new Double(0), new Double(-5.5), new Double(-11), new Double(-27.5)},\n                             MathUtils.OrderDirection.DECREASING, false) ){\n        Assert.fail(\"an exception should have been thrown\");\n        }\n\n    }",
    "begin_line": 1686,
    "end_line": 1706,
    "comment": "",
    "child_ranges": [
      "(line 1687,col 9)-(line 1690,col 9)",
      "(line 1692,col 9)-(line 1695,col 9)",
      "(line 1697,col 9)-(line 1700,col 9)",
      "(line 1701,col 9)-(line 1704,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCheckFinite()",
    "snippet": "@Test\n    public void testCheckFinite() {\n        try {\n            MathUtils.checkFinite(Double.POSITIVE_INFINITY);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkFinite(Double.NEGATIVE_INFINITY);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkFinite(Double.NaN);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n\n        try {\n            MathUtils.checkFinite(new double[] {0, -1, Double.POSITIVE_INFINITY, -2, 3});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkFinite(new double[] {1, Double.NEGATIVE_INFINITY, -2, 3});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n        try {\n            MathUtils.checkFinite(new double[] {4, 3, -1, Double.NaN, -2, 1});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NotFiniteNumberException e) {\n            // Expected\n        }\n    }",
    "begin_line": 1709,
    "end_line": 1747,
    "comment": "",
    "child_ranges": [
      "(line 1710,col 9)-(line 1715,col 9)",
      "(line 1716,col 9)-(line 1721,col 9)",
      "(line 1722,col 9)-(line 1727,col 9)",
      "(line 1729,col 9)-(line 1734,col 9)",
      "(line 1735,col 9)-(line 1740,col 9)",
      "(line 1741,col 9)-(line 1746,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSortInPlace()",
    "snippet": "@Test\n    public void testSortInPlace() {\n        final double[] x1 \u003d {2,   5,  -3, 1,  4};\n        final double[] x2 \u003d {4,  25,   9, 1, 16};\n        final double[] x3 \u003d {8, 125, -27, 1, 64};\n\n        MathUtils.sortInPlace(x1, x2, x3);\n\n        Assert.assertEquals(-3,  x1[0], Math.ulp(1d));\n        Assert.assertEquals(9,   x2[0], Math.ulp(1d));\n        Assert.assertEquals(-27, x3[0], Math.ulp(1d));\n\n        Assert.assertEquals(1, x1[1], Math.ulp(1d));\n        Assert.assertEquals(1, x2[1], Math.ulp(1d));\n        Assert.assertEquals(1, x3[1], Math.ulp(1d));\n\n        Assert.assertEquals(2, x1[2], Math.ulp(1d));\n        Assert.assertEquals(4, x2[2], Math.ulp(1d));\n        Assert.assertEquals(8, x3[2], Math.ulp(1d));\n\n        Assert.assertEquals(4,  x1[3], Math.ulp(1d));\n        Assert.assertEquals(16, x2[3], Math.ulp(1d));\n        Assert.assertEquals(64, x3[3], Math.ulp(1d));\n\n        Assert.assertEquals(5,   x1[4], Math.ulp(1d));\n        Assert.assertEquals(25,  x2[4], Math.ulp(1d));\n        Assert.assertEquals(125, x3[4], Math.ulp(1d));\n    }",
    "begin_line": 1750,
    "end_line": 1776,
    "comment": "",
    "child_ranges": [
      "(line 1751,col 9)-(line 1751,col 49)",
      "(line 1752,col 9)-(line 1752,col 49)",
      "(line 1753,col 9)-(line 1753,col 49)",
      "(line 1755,col 9)-(line 1755,col 42)",
      "(line 1757,col 9)-(line 1757,col 54)",
      "(line 1758,col 9)-(line 1758,col 54)",
      "(line 1759,col 9)-(line 1759,col 54)",
      "(line 1761,col 9)-(line 1761,col 52)",
      "(line 1762,col 9)-(line 1762,col 52)",
      "(line 1763,col 9)-(line 1763,col 52)",
      "(line 1765,col 9)-(line 1765,col 52)",
      "(line 1766,col 9)-(line 1766,col 52)",
      "(line 1767,col 9)-(line 1767,col 52)",
      "(line 1769,col 9)-(line 1769,col 53)",
      "(line 1770,col 9)-(line 1770,col 53)",
      "(line 1771,col 9)-(line 1771,col 53)",
      "(line 1773,col 9)-(line 1773,col 54)",
      "(line 1774,col 9)-(line 1774,col 54)",
      "(line 1775,col 9)-(line 1775,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSortInPlaceExample()",
    "snippet": "@Test\n    \n    public void testSortInPlaceExample() {\n        final double[] x \u003d {3, 1, 2};\n        final double[] y \u003d {1, 2, 3};\n        final double[] z \u003d {0, 5, 7};\n        MathUtils.sortInPlace(x, y, z);\n        final double[] sx \u003d {1, 2, 3};\n        final double[] sy \u003d {2, 3, 1};\n        final double[] sz \u003d {5, 7, 0};\n        Assert.assertTrue(Arrays.equals(sx, x));\n        Assert.assertTrue(Arrays.equals(sy, y));\n        Assert.assertTrue(Arrays.equals(sz, z));\n    }",
    "begin_line": 1780,
    "end_line": 1791,
    "comment": "",
    "child_ranges": [
      "(line 1781,col 9)-(line 1781,col 37)",
      "(line 1782,col 9)-(line 1782,col 37)",
      "(line 1783,col 9)-(line 1783,col 37)",
      "(line 1784,col 9)-(line 1784,col 39)",
      "(line 1785,col 9)-(line 1785,col 38)",
      "(line 1786,col 9)-(line 1786,col 38)",
      "(line 1787,col 9)-(line 1787,col 38)",
      "(line 1788,col 9)-(line 1788,col 48)",
      "(line 1789,col 9)-(line 1789,col 48)",
      "(line 1790,col 9)-(line 1790,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testSortInPlaceFaliures()",
    "snippet": "@Test\n    public void testSortInPlaceFaliures() {\n        final double[] nullArray \u003d null;\n        final double[] one \u003d {1};\n        final double[] two \u003d {1, 2};\n        final double[] onep \u003d {2};\n        try {\n            MathUtils.sortInPlace(one, two);\n            Assert.fail(\"Expecting DimensionMismatchException\");\n        } catch (DimensionMismatchException ex) {\n            // expected\n        }\n        try {\n            MathUtils.sortInPlace(one, nullArray);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n            // expected\n        }\n        try {\n            MathUtils.sortInPlace(one, onep, nullArray);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n            // expected\n        }\n    }",
    "begin_line": 1794,
    "end_line": 1817,
    "comment": "",
    "child_ranges": [
      "(line 1795,col 9)-(line 1795,col 40)",
      "(line 1796,col 9)-(line 1796,col 33)",
      "(line 1797,col 9)-(line 1797,col 36)",
      "(line 1798,col 9)-(line 1798,col 34)",
      "(line 1799,col 9)-(line 1804,col 9)",
      "(line 1805,col 9)-(line 1810,col 9)",
      "(line 1811,col 9)-(line 1816,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfInt()",
    "snippet": "@Test\n    public void testCopyOfInt() {\n        final int[] source \u003d { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int[] dest \u003d MathUtils.copyOf(source);\n\n        Assert.assertEquals(dest.length, source.length);\n        for (int i \u003d 0; i \u003c source.length; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n    }",
    "begin_line": 1820,
    "end_line": 1830,
    "comment": "",
    "child_ranges": [
      "(line 1821,col 9)-(line 1823,col 51)",
      "(line 1824,col 9)-(line 1824,col 52)",
      "(line 1826,col 9)-(line 1826,col 56)",
      "(line 1827,col 9)-(line 1829,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfInt2()",
    "snippet": "@Test\n    public void testCopyOfInt2() {\n        final int[] source \u003d { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int offset \u003d 3;\n        final int[] dest \u003d MathUtils.copyOf(source, source.length - offset);\n\n        Assert.assertEquals(dest.length, source.length - offset);\n        for (int i \u003d 0; i \u003c source.length - offset; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n    }",
    "begin_line": 1833,
    "end_line": 1844,
    "comment": "",
    "child_ranges": [
      "(line 1834,col 9)-(line 1836,col 51)",
      "(line 1837,col 9)-(line 1837,col 29)",
      "(line 1838,col 9)-(line 1838,col 76)",
      "(line 1840,col 9)-(line 1840,col 65)",
      "(line 1841,col 9)-(line 1843,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfInt3()",
    "snippet": "@Test\n    public void testCopyOfInt3() {\n        final int[] source \u003d { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int offset \u003d 3;\n        final int[] dest \u003d MathUtils.copyOf(source, source.length + offset);\n\n        Assert.assertEquals(dest.length, source.length + offset);\n        for (int i \u003d 0; i \u003c source.length; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n        for (int i \u003d source.length; i \u003c source.length + offset; i++) {\n            Assert.assertEquals(0, dest[i], 0);\n        }\n    }",
    "begin_line": 1847,
    "end_line": 1861,
    "comment": "",
    "child_ranges": [
      "(line 1848,col 9)-(line 1850,col 51)",
      "(line 1851,col 9)-(line 1851,col 29)",
      "(line 1852,col 9)-(line 1852,col 76)",
      "(line 1854,col 9)-(line 1854,col 65)",
      "(line 1855,col 9)-(line 1857,col 9)",
      "(line 1858,col 9)-(line 1860,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfDouble()",
    "snippet": "@Test\n    public void testCopyOfDouble() {\n        final double[] source \u003d { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final double[] dest \u003d MathUtils.copyOf(source);\n\n        Assert.assertEquals(dest.length, source.length);\n        for (int i \u003d 0; i \u003c source.length; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n    }",
    "begin_line": 1864,
    "end_line": 1879,
    "comment": "",
    "child_ranges": [
      "(line 1865,col 9)-(line 1872,col 61)",
      "(line 1873,col 9)-(line 1873,col 55)",
      "(line 1875,col 9)-(line 1875,col 56)",
      "(line 1876,col 9)-(line 1878,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfDouble2()",
    "snippet": "@Test\n    public void testCopyOfDouble2() {\n        final double[] source \u003d { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final int offset \u003d 3;\n        final double[] dest \u003d MathUtils.copyOf(source, source.length - offset);\n\n        Assert.assertEquals(dest.length, source.length - offset);\n        for (int i \u003d 0; i \u003c source.length - offset; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n    }",
    "begin_line": 1882,
    "end_line": 1898,
    "comment": "",
    "child_ranges": [
      "(line 1883,col 9)-(line 1890,col 61)",
      "(line 1891,col 9)-(line 1891,col 29)",
      "(line 1892,col 9)-(line 1892,col 79)",
      "(line 1894,col 9)-(line 1894,col 65)",
      "(line 1895,col 9)-(line 1897,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCopyOfDouble3()",
    "snippet": "@Test\n    public void testCopyOfDouble3() {\n        final double[] source \u003d { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final int offset \u003d 3;\n        final double[] dest \u003d MathUtils.copyOf(source, source.length + offset);\n\n        Assert.assertEquals(dest.length, source.length + offset);\n        for (int i \u003d 0; i \u003c source.length; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n        for (int i \u003d source.length; i \u003c source.length + offset; i++) {\n            Assert.assertEquals(0, dest[i], 0);\n        }\n    }",
    "begin_line": 1901,
    "end_line": 1920,
    "comment": "",
    "child_ranges": [
      "(line 1902,col 9)-(line 1909,col 61)",
      "(line 1910,col 9)-(line 1910,col 29)",
      "(line 1911,col 9)-(line 1911,col 79)",
      "(line 1913,col 9)-(line 1913,col 65)",
      "(line 1914,col 9)-(line 1916,col 9)",
      "(line 1917,col 9)-(line 1919,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCheckNotNull1()",
    "snippet": "@Test\n    public void testCheckNotNull1() {\n        try {\n            Object obj \u003d null;\n            MathUtils.checkNotNull(obj);\n        } catch (NullArgumentException e) {\n            // Expected.\n        }\n    }",
    "begin_line": 1923,
    "end_line": 1930,
    "comment": "",
    "child_ranges": [
      "(line 1924,col 9)-(line 1929,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testCheckNotNull2()",
    "snippet": "@Test\n    public void testCheckNotNull2() {\n        try {\n            double[] array \u003d null;\n            MathUtils.checkNotNull(array, LocalizedFormats.INPUT_ARRAY);\n        } catch (NullArgumentException e) {\n            // Expected.\n        }\n    }",
    "begin_line": 1933,
    "end_line": 1940,
    "comment": "",
    "child_ranges": [
      "(line 1934,col 9)-(line 1939,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLinearCombination1()",
    "snippet": "@Test\n    public void testLinearCombination1() {\n        final double[] a \u003d new double[] {\n            -1321008684645961.0 / 268435456.0,\n            -5774608829631843.0 / 268435456.0,\n            -7645843051051357.0 / 8589934592.0\n        };\n        final double[] b \u003d new double[] {\n            -5712344449280879.0 / 2097152.0,\n            -4550117129121957.0 / 2097152.0,\n            8846951984510141.0 / 131072.0\n        };\n\n        final double abSumInline \u003d MathUtils.linearCombination(a[0], b[0],\n                                                               a[1], b[1],\n                                                               a[2], b[2]);\n        final double abSumArray \u003d MathUtils.linearCombination(a, b);\n\n        Assert.assertEquals(abSumInline, abSumArray, 0);\n    }",
    "begin_line": 1943,
    "end_line": 1961,
    "comment": "",
    "child_ranges": [
      "(line 1944,col 9)-(line 1948,col 10)",
      "(line 1949,col 9)-(line 1953,col 10)",
      "(line 1955,col 9)-(line 1957,col 75)",
      "(line 1958,col 9)-(line 1958,col 68)",
      "(line 1960,col 9)-(line 1960,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLinearCombination2()",
    "snippet": "@Test\n    public void testLinearCombination2() {\n        // we compare accurate versus naive dot product implementations\n        // on regular vectors (i.e. not extreme cases like in the previous test)\n        Well1024a random \u003d new Well1024a(553267312521321234l);\n\n        for (int i \u003d 0; i \u003c 10000; ++i) {\n            final double ux \u003d 1e17 * random.nextDouble();\n            final double uy \u003d 1e17 * random.nextDouble();\n            final double uz \u003d 1e17 * random.nextDouble();\n            final double vx \u003d 1e17 * random.nextDouble();\n            final double vy \u003d 1e17 * random.nextDouble();\n            final double vz \u003d 1e17 * random.nextDouble();\n            final double sInline \u003d MathUtils.linearCombination(ux, vx,\n                                                               uy, vy,\n                                                               uz, vz);\n            final double sArray \u003d MathUtils.linearCombination(new double[] {ux, uy, uz},\n                                                              new double[] {vx, vy, vz});\n            Assert.assertEquals(sInline, sArray, 0);\n        }\n    }",
    "begin_line": 1964,
    "end_line": 1983,
    "comment": "",
    "child_ranges": [
      "(line 1967,col 9)-(line 1967,col 62)",
      "(line 1969,col 9)-(line 1982,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.util.MathUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/util/MathUtilsTest.java",
    "signature": "org.apache.commons.math.util.MathUtilsTest.testLinearCombinationInfinite()",
    "snippet": "@Test\n    public void testLinearCombinationInfinite() {\n        final double[][] a \u003d new double[][] {\n            { 1, 2, 3, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, 4},\n            { 1, 2, Double.POSITIVE_INFINITY, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4}\n        };\n        final double[][] b \u003d new double[][] {\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, 4},\n            { 1, -2, Double.POSITIVE_INFINITY, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n            { Double.NaN, -2, 3, 4}\n        };\n\n        Assert.assertEquals(-3,\n                            MathUtils.linearCombination(a[0][0], b[0][0],\n                                                        a[0][1], b[0][1]),\n                            1.0e-10);\n        Assert.assertEquals(6,\n                            MathUtils.linearCombination(a[0][0], b[0][0],\n                                                        a[0][1], b[0][1],\n                                                        a[0][2], b[0][2]),\n                            1.0e-10);\n        Assert.assertEquals(22,\n                            MathUtils.linearCombination(a[0][0], b[0][0],\n                                                        a[0][1], b[0][1],\n                                                        a[0][2], b[0][2],\n                                                        a[0][3], b[0][3]),\n                            1.0e-10);\n        Assert.assertEquals(22, MathUtils.linearCombination(a[0], b[0]), 1.0e-10);\n\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[1][0], b[1][0],\n                                                        a[1][1], b[1][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[1][0], b[1][0],\n                                                        a[1][1], b[1][1],\n                                                        a[1][2], b[1][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[1][0], b[1][0],\n                                                        a[1][1], b[1][1],\n                                                        a[1][2], b[1][2],\n                                                        a[1][3], b[1][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[1], b[1]), 1.0e-10);\n\n        Assert.assertEquals(-3,\n                            MathUtils.linearCombination(a[2][0], b[2][0],\n                                                        a[2][1], b[2][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[2][0], b[2][0],\n                                                        a[2][1], b[2][1],\n                                                        a[2][2], b[2][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[2][0], b[2][0],\n                                                        a[2][1], b[2][1],\n                                                        a[2][2], b[2][2],\n                                                        a[2][3], b[2][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[2], b[2]), 1.0e-10);\n\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[3][0], b[3][0],\n                                                        a[3][1], b[3][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[3][0], b[3][0],\n                                                        a[3][1], b[3][1],\n                                                        a[3][2], b[3][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathUtils.linearCombination(a[3][0], b[3][0],\n                                                        a[3][1], b[3][1],\n                                                        a[3][2], b[3][2],\n                                                        a[3][3], b[3][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[3], b[3]), 1.0e-10);\n\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[4][0], b[4][0],\n                                                        a[4][1], b[4][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[4][0], b[4][0],\n                                                        a[4][1], b[4][1],\n                                                        a[4][2], b[4][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[4][0], b[4][0],\n                                                        a[4][1], b[4][1],\n                                                        a[4][2], b[4][2],\n                                                        a[4][3], b[4][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[4], b[4]), 1.0e-10);\n\n        Assert.assertEquals(-3,\n                            MathUtils.linearCombination(a[5][0], b[5][0],\n                                                        a[5][1], b[5][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[5][0], b[5][0],\n                                                        a[5][1], b[5][1],\n                                                        a[5][2], b[5][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[5][0], b[5][0],\n                                                        a[5][1], b[5][1],\n                                                        a[5][2], b[5][2],\n                                                        a[5][3], b[5][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[5], b[5]), 1.0e-10);\n\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[6][0], b[6][0],\n                                                        a[6][1], b[6][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathUtils.linearCombination(a[6][0], b[6][0],\n                                                        a[6][1], b[6][1],\n                                                        a[6][2], b[6][2]),\n                            1.0e-10);\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6][0], b[6][0],\n                                                                   a[6][1], b[6][1],\n                                                                   a[6][2], b[6][2],\n                                                                   a[6][3], b[6][3])));\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6], b[6])));\n\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n                                                        a[7][1], b[7][1])));\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n                                                        a[7][1], b[7][1],\n                                                        a[7][2], b[7][2])));\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n                                                                   a[7][1], b[7][1],\n                                                                   a[7][2], b[7][2],\n                                                                   a[7][3], b[7][3])));\n        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7], b[7])));\n\n    }",
    "begin_line": 1986,
    "end_line": 2136,
    "comment": "",
    "child_ranges": [
      "(line 1987,col 9)-(line 1996,col 10)",
      "(line 1997,col 9)-(line 2006,col 10)",
      "(line 2008,col 9)-(line 2011,col 37)",
      "(line 2012,col 9)-(line 2016,col 37)",
      "(line 2017,col 9)-(line 2022,col 37)",
      "(line 2023,col 9)-(line 2023,col 82)",
      "(line 2025,col 9)-(line 2028,col 37)",
      "(line 2029,col 9)-(line 2033,col 37)",
      "(line 2034,col 9)-(line 2039,col 37)",
      "(line 2040,col 9)-(line 2040,col 104)",
      "(line 2042,col 9)-(line 2045,col 37)",
      "(line 2046,col 9)-(line 2050,col 37)",
      "(line 2051,col 9)-(line 2056,col 37)",
      "(line 2057,col 9)-(line 2057,col 104)",
      "(line 2059,col 9)-(line 2062,col 37)",
      "(line 2063,col 9)-(line 2067,col 37)",
      "(line 2068,col 9)-(line 2073,col 37)",
      "(line 2074,col 9)-(line 2074,col 104)",
      "(line 2076,col 9)-(line 2079,col 37)",
      "(line 2080,col 9)-(line 2084,col 37)",
      "(line 2085,col 9)-(line 2090,col 37)",
      "(line 2091,col 9)-(line 2091,col 104)",
      "(line 2093,col 9)-(line 2096,col 37)",
      "(line 2097,col 9)-(line 2101,col 37)",
      "(line 2102,col 9)-(line 2107,col 37)",
      "(line 2108,col 9)-(line 2108,col 104)",
      "(line 2110,col 9)-(line 2113,col 37)",
      "(line 2114,col 9)-(line 2118,col 37)",
      "(line 2119,col 9)-(line 2122,col 87)",
      "(line 2123,col 9)-(line 2123,col 81)",
      "(line 2125,col 9)-(line 2126,col 76)",
      "(line 2127,col 9)-(line 2129,col 76)",
      "(line 2130,col 9)-(line 2133,col 87)",
      "(line 2134,col 9)-(line 2134,col 81)"
    ]
  }
]