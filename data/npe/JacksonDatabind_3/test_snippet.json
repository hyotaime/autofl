[
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.Bean1()",
    "snippet": "@SuppressWarnings(\"unused\")\n        private Bean1() { }",
    "begin_line": 30,
    "end_line": 30,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.Bean1(int, int, java.util.List\u003ccom.fasterxml.jackson.databind.deser.TestArrayDeserialization.Bean2\u003e)",
    "snippet": "public Bean1(int x, int y, List\u003cBean2\u003e beans)\n        {\n            _x \u003d x;\n            _y \u003d y;\n            _beans \u003d beans;\n        }",
    "begin_line": 32,
    "end_line": 37,
    "comment": "",
    "child_ranges": [
      "(line 34,col 13)-(line 34,col 19)",
      "(line 35,col 13)-(line 35,col 19)",
      "(line 36,col 13)-(line 36,col 27)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.getX()",
    "snippet": "public int getX() { return _x; }",
    "begin_line": 39,
    "end_line": 39,
    "comment": "",
    "child_ranges": [
      "(line 39,col 29)-(line 39,col 38)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.getY()",
    "snippet": "public int getY() { return _y; }",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "child_ranges": [
      "(line 40,col 29)-(line 40,col 38)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.getBeans()",
    "snippet": "public List\u003cBean2\u003e getBeans() { return _beans; }",
    "begin_line": 41,
    "end_line": 41,
    "comment": "",
    "child_ranges": [
      "(line 41,col 41)-(line 41,col 54)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.setX(int)",
    "snippet": "public void setX(int x) { _x \u003d x; }",
    "begin_line": 43,
    "end_line": 43,
    "comment": "",
    "child_ranges": [
      "(line 43,col 35)-(line 43,col 41)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.setY(int)",
    "snippet": "public void setY(int y) { _y \u003d y; }",
    "begin_line": 44,
    "end_line": 44,
    "comment": "",
    "child_ranges": [
      "(line 44,col 35)-(line 44,col 41)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.setBeans(java.util.List\u003ccom.fasterxml.jackson.databind.deser.TestArrayDeserialization.Bean2\u003e)",
    "snippet": "public void setBeans(List\u003cBean2\u003e b) { _beans \u003d b; }",
    "begin_line": 45,
    "end_line": 45,
    "comment": "",
    "child_ranges": [
      "(line 45,col 47)-(line 45,col 57)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o) {\n            if (!(o instanceof Bean1)) return false;\n            Bean1 other \u003d (Bean1) o;\n            return (_x \u003d\u003d other._x)\n                \u0026\u0026 (_y \u003d\u003d other._y)\n                \u0026\u0026 _beans.equals(other._beans)\n                ;\n        }",
    "begin_line": 47,
    "end_line": 54,
    "comment": "",
    "child_ranges": [
      "(line 48,col 13)-(line 48,col 52)",
      "(line 49,col 13)-(line 49,col 36)",
      "(line 50,col 13)-(line 53,col 17)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.Bean2(java.lang.String)",
    "snippet": "public Bean2(String d)\n        {\n            _desc \u003d d;\n        }",
    "begin_line": 67,
    "end_line": 70,
    "comment": "",
    "child_ranges": [
      "(line 69,col 13)-(line 69,col 22)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.serialize(JsonGenerator, SerializerProvider)",
    "snippet": "@Override\n        public void serialize(JsonGenerator jgen, SerializerProvider provider)\n            throws IOException, JsonGenerationException\n        {\n            jgen.writeString(_desc);\n        }",
    "begin_line": 73,
    "end_line": 77,
    "comment": "",
    "child_ranges": [
      "(line 76,col 13)-(line 76,col 36)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.toString()",
    "snippet": "@Override public String toString() { return _desc; }",
    "begin_line": 79,
    "end_line": 79,
    "comment": "",
    "child_ranges": [
      "(line 79,col 46)-(line 79,col 58)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o) {\n            if (!(o instanceof Bean2)) return false;\n            Bean2 other \u003d (Bean2) o;\n            return _desc.equals(other._desc);\n        }",
    "begin_line": 81,
    "end_line": 85,
    "comment": "",
    "child_ranges": [
      "(line 82,col 13)-(line 82,col 52)",
      "(line 83,col 13)-(line 83,col 36)",
      "(line 84,col 13)-(line 84,col 45)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)",
    "snippet": "@Override\n        public void serializeWithType(JsonGenerator jgen,\n                SerializerProvider provider, TypeSerializer typeSer)\n                throws IOException, JsonProcessingException {\n        }",
    "begin_line": 88,
    "end_line": 91,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.deserialize(JsonParser, DeserializationContext)",
    "snippet": "@Override\n        public NonDeserializable[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n        {\n            List\u003cNonDeserializable\u003e list \u003d new ArrayList\u003cNonDeserializable\u003e();\n            while (jp.nextToken() !\u003d JsonToken.END_ARRAY) {\n                list.add(new NonDeserializable(jp.getText(), false));\n            }\n            return list.toArray(new NonDeserializable[list.size()]);\n        }",
    "begin_line": 105,
    "end_line": 112,
    "comment": "",
    "child_ranges": [
      "(line 107,col 13)-(line 107,col 78)",
      "(line 108,col 13)-(line 110,col 13)",
      "(line 111,col 13)-(line 111,col 68)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.NonDeserializable(java.lang.String, boolean)",
    "snippet": "public NonDeserializable(String v, boolean bogus) {\n            value \u003d v;\n        }",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "child_ranges": [
      "(line 119,col 13)-(line 119,col 22)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testUntypedArray()",
    "snippet": "public void testUntypedArray() throws Exception\n    {\n\n        // to get \"untyped\" default map-to-map, pass Object[].class\n        String JSON \u003d \"[ 1, null, \\\"x\\\", true, 2.0 ]\";\n\n        Object[] result \u003d MAPPER.readValue(JSON, Object[].class);\n        assertNotNull(result);\n\n        assertEquals(5, result.length);\n\n        assertEquals(Integer.valueOf(1), result[0]);\n        assertNull(result[1]);\n        assertEquals(\"x\", result[2]);\n        assertEquals(Boolean.TRUE, result[3]);\n        assertEquals(Double.valueOf(2.0), result[4]);\n    }",
    "begin_line": 141,
    "end_line": 157,
    "comment": "",
    "child_ranges": [
      "(line 145,col 9)-(line 145,col 54)",
      "(line 147,col 9)-(line 147,col 65)",
      "(line 148,col 9)-(line 148,col 30)",
      "(line 150,col 9)-(line 150,col 39)",
      "(line 152,col 9)-(line 152,col 52)",
      "(line 153,col 9)-(line 153,col 30)",
      "(line 154,col 9)-(line 154,col 37)",
      "(line 155,col 9)-(line 155,col 46)",
      "(line 156,col 9)-(line 156,col 53)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testIntegerArray()",
    "snippet": "public void testIntegerArray() throws Exception\n    {\n        final int LEN \u003d 90000;\n\n        // Let\u0027s construct array to get it big enough\n\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            sb.append(i);\n        }\n        sb.append(\u0027]\u0027);\n\n        Integer[] result \u003d MAPPER.readValue(sb.toString(), Integer[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            assertEquals(i, result[i].intValue());\n        }\n    }",
    "begin_line": 159,
    "end_line": 182,
    "comment": "",
    "child_ranges": [
      "(line 161,col 9)-(line 161,col 30)",
      "(line 165,col 9)-(line 165,col 47)",
      "(line 166,col 9)-(line 166,col 23)",
      "(line 167,col 9)-(line 172,col 9)",
      "(line 173,col 9)-(line 173,col 23)",
      "(line 175,col 9)-(line 175,col 76)",
      "(line 176,col 9)-(line 176,col 30)",
      "(line 178,col 9)-(line 178,col 41)",
      "(line 179,col 9)-(line 181,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFromEmptyString()",
    "snippet": "public void testFromEmptyString() throws Exception\n    {\n        ObjectMapper m \u003d new ObjectMapper();\n        m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        assertNull(m.readValue(quote(\"\"), Object[].class));\n        assertNull( m.readValue(quote(\"\"), String[].class));\n        assertNull( m.readValue(quote(\"\"), int[].class));\n    }",
    "begin_line": 185,
    "end_line": 192,
    "comment": "",
    "child_ranges": [
      "(line 187,col 9)-(line 187,col 44)",
      "(line 188,col 9)-(line 188,col 85)",
      "(line 189,col 9)-(line 189,col 59)",
      "(line 190,col 9)-(line 190,col 60)",
      "(line 191,col 9)-(line 191,col 57)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFromEmptyString2()",
    "snippet": "public void testFromEmptyString2() throws Exception\n    {\n        ObjectMapper m \u003d new ObjectMapper();\n        m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n        Product p \u003d m.readValue(\"{\\\"thelist\\\":\\\"\\\"}\", Product.class);\n        assertNotNull(p);\n        assertNull(p.thelist);\n    }",
    "begin_line": 195,
    "end_line": 203,
    "comment": "",
    "child_ranges": [
      "(line 197,col 9)-(line 197,col 44)",
      "(line 198,col 9)-(line 198,col 85)",
      "(line 199,col 9)-(line 199,col 79)",
      "(line 200,col 9)-(line 200,col 69)",
      "(line 201,col 9)-(line 201,col 25)",
      "(line 202,col 9)-(line 202,col 30)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testUntypedArrayOfArrays()",
    "snippet": "public void testUntypedArrayOfArrays() throws Exception\n    {\n        // to get \"untyped\" default map-to-map, pass Object[].class\n        final String JSON \u003d \"[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]\";\n\n        Object result \u003d MAPPER.readValue(JSON, Object.class);\n        assertEquals(ArrayList.class, result.getClass());\n        assertNotNull(result);\n\n        // Should be able to get it as an Object array as well\n\n        Object[] array \u003d MAPPER.readValue(JSON, Object[].class);\n        assertNotNull(array);\n        assertEquals(Object[].class, array.getClass());\n\n        // and as wrapped variants too\n        ObjectWrapper w \u003d MAPPER.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectWrapper.class);\n        assertNotNull(w);\n        assertNotNull(w.wrapped);\n        assertEquals(ArrayList.class, w.wrapped.getClass());\n\n        ObjectArrayWrapper aw \u003d MAPPER.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectArrayWrapper.class);\n        assertNotNull(aw);\n        assertNotNull(aw.wrapped);\n    }",
    "begin_line": 211,
    "end_line": 235,
    "comment": "",
    "child_ranges": [
      "(line 214,col 9)-(line 214,col 122)",
      "(line 216,col 9)-(line 216,col 61)",
      "(line 217,col 9)-(line 217,col 57)",
      "(line 218,col 9)-(line 218,col 30)",
      "(line 222,col 9)-(line 222,col 64)",
      "(line 223,col 9)-(line 223,col 29)",
      "(line 224,col 9)-(line 224,col 55)",
      "(line 227,col 9)-(line 227,col 90)",
      "(line 228,col 9)-(line 228,col 25)",
      "(line 229,col 9)-(line 229,col 33)",
      "(line 230,col 9)-(line 230,col 60)",
      "(line 232,col 9)-(line 232,col 101)",
      "(line 233,col 9)-(line 233,col 26)",
      "(line 234,col 9)-(line 234,col 34)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testStringArray()",
    "snippet": "public void testStringArray() throws Exception\n    {\n        final String[] STRS \u003d new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw \u003d new StringWriter();\n        JsonGenerator jg \u003d MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result \u003d MAPPER.readValue(sw.toString(), String[].class);\n        assertNotNull(result);\n\n        assertEquals(STRS.length, result.length);\n        for (int i \u003d 0; i \u003c STRS.length; ++i) {\n            assertEquals(STRS[i], result[i]);\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result \u003d MAPPER.readValue(\" [ null ]\", String[].class);\n        assertNotNull(result);\n        assertEquals(1, result.length);\n        assertNull(result[0]);\n    }",
    "begin_line": 243,
    "end_line": 270,
    "comment": "",
    "child_ranges": [
      "(line 245,col 9)-(line 247,col 10)",
      "(line 248,col 9)-(line 248,col 45)",
      "(line 249,col 9)-(line 249,col 67)",
      "(line 250,col 9)-(line 250,col 29)",
      "(line 251,col 9)-(line 253,col 9)",
      "(line 254,col 9)-(line 254,col 27)",
      "(line 255,col 9)-(line 255,col 19)",
      "(line 257,col 9)-(line 257,col 74)",
      "(line 258,col 9)-(line 258,col 30)",
      "(line 260,col 9)-(line 260,col 49)",
      "(line 261,col 9)-(line 263,col 9)",
      "(line 266,col 9)-(line 266,col 63)",
      "(line 267,col 9)-(line 267,col 30)",
      "(line 268,col 9)-(line 268,col 39)",
      "(line 269,col 9)-(line 269,col 30)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testCharArray()",
    "snippet": "public void testCharArray() throws Exception\n    {\n        final String TEST_STR \u003d \"Let\u0027s just test it? Ok!\";\n        char[] result \u003d MAPPER.readValue(\"\\\"\"+TEST_STR+\"\\\"\", char[].class);\n        assertEquals(TEST_STR, new String(result));\n\n        // And just for [JACKSON-289], let\u0027s verify that fluffy arrays work too\n        result \u003d MAPPER.readValue(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", char[].class);\n        assertEquals(\"abc\", new String(result));\n    }",
    "begin_line": 272,
    "end_line": 281,
    "comment": "",
    "child_ranges": [
      "(line 274,col 9)-(line 274,col 58)",
      "(line 275,col 9)-(line 275,col 75)",
      "(line 276,col 9)-(line 276,col 51)",
      "(line 279,col 9)-(line 279,col 71)",
      "(line 280,col 9)-(line 280,col 48)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testBooleanArray()",
    "snippet": "public void testBooleanArray() throws Exception\n    {\n        boolean[] result \u003d MAPPER.readValue(\"[ true, false, false ]\", boolean[].class);\n        assertNotNull(result);\n        assertEquals(3, result.length);\n        assertTrue(result[0]);\n        assertFalse(result[1]);\n        assertFalse(result[2]);\n    }",
    "begin_line": 289,
    "end_line": 297,
    "comment": "",
    "child_ranges": [
      "(line 291,col 9)-(line 291,col 87)",
      "(line 292,col 9)-(line 292,col 30)",
      "(line 293,col 9)-(line 293,col 39)",
      "(line 294,col 9)-(line 294,col 30)",
      "(line 295,col 9)-(line 295,col 31)",
      "(line 296,col 9)-(line 296,col 31)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArrayAsNumbers()",
    "snippet": "public void testByteArrayAsNumbers() throws Exception\n    {\n        final int LEN \u003d 37000;\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            int value \u003d i - 128;\n            sb.append((value \u003c 256) ? value : (value \u0026 0x7F));\n            sb.append(\u0027,\u0027);\n        }\n        sb.append(\"0]\");\n        byte[] result \u003d MAPPER.readValue(sb.toString(), byte[].class);\n        assertNotNull(result);\n        assertEquals(LEN+1, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            int value \u003d i - 128;\n            byte exp \u003d (byte) ((value \u003c 256) ? value : (value \u0026 0x7F));\n            if (exp !\u003d result[i]) {\n                fail(\"At offset #\"+i+\" (\"+result.length+\"), expected \"+exp+\", got \"+result[i]);\n            }\n            assertEquals(exp, result[i]);\n        }\n        assertEquals(0, result[LEN]);\n    }",
    "begin_line": 299,
    "end_line": 322,
    "comment": "",
    "child_ranges": [
      "(line 301,col 9)-(line 301,col 30)",
      "(line 302,col 9)-(line 302,col 47)",
      "(line 303,col 9)-(line 303,col 23)",
      "(line 304,col 9)-(line 308,col 9)",
      "(line 309,col 9)-(line 309,col 24)",
      "(line 310,col 9)-(line 310,col 70)",
      "(line 311,col 9)-(line 311,col 30)",
      "(line 312,col 9)-(line 312,col 43)",
      "(line 313,col 9)-(line 320,col 9)",
      "(line 321,col 9)-(line 321,col 37)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArrayAsBase64()",
    "snippet": "public void testByteArrayAsBase64() throws Exception\n    {\n        /* Hmmh... let\u0027s use JsonGenerator here, to hopefully ensure we\n         * get proper base64 encoding. Plus, not always using that\n         * silly sample from Wikipedia.\n         */\n        JsonFactory jf \u003d new JsonFactory();\n        StringWriter sw \u003d new StringWriter();\n\n        int LEN \u003d 9000;\n        byte[] TEST \u003d new byte[LEN];\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            TEST[i] \u003d (byte) i;\n        }\n\n        JsonGenerator jg \u003d jf.createGenerator(sw);\n        jg.writeBinary(TEST);\n        jg.close();\n        String inputData \u003d sw.toString();\n\n        byte[] result \u003d MAPPER.readValue(inputData, byte[].class);\n        assertNotNull(result);\n        assertArrayEquals(TEST, result);\n    }",
    "begin_line": 324,
    "end_line": 347,
    "comment": "",
    "child_ranges": [
      "(line 330,col 9)-(line 330,col 43)",
      "(line 331,col 9)-(line 331,col 45)",
      "(line 333,col 9)-(line 333,col 23)",
      "(line 334,col 9)-(line 334,col 36)",
      "(line 335,col 9)-(line 337,col 9)",
      "(line 339,col 9)-(line 339,col 50)",
      "(line 340,col 9)-(line 340,col 29)",
      "(line 341,col 9)-(line 341,col 19)",
      "(line 342,col 9)-(line 342,col 41)",
      "(line 344,col 9)-(line 344,col 66)",
      "(line 345,col 9)-(line 345,col 30)",
      "(line 346,col 9)-(line 346,col 40)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArraysAsBase64()",
    "snippet": "public void testByteArraysAsBase64() throws Exception\n    {\n        JsonFactory jf \u003d new JsonFactory();\n        StringWriter sw \u003d new StringWriter(1000);\n\n        final int entryCount \u003d 15;\n\n        JsonGenerator jg \u003d jf.createGenerator(sw);\n        jg.writeStartArray();\n\n        byte[][] entries \u003d new byte[entryCount][];\n        for (int i \u003d 0; i \u003c entryCount; ++i) {\n            byte[] b \u003d new byte[1000 - i * 20];\n            for (int x \u003d 0; x \u003c b.length; ++x) {\n                b[x] \u003d (byte) (i + x);\n            }\n            entries[i] \u003d b;\n            jg.writeBinary(b);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String inputData \u003d sw.toString();\n\n        byte[][] result \u003d MAPPER.readValue(inputData, byte[][].class);\n        assertNotNull(result);\n\n        assertEquals(entryCount, result.length);\n        for (int i \u003d 0; i \u003c entryCount; ++i) {\n            byte[] b \u003d result[i];\n            assertArrayEquals(\"Comparing entry #\"+i+\"/\"+entryCount,entries[i], b);\n        }\n    }",
    "begin_line": 353,
    "end_line": 385,
    "comment": "/** \n * And then bit more challenging case; let\u0027s try decoding multiple byte arrays from an array...\n */\n",
    "child_ranges": [
      "(line 355,col 9)-(line 355,col 43)",
      "(line 356,col 9)-(line 356,col 49)",
      "(line 358,col 9)-(line 358,col 34)",
      "(line 360,col 9)-(line 360,col 50)",
      "(line 361,col 9)-(line 361,col 29)",
      "(line 363,col 9)-(line 363,col 50)",
      "(line 364,col 9)-(line 371,col 9)",
      "(line 372,col 9)-(line 372,col 27)",
      "(line 373,col 9)-(line 373,col 19)",
      "(line 375,col 9)-(line 375,col 41)",
      "(line 377,col 9)-(line 377,col 70)",
      "(line 378,col 9)-(line 378,col 30)",
      "(line 380,col 9)-(line 380,col 48)",
      "(line 381,col 9)-(line 384,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArraysWith763()",
    "snippet": "public void testByteArraysWith763() throws Exception\n    {\n        String[] input \u003d new String[] { \"YQ\u003d\u003d\", \"Yg\u003d\u003d\", \"Yw\u003d\u003d\" };\n        byte[][] data \u003d MAPPER.convertValue(input, byte[][].class);\n        assertEquals(\"a\", new String(data[0], \"US-ASCII\"));\n        assertEquals(\"b\", new String(data[1], \"US-ASCII\"));\n        assertEquals(\"c\", new String(data[2], \"US-ASCII\"));\n    }",
    "begin_line": 388,
    "end_line": 395,
    "comment": "",
    "child_ranges": [
      "(line 390,col 9)-(line 390,col 65)",
      "(line 391,col 9)-(line 391,col 67)",
      "(line 392,col 9)-(line 392,col 59)",
      "(line 393,col 9)-(line 393,col 59)",
      "(line 394,col 9)-(line 394,col 59)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testShortArray()",
    "snippet": "public void testShortArray() throws Exception\n    {\n        final int LEN \u003d 31001; // fits in signed 16-bit\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            sb.append(i);\n        }\n        sb.append(\u0027]\u0027);\n\n        short[] result \u003d MAPPER.readValue(sb.toString(), short[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            short exp \u003d (short) i;\n            assertEquals(exp, result[i]);\n        }\n    }",
    "begin_line": 397,
    "end_line": 418,
    "comment": "",
    "child_ranges": [
      "(line 399,col 9)-(line 399,col 30)",
      "(line 400,col 9)-(line 400,col 47)",
      "(line 401,col 9)-(line 401,col 23)",
      "(line 402,col 9)-(line 407,col 9)",
      "(line 408,col 9)-(line 408,col 23)",
      "(line 410,col 9)-(line 410,col 72)",
      "(line 411,col 9)-(line 411,col 30)",
      "(line 413,col 9)-(line 413,col 41)",
      "(line 414,col 9)-(line 417,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testIntArray()",
    "snippet": "public void testIntArray() throws Exception\n    {\n        final int LEN \u003d 70000;\n\n        // Let\u0027s construct array to get it big enough\n\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            sb.append(-i);\n        }\n        sb.append(\u0027]\u0027);\n\n        int[] result \u003d MAPPER.readValue(sb.toString(), int[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            assertEquals(-i, result[i]);\n        }\n    }",
    "begin_line": 420,
    "end_line": 443,
    "comment": "",
    "child_ranges": [
      "(line 422,col 9)-(line 422,col 30)",
      "(line 426,col 9)-(line 426,col 47)",
      "(line 427,col 9)-(line 427,col 23)",
      "(line 428,col 9)-(line 433,col 9)",
      "(line 434,col 9)-(line 434,col 23)",
      "(line 436,col 9)-(line 436,col 68)",
      "(line 437,col 9)-(line 437,col 30)",
      "(line 439,col 9)-(line 439,col 41)",
      "(line 440,col 9)-(line 442,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testLongArray()",
    "snippet": "public void testLongArray() throws Exception\n    {\n        final int LEN \u003d 12300;\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            sb.append(i);\n        }\n        sb.append(\u0027]\u0027);\n\n        long[] result \u003d MAPPER.readValue(sb.toString(), long[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            long exp \u003d (long) i;\n            assertEquals(exp, result[i]);\n        }\n    }",
    "begin_line": 445,
    "end_line": 466,
    "comment": "",
    "child_ranges": [
      "(line 447,col 9)-(line 447,col 30)",
      "(line 448,col 9)-(line 448,col 47)",
      "(line 449,col 9)-(line 449,col 23)",
      "(line 450,col 9)-(line 455,col 9)",
      "(line 456,col 9)-(line 456,col 23)",
      "(line 458,col 9)-(line 458,col 70)",
      "(line 459,col 9)-(line 459,col 30)",
      "(line 461,col 9)-(line 461,col 41)",
      "(line 462,col 9)-(line 465,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testDoubleArray()",
    "snippet": "public void testDoubleArray() throws Exception\n    {\n        final int LEN \u003d 7000;\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            // not ideal, but has to do...\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            sb.append(i).append(\u0027.\u0027).append(i % 10);\n        }\n        sb.append(\u0027]\u0027);\n\n        double[] result \u003d MAPPER.readValue(sb.toString(), double[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            String expStr \u003d String.valueOf(i) + \".\" + String.valueOf(i % 10);\n            String actStr \u003d String.valueOf(result[i]);\n            if (!expStr.equals(actStr)) {\n                fail(\"Entry #\"+i+\"/\"+LEN+\"; exp \u0027\"+expStr+\"\u0027, got \u0027\"+actStr+\"\u0027\");\n            }\n        }\n    }",
    "begin_line": 468,
    "end_line": 493,
    "comment": "",
    "child_ranges": [
      "(line 470,col 9)-(line 470,col 29)",
      "(line 471,col 9)-(line 471,col 47)",
      "(line 472,col 9)-(line 472,col 23)",
      "(line 473,col 9)-(line 479,col 9)",
      "(line 480,col 9)-(line 480,col 23)",
      "(line 482,col 9)-(line 482,col 74)",
      "(line 483,col 9)-(line 483,col 30)",
      "(line 485,col 9)-(line 485,col 41)",
      "(line 486,col 9)-(line 492,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFloatArray()",
    "snippet": "public void testFloatArray() throws Exception\n    {\n        final int LEN \u003d 7000;\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027[\u0027);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n            // not ideal, but has to do...\n            sb.append(i).append(\u0027.\u0027).append(i % 10);\n        }\n        sb.append(\u0027]\u0027);\n\n        float[] result \u003d MAPPER.readValue(sb.toString(), float[].class);\n        assertNotNull(result);\n\n        assertEquals(LEN, result.length);\n        for (int i \u003d 0; i \u003c LEN; ++i) {\n            String expStr \u003d String.valueOf(i) + \".\" + String.valueOf(i % 10);\n            assertEquals(expStr, String.valueOf(result[i]));\n        }\n    }",
    "begin_line": 495,
    "end_line": 517,
    "comment": "",
    "child_ranges": [
      "(line 497,col 9)-(line 497,col 29)",
      "(line 498,col 9)-(line 498,col 47)",
      "(line 499,col 9)-(line 499,col 23)",
      "(line 500,col 9)-(line 506,col 9)",
      "(line 507,col 9)-(line 507,col 23)",
      "(line 509,col 9)-(line 509,col 72)",
      "(line 510,col 9)-(line 510,col 30)",
      "(line 512,col 9)-(line 512,col 41)",
      "(line 513,col 9)-(line 516,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testBeanArray()",
    "snippet": "public void testBeanArray()\n        throws Exception\n    {\n        List\u003cBean1\u003e src \u003d new ArrayList\u003cBean1\u003e();\n\n        List\u003cBean2\u003e b2 \u003d new ArrayList\u003cBean2\u003e();\n        b2.add(new Bean2(\"a\"));\n        b2.add(new Bean2(\"foobar\"));\n        src.add(new Bean1(1, 2, b2));\n\n        b2 \u003d new ArrayList\u003cBean2\u003e();\n        b2.add(null);\n        src.add(new Bean1(4, 5, b2));\n\n        // Ok: let\u0027s assume bean serializer works ok....\n        StringWriter sw \u003d new StringWriter();\n\n        MAPPER.writeValue(sw, src);\n\n        // And then test de-serializer\n        List\u003cBean1\u003e result \u003d MAPPER.readValue(sw.toString(), new TypeReference\u003cList\u003cBean1\u003e\u003e() { });\n        assertNotNull(result);\n        assertEquals(src, result);\n    }",
    "begin_line": 525,
    "end_line": 548,
    "comment": "",
    "child_ranges": [
      "(line 528,col 9)-(line 528,col 49)",
      "(line 530,col 9)-(line 530,col 48)",
      "(line 531,col 9)-(line 531,col 31)",
      "(line 532,col 9)-(line 532,col 36)",
      "(line 533,col 9)-(line 533,col 37)",
      "(line 535,col 9)-(line 535,col 36)",
      "(line 536,col 9)-(line 536,col 21)",
      "(line 537,col 9)-(line 537,col 37)",
      "(line 540,col 9)-(line 540,col 45)",
      "(line 542,col 9)-(line 542,col 35)",
      "(line 545,col 9)-(line 545,col 99)",
      "(line 546,col 9)-(line 546,col 30)",
      "(line 547,col 9)-(line 547,col 34)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
    "signature": "com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testCustomDeserializers()",
    "snippet": "public void testCustomDeserializers() throws Exception\n    {\n        ObjectMapper mapper \u003d new ObjectMapper();\n        SimpleModule testModule \u003d new SimpleModule(\"test\", Version.unknownVersion());\n        testModule.addDeserializer(NonDeserializable[].class, new CustomNonDeserArrayDeserializer());\n        mapper.registerModule(testModule);\n        \n        NonDeserializable[] result \u003d mapper.readValue(\"[\\\"a\\\"]\", NonDeserializable[].class);\n        assertNotNull(result);\n        assertEquals(1, result.length);\n        assertEquals(\"a\", result[0].value);\n    }",
    "begin_line": 556,
    "end_line": 567,
    "comment": "",
    "child_ranges": [
      "(line 558,col 9)-(line 558,col 49)",
      "(line 559,col 9)-(line 559,col 85)",
      "(line 560,col 9)-(line 560,col 101)",
      "(line 561,col 9)-(line 561,col 42)",
      "(line 563,col 9)-(line 563,col 92)",
      "(line 564,col 9)-(line 564,col 30)",
      "(line 565,col 9)-(line 565,col 39)",
      "(line 566,col 9)-(line 566,col 43)"
    ]
  }
]