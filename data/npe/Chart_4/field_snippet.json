[
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_RED",
    "snippet": "public static final Color VERY_DARK_RED \u003d new Color(0x80, 0x00, 0x00);",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * A very dark red color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_RED",
    "snippet": "public static final Color DARK_RED \u003d new Color(0xc0, 0x00, 0x00);",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * A dark red color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_RED",
    "snippet": "public static final Color LIGHT_RED \u003d new Color(0xFF, 0x40, 0x40);",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * A light red color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_RED",
    "snippet": "public static final Color VERY_LIGHT_RED \u003d new Color(0xFF, 0x80, 0x80);",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * A very light red color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_YELLOW",
    "snippet": "public static final Color VERY_DARK_YELLOW \u003d new Color(0x80, 0x80, 0x00);",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * A very dark yellow color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_YELLOW",
    "snippet": "public static final Color DARK_YELLOW \u003d new Color(0xC0, 0xC0, 0x00);",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * A dark yellow color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_YELLOW",
    "snippet": "public static final Color LIGHT_YELLOW \u003d new Color(0xFF, 0xFF, 0x40);",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * A light yellow color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW",
    "snippet": "public static final Color VERY_LIGHT_YELLOW \u003d new Color(0xFF, 0xFF, 0x80);",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * A very light yellow color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_GREEN",
    "snippet": "public static final Color VERY_DARK_GREEN \u003d new Color(0x00, 0x80, 0x00);",
    "begin_line": 83,
    "end_line": 83,
    "comment": "/** \n * A very dark green color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_GREEN",
    "snippet": "public static final Color DARK_GREEN \u003d new Color(0x00, 0xC0, 0x00);",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * A dark green color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_GREEN",
    "snippet": "public static final Color LIGHT_GREEN \u003d new Color(0x40, 0xFF, 0x40);",
    "begin_line": 89,
    "end_line": 89,
    "comment": "/** \n * A light green color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_GREEN",
    "snippet": "public static final Color VERY_LIGHT_GREEN \u003d new Color(0x80, 0xFF, 0x80);",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * A very light green color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_CYAN",
    "snippet": "public static final Color VERY_DARK_CYAN \u003d new Color(0x00, 0x80, 0x80);",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * A very dark cyan color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_CYAN",
    "snippet": "public static final Color DARK_CYAN \u003d new Color(0x00, 0xC0, 0xC0);",
    "begin_line": 98,
    "end_line": 98,
    "comment": "/** \n * A dark cyan color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_CYAN",
    "snippet": "public static final Color LIGHT_CYAN \u003d new Color(0x40, 0xFF, 0xFF);",
    "begin_line": 101,
    "end_line": 101,
    "comment": "/** \n * A light cyan color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_CYAN",
    "snippet": "public static final Color VERY_LIGHT_CYAN \u003d new Color(0x80, 0xFF, 0xFF);",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * Aa very light cyan color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_BLUE",
    "snippet": "public static final Color VERY_DARK_BLUE \u003d new Color(0x00, 0x00, 0x80);",
    "begin_line": 107,
    "end_line": 107,
    "comment": "/** \n * A very dark blue color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_BLUE",
    "snippet": "public static final Color DARK_BLUE \u003d new Color(0x00, 0x00, 0xC0);",
    "begin_line": 110,
    "end_line": 110,
    "comment": "/** \n * A dark blue color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_BLUE",
    "snippet": "public static final Color LIGHT_BLUE \u003d new Color(0x40, 0x40, 0xFF);",
    "begin_line": 113,
    "end_line": 113,
    "comment": "/** \n * A light blue color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_BLUE",
    "snippet": "public static final Color VERY_LIGHT_BLUE \u003d new Color(0x80, 0x80, 0xFF);",
    "begin_line": 116,
    "end_line": 116,
    "comment": "/** \n * A very light blue color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_DARK_MAGENTA",
    "snippet": "public static final Color VERY_DARK_MAGENTA \u003d new Color(0x80, 0x00, 0x80);",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * A very dark magenta/purple color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.DARK_MAGENTA",
    "snippet": "public static final Color DARK_MAGENTA \u003d new Color(0xC0, 0x00, 0xC0);",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * A dark magenta color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.LIGHT_MAGENTA",
    "snippet": "public static final Color LIGHT_MAGENTA \u003d new Color(0xFF, 0x40, 0xFF);",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * A light magenta color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartColor",
    "src_path": "org/jfree/chart/ChartColor.java",
    "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA",
    "snippet": "public static final Color VERY_LIGHT_MAGENTA \u003d new Color(0xFF, 0x80, 0xFF);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * A very light magenta color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ChartFactory",
    "src_path": "org/jfree/chart/ChartFactory.java",
    "signature": "org.jfree.chart.ChartFactory.currentTheme",
    "snippet": "private static ChartTheme currentTheme \u003d new StandardChartTheme(\"JFree\");",
    "begin_line": 233,
    "end_line": 233,
    "comment": "/** \n * The chart theme. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -3470703747817429120L;",
    "begin_line": 253,
    "end_line": 253,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.INFO",
    "snippet": "public static final ProjectInfo INFO \u003d new JFreeChartInfo();",
    "begin_line": 256,
    "end_line": 256,
    "comment": "/** \n * Information about the project. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT",
    "snippet": "public static final Font DEFAULT_TITLE_FONT \u003d new Font(\"Tahoma\", Font.BOLD,\r\n            18);",
    "begin_line": 259,
    "end_line": 260,
    "comment": "/** \n * The default font for titles. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT",
    "snippet": "public static final Paint DEFAULT_BACKGROUND_PAINT \u003d Color.WHITE;",
    "begin_line": 263,
    "end_line": 263,
    "comment": "/** \n * The default background color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE",
    "snippet": "public static final Image DEFAULT_BACKGROUND_IMAGE \u003d null;",
    "begin_line": 266,
    "end_line": 266,
    "comment": "/** \n * The default background image. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT",
    "snippet": "public static final int DEFAULT_BACKGROUND_IMAGE_ALIGNMENT \u003d Align.FIT;",
    "begin_line": 269,
    "end_line": 269,
    "comment": "/** \n * The default background image alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA",
    "snippet": "public static final float DEFAULT_BACKGROUND_IMAGE_ALPHA \u003d 0.5f;",
    "begin_line": 272,
    "end_line": 272,
    "comment": "/** \n * The default background image alpha. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.renderingHints",
    "snippet": "private transient RenderingHints renderingHints;",
    "begin_line": 278,
    "end_line": 278,
    "comment": "/** \n * Rendering hints that will be used for chart drawing.  This should never be \u003ccode\u003enull\u003c/code\u003e.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.borderVisible",
    "snippet": "private boolean borderVisible;",
    "begin_line": 281,
    "end_line": 281,
    "comment": "/** \n * A flag that controls whether or not the chart border is drawn. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.borderStroke",
    "snippet": "private transient Stroke borderStroke;",
    "begin_line": 284,
    "end_line": 284,
    "comment": "/** \n * The stroke used to draw the chart border (if visible). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.borderPaint",
    "snippet": "private transient Paint borderPaint;",
    "begin_line": 287,
    "end_line": 287,
    "comment": "/** \n * The paint used to draw the chart border (if visible). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.padding",
    "snippet": "private RectangleInsets padding;",
    "begin_line": 290,
    "end_line": 290,
    "comment": "/** \n * The padding between the chart border and the chart drawing area. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.title",
    "snippet": "private TextTitle title;",
    "begin_line": 293,
    "end_line": 293,
    "comment": "/** \n * The chart title (optional). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.subtitles",
    "snippet": "private List subtitles;",
    "begin_line": 299,
    "end_line": 299,
    "comment": "/** \n * The chart subtitles (zero, one or many).  This field should never be \u003ccode\u003enull\u003c/code\u003e.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.plot",
    "snippet": "private Plot plot;",
    "begin_line": 302,
    "end_line": 302,
    "comment": "/** \n * Draws the visual representation of the data. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.backgroundPaint",
    "snippet": "private transient Paint backgroundPaint;",
    "begin_line": 305,
    "end_line": 305,
    "comment": "/** \n * Paint used to draw the background of the chart. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.backgroundImage",
    "snippet": "private transient Image backgroundImage;",
    "begin_line": 308,
    "end_line": 308,
    "comment": "/** \n * An optional background image for the chart. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.backgroundImageAlignment",
    "snippet": "private int backgroundImageAlignment \u003d Align.FIT;",
    "begin_line": 311,
    "end_line": 311,
    "comment": "/** \n * The alignment for the background image. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.backgroundImageAlpha",
    "snippet": "private float backgroundImageAlpha \u003d 0.5f;",
    "begin_line": 314,
    "end_line": 314,
    "comment": "/** \n * The alpha transparency for the background image. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.changeListeners",
    "snippet": "private transient EventListenerList changeListeners;",
    "begin_line": 317,
    "end_line": 317,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.progressListeners",
    "snippet": "private transient EventListenerList progressListeners;",
    "begin_line": 320,
    "end_line": 320,
    "comment": "/** \n * Storage for registered progress listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.JFreeChart",
    "src_path": "org/jfree/chart/JFreeChart.java",
    "signature": "org.jfree.chart.JFreeChart.notify",
    "snippet": "private boolean notify;",
    "begin_line": 326,
    "end_line": 326,
    "comment": "/** \n * A flag that can be used to enable/disable notification of chart change events.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.name",
    "snippet": "private String name;",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * The name of this theme. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.extraLargeFont",
    "snippet": "private Font extraLargeFont;",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * The largest font size.  Use for the main chart title.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.largeFont",
    "snippet": "private Font largeFont;",
    "begin_line": 129,
    "end_line": 129,
    "comment": "/** \n * A large font.  Used for subtitles.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.regularFont",
    "snippet": "private Font regularFont;",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * The regular font size.  Used for axis tick labels, legend items etc.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.smallFont",
    "snippet": "private Font smallFont;",
    "begin_line": 139,
    "end_line": 139,
    "comment": "/** \n * The small font size.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.titlePaint",
    "snippet": "private transient Paint titlePaint;",
    "begin_line": 142,
    "end_line": 142,
    "comment": "/** \n * The paint used to display the main chart title. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.subtitlePaint",
    "snippet": "private transient Paint subtitlePaint;",
    "begin_line": 145,
    "end_line": 145,
    "comment": "/** \n * The paint used to display subtitles. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.chartBackgroundPaint",
    "snippet": "private transient Paint chartBackgroundPaint;",
    "begin_line": 148,
    "end_line": 148,
    "comment": "/** \n * The background paint for the chart. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.legendBackgroundPaint",
    "snippet": "private transient Paint legendBackgroundPaint;",
    "begin_line": 151,
    "end_line": 151,
    "comment": "/** \n * The legend background paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.legendItemPaint",
    "snippet": "private transient Paint legendItemPaint;",
    "begin_line": 154,
    "end_line": 154,
    "comment": "/** \n * The legend item paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.drawingSupplier",
    "snippet": "private DrawingSupplier drawingSupplier;",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * The drawing supplier. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.plotBackgroundPaint",
    "snippet": "private transient Paint plotBackgroundPaint;",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * The background paint for the plot. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.plotOutlinePaint",
    "snippet": "private transient Paint plotOutlinePaint;",
    "begin_line": 163,
    "end_line": 163,
    "comment": "/** \n * The plot outline paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.labelLinkStyle",
    "snippet": "private PieLabelLinkStyle labelLinkStyle;",
    "begin_line": 166,
    "end_line": 166,
    "comment": "/** \n * The label link style for pie charts. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.labelLinkPaint",
    "snippet": "private transient Paint labelLinkPaint;",
    "begin_line": 169,
    "end_line": 169,
    "comment": "/** \n * The label link paint for pie charts. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.domainGridlinePaint",
    "snippet": "private transient Paint domainGridlinePaint;",
    "begin_line": 172,
    "end_line": 172,
    "comment": "/** \n * The domain grid line paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.rangeGridlinePaint",
    "snippet": "private transient Paint rangeGridlinePaint;",
    "begin_line": 175,
    "end_line": 175,
    "comment": "/** \n * The range grid line paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.baselinePaint",
    "snippet": "private transient Paint baselinePaint;",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * The baseline paint (used for domain and range zero baselines)\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.crosshairPaint",
    "snippet": "private transient Paint crosshairPaint;",
    "begin_line": 185,
    "end_line": 185,
    "comment": "/** \n * The crosshair paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.axisOffset",
    "snippet": "private RectangleInsets axisOffset;",
    "begin_line": 188,
    "end_line": 188,
    "comment": "/** \n * The axis offsets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.axisLabelPaint",
    "snippet": "private transient Paint axisLabelPaint;",
    "begin_line": 191,
    "end_line": 191,
    "comment": "/** \n * The axis label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.tickLabelPaint",
    "snippet": "private transient Paint tickLabelPaint;",
    "begin_line": 194,
    "end_line": 194,
    "comment": "/** \n * The tick label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.itemLabelPaint",
    "snippet": "private transient Paint itemLabelPaint;",
    "begin_line": 197,
    "end_line": 197,
    "comment": "/** \n * The item label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.shadowVisible",
    "snippet": "private boolean shadowVisible;",
    "begin_line": 203,
    "end_line": 203,
    "comment": "/** \n * A flag that controls whether or not shadows are visible (for example, in a bar renderer).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.shadowPaint",
    "snippet": "private transient Paint shadowPaint;",
    "begin_line": 206,
    "end_line": 206,
    "comment": "/** \n * The shadow paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.barPainter",
    "snippet": "private BarPainter barPainter;",
    "begin_line": 209,
    "end_line": 209,
    "comment": "/** \n * The bar painter. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.xyBarPainter",
    "snippet": "private XYBarPainter xyBarPainter;",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * The XY bar painter. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.thermometerPaint",
    "snippet": "private transient Paint thermometerPaint;",
    "begin_line": 215,
    "end_line": 215,
    "comment": "/** \n * The thermometer paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.wallPaint",
    "snippet": "private transient Paint wallPaint;",
    "begin_line": 221,
    "end_line": 221,
    "comment": "/** \n * The paint used to fill the interior of the \u0027walls\u0027 in the background of a plot with a 3D effect.  Applied to BarRenderer3D.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.errorIndicatorPaint",
    "snippet": "private transient Paint errorIndicatorPaint;",
    "begin_line": 224,
    "end_line": 224,
    "comment": "/** \n * The error indicator paint for the  {@link StatisticalBarRenderer}. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.gridBandPaint",
    "snippet": "private transient Paint gridBandPaint \u003d SymbolAxis.DEFAULT_GRID_BAND_PAINT;",
    "begin_line": 227,
    "end_line": 227,
    "comment": "/** \n * The grid band paint for a  {@link SymbolAxis}. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.StandardChartTheme",
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "signature": "org.jfree.chart.StandardChartTheme.gridBandAlternatePaint",
    "snippet": "private transient Paint gridBandAlternatePaint\r\n            \u003d SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT;",
    "begin_line": 230,
    "end_line": 231,
    "comment": "/** \n * The grid band alternate paint for a  {@link SymbolAxis}. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7719289504573298271L;",
    "begin_line": 137,
    "end_line": 137,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_VISIBLE",
    "snippet": "public static final boolean DEFAULT_AXIS_VISIBLE \u003d true;",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * The default axis visibility. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT",
    "snippet": "public static final Font DEFAULT_AXIS_LABEL_FONT \u003d new Font(\"Tahoma\",\r\n            Font.PLAIN, 12);",
    "begin_line": 143,
    "end_line": 144,
    "comment": "/** \n * The default axis label font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_PAINT",
    "snippet": "public static final Paint DEFAULT_AXIS_LABEL_PAINT \u003d Color.black;",
    "begin_line": 147,
    "end_line": 147,
    "comment": "/** \n * The default axis label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_INSETS",
    "snippet": "public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS\r\n            \u003d new RectangleInsets(3.0, 3.0, 3.0, 3.0);",
    "begin_line": 150,
    "end_line": 151,
    "comment": "/** \n * The default axis label insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_PAINT",
    "snippet": "public static final Paint DEFAULT_AXIS_LINE_PAINT \u003d Color.gray;",
    "begin_line": 154,
    "end_line": 154,
    "comment": "/** \n * The default axis line paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE",
    "snippet": "public static final Stroke DEFAULT_AXIS_LINE_STROKE \u003d new BasicStroke(1.0f);",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * The default axis line stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABELS_VISIBLE",
    "snippet": "public static final boolean DEFAULT_TICK_LABELS_VISIBLE \u003d true;",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * The default tick labels visibility. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT",
    "snippet": "public static final Font DEFAULT_TICK_LABEL_FONT \u003d new Font(\"Tahoma\",\r\n            Font.PLAIN, 12);",
    "begin_line": 163,
    "end_line": 164,
    "comment": "/** \n * The default tick label font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_PAINT",
    "snippet": "public static final Paint DEFAULT_TICK_LABEL_PAINT \u003d Color.black;",
    "begin_line": 167,
    "end_line": 167,
    "comment": "/** \n * The default tick label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS",
    "snippet": "public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS\r\n            \u003d new RectangleInsets(2.0, 4.0, 2.0, 4.0);",
    "begin_line": 170,
    "end_line": 171,
    "comment": "/** \n * The default tick label insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARKS_VISIBLE",
    "snippet": "public static final boolean DEFAULT_TICK_MARKS_VISIBLE \u003d true;",
    "begin_line": 174,
    "end_line": 174,
    "comment": "/** \n * The default tick marks visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_STROKE",
    "snippet": "public static final Stroke DEFAULT_TICK_MARK_STROKE \u003d new BasicStroke(1);",
    "begin_line": 177,
    "end_line": 177,
    "comment": "/** \n * The default tick stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT",
    "snippet": "public static final Paint DEFAULT_TICK_MARK_PAINT \u003d Color.gray;",
    "begin_line": 180,
    "end_line": 180,
    "comment": "/** \n * The default tick paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH",
    "snippet": "public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH \u003d 0.0f;",
    "begin_line": 183,
    "end_line": 183,
    "comment": "/** \n * The default tick mark inside length. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH",
    "snippet": "public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH \u003d 2.0f;",
    "begin_line": 186,
    "end_line": 186,
    "comment": "/** \n * The default tick mark outside length. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.visible",
    "snippet": "private boolean visible;",
    "begin_line": 189,
    "end_line": 189,
    "comment": "/** \n * A flag indicating whether or not the axis is visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.label",
    "snippet": "private String label;",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * The label for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelFont",
    "snippet": "private Font labelFont;",
    "begin_line": 195,
    "end_line": 195,
    "comment": "/** \n * The font for displaying the axis label. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelPaint",
    "snippet": "private transient Paint labelPaint;",
    "begin_line": 198,
    "end_line": 198,
    "comment": "/** \n * The paint for drawing the axis label. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelInsets",
    "snippet": "private RectangleInsets labelInsets;",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * The insets for the axis label. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelAngle",
    "snippet": "private double labelAngle;",
    "begin_line": 204,
    "end_line": 204,
    "comment": "/** \n * The label angle. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelToolTip",
    "snippet": "private String labelToolTip;",
    "begin_line": 211,
    "end_line": 211,
    "comment": "/** \n * The tool tip text for the label (\u003ccode\u003enull\u003c/code\u003e is permitted).\n * @since 1.2.0\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.labelURL",
    "snippet": "private String labelURL;",
    "begin_line": 218,
    "end_line": 218,
    "comment": "/** \n * The URL for the label (\u003ccode\u003enull\u003c/code\u003e is permitted).\n * @since 1.2.0.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.axisLineVisible",
    "snippet": "private boolean axisLineVisible;",
    "begin_line": 221,
    "end_line": 221,
    "comment": "/** \n * A flag that controls whether or not the axis line is visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.axisLineStroke",
    "snippet": "private transient Stroke axisLineStroke;",
    "begin_line": 224,
    "end_line": 224,
    "comment": "/** \n * The stroke used for the axis line. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.axisLinePaint",
    "snippet": "private transient Paint axisLinePaint;",
    "begin_line": 227,
    "end_line": 227,
    "comment": "/** \n * The paint used for the axis line. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickLabelsVisible",
    "snippet": "private boolean tickLabelsVisible;",
    "begin_line": 233,
    "end_line": 233,
    "comment": "/** \n * A flag that indicates whether or not tick labels are visible for the axis.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickLabelFont",
    "snippet": "private Font tickLabelFont;",
    "begin_line": 236,
    "end_line": 236,
    "comment": "/** \n * The font used to display the tick labels. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickLabelPaint",
    "snippet": "private transient Paint tickLabelPaint;",
    "begin_line": 239,
    "end_line": 239,
    "comment": "/** \n * The color used to display the tick labels. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickLabelInsets",
    "snippet": "private RectangleInsets tickLabelInsets;",
    "begin_line": 242,
    "end_line": 242,
    "comment": "/** \n * The blank space around each tick label. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickMarksVisible",
    "snippet": "private boolean tickMarksVisible;",
    "begin_line": 248,
    "end_line": 248,
    "comment": "/** \n * A flag that indicates whether or not major tick marks are visible for the axis.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickMarkInsideLength",
    "snippet": "private float tickMarkInsideLength;",
    "begin_line": 254,
    "end_line": 254,
    "comment": "/** \n * The length of the major tick mark inside the data area (zero permitted).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickMarkOutsideLength",
    "snippet": "private float tickMarkOutsideLength;",
    "begin_line": 260,
    "end_line": 260,
    "comment": "/** \n * The length of the major tick mark outside the data area (zero permitted).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.minorTickMarksVisible",
    "snippet": "private boolean minorTickMarksVisible;",
    "begin_line": 268,
    "end_line": 268,
    "comment": "/** \n * A flag that indicates whether or not minor tick marks are visible for the axis.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.minorTickMarkInsideLength",
    "snippet": "private float minorTickMarkInsideLength;",
    "begin_line": 275,
    "end_line": 275,
    "comment": "/** \n * The length of the minor tick mark inside the data area (zero permitted).\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.minorTickMarkOutsideLength",
    "snippet": "private float minorTickMarkOutsideLength;",
    "begin_line": 282,
    "end_line": 282,
    "comment": "/** \n * The length of the minor tick mark outside the data area (zero permitted).\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickMarkStroke",
    "snippet": "private transient Stroke tickMarkStroke;",
    "begin_line": 285,
    "end_line": 285,
    "comment": "/** \n * The stroke used to draw tick marks. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.tickMarkPaint",
    "snippet": "private transient Paint tickMarkPaint;",
    "begin_line": 288,
    "end_line": 288,
    "comment": "/** \n * The paint used to draw tick marks. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.fixedDimension",
    "snippet": "private double fixedDimension;",
    "begin_line": 291,
    "end_line": 291,
    "comment": "/** \n * The fixed (horizontal or vertical) dimension for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.plot",
    "snippet": "private transient Plot plot;",
    "begin_line": 297,
    "end_line": 297,
    "comment": "/** \n * A reference back to the plot that the axis is assigned to (can be \u003ccode\u003enull\u003c/code\u003e).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.Axis",
    "src_path": "org/jfree/chart/axis/Axis.java",
    "signature": "org.jfree.chart.axis.Axis.listenerList",
    "snippet": "private transient EventListenerList listenerList;",
    "begin_line": 300,
    "end_line": 300,
    "comment": "/** \n * Storage for registered listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -3276922179323563410L;",
    "begin_line": 58,
    "end_line": 58,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT",
    "snippet": "public static final AxisLocation TOP_OR_LEFT \u003d new AxisLocation(\r\n            \"AxisLocation.TOP_OR_LEFT\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * Axis at the top or left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_RIGHT",
    "snippet": "public static final AxisLocation TOP_OR_RIGHT \u003d new AxisLocation(\r\n            \"AxisLocation.TOP_OR_RIGHT\");",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * Axis at the top or right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT",
    "snippet": "public static final AxisLocation BOTTOM_OR_LEFT \u003d new AxisLocation(\r\n            \"AxisLocation.BOTTOM_OR_LEFT\");",
    "begin_line": 69,
    "end_line": 70,
    "comment": "/** \n * Axis at the bottom or left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT",
    "snippet": "public static final AxisLocation BOTTOM_OR_RIGHT \u003d new AxisLocation(\r\n            \"AxisLocation.BOTTOM_OR_RIGHT\");",
    "begin_line": 73,
    "end_line": 74,
    "comment": "/** \n * Axis at the bottom or right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "signature": "org.jfree.chart.axis.AxisLocation.name",
    "snippet": "private String name;",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -1013460999649007604L;",
    "begin_line": 181,
    "end_line": 181,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_RANGE",
    "snippet": "public static final DateRange DEFAULT_DATE_RANGE \u003d new DateRange();",
    "begin_line": 184,
    "end_line": 184,
    "comment": "/** \n * The default axis range. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS",
    "snippet": "public static final double\r\n            DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS \u003d 2.0;",
    "begin_line": 187,
    "end_line": 188,
    "comment": "/** \n * The default minimum auto range size. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_TICK_UNIT",
    "snippet": "public static final DateTickUnit DEFAULT_DATE_TICK_UNIT\r\n            \u003d new DateTickUnit(DateTickUnitType.DAY, 1, new SimpleDateFormat());",
    "begin_line": 191,
    "end_line": 192,
    "comment": "/** \n * The default date tick unit. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_ANCHOR_DATE",
    "snippet": "public static final Date DEFAULT_ANCHOR_DATE \u003d new Date();",
    "begin_line": 195,
    "end_line": 195,
    "comment": "/** \n * The default anchor date. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.tickUnit",
    "snippet": "private DateTickUnit tickUnit;",
    "begin_line": 198,
    "end_line": 198,
    "comment": "/** \n * The current tick unit. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.dateFormatOverride",
    "snippet": "private DateFormat dateFormatOverride;",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * The override date format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.tickMarkPosition",
    "snippet": "private DateTickMarkPosition tickMarkPosition \u003d DateTickMarkPosition.START;",
    "begin_line": 207,
    "end_line": 207,
    "comment": "/** \n * Tick marks can be displayed at the start or the middle of the time period.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_TIMELINE",
    "snippet": "private static final Timeline DEFAULT_TIMELINE \u003d new DefaultTimeline();",
    "begin_line": 321,
    "end_line": 321,
    "comment": "/** \n * A static default timeline shared by all standard DateAxis \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.timeZone",
    "snippet": "private TimeZone timeZone;",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * The time zone for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.locale",
    "snippet": "private Locale locale;",
    "begin_line": 331,
    "end_line": 331,
    "comment": "/** \n * The locale for the axis (\u003ccode\u003enull\u003c/code\u003e is not permitted).\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateAxis",
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "signature": "org.jfree.chart.axis.DateAxis.timeline",
    "snippet": "private Timeline timeline;",
    "begin_line": 334,
    "end_line": 334,
    "comment": "/** \n * Our underlying timeline. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2540750672764537240L;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.START",
    "snippet": "public static final DateTickMarkPosition START\r\n        \u003d new DateTickMarkPosition(\"DateTickMarkPosition.START\");",
    "begin_line": 56,
    "end_line": 57,
    "comment": "/** \n * Start of period. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.MIDDLE",
    "snippet": "public static final DateTickMarkPosition MIDDLE\r\n        \u003d new DateTickMarkPosition(\"DateTickMarkPosition.MIDDLE\");",
    "begin_line": 60,
    "end_line": 61,
    "comment": "/** \n * Middle of period. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.END",
    "snippet": "public static final DateTickMarkPosition END\r\n        \u003d new DateTickMarkPosition(\"DateTickMarkPosition.END\");",
    "begin_line": 64,
    "end_line": 65,
    "comment": "/** \n * End of period. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.name",
    "snippet": "private String name;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7289292157229621901L;",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.unitType",
    "snippet": "private DateTickUnitType unitType;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * The units.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.count",
    "snippet": "private int count;",
    "begin_line": 84,
    "end_line": 84,
    "comment": "/** \n * The unit count. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.rollUnitType",
    "snippet": "private DateTickUnitType rollUnitType;",
    "begin_line": 91,
    "end_line": 91,
    "comment": "/** \n * The roll unit type.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.rollCount",
    "snippet": "private int rollCount;",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * The roll count. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "signature": "org.jfree.chart.axis.DateTickUnit.formatter",
    "snippet": "private DateFormat formatter;",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * The date formatter. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.YEAR",
    "snippet": "public static final DateTickUnitType YEAR\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.YEAR\", Calendar.YEAR);",
    "begin_line": 55,
    "end_line": 56,
    "comment": "/** \n * Year. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.MONTH",
    "snippet": "public static final DateTickUnitType MONTH\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.MONTH\", Calendar.MONTH);",
    "begin_line": 59,
    "end_line": 60,
    "comment": "/** \n * Month. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.DAY",
    "snippet": "public static final DateTickUnitType DAY\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.DAY\", Calendar.DATE);",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * Day. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.HOUR",
    "snippet": "public static final DateTickUnitType HOUR\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.HOUR\",\r\n                    Calendar.HOUR_OF_DAY);",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Hour. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.MINUTE",
    "snippet": "public static final DateTickUnitType MINUTE\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.MINUTE\", Calendar.MINUTE);",
    "begin_line": 73,
    "end_line": 74,
    "comment": "/** \n * Minute. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.SECOND",
    "snippet": "public static final DateTickUnitType SECOND\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.SECOND\", Calendar.SECOND);",
    "begin_line": 77,
    "end_line": 78,
    "comment": "/** \n * Second. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.MILLISECOND",
    "snippet": "public static final DateTickUnitType MILLISECOND\r\n            \u003d new DateTickUnitType(\"DateTickUnitType.MILLISECOND\",\r\n                    Calendar.MILLISECOND);",
    "begin_line": 81,
    "end_line": 83,
    "comment": "/** \n * Millisecond. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.name",
    "snippet": "private String name;",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "signature": "org.jfree.chart.axis.DateTickUnitType.calendarField",
    "snippet": "private int calendarField;",
    "begin_line": 89,
    "end_line": 89,
    "comment": "/** \n * The corresponding field value in Java\u0027s Calendar class. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2805933088476185789L;",
    "begin_line": 144,
    "end_line": 144,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO",
    "snippet": "public static final boolean DEFAULT_AUTO_RANGE_INCLUDES_ZERO \u003d true;",
    "begin_line": 147,
    "end_line": 147,
    "comment": "/** \n * The default value for the autoRangeIncludesZero flag. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO",
    "snippet": "public static final boolean DEFAULT_AUTO_RANGE_STICKY_ZERO \u003d true;",
    "begin_line": 150,
    "end_line": 150,
    "comment": "/** \n * The default value for the autoRangeStickyZero flag. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_TICK_UNIT",
    "snippet": "public static final NumberTickUnit DEFAULT_TICK_UNIT \u003d new NumberTickUnit(\r\n            1.0, new DecimalFormat(\"0\"));",
    "begin_line": 153,
    "end_line": 154,
    "comment": "/** \n * The default tick unit. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_VERTICAL_TICK_LABELS",
    "snippet": "public static final boolean DEFAULT_VERTICAL_TICK_LABELS \u003d false;",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * The default setting for the vertical tick labels flag. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.rangeType",
    "snippet": "private RangeType rangeType;",
    "begin_line": 163,
    "end_line": 163,
    "comment": "/** \n * The range type (can be used to force the axis to display only positive values or only negative values).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.autoRangeIncludesZero",
    "snippet": "private boolean autoRangeIncludesZero;",
    "begin_line": 170,
    "end_line": 170,
    "comment": "/** \n * A flag that affects the axis range when the range is determined automatically.  If the auto range does NOT include zero and this flag is TRUE, then the range is changed to include zero.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.autoRangeStickyZero",
    "snippet": "private boolean autoRangeStickyZero;",
    "begin_line": 177,
    "end_line": 177,
    "comment": "/** \n * A flag that affects the size of the margins added to the axis range when the range is determined automatically.  If the value 0 falls within the margin and this flag is TRUE, then the margin is truncated at zero.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.tickUnit",
    "snippet": "private NumberTickUnit tickUnit;",
    "begin_line": 180,
    "end_line": 180,
    "comment": "/** \n * The tick unit for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.numberFormatOverride",
    "snippet": "private NumberFormat numberFormatOverride;",
    "begin_line": 183,
    "end_line": 183,
    "comment": "/** \n * The override number format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "signature": "org.jfree.chart.axis.NumberAxis.markerBand",
    "snippet": "private MarkerAxisBand markerBand;",
    "begin_line": 186,
    "end_line": 186,
    "comment": "/** \n * An optional band for marking regions on the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "signature": "org.jfree.chart.axis.NumberTickUnit.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 3849459506627654442L;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "signature": "org.jfree.chart.axis.NumberTickUnit.formatter",
    "snippet": "private NumberFormat formatter;",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * A formatter for the tick unit. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7216330468770619716L;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.DEFAULT_GRID_BAND_PAINT",
    "snippet": "public static final Paint DEFAULT_GRID_BAND_PAINT\r\n            \u003d new Color(232, 234, 232, 128);",
    "begin_line": 121,
    "end_line": 122,
    "comment": "/** \n * The default grid band paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT",
    "snippet": "public static final Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT\r\n            \u003d new Color(0, 0, 0, 0);",
    "begin_line": 129,
    "end_line": 130,
    "comment": "/** \n * The default paint for alternate grid bands.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.symbols",
    "snippet": "private List symbols;",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * The list of symbols to display instead of the numeric values. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.gridBandsVisible",
    "snippet": "private boolean gridBandsVisible;",
    "begin_line": 136,
    "end_line": 136,
    "comment": "/** \n * Flag that indicates whether or not grid bands are visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.gridBandPaint",
    "snippet": "private transient Paint gridBandPaint;",
    "begin_line": 139,
    "end_line": 139,
    "comment": "/** \n * The paint used to color the grid bands (if the bands are visible). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "signature": "org.jfree.chart.axis.SymbolAxis.gridBandAlternatePaint",
    "snippet": "private transient Paint gridBandAlternatePaint;",
    "begin_line": 146,
    "end_line": 146,
    "comment": "/** \n * The paint used to fill the alternate grid bands.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.TickUnit",
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "signature": "org.jfree.chart.axis.TickUnit.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 510179855057013974L;",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.TickUnit",
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "signature": "org.jfree.chart.axis.TickUnit.size",
    "snippet": "private double size;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The size of the tick unit. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.TickUnit",
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "signature": "org.jfree.chart.axis.TickUnit.minorTickCount",
    "snippet": "private int minorTickCount;",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * The number of minor ticks.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.TickUnits",
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "signature": "org.jfree.chart.axis.TickUnits.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1134174035901467545L;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.TickUnits",
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "signature": "org.jfree.chart.axis.TickUnits.tickUnits",
    "snippet": "private List tickUnits;",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * Storage for the tick units. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 3698345477322391456L;",
    "begin_line": 152,
    "end_line": 152,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_RANGE",
    "snippet": "public static final Range DEFAULT_RANGE \u003d new Range(0.0, 1.0);",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * The default axis range. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE",
    "snippet": "public static final boolean DEFAULT_AUTO_RANGE \u003d true;",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * The default auto-range value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_INVERTED",
    "snippet": "public static final boolean DEFAULT_INVERTED \u003d false;",
    "begin_line": 161,
    "end_line": 161,
    "comment": "/** \n * The default inverted flag setting. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE",
    "snippet": "public static final double DEFAULT_AUTO_RANGE_MINIMUM_SIZE \u003d 0.00000001;",
    "begin_line": 164,
    "end_line": 164,
    "comment": "/** \n * The default minimum auto range. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_LOWER_MARGIN",
    "snippet": "public static final double DEFAULT_LOWER_MARGIN \u003d 0.05;",
    "begin_line": 167,
    "end_line": 167,
    "comment": "/** \n * The default value for the lower margin (0.05 \u003d 5%). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_UPPER_MARGIN",
    "snippet": "public static final double DEFAULT_UPPER_MARGIN \u003d 0.05;",
    "begin_line": 170,
    "end_line": 170,
    "comment": "/** \n * The default value for the upper margin (0.05 \u003d 5%). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION",
    "snippet": "public static final boolean DEFAULT_AUTO_TICK_UNIT_SELECTION \u003d true;",
    "begin_line": 173,
    "end_line": 173,
    "comment": "/** \n * The default auto-tick-unit-selection value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.MAXIMUM_TICK_COUNT",
    "snippet": "public static final int MAXIMUM_TICK_COUNT \u003d 500;",
    "begin_line": 176,
    "end_line": 176,
    "comment": "/** \n * The maximum tick count. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.positiveArrowVisible",
    "snippet": "private boolean positiveArrowVisible;",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * A flag that controls whether an arrow is drawn at the positive end of the axis line.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.negativeArrowVisible",
    "snippet": "private boolean negativeArrowVisible;",
    "begin_line": 188,
    "end_line": 188,
    "comment": "/** \n * A flag that controls whether an arrow is drawn at the negative end of the axis line.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.upArrow",
    "snippet": "private transient Shape upArrow;",
    "begin_line": 191,
    "end_line": 191,
    "comment": "/** \n * The shape used for an up arrow. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.downArrow",
    "snippet": "private transient Shape downArrow;",
    "begin_line": 194,
    "end_line": 194,
    "comment": "/** \n * The shape used for a down arrow. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.leftArrow",
    "snippet": "private transient Shape leftArrow;",
    "begin_line": 197,
    "end_line": 197,
    "comment": "/** \n * The shape used for a left arrow. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.rightArrow",
    "snippet": "private transient Shape rightArrow;",
    "begin_line": 200,
    "end_line": 200,
    "comment": "/** \n * The shape used for a right arrow. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.inverted",
    "snippet": "private boolean inverted;",
    "begin_line": 203,
    "end_line": 203,
    "comment": "/** \n * A flag that affects the orientation of the values on the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.range",
    "snippet": "private Range range;",
    "begin_line": 206,
    "end_line": 206,
    "comment": "/** \n * The axis range. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.autoRange",
    "snippet": "private boolean autoRange;",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * Flag that indicates whether the axis automatically scales to fit the chart data.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.autoRangeMinimumSize",
    "snippet": "private double autoRangeMinimumSize;",
    "begin_line": 215,
    "end_line": 215,
    "comment": "/** \n * The minimum size for the \u0027auto\u0027 axis range (excluding margins). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.defaultAutoRange",
    "snippet": "private Range defaultAutoRange;",
    "begin_line": 223,
    "end_line": 223,
    "comment": "/** \n * The default range is used when the dataset is empty and the axis needs to determine the auto range.\n * @since 1.0.5\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.upperMargin",
    "snippet": "private double upperMargin;",
    "begin_line": 230,
    "end_line": 230,
    "comment": "/** \n * The upper margin percentage.  This indicates the amount by which the maximum axis value exceeds the maximum data value (as a percentage of the range on the axis) when the axis range is determined automatically.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.lowerMargin",
    "snippet": "private double lowerMargin;",
    "begin_line": 237,
    "end_line": 237,
    "comment": "/** \n * The lower margin.  This is a percentage that indicates the amount by which the minimum axis value is \"less than\" the minimum data value when the axis range is determined automatically.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.fixedAutoRange",
    "snippet": "private double fixedAutoRange;",
    "begin_line": 244,
    "end_line": 244,
    "comment": "/** \n * If this value is positive, the amount is subtracted from the maximum data value to determine the lower axis range.  This can be used to provide a fixed \"window\" on dynamic data.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.autoTickUnitSelection",
    "snippet": "private boolean autoTickUnitSelection;",
    "begin_line": 250,
    "end_line": 250,
    "comment": "/** \n * Flag that indicates whether or not the tick unit is selected automatically.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.standardTickUnits",
    "snippet": "private TickUnitSource standardTickUnits;",
    "begin_line": 253,
    "end_line": 253,
    "comment": "/** \n * The standard tick units for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.autoTickIndex",
    "snippet": "private int autoTickIndex;",
    "begin_line": 256,
    "end_line": 256,
    "comment": "/** \n * An index into an array of standard tick values. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.minorTickCount",
    "snippet": "private int minorTickCount;",
    "begin_line": 263,
    "end_line": 263,
    "comment": "/** \n * The number of minor ticks per major tick unit.  This is an override field, if the value is \u003e 0 it is used, otherwise the axis refers to the minorTickCount in the current tickUnit.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "signature": "org.jfree.chart.axis.ValueAxis.verticalTickLabels",
    "snippet": "private boolean verticalTickLabels;",
    "begin_line": 266,
    "end_line": 266,
    "comment": "/** \n * A flag indicating whether or not tick labels are rotated to vertical. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7689852412141274563L;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.id",
    "snippet": "private String id;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * The id for the block. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.margin",
    "snippet": "private RectangleInsets margin;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * The margin around the outside of the block. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.frame",
    "snippet": "private BlockFrame frame;",
    "begin_line": 84,
    "end_line": 84,
    "comment": "/** \n * The frame (or border) for the block. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.padding",
    "snippet": "private RectangleInsets padding;",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * The padding between the block content and the border. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.width",
    "snippet": "private double width;",
    "begin_line": 93,
    "end_line": 93,
    "comment": "/** \n * The natural width of the block (may be overridden if there are constraints in sizing).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.height",
    "snippet": "private double height;",
    "begin_line": 99,
    "end_line": 99,
    "comment": "/** \n * The natural height of the block (may be overridden if there are constraints in sizing).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "signature": "org.jfree.chart.block.AbstractBlock.bounds",
    "snippet": "private transient Rectangle2D bounds;",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * The current bounds for the block (position of the block in Java2D space).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockBorder",
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "signature": "org.jfree.chart.block.BlockBorder.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 4961579220410228283L;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockBorder",
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "signature": "org.jfree.chart.block.BlockBorder.NONE",
    "snippet": "public static final BlockBorder NONE \u003d new BlockBorder(\r\n            RectangleInsets.ZERO_INSETS, Color.white);",
    "begin_line": 71,
    "end_line": 72,
    "comment": "/** \n * An empty border. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockBorder",
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "signature": "org.jfree.chart.block.BlockBorder.insets",
    "snippet": "private RectangleInsets insets;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * The space reserved for the border. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockBorder",
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "signature": "org.jfree.chart.block.BlockBorder.paint",
    "snippet": "private transient Paint paint;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * The border color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockContainer",
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "signature": "org.jfree.chart.block.BlockContainer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 8199508075695195293L;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockContainer",
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "signature": "org.jfree.chart.block.BlockContainer.blocks",
    "snippet": "private List blocks;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * The blocks within the container. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.BlockContainer",
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "signature": "org.jfree.chart.block.BlockContainer.arrangement",
    "snippet": "private Arrangement arrangement;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * The object responsible for laying out the blocks. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "signature": "org.jfree.chart.block.ColumnArrangement.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -5315388482898581555L;",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "signature": "org.jfree.chart.block.ColumnArrangement.horizontalAlignment",
    "snippet": "private HorizontalAlignment horizontalAlignment;",
    "begin_line": 64,
    "end_line": 64,
    "comment": "/** \n * The horizontal alignment of blocks. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "signature": "org.jfree.chart.block.ColumnArrangement.verticalAlignment",
    "snippet": "private VerticalAlignment verticalAlignment;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * The vertical alignment of blocks within each row. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "signature": "org.jfree.chart.block.ColumnArrangement.horizontalGap",
    "snippet": "private double horizontalGap;",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * The horizontal gap between columns. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "signature": "org.jfree.chart.block.ColumnArrangement.verticalGap",
    "snippet": "private double verticalGap;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * The vertical gap between items in a column. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "signature": "org.jfree.chart.block.FlowArrangement.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 4543632485478613800L;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "signature": "org.jfree.chart.block.FlowArrangement.horizontalAlignment",
    "snippet": "private HorizontalAlignment horizontalAlignment;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The horizontal alignment of blocks. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "signature": "org.jfree.chart.block.FlowArrangement.verticalAlignment",
    "snippet": "private VerticalAlignment verticalAlignment;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The vertical alignment of blocks within each row. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "signature": "org.jfree.chart.block.FlowArrangement.horizontalGap",
    "snippet": "private double horizontalGap;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The horizontal gap between items within rows. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "signature": "org.jfree.chart.block.FlowArrangement.verticalGap",
    "snippet": "private double verticalGap;",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * The vertical gap between rows. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.LineBorder",
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "signature": "org.jfree.chart.block.LineBorder.serialVersionUID",
    "snippet": "static final long serialVersionUID \u003d 4630356736707233924L;",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.LineBorder",
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "signature": "org.jfree.chart.block.LineBorder.paint",
    "snippet": "private transient Paint paint;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * The line color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.LineBorder",
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "signature": "org.jfree.chart.block.LineBorder.stroke",
    "snippet": "private transient Stroke stroke;",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * The line stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.block.LineBorder",
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "signature": "org.jfree.chart.block.LineBorder.insets",
    "snippet": "private RectangleInsets insets;",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * The insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.AxisChangeEvent",
    "src_path": "org/jfree/chart/event/AxisChangeEvent.java",
    "signature": "org.jfree.chart.event.AxisChangeEvent.axis",
    "snippet": "private Axis axis;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * The axis that generated the change event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "signature": "org.jfree.chart.event.ChartChangeEvent.type",
    "snippet": "private ChartChangeEventType type;",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * The type of event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "signature": "org.jfree.chart.event.ChartChangeEvent.chart",
    "snippet": "private JFreeChart chart;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * The chart that generated the event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "signature": "org.jfree.chart.event.ChartChangeEventType.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 5481917022435735602L;",
    "begin_line": 52,
    "end_line": 52,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "signature": "org.jfree.chart.event.ChartChangeEventType.GENERAL",
    "snippet": "public static final ChartChangeEventType GENERAL\r\n            \u003d new ChartChangeEventType(\"ChartChangeEventType.GENERAL\");",
    "begin_line": 55,
    "end_line": 56,
    "comment": "/** \n * GENERAL. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "signature": "org.jfree.chart.event.ChartChangeEventType.NEW_DATASET",
    "snippet": "public static final ChartChangeEventType NEW_DATASET\r\n            \u003d new ChartChangeEventType(\"ChartChangeEventType.NEW_DATASET\");",
    "begin_line": 59,
    "end_line": 60,
    "comment": "/** \n * NEW_DATASET. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "signature": "org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED",
    "snippet": "public static final ChartChangeEventType DATASET_UPDATED\r\n            \u003d new ChartChangeEventType(\"ChartChangeEventType.DATASET_UPDATED\");",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * DATASET_UPDATED. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "signature": "org.jfree.chart.event.ChartChangeEventType.name",
    "snippet": "private String name;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.PlotChangeEvent",
    "src_path": "org/jfree/chart/event/PlotChangeEvent.java",
    "signature": "org.jfree.chart.event.PlotChangeEvent.plot",
    "snippet": "private Plot plot;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * The plot that generated the event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "signature": "org.jfree.chart.event.RendererChangeEvent.renderer",
    "snippet": "private Object renderer;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * The renderer that generated the event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "signature": "org.jfree.chart.event.RendererChangeEvent.seriesVisibilityChanged",
    "snippet": "private boolean seriesVisibilityChanged;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * A flag that indicates whether this event relates to a change in the series visibility.  If so, the receiver (if it is a plot) may want to update the axis bounds.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.event.TitleChangeEvent",
    "src_path": "org/jfree/chart/event/TitleChangeEvent.java",
    "signature": "org.jfree.chart.event.TitleChangeEvent.title",
    "snippet": "private Title title;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * The chart title that generated the event. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7347703325267846275L;",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.labelFormat",
    "snippet": "private String labelFormat;",
    "begin_line": 64,
    "end_line": 64,
    "comment": "/** \n * The label format string. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.numberFormat",
    "snippet": "private NumberFormat numberFormat;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * A number formatter for the value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.percentFormat",
    "snippet": "private NumberFormat percentFormat;",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * A number formatter for the percentage. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 5869744396278660636L;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.formatString",
    "snippet": "private String formatString;",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * The item label format string. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.xFormat",
    "snippet": "private NumberFormat xFormat;",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * A number formatter for the x value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.xDateFormat",
    "snippet": "private DateFormat xDateFormat;",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * A date formatter for the x value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.yFormat",
    "snippet": "private NumberFormat yFormat;",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * A formatter for the y value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.yDateFormat",
    "snippet": "private DateFormat yDateFormat;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * A date formatter for the y value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.nullYString",
    "snippet": "private String nullYString \u003d \"null\";",
    "begin_line": 91,
    "end_line": 91,
    "comment": "/** \n * The string used to represent \u0027null\u0027 for the y-value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -1233101616128695658L;",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.CENTER",
    "snippet": "public static final ItemLabelAnchor CENTER\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.CENTER\");",
    "begin_line": 60,
    "end_line": 61,
    "comment": "/** \n * CENTER. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE1",
    "snippet": "public static final ItemLabelAnchor INSIDE1\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE1\");",
    "begin_line": 64,
    "end_line": 65,
    "comment": "/** \n * INSIDE1. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE2",
    "snippet": "public static final ItemLabelAnchor INSIDE2\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE2\");",
    "begin_line": 68,
    "end_line": 69,
    "comment": "/** \n * INSIDE2. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE3",
    "snippet": "public static final ItemLabelAnchor INSIDE3\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE3\");",
    "begin_line": 72,
    "end_line": 73,
    "comment": "/** \n * INSIDE3. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE4",
    "snippet": "public static final ItemLabelAnchor INSIDE4\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE4\");",
    "begin_line": 76,
    "end_line": 77,
    "comment": "/** \n * INSIDE4. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE5",
    "snippet": "public static final ItemLabelAnchor INSIDE5\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE5\");",
    "begin_line": 80,
    "end_line": 81,
    "comment": "/** \n * INSIDE5. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE6",
    "snippet": "public static final ItemLabelAnchor INSIDE6\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE6\");",
    "begin_line": 84,
    "end_line": 85,
    "comment": "/** \n * INSIDE6. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE7",
    "snippet": "public static final ItemLabelAnchor INSIDE7\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE7\");",
    "begin_line": 88,
    "end_line": 89,
    "comment": "/** \n * INSIDE7. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE8",
    "snippet": "public static final ItemLabelAnchor INSIDE8\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE8\");",
    "begin_line": 92,
    "end_line": 93,
    "comment": "/** \n * INSIDE8. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE9",
    "snippet": "public static final ItemLabelAnchor INSIDE9\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE9\");",
    "begin_line": 96,
    "end_line": 97,
    "comment": "/** \n * INSIDE9. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE10",
    "snippet": "public static final ItemLabelAnchor INSIDE10\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE10\");",
    "begin_line": 100,
    "end_line": 101,
    "comment": "/** \n * INSIDE10. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE11",
    "snippet": "public static final ItemLabelAnchor INSIDE11\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE11\");",
    "begin_line": 104,
    "end_line": 105,
    "comment": "/** \n * INSIDE11. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE12",
    "snippet": "public static final ItemLabelAnchor INSIDE12\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE12\");",
    "begin_line": 108,
    "end_line": 109,
    "comment": "/** \n * INSIDE12. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE1",
    "snippet": "public static final ItemLabelAnchor OUTSIDE1\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE1\");",
    "begin_line": 112,
    "end_line": 113,
    "comment": "/** \n * OUTSIDE1. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE2",
    "snippet": "public static final ItemLabelAnchor OUTSIDE2\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE2\");",
    "begin_line": 116,
    "end_line": 117,
    "comment": "/** \n * OUTSIDE2. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE3",
    "snippet": "public static final ItemLabelAnchor OUTSIDE3\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE3\");",
    "begin_line": 120,
    "end_line": 121,
    "comment": "/** \n * OUTSIDE3. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE4",
    "snippet": "public static final ItemLabelAnchor OUTSIDE4\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE4\");",
    "begin_line": 124,
    "end_line": 125,
    "comment": "/** \n * OUTSIDE4. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE5",
    "snippet": "public static final ItemLabelAnchor OUTSIDE5\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE5\");",
    "begin_line": 128,
    "end_line": 129,
    "comment": "/** \n * OUTSIDE5. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6",
    "snippet": "public static final ItemLabelAnchor OUTSIDE6\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE6\");",
    "begin_line": 132,
    "end_line": 133,
    "comment": "/** \n * OUTSIDE6. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE7",
    "snippet": "public static final ItemLabelAnchor OUTSIDE7\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE7\");",
    "begin_line": 136,
    "end_line": 137,
    "comment": "/** \n * OUTSIDE7. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE8",
    "snippet": "public static final ItemLabelAnchor OUTSIDE8\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE8\");",
    "begin_line": 140,
    "end_line": 141,
    "comment": "/** \n * OUTSIDE8. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE9",
    "snippet": "public static final ItemLabelAnchor OUTSIDE9\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE9\");",
    "begin_line": 144,
    "end_line": 145,
    "comment": "/** \n * OUTSIDE9. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE10",
    "snippet": "public static final ItemLabelAnchor OUTSIDE10\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE10\");",
    "begin_line": 148,
    "end_line": 149,
    "comment": "/** \n * OUTSIDE10. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE11",
    "snippet": "public static final ItemLabelAnchor OUTSIDE11\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE11\");",
    "begin_line": 152,
    "end_line": 153,
    "comment": "/** \n * OUTSIDE11. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE12",
    "snippet": "public static final ItemLabelAnchor OUTSIDE12\r\n        \u003d new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE12\");",
    "begin_line": 156,
    "end_line": 157,
    "comment": "/** \n * OUTSIDE12. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.name",
    "snippet": "private String name;",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 5845390630157034499L;",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.itemLabelAnchor",
    "snippet": "private ItemLabelAnchor itemLabelAnchor;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * The item label anchor point. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.textAnchor",
    "snippet": "private TextAnchor textAnchor;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The text anchor. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.rotationAnchor",
    "snippet": "private TextAnchor rotationAnchor;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The rotation anchor. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.angle",
    "snippet": "private double angle;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The rotation angle. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 3064190563760203668L;",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT",
    "snippet": "public static final String DEFAULT_SECTION_LABEL_FORMAT \u003d \"{0}\";",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * The default section label format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.attributedLabels",
    "snippet": "private ObjectList attributedLabels;",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * An optional list of attributed labels (instances of AttributedString).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2995304200445733779L;",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT",
    "snippet": "public static final String DEFAULT_TOOLTIP_FORMAT \u003d \"{0}: ({1}, {2})\";",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * The default tooltip format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1916017081848400024L;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.DEFAULT_LABEL_FORMAT",
    "snippet": "public static final String DEFAULT_LABEL_FORMAT \u003d \"{0}\";",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The default item label format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.formatPattern",
    "snippet": "private String formatPattern;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The format pattern. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -3564164459039540784L;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT",
    "snippet": "public static final String DEFAULT_TOOL_TIP_FORMAT \u003d \"{0}: ({1}, {2})\";",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The default tooltip format. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.labels",
    "snippet": "protected List labels;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * The label records. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -600593412366385072L;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.FORWARD",
    "snippet": "public static final DatasetRenderingOrder FORWARD\r\n            \u003d new DatasetRenderingOrder(\"DatasetRenderingOrder.FORWARD\");",
    "begin_line": 62,
    "end_line": 63,
    "comment": "/** \n * Render datasets in the order 0, 1, 2, ..., N-1, where N is the number of datasets.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.REVERSE",
    "snippet": "public static final DatasetRenderingOrder REVERSE\r\n            \u003d new DatasetRenderingOrder(\"DatasetRenderingOrder.REVERSE\");",
    "begin_line": 69,
    "end_line": 70,
    "comment": "/** \n * Render datasets in the order N-1, N-2, ..., 2, 1, 0, where N is the number of datasets.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.name",
    "snippet": "private String name;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7339847061039422538L;",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE",
    "snippet": "public static final Paint[] DEFAULT_PAINT_SEQUENCE\r\n            \u003d ChartColor.createDefaultPaintArray();",
    "begin_line": 83,
    "end_line": 84,
    "comment": "/** \n * The default fill paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE",
    "snippet": "public static final Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE \u003d new Paint[] {\r\n            Color.lightGray};",
    "begin_line": 87,
    "end_line": 88,
    "comment": "/** \n * The default outline paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE",
    "snippet": "public static final Paint[] DEFAULT_FILL_PAINT_SEQUENCE \u003d new Paint[] {\r\n            Color.white};",
    "begin_line": 91,
    "end_line": 92,
    "comment": "/** \n * The default fill paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE",
    "snippet": "public static final Stroke[] DEFAULT_STROKE_SEQUENCE \u003d new Stroke[] {\r\n            new BasicStroke(1.0f, BasicStroke.CAP_SQUARE,\r\n                    BasicStroke.JOIN_BEVEL)};",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * The default stroke sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE",
    "snippet": "public static final Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE\r\n            \u003d new Stroke[] {new BasicStroke(1.0f, BasicStroke.CAP_SQUARE,\r\n                    BasicStroke.JOIN_BEVEL)};",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * The default outline stroke sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE",
    "snippet": "public static final Shape[] DEFAULT_SHAPE_SEQUENCE\r\n            \u003d createStandardSeriesShapes();",
    "begin_line": 105,
    "end_line": 106,
    "comment": "/** \n * The default shape sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintSequence",
    "snippet": "private transient Paint[] paintSequence;",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * The paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintIndex",
    "snippet": "private int paintIndex;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * The current paint index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintSequence",
    "snippet": "private transient Paint[] outlinePaintSequence;",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * The outline paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintIndex",
    "snippet": "private int outlinePaintIndex;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * The current outline paint index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintSequence",
    "snippet": "private transient Paint[] fillPaintSequence;",
    "begin_line": 121,
    "end_line": 121,
    "comment": "/** \n * The fill paint sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintIndex",
    "snippet": "private int fillPaintIndex;",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * The current fill paint index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeSequence",
    "snippet": "private transient Stroke[] strokeSequence;",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * The stroke sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeIndex",
    "snippet": "private int strokeIndex;",
    "begin_line": 130,
    "end_line": 130,
    "comment": "/** \n * The current stroke index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeSequence",
    "snippet": "private transient Stroke[] outlineStrokeSequence;",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * The outline stroke sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeIndex",
    "snippet": "private int outlineStrokeIndex;",
    "begin_line": 136,
    "end_line": 136,
    "comment": "/** \n * The current outline stroke index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeSequence",
    "snippet": "private transient Shape[] shapeSequence;",
    "begin_line": 139,
    "end_line": 139,
    "comment": "/** \n * The shape sequence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeIndex",
    "snippet": "private int shapeIndex;",
    "begin_line": 142,
    "end_line": 142,
    "comment": "/** \n * The current shape index. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.minGap",
    "snippet": "private double minGap \u003d 4.0;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * The minimum gap. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.STANDARD",
    "snippet": "public static final PieLabelLinkStyle STANDARD\r\n            \u003d new PieLabelLinkStyle(\"PieLabelLinkStyle.STANDARD\");",
    "begin_line": 55,
    "end_line": 56,
    "comment": "/** \n * STANDARD. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.QUAD_CURVE",
    "snippet": "public static final PieLabelLinkStyle QUAD_CURVE\r\n            \u003d new PieLabelLinkStyle(\"PieLabelLinkStyle.QUAD_CURVE\");",
    "begin_line": 59,
    "end_line": 60,
    "comment": "/** \n * QUAD_CURVE. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.CUBIC_CURVE",
    "snippet": "public static final PieLabelLinkStyle CUBIC_CURVE\r\n            \u003d new PieLabelLinkStyle(\"PieLabelLinkStyle.CUBIC_CURVE\");",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * CUBIC_CURVE. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.name",
    "snippet": "private String name;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -795612466005590431L;",
    "begin_line": 249,
    "end_line": 249,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP",
    "snippet": "public static final double DEFAULT_INTERIOR_GAP \u003d 0.08;",
    "begin_line": 252,
    "end_line": 252,
    "comment": "/** \n * The default interior gap. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP",
    "snippet": "public static final double MAX_INTERIOR_GAP \u003d 0.40;",
    "begin_line": 255,
    "end_line": 255,
    "comment": "/** \n * The maximum interior gap (currently 40%). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE",
    "snippet": "public static final double DEFAULT_START_ANGLE \u003d 90.0;",
    "begin_line": 258,
    "end_line": 258,
    "comment": "/** \n * The default starting angle for the pie chart. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT",
    "snippet": "public static final Font DEFAULT_LABEL_FONT \u003d new Font(\"Tahoma\",\r\n            Font.PLAIN, 10);",
    "begin_line": 261,
    "end_line": 262,
    "comment": "/** \n * The default section label font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT",
    "snippet": "public static final Paint DEFAULT_LABEL_PAINT \u003d Color.black;",
    "begin_line": 265,
    "end_line": 265,
    "comment": "/** \n * The default section label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT",
    "snippet": "public static final Paint DEFAULT_LABEL_BACKGROUND_PAINT \u003d new Color(255,\r\n            255, 192);",
    "begin_line": 268,
    "end_line": 269,
    "comment": "/** \n * The default section label background paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT",
    "snippet": "public static final Paint DEFAULT_LABEL_OUTLINE_PAINT \u003d Color.black;",
    "begin_line": 272,
    "end_line": 272,
    "comment": "/** \n * The default section label outline paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE",
    "snippet": "public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE \u003d new BasicStroke(\r\n            0.5f);",
    "begin_line": 275,
    "end_line": 276,
    "comment": "/** \n * The default section label outline stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT",
    "snippet": "public static final Paint DEFAULT_LABEL_SHADOW_PAINT \u003d new Color(151, 151,\r\n            151, 128);",
    "begin_line": 279,
    "end_line": 280,
    "comment": "/** \n * The default section label shadow paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW",
    "snippet": "public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW \u003d 0.00001;",
    "begin_line": 283,
    "end_line": 283,
    "comment": "/** \n * The default minimum arc angle to draw. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.dataset",
    "snippet": "private PieDataset dataset;",
    "begin_line": 286,
    "end_line": 286,
    "comment": "/** \n * The dataset for the pie chart. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.pieIndex",
    "snippet": "private int pieIndex;",
    "begin_line": 289,
    "end_line": 289,
    "comment": "/** \n * The pie index (used by the  {@link MultiplePiePlot} class). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.interiorGap",
    "snippet": "private double interiorGap;",
    "begin_line": 295,
    "end_line": 295,
    "comment": "/** \n * The amount of space left around the outside of the pie plot, expressed as a percentage of the plot area width and height.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.circular",
    "snippet": "private boolean circular;",
    "begin_line": 298,
    "end_line": 298,
    "comment": "/** \n * Flag determining whether to draw an ellipse or a perfect circle. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.startAngle",
    "snippet": "private double startAngle;",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * The starting angle. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.direction",
    "snippet": "private Rotation direction;",
    "begin_line": 304,
    "end_line": 304,
    "comment": "/** \n * The direction for the pie segments. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.sectionPaintMap",
    "snippet": "private PaintMap sectionPaintMap;",
    "begin_line": 307,
    "end_line": 307,
    "comment": "/** \n * The section paint map. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.baseSectionPaint",
    "snippet": "private transient Paint baseSectionPaint;",
    "begin_line": 310,
    "end_line": 310,
    "comment": "/** \n * The base section paint (fallback). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.autoPopulateSectionPaint",
    "snippet": "private boolean autoPopulateSectionPaint;",
    "begin_line": 318,
    "end_line": 318,
    "comment": "/** \n * A flag that controls whether or not the section paint is auto-populated from the drawing supplier.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.sectionOutlinesVisible",
    "snippet": "private boolean sectionOutlinesVisible;",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * A flag that controls whether or not an outline is drawn for each section in the plot.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.sectionOutlinePaintMap",
    "snippet": "private PaintMap sectionOutlinePaintMap;",
    "begin_line": 327,
    "end_line": 327,
    "comment": "/** \n * The section outline paint map. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.baseSectionOutlinePaint",
    "snippet": "private transient Paint baseSectionOutlinePaint;",
    "begin_line": 330,
    "end_line": 330,
    "comment": "/** \n * The base section outline paint (fallback). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.autoPopulateSectionOutlinePaint",
    "snippet": "private boolean autoPopulateSectionOutlinePaint;",
    "begin_line": 338,
    "end_line": 338,
    "comment": "/** \n * A flag that controls whether or not the section outline paint is auto-populated from the drawing supplier.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.sectionOutlineStrokeMap",
    "snippet": "private StrokeMap sectionOutlineStrokeMap;",
    "begin_line": 341,
    "end_line": 341,
    "comment": "/** \n * The section outline stroke map. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.baseSectionOutlineStroke",
    "snippet": "private transient Stroke baseSectionOutlineStroke;",
    "begin_line": 344,
    "end_line": 344,
    "comment": "/** \n * The base section outline stroke (fallback). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.autoPopulateSectionOutlineStroke",
    "snippet": "private boolean autoPopulateSectionOutlineStroke;",
    "begin_line": 352,
    "end_line": 352,
    "comment": "/** \n * A flag that controls whether or not the section outline stroke is auto-populated from the drawing supplier.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.shadowPaint",
    "snippet": "private transient Paint shadowPaint \u003d Color.gray;",
    "begin_line": 355,
    "end_line": 355,
    "comment": "/** \n * The shadow paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.shadowXOffset",
    "snippet": "private double shadowXOffset \u003d 4.0f;",
    "begin_line": 358,
    "end_line": 358,
    "comment": "/** \n * The x-offset for the shadow effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.shadowYOffset",
    "snippet": "private double shadowYOffset \u003d 4.0f;",
    "begin_line": 361,
    "end_line": 361,
    "comment": "/** \n * The y-offset for the shadow effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.explodePercentages",
    "snippet": "private Map explodePercentages;",
    "begin_line": 364,
    "end_line": 364,
    "comment": "/** \n * The percentage amount to explode each pie section. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelGenerator",
    "snippet": "private PieSectionLabelGenerator labelGenerator;",
    "begin_line": 367,
    "end_line": 367,
    "comment": "/** \n * The section label generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelFont",
    "snippet": "private Font labelFont;",
    "begin_line": 370,
    "end_line": 370,
    "comment": "/** \n * The font used to display the section labels. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelPaint",
    "snippet": "private transient Paint labelPaint;",
    "begin_line": 373,
    "end_line": 373,
    "comment": "/** \n * The color used to draw the section labels. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelBackgroundPaint",
    "snippet": "private transient Paint labelBackgroundPaint;",
    "begin_line": 379,
    "end_line": 379,
    "comment": "/** \n * The color used to draw the background of the section labels.  If this is \u003ccode\u003enull\u003c/code\u003e, the background is not filled.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelOutlinePaint",
    "snippet": "private transient Paint labelOutlinePaint;",
    "begin_line": 385,
    "end_line": 385,
    "comment": "/** \n * The paint used to draw the outline of the section labels (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelOutlineStroke",
    "snippet": "private transient Stroke labelOutlineStroke;",
    "begin_line": 391,
    "end_line": 391,
    "comment": "/** \n * The stroke used to draw the outline of the section labels (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelShadowPaint",
    "snippet": "private transient Paint labelShadowPaint;",
    "begin_line": 397,
    "end_line": 397,
    "comment": "/** \n * The paint used to draw the shadow for the section labels (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.simpleLabels",
    "snippet": "private boolean simpleLabels \u003d true;",
    "begin_line": 404,
    "end_line": 404,
    "comment": "/** \n * A flag that controls whether simple or extended labels are used.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelPadding",
    "snippet": "private RectangleInsets labelPadding;",
    "begin_line": 412,
    "end_line": 412,
    "comment": "/** \n * The padding between the labels and the label outlines.  This is not allowed to be \u003ccode\u003enull\u003c/code\u003e.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.simpleLabelOffset",
    "snippet": "private RectangleInsets simpleLabelOffset;",
    "begin_line": 419,
    "end_line": 419,
    "comment": "/** \n * The simple label offset.\n * @since 1.0.7\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.maximumLabelWidth",
    "snippet": "private double maximumLabelWidth \u003d 0.14;",
    "begin_line": 422,
    "end_line": 422,
    "comment": "/** \n * The maximum label width as a percentage of the plot width. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelGap",
    "snippet": "private double labelGap \u003d 0.025;",
    "begin_line": 428,
    "end_line": 428,
    "comment": "/** \n * The gap between the labels and the link corner, as a percentage of the plot width.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelLinksVisible",
    "snippet": "private boolean labelLinksVisible;",
    "begin_line": 431,
    "end_line": 431,
    "comment": "/** \n * A flag that controls whether or not the label links are drawn. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelLinkStyle",
    "snippet": "private PieLabelLinkStyle labelLinkStyle \u003d PieLabelLinkStyle.STANDARD;",
    "begin_line": 438,
    "end_line": 438,
    "comment": "/** \n * The label link style.\n * @since 1.0.10\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelLinkMargin",
    "snippet": "private double labelLinkMargin \u003d 0.025;",
    "begin_line": 441,
    "end_line": 441,
    "comment": "/** \n * The link margin. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelLinkPaint",
    "snippet": "private transient Paint labelLinkPaint \u003d Color.black;",
    "begin_line": 444,
    "end_line": 444,
    "comment": "/** \n * The paint used for the label linking lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelLinkStroke",
    "snippet": "private transient Stroke labelLinkStroke \u003d new BasicStroke(0.5f);",
    "begin_line": 447,
    "end_line": 447,
    "comment": "/** \n * The stroke used for the label linking lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.labelDistributor",
    "snippet": "private AbstractPieLabelDistributor labelDistributor;",
    "begin_line": 454,
    "end_line": 454,
    "comment": "/** \n * The pie section label distributor.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.toolTipGenerator",
    "snippet": "private PieToolTipGenerator toolTipGenerator;",
    "begin_line": 457,
    "end_line": 457,
    "comment": "/** \n * The tooltip generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.urlGenerator",
    "snippet": "private PieURLGenerator urlGenerator;",
    "begin_line": 460,
    "end_line": 460,
    "comment": "/** \n * The URL generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.legendLabelGenerator",
    "snippet": "private PieSectionLabelGenerator legendLabelGenerator;",
    "begin_line": 463,
    "end_line": 463,
    "comment": "/** \n * The legend label generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.legendLabelToolTipGenerator",
    "snippet": "private PieSectionLabelGenerator legendLabelToolTipGenerator;",
    "begin_line": 466,
    "end_line": 466,
    "comment": "/** \n * A tool tip generator for the legend. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.legendLabelURLGenerator",
    "snippet": "private PieURLGenerator legendLabelURLGenerator;",
    "begin_line": 473,
    "end_line": 473,
    "comment": "/** \n * A URL generator for the legend items (optional).\n * @since 1.0.4.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.ignoreNullValues",
    "snippet": "private boolean ignoreNullValues;",
    "begin_line": 478,
    "end_line": 478,
    "comment": "/** \n * A flag that controls whether \u003ccode\u003enull\u003c/code\u003e values are ignored.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.ignoreZeroValues",
    "snippet": "private boolean ignoreZeroValues;",
    "begin_line": 483,
    "end_line": 483,
    "comment": "/** \n * A flag that controls whether zero values are ignored.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.legendItemShape",
    "snippet": "private transient Shape legendItemShape;",
    "begin_line": 486,
    "end_line": 486,
    "comment": "/** \n * The legend item shape. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.minimumArcAngleToDraw",
    "snippet": "private double minimumArcAngleToDraw;",
    "begin_line": 499,
    "end_line": 499,
    "comment": "/** \n * The smallest arc angle that will get drawn (this is to avoid a bug in various Java implementations that causes the JVM to crash).  See this link for details: http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707 ...and this bug report in the Java Bug Parade: http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.localizationResources",
    "snippet": "protected static ResourceBundle localizationResources \u003d\r\n            ResourceBundleWrapper.getBundle(\r\n                    \"org.jfree.chart.plot.LocalizationBundle\");",
    "begin_line": 502,
    "end_line": 504,
    "comment": "/** \n * The resourceBundle for the localization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR",
    "snippet": "static final boolean DEBUG_DRAW_INTERIOR \u003d false;",
    "begin_line": 511,
    "end_line": 511,
    "comment": "/** \n * This debug flag controls whether or not an outline is drawn showing the interior of the plot region.  This is drawn as a lightGray rectangle showing the padding provided by the \u0027interiorGap\u0027 setting.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA",
    "snippet": "static final boolean DEBUG_DRAW_LINK_AREA \u003d false;",
    "begin_line": 518,
    "end_line": 518,
    "comment": "/** \n * This debug flag controls whether or not an outline is drawn showing the link area (in blue) and link ellipse (in yellow).  This controls where the label links have \u0027elbow\u0027 points.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PiePlot",
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA",
    "snippet": "static final boolean DEBUG_DRAW_PIE_AREA \u003d false;",
    "begin_line": 524,
    "end_line": 524,
    "comment": "/** \n * This debug flag controls whether or not an outline is drawn showing the pie area (in green).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -8831571430103671324L;",
    "begin_line": 194,
    "end_line": 194,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.ZERO",
    "snippet": "public static final Number ZERO \u003d new Integer(0);",
    "begin_line": 197,
    "end_line": 197,
    "comment": "/** \n * Useful constant representing zero. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_INSETS",
    "snippet": "public static final RectangleInsets DEFAULT_INSETS\r\n            \u003d new RectangleInsets(4.0, 8.0, 4.0, 8.0);",
    "begin_line": 200,
    "end_line": 201,
    "comment": "/** \n * The default insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE",
    "snippet": "public static final Stroke DEFAULT_OUTLINE_STROKE \u003d new BasicStroke(0.5f);",
    "begin_line": 204,
    "end_line": 204,
    "comment": "/** \n * The default outline stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT",
    "snippet": "public static final Paint DEFAULT_OUTLINE_PAINT \u003d Color.gray;",
    "begin_line": 207,
    "end_line": 207,
    "comment": "/** \n * The default outline color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_FOREGROUND_ALPHA",
    "snippet": "public static final float DEFAULT_FOREGROUND_ALPHA \u003d 1.0f;",
    "begin_line": 210,
    "end_line": 210,
    "comment": "/** \n * The default foreground alpha transparency. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_ALPHA",
    "snippet": "public static final float DEFAULT_BACKGROUND_ALPHA \u003d 1.0f;",
    "begin_line": 213,
    "end_line": 213,
    "comment": "/** \n * The default background alpha transparency. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT",
    "snippet": "public static final Paint DEFAULT_BACKGROUND_PAINT \u003d Color.LIGHT_GRAY;",
    "begin_line": 216,
    "end_line": 216,
    "comment": "/** \n * The default background color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW",
    "snippet": "public static final int MINIMUM_WIDTH_TO_DRAW \u003d 10;",
    "begin_line": 219,
    "end_line": 219,
    "comment": "/** \n * The minimum width at which the plot should be drawn. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW",
    "snippet": "public static final int MINIMUM_HEIGHT_TO_DRAW \u003d 10;",
    "begin_line": 222,
    "end_line": 222,
    "comment": "/** \n * The minimum height at which the plot should be drawn. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX",
    "snippet": "public static final Shape DEFAULT_LEGEND_ITEM_BOX\r\n            \u003d new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);",
    "begin_line": 225,
    "end_line": 226,
    "comment": "/** \n * A default box shape for legend items. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE",
    "snippet": "public static final Shape DEFAULT_LEGEND_ITEM_CIRCLE\r\n            \u003d new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);",
    "begin_line": 229,
    "end_line": 230,
    "comment": "/** \n * A default circle shape for legend items. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.parent",
    "snippet": "private Plot parent;",
    "begin_line": 233,
    "end_line": 233,
    "comment": "/** \n * The parent plot (\u003ccode\u003enull\u003c/code\u003e if this is the root plot). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.datasetGroup",
    "snippet": "private DatasetGroup datasetGroup;",
    "begin_line": 236,
    "end_line": 236,
    "comment": "/** \n * The dataset group (to be used for thread synchronisation). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.noDataMessage",
    "snippet": "private String noDataMessage;",
    "begin_line": 239,
    "end_line": 239,
    "comment": "/** \n * The message to display if no data is available. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.noDataMessageFont",
    "snippet": "private Font noDataMessageFont;",
    "begin_line": 242,
    "end_line": 242,
    "comment": "/** \n * The font used to display the \u0027no data\u0027 message. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.noDataMessagePaint",
    "snippet": "private transient Paint noDataMessagePaint;",
    "begin_line": 245,
    "end_line": 245,
    "comment": "/** \n * The paint used to draw the \u0027no data\u0027 message. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.insets",
    "snippet": "private RectangleInsets insets;",
    "begin_line": 248,
    "end_line": 248,
    "comment": "/** \n * Amount of blank space around the plot area. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.outlineVisible",
    "snippet": "private boolean outlineVisible;",
    "begin_line": 255,
    "end_line": 255,
    "comment": "/** \n * A flag that controls whether or not the plot outline is drawn.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.outlineStroke",
    "snippet": "private transient Stroke outlineStroke;",
    "begin_line": 258,
    "end_line": 258,
    "comment": "/** \n * The Stroke used to draw an outline around the plot. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.outlinePaint",
    "snippet": "private transient Paint outlinePaint;",
    "begin_line": 261,
    "end_line": 261,
    "comment": "/** \n * The Paint used to draw an outline around the plot. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.backgroundPaint",
    "snippet": "private transient Paint backgroundPaint;",
    "begin_line": 264,
    "end_line": 264,
    "comment": "/** \n * An optional color used to fill the plot background. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.backgroundImage",
    "snippet": "private transient Image backgroundImage;",
    "begin_line": 267,
    "end_line": 267,
    "comment": "/** \n * An optional image for the plot background. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.backgroundImageAlignment",
    "snippet": "private int backgroundImageAlignment \u003d Align.FIT;",
    "begin_line": 270,
    "end_line": 270,
    "comment": "/** \n * The alignment for the background image. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.backgroundImageAlpha",
    "snippet": "private float backgroundImageAlpha \u003d 0.5f;",
    "begin_line": 273,
    "end_line": 273,
    "comment": "/** \n * The alpha value used to draw the background image. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.foregroundAlpha",
    "snippet": "private float foregroundAlpha;",
    "begin_line": 276,
    "end_line": 276,
    "comment": "/** \n * The alpha-transparency for the plot. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.backgroundAlpha",
    "snippet": "private float backgroundAlpha;",
    "begin_line": 279,
    "end_line": 279,
    "comment": "/** \n * The alpha transparency for the background paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.drawingSupplier",
    "snippet": "private DrawingSupplier drawingSupplier;",
    "begin_line": 282,
    "end_line": 282,
    "comment": "/** \n * The drawing supplier. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.listenerList",
    "snippet": "private transient EventListenerList listenerList;",
    "begin_line": 285,
    "end_line": 285,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.Plot",
    "src_path": "org/jfree/chart/plot/Plot.java",
    "signature": "org.jfree.chart.plot.Plot.notify",
    "snippet": "private boolean notify;",
    "begin_line": 294,
    "end_line": 294,
    "comment": "/** \n * A flag that controls whether or not the plot will notify listeners of changes (defaults to true, but sometimes it is useful to disable this).\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "signature": "org.jfree.chart.plot.PlotOrientation.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -2508771828190337782L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "signature": "org.jfree.chart.plot.PlotOrientation.HORIZONTAL",
    "snippet": "public static final PlotOrientation HORIZONTAL\r\n            \u003d new PlotOrientation(\"PlotOrientation.HORIZONTAL\");",
    "begin_line": 57,
    "end_line": 58,
    "comment": "/** \n * For a plot where the range axis is horizontal. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "signature": "org.jfree.chart.plot.PlotOrientation.VERTICAL",
    "snippet": "public static final PlotOrientation VERTICAL\r\n            \u003d new PlotOrientation(\"PlotOrientation.VERTICAL\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * For a plot where the range axis is vertical. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "signature": "org.jfree.chart.plot.PlotOrientation.name",
    "snippet": "private String name;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 209336477448807735L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.FORWARD",
    "snippet": "public static final SeriesRenderingOrder FORWARD\r\n            \u003d new SeriesRenderingOrder(\"SeriesRenderingOrder.FORWARD\");",
    "begin_line": 60,
    "end_line": 61,
    "comment": "/** \n * Render series in the order 0, 1, 2, ..., N-1, where N is the number of series.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.REVERSE",
    "snippet": "public static final SeriesRenderingOrder REVERSE\r\n            \u003d new SeriesRenderingOrder(\"SeriesRenderingOrder.REVERSE\");",
    "begin_line": 67,
    "end_line": 68,
    "comment": "/** \n * Render series in the order N-1, N-2, ..., 2, 1, 0, where N is the number of series.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.name",
    "snippet": "private String name;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7044148245716569264L;",
    "begin_line": 318,
    "end_line": 318,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",
    "snippet": "public static final Stroke DEFAULT_GRIDLINE_STROKE \u003d new BasicStroke(0.5f,\r\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,\r\n            new float[] {2.0f, 2.0f}, 0.0f);",
    "begin_line": 321,
    "end_line": 323,
    "comment": "/** \n * The default grid line stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",
    "snippet": "public static final Paint DEFAULT_GRIDLINE_PAINT \u003d Color.WHITE;",
    "begin_line": 326,
    "end_line": 326,
    "comment": "/** \n * The default grid line paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",
    "snippet": "public static final boolean DEFAULT_CROSSHAIR_VISIBLE \u003d false;",
    "begin_line": 329,
    "end_line": 329,
    "comment": "/** \n * The default crosshair visibility. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",
    "snippet": "public static final Stroke DEFAULT_CROSSHAIR_STROKE\r\n            \u003d DEFAULT_GRIDLINE_STROKE;",
    "begin_line": 332,
    "end_line": 333,
    "comment": "/** \n * The default crosshair stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",
    "snippet": "public static final Paint DEFAULT_CROSSHAIR_PAINT \u003d Color.blue;",
    "begin_line": 336,
    "end_line": 336,
    "comment": "/** \n * The default crosshair paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.localizationResources",
    "snippet": "protected static ResourceBundle localizationResources\r\n            \u003d ResourceBundleWrapper.getBundle(\r\n                    \"org.jfree.chart.plot.LocalizationBundle\");",
    "begin_line": 339,
    "end_line": 341,
    "comment": "/** \n * The resourceBundle for the localization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.orientation",
    "snippet": "private PlotOrientation orientation;",
    "begin_line": 344,
    "end_line": 344,
    "comment": "/** \n * The plot orientation. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.axisOffset",
    "snippet": "private RectangleInsets axisOffset;",
    "begin_line": 347,
    "end_line": 347,
    "comment": "/** \n * The offset between the data area and the axes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainAxes",
    "snippet": "private ObjectList domainAxes;",
    "begin_line": 350,
    "end_line": 350,
    "comment": "/** \n * The domain axis / axes (used for the x-values). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainAxisLocations",
    "snippet": "private ObjectList domainAxisLocations;",
    "begin_line": 353,
    "end_line": 353,
    "comment": "/** \n * The domain axis locations. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeAxes",
    "snippet": "private ObjectList rangeAxes;",
    "begin_line": 356,
    "end_line": 356,
    "comment": "/** \n * The range axis (used for the y-values). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeAxisLocations",
    "snippet": "private ObjectList rangeAxisLocations;",
    "begin_line": 359,
    "end_line": 359,
    "comment": "/** \n * The range axis location. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.datasets",
    "snippet": "private ObjectList datasets;",
    "begin_line": 362,
    "end_line": 362,
    "comment": "/** \n * Storage for the datasets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.renderers",
    "snippet": "private ObjectList renderers;",
    "begin_line": 365,
    "end_line": 365,
    "comment": "/** \n * Storage for the renderers. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.datasetToDomainAxesMap",
    "snippet": "private Map datasetToDomainAxesMap;",
    "begin_line": 375,
    "end_line": 375,
    "comment": "/** \n * Storage for the mapping between datasets/renderers and domain axes.  The keys in the map are Integer objects, corresponding to the dataset index.  The values in the map are List objects containing Integer objects (corresponding to the axis indices).  If the map contains no entry for a dataset, it is assumed to map to the primary domain axis (index \u003d 0).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.datasetToRangeAxesMap",
    "snippet": "private Map datasetToRangeAxesMap;",
    "begin_line": 385,
    "end_line": 385,
    "comment": "/** \n * Storage for the mapping between datasets/renderers and range axes.  The keys in the map are Integer objects, corresponding to the dataset index.  The values in the map are List objects containing Integer objects (corresponding to the axis indices).  If the map contains no entry for a dataset, it is assumed to map to the primary domain axis (index \u003d 0).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.quadrantOrigin",
    "snippet": "private transient Point2D quadrantOrigin \u003d new Point2D.Double(0.0, 0.0);",
    "begin_line": 388,
    "end_line": 388,
    "comment": "/** \n * The origin point for the quadrants (if drawn). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.quadrantPaint",
    "snippet": "private transient Paint[] quadrantPaint\r\n            \u003d new Paint[] {null, null, null, null};",
    "begin_line": 391,
    "end_line": 392,
    "comment": "/** \n * The paint used for each quadrant. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainGridlinesVisible",
    "snippet": "private boolean domainGridlinesVisible;",
    "begin_line": 395,
    "end_line": 395,
    "comment": "/** \n * A flag that controls whether the domain grid-lines are visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainGridlineStroke",
    "snippet": "private transient Stroke domainGridlineStroke;",
    "begin_line": 398,
    "end_line": 398,
    "comment": "/** \n * The stroke used to draw the domain grid-lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainGridlinePaint",
    "snippet": "private transient Paint domainGridlinePaint;",
    "begin_line": 401,
    "end_line": 401,
    "comment": "/** \n * The paint used to draw the domain grid-lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeGridlinesVisible",
    "snippet": "private boolean rangeGridlinesVisible;",
    "begin_line": 404,
    "end_line": 404,
    "comment": "/** \n * A flag that controls whether the range grid-lines are visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeGridlineStroke",
    "snippet": "private transient Stroke rangeGridlineStroke;",
    "begin_line": 407,
    "end_line": 407,
    "comment": "/** \n * The stroke used to draw the range grid-lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeGridlinePaint",
    "snippet": "private transient Paint rangeGridlinePaint;",
    "begin_line": 410,
    "end_line": 410,
    "comment": "/** \n * The paint used to draw the range grid-lines. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainMinorGridlinesVisible",
    "snippet": "private boolean domainMinorGridlinesVisible;",
    "begin_line": 417,
    "end_line": 417,
    "comment": "/** \n * A flag that controls whether the domain minor grid-lines are visible.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainMinorGridlineStroke",
    "snippet": "private transient Stroke domainMinorGridlineStroke;",
    "begin_line": 424,
    "end_line": 424,
    "comment": "/** \n * The stroke used to draw the domain minor grid-lines.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainMinorGridlinePaint",
    "snippet": "private transient Paint domainMinorGridlinePaint;",
    "begin_line": 431,
    "end_line": 431,
    "comment": "/** \n * The paint used to draw the domain minor grid-lines.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeMinorGridlinesVisible",
    "snippet": "private boolean rangeMinorGridlinesVisible;",
    "begin_line": 438,
    "end_line": 438,
    "comment": "/** \n * A flag that controls whether the range minor grid-lines are visible.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeMinorGridlineStroke",
    "snippet": "private transient Stroke rangeMinorGridlineStroke;",
    "begin_line": 445,
    "end_line": 445,
    "comment": "/** \n * The stroke used to draw the range minor grid-lines.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeMinorGridlinePaint",
    "snippet": "private transient Paint rangeMinorGridlinePaint;",
    "begin_line": 452,
    "end_line": 452,
    "comment": "/** \n * The paint used to draw the range minor grid-lines.\n * @since 1.0.12\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselineVisible",
    "snippet": "private boolean domainZeroBaselineVisible;",
    "begin_line": 460,
    "end_line": 460,
    "comment": "/** \n * A flag that controls whether or not the zero baseline against the domain axis is visible.\n * @since 1.0.5\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselineStroke",
    "snippet": "private transient Stroke domainZeroBaselineStroke;",
    "begin_line": 467,
    "end_line": 467,
    "comment": "/** \n * The stroke used for the zero baseline against the domain axis.\n * @since 1.0.5\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselinePaint",
    "snippet": "private transient Paint domainZeroBaselinePaint;",
    "begin_line": 474,
    "end_line": 474,
    "comment": "/** \n * The paint used for the zero baseline against the domain axis.\n * @since 1.0.5\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselineVisible",
    "snippet": "private boolean rangeZeroBaselineVisible;",
    "begin_line": 480,
    "end_line": 480,
    "comment": "/** \n * A flag that controls whether or not the zero baseline against the range axis is visible.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselineStroke",
    "snippet": "private transient Stroke rangeZeroBaselineStroke;",
    "begin_line": 483,
    "end_line": 483,
    "comment": "/** \n * The stroke used for the zero baseline against the range axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselinePaint",
    "snippet": "private transient Paint rangeZeroBaselinePaint;",
    "begin_line": 486,
    "end_line": 486,
    "comment": "/** \n * The paint used for the zero baseline against the range axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairVisible",
    "snippet": "private boolean domainCrosshairVisible;",
    "begin_line": 489,
    "end_line": 489,
    "comment": "/** \n * A flag that controls whether or not a domain crosshair is drawn..\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairValue",
    "snippet": "private double domainCrosshairValue;",
    "begin_line": 492,
    "end_line": 492,
    "comment": "/** \n * The domain crosshair value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairStroke",
    "snippet": "private transient Stroke domainCrosshairStroke;",
    "begin_line": 495,
    "end_line": 495,
    "comment": "/** \n * The pen/brush used to draw the crosshair (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairPaint",
    "snippet": "private transient Paint domainCrosshairPaint;",
    "begin_line": 498,
    "end_line": 498,
    "comment": "/** \n * The color used to draw the crosshair (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairLockedOnData",
    "snippet": "private boolean domainCrosshairLockedOnData \u003d true;",
    "begin_line": 504,
    "end_line": 504,
    "comment": "/** \n * A flag that controls whether or not the crosshair locks onto actual data points.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairVisible",
    "snippet": "private boolean rangeCrosshairVisible;",
    "begin_line": 507,
    "end_line": 507,
    "comment": "/** \n * A flag that controls whether or not a range crosshair is drawn..\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairValue",
    "snippet": "private double rangeCrosshairValue;",
    "begin_line": 510,
    "end_line": 510,
    "comment": "/** \n * The range crosshair value. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairStroke",
    "snippet": "private transient Stroke rangeCrosshairStroke;",
    "begin_line": 513,
    "end_line": 513,
    "comment": "/** \n * The pen/brush used to draw the crosshair (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairPaint",
    "snippet": "private transient Paint rangeCrosshairPaint;",
    "begin_line": 516,
    "end_line": 516,
    "comment": "/** \n * The color used to draw the crosshair (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairLockedOnData",
    "snippet": "private boolean rangeCrosshairLockedOnData \u003d true;",
    "begin_line": 522,
    "end_line": 522,
    "comment": "/** \n * A flag that controls whether or not the crosshair locks onto actual data points.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.foregroundDomainMarkers",
    "snippet": "private Map foregroundDomainMarkers;",
    "begin_line": 525,
    "end_line": 525,
    "comment": "/** \n * A map of lists of foreground markers (optional) for the domain axes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.backgroundDomainMarkers",
    "snippet": "private Map backgroundDomainMarkers;",
    "begin_line": 528,
    "end_line": 528,
    "comment": "/** \n * A map of lists of background markers (optional) for the domain axes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.foregroundRangeMarkers",
    "snippet": "private Map foregroundRangeMarkers;",
    "begin_line": 531,
    "end_line": 531,
    "comment": "/** \n * A map of lists of foreground markers (optional) for the range axes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.backgroundRangeMarkers",
    "snippet": "private Map backgroundRangeMarkers;",
    "begin_line": 534,
    "end_line": 534,
    "comment": "/** \n * A map of lists of background markers (optional) for the range axes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.annotations",
    "snippet": "private List annotations;",
    "begin_line": 541,
    "end_line": 541,
    "comment": "/** \n * A (possibly empty) list of annotations for the plot.  The list should be initialised in the constructor and never allowed to be \u003ccode\u003enull\u003c/code\u003e.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainTickBandPaint",
    "snippet": "private transient Paint domainTickBandPaint;",
    "begin_line": 544,
    "end_line": 544,
    "comment": "/** \n * The paint used for the domain tick bands (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangeTickBandPaint",
    "snippet": "private transient Paint rangeTickBandPaint;",
    "begin_line": 547,
    "end_line": 547,
    "comment": "/** \n * The paint used for the range tick bands (if any). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.fixedDomainAxisSpace",
    "snippet": "private AxisSpace fixedDomainAxisSpace;",
    "begin_line": 550,
    "end_line": 550,
    "comment": "/** \n * The fixed domain axis space. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.fixedRangeAxisSpace",
    "snippet": "private AxisSpace fixedRangeAxisSpace;",
    "begin_line": 553,
    "end_line": 553,
    "comment": "/** \n * The fixed range axis space. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.datasetRenderingOrder",
    "snippet": "private DatasetRenderingOrder datasetRenderingOrder\r\n            \u003d DatasetRenderingOrder.REVERSE;",
    "begin_line": 559,
    "end_line": 560,
    "comment": "/** \n * The order of the dataset rendering (REVERSE draws the primary dataset last so that it appears to be on top).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.seriesRenderingOrder",
    "snippet": "private SeriesRenderingOrder seriesRenderingOrder\r\n            \u003d SeriesRenderingOrder.REVERSE;",
    "begin_line": 566,
    "end_line": 567,
    "comment": "/** \n * The order of the series rendering (REVERSE draws the primary series last so that it appears to be on top).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.weight",
    "snippet": "private int weight;",
    "begin_line": 573,
    "end_line": 573,
    "comment": "/** \n * The weight for this plot (only relevant if this is a subplot in a combined plot).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.fixedLegendItems",
    "snippet": "private LegendItemCollection fixedLegendItems;",
    "begin_line": 579,
    "end_line": 579,
    "comment": "/** \n * An optional collection of legend items that can be returned by the getLegendItems() method.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.domainPannable",
    "snippet": "private boolean domainPannable;",
    "begin_line": 587,
    "end_line": 587,
    "comment": "/** \n * A flag that controls whether or not panning is enabled for the domain axis/axes.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.plot.XYPlot",
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "signature": "org.jfree.chart.plot.XYPlot.rangePannable",
    "snippet": "private boolean rangePannable;",
    "begin_line": 595,
    "end_line": 595,
    "comment": "/** \n * A flag that controls whether or not panning is enabled for the range axis/axes.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -828267569428206075L;",
    "begin_line": 146,
    "end_line": 146,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.ZERO",
    "snippet": "public static final Double ZERO \u003d new Double(0.0);",
    "begin_line": 149,
    "end_line": 149,
    "comment": "/** \n * Zero represented as a \u003ccode\u003eDouble\u003c/code\u003e. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_PAINT",
    "snippet": "public static final Paint DEFAULT_PAINT \u003d Color.blue;",
    "begin_line": 152,
    "end_line": 152,
    "comment": "/** \n * The default paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT",
    "snippet": "public static final Paint DEFAULT_OUTLINE_PAINT \u003d Color.gray;",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * The default outline paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_STROKE",
    "snippet": "public static final Stroke DEFAULT_STROKE \u003d new BasicStroke(1.0f);",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * The default stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE",
    "snippet": "public static final Stroke DEFAULT_OUTLINE_STROKE \u003d new BasicStroke(1.0f);",
    "begin_line": 161,
    "end_line": 161,
    "comment": "/** \n * The default outline stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_SHAPE",
    "snippet": "public static final Shape DEFAULT_SHAPE\r\n            \u003d new Rectangle2D.Double(-3.0, -3.0, 6.0, 6.0);",
    "begin_line": 164,
    "end_line": 165,
    "comment": "/** \n * The default shape. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_FONT",
    "snippet": "public static final Font DEFAULT_VALUE_LABEL_FONT \u003d new Font(\"Tahoma\",\r\n            Font.PLAIN, 10);",
    "begin_line": 168,
    "end_line": 169,
    "comment": "/** \n * The default value label font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT",
    "snippet": "public static final Paint DEFAULT_VALUE_LABEL_PAINT \u003d Color.black;",
    "begin_line": 172,
    "end_line": 172,
    "comment": "/** \n * The default value label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleList",
    "snippet": "private BooleanList seriesVisibleList;",
    "begin_line": 175,
    "end_line": 175,
    "comment": "/** \n * A list of flags that controls whether or not each series is visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisible",
    "snippet": "private boolean baseSeriesVisible;",
    "begin_line": 178,
    "end_line": 178,
    "comment": "/** \n * The default visibility for each series. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleInLegendList",
    "snippet": "private BooleanList seriesVisibleInLegendList;",
    "begin_line": 184,
    "end_line": 184,
    "comment": "/** \n * A list of flags that controls whether or not each series is visible in the legend.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisibleInLegend",
    "snippet": "private boolean baseSeriesVisibleInLegend;",
    "begin_line": 187,
    "end_line": 187,
    "comment": "/** \n * The default visibility for each series in the legend. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.paintList",
    "snippet": "private PaintList paintList;",
    "begin_line": 190,
    "end_line": 190,
    "comment": "/** \n * The paint list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesPaint",
    "snippet": "private boolean autoPopulateSeriesPaint;",
    "begin_line": 198,
    "end_line": 198,
    "comment": "/** \n * A flag that controls whether or not the paintList is auto-populated in the  {@link #lookupSeriesPaint(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.basePaint",
    "snippet": "private transient Paint basePaint;",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * The base paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.fillPaintList",
    "snippet": "private PaintList fillPaintList;",
    "begin_line": 204,
    "end_line": 204,
    "comment": "/** \n * The fill paint list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesFillPaint",
    "snippet": "private boolean autoPopulateSeriesFillPaint;",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * A flag that controls whether or not the fillPaintList is auto-populated in the  {@link #lookupSeriesFillPaint(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseFillPaint",
    "snippet": "private transient Paint baseFillPaint;",
    "begin_line": 215,
    "end_line": 215,
    "comment": "/** \n * The base fill paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.outlinePaintList",
    "snippet": "private PaintList outlinePaintList;",
    "begin_line": 218,
    "end_line": 218,
    "comment": "/** \n * The outline paint list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlinePaint",
    "snippet": "private boolean autoPopulateSeriesOutlinePaint;",
    "begin_line": 226,
    "end_line": 226,
    "comment": "/** \n * A flag that controls whether or not the outlinePaintList is auto-populated in the  {@link #lookupSeriesOutlinePaint(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlinePaint",
    "snippet": "private transient Paint baseOutlinePaint;",
    "begin_line": 229,
    "end_line": 229,
    "comment": "/** \n * The base outline paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.strokeList",
    "snippet": "private StrokeList strokeList;",
    "begin_line": 232,
    "end_line": 232,
    "comment": "/** \n * The stroke list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesStroke",
    "snippet": "private boolean autoPopulateSeriesStroke;",
    "begin_line": 240,
    "end_line": 240,
    "comment": "/** \n * A flag that controls whether or not the strokeList is auto-populated in the  {@link #lookupSeriesStroke(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseStroke",
    "snippet": "private transient Stroke baseStroke;",
    "begin_line": 243,
    "end_line": 243,
    "comment": "/** \n * The base stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.outlineStrokeList",
    "snippet": "private StrokeList outlineStrokeList;",
    "begin_line": 246,
    "end_line": 246,
    "comment": "/** \n * The outline stroke list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlineStroke",
    "snippet": "private transient Stroke baseOutlineStroke;",
    "begin_line": 249,
    "end_line": 249,
    "comment": "/** \n * The base outline stroke. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlineStroke",
    "snippet": "private boolean autoPopulateSeriesOutlineStroke;",
    "begin_line": 257,
    "end_line": 257,
    "comment": "/** \n * A flag that controls whether or not the outlineStrokeList is auto-populated in the  {@link #lookupSeriesOutlineStroke(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.shapeList",
    "snippet": "private ShapeList shapeList;",
    "begin_line": 260,
    "end_line": 260,
    "comment": "/** \n * A shape list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesShape",
    "snippet": "private boolean autoPopulateSeriesShape;",
    "begin_line": 268,
    "end_line": 268,
    "comment": "/** \n * A flag that controls whether or not the shapeList is auto-populated in the  {@link #lookupSeriesShape(int)} method.\n * @since 1.0.6\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseShape",
    "snippet": "private transient Shape baseShape;",
    "begin_line": 271,
    "end_line": 271,
    "comment": "/** \n * The base shape. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelsVisibleList",
    "snippet": "private BooleanList itemLabelsVisibleList;",
    "begin_line": 274,
    "end_line": 274,
    "comment": "/** \n * Visibility of the item labels PER series. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelsVisible",
    "snippet": "private boolean baseItemLabelsVisible;",
    "begin_line": 277,
    "end_line": 277,
    "comment": "/** \n * The base item labels visible. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelFontList",
    "snippet": "private ObjectList itemLabelFontList;",
    "begin_line": 280,
    "end_line": 280,
    "comment": "/** \n * The item label font list (one font per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelFont",
    "snippet": "private Font baseItemLabelFont;",
    "begin_line": 283,
    "end_line": 283,
    "comment": "/** \n * The base item label font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelPaintList",
    "snippet": "private PaintList itemLabelPaintList;",
    "begin_line": 286,
    "end_line": 286,
    "comment": "/** \n * The item label paint list (one paint per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelPaint",
    "snippet": "private transient Paint baseItemLabelPaint;",
    "begin_line": 289,
    "end_line": 289,
    "comment": "/** \n * The base item label paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.positiveItemLabelPositionList",
    "snippet": "private ObjectList positiveItemLabelPositionList;",
    "begin_line": 292,
    "end_line": 292,
    "comment": "/** \n * The positive item label position (per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.basePositiveItemLabelPosition",
    "snippet": "private ItemLabelPosition basePositiveItemLabelPosition;",
    "begin_line": 295,
    "end_line": 295,
    "comment": "/** \n * The fallback positive item label position. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.negativeItemLabelPositionList",
    "snippet": "private ObjectList negativeItemLabelPositionList;",
    "begin_line": 298,
    "end_line": 298,
    "comment": "/** \n * The negative item label position (per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseNegativeItemLabelPosition",
    "snippet": "private ItemLabelPosition baseNegativeItemLabelPosition;",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * The fallback negative item label position. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelAnchorOffset",
    "snippet": "private double itemLabelAnchorOffset \u003d 2.0;",
    "begin_line": 304,
    "end_line": 304,
    "comment": "/** \n * The item label anchor offset. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.createEntitiesList",
    "snippet": "private BooleanList createEntitiesList;",
    "begin_line": 310,
    "end_line": 310,
    "comment": "/** \n * Flags that control whether or not entities are generated for each series.  This will be overridden by \u0027createEntities\u0027.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseCreateEntities",
    "snippet": "private boolean baseCreateEntities;",
    "begin_line": 316,
    "end_line": 316,
    "comment": "/** \n * The default flag that controls whether or not entities are generated. This flag is used when both the above flags return null.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.legendShapeList",
    "snippet": "private ShapeList legendShapeList;",
    "begin_line": 323,
    "end_line": 323,
    "comment": "/** \n * The per-series legend shape settings.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseLegendShape",
    "snippet": "private transient Shape baseLegendShape;",
    "begin_line": 331,
    "end_line": 331,
    "comment": "/** \n * The base shape for legend items.  If this is \u003ccode\u003enull\u003c/code\u003e, the series shape will be used.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.treatLegendShapeAsLine",
    "snippet": "private boolean treatLegendShapeAsLine;",
    "begin_line": 339,
    "end_line": 339,
    "comment": "/** \n * A special flag that, if true, will cause the getLegendItem() method to configure the legend shape as if it were a line.\n * @since 1.0.14\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.legendTextFont",
    "snippet": "private ObjectList legendTextFont;",
    "begin_line": 346,
    "end_line": 346,
    "comment": "/** \n * The per-series legend text font.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseLegendTextFont",
    "snippet": "private Font baseLegendTextFont;",
    "begin_line": 353,
    "end_line": 353,
    "comment": "/** \n * The base legend font.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.legendTextPaint",
    "snippet": "private PaintList legendTextPaint;",
    "begin_line": 360,
    "end_line": 360,
    "comment": "/** \n * The per series legend text paint settings.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.baseLegendTextPaint",
    "snippet": "private transient Paint baseLegendTextPaint;",
    "begin_line": 369,
    "end_line": 369,
    "comment": "/** \n * The default paint for the legend text items (if this is \u003ccode\u003enull\u003c/code\u003e, the  {@link LegendTitle} class will determine thetext paint to use.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.dataBoundsIncludesVisibleSeriesOnly",
    "snippet": "private boolean dataBoundsIncludesVisibleSeriesOnly \u003d true;",
    "begin_line": 377,
    "end_line": 377,
    "comment": "/** \n * A flag that controls whether or not the renderer will include the non-visible series when calculating the data bounds.\n * @since 1.0.13\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.defaultEntityRadius",
    "snippet": "private int defaultEntityRadius;",
    "begin_line": 380,
    "end_line": 380,
    "comment": "/** \n * The default radius for the entity \u0027hotspot\u0027 \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.listenerList",
    "snippet": "private transient EventListenerList listenerList;",
    "begin_line": 383,
    "end_line": 383,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.event",
    "snippet": "private transient RendererChangeEvent event;",
    "begin_line": 386,
    "end_line": 386,
    "comment": "/** \n * An event for re-use. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.ADJ",
    "snippet": "private static final double ADJ \u003d Math.cos(Math.PI / 6.0);",
    "begin_line": 2712,
    "end_line": 2712,
    "comment": "/** \n * The adjacent offset. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.OPP",
    "snippet": "private static final double OPP \u003d Math.sin(Math.PI / 6.0);",
    "begin_line": 2715,
    "end_line": 2715,
    "comment": "/** \n * The opposite offset. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 6000649414965887481L;",
    "begin_line": 148,
    "end_line": 148,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.DEFAULT_ITEM_MARGIN",
    "snippet": "public static final double DEFAULT_ITEM_MARGIN \u003d 0.20;",
    "begin_line": 151,
    "end_line": 151,
    "comment": "/** \n * The default item margin percentage. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD",
    "snippet": "public static final double BAR_OUTLINE_WIDTH_THRESHOLD \u003d 3.0;",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * Constant that controls the minimum width before a bar has an outline drawn.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.defaultBarPainter",
    "snippet": "private static BarPainter defaultBarPainter \u003d new GradientBarPainter();",
    "begin_line": 164,
    "end_line": 164,
    "comment": "/** \n * The default bar painter assigned to each new instance of this renderer.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.defaultShadowsVisible",
    "snippet": "private static boolean defaultShadowsVisible \u003d true;",
    "begin_line": 194,
    "end_line": 194,
    "comment": "/** \n * The default value for the initialisation of the shadowsVisible flag.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.itemMargin",
    "snippet": "private double itemMargin;",
    "begin_line": 223,
    "end_line": 223,
    "comment": "/** \n * The margin between items (bars) within a category. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.drawBarOutline",
    "snippet": "private boolean drawBarOutline;",
    "begin_line": 226,
    "end_line": 226,
    "comment": "/** \n * A flag that controls whether or not bar outlines are drawn. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.maximumBarWidth",
    "snippet": "private double maximumBarWidth;",
    "begin_line": 229,
    "end_line": 229,
    "comment": "/** \n * The maximum bar width as a percentage of the available space. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.minimumBarLength",
    "snippet": "private double minimumBarLength;",
    "begin_line": 232,
    "end_line": 232,
    "comment": "/** \n * The minimum bar length (in Java2D units). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.gradientPaintTransformer",
    "snippet": "private GradientPaintTransformer gradientPaintTransformer;",
    "begin_line": 238,
    "end_line": 238,
    "comment": "/** \n * An optional class used to transform gradient paint objects to fit each bar.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.positiveItemLabelPositionFallback",
    "snippet": "private ItemLabelPosition positiveItemLabelPositionFallback;",
    "begin_line": 244,
    "end_line": 244,
    "comment": "/** \n * The fallback position if a positive item label doesn\u0027t fit inside the bar.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.negativeItemLabelPositionFallback",
    "snippet": "private ItemLabelPosition negativeItemLabelPositionFallback;",
    "begin_line": 250,
    "end_line": 250,
    "comment": "/** \n * The fallback position if a negative item label doesn\u0027t fit inside the bar.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.upperClip",
    "snippet": "private double upperClip;",
    "begin_line": 253,
    "end_line": 253,
    "comment": "/** \n * The upper clip (axis) value for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.lowerClip",
    "snippet": "private double lowerClip;",
    "begin_line": 257,
    "end_line": 257,
    "comment": "/** \n * The lower clip (axis) value for the axis. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.base",
    "snippet": "private double base;",
    "begin_line": 261,
    "end_line": 261,
    "comment": "/** \n * The base value for the bars (defaults to 0.0). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.includeBaseInRange",
    "snippet": "private boolean includeBaseInRange;",
    "begin_line": 267,
    "end_line": 267,
    "comment": "/** \n * A flag that controls whether the base value is included in the range returned by the findRangeBounds() method.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.barPainter",
    "snippet": "private BarPainter barPainter;",
    "begin_line": 274,
    "end_line": 274,
    "comment": "/** \n * The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.shadowsVisible",
    "snippet": "private boolean shadowsVisible;",
    "begin_line": 281,
    "end_line": 281,
    "comment": "/** \n * The flag that controls whether or not shadows are drawn for the bars.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.shadowPaint",
    "snippet": "private transient Paint shadowPaint;",
    "begin_line": 288,
    "end_line": 288,
    "comment": "/** \n * The shadow paint.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.shadowXOffset",
    "snippet": "private double shadowXOffset;",
    "begin_line": 295,
    "end_line": 295,
    "comment": "/** \n * The x-offset for the shadow effect.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.shadowYOffset",
    "snippet": "private double shadowYOffset;",
    "begin_line": 302,
    "end_line": 302,
    "comment": "/** \n * The y-offset for the shadow effect.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7686976503536003636L;",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_X_OFFSET",
    "snippet": "public static final double DEFAULT_X_OFFSET \u003d 12.0;",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * The default x-offset for the 3D effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_Y_OFFSET",
    "snippet": "public static final double DEFAULT_Y_OFFSET \u003d 8.0;",
    "begin_line": 161,
    "end_line": 161,
    "comment": "/** \n * The default y-offset for the 3D effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_WALL_PAINT",
    "snippet": "public static final Paint DEFAULT_WALL_PAINT \u003d new Color(0xDD, 0xDD, 0xDD);",
    "begin_line": 164,
    "end_line": 164,
    "comment": "/** \n * The default wall paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.xOffset",
    "snippet": "private double xOffset;",
    "begin_line": 167,
    "end_line": 167,
    "comment": "/** \n * The size of x-offset for the 3D effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.yOffset",
    "snippet": "private double yOffset;",
    "begin_line": 170,
    "end_line": 170,
    "comment": "/** \n * The size of y-offset for the 3D effect. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.wallPaint",
    "snippet": "private transient Paint wallPaint;",
    "begin_line": 173,
    "end_line": 173,
    "comment": "/** \n * The paint used to shade the left and lower 3D wall. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.g1",
    "snippet": "private double g1;",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * The division point between the first and second gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.g2",
    "snippet": "private double g2;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The division point between the second and third gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.g3",
    "snippet": "private double g3;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * The division point between the third and fourth gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 8019124836026607990L;",
    "begin_line": 183,
    "end_line": 183,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.plot",
    "snippet": "private XYPlot plot;",
    "begin_line": 186,
    "end_line": 186,
    "comment": "/** \n * The plot. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.itemLabelGeneratorList",
    "snippet": "private ObjectList itemLabelGeneratorList;",
    "begin_line": 189,
    "end_line": 189,
    "comment": "/** \n * A list of item label generators (one per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseItemLabelGenerator",
    "snippet": "private XYItemLabelGenerator baseItemLabelGenerator;",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * The base item label generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.toolTipGeneratorList",
    "snippet": "private ObjectList toolTipGeneratorList;",
    "begin_line": 195,
    "end_line": 195,
    "comment": "/** \n * A list of tool tip generators (one per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseToolTipGenerator",
    "snippet": "private XYToolTipGenerator baseToolTipGenerator;",
    "begin_line": 198,
    "end_line": 198,
    "comment": "/** \n * The base tool tip generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.urlGeneratorList",
    "snippet": "private ObjectList urlGeneratorList;",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * A list of URL generators (one per series). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseURLGenerator",
    "snippet": "private XYURLGenerator baseURLGenerator;",
    "begin_line": 204,
    "end_line": 204,
    "comment": "/** \n * The URL text generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.backgroundAnnotations",
    "snippet": "private List backgroundAnnotations;",
    "begin_line": 210,
    "end_line": 210,
    "comment": "/** \n * Annotations to be drawn in the background layer (\u0027underneath\u0027 the data items).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.foregroundAnnotations",
    "snippet": "private List foregroundAnnotations;",
    "begin_line": 216,
    "end_line": 216,
    "comment": "/** \n * Annotations to be drawn in the foreground layer (\u0027on top\u0027 of the data items).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemLabelGenerator",
    "snippet": "private XYSeriesLabelGenerator legendItemLabelGenerator;",
    "begin_line": 219,
    "end_line": 219,
    "comment": "/** \n * The legend item label generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemToolTipGenerator",
    "snippet": "private XYSeriesLabelGenerator legendItemToolTipGenerator;",
    "begin_line": 222,
    "end_line": 222,
    "comment": "/** \n * The legend item tool tip generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemURLGenerator",
    "snippet": "private XYSeriesLabelGenerator legendItemURLGenerator;",
    "begin_line": 225,
    "end_line": 225,
    "comment": "/** \n * The legend item URL generator. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.g1",
    "snippet": "private double g1;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The division point between the first and second gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.g2",
    "snippet": "private double g2;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The division point between the second and third gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.g3",
    "snippet": "private double g3;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The division point between the third and fourth gradient regions. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7435246895986425885L;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesLinesVisible",
    "snippet": "private BooleanList seriesLinesVisible;",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * A table of flags that control (per series) whether or not lines are visible.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseLinesVisible",
    "snippet": "private boolean baseLinesVisible;",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * The default value returned by the getLinesVisible() method. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.legendLine",
    "snippet": "private transient Shape legendLine;",
    "begin_line": 130,
    "end_line": 130,
    "comment": "/** \n * The shape that is used to represent a line in the legend. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesShapesVisible",
    "snippet": "private BooleanList seriesShapesVisible;",
    "begin_line": 136,
    "end_line": 136,
    "comment": "/** \n * A table of flags that control (per series) whether or not shapes are visible.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseShapesVisible",
    "snippet": "private boolean baseShapesVisible;",
    "begin_line": 139,
    "end_line": 139,
    "comment": "/** \n * The default value returned by the getShapeVisible() method. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesShapesFilled",
    "snippet": "private BooleanList seriesShapesFilled;",
    "begin_line": 145,
    "end_line": 145,
    "comment": "/** \n * A table of flags that control (per series) whether or not shapes are filled.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseShapesFilled",
    "snippet": "private boolean baseShapesFilled;",
    "begin_line": 148,
    "end_line": 148,
    "comment": "/** \n * The default value returned by the getShapeFilled() method. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawOutlines",
    "snippet": "private boolean drawOutlines;",
    "begin_line": 151,
    "end_line": 151,
    "comment": "/** \n * A flag that controls whether outlines are drawn for shapes. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.useFillPaint",
    "snippet": "private boolean useFillPaint;",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * A flag that controls whether the fill paint is used for filling shapes.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.useOutlinePaint",
    "snippet": "private boolean useOutlinePaint;",
    "begin_line": 163,
    "end_line": 163,
    "comment": "/** \n * A flag that controls whether the outline paint is used for drawing shape outlines.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawSeriesLineAsPath",
    "snippet": "private boolean drawSeriesLineAsPath;",
    "begin_line": 169,
    "end_line": 169,
    "comment": "/** \n * A flag that controls whether or not each series is drawn as a single path.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesPath",
    "snippet": "public GeneralPath seriesPath;",
    "begin_line": 634,
    "end_line": 634,
    "comment": "/** \n * The path for the current series. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.lastPointGood",
    "snippet": "private boolean lastPointGood;",
    "begin_line": 640,
    "end_line": 640,
    "comment": "/** \n * A flag that indicates if the last (x, y) point was \u0027good\u0027 (non-null).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7311560779702649635L;",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.SHAPES",
    "snippet": "public static final int SHAPES \u003d 1;",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * Useful constant for specifying the type of rendering (shapes only). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.AREA",
    "snippet": "public static final int AREA \u003d 2;",
    "begin_line": 98,
    "end_line": 98,
    "comment": "/** \n * Useful constant for specifying the type of rendering (area only). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.AREA_AND_SHAPES",
    "snippet": "public static final int AREA_AND_SHAPES \u003d 3;",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * Useful constant for specifying the type of rendering (area and shapes).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.shapesVisible",
    "snippet": "private boolean shapesVisible;",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * A flag indicating whether or not shapes are drawn at each XY point. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.shapesFilled",
    "snippet": "private boolean shapesFilled;",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * A flag that controls whether or not shapes are filled for ALL series. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.plotArea",
    "snippet": "private boolean plotArea;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * A flag indicating whether or not Area are drawn at each XY point. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.showOutline",
    "snippet": "private boolean showOutline;",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * A flag that controls whether or not the outline is shown. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.pArea",
    "snippet": "protected transient Polygon pArea \u003d null;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * Area of the complete series \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.rangeBase",
    "snippet": "private double rangeBase;",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * The value on the range axis which defines the \u0027lower\u0027 border of the area.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -8918141928884796108L;",
    "begin_line": 110,
    "end_line": 110,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.stepPoint",
    "snippet": "private double stepPoint \u003d 1.0d;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * The factor (from 0.0 to 1.0) that determines the position of the step.\n * @since 1.0.10.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.resources.JFreeChartResources",
    "src_path": "org/jfree/chart/resources/JFreeChartResources.java",
    "signature": "org.jfree.chart.resources.JFreeChartResources.CONTENTS",
    "snippet": "private static final Object[][] CONTENTS \u003d {\r\n        {\"project.name\",      \"JFreeChart\"},\r\n        {\"project.version\",   \"1.2.0-pre\"},\r\n        {\"project.info\",      \"http://www.jfree.org/jfreechart/index.html\"},\r\n        {\"project.copyright\",\r\n         \"(C)opyright 2000-2008, by Object Refinery Limited and Contributors\"}\r\n    };",
    "begin_line": 56,
    "end_line": 62,
    "comment": "/** \n * The resources to be localised. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 8219158940496719660L;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.TOP_LEFT",
    "snippet": "public static final TextAnchor TOP_LEFT \u003d new TextAnchor(\n            \"TextAnchor.TOP_LEFT\");",
    "begin_line": 58,
    "end_line": 59,
    "comment": "/** \n * Top/left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.TOP_CENTER",
    "snippet": "public static final TextAnchor TOP_CENTER \u003d new TextAnchor(\n            \"TextAnchor.TOP_CENTER\");",
    "begin_line": 62,
    "end_line": 63,
    "comment": "/** \n * Top/center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.TOP_RIGHT",
    "snippet": "public static final TextAnchor TOP_RIGHT \u003d new TextAnchor(\n            \"TextAnchor.TOP_RIGHT\");",
    "begin_line": 66,
    "end_line": 67,
    "comment": "/** \n * Top/right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT",
    "snippet": "public static final TextAnchor HALF_ASCENT_LEFT \u003d new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_LEFT\");",
    "begin_line": 70,
    "end_line": 71,
    "comment": "/** \n * Half-ascent/left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER",
    "snippet": "public static final TextAnchor HALF_ASCENT_CENTER \u003d new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_CENTER\");",
    "begin_line": 74,
    "end_line": 75,
    "comment": "/** \n * Half-ascent/center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT",
    "snippet": "public static final TextAnchor HALF_ASCENT_RIGHT \u003d new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_RIGHT\");",
    "begin_line": 78,
    "end_line": 79,
    "comment": "/** \n * Half-ascent/right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.CENTER_LEFT",
    "snippet": "public static final TextAnchor CENTER_LEFT \u003d new TextAnchor(\n            \"TextAnchor.CENTER_LEFT\");",
    "begin_line": 82,
    "end_line": 83,
    "comment": "/** \n * Middle/left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.CENTER",
    "snippet": "public static final TextAnchor CENTER \u003d new TextAnchor(\"TextAnchor.CENTER\");",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * Middle/center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.CENTER_RIGHT",
    "snippet": "public static final TextAnchor CENTER_RIGHT \u003d new TextAnchor(\n            \"TextAnchor.CENTER_RIGHT\");",
    "begin_line": 89,
    "end_line": 90,
    "comment": "/** \n * Middle/right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BASELINE_LEFT",
    "snippet": "public static final TextAnchor BASELINE_LEFT \u003d new TextAnchor(\n            \"TextAnchor.BASELINE_LEFT\");",
    "begin_line": 93,
    "end_line": 94,
    "comment": "/** \n * Baseline/left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BASELINE_CENTER",
    "snippet": "public static final TextAnchor BASELINE_CENTER \u003d new TextAnchor(\n            \"TextAnchor.BASELINE_CENTER\");",
    "begin_line": 97,
    "end_line": 98,
    "comment": "/** \n * Baseline/center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BASELINE_RIGHT",
    "snippet": "public static final TextAnchor BASELINE_RIGHT \u003d new TextAnchor(\n            \"TextAnchor.BASELINE_RIGHT\");",
    "begin_line": 101,
    "end_line": 102,
    "comment": "/** \n * Baseline/right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_LEFT",
    "snippet": "public static final TextAnchor BOTTOM_LEFT \u003d new TextAnchor(\n            \"TextAnchor.BOTTOM_LEFT\");",
    "begin_line": 105,
    "end_line": 106,
    "comment": "/** \n * Bottom/left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_CENTER",
    "snippet": "public static final TextAnchor BOTTOM_CENTER \u003d new TextAnchor(\n            \"TextAnchor.BOTTOM_CENTER\");",
    "begin_line": 109,
    "end_line": 110,
    "comment": "/** \n * Bottom/center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT",
    "snippet": "public static final TextAnchor BOTTOM_RIGHT \u003d new TextAnchor(\n            \"TextAnchor.BOTTOM_RIGHT\");",
    "begin_line": 113,
    "end_line": 114,
    "comment": "/** \n * Bottom/right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.text.TextAnchor",
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "signature": "org.jfree.chart.text.TextAnchor.name",
    "snippet": "private String name;",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2644010518533854633L;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT",
    "snippet": "public static final Font DEFAULT_ITEM_FONT \u003d new Font(\"Tahoma\", Font.PLAIN,\r\n            12);",
    "begin_line": 115,
    "end_line": 116,
    "comment": "/** \n * The default item font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT",
    "snippet": "public static final Paint DEFAULT_ITEM_PAINT \u003d Color.black;",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * The default item paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.sources",
    "snippet": "private LegendItemSource[] sources;",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * The sources for legend items. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.backgroundPaint",
    "snippet": "private transient Paint backgroundPaint;",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * The background paint (possibly \u003ccode\u003enull\u003c/code\u003e). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicEdge",
    "snippet": "private RectangleEdge legendItemGraphicEdge;",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * The edge for the legend item graphic relative to the text. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicAnchor",
    "snippet": "private RectangleAnchor legendItemGraphicAnchor;",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * The anchor point for the legend item graphic. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicLocation",
    "snippet": "private RectangleAnchor legendItemGraphicLocation;",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * The legend item graphic location. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicPadding",
    "snippet": "private RectangleInsets legendItemGraphicPadding;",
    "begin_line": 137,
    "end_line": 137,
    "comment": "/** \n * The padding for the legend item graphic. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.itemFont",
    "snippet": "private Font itemFont;",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * The item font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.itemPaint",
    "snippet": "private transient Paint itemPaint;",
    "begin_line": 143,
    "end_line": 143,
    "comment": "/** \n * The item paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.itemLabelPadding",
    "snippet": "private RectangleInsets itemLabelPadding;",
    "begin_line": 146,
    "end_line": 146,
    "comment": "/** \n * The padding for the item labels. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.items",
    "snippet": "private BlockContainer items;",
    "begin_line": 151,
    "end_line": 151,
    "comment": "/** \n * A container that holds and displays the legend items.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.hLayout",
    "snippet": "private Arrangement hLayout;",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * The layout for the legend when it is positioned at the top or bottom of the chart.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.vLayout",
    "snippet": "private Arrangement vLayout;",
    "begin_line": 163,
    "end_line": 163,
    "comment": "/** \n * The layout for the legend when it is positioned at the left or right of the chart.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.LegendTitle",
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "signature": "org.jfree.chart.title.LegendTitle.wrapper",
    "snippet": "private BlockContainer wrapper;",
    "begin_line": 169,
    "end_line": 169,
    "comment": "/** \n * An optional container for wrapping the legend items (allows for adding a title or other text to the legend).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 8372008692127477443L;",
    "begin_line": 130,
    "end_line": 130,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.DEFAULT_FONT",
    "snippet": "public static final Font DEFAULT_FONT \u003d new Font(\"Tahoma\", Font.BOLD,\r\n            12);",
    "begin_line": 133,
    "end_line": 134,
    "comment": "/** \n * The default font. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT",
    "snippet": "public static final Paint DEFAULT_TEXT_PAINT \u003d Color.black;",
    "begin_line": 137,
    "end_line": 137,
    "comment": "/** \n * The default text color. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.text",
    "snippet": "private String text;",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * The title text. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.font",
    "snippet": "private Font font;",
    "begin_line": 143,
    "end_line": 143,
    "comment": "/** \n * The font used to display the title. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.textAlignment",
    "snippet": "private HorizontalAlignment textAlignment;",
    "begin_line": 146,
    "end_line": 146,
    "comment": "/** \n * The text alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.paint",
    "snippet": "private transient Paint paint;",
    "begin_line": 149,
    "end_line": 149,
    "comment": "/** \n * The paint used to display the title text. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.backgroundPaint",
    "snippet": "private transient Paint backgroundPaint;",
    "begin_line": 152,
    "end_line": 152,
    "comment": "/** \n * The background paint. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.toolTipText",
    "snippet": "private String toolTipText;",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * The tool tip text (can be \u003ccode\u003enull\u003c/code\u003e). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.urlText",
    "snippet": "private String urlText;",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * The URL text (can be \u003ccode\u003enull\u003c/code\u003e). \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.content",
    "snippet": "private TextBlock content;",
    "begin_line": 161,
    "end_line": 161,
    "comment": "/** \n * The content. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.expandToFitSpace",
    "snippet": "private boolean expandToFitSpace \u003d false;",
    "begin_line": 167,
    "end_line": 167,
    "comment": "/** \n * A flag that controls whether the title expands to fit the available space..\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.TextTitle",
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "signature": "org.jfree.chart.title.TextTitle.maximumLinesToDisplay",
    "snippet": "private int maximumLinesToDisplay \u003d Integer.MAX_VALUE;",
    "begin_line": 174,
    "end_line": 174,
    "comment": "/** \n * The maximum number of lines to display.\n * @since 1.0.10\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -6675162505277817221L;",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.DEFAULT_POSITION",
    "snippet": "public static final RectangleEdge DEFAULT_POSITION \u003d RectangleEdge.TOP;",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * The default title position. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT",
    "snippet": "public static final HorizontalAlignment\r\n            DEFAULT_HORIZONTAL_ALIGNMENT \u003d HorizontalAlignment.CENTER;",
    "begin_line": 100,
    "end_line": 101,
    "comment": "/** \n * The default horizontal alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT",
    "snippet": "public static final VerticalAlignment\r\n            DEFAULT_VERTICAL_ALIGNMENT \u003d VerticalAlignment.CENTER;",
    "begin_line": 104,
    "end_line": 105,
    "comment": "/** \n * The default vertical alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.DEFAULT_PADDING",
    "snippet": "public static final RectangleInsets DEFAULT_PADDING \u003d new RectangleInsets(\r\n            1, 1, 1, 1);",
    "begin_line": 108,
    "end_line": 109,
    "comment": "/** \n * Default title padding. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.visible",
    "snippet": "public boolean visible;",
    "begin_line": 116,
    "end_line": 116,
    "comment": "/** \n * A flag that controls whether or not the title is visible.\n * @since 1.0.11\n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.position",
    "snippet": "private RectangleEdge position;",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * The title position. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.horizontalAlignment",
    "snippet": "private HorizontalAlignment horizontalAlignment;",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * The horizontal alignment of the title content. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.verticalAlignment",
    "snippet": "private VerticalAlignment verticalAlignment;",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * The vertical alignment of the title content. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.listenerList",
    "snippet": "private transient EventListenerList listenerList;",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.title.Title",
    "src_path": "org/jfree/chart/title/Title.java",
    "signature": "org.jfree.chart.title.Title.notify",
    "snippet": "private boolean notify;",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * A flag that can be used to temporarily disable the listener mechanism.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.libraryClass",
    "snippet": "private String libraryClass;",
    "begin_line": 59,
    "end_line": 59,
    "comment": ""
  },
  {
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.library",
    "snippet": "private transient Library library;",
    "begin_line": 60,
    "end_line": 60,
    "comment": ""
  },
  {
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.copyright",
    "snippet": "private String copyright;",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * The project copyright statement. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.libraries",
    "snippet": "private List libraries;",
    "begin_line": 138,
    "end_line": 138,
    "comment": "/** \n * A list of libraries used by the project. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.optionalLibraries",
    "snippet": "private List optionalLibraries;",
    "begin_line": 140,
    "end_line": 140,
    "comment": ""
  },
  {
    "class_name": "org.jfree.chart.ui.Contributor",
    "src_path": "org/jfree/chart/ui/Contributor.java",
    "signature": "org.jfree.chart.ui.Contributor.name",
    "snippet": "private String name;",
    "begin_line": 52,
    "end_line": 52,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Contributor",
    "src_path": "org/jfree/chart/ui/Contributor.java",
    "signature": "org.jfree.chart.ui.Contributor.email",
    "snippet": "private String email;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * The e-mail address. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Library",
    "src_path": "org/jfree/chart/ui/Library.java",
    "signature": "org.jfree.chart.ui.Library.name",
    "snippet": "private String name;",
    "begin_line": 52,
    "end_line": 52,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Library",
    "src_path": "org/jfree/chart/ui/Library.java",
    "signature": "org.jfree.chart.ui.Library.version",
    "snippet": "private String version;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * The version. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Library",
    "src_path": "org/jfree/chart/ui/Library.java",
    "signature": "org.jfree.chart.ui.Library.licenceName",
    "snippet": "private String licenceName;",
    "begin_line": 58,
    "end_line": 58,
    "comment": "/** \n * The licenceName. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Library",
    "src_path": "org/jfree/chart/ui/Library.java",
    "signature": "org.jfree.chart.ui.Library.info",
    "snippet": "private String info;",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * The version. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Licences",
    "src_path": "org/jfree/chart/ui/Licences.java",
    "signature": "org.jfree.chart.ui.Licences.GPL",
    "snippet": "public static final String GPL \u003d \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2, June 1991\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 675 Mass Ave, Cambridge, \"\n        + \"MA 02139, USA. Everyone is permitted to copy and distribute verbatim copies of this \"\n        + \"license document, but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public License is intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users. This General Public License applies to most of the Free Software \"\n        + \"Foundation\u0027s software and to any other program whose authors commit to using it. (Some \"\n        + \"other Free Software Foundation software is covered by the GNU Library General Public \"\n        + \"License instead.) You can apply it to your programs, too.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom, not price. Our General \"\n        + \"Public Licenses are designed to make sure that you have the freedom to distribute \"\n        + \"copies of free software (and charge for this service if you wish), that you receive \"\n        + \"source code or can get it if you want it, that you can change the software or use \"\n        + \"pieces of it in new free programs; and that you know you can do these things.\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid anyone to deny you \"\n        + \"these rights or to ask you to surrender the rights. These restrictions translate to \"\n        + \"certain responsibilities for you if you distribute copies of the software, or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of such a program, whether gratis or for a fee, \"\n        + \"you must give the recipients all the rights that you have. You must make sure that \"\n        + \"they, too, receive or can get the source code. And you must show them these terms so \"\n        + \"they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with two steps: (1) copyright the software, and (2) offer you \"\n        + \"this license which gives you legal permission to copy, distribute and/or modify the \"\n        + \"software.\\n\"\n        + \"\\n\"\n        + \"Also, for each author\u0027s protection and ours, we want to make certain that everyone \"\n        + \"understands that there is no warranty for this free software. If the software is \"\n        + \"modified by someone else and passed on, we want its recipients to know that what they \"\n        + \"have is not the original, so that any problems introduced by others will not reflect \"\n        + \"on the original authors\u0027 reputations.\\n\"\n        + \"\\n\"\n        + \"Finally, any free program is threatened constantly by software patents. We wish to \"\n        + \"avoid the danger that redistributors of a free program will individually obtain patent \"\n        + \"licenses, in effect making the program proprietary. To prevent this, we have made it \"\n        + \"clear that any patent must be licensed for everyone\u0027s free use or not licensed at \"\n        + \"all.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow.\\n\"\n        + \"\\n\"\n        + \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License applies to any program or other work which contains a notice placed by \"\n        + \"the copyright holder saying it may be distributed under the terms of this General \"\n        + \"Public License. The \\\"Program\\\", below, refers to any such program or work, and a \"\n        + \"\\\"work based on the Program\\\" means either the Program or any derivative work under \"\n        + \"copyright law: that is to say, a work containing the Program or a portion of it, \"\n        + \"either verbatim or with modifications and/or translated into another language. \"\n        + \"(Hereinafter, translation is included without limitation in the term \"\n        + \"\\\"modification\\\".) Each licensee is addressed as \\\"you\\\".\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running the Program is not restricted, \"\n        + \"and the output from the Program is covered only if its contents constitute a work \"\n        + \"based on the Program (independent of having been made by running the Program). Whether \"\n        + \"that is true depends on what the Program does.\\n\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Program\u0027s source code as you \"\n        + \"receive it, in any medium, provided that you conspicuously and appropriately publish \"\n        + \"on each copy an appropriate copyright notice and disclaimer of warranty; keep intact \"\n        + \"all the notices that refer to this License and to the absence of any warranty; and \"\n        + \"give any other recipients of the Program a copy of this License along with the \"\n        + \"Program.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Program or any portion of it, thus \"\n        + \"forming a work based on the Program, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"a) You must cause the modified files to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"\\n\"\n        + \"b) You must cause any work that you distribute or publish, that in whole or in part \"\n        + \"contains or is derived from the Program or any part thereof, to be licensed as a whole \"\n        + \"at no charge to all third parties under the terms of this License.\\n\"\n        + \"\\n\"\n        + \"c) If the modified program normally reads commands interactively when run, you must \"\n        + \"cause it, when started running for such interactive use in the most ordinary way, to \"\n        + \"print or display an announcement including an appropriate copyright notice and a \"\n        + \"notice that there is no warranty (or else, saying that you provide a warranty) and \"\n        + \"that users may redistribute the program under these conditions, and telling the user \"\n        + \"how to view a copy of this License. (Exception: if the Program itself is interactive \"\n        + \"but does not normally print such an announcement, your work based on the Program is \"\n        + \"not required to print an announcement.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Program, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Program, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Program.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Program with the \"\n        + \"Program (or with a work based on the Program) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may copy and distribute the Program (or a work based on it, under Section 2) in \"\n        + \"object code or executable form under the terms of Sections 1 and 2 above provided that \"\n        + \"you also do one of the following:\\n\"\n        + \"\\n\"\n        + \"a) Accompany it with the complete corresponding machine-readable source code, which \"\n        + \"must be distributed under the terms of Sections 1 and 2 above on a medium customarily \"\n        + \"used for software interchange; or,\\n\"\n        + \"b) Accompany it with a written offer, valid for at least three years, to give any \"\n        + \"third party, for a charge no more than your cost of physically performing source \"\n        + \"distribution, a complete machine-readable copy of the corresponding source code, to be \"\n        + \"distributed under the terms of Sections 1 and 2 above on a medium customarily used for \"\n        + \"software interchange; or,\\n\"\n        + \"c) Accompany it with the information you received as to the offer to distribute \"\n        + \"corresponding source code. (This alternative is allowed only for noncommercial \"\n        + \"distribution and only if you received the program in object code or executable form \"\n        + \"with such an offer, in accord with Subsection b above.)\\n\"\n        + \"\\n\"\n        + \"The source code for a work means the preferred form of the work for making \"\n        + \"modifications to it. For an executable work, complete source code means all the source \"\n        + \"code for all modules it contains, plus any associated interface definition files, plus \"\n        + \"the scripts used to control compilation and installation of the executable. However, \"\n        + \"as a special exception, the source code distributed need not include anything that is \"\n        + \"normally distributed (in either source or binary form) with the major components \"\n        + \"(compiler, kernel, and so on) of the operating system on which the executable runs, \"\n        + \"unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"If distribution of executable or object code is made by offering access to copy from a \"\n        + \"designated place, then offering equivalent access to copy the source code from the \"\n        + \"same place counts as distribution of the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"4. You may not copy, modify, sublicense, or distribute the Program except as expressly \"\n        + \"provided under this License. Any attempt otherwise to copy, modify, sublicense or \"\n        + \"distribute the Program is void, and will automatically terminate your rights under \"\n        + \"this License. However, parties who have received copies, or rights, from you under \"\n        + \"this License will not have their licenses terminated so long as such parties remain in \"\n        + \"full compliance.\"\n        + \"\\n\"\n        + \"5. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Program or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Program (or any work based on the \"\n        + \"Program), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Program or works based on it.\\n\"\n        + \"\\n\"\n        + \"6. Each time you redistribute the Program (or any work based on the Program), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute or modify the Program subject to these terms and conditions. You may not \"\n        + \"impose any further restrictions on the recipients\u0027 exercise of the rights granted \"\n        + \"herein. You are not responsible for enforcing compliance by third parties to this \"\n        + \"License.\"\n        + \"\\n\"\n        + \"7. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Program at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Program by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Program.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system, \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"8. If the distribution and/or use of the Program is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Program under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"9. The Free Software Foundation may publish revised and/or new versions of the General \"\n        + \"Public License from time to time. Such new versions will be similar in spirit to the \"\n        + \"present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Program specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Program does not \"\n        + \"specify a version number of this License, you may choose any version ever published by \"\n        + \"the Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"10. If you wish to incorporate parts of the Program into other free programs whose \"\n        + \"distribution conditions are different, write to the author to ask for permission. For \"\n        + \"software which is copyrighted by the Free Software Foundation, write to the Free \"\n        + \"Software Foundation; we sometimes make exceptions for this. Our decision will be \"\n        + \"guided by the two goals of preserving the free status of all derivatives of our free \"\n        + \"software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD \"\n        + \"THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE \"\n        + \"WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Programs\\n\"\n        + \"\\n\"\n        + \"If you develop a new program, and you want it to be of the greatest possible use to \"\n        + \"the public, the best way to achieve this is to make it free software which everyone \"\n        + \"can redistribute and change under these terms.\\n\"\n        + \"\\n\"\n        + \"To do so, attach the following notices to the program.  It is safest to attach them to \"\n        + \"the start of each source file to most effectively convey the exclusion of warranty; \"\n        + \"and each file should have at least the \\\"copyright\\\" line and a pointer to where the \"\n        + \"full notice is found.\\n\"\n        + \"\\n\"\n        + \"\u003cone line to give the program\u0027s name and a brief idea of what it does.\u003e\\n\"\n        + \"Copyright (C) \u003cyear\u003e  \u003cname of author\u003e\\n\"\n        + \"\\n\"\n        + \"This program is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU General Public License as published by the Free Software Foundation; \"\n        + \"either version 2 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This program is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU General Public License along with this \"\n        + \"program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite \"\n        + \"330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"If the program is interactive, make it output a short notice like this when it starts \"\n        + \"in an interactive mode:\\n\"\n        + \"\\n\"\n        + \"Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with \"\n        + \"ABSOLUTELY NO WARRANTY; for details type `show w\u0027.\\n\"\n        + \"This is free software, and you are welcome to redistribute it under certain \"\n        + \"conditions; type `show c\u0027 for details.\\n\"\n        + \"\\n\"\n        + \"The hypothetical commands `show w\u0027 and `show c\u0027 should show the appropriate parts of \"\n        + \"the General Public License.  Of course, the commands you use may be called something \"\n        + \"other than `show w\u0027 and `show c\u0027; they could even be mouse-clicks or menu items\"\n        + \"--whatever suits your program.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision\u0027 \"\n        + \"(which makes passes at compilers) written by James Hacker.\\n\"\n        + \"\\n\"\n        + \"\u003csignature of Ty Coon\u003e, 1 April 1989\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"This General Public License does not permit incorporating your program into \"\n        + \"proprietary programs.  If your program is a subroutine library, you may consider it \"\n        + \"more useful to permit linking proprietary applications with the library.  If this is \"\n        + \"what you want to do, use the GNU Library General Public License instead of this \"\n        + \"License.\\n\";",
    "begin_line": 55,
    "end_line": 354,
    "comment": "/** \n * The GNU General Public Licence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Licences",
    "src_path": "org/jfree/chart/ui/Licences.java",
    "signature": "org.jfree.chart.ui.Licences.LGPL",
    "snippet": "public static final String LGPL \u003d \"GNU LESSER GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2.1, February 1999\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1991, 1999 Free Software Foundation, Inc.\\n\"\n        + \"59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"Everyone is permitted to copy and distribute verbatim copies of this license document, \"\n        + \"but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"[This is the first released version of the Lesser GPL.  It also counts as the \"\n        + \"successor of the GNU Library Public License, version 2, hence the version number \"\n        + \"2.1.]\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public Licenses are intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users.\\n\"\n        + \"\\n\"\n        + \"This license, the Lesser General Public License, applies to some specially designated \"\n        + \"software packages--typically libraries--of the Free Software Foundation and other \"\n        + \"authors who decide to use it. You can use it too, but we suggest you first think \"\n        + \"carefully about whether this license or the ordinary General Public License is the \"\n        + \"better strategy to use in any particular case, based on the explanations below.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom of use, not price. Our \"\n        + \"General Public Licenses are designed to make sure that you have the freedom to \"\n        + \"distribute copies of free software (and charge for this service if you wish); that you \"\n        + \"receive source code or can get it if you want it; that you can change the software and \"\n        + \"use pieces of it in new free programs; and that you are informed that you can do these \"\n        + \"things.\\n\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid distributors to deny \"\n        + \"you these rights or to ask you to surrender these rights. These restrictions translate \"\n        + \"to certain responsibilities for you if you distribute copies of the library or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of the library, whether gratis or for a fee, you \"\n        + \"must give the recipients all the rights that we gave you. You must make sure that \"\n        + \"they, too, receive or can get the source code. If you link other code with the \"\n        + \"library, you must provide complete object files to the recipients, so that they can \"\n        + \"relink them with the library after making changes to the library and recompiling it. \"\n        + \"And you must show them these terms so they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with a two-step method: (1) we copyright the library, and (2) \"\n        + \"we offer you this license, which gives you legal permission to copy, distribute and/or \"\n        + \"modify the library.\\n\"\n        + \"\\n\"\n        + \"To protect each distributor, we want to make it very clear that there is no warranty \"\n        + \"for the free library. Also, if the library is modified by someone else and passed on, \"\n        + \"the recipients should know that what they have is not the original version, so that \"\n        + \"the original author\u0027s reputation will not be affected by problems that might be \"\n        + \"introduced by others.\\n\"\n        + \"\\n\"\n        + \"Finally, software patents pose a constant threat to the existence of any free program. \"\n        + \"We wish to make sure that a company cannot effectively restrict the users of a free \"\n        + \"program by obtaining a restrictive license from a patent holder. Therefore, we insist \"\n        + \"that any patent license obtained for a version of the library must be consistent with \"\n        + \"the full freedom of use specified in this license.\\n\"\n        + \"\\n\"\n        + \"Most GNU software, including some libraries, is covered by the ordinary GNU General \"\n        + \"Public License. This license, the GNU Lesser General Public License, applies to \"\n        + \"certain designated libraries, and is quite different from the ordinary General Public \"\n        + \"License. We use this license for certain libraries in order to permit linking those \"\n        + \"libraries into non-free programs.\\n\"\n        + \"\\n\"\n        + \"When a program is linked with a library, whether statically or using a shared library, \"\n        + \"the combination of the two is legally speaking a combined work, a derivative of the \"\n        + \"original library. The ordinary General Public License therefore permits such linking \"\n        + \"only if the entire combination fits its criteria of freedom. The Lesser General Public \"\n        + \"License permits more lax criteria for linking other code with the library.\\n\"\n        + \"\\n\"\n        + \"We call this license the \\\"Lesser\\\" General Public License because it does Less to \"\n        + \"protect the user\u0027s freedom than the ordinary General Public License. It also provides \"\n        + \"other free software developers Less of an advantage over competing non-free programs. \"\n        + \"These disadvantages are the reason we use the ordinary General Public License for many \"\n        + \"libraries. However, the Lesser license provides advantages in certain special \"\n        + \"circumstances.\\n\"\n        + \"\\n\"\n        + \"For example, on rare occasions, there may be a special need to encourage the widest \"\n        + \"possible use of a certain library, so that it becomes a de-facto standard. To achieve \"\n        + \"this, non-free programs must be allowed to use the library. A more frequent case is \"\n        + \"that a free library does the same job as widely used non-free libraries. In this case, \"\n        + \"there is little to gain by limiting the free library to free software only, so we use \"\n        + \"the Lesser General Public License.\\n\"\n        + \"\\n\"\n        + \"In other cases, permission to use a particular library in non-free programs enables a \"\n        + \"greater number of people to use a large body of free software. For example, permission \"\n        + \"to use the GNU C Library in non-free programs enables many more people to use the \"\n        + \"whole GNU operating system, as well as its variant, the GNU/Linux operating system.\\n\"\n        + \"\\n\"\n        + \"Although the Lesser General Public License is Less protective of the users\u0027 freedom, \"\n        + \"it does ensure that the user of a program that is linked with the Library has the \"\n        + \"freedom and the wherewithal to run that program using a modified version of the \"\n        + \"Library.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow. \"\n        + \"Pay close attention to the difference between a \\\"work based on the library\\\" and a \"\n        + \"\\\"work that uses the library\\\". The former contains code derived from the library, \"\n        + \"whereas the latter must be combined with the library in order to run.\\n\"\n        + \"\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License Agreement applies to any software library or other program which \"\n        + \"contains a notice placed by the copyright holder or other authorized party saying it \"\n        + \"may be distributed under the terms of this Lesser General Public License (also called \"\n        + \"\\\"this License\\\"). Each licensee is addressed as \\\"you\\\".\"\n        + \"\\n\"\n        + \"A \\\"library\\\" means a collection of software functions and/or data prepared so as to \"\n        + \"be conveniently linked with application programs (which use some of those functions \"\n        + \"and data) to form executables.\\n\"\n        + \"\\n\"\n        + \"The \\\"Library\\\", below, refers to any such software library or work which has been \"\n        + \"distributed under these terms. A \\\"work based on the Library\\\" means either the \"\n        + \"Library or any derivative work under copyright law: that is to say, a work containing \"\n        + \"the Library or a portion of it, either verbatim or with modifications and/or \"\n        + \"translated straightforwardly into another language. (Hereinafter, translation is \"\n        + \"included without limitation in the term \\\"modification\\\".)\\n\"\n        + \"\\n\"\n        + \"\\\"Source code\\\" for a work means the preferred form of the work for making \"\n        + \"modifications to it. For a library, complete source code means all the source code for \"\n        + \"all modules it contains, plus any associated interface definition files, plus the \"\n        + \"scripts used to control compilation and installation of the library.\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running a program using the Library is \"\n        + \"not restricted, and output from such a program is covered only if its contents \"\n        + \"constitute a work based on the Library (independent of the use of the Library in a \"\n        + \"tool for writing it). Whether that is true depends on what the Library does and what \"\n        + \"the program that uses the Library does.\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Library\u0027s complete source code \"\n        + \"as you receive it, in any medium, provided that you conspicuously and appropriately \"\n        + \"publish on each copy an appropriate copyright notice and disclaimer of warranty; keep \"\n        + \"intact all the notices that refer to this License and to the absence of any warranty; \"\n        + \"and distribute a copy of this License along with the Library.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Library or any portion of it, thus \"\n        + \"forming a work based on the Library, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"*    a) The modified work must itself be a software library.\\n\"\n        + \"*    b) You must cause the files modified to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"*    c) You must cause the whole of the work to be licensed at no charge to all third \"\n        + \"parties under the terms of this License.\\n\"\n        + \"*    d) If a facility in the modified Library refers to a function or a table of data \"\n        + \"to be supplied by an application program that uses the facility, other than as an \"\n        + \"argument passed when the facility is invoked, then you must make a good faith effort \"\n        + \"to ensure that, in the event an application does not supply such function or table, \"\n        + \"the facility still operates, and performs whatever part of its purpose remains \"\n        + \"meaningful.\\n\"\n        + \"\\n\"\n        + \"(For example, a function in a library to compute square roots has a purpose that is \"\n        + \"entirely well-defined independent of the application. Therefore, Subsection 2d \"\n        + \"requires that any application-supplied function or table used by this function must be \"\n        + \"optional: if the application does not supply it, the square root function must still \"\n        + \"compute square roots.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Library, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Library, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Library.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Library with the \"\n        + \"Library (or with a work based on the Library) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may opt to apply the terms of the ordinary GNU General Public License instead \"\n        + \"of this License to a given copy of the Library. To do this, you must alter all the \"\n        + \"notices that refer to this License, so that they refer to the ordinary GNU General \"\n        + \"Public License, version 2, instead of to this License. (If a newer version than \"\n        + \"version 2 of the ordinary GNU General Public License has appeared, then you can \"\n        + \"specify that version instead if you wish.) Do not make any other change in these \"\n        + \"notices.\\n\"\n        + \"\\n\"\n        + \"Once this change is made in a given copy, it is irreversible for that copy, so the \"\n        + \"ordinary GNU General Public License applies to all subsequent copies and derivative \"\n        + \"works made from that copy.\\n\"\n        + \"\\n\"\n        + \"This option is useful when you wish to copy part of the code of the Library into a \"\n        + \"program that is not a library.\\n\"\n        + \"\\n\"\n        + \"4. You may copy and distribute the Library (or a portion or derivative of it, under \"\n        + \"Section 2) in object code or executable form under the terms of Sections 1 and 2 above \"\n        + \"provided that you accompany it with the complete corresponding machine-readable source \"\n        + \"code, which must be distributed under the terms of Sections 1 and 2 above on a medium \"\n        + \"customarily used for software interchange.\\n\"\n        + \"\\n\"\n        + \"If distribution of object code is made by offering access to copy from a designated \"\n        + \"place, then offering equivalent access to copy the source code from the same place \"\n        + \"satisfies the requirement to distribute the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"5. A program that contains no derivative of any portion of the Library, but is \"\n        + \"designed to work with the Library by being compiled or linked with it, is called a \"\n        + \"\\\"work that uses the Library\\\". Such a work, in isolation, is not a derivative work of \"\n        + \"the Library, and therefore falls outside the scope of this License.\\n\"\n        + \"\\n\"\n        + \"However, linking a \\\"work that uses the Library\\\" with the Library creates an \"\n        + \"executable that is a derivative of the Library (because it contains portions of the \"\n        + \"Library), rather than a \\\"work that uses the library\\\". The executable is therefore \"\n        + \"covered by this License. Section 6 states terms for distribution of such executables.\\n\"\n        + \"\\n\"\n        + \"When a \\\"work that uses the Library\\\" uses material from a header file that is part of \"\n        + \"the Library, the object code for the work may be a derivative work of the Library even \"\n        + \"though the source code is not. Whether this is true is especially significant if the \"\n        + \"work can be linked without the Library, or if the work is itself a library. The \"\n        + \"threshold for this to be true is not precisely defined by law.\\n\"\n        + \"\\n\"\n        + \"If such an object file uses only numerical parameters, data structure layouts and \"\n        + \"accessors, and small macros and small inline functions (ten lines or less in length), \"\n        + \"then the use of the object file is unrestricted, regardless of whether it is legally a \"\n        + \"derivative work. (Executables containing this object code plus portions of the Library \"\n        + \"will still fall under Section 6.)\\n\"\n        + \"\\n\"\n        + \"Otherwise, if the work is a derivative of the Library, you may distribute the object \"\n        + \"code for the work under the terms of Section 6. Any executables containing that work \"\n        + \"also fall under Section 6, whether or not they are linked directly with the Library \"\n        + \"itself.\\n\"\n        + \"\\n\"\n        + \"6. As an exception to the Sections above, you may also combine or link a \\\"work that \"\n        + \"uses the Library\\\" with the Library to produce a work containing portions of the \"\n        + \"Library, and distribute that work under terms of your choice, provided that the terms \"\n        + \"permit modification of the work for the customer\u0027s own use and reverse engineering for \"\n        + \"debugging such modifications.\\n\"\n        + \"\\n\"\n        + \"You must give prominent notice with each copy of the work that the Library is used in \"\n        + \"it and that the Library and its use are covered by this License. You must supply a \"\n        + \"copy of this License. If the work during execution displays copyright notices, you \"\n        + \"must include the copyright notice for the Library among them, as well as a reference \"\n        + \"directing the user to the copy of this License. Also, you must do one of these \"\n        + \"things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the work with the complete corresponding machine-readable source \"\n        + \"code for the Library including whatever changes were used in the work (which must be \"\n        + \"distributed under Sections 1 and 2 above); and, if the work is an executable linked \"\n        + \"with the Library, with the complete machine-readable \\\"work that uses the Library\\\", \"\n        + \"as object code and/or source code, so that the user can modify the Library and then \"\n        + \"relink to produce a modified executable containing the modified Library. (It is \"\n        + \"understood that the user who changes the contents of definitions files in the Library \"\n        + \"will not necessarily be able to recompile the application to use the modified \"\n        + \"definitions.)\\n\"\n        + \"*    b) Use a suitable shared library mechanism for linking with the Library. A \"\n        + \"suitable mechanism is one that (1) uses at run time a copy of the library already \"\n        + \"present on the user\u0027s computer system, rather than copying library functions into the \"\n        + \"executable, and (2) will operate properly with a modified version of the library, if \"\n        + \"the user installs one, as long as the modified version is interface-compatible with \"\n        + \"the version that the work was made with.\\n\"\n        + \"*    c) Accompany the work with a written offer, valid for at least three years, to \"\n        + \"give the same user the materials specified in Subsection 6a, above, for a charge no \"\n        + \"more than the cost of performing this distribution.\\n\"\n        + \"*    d) If distribution of the work is made by offering access to copy from a \"\n        + \"designated place, offer equivalent access to copy the above specified materials from \"\n        + \"the same place.\\n\"\n        + \"*    e) Verify that the user has already received a copy of these materials or that \"\n        + \"you have already sent this user a copy.\\n\"\n        + \"\\n\"\n        + \"For an executable, the required form of the \\\"work that uses the Library\\\" must \"\n        + \"include any data and utility programs needed for reproducing the executable from it. \"\n        + \"However, as a special exception, the materials to be distributed need not include \"\n        + \"anything that is normally distributed (in either source or binary form) with the major \"\n        + \"components (compiler, kernel, and so on) of the operating system on which the \"\n        + \"executable runs, unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"It may happen that this requirement contradicts the license restrictions of other \"\n        + \"proprietary libraries that do not normally accompany the operating system. Such a \"\n        + \"contradiction means you cannot use both them and the Library together in an executable \"\n        + \"that you distribute.\\n\"\n        + \"\\n\"\n        + \"7. You may place library facilities that are a work based on the Library side-by-side \"\n        + \"in a single library together with other library facilities not covered by this \"\n        + \"License, and distribute such a combined library, provided that the separate \"\n        + \"distribution of the work based on the Library and of the other library facilities is \"\n        + \"otherwise permitted, and provided that you do these two things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the combined library with a copy of the same work based on the \"\n        + \"Library, uncombined with any other library facilities. This must be distributed under \"\n        + \"the terms of the Sections above.\\n\"\n        + \"*    b) Give prominent notice with the combined library of the fact that part of it is \"\n        + \"a work based on the Library, and explaining where to find the accompanying uncombined \"\n        + \"form of the same work.\\n\"\n        + \"\\n\"\n        + \"8. You may not copy, modify, sublicense, link with, or distribute the Library except \"\n        + \"as expressly provided under this License. Any attempt otherwise to copy, modify, \"\n        + \"sublicense, link with, or distribute the Library is void, and will automatically \"\n        + \"terminate your rights under this License. However, parties who have received copies, \"\n        + \"or rights, from you under this License will not have their licenses terminated so \"\n        + \"long as such parties remain in full compliance.\\n\"\n        + \"\\n\"\n        + \"9. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Library or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Library (or any work based on the \"\n        + \"Library), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Library or works based on it.\\n\"\n        + \"\\n\"\n        + \"10. Each time you redistribute the Library (or any work based on the Library), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute, link with or modify the Library subject to these terms and conditions. You \"\n        + \"may not impose any further restrictions on the recipients\u0027 exercise of the rights \"\n        + \"granted herein. You are not responsible for enforcing compliance by third parties with \"\n        + \"this License.\\n\"\n        + \"\\n\"\n        + \"11. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Library at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Library by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Library.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply, and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"12. If the distribution and/or use of the Library is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Library under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"13. The Free Software Foundation may publish revised and/or new versions of the Lesser \"\n        + \"General Public License from time to time. Such new versions will be similar in spirit \"\n        + \"to the present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Library specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Library does not \"\n        + \"specify a license version number, you may choose any version ever published by the \"\n        + \"Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"14. If you wish to incorporate parts of the Library into other free programs whose \"\n        + \"distribution conditions are incompatible with these, write to the author to ask for \"\n        + \"permission. For software which is copyrighted by the Free Software Foundation, write \"\n        + \"to the Free Software Foundation; we sometimes make exceptions for this. Our decision \"\n        + \"will be guided by the two goals of preserving the free status of all derivatives of \"\n        + \"our free software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD \"\n        + \"THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE \"\n        + \"WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Libraries\\n\"\n        + \"\\n\"\n        + \"If you develop a new library, and you want it to be of the greatest possible use to \"\n        + \"the public, we recommend making it free software that everyone can redistribute and \"\n        + \"change. You can do so by permitting redistribution under these terms (or, \"\n        + \"alternatively, under the terms of the ordinary General Public License).\\n\"\n        + \"\\n\"\n        + \"To apply these terms, attach the following notices to the library.  It is safest to \"\n        + \"attach them to the start of each source file to most effectively convey the exclusion \"\n        + \"of warranty; and each file should have at least the \\\"copyright\\\" line and a pointer \"\n        + \"to where the full notice is found.\\n\"\n        + \"\\n\"\n        + \"\u003cone line to give the library\u0027s name and a brief idea of what it does.\u003e\\n\"\n        + \"Copyright (C) \u003cyear\u003e  \u003cname of author\u003e\\n\"\n        + \"\\n\"\n        + \"This library is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU Lesser General Public License as published by the Free Software \"\n        + \"Foundation; either version 2.1 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This library is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU Lesser General Public License along with \"\n        + \"this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, \"\n        + \"Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the library, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob\u0027 (a \"\n        + \"library for tweaking knobs) written by James Random Hacker.\\n\"\n        + \"\\n\"\n        + \"\u003csignature of Ty Coon\u003e, 1 April 1990\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"That\u0027s all there is to it!\\n\";",
    "begin_line": 357,
    "end_line": 788,
    "comment": "/** \n * The GNU Lesser General Public Licence. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.Licences",
    "src_path": "org/jfree/chart/ui/Licences.java",
    "signature": "org.jfree.chart.ui.Licences.singleton",
    "snippet": "private static Licences singleton;",
    "begin_line": 791,
    "end_line": 791,
    "comment": "/** \n * The singleton instance of this class. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "signature": "org.jfree.chart.ui.ProjectInfo.logo",
    "snippet": "private Image logo;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * An optional project logo. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "signature": "org.jfree.chart.ui.ProjectInfo.licenceText",
    "snippet": "private String licenceText;",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * The licence text. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "signature": "org.jfree.chart.ui.ProjectInfo.contributors",
    "snippet": "private List contributors;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * A list of contributors. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -1771624523496595382L;",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_PREFIX",
    "snippet": "public static final String DEFAULT_PREFIX \u003d \"index.html\";",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * The default prefix. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_SERIES_PARAMETER",
    "snippet": "public static final String DEFAULT_SERIES_PARAMETER \u003d \"series\";",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The default series parameter. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_ITEM_PARAMETER",
    "snippet": "public static final String DEFAULT_ITEM_PARAMETER \u003d \"item\";",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * The default item parameter. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.prefix",
    "snippet": "private String prefix;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Prefix to the URL \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.seriesParameterName",
    "snippet": "private String seriesParameterName;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * Series parameter name to go in each URL \n */\n"
  },
  {
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.itemParameterName",
    "snippet": "private String itemParameterName;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * Item parameter name to go in each URL \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "signature": "org.jfree.chart.util.AbstractObjectList.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7789833772597351595L;",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "signature": "org.jfree.chart.util.AbstractObjectList.DEFAULT_INITIAL_CAPACITY",
    "snippet": "public static final int DEFAULT_INITIAL_CAPACITY \u003d 8;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * The default initial capacity of the list. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "signature": "org.jfree.chart.util.AbstractObjectList.objects",
    "snippet": "private transient Object[] objects;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * Storage for the objects. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "signature": "org.jfree.chart.util.AbstractObjectList.size",
    "snippet": "private int size \u003d 0;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The current list size. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "signature": "org.jfree.chart.util.AbstractObjectList.increment",
    "snippet": "private int increment \u003d DEFAULT_INITIAL_CAPACITY;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * The default increment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.BooleanList",
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "signature": "org.jfree.chart.util.BooleanList.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -8543170333219422042L;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "signature": "org.jfree.chart.util.HorizontalAlignment.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -8249740987565309567L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "signature": "org.jfree.chart.util.HorizontalAlignment.LEFT",
    "snippet": "public static final HorizontalAlignment LEFT\n            \u003d new HorizontalAlignment(\"HorizontalAlignment.LEFT\");",
    "begin_line": 57,
    "end_line": 58,
    "comment": "/** \n * Left alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "signature": "org.jfree.chart.util.HorizontalAlignment.RIGHT",
    "snippet": "public static final HorizontalAlignment RIGHT\n            \u003d new HorizontalAlignment(\"HorizontalAlignment.RIGHT\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * Right alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "signature": "org.jfree.chart.util.HorizontalAlignment.CENTER",
    "snippet": "public static final HorizontalAlignment CENTER\n            \u003d new HorizontalAlignment(\"HorizontalAlignment.CENTER\");",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * Center alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "signature": "org.jfree.chart.util.HorizontalAlignment.name",
    "snippet": "private String name;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.PaintMap",
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "signature": "org.jfree.chart.util.PaintMap.serialVersionUID",
    "snippet": "static final long serialVersionUID \u003d -4639833772123069274L;",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.PaintMap",
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "signature": "org.jfree.chart.util.PaintMap.store",
    "snippet": "private transient Map store;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * Storage for the keys and values. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -2457494205644416327L;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.CENTER",
    "snippet": "public static final RectangleAnchor CENTER\n        \u003d new RectangleAnchor(\"RectangleAnchor.CENTER\");",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * Center. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.TOP",
    "snippet": "public static final RectangleAnchor TOP\n        \u003d new RectangleAnchor(\"RectangleAnchor.TOP\");",
    "begin_line": 67,
    "end_line": 68,
    "comment": "/** \n * Top. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.TOP_LEFT",
    "snippet": "public static final RectangleAnchor TOP_LEFT\n        \u003d new RectangleAnchor(\"RectangleAnchor.TOP_LEFT\");",
    "begin_line": 71,
    "end_line": 72,
    "comment": "/** \n * Top-Left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.TOP_RIGHT",
    "snippet": "public static final RectangleAnchor TOP_RIGHT\n        \u003d new RectangleAnchor(\"RectangleAnchor.TOP_RIGHT\");",
    "begin_line": 75,
    "end_line": 76,
    "comment": "/** \n * Top-Right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM",
    "snippet": "public static final RectangleAnchor BOTTOM\n        \u003d new RectangleAnchor(\"RectangleAnchor.BOTTOM\");",
    "begin_line": 79,
    "end_line": 80,
    "comment": "/** \n * Bottom. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT",
    "snippet": "public static final RectangleAnchor BOTTOM_LEFT\n        \u003d new RectangleAnchor(\"RectangleAnchor.BOTTOM_LEFT\");",
    "begin_line": 83,
    "end_line": 84,
    "comment": "/** \n * Bottom-Left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT",
    "snippet": "public static final RectangleAnchor BOTTOM_RIGHT\n        \u003d new RectangleAnchor(\"RectangleAnchor.BOTTOM_RIGHT\");",
    "begin_line": 87,
    "end_line": 88,
    "comment": "/** \n * Bottom-Right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.LEFT",
    "snippet": "public static final RectangleAnchor LEFT\n        \u003d new RectangleAnchor(\"RectangleAnchor.LEFT\");",
    "begin_line": 91,
    "end_line": 92,
    "comment": "/** \n * Left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.RIGHT",
    "snippet": "public static final RectangleAnchor RIGHT\n        \u003d new RectangleAnchor(\"RectangleAnchor.RIGHT\");",
    "begin_line": 95,
    "end_line": 96,
    "comment": "/** \n * Right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "signature": "org.jfree.chart.util.RectangleAnchor.name",
    "snippet": "private String name;",
    "begin_line": 99,
    "end_line": 99,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7400988293691093548L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.TOP",
    "snippet": "public static final RectangleEdge TOP \u003d new RectangleEdge(\n            \"RectangleEdge.TOP\");",
    "begin_line": 57,
    "end_line": 58,
    "comment": "/** \n * Top. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.BOTTOM",
    "snippet": "public static final RectangleEdge BOTTOM \u003d new RectangleEdge(\n            \"RectangleEdge.BOTTOM\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * Bottom. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.LEFT",
    "snippet": "public static final RectangleEdge LEFT \u003d new RectangleEdge(\n            \"RectangleEdge.LEFT\");",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * Left. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.RIGHT",
    "snippet": "public static final RectangleEdge RIGHT \u003d new RectangleEdge(\n            \"RectangleEdge.RIGHT\");",
    "begin_line": 69,
    "end_line": 70,
    "comment": "/** \n * Right. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "signature": "org.jfree.chart.util.RectangleEdge.name",
    "snippet": "private String name;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1902273207559319996L;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.ZERO_INSETS",
    "snippet": "public static final RectangleInsets ZERO_INSETS \u003d new RectangleInsets(\n            UnitType.ABSOLUTE, 0.0, 0.0, 0.0, 0.0);",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * A useful constant representing zero insets.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.unitType",
    "snippet": "private UnitType unitType;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * Absolute or relative units. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.top",
    "snippet": "private double top;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * The top insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.left",
    "snippet": "private double left;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * The left insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.bottom",
    "snippet": "private double bottom;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * The bottom insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "signature": "org.jfree.chart.util.RectangleInsets.right",
    "snippet": "private double right;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * The right insets. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.noCodeBaseClassLoader",
    "snippet": "private static URLClassLoader noCodeBaseClassLoader;",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * A special class loader with no code base lookup.  This field may be \u003ccode\u003enull\u003c/code\u003e (the field is only initialised if removeCodeBase() is called from an applet.\n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.Rotation",
    "src_path": "org/jfree/chart/util/Rotation.java",
    "signature": "org.jfree.chart.util.Rotation.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -4662815260201591676L;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.Rotation",
    "src_path": "org/jfree/chart/util/Rotation.java",
    "signature": "org.jfree.chart.util.Rotation.CLOCKWISE",
    "snippet": "public static final Rotation CLOCKWISE\n        \u003d new Rotation(\"Rotation.CLOCKWISE\", -1.0);",
    "begin_line": 59,
    "end_line": 60,
    "comment": "/** \n * Clockwise. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.Rotation",
    "src_path": "org/jfree/chart/util/Rotation.java",
    "signature": "org.jfree.chart.util.Rotation.ANTICLOCKWISE",
    "snippet": "public static final Rotation ANTICLOCKWISE\n        \u003d new Rotation(\"Rotation.ANTICLOCKWISE\", 1.0);",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * The reverse order renders the primary dataset first. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.Rotation",
    "src_path": "org/jfree/chart/util/Rotation.java",
    "signature": "org.jfree.chart.util.Rotation.name",
    "snippet": "private String name;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.Rotation",
    "src_path": "org/jfree/chart/util/Rotation.java",
    "signature": "org.jfree.chart.util.Rotation.factor",
    "snippet": "private double factor;",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * The factor (-1.0 for \u003ccode\u003eCLOCKWISE\u003c/code\u003e and 1.0 for \u003ccode\u003eANTICLOCKWISE\u003c/code\u003e).\n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.StrokeMap",
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "signature": "org.jfree.chart.util.StrokeMap.serialVersionUID",
    "snippet": "static final long serialVersionUID \u003d -8148916785963525169L;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.StrokeMap",
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "signature": "org.jfree.chart.util.StrokeMap.store",
    "snippet": "private transient Map store;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Storage for the keys and values. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.UnitType",
    "src_path": "org/jfree/chart/util/UnitType.java",
    "signature": "org.jfree.chart.util.UnitType.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 6531925392288519884L;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.UnitType",
    "src_path": "org/jfree/chart/util/UnitType.java",
    "signature": "org.jfree.chart.util.UnitType.ABSOLUTE",
    "snippet": "public static final UnitType ABSOLUTE \u003d new UnitType(\"UnitType.ABSOLUTE\");",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Absolute. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.UnitType",
    "src_path": "org/jfree/chart/util/UnitType.java",
    "signature": "org.jfree.chart.util.UnitType.RELATIVE",
    "snippet": "public static final UnitType RELATIVE \u003d new UnitType(\"UnitType.RELATIVE\");",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * Relative. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.UnitType",
    "src_path": "org/jfree/chart/util/UnitType.java",
    "signature": "org.jfree.chart.util.UnitType.name",
    "snippet": "private String name;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "signature": "org.jfree.chart.util.VerticalAlignment.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7272397034325429853L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "signature": "org.jfree.chart.util.VerticalAlignment.TOP",
    "snippet": "public static final VerticalAlignment TOP\n            \u003d new VerticalAlignment(\"VerticalAlignment.TOP\");",
    "begin_line": 57,
    "end_line": 58,
    "comment": "/** \n * Top alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "signature": "org.jfree.chart.util.VerticalAlignment.BOTTOM",
    "snippet": "public static final VerticalAlignment BOTTOM\n            \u003d new VerticalAlignment(\"VerticalAlignment.BOTTOM\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * Bottom alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "signature": "org.jfree.chart.util.VerticalAlignment.CENTER",
    "snippet": "public static final VerticalAlignment CENTER\n            \u003d new VerticalAlignment(\"VerticalAlignment.CENTER\");",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * Center alignment. \n */\n"
  },
  {
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "signature": "org.jfree.chart.util.VerticalAlignment.name",
    "snippet": "private String name;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "signature": "org.jfree.data.DefaultKeyedValues.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 8468154364608194797L;",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "signature": "org.jfree.data.DefaultKeyedValues.keys",
    "snippet": "private ArrayList keys;",
    "begin_line": 83,
    "end_line": 83,
    "comment": "/** \n * Storage for the keys. \n */\n"
  },
  {
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "signature": "org.jfree.data.DefaultKeyedValues.values",
    "snippet": "private ArrayList values;",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * Storage for the values. \n */\n"
  },
  {
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "signature": "org.jfree.data.DefaultKeyedValues.indexMap",
    "snippet": "private HashMap indexMap;",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * Contains (key, Integer) mappings, where the Integer is the index for the key in the list.\n */\n"
  },
  {
    "class_name": "org.jfree.data.Range",
    "src_path": "org/jfree/data/Range.java",
    "signature": "org.jfree.data.Range.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -906333695431863380L;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.Range",
    "src_path": "org/jfree/data/Range.java",
    "signature": "org.jfree.data.Range.lower",
    "snippet": "private double lower;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * The lower bound of the range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.Range",
    "src_path": "org/jfree/data/Range.java",
    "signature": "org.jfree.data.Range.upper",
    "snippet": "private double upper;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * The upper bound of the range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.RangeType",
    "src_path": "org/jfree/data/RangeType.java",
    "signature": "org.jfree.data.RangeType.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -9073319010650549239L;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.RangeType",
    "src_path": "org/jfree/data/RangeType.java",
    "signature": "org.jfree.data.RangeType.FULL",
    "snippet": "public static final RangeType FULL \u003d new RangeType(\"RangeType.FULL\");",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Full range (positive and negative). \n */\n"
  },
  {
    "class_name": "org.jfree.data.RangeType",
    "src_path": "org/jfree/data/RangeType.java",
    "signature": "org.jfree.data.RangeType.POSITIVE",
    "snippet": "public static final RangeType POSITIVE\r\n        \u003d new RangeType(\"RangeType.POSITIVE\");",
    "begin_line": 59,
    "end_line": 60,
    "comment": "/** \n * Positive range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.RangeType",
    "src_path": "org/jfree/data/RangeType.java",
    "signature": "org.jfree.data.RangeType.NEGATIVE",
    "snippet": "public static final RangeType NEGATIVE\r\n        \u003d new RangeType(\"RangeType.NEGATIVE\");",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * Negative range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.RangeType",
    "src_path": "org/jfree/data/RangeType.java",
    "signature": "org.jfree.data.RangeType.name",
    "snippet": "private String name;",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.AbstractDataset",
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "signature": "org.jfree.data.general.AbstractDataset.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1918768939869230744L;",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.AbstractDataset",
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "signature": "org.jfree.data.general.AbstractDataset.group",
    "snippet": "private DatasetGroup group;",
    "begin_line": 83,
    "end_line": 83,
    "comment": "/** \n * The group that the dataset belongs to. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.AbstractDataset",
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "signature": "org.jfree.data.general.AbstractDataset.listenerList",
    "snippet": "private transient EventListenerList listenerList;",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -6074996219705033171L;",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.DatasetChangeEvent",
    "src_path": "org/jfree/data/general/DatasetChangeEvent.java",
    "signature": "org.jfree.data.general.DatasetChangeEvent.dataset",
    "snippet": "private Dataset dataset;",
    "begin_line": 58,
    "end_line": 58,
    "comment": "/** \n * The dataset that generated the change event.\n */\n"
  },
  {
    "class_name": "org.jfree.data.general.DatasetGroup",
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "signature": "org.jfree.data.general.DatasetGroup.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -3640642179674185688L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.DatasetGroup",
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "signature": "org.jfree.data.general.DatasetGroup.id",
    "snippet": "private String id;",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * The group id. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "signature": "org.jfree.data.general.DefaultPieDataset.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2904745139106540618L;",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "signature": "org.jfree.data.general.DefaultPieDataset.data",
    "snippet": "private DefaultKeyedValues data;",
    "begin_line": 80,
    "end_line": 80,
    "comment": "/** \n * Storage for the data. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -6906561437538683581L;",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.key",
    "snippet": "private Comparable key;",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * The key for the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.description",
    "snippet": "private String description;",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * A description of the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.listeners",
    "snippet": "private EventListenerList listeners;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * Storage for registered change listeners. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.propertyChangeSupport",
    "snippet": "private PropertyChangeSupport propertyChangeSupport;",
    "begin_line": 91,
    "end_line": 91,
    "comment": "/** \n * Object to support property change notification. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.Series",
    "src_path": "org/jfree/data/general/Series.java",
    "signature": "org.jfree.data.general.Series.notify",
    "snippet": "private boolean notify;",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * A flag that controls whether or not changes are notified. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "signature": "org.jfree.data.general.SeriesChangeEvent.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1593866085210089052L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "signature": "org.jfree.data.general.SeriesChangeEvent.summary",
    "snippet": "private SeriesChangeInfo summary;",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * Summary info about the change.\n * @since 1.2.0\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.DateRange",
    "src_path": "org/jfree/data/time/DateRange.java",
    "signature": "org.jfree.data.time.DateRange.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -4705682568375418157L;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.DateRange",
    "src_path": "org/jfree/data/time/DateRange.java",
    "signature": "org.jfree.data.time.DateRange.lowerDate",
    "snippet": "private long lowerDate;",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * The lower bound for the range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.DateRange",
    "src_path": "org/jfree/data/time/DateRange.java",
    "signature": "org.jfree.data.time.DateRange.upperDate",
    "snippet": "private long upperDate;",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * The upper bound for the range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7082667380758962755L;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.DATE_FORMAT",
    "snippet": "protected static final DateFormat DATE_FORMAT\r\n        \u003d new SimpleDateFormat(\"yyyy-MM-dd\");",
    "begin_line": 84,
    "end_line": 85,
    "comment": "/** \n * A standard date formatter. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.DATE_FORMAT_SHORT",
    "snippet": "protected static final DateFormat\r\n        DATE_FORMAT_SHORT \u003d DateFormat.getDateInstance(DateFormat.SHORT);",
    "begin_line": 88,
    "end_line": 89,
    "comment": "/** \n * A date formatter for the default locale. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",
    "snippet": "protected static final DateFormat\r\n        DATE_FORMAT_MEDIUM \u003d DateFormat.getDateInstance(DateFormat.MEDIUM);",
    "begin_line": 92,
    "end_line": 93,
    "comment": "/** \n * A date formatter for the default locale. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.DATE_FORMAT_LONG",
    "snippet": "protected static final DateFormat\r\n        DATE_FORMAT_LONG \u003d DateFormat.getDateInstance(DateFormat.LONG);",
    "begin_line": 96,
    "end_line": 97,
    "comment": "/** \n * A date formatter for the default locale. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.serialDate",
    "snippet": "private SerialDate serialDate;",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * The day (uses SerialDate for convenience). \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.firstMillisecond",
    "snippet": "private long firstMillisecond;",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * The first millisecond. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.Day",
    "src_path": "org/jfree/data/time/Day.java",
    "signature": "org.jfree.data.time.Day.lastMillisecond",
    "snippet": "private long lastMillisecond;",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * The last millisecond. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -293716040467423637L;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",
    "snippet": "public static final DateFormatSymbols\n        DATE_FORMAT_SYMBOLS \u003d new SimpleDateFormat().getDateFormatSymbols();",
    "begin_line": 91,
    "end_line": 92,
    "comment": "/** \n * Date format symbols. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",
    "snippet": "public static final int SERIAL_LOWER_BOUND \u003d 2;",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * The serial number for 1 January 1900. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",
    "snippet": "public static final int SERIAL_UPPER_BOUND \u003d 2958465;",
    "begin_line": 98,
    "end_line": 98,
    "comment": "/** \n * The serial number for 31 December 9999. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",
    "snippet": "public static final int MINIMUM_YEAR_SUPPORTED \u003d 1900;",
    "begin_line": 101,
    "end_line": 101,
    "comment": "/** \n * The lowest year value supported by this date format. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",
    "snippet": "public static final int MAXIMUM_YEAR_SUPPORTED \u003d 9999;",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * The highest year value supported by this date format. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.MONDAY",
    "snippet": "public static final int MONDAY \u003d Calendar.MONDAY;",
    "begin_line": 107,
    "end_line": 107,
    "comment": "/** \n * Useful constant for Monday. Equivalent to java.util.Calendar.MONDAY. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.TUESDAY",
    "snippet": "public static final int TUESDAY \u003d Calendar.TUESDAY;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * Useful constant for Tuesday. Equivalent to java.util.Calendar.TUESDAY.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.WEDNESDAY",
    "snippet": "public static final int WEDNESDAY \u003d Calendar.WEDNESDAY;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * Useful constant for Wednesday. Equivalent to java.util.Calendar.WEDNESDAY.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.THURSDAY",
    "snippet": "public static final int THURSDAY \u003d Calendar.THURSDAY;",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Useful constant for Thrusday. Equivalent to java.util.Calendar.THURSDAY.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.FRIDAY",
    "snippet": "public static final int FRIDAY \u003d Calendar.FRIDAY;",
    "begin_line": 126,
    "end_line": 126,
    "comment": "/** \n * Useful constant for Friday. Equivalent to java.util.Calendar.FRIDAY. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.SATURDAY",
    "snippet": "public static final int SATURDAY \u003d Calendar.SATURDAY;",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * Useful constant for Saturday. Equivalent to java.util.Calendar.SATURDAY.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.SUNDAY",
    "snippet": "public static final int SUNDAY \u003d Calendar.SUNDAY;",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * Useful constant for Sunday. Equivalent to java.util.Calendar.SUNDAY. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",
    "snippet": "static final int[] LAST_DAY_OF_MONTH \u003d\n        {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};",
    "begin_line": 137,
    "end_line": 138,
    "comment": "/** \n * The number of days in each month in non leap years. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",
    "snippet": "static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH \u003d\n        {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
    "begin_line": 141,
    "end_line": 142,
    "comment": "/** \n * The number of days in a (non-leap) year up to the end of each month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
    "snippet": "static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH \u003d\n        {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
    "begin_line": 145,
    "end_line": 146,
    "comment": "/** \n * The number of days in a year up to the end of the preceding month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",
    "snippet": "static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH \u003d\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
    "begin_line": 149,
    "end_line": 150,
    "comment": "/** \n * The number of days in a leap year up to the end of each month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
    "snippet": "static final int[]\n        LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH \u003d\n            {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
    "begin_line": 155,
    "end_line": 157,
    "comment": "/** \n * The number of days in a leap year up to the end of the preceding month.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",
    "snippet": "public static final int FIRST_WEEK_IN_MONTH \u003d 1;",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * A useful constant for referring to the first week in a month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",
    "snippet": "public static final int SECOND_WEEK_IN_MONTH \u003d 2;",
    "begin_line": 163,
    "end_line": 163,
    "comment": "/** \n * A useful constant for referring to the second week in a month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",
    "snippet": "public static final int THIRD_WEEK_IN_MONTH \u003d 3;",
    "begin_line": 166,
    "end_line": 166,
    "comment": "/** \n * A useful constant for referring to the third week in a month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",
    "snippet": "public static final int FOURTH_WEEK_IN_MONTH \u003d 4;",
    "begin_line": 169,
    "end_line": 169,
    "comment": "/** \n * A useful constant for referring to the fourth week in a month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",
    "snippet": "public static final int LAST_WEEK_IN_MONTH \u003d 0;",
    "begin_line": 172,
    "end_line": 172,
    "comment": "/** \n * A useful constant for referring to the last week in a month. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.INCLUDE_NONE",
    "snippet": "public static final int INCLUDE_NONE \u003d 0;",
    "begin_line": 175,
    "end_line": 175,
    "comment": "/** \n * Useful range constant. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.INCLUDE_FIRST",
    "snippet": "public static final int INCLUDE_FIRST \u003d 1;",
    "begin_line": 178,
    "end_line": 178,
    "comment": "/** \n * Useful range constant. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.INCLUDE_SECOND",
    "snippet": "public static final int INCLUDE_SECOND \u003d 2;",
    "begin_line": 181,
    "end_line": 181,
    "comment": "/** \n * Useful range constant. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.INCLUDE_BOTH",
    "snippet": "public static final int INCLUDE_BOTH \u003d 3;",
    "begin_line": 184,
    "end_line": 184,
    "comment": "/** \n * Useful range constant. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.PRECEDING",
    "snippet": "public static final int PRECEDING \u003d -1;",
    "begin_line": 190,
    "end_line": 190,
    "comment": "/** \n * Useful constant for specifying a day of the week relative to a fixed date.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.NEAREST",
    "snippet": "public static final int NEAREST \u003d 0;",
    "begin_line": 196,
    "end_line": 196,
    "comment": "/** \n * Useful constant for specifying a day of the week relative to a fixed date.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.FOLLOWING",
    "snippet": "public static final int FOLLOWING \u003d 1;",
    "begin_line": 202,
    "end_line": 202,
    "comment": "/** \n * Useful constant for specifying a day of the week relative to a fixed date.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SerialDate",
    "src_path": "org/jfree/data/time/SerialDate.java",
    "signature": "org.jfree.data.time.SerialDate.description",
    "snippet": "private String description;",
    "begin_line": 205,
    "end_line": 205,
    "comment": "/** \n * A description for the date. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "signature": "org.jfree.data.time.SpreadsheetDate.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -2039586705374454461L;",
    "begin_line": 83,
    "end_line": 83,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "signature": "org.jfree.data.time.SpreadsheetDate.serial",
    "snippet": "private final int serial;",
    "begin_line": 89,
    "end_line": 89,
    "comment": "/** \n * The day number (1-Jan-1900 \u003d 2, 2-Jan-1900 \u003d 3, ..., 31-Dec-9999 \u003d 2958465).\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "signature": "org.jfree.data.time.SpreadsheetDate.day",
    "snippet": "private final int day;",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * The day of the month (1 to 28, 29, 30 or 31 depending on the month). \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "signature": "org.jfree.data.time.SpreadsheetDate.month",
    "snippet": "private final int month;",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * The month of the year (1 to 12). \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "signature": "org.jfree.data.time.SpreadsheetDate.year",
    "snippet": "private final int year;",
    "begin_line": 98,
    "end_line": 98,
    "comment": "/** \n * The year (1900 to 9999). \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "signature": "org.jfree.data.time.TimePeriodAnchor.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2011955697457548862L;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "signature": "org.jfree.data.time.TimePeriodAnchor.START",
    "snippet": "public static final TimePeriodAnchor START\r\n        \u003d new TimePeriodAnchor(\"TimePeriodAnchor.START\");",
    "begin_line": 57,
    "end_line": 58,
    "comment": "/** \n * Start of period. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "signature": "org.jfree.data.time.TimePeriodAnchor.MIDDLE",
    "snippet": "public static final TimePeriodAnchor MIDDLE\r\n        \u003d new TimePeriodAnchor(\"TimePeriodAnchor.MIDDLE\");",
    "begin_line": 61,
    "end_line": 62,
    "comment": "/** \n * Middle of period. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "signature": "org.jfree.data.time.TimePeriodAnchor.END",
    "snippet": "public static final TimePeriodAnchor END\r\n        \u003d new TimePeriodAnchor(\"TimePeriodAnchor.END\");",
    "begin_line": 65,
    "end_line": 66,
    "comment": "/** \n * End of period. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "signature": "org.jfree.data.time.TimePeriodAnchor.name",
    "snippet": "private String name;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * The name. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -5032960206869675528L;",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",
    "snippet": "protected static final String DEFAULT_DOMAIN_DESCRIPTION \u003d \"Time\";",
    "begin_line": 120,
    "end_line": 120,
    "comment": "/** \n * Default value for the domain description. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",
    "snippet": "protected static final String DEFAULT_RANGE_DESCRIPTION \u003d \"Value\";",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Default value for the range description. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.domain",
    "snippet": "private String domain;",
    "begin_line": 126,
    "end_line": 126,
    "comment": "/** \n * A description of the domain. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.range",
    "snippet": "private String range;",
    "begin_line": 129,
    "end_line": 129,
    "comment": "/** \n * A description of the range. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.timePeriodClass",
    "snippet": "protected Class timePeriodClass;",
    "begin_line": 132,
    "end_line": 132,
    "comment": "/** \n * The type of period for the data. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.data",
    "snippet": "protected List data;",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * The list of data items in the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.maximumItemCount",
    "snippet": "private int maximumItemCount;",
    "begin_line": 138,
    "end_line": 138,
    "comment": "/** \n * The maximum number of items for the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.maximumItemAge",
    "snippet": "private long maximumItemAge;",
    "begin_line": 144,
    "end_line": 144,
    "comment": "/** \n * The maximum age of items for the series, specified as a number of time periods.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.minY",
    "snippet": "private double minY;",
    "begin_line": 151,
    "end_line": 151,
    "comment": "/** \n * The minimum y-value in the series.\n * @since 1.0.14\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeries",
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "signature": "org.jfree.data.time.TimeSeries.maxY",
    "snippet": "private double maxY;",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * The maximum y-value in the series.\n * @since 1.0.14\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "signature": "org.jfree.data.time.TimeSeriesCollection.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 834149929022371137L;",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "signature": "org.jfree.data.time.TimeSeriesCollection.data",
    "snippet": "private List data;",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * Storage for the time series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "signature": "org.jfree.data.time.TimeSeriesCollection.workingCalendar",
    "snippet": "private Calendar workingCalendar;",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * A working calendar (to recycle) \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "signature": "org.jfree.data.time.TimeSeriesCollection.xPosition",
    "snippet": "private TimePeriodAnchor xPosition;",
    "begin_line": 138,
    "end_line": 138,
    "comment": "/** \n * The point within each time period that is used for the X value when this collection is used as an  {@link org.jfree.data.xy.XYDataset}.  This can be the start, middle or end of the time period.\n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -2235346966016401302L;",
    "begin_line": 84,
    "end_line": 84,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.period",
    "snippet": "private RegularTimePeriod period;",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * The time period. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.value",
    "snippet": "private Number value;",
    "begin_line": 90,
    "end_line": 90,
    "comment": "/** \n * The value associated with the time period. \n */\n"
  },
  {
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.selected",
    "snippet": "private boolean selected;",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * A flag that indicates whether or not the item is \"selected\".\n * @since 1.2.0\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "signature": "org.jfree.data.xy.AbstractXYDataset.selectionState",
    "snippet": "private XYDatasetSelectionState selectionState;",
    "begin_line": 105,
    "end_line": 105,
    "comment": "/** \n * The dataset selection state (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "signature": "org.jfree.data.xy.DefaultXYDataset.seriesKeys",
    "snippet": "private List seriesKeys;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * Storage for the series keys.  This list must be kept in sync with the seriesList.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "signature": "org.jfree.data.xy.DefaultXYDataset.seriesList",
    "snippet": "private List seriesList;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Storage for the series in the dataset.  We use a list because the order of the series is significant.  This list must be kept in sync with the seriesKeys list.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -685166711639592857L;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.dataset",
    "snippet": "private XYDataset dataset;",
    "begin_line": 93,
    "end_line": 93,
    "comment": "/** \n * The dataset to enhance.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.autoWidth",
    "snippet": "private boolean autoWidth;",
    "begin_line": 98,
    "end_line": 98,
    "comment": "/** \n * A flag to indicate whether the width should be calculated automatically.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.intervalPositionFactor",
    "snippet": "private double intervalPositionFactor;",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * A value between 0.0 and 1.0 that indicates the position of the x-value within the interval.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.fixedIntervalWidth",
    "snippet": "private double fixedIntervalWidth;",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * The fixed interval width (defaults to 1.0).\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.autoIntervalWidth",
    "snippet": "private double autoIntervalWidth;",
    "begin_line": 114,
    "end_line": 114,
    "comment": "/** \n * The automatically calculated interval width.\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYDataItem",
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "signature": "org.jfree.data.xy.XYDataItem.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 2751513470325494890L;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYDataItem",
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "signature": "org.jfree.data.xy.XYDataItem.x",
    "snippet": "private Number x;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * The x-value (\u003ccode\u003enull\u003c/code\u003e not permitted). \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYDataItem",
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "signature": "org.jfree.data.xy.XYDataItem.y",
    "snippet": "private Number y;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * The y-value. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYDataItem",
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "signature": "org.jfree.data.xy.XYDataItem.selected",
    "snippet": "private boolean selected;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * A flag that indicates whether or not the item is \"selected\".\n * @since 1.2.0\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.serialVersionUID",
    "snippet": "static final long serialVersionUID \u003d -5908509288197150436L;",
    "begin_line": 102,
    "end_line": 102,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.data",
    "snippet": "protected List data;",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * Storage for the data items in the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.maximumItemCount",
    "snippet": "private int maximumItemCount \u003d Integer.MAX_VALUE;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * The maximum number of items for the series. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.autoSort",
    "snippet": "private boolean autoSort;",
    "begin_line": 118,
    "end_line": 118,
    "comment": "/** \n * A flag that controls whether the items are automatically sorted (by x-value ascending).\n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.allowDuplicateXValues",
    "snippet": "private boolean allowDuplicateXValues;",
    "begin_line": 121,
    "end_line": 121,
    "comment": "/** \n * A flag that controls whether or not duplicate x-values are allowed. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.minX",
    "snippet": "private double minX;",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * The lowest x-value in the series, excluding Double.NaN values. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.maxX",
    "snippet": "private double maxX;",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * The highest x-value in the series, excluding Double.NaN values. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.minY",
    "snippet": "private double minY;",
    "begin_line": 130,
    "end_line": 130,
    "comment": "/** \n * The lowest y-value in the series, excluding Double.NaN values. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeries",
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "signature": "org.jfree.data.xy.XYSeries.maxY",
    "snippet": "private double maxY;",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * The highest y-value in the series, excluding Double.NaN values. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "signature": "org.jfree.data.xy.XYSeriesCollection.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d -7590013825931496766L;",
    "begin_line": 93,
    "end_line": 93,
    "comment": "/** \n * For serialization. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "signature": "org.jfree.data.xy.XYSeriesCollection.data",
    "snippet": "private List data;",
    "begin_line": 96,
    "end_line": 96,
    "comment": "/** \n * The series that are included in the collection. \n */\n"
  },
  {
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "signature": "org.jfree.data.xy.XYSeriesCollection.intervalDelegate",
    "snippet": "private IntervalXYDelegate intervalDelegate;",
    "begin_line": 99,
    "end_line": 99,
    "comment": "/** \n * The interval delegate (used to calculate the start and end x-values). \n */\n"
  }
]