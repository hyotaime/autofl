[
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.CR",
    "snippet": "public static final int CR \u003d \u0027\\r\u0027;",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * CR char.\n * @since 2.9.0\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE",
    "snippet": "public static final int DEFAULT_BUFFER_SIZE \u003d 8192;",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * The default buffer size ( {@value}) to use in copy methods.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.DIR_SEPARATOR",
    "snippet": "public static final char DIR_SEPARATOR \u003d File.separatorChar;",
    "begin_line": 145,
    "end_line": 145,
    "comment": "/** \n * The system directory separator character.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX",
    "snippet": "public static final char DIR_SEPARATOR_UNIX \u003d \u0027/\u0027;",
    "begin_line": 150,
    "end_line": 150,
    "comment": "/** \n * The Unix directory separator character.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS",
    "snippet": "public static final char DIR_SEPARATOR_WINDOWS \u003d \u0027\\\\\u0027;",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * The Windows directory separator character.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.EMPTY_BYTE_ARRAY",
    "snippet": "public static final byte[] EMPTY_BYTE_ARRAY \u003d {};",
    "begin_line": 162,
    "end_line": 162,
    "comment": "/** \n * A singleton empty byte array.\n * @since 2.9.0\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.EOF",
    "snippet": "public static final int EOF \u003d -1;",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Represents the end-of-file (or stream).\n * @since 2.5 (made public)\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.LF",
    "snippet": "public static final int LF \u003d \u0027\\n\u0027;",
    "begin_line": 175,
    "end_line": 175,
    "comment": "/** \n * LF char.\n * @since 2.9.0\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.LINE_SEPARATOR",
    "snippet": "@Deprecated\n    public static final String LINE_SEPARATOR \u003d System.lineSeparator();",
    "begin_line": 183,
    "end_line": 183,
    "comment": "/** \n * The system line separator string.\n * @deprecated Use {@link System#lineSeparator()}.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX",
    "snippet": "public static final String LINE_SEPARATOR_UNIX \u003d StandardLineSeparator.LF.getString();",
    "begin_line": 190,
    "end_line": 190,
    "comment": "/** \n * The Unix line separator string.\n * @see StandardLineSeparator#LF\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS",
    "snippet": "public static final String LINE_SEPARATOR_WINDOWS \u003d StandardLineSeparator.CRLF.getString();",
    "begin_line": 197,
    "end_line": 197,
    "comment": "/** \n * The Windows line separator string.\n * @see StandardLineSeparator#CRLF\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.SCRATCH_BYTE_BUFFER_RW",
    "snippet": "private static final ThreadLocal\u003cbyte[]\u003e SCRATCH_BYTE_BUFFER_RW \u003d ThreadLocal.withInitial(IOUtils::byteArray);",
    "begin_line": 202,
    "end_line": 202,
    "comment": "/** \n * Internal byte array buffer, intended for both reading and writing.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.SCRATCH_BYTE_BUFFER_WO",
    "snippet": "private static final byte[] SCRATCH_BYTE_BUFFER_WO \u003d byteArray();",
    "begin_line": 207,
    "end_line": 207,
    "comment": "/** \n * Internal byte array buffer, intended for write only operations.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.SCRATCH_CHAR_BUFFER_RW",
    "snippet": "private static final ThreadLocal\u003cchar[]\u003e SCRATCH_CHAR_BUFFER_RW \u003d ThreadLocal.withInitial(IOUtils::charArray);",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * Internal char array buffer, intended for both reading and writing.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.IOUtils",
    "src_path": "org/apache/commons/io/IOUtils.java",
    "signature": "org.apache.commons.io.IOUtils.SCRATCH_CHAR_BUFFER_WO",
    "snippet": "private static final char[] SCRATCH_CHAR_BUFFER_WO \u003d charArray();",
    "begin_line": 217,
    "end_line": 217,
    "comment": "/** \n * Internal char array buffer, intended for write only operations.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.StandardLineSeparator",
    "src_path": "org/apache/commons/io/StandardLineSeparator.java",
    "signature": "org.apache.commons.io.StandardLineSeparator.lineSeparator",
    "snippet": "private final String lineSeparator;",
    "begin_line": 45,
    "end_line": 45,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.io.filefilter.AbstractFileFilter",
    "src_path": "org/apache/commons/io/filefilter/AbstractFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.AbstractFileFilter.onAccept",
    "snippet": "private final FileVisitResult onAccept;",
    "begin_line": 51,
    "end_line": 51,
    "comment": "/** \n * What to do when this filter accepts.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.filefilter.AbstractFileFilter",
    "src_path": "org/apache/commons/io/filefilter/AbstractFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.AbstractFileFilter.onReject",
    "snippet": "private final FileVisitResult onReject;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * What to do when this filter rejects.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.filefilter.IOFileFilter",
    "src_path": "org/apache/commons/io/filefilter/IOFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY",
    "snippet": " String[] EMPTY_STRING_ARRAY \u003d {};",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * An empty String array.\n */\n"
  },
  {
    "class_name": "org.apache.commons.io.filefilter.RegexFileFilter",
    "src_path": "org/apache/commons/io/filefilter/RegexFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.RegexFileFilter.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 4269646126155225062L;",
    "begin_line": 76,
    "end_line": 76,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.io.filefilter.RegexFileFilter",
    "src_path": "org/apache/commons/io/filefilter/RegexFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.RegexFileFilter.pattern",
    "snippet": "private final Pattern pattern;",
    "begin_line": 101,
    "end_line": 101,
    "comment": "/** \n * The regular expression pattern that will be used to match file names. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.filefilter.RegexFileFilter",
    "src_path": "org/apache/commons/io/filefilter/RegexFileFilter.java",
    "signature": "org.apache.commons.io.filefilter.RegexFileFilter.pathToString",
    "snippet": "private final Function\u003cPath, String\u003e pathToString;",
    "begin_line": 104,
    "end_line": 104,
    "comment": "/** \n * How convert a path to a string. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.DEFAULT_SIZE",
    "snippet": "static final int DEFAULT_SIZE \u003d 1024;",
    "begin_line": 82,
    "end_line": 82,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.buffers",
    "snippet": "private final List\u003cbyte[]\u003e buffers \u003d new ArrayList\u003c\u003e();",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * The list of buffers, which grows and never reduces. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.currentBufferIndex",
    "snippet": "private int currentBufferIndex;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * The index of the current buffer. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.filledBufferSum",
    "snippet": "private int filledBufferSum;",
    "begin_line": 91,
    "end_line": 91,
    "comment": "/** \n * The total count of bytes in all the filled buffers. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.currentBuffer",
    "snippet": "private byte[] currentBuffer;",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * The current buffer. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.count",
    "snippet": "protected int count;",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * The total count of bytes written. \n */\n"
  },
  {
    "class_name": "org.apache.commons.io.output.AbstractByteArrayOutputStream",
    "src_path": "org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
    "signature": "org.apache.commons.io.output.AbstractByteArrayOutputStream.reuseBuffers",
    "snippet": "private boolean reuseBuffers \u003d true;",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * Flag to indicate if the buffers can be reused after reset \n */\n"
  }
]