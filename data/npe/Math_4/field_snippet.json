[
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.location",
    "snippet": "private Vector1D location;",
    "begin_line": 32,
    "end_line": 32,
    "comment": "/** \n * Vector location. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.direct",
    "snippet": "private boolean direct;",
    "begin_line": 35,
    "end_line": 35,
    "comment": "/** \n * Orientation. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO",
    "snippet": "public static final Vector1D ZERO \u003d new Vector1D(0.0);",
    "begin_line": 36,
    "end_line": 36,
    "comment": "/** \n * Origin (coordinates: 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE",
    "snippet": "public static final Vector1D ONE  \u003d new Vector1D(1.0);",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * Unit (coordinates: 1). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN",
    "snippet": "public static final Vector1D NaN \u003d new Vector1D(Double.NaN);",
    "begin_line": 43,
    "end_line": 43,
    "comment": "/** \n * A vector with all coordinates set to NaN. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY",
    "snippet": "public static final Vector1D POSITIVE_INFINITY \u003d\n        new Vector1D(Double.POSITIVE_INFINITY);",
    "begin_line": 47,
    "end_line": 48,
    "comment": "/** \n * A vector with all coordinates set to positive infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY",
    "snippet": "public static final Vector1D NEGATIVE_INFINITY \u003d\n        new Vector1D(Double.NEGATIVE_INFINITY);",
    "begin_line": 51,
    "end_line": 52,
    "comment": "/** \n * A vector with all coordinates set to negative infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 7556674948671647925L;",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Serializable UID. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.x",
    "snippet": "private final double x;",
    "begin_line": 58,
    "end_line": 58,
    "comment": "/** \n * Abscissa. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Line.direction",
    "snippet": "private Vector3D direction;",
    "begin_line": 44,
    "end_line": 44,
    "comment": "/** \n * Line direction. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Line.zero",
    "snippet": "private Vector3D zero;",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Line point closest to the origin. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLine",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLine.line",
    "snippet": "private final Line line;",
    "begin_line": 35,
    "end_line": 35,
    "comment": "/** \n * Underlying line. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLine",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLine.remainingRegion",
    "snippet": "private final IntervalsSet remainingRegion;",
    "begin_line": 38,
    "end_line": 38,
    "comment": "/** \n * Remaining region of the hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO",
    "snippet": "public static final Vector3D ZERO   \u003d new Vector3D(0, 0, 0);",
    "begin_line": 41,
    "end_line": 41,
    "comment": "/** \n * Null vector (coordinates: 0, 0, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I",
    "snippet": "public static final Vector3D PLUS_I \u003d new Vector3D(1, 0, 0);",
    "begin_line": 44,
    "end_line": 44,
    "comment": "/** \n * First canonical vector (coordinates: 1, 0, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I",
    "snippet": "public static final Vector3D MINUS_I \u003d new Vector3D(-1, 0, 0);",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Opposite of the first canonical vector (coordinates: -1, 0, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J",
    "snippet": "public static final Vector3D PLUS_J \u003d new Vector3D(0, 1, 0);",
    "begin_line": 50,
    "end_line": 50,
    "comment": "/** \n * Second canonical vector (coordinates: 0, 1, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J",
    "snippet": "public static final Vector3D MINUS_J \u003d new Vector3D(0, -1, 0);",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * Opposite of the second canonical vector (coordinates: 0, -1, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K",
    "snippet": "public static final Vector3D PLUS_K \u003d new Vector3D(0, 0, 1);",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Third canonical vector (coordinates: 0, 0, 1). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K",
    "snippet": "public static final Vector3D MINUS_K \u003d new Vector3D(0, 0, -1);",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * Opposite of the third canonical vector (coordinates: 0, 0, -1).  \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN",
    "snippet": "public static final Vector3D NaN \u003d new Vector3D(Double.NaN, Double.NaN, Double.NaN);",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * A vector with all coordinates set to NaN. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY",
    "snippet": "public static final Vector3D POSITIVE_INFINITY \u003d\n        new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
    "begin_line": 67,
    "end_line": 68,
    "comment": "/** \n * A vector with all coordinates set to positive infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY",
    "snippet": "public static final Vector3D NEGATIVE_INFINITY \u003d\n        new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
    "begin_line": 71,
    "end_line": 72,
    "comment": "/** \n * A vector with all coordinates set to negative infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 1313493323784566947L;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Serializable version identifier. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.x",
    "snippet": "private final double x;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * Abscissa. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.y",
    "snippet": "private final double y;",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * Ordinate. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.z",
    "snippet": "private final double z;",
    "begin_line": 84,
    "end_line": 84,
    "comment": "/** \n * Height. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.angle",
    "snippet": "private double angle;",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * Angle with respect to the abscissa axis. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cos",
    "snippet": "private double cos;",
    "begin_line": 68,
    "end_line": 68,
    "comment": "/** \n * Cosine of the line angle. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.sin",
    "snippet": "private double sin;",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Sine of the line angle. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.originOffset",
    "snippet": "private double originOffset;",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * Offset of the frame origin. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cXX",
    "snippet": "private double cXX;",
    "begin_line": 353,
    "end_line": 353,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cXY",
    "snippet": "private double cXY;",
    "begin_line": 354,
    "end_line": 354,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cX1",
    "snippet": "private double cX1;",
    "begin_line": 355,
    "end_line": 355,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cYX",
    "snippet": "private double cYX;",
    "begin_line": 356,
    "end_line": 356,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cYY",
    "snippet": "private double cYY;",
    "begin_line": 357,
    "end_line": 357,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.cY1",
    "snippet": "private double cY1;",
    "begin_line": 358,
    "end_line": 358,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.c1Y",
    "snippet": "private double c1Y;",
    "begin_line": 360,
    "end_line": 360,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.c1X",
    "snippet": "private double c1X;",
    "begin_line": 361,
    "end_line": 361,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Line",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Line.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Line.c11",
    "snippet": "private double c11;",
    "begin_line": 362,
    "end_line": 362,
    "comment": ""
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO",
    "snippet": "public static final Vector2D ZERO   \u003d new Vector2D(0, 0);",
    "begin_line": 37,
    "end_line": 37,
    "comment": "/** \n * Origin (coordinates: 0, 0). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN",
    "snippet": "public static final Vector2D NaN \u003d new Vector2D(Double.NaN, Double.NaN);",
    "begin_line": 41,
    "end_line": 41,
    "comment": "/** \n * A vector with all coordinates set to NaN. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY",
    "snippet": "public static final Vector2D POSITIVE_INFINITY \u003d\n        new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
    "begin_line": 45,
    "end_line": 46,
    "comment": "/** \n * A vector with all coordinates set to positive infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY",
    "snippet": "public static final Vector2D NEGATIVE_INFINITY \u003d\n        new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
    "begin_line": 49,
    "end_line": 50,
    "comment": "/** \n * A vector with all coordinates set to negative infinity. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.serialVersionUID",
    "snippet": "private static final long serialVersionUID \u003d 266938651998679754L;",
    "begin_line": 53,
    "end_line": 53,
    "comment": "/** \n * Serializable UID. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.x",
    "snippet": "private final double x;",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Abscissa. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
    "src_path": "org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
    "signature": "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.y",
    "snippet": "private final double y;",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * Ordinate. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.tree",
    "snippet": "private BSPTree\u003cS\u003e tree;",
    "begin_line": 41,
    "end_line": 41,
    "comment": "/** \n * Inside/Outside BSP tree. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.size",
    "snippet": "private double size;",
    "begin_line": 44,
    "end_line": 44,
    "comment": "/** \n * Size of the instance. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.barycenter",
    "snippet": "private Vector\u003cS\u003e barycenter;",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Barycenter. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.plusFound",
    "snippet": "private boolean plusFound;",
    "begin_line": 549,
    "end_line": 549,
    "comment": "/** \n * Indicator of inside leaf nodes found on the plus side. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractRegion",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion.minusFound",
    "snippet": "private boolean minusFound;",
    "begin_line": 552,
    "end_line": 552,
    "comment": "/** \n * Indicator of inside leaf nodes found on the plus side. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.hyperplane",
    "snippet": "private final Hyperplane\u003cS\u003e hyperplane;",
    "begin_line": 40,
    "end_line": 40,
    "comment": "/** \n * Underlying hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane",
    "src_path": "org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.remainingRegion",
    "snippet": "private final Region\u003cT\u003e remainingRegion;",
    "begin_line": 43,
    "end_line": 43,
    "comment": "/** \n * Remaining region of the hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
    "src_path": "org/apache/commons/math3/geometry/partitioning/BSPTree.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.cut",
    "snippet": "private SubHyperplane\u003cS\u003e cut;",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * Cut sub-hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
    "src_path": "org/apache/commons/math3/geometry/partitioning/BSPTree.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.plus",
    "snippet": "private BSPTree\u003cS\u003e plus;",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * Tree at the plus side of the cut hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
    "src_path": "org/apache/commons/math3/geometry/partitioning/BSPTree.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.minus",
    "snippet": "private BSPTree\u003cS\u003e minus;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * Tree at the minus side of the cut hyperplane. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
    "src_path": "org/apache/commons/math3/geometry/partitioning/BSPTree.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.parent",
    "snippet": "private BSPTree\u003cS\u003e parent;",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Parent tree. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.geometry.partitioning.BSPTree",
    "src_path": "org/apache/commons/math3/geometry/partitioning/BSPTree.java",
    "signature": "org.apache.commons.math3.geometry.partitioning.BSPTree.attribute",
    "snippet": "private Object attribute;",
    "begin_line": 78,
    "end_line": 78,
    "comment": "/** \n * Application-defined attribute. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.PI",
    "snippet": "public static final double PI \u003d 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * Archimede\u0027s constant PI, ratio of circle circumference to diameter. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.E",
    "snippet": "public static final double E \u003d 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * Napier\u0027s constant e, base of the natural logarithm. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",
    "snippet": "static final int EXP_INT_TABLE_MAX_INDEX \u003d 750;",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * Index of exp(0) in the array of integer exponentials. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",
    "snippet": "static final int EXP_INT_TABLE_LEN \u003d EXP_INT_TABLE_MAX_INDEX * 2;",
    "begin_line": 90,
    "end_line": 90,
    "comment": "/** \n * Length of the array of integer exponentials. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_MANT_LEN",
    "snippet": "static final int LN_MANT_LEN \u003d 1024;",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * Logarithm table length. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",
    "snippet": "static final int EXP_FRAC_TABLE_LEN \u003d 1025;",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * Exponential fractions table length. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE",
    "snippet": "private static final double LOG_MAX_VALUE \u003d StrictMath.log(Double.MAX_VALUE);",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * StrictMath.log(Double.MAX_VALUE):  {@value} \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",
    "snippet": "private static final boolean RECOMPUTE_TABLES_AT_RUNTIME \u003d false;",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * Indicator for tables initialization. \u003cp\u003e This compile-time constant should be set to true only if one explicitly wants to compute the tables at class loading time instead of using the already computed ones provided as literal arrays below. \u003c/p\u003e\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_2_A",
    "snippet": "private static final double LN_2_A \u003d 0.693147063255310059;",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * log(2) (high bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_2_B",
    "snippet": "private static final double LN_2_B \u003d 1.17304635250823482e-7;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * log(2) (low bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",
    "snippet": "private static final double LN_QUICK_COEF[][] \u003d {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
    "begin_line": 115,
    "end_line": 125,
    "comment": "/** \n * Coefficients for log, when input 0.99 \u003c x \u003c 1.01. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",
    "snippet": "private static final double LN_HI_PREC_COEF[][] \u003d {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
    "begin_line": 128,
    "end_line": 135,
    "comment": "/** \n * Coefficients for log in the range of 1.0 \u003c x \u003c 1.0 + 2^-10. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",
    "snippet": "private static final int SINE_TABLE_LEN \u003d 14;",
    "begin_line": 138,
    "end_line": 138,
    "comment": "/** \n * Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 \u003d PI/2 approx. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_A",
    "snippet": "private static final double SINE_TABLE_A[] \u003d\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
    "begin_line": 141,
    "end_line": 157,
    "comment": "/** \n * Sine table (high bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.SINE_TABLE_B",
    "snippet": "private static final double SINE_TABLE_B[] \u003d\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
    "begin_line": 160,
    "end_line": 176,
    "comment": "/** \n * Sine table (low bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",
    "snippet": "private static final double COSINE_TABLE_A[] \u003d\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
    "begin_line": 179,
    "end_line": 195,
    "comment": "/** \n * Cosine table (high bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",
    "snippet": "private static final double COSINE_TABLE_B[] \u003d\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
    "begin_line": 198,
    "end_line": 214,
    "comment": "/** \n * Cosine table (low bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",
    "snippet": "private static final double TANGENT_TABLE_A[] \u003d\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
    "begin_line": 218,
    "end_line": 234,
    "comment": "/** \n * Tangent table, used by atan() (high bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",
    "snippet": "private static final double TANGENT_TABLE_B[] \u003d\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
    "begin_line": 237,
    "end_line": 253,
    "comment": "/** \n * Tangent table, used by atan() (low bits). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.RECIP_2PI",
    "snippet": "private static final long RECIP_2PI[] \u003d new long[] {\n        (0x28be60dbL \u003c\u003c 32) | 0x9391054aL,\n        (0x7f09d5f4L \u003c\u003c 32) | 0x7d4d3770L,\n        (0x36d8a566L \u003c\u003c 32) | 0x4f10e410L,\n        (0x7f9458eaL \u003c\u003c 32) | 0xf7aef158L,\n        (0x6dc91b8eL \u003c\u003c 32) | 0x909374b8L,\n        (0x01924bbaL \u003c\u003c 32) | 0x82746487L,\n        (0x3f877ac7L \u003c\u003c 32) | 0x2c4a69cfL,\n        (0xba208d7dL \u003c\u003c 32) | 0x4baed121L,\n        (0x3a671c09L \u003c\u003c 32) | 0xad17df90L,\n        (0x4e64758eL \u003c\u003c 32) | 0x60d4ce7dL,\n        (0x272117e2L \u003c\u003c 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL \u003c\u003c 32) | 0xf7816603L,\n        (0xfbcbc462L \u003c\u003c 32) | 0xd6829b47L,\n        (0xdb4d9fb3L \u003c\u003c 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L \u003c\u003c 32) | 0xa797fa8bL,\n        (0x5d49eeb1L \u003c\u003c 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL \u003c\u003c 32) | 0xe294a4baL,\n         0x9afed7ecL \u003c\u003c 32  };",
    "begin_line": 256,
    "end_line": 274,
    "comment": "/** \n * Bits of 1/(2*pi), need for reducePayneHanek(). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.PI_O_4_BITS",
    "snippet": "private static final long PI_O_4_BITS[] \u003d new long[] {\n        (0xc90fdaa2L \u003c\u003c 32) | 0x2168c234L,\n        (0xc4c6628bL \u003c\u003c 32) | 0x80dc1cd1L };",
    "begin_line": 277,
    "end_line": 279,
    "comment": "/** \n * Bits of pi/4, need for reducePayneHanek(). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EIGHTHS",
    "snippet": "private static final double EIGHTHS[] \u003d {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
    "begin_line": 285,
    "end_line": 285,
    "comment": "/** \n * Eighths. This is used by sinQ, because its faster to do a table lookup than a multiply in this time-critical routine\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.CBRTTWO",
    "snippet": "private static final double CBRTTWO[] \u003d { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
    "begin_line": 288,
    "end_line": 292,
    "comment": "/** \n * Table of 2^((n+2)/3) \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.HEX_40000000",
    "snippet": "private static final long HEX_40000000 \u003d 0x40000000L;",
    "begin_line": 305,
    "end_line": 305,
    "comment": "/** \n * 0x40000000 - used to split a double into two parts, both with the low order bits cleared. Equivalent to 2^30.\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.MASK_30BITS",
    "snippet": "private static final long MASK_30BITS \u003d -1L - (HEX_40000000 -1);",
    "begin_line": 308,
    "end_line": 308,
    "comment": "/** \n * Mask used to clear low order 30 bits \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.MASK_NON_SIGN_INT",
    "snippet": "private static final int MASK_NON_SIGN_INT \u003d 0x7fffffff;",
    "begin_line": 311,
    "end_line": 311,
    "comment": "/** \n * Mask used to clear the non-sign part of an int. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.MASK_NON_SIGN_LONG",
    "snippet": "private static final long MASK_NON_SIGN_LONG \u003d 0x7fffffffffffffffl;",
    "begin_line": 314,
    "end_line": 314,
    "comment": "/** \n * Mask used to clear the non-sign part of a long. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.TWO_POWER_52",
    "snippet": "private static final double TWO_POWER_52 \u003d 4503599627370496.0;",
    "begin_line": 317,
    "end_line": 317,
    "comment": "/** \n * 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.TWO_POWER_53",
    "snippet": "private static final double TWO_POWER_53 \u003d 2 * TWO_POWER_52;",
    "begin_line": 319,
    "end_line": 319,
    "comment": "/** \n * 2^53 - double numbers this large must be even. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_3",
    "snippet": "private static final double F_1_3 \u003d 1d / 3d;",
    "begin_line": 322,
    "end_line": 322,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_5",
    "snippet": "private static final double F_1_5 \u003d 1d / 5d;",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_7",
    "snippet": "private static final double F_1_7 \u003d 1d / 7d;",
    "begin_line": 326,
    "end_line": 326,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_9",
    "snippet": "private static final double F_1_9 \u003d 1d / 9d;",
    "begin_line": 328,
    "end_line": 328,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_11",
    "snippet": "private static final double F_1_11 \u003d 1d / 11d;",
    "begin_line": 330,
    "end_line": 330,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_13",
    "snippet": "private static final double F_1_13 \u003d 1d / 13d;",
    "begin_line": 332,
    "end_line": 332,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_15",
    "snippet": "private static final double F_1_15 \u003d 1d / 15d;",
    "begin_line": 334,
    "end_line": 334,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_17",
    "snippet": "private static final double F_1_17 \u003d 1d / 17d;",
    "begin_line": 336,
    "end_line": 336,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_3_4",
    "snippet": "private static final double F_3_4 \u003d 3d / 4d;",
    "begin_line": 338,
    "end_line": 338,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_15_16",
    "snippet": "private static final double F_15_16 \u003d 15d / 16d;",
    "begin_line": 340,
    "end_line": 340,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_13_14",
    "snippet": "private static final double F_13_14 \u003d 13d / 14d;",
    "begin_line": 342,
    "end_line": 342,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_11_12",
    "snippet": "private static final double F_11_12 \u003d 11d / 12d;",
    "begin_line": 344,
    "end_line": 344,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_9_10",
    "snippet": "private static final double F_9_10 \u003d 9d / 10d;",
    "begin_line": 346,
    "end_line": 346,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_7_8",
    "snippet": "private static final double F_7_8 \u003d 7d / 8d;",
    "begin_line": 348,
    "end_line": 348,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_5_6",
    "snippet": "private static final double F_5_6 \u003d 5d / 6d;",
    "begin_line": 350,
    "end_line": 350,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_2",
    "snippet": "private static final double F_1_2 \u003d 1d / 2d;",
    "begin_line": 352,
    "end_line": 352,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.F_1_4",
    "snippet": "private static final double F_1_4 \u003d 1d / 4d;",
    "begin_line": 354,
    "end_line": 354,
    "comment": "/** \n * Constant:  {@value}. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_A",
    "snippet": "private static final double[] EXP_INT_TABLE_A;",
    "begin_line": 3727,
    "end_line": 3727,
    "comment": "/** \n * Exponential evaluated at integer values, exp(x) \u003d  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX].\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_B",
    "snippet": "private static final double[] EXP_INT_TABLE_B;",
    "begin_line": 3731,
    "end_line": 3731,
    "comment": "/** \n * Exponential evaluated at integer values, exp(x) \u003d  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX]\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_A",
    "snippet": "private static final double[] EXP_FRAC_TABLE_A;",
    "begin_line": 3767,
    "end_line": 3767,
    "comment": "/** \n * Exponential over the range of 0 - 1 in increments of 2^-10 exp(x/1024) \u003d  expFracTableA[x] + expFracTableB[x]. 1024 \u003d 2^10\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_B",
    "snippet": "private static final double[] EXP_FRAC_TABLE_B;",
    "begin_line": 3771,
    "end_line": 3771,
    "comment": "/** \n * Exponential over the range of 0 - 1 in increments of 2^-10 exp(x/1024) \u003d  expFracTableA[x] + expFracTableB[x].\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.LN_MANT",
    "snippet": "private static final double[][] LN_MANT;",
    "begin_line": 3797,
    "end_line": 3797,
    "comment": "/** \n * Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.finalK",
    "snippet": "private final int finalK;",
    "begin_line": 3817,
    "end_line": 3817,
    "comment": "/** \n * k \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.finalRemA",
    "snippet": "private final double finalRemA;",
    "begin_line": 3819,
    "end_line": 3819,
    "comment": "/** \n * remA \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.FastMath",
    "src_path": "org/apache/commons/math3/util/FastMath.java",
    "signature": "org.apache.commons.math3.util.FastMath.finalRemB",
    "snippet": "private final double finalRemB;",
    "begin_line": 3821,
    "end_line": 3821,
    "comment": "/** \n * remB \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.MathArrays",
    "src_path": "org/apache/commons/math3/util/MathArrays.java",
    "signature": "org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR",
    "snippet": "private static final int SPLIT_FACTOR \u003d 0x8000001;",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Factor used for splitting double numbers: n \u003d 2^27 + 1 (i.e.  {@value}). \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.Precision",
    "src_path": "org/apache/commons/math3/util/Precision.java",
    "signature": "org.apache.commons.math3.util.Precision.EPSILON",
    "snippet": "public static final double EPSILON;",
    "begin_line": 46,
    "end_line": 46,
    "comment": "/** \n * \u003cp\u003e Largest double-precision floating-point number such that {@code 1 + EPSILON} is numerically equal to 1. This value is an upperbound on the relative error due to rounding real numbers to double precision floating-point numbers. \u003c/p\u003e \u003cp\u003e In IEEE 754 arithmetic, this is 2\u003csup\u003e-53\u003c/sup\u003e. \u003c/p\u003e\n * @see \u003ca href\u003d\"http://en.wikipedia.org/wiki/Machine_epsilon\"\u003eMachine epsilon\u003c/a\u003e\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.Precision",
    "src_path": "org/apache/commons/math3/util/Precision.java",
    "signature": "org.apache.commons.math3.util.Precision.SAFE_MIN",
    "snippet": "public static final double SAFE_MIN;",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * Safe minimum, such that  {@code 1 / SAFE_MIN} does not overflow.\u003cbr/\u003e In IEEE 754 arithmetic, this is also the smallest normalized number 2\u003csup\u003e-1022\u003c/sup\u003e.\n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.Precision",
    "src_path": "org/apache/commons/math3/util/Precision.java",
    "signature": "org.apache.commons.math3.util.Precision.EXPONENT_OFFSET",
    "snippet": "private static final long EXPONENT_OFFSET \u003d 1023l;",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * Exponent offset in IEEE754 representation. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.Precision",
    "src_path": "org/apache/commons/math3/util/Precision.java",
    "signature": "org.apache.commons.math3.util.Precision.SGN_MASK",
    "snippet": "private static final long SGN_MASK \u003d 0x8000000000000000L;",
    "begin_line": 60,
    "end_line": 60,
    "comment": "/** \n * Offset to order signed double numbers lexicographically. \n */\n"
  },
  {
    "class_name": "org.apache.commons.math3.util.Precision",
    "src_path": "org/apache/commons/math3/util/Precision.java",
    "signature": "org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT",
    "snippet": "private static final int SGN_MASK_FLOAT \u003d 0x80000000;",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * Offset to order signed double numbers lexicographically. \n */\n"
  }
]