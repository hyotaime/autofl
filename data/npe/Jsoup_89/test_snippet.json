[
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.html()",
    "snippet": "@Test public void html() {\n        Attribute attr \u003d new Attribute(\"key\", \"value \u0026\");\n        assertEquals(\"key\u003d\\\"value \u0026amp;\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }",
    "begin_line": 9,
    "end_line": 13,
    "comment": "",
    "child_ranges": [
      "(line 10,col 9)-(line 10,col 57)",
      "(line 11,col 9)-(line 11,col 57)",
      "(line 12,col 9)-(line 12,col 51)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.testWithSupplementaryCharacterInAttributeKeyAndValue()",
    "snippet": "@Test public void testWithSupplementaryCharacterInAttributeKeyAndValue() {\n        String s \u003d new String(Character.toChars(135361));\n        Attribute attr \u003d new Attribute(s, \"A\" + s + \"B\");\n        assertEquals(s + \"\u003d\\\"A\" + s + \"B\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }",
    "begin_line": 15,
    "end_line": 20,
    "comment": "",
    "child_ranges": [
      "(line 16,col 9)-(line 16,col 57)",
      "(line 17,col 9)-(line 17,col 57)",
      "(line 18,col 9)-(line 18,col 58)",
      "(line 19,col 9)-(line 19,col 51)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.validatesKeysNotEmpty()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class) public void validatesKeysNotEmpty() {\n        Attribute attr \u003d new Attribute(\" \", \"Check\");\n    }",
    "begin_line": 22,
    "end_line": 24,
    "comment": "",
    "child_ranges": [
      "(line 23,col 9)-(line 23,col 53)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.validatesKeysNotEmptyViaSet()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class) public void validatesKeysNotEmptyViaSet() {\n        Attribute attr \u003d new Attribute(\"One\", \"Check\");\n        attr.setKey(\" \");\n    }",
    "begin_line": 26,
    "end_line": 29,
    "comment": "",
    "child_ranges": [
      "(line 27,col 9)-(line 27,col 55)",
      "(line 28,col 9)-(line 28,col 25)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.booleanAttributesAreEmptyStringValues()",
    "snippet": "@Test public void booleanAttributesAreEmptyStringValues() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv hidden\u003e\");\n        Attributes attributes \u003d doc.body().child(0).attributes();\n        assertEquals(\"\", attributes.get(\"hidden\"));\n\n        Attribute first \u003d attributes.iterator().next();\n        assertEquals(\"hidden\", first.getKey());\n        assertEquals(\"\", first.getValue());\n    }",
    "begin_line": 31,
    "end_line": 39,
    "comment": "",
    "child_ranges": [
      "(line 32,col 9)-(line 32,col 51)",
      "(line 33,col 9)-(line 33,col 65)",
      "(line 34,col 9)-(line 34,col 51)",
      "(line 36,col 9)-(line 36,col 55)",
      "(line 37,col 9)-(line 37,col 47)",
      "(line 38,col 9)-(line 38,col 43)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.AttributeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/AttributeTest.java",
    "signature": "org.jsoup.nodes.AttributeTest.settersOnOrphanAttribute()",
    "snippet": "@Test public void settersOnOrphanAttribute() {\n        Attribute attr \u003d new Attribute(\"one\", \"two\");\n        attr.setKey(\"three\");\n        String oldVal \u003d attr.setValue(\"four\");\n        assertEquals(\"two\", oldVal);\n        assertEquals(\"three\", attr.getKey());\n        assertEquals(\"four\", attr.getValue());\n        assertEquals(null, attr.parent);\n    }",
    "begin_line": 41,
    "end_line": 49,
    "comment": "",
    "child_ranges": [
      "(line 42,col 9)-(line 42,col 53)",
      "(line 43,col 9)-(line 43,col 29)",
      "(line 44,col 9)-(line 44,col 46)",
      "(line 45,col 9)-(line 45,col 36)",
      "(line 46,col 9)-(line 46,col 45)",
      "(line 47,col 9)-(line 47,col 46)",
      "(line 48,col 9)-(line 48,col 40)"
    ]
  }
]