[
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.assert0(byte[])",
    "snippet": "private void assert0(final byte[] arr) {\n        for (final byte e : arr) {\n            assertEquals(0, e);\n        }\n    }",
    "begin_line": 41,
    "end_line": 45,
    "comment": "",
    "child_ranges": [
      "(line 42,col 9)-(line 44,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.assert0(char[])",
    "snippet": "private void assert0(final char[] arr) {\n        for (final char e : arr) {\n            assertEquals(0, e);\n        }\n    }",
    "begin_line": 47,
    "end_line": 51,
    "comment": "",
    "child_ranges": [
      "(line 48,col 9)-(line 50,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.serialize(IOCase)",
    "snippet": "private IOCase serialize(final IOCase value) throws Exception {\n        final ByteArrayOutputStream buf \u003d new ByteArrayOutputStream();\n        try (final ObjectOutputStream out \u003d new ObjectOutputStream(buf)) {\n            out.writeObject(value);\n            out.flush();\n        }\n\n        final ByteArrayInputStream bufin \u003d new ByteArrayInputStream(buf.toByteArray());\n        final ObjectInputStream in \u003d new ObjectInputStream(bufin);\n        return (IOCase) in.readObject();\n    }",
    "begin_line": 53,
    "end_line": 63,
    "comment": "",
    "child_ranges": [
      "(line 54,col 9)-(line 54,col 70)",
      "(line 55,col 9)-(line 58,col 9)",
      "(line 60,col 9)-(line 60,col 87)",
      "(line 61,col 9)-(line 61,col 66)",
      "(line 62,col 9)-(line 62,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkCompare_case()",
    "snippet": "@Test\n    public void test_checkCompare_case() {\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"abc\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"abc\", \"ABC\") \u003e 0);\n\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"ABC\", \"abc\"));\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"abc\", \"ABC\"));\n\n        assertEquals(0, IOCase.SYSTEM.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo(\"ABC\", \"abc\") \u003d\u003d 0);\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo(\"abc\", \"ABC\") \u003d\u003d 0);\n    }",
    "begin_line": 66,
    "end_line": 78,
    "comment": "",
    "child_ranges": [
      "(line 67,col 9)-(line 67,col 71)",
      "(line 68,col 9)-(line 68,col 70)",
      "(line 69,col 9)-(line 69,col 70)",
      "(line 71,col 9)-(line 71,col 73)",
      "(line 72,col 9)-(line 72,col 73)",
      "(line 73,col 9)-(line 73,col 73)",
      "(line 75,col 9)-(line 75,col 68)",
      "(line 76,col 9)-(line 76,col 79)",
      "(line 77,col 9)-(line 77,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkCompare_functionality()",
    "snippet": "@Test\n    public void test_checkCompare_functionality() {\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"\") \u003e 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"\", \"ABC\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"DEF\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"DEF\", \"ABC\") \u003e 0);\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"\", \"\"));\n\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkCompareTo(\"ABC\", null));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkCompareTo(null, \"ABC\"));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkCompareTo(null, null));\n    }",
    "begin_line": 81,
    "end_line": 92,
    "comment": "",
    "child_ranges": [
      "(line 82,col 9)-(line 82,col 67)",
      "(line 83,col 9)-(line 83,col 67)",
      "(line 84,col 9)-(line 84,col 70)",
      "(line 85,col 9)-(line 85,col 70)",
      "(line 86,col 9)-(line 86,col 71)",
      "(line 87,col 9)-(line 87,col 65)",
      "(line 89,col 9)-(line 89,col 101)",
      "(line 90,col 9)-(line 90,col 101)",
      "(line 91,col 9)-(line 91,col 100)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkEndsWith_case()",
    "snippet": "@Test\n    public void test_checkEndsWith_case() {\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"Bc\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertTrue(IOCase.INSENSITIVE.checkEndsWith(\"ABC\", \"Bc\"));\n\n        assertTrue(IOCase.SYSTEM.checkEndsWith(\"ABC\", \"BC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith(\"ABC\", \"Bc\"));\n    }",
    "begin_line": 94,
    "end_line": 103,
    "comment": "",
    "child_ranges": [
      "(line 95,col 9)-(line 95,col 64)",
      "(line 96,col 9)-(line 96,col 65)",
      "(line 98,col 9)-(line 98,col 66)",
      "(line 99,col 9)-(line 99,col 66)",
      "(line 101,col 9)-(line 101,col 61)",
      "(line 102,col 9)-(line 102,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkEndsWith_functionality()",
    "snippet": "@Test\n    public void test_checkEndsWith_functionality() {\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"\", \"\"));\n\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", null));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(null, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(null, null));\n    }",
    "begin_line": 106,
    "end_line": 120,
    "comment": "",
    "child_ranges": [
      "(line 107,col 9)-(line 107,col 62)",
      "(line 108,col 9)-(line 108,col 64)",
      "(line 109,col 9)-(line 109,col 65)",
      "(line 110,col 9)-(line 110,col 65)",
      "(line 111,col 9)-(line 111,col 64)",
      "(line 112,col 9)-(line 112,col 63)",
      "(line 113,col 9)-(line 113,col 67)",
      "(line 114,col 9)-(line 114,col 63)",
      "(line 115,col 9)-(line 115,col 59)",
      "(line 117,col 9)-(line 117,col 65)",
      "(line 118,col 9)-(line 118,col 65)",
      "(line 119,col 9)-(line 119,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkEquals_case()",
    "snippet": "@Test\n    public void test_checkEquals_case() {\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"Abc\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.INSENSITIVE.checkEquals(\"ABC\", \"Abc\"));\n\n        assertTrue(IOCase.SYSTEM.checkEquals(\"ABC\", \"ABC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkEquals(\"ABC\", \"Abc\"));\n    }",
    "begin_line": 123,
    "end_line": 132,
    "comment": "",
    "child_ranges": [
      "(line 124,col 9)-(line 124,col 63)",
      "(line 125,col 9)-(line 125,col 64)",
      "(line 127,col 9)-(line 127,col 65)",
      "(line 128,col 9)-(line 128,col 65)",
      "(line 130,col 9)-(line 130,col 60)",
      "(line 131,col 9)-(line 131,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkEquals_functionality()",
    "snippet": "@Test\n    public void test_checkEquals_functionality() {\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"\", \"\"));\n\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", null));\n        assertFalse(IOCase.SENSITIVE.checkEquals(null, \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEquals(null, null));\n    }",
    "begin_line": 135,
    "end_line": 149,
    "comment": "",
    "child_ranges": [
      "(line 136,col 9)-(line 136,col 61)",
      "(line 137,col 9)-(line 137,col 62)",
      "(line 138,col 9)-(line 138,col 63)",
      "(line 139,col 9)-(line 139,col 63)",
      "(line 140,col 9)-(line 140,col 63)",
      "(line 141,col 9)-(line 141,col 62)",
      "(line 142,col 9)-(line 142,col 65)",
      "(line 143,col 9)-(line 143,col 61)",
      "(line 144,col 9)-(line 144,col 57)",
      "(line 146,col 9)-(line 146,col 63)",
      "(line 147,col 9)-(line 147,col 63)",
      "(line 148,col 9)-(line 148,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkIndexOf_case()",
    "snippet": "@Test\n    public void test_checkIndexOf_case() {\n        assertEquals(1,  IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(-1, IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, \"Bc\"));\n\n        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf(\"ABC\", 0, \"Bc\"));\n\n        assertEquals(1, IOCase.SYSTEM.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf(\"ABC\", 0, \"Bc\"));\n    }",
    "begin_line": 152,
    "end_line": 161,
    "comment": "",
    "child_ranges": [
      "(line 153,col 9)-(line 153,col 72)",
      "(line 154,col 9)-(line 154,col 72)",
      "(line 156,col 9)-(line 156,col 73)",
      "(line 157,col 9)-(line 157,col 73)",
      "(line 159,col 9)-(line 159,col 68)",
      "(line 160,col 9)-(line 160,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkIndexOf_functionality()",
    "snippet": "@Test\n    public void test_checkIndexOf_functionality() {\n\n        // start\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"A\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"A\"));\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"AB\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"AB\"));\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"ABC\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"ABC\"));\n\n        // middle\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"D\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"D\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"D\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DE\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"DE\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"DE\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DEF\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"DEF\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"DEF\"));\n\n        // end\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"J\"));\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"J\"));\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 9, \"J\"));\n        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"IJ\"));\n        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"IJ\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 9, \"IJ\"));\n        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 6, \"HIJ\"));\n        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 7, \"HIJ\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"HIJ\"));\n\n        // not found\n        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DED\"));\n\n        // too long\n        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf(\"DEF\", 0, \"ABCDEFGHIJ\"));\n\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, null));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkIndexOf(null, 0, \"ABC\"));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkIndexOf(null, 0, null));\n    }",
    "begin_line": 164,
    "end_line": 205,
    "comment": "",
    "child_ranges": [
      "(line 167,col 9)-(line 167,col 79)",
      "(line 168,col 9)-(line 168,col 79)",
      "(line 169,col 9)-(line 169,col 80)",
      "(line 170,col 9)-(line 170,col 80)",
      "(line 171,col 9)-(line 171,col 81)",
      "(line 172,col 9)-(line 172,col 81)",
      "(line 175,col 9)-(line 175,col 79)",
      "(line 176,col 9)-(line 176,col 79)",
      "(line 177,col 9)-(line 177,col 79)",
      "(line 178,col 9)-(line 178,col 80)",
      "(line 179,col 9)-(line 179,col 80)",
      "(line 180,col 9)-(line 180,col 80)",
      "(line 181,col 9)-(line 181,col 81)",
      "(line 182,col 9)-(line 182,col 81)",
      "(line 183,col 9)-(line 183,col 81)",
      "(line 186,col 9)-(line 186,col 79)",
      "(line 187,col 9)-(line 187,col 79)",
      "(line 188,col 9)-(line 188,col 79)",
      "(line 189,col 9)-(line 189,col 80)",
      "(line 190,col 9)-(line 190,col 80)",
      "(line 191,col 9)-(line 191,col 80)",
      "(line 192,col 9)-(line 192,col 81)",
      "(line 193,col 9)-(line 193,col 81)",
      "(line 194,col 9)-(line 194,col 81)",
      "(line 197,col 9)-(line 197,col 82)",
      "(line 200,col 9)-(line 200,col 82)",
      "(line 202,col 9)-(line 202,col 102)",
      "(line 203,col 9)-(line 203,col 102)",
      "(line 204,col 9)-(line 204,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkRegionMatches_case()",
    "snippet": "@Test\n    public void test_checkRegionMatches_case() {\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertTrue(IOCase.INSENSITIVE.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n\n        assertTrue(IOCase.SYSTEM.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n    }",
    "begin_line": 208,
    "end_line": 217,
    "comment": "",
    "child_ranges": [
      "(line 209,col 9)-(line 209,col 72)",
      "(line 210,col 9)-(line 210,col 73)",
      "(line 212,col 9)-(line 212,col 74)",
      "(line 213,col 9)-(line 213,col 74)",
      "(line 215,col 9)-(line 215,col 69)",
      "(line 216,col 9)-(line 216,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkRegionMatches_functionality()",
    "snippet": "@Test\n    public void test_checkRegionMatches_functionality() {\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"A\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 0, \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"\", 0, \"\"));\n\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 1, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 1, \"\"));\n\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, null));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(null, 0, \"ABC\"));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(null, 0, null));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, null));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(null, 1, \"ABC\"));\n        assertThrows(NullPointerException.class, () -\u003e IOCase.SENSITIVE.checkRegionMatches(null, 1, null));\n    }",
    "begin_line": 220,
    "end_line": 247,
    "comment": "",
    "child_ranges": [
      "(line 221,col 9)-(line 221,col 70)",
      "(line 222,col 9)-(line 222,col 71)",
      "(line 223,col 9)-(line 223,col 72)",
      "(line 224,col 9)-(line 224,col 73)",
      "(line 225,col 9)-(line 225,col 73)",
      "(line 226,col 9)-(line 226,col 72)",
      "(line 227,col 9)-(line 227,col 75)",
      "(line 228,col 9)-(line 228,col 71)",
      "(line 229,col 9)-(line 229,col 67)",
      "(line 231,col 9)-(line 231,col 70)",
      "(line 232,col 9)-(line 232,col 72)",
      "(line 233,col 9)-(line 233,col 73)",
      "(line 234,col 9)-(line 234,col 74)",
      "(line 235,col 9)-(line 235,col 72)",
      "(line 236,col 9)-(line 236,col 72)",
      "(line 237,col 9)-(line 237,col 75)",
      "(line 238,col 9)-(line 238,col 71)",
      "(line 239,col 9)-(line 239,col 68)",
      "(line 241,col 9)-(line 241,col 108)",
      "(line 242,col 9)-(line 242,col 108)",
      "(line 243,col 9)-(line 243,col 107)",
      "(line 244,col 9)-(line 244,col 108)",
      "(line 245,col 9)-(line 245,col 108)",
      "(line 246,col 9)-(line 246,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkStartsWith_case()",
    "snippet": "@Test\n    public void test_checkStartsWith_case() {\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"Ab\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.INSENSITIVE.checkStartsWith(\"ABC\", \"Ab\"));\n\n        assertTrue(IOCase.SYSTEM.checkStartsWith(\"ABC\", \"AB\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkStartsWith(\"ABC\", \"Ab\"));\n    }",
    "begin_line": 250,
    "end_line": 259,
    "comment": "",
    "child_ranges": [
      "(line 251,col 9)-(line 251,col 66)",
      "(line 252,col 9)-(line 252,col 67)",
      "(line 254,col 9)-(line 254,col 68)",
      "(line 255,col 9)-(line 255,col 68)",
      "(line 257,col 9)-(line 257,col 63)",
      "(line 258,col 9)-(line 258,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_checkStartsWith_functionality()",
    "snippet": "@Test\n    public void test_checkStartsWith_functionality() {\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"A\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"\", \"\"));\n\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", null));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(null, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(null, null));\n    }",
    "begin_line": 262,
    "end_line": 276,
    "comment": "",
    "child_ranges": [
      "(line 263,col 9)-(line 263,col 64)",
      "(line 264,col 9)-(line 264,col 65)",
      "(line 265,col 9)-(line 265,col 66)",
      "(line 266,col 9)-(line 266,col 67)",
      "(line 267,col 9)-(line 267,col 67)",
      "(line 268,col 9)-(line 268,col 66)",
      "(line 269,col 9)-(line 269,col 69)",
      "(line 270,col 9)-(line 270,col 65)",
      "(line 271,col 9)-(line 271,col 61)",
      "(line 273,col 9)-(line 273,col 67)",
      "(line 274,col 9)-(line 274,col 67)",
      "(line 275,col 9)-(line 275,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_forName()",
    "snippet": "@Test\n    public void test_forName() {\n        assertEquals(IOCase.SENSITIVE, IOCase.forName(\"Sensitive\"));\n        assertEquals(IOCase.INSENSITIVE, IOCase.forName(\"Insensitive\"));\n        assertEquals(IOCase.SYSTEM, IOCase.forName(\"System\"));\n        assertThrows(IllegalArgumentException.class, () -\u003e IOCase.forName(\"Blah\"));\n        assertThrows(IllegalArgumentException.class, () -\u003e IOCase.forName(null));\n    }",
    "begin_line": 279,
    "end_line": 285,
    "comment": "",
    "child_ranges": [
      "(line 280,col 9)-(line 280,col 68)",
      "(line 281,col 9)-(line 281,col 72)",
      "(line 282,col 9)-(line 282,col 62)",
      "(line 283,col 9)-(line 283,col 83)",
      "(line 284,col 9)-(line 284,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_getName()",
    "snippet": "@Test\n    public void test_getName() {\n        assertEquals(\"Sensitive\", IOCase.SENSITIVE.getName());\n        assertEquals(\"Insensitive\", IOCase.INSENSITIVE.getName());\n        assertEquals(\"System\", IOCase.SYSTEM.getName());\n    }",
    "begin_line": 288,
    "end_line": 292,
    "comment": "",
    "child_ranges": [
      "(line 289,col 9)-(line 289,col 62)",
      "(line 290,col 9)-(line 290,col 66)",
      "(line 291,col 9)-(line 291,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_getScratchByteArray()",
    "snippet": "@Test\n    public void test_getScratchByteArray() {\n        final byte[] array \u003d IOUtils.getScratchByteArray();\n        assert0(array);\n        Arrays.fill(array, (byte) 1);\n        assert0(IOUtils.getScratchCharArray());\n    }",
    "begin_line": 295,
    "end_line": 300,
    "comment": "",
    "child_ranges": [
      "(line 296,col 9)-(line 296,col 59)",
      "(line 297,col 9)-(line 297,col 23)",
      "(line 298,col 9)-(line 298,col 37)",
      "(line 299,col 9)-(line 299,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_getScratchByteArrayWriteOnly()",
    "snippet": "@Test\n    public void test_getScratchByteArrayWriteOnly() {\n        final byte[] array \u003d IOUtils.getScratchByteArrayWriteOnly();\n        assert0(array);\n        Arrays.fill(array, (byte) 1);\n        assert0(IOUtils.getScratchCharArray());\n    }",
    "begin_line": 303,
    "end_line": 308,
    "comment": "",
    "child_ranges": [
      "(line 304,col 9)-(line 304,col 68)",
      "(line 305,col 9)-(line 305,col 23)",
      "(line 306,col 9)-(line 306,col 37)",
      "(line 307,col 9)-(line 307,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_getScratchCharArray()",
    "snippet": "@Test\n    public void test_getScratchCharArray() {\n        final char[] array \u003d IOUtils.getScratchCharArray();\n        assert0(array);\n        Arrays.fill(array, (char) 1);\n        assert0(IOUtils.getScratchCharArray());\n    }",
    "begin_line": 311,
    "end_line": 316,
    "comment": "",
    "child_ranges": [
      "(line 312,col 9)-(line 312,col 59)",
      "(line 313,col 9)-(line 313,col 23)",
      "(line 314,col 9)-(line 314,col 37)",
      "(line 315,col 9)-(line 315,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_getScratchCharArrayWriteOnly()",
    "snippet": "@Test\n    public void test_getScratchCharArrayWriteOnly() {\n        final char[] array \u003d IOUtils.getScratchCharArrayWriteOnly();\n        assert0(array);\n        Arrays.fill(array, (char) 1);\n        assert0(IOUtils.getScratchCharArray());\n    }",
    "begin_line": 319,
    "end_line": 324,
    "comment": "",
    "child_ranges": [
      "(line 320,col 9)-(line 320,col 68)",
      "(line 321,col 9)-(line 321,col 23)",
      "(line 322,col 9)-(line 322,col 37)",
      "(line 323,col 9)-(line 323,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_isCaseSensitive()",
    "snippet": "@Test\n    public void test_isCaseSensitive() {\n        assertTrue(IOCase.SENSITIVE.isCaseSensitive());\n        assertFalse(IOCase.INSENSITIVE.isCaseSensitive());\n        assertEquals(!WINDOWS, IOCase.SYSTEM.isCaseSensitive());\n    }",
    "begin_line": 327,
    "end_line": 331,
    "comment": "",
    "child_ranges": [
      "(line 328,col 9)-(line 328,col 55)",
      "(line 329,col 9)-(line 329,col 58)",
      "(line 330,col 9)-(line 330,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_isCaseSensitive_static()",
    "snippet": "@Test\n    public void test_isCaseSensitive_static() {\n        assertTrue(IOCase.isCaseSensitive(IOCase.SENSITIVE));\n        assertFalse(IOCase.isCaseSensitive(IOCase.INSENSITIVE));\n        assertEquals(!WINDOWS, IOCase.isCaseSensitive(IOCase.SYSTEM));\n    }",
    "begin_line": 334,
    "end_line": 338,
    "comment": "",
    "child_ranges": [
      "(line 335,col 9)-(line 335,col 61)",
      "(line 336,col 9)-(line 336,col 64)",
      "(line 337,col 9)-(line 337,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_serialization()",
    "snippet": "@Test\n    public void test_serialization() throws Exception {\n        assertSame(IOCase.SENSITIVE, serialize(IOCase.SENSITIVE));\n        assertSame(IOCase.INSENSITIVE, serialize(IOCase.INSENSITIVE));\n        assertSame(IOCase.SYSTEM, serialize(IOCase.SYSTEM));\n    }",
    "begin_line": 341,
    "end_line": 345,
    "comment": "",
    "child_ranges": [
      "(line 342,col 9)-(line 342,col 66)",
      "(line 343,col 9)-(line 343,col 70)",
      "(line 344,col 9)-(line 344,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTest.java",
    "signature": "org.apache.commons.io.IOCaseTest.test_toString()",
    "snippet": "@Test\n    public void test_toString() {\n        assertEquals(\"Sensitive\", IOCase.SENSITIVE.toString());\n        assertEquals(\"Insensitive\", IOCase.INSENSITIVE.toString());\n        assertEquals(\"System\", IOCase.SYSTEM.toString());\n    }",
    "begin_line": 348,
    "end_line": 352,
    "comment": "",
    "child_ranges": [
      "(line 349,col 9)-(line 349,col 63)",
      "(line 350,col 9)-(line 350,col 67)",
      "(line 351,col 9)-(line 351,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testAgeFilter()",
    "snippet": "@Test\n    public void testAgeFilter() throws Exception {\n        final File oldFile \u003d new File(temporaryFolder, \"old.txt\");\n        final Path oldPath \u003d oldFile.toPath();\n        final File reference \u003d new File(temporaryFolder, \"reference.txt\");\n        final File newFile \u003d new File(temporaryFolder, \"new.txt\");\n        final Path newPath \u003d newFile.toPath();\n\n        if (!oldFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + oldFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(oldFile.toPath()))) {\n            TestUtils.generateTestData(output1, 0);\n        }\n\n        do {\n            try {\n                TestUtils.sleep(1000);\n            } catch (final InterruptedException ie) {\n                // ignore\n            }\n            if (!reference.getParentFile().exists()) {\n                fail(\"Cannot create file \" + reference + \" as the parent directory does not exist\");\n            }\n            try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(reference.toPath()))) {\n                TestUtils.generateTestData(output, 0);\n            }\n        } while (equalsLastModified(oldFile, reference));\n\n        final Date date \u003d new Date();\n        final long now \u003d date.getTime();\n\n        do {\n            try {\n                TestUtils.sleep(1000);\n            } catch (final InterruptedException ie) {\n                // ignore\n            }\n            if (!newFile.getParentFile().exists()) {\n                fail(\"Cannot create file \" + newFile + \" as the parent directory does not exist\");\n            }\n            try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(newFile.toPath()))) {\n                TestUtils.generateTestData(output, 0);\n            }\n        } while (equalsLastModified(reference, newFile));\n\n        final IOFileFilter filter1 \u003d FileFilterUtils.ageFileFilter(now);\n        final IOFileFilter filter2 \u003d FileFilterUtils.ageFileFilter(now, true);\n        final IOFileFilter filter3 \u003d FileFilterUtils.ageFileFilter(now, false);\n        final IOFileFilter filter4 \u003d FileFilterUtils.ageFileFilter(date);\n        final IOFileFilter filter5 \u003d FileFilterUtils.ageFileFilter(date, true);\n        final IOFileFilter filter6 \u003d FileFilterUtils.ageFileFilter(date, false);\n        final IOFileFilter filter7 \u003d FileFilterUtils.ageFileFilter(reference);\n        final IOFileFilter filter8 \u003d FileFilterUtils.ageFileFilter(reference, true);\n        final IOFileFilter filter9 \u003d FileFilterUtils.ageFileFilter(reference, false);\n\n        assertFiltering(filter1, oldFile, true);\n        assertFiltering(filter2, oldFile, true);\n        assertFiltering(filter3, oldFile, false);\n        assertFiltering(filter4, oldFile, true);\n        assertFiltering(filter5, oldFile, true);\n        assertFiltering(filter6, oldFile, false);\n        assertFiltering(filter7, oldFile, true);\n        assertFiltering(filter8, oldFile, true);\n        assertFiltering(filter9, oldFile, false);\n        assertFiltering(filter1, newFile, false);\n        assertFiltering(filter2, newFile, false);\n        assertFiltering(filter3, newFile, true);\n        assertFiltering(filter4, newFile, false);\n        assertFiltering(filter5, newFile, false);\n        assertFiltering(filter6, newFile, true);\n        assertFiltering(filter7, newFile, false);\n        assertFiltering(filter8, newFile, false);\n        assertFiltering(filter9, newFile, true);\n        //\n        assertFiltering(filter1, oldPath, true);\n        assertFiltering(filter2, oldPath, true);\n        assertFiltering(filter3, oldPath, false);\n        assertFiltering(filter4, oldPath, true);\n        assertFiltering(filter5, oldPath, true);\n        assertFiltering(filter6, oldPath, false);\n        assertFiltering(filter7, oldPath, true);\n        assertFiltering(filter8, oldPath, true);\n        assertFiltering(filter9, oldPath, false);\n        assertFiltering(filter1, newPath, false);\n        assertFiltering(filter2, newPath, false);\n        assertFiltering(filter3, newPath, true);\n        assertFiltering(filter4, newPath, false);\n        assertFiltering(filter5, newPath, false);\n        assertFiltering(filter6, newPath, true);\n        assertFiltering(filter7, newPath, false);\n        assertFiltering(filter8, newPath, false);\n        assertFiltering(filter9, newPath, true);\n    }",
    "begin_line": 62,
    "end_line": 154,
    "comment": "",
    "child_ranges": [
      "(line 63,col 9)-(line 63,col 66)",
      "(line 64,col 9)-(line 64,col 46)",
      "(line 65,col 9)-(line 65,col 74)",
      "(line 66,col 9)-(line 66,col 66)",
      "(line 67,col 9)-(line 67,col 46)",
      "(line 69,col 9)-(line 71,col 9)",
      "(line 72,col 9)-(line 74,col 9)",
      "(line 76,col 9)-(line 88,col 57)",
      "(line 90,col 9)-(line 90,col 37)",
      "(line 91,col 9)-(line 91,col 40)",
      "(line 93,col 9)-(line 105,col 57)",
      "(line 107,col 9)-(line 107,col 72)",
      "(line 108,col 9)-(line 108,col 78)",
      "(line 109,col 9)-(line 109,col 79)",
      "(line 110,col 9)-(line 110,col 73)",
      "(line 111,col 9)-(line 111,col 79)",
      "(line 112,col 9)-(line 112,col 80)",
      "(line 113,col 9)-(line 113,col 78)",
      "(line 114,col 9)-(line 114,col 84)",
      "(line 115,col 9)-(line 115,col 85)",
      "(line 117,col 9)-(line 117,col 48)",
      "(line 118,col 9)-(line 118,col 48)",
      "(line 119,col 9)-(line 119,col 49)",
      "(line 120,col 9)-(line 120,col 48)",
      "(line 121,col 9)-(line 121,col 48)",
      "(line 122,col 9)-(line 122,col 49)",
      "(line 123,col 9)-(line 123,col 48)",
      "(line 124,col 9)-(line 124,col 48)",
      "(line 125,col 9)-(line 125,col 49)",
      "(line 126,col 9)-(line 126,col 49)",
      "(line 127,col 9)-(line 127,col 49)",
      "(line 128,col 9)-(line 128,col 48)",
      "(line 129,col 9)-(line 129,col 49)",
      "(line 130,col 9)-(line 130,col 49)",
      "(line 131,col 9)-(line 131,col 48)",
      "(line 132,col 9)-(line 132,col 49)",
      "(line 133,col 9)-(line 133,col 49)",
      "(line 134,col 9)-(line 134,col 48)",
      "(line 136,col 9)-(line 136,col 48)",
      "(line 137,col 9)-(line 137,col 48)",
      "(line 138,col 9)-(line 138,col 49)",
      "(line 139,col 9)-(line 139,col 48)",
      "(line 140,col 9)-(line 140,col 48)",
      "(line 141,col 9)-(line 141,col 49)",
      "(line 142,col 9)-(line 142,col 48)",
      "(line 143,col 9)-(line 143,col 48)",
      "(line 144,col 9)-(line 144,col 49)",
      "(line 145,col 9)-(line 145,col 49)",
      "(line 146,col 9)-(line 146,col 49)",
      "(line 147,col 9)-(line 147,col 48)",
      "(line 148,col 9)-(line 148,col 49)",
      "(line 149,col 9)-(line 149,col 49)",
      "(line 150,col 9)-(line 150,col 48)",
      "(line 151,col 9)-(line 151,col 49)",
      "(line 152,col 9)-(line 152,col 49)",
      "(line 153,col 9)-(line 153,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testAnd()",
    "snippet": "@Test\n    public void testAnd() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        assertFiltering(trueFilter.and(trueFilter), new File(\"foo.test\"), true);\n        assertFiltering(trueFilter.and(falseFilter), new File(\"foo.test\"), false);\n        assertFiltering(falseFilter.and(trueFilter), new File(\"foo.test\"), false);\n        assertFiltering(falseFilter.and(falseFilter), new File(\"foo.test\"), false);\n    }",
    "begin_line": 157,
    "end_line": 164,
    "comment": "",
    "child_ranges": [
      "(line 158,col 9)-(line 158,col 64)",
      "(line 159,col 9)-(line 159,col 66)",
      "(line 160,col 9)-(line 160,col 80)",
      "(line 161,col 9)-(line 161,col 82)",
      "(line 162,col 9)-(line 162,col 82)",
      "(line 163,col 9)-(line 163,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testAnd2()",
    "snippet": "@Test\n    public void testAnd2() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        assertFiltering(new AndFileFilter(trueFilter, trueFilter), new File(\"foo.test\"), true);\n        assertFiltering(new AndFileFilter(trueFilter, falseFilter), new File(\"foo.test\"), false);\n        assertFiltering(new AndFileFilter(falseFilter, trueFilter), new File(\"foo.test\"), false);\n        assertFiltering(new AndFileFilter(falseFilter, falseFilter), new File(\"foo.test\"), false);\n\n        final List\u003cIOFileFilter\u003e filters \u003d new ArrayList\u003c\u003e();\n        assertFiltering(new AndFileFilter(filters), new File(\"test\"), false);\n        assertFiltering(new AndFileFilter(), new File(\"test\"), false);\n\n        assertThrows(NullPointerException.class, () -\u003e new AndFileFilter(falseFilter, null));\n        assertThrows(NullPointerException.class, () -\u003e new AndFileFilter(null, falseFilter));\n        assertThrows(NullPointerException.class, () -\u003e new AndFileFilter((List\u003cIOFileFilter\u003e) null));\n    }",
    "begin_line": 167,
    "end_line": 182,
    "comment": "",
    "child_ranges": [
      "(line 168,col 9)-(line 168,col 64)",
      "(line 169,col 9)-(line 169,col 66)",
      "(line 170,col 9)-(line 170,col 95)",
      "(line 171,col 9)-(line 171,col 97)",
      "(line 172,col 9)-(line 172,col 97)",
      "(line 173,col 9)-(line 173,col 98)",
      "(line 175,col 9)-(line 175,col 61)",
      "(line 176,col 9)-(line 176,col 77)",
      "(line 177,col 9)-(line 177,col 70)",
      "(line 179,col 9)-(line 179,col 93)",
      "(line 180,col 9)-(line 180,col 93)",
      "(line 181,col 9)-(line 181,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testAndArray()",
    "snippet": "@Test\n    public void testAndArray() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        assertFiltering(new AndFileFilter(trueFilter, trueFilter, trueFilter), new File(\"foo.test\"), true);\n        assertFiltering(new AndFileFilter(trueFilter, falseFilter, falseFilter), new File(\"foo.test\"), false);\n        assertFiltering(new AndFileFilter(falseFilter, trueFilter, trueFilter), new File(\"foo.test\"), false);\n        assertFiltering(new AndFileFilter(falseFilter, falseFilter, falseFilter), new File(\"foo.test\"), false);\n\n        final List\u003cIOFileFilter\u003e filters \u003d new ArrayList\u003c\u003e();\n        assertFiltering(new AndFileFilter(filters), new File(\"test\"), false);\n        assertFiltering(new AndFileFilter(), new File(\"test\"), false);\n    }",
    "begin_line": 185,
    "end_line": 196,
    "comment": "",
    "child_ranges": [
      "(line 186,col 9)-(line 186,col 64)",
      "(line 187,col 9)-(line 187,col 66)",
      "(line 188,col 9)-(line 188,col 107)",
      "(line 189,col 9)-(line 189,col 110)",
      "(line 190,col 9)-(line 190,col 109)",
      "(line 191,col 9)-(line 191,col 111)",
      "(line 193,col 9)-(line 193,col 61)",
      "(line 194,col 9)-(line 194,col 77)",
      "(line 195,col 9)-(line 195,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testCanExecute()",
    "snippet": "@Test\n    public void testCanExecute() throws Exception {\n        assumeTrue(SystemUtils.IS_OS_WINDOWS);\n        try (TempFile executablePath \u003d TempFile.create(getClass().getSimpleName(), null)) {\n            final File executableFile \u003d executablePath.toFile();\n            try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(executablePath.get()))) {\n                TestUtils.generateTestData(output, 32);\n            }\n            assertTrue(executableFile.setExecutable(true));\n            assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executablePath.get(), true);\n            assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, (Path) null, false);\n            assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executableFile, true);\n            assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, (File) null, false);\n            executableFile.setExecutable(false);\n            assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executablePath.get(), false);\n            assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, (Path) null, false);\n            assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executableFile, false);\n            assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, (File) null, false);\n        }\n    }",
    "begin_line": 199,
    "end_line": 217,
    "comment": "",
    "child_ranges": [
      "(line 200,col 9)-(line 200,col 46)",
      "(line 201,col 9)-(line 216,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testCanRead()",
    "snippet": "@Test\n    public void testCanRead() throws Exception {\n        final File readOnlyFile \u003d new File(temporaryFolder, \"read-only-file1.txt\");\n        final Path readOnlyPath \u003d readOnlyFile.toPath();\n        if (!readOnlyFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + readOnlyFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(readOnlyFile.toPath()))) {\n            TestUtils.generateTestData(output, 32);\n        }\n        assertTrue(readOnlyFile.setReadOnly());\n        assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true);\n        assertFiltering(CanReadFileFilter.CAN_READ, (File) null, false);\n        assertFiltering(CanReadFileFilter.CAN_READ, readOnlyPath, true);\n        assertFiltering(CanReadFileFilter.CAN_READ, (Path) null, false);\n        assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false);\n        assertFiltering(CanReadFileFilter.CANNOT_READ, (File) null, true);\n        assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyPath, false);\n        assertFiltering(CanReadFileFilter.CANNOT_READ, (Path) null, true);\n        assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true);\n        assertFiltering(CanReadFileFilter.READ_ONLY, (File) null, false);\n        assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyPath, true);\n        assertFiltering(CanReadFileFilter.READ_ONLY, (Path) null, false);\n        readOnlyFile.delete();\n    }",
    "begin_line": 220,
    "end_line": 243,
    "comment": "",
    "child_ranges": [
      "(line 221,col 9)-(line 221,col 83)",
      "(line 222,col 9)-(line 222,col 56)",
      "(line 223,col 9)-(line 225,col 9)",
      "(line 226,col 9)-(line 228,col 9)",
      "(line 229,col 9)-(line 229,col 47)",
      "(line 230,col 9)-(line 230,col 72)",
      "(line 231,col 9)-(line 231,col 72)",
      "(line 232,col 9)-(line 232,col 72)",
      "(line 233,col 9)-(line 233,col 72)",
      "(line 234,col 9)-(line 234,col 76)",
      "(line 235,col 9)-(line 235,col 74)",
      "(line 236,col 9)-(line 236,col 76)",
      "(line 237,col 9)-(line 237,col 74)",
      "(line 238,col 9)-(line 238,col 73)",
      "(line 239,col 9)-(line 239,col 73)",
      "(line 240,col 9)-(line 240,col 73)",
      "(line 241,col 9)-(line 241,col 73)",
      "(line 242,col 9)-(line 242,col 30)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testCanWrite()",
    "snippet": "@Test\n    public void testCanWrite() throws Exception {\n        final File readOnlyFile \u003d new File(temporaryFolder, \"read-only-file2.txt\");\n        final Path readOnlyPath \u003d readOnlyFile.toPath();\n        if (!readOnlyFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + readOnlyFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(readOnlyFile.toPath()))) {\n            TestUtils.generateTestData(output, 32);\n        }\n        assertTrue(readOnlyFile.setReadOnly());\n        assertFiltering(CanWriteFileFilter.CAN_WRITE, temporaryFolder, true);\n        assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);\n        assertFiltering(CanWriteFileFilter.CAN_WRITE, (File) null, false);\n        assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyPath, false);\n        assertFiltering(CanWriteFileFilter.CAN_WRITE, (Path) null, false);\n        assertFiltering(CanWriteFileFilter.CANNOT_WRITE, temporaryFolder, false);\n        assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);\n        assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyPath, true);\n        assertFiltering(CanWriteFileFilter.CANNOT_WRITE, (File) null, true);\n        assertFiltering(CanWriteFileFilter.CANNOT_WRITE, (Path) null, true);\n        readOnlyFile.delete();\n    }",
    "begin_line": 246,
    "end_line": 267,
    "comment": "",
    "child_ranges": [
      "(line 247,col 9)-(line 247,col 83)",
      "(line 248,col 9)-(line 248,col 56)",
      "(line 249,col 9)-(line 251,col 9)",
      "(line 252,col 9)-(line 254,col 9)",
      "(line 255,col 9)-(line 255,col 47)",
      "(line 256,col 9)-(line 256,col 77)",
      "(line 257,col 9)-(line 257,col 75)",
      "(line 258,col 9)-(line 258,col 74)",
      "(line 259,col 9)-(line 259,col 75)",
      "(line 260,col 9)-(line 260,col 74)",
      "(line 261,col 9)-(line 261,col 81)",
      "(line 262,col 9)-(line 262,col 77)",
      "(line 263,col 9)-(line 263,col 77)",
      "(line 264,col 9)-(line 264,col 76)",
      "(line 265,col 9)-(line 265,col 76)",
      "(line 266,col 9)-(line 266,col 30)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testDelegateFileFilter()",
    "snippet": "@Test\n    public void testDelegateFileFilter() throws IOException {\n        final OrFileFilter orFilter \u003d new OrFileFilter();\n        final File testFile \u003d new File(\"test.txt\");\n\n        IOFileFilter filter \u003d new DelegateFileFilter((FileFilter) orFilter);\n        assertFiltering(filter, testFile, false);\n        assertNotNull(filter.toString()); // TODO better test\n\n        filter \u003d new DelegateFileFilter((FilenameFilter) orFilter);\n        assertFiltering(filter, testFile, false);\n        assertNotNull(filter.toString()); // TODO better test\n\n        assertThrows(NullPointerException.class, () -\u003e new DelegateFileFilter((FileFilter) null));\n        assertThrows(NullPointerException.class, () -\u003e new DelegateFileFilter((FilenameFilter) null));\n    }",
    "begin_line": 270,
    "end_line": 284,
    "comment": "",
    "child_ranges": [
      "(line 271,col 9)-(line 271,col 57)",
      "(line 272,col 9)-(line 272,col 51)",
      "(line 274,col 9)-(line 274,col 76)",
      "(line 275,col 9)-(line 275,col 49)",
      "(line 276,col 9)-(line 276,col 41)",
      "(line 278,col 9)-(line 278,col 67)",
      "(line 279,col 9)-(line 279,col 49)",
      "(line 280,col 9)-(line 280,col 41)",
      "(line 282,col 9)-(line 282,col 98)",
      "(line 283,col 9)-(line 283,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testDelegation()",
    "snippet": "@Test\n    public void testDelegation() { // TODO improve these tests\n        assertNotNull(FileFilterUtils.asFileFilter((FileFilter) FalseFileFilter.INSTANCE));\n        assertNotNull(FileFilterUtils.asFileFilter((FilenameFilter) FalseFileFilter.INSTANCE).toString());\n    }",
    "begin_line": 287,
    "end_line": 290,
    "comment": "",
    "child_ranges": [
      "(line 288,col 9)-(line 288,col 91)",
      "(line 289,col 9)-(line 289,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testDeprecatedWildcard()",
    "snippet": "@SuppressWarnings(\"deprecation\")\n    @Test\n    public void testDeprecatedWildcard() throws IOException {\n        IOFileFilter filter \u003d new WildcardFilter(\"*.txt\");\n        final List\u003cString\u003e patternList \u003d Arrays.asList(\"*.txt\", \"*.xml\", \"*.gif\");\n        final IOFileFilter listFilter \u003d new WildcardFilter(patternList);\n        final File txtFile \u003d new File(\"test.txt\");\n        final Path txtPath \u003d txtFile.toPath();\n        final File bmpFile \u003d new File(\"test.bmp\");\n        final Path bmpPath \u003d bmpFile.toPath();\n        final File dirFile \u003d new File(\"src/java\");\n        final Path dirPath \u003d dirFile.toPath();\n\n        assertFiltering(filter, new File(\"log.txt\"), true);\n//        assertFiltering(filter, new File(\"log.txt.bak\"), false);\n        assertFiltering(filter, new File(\"log.txt\").toPath(), true);\n\n        filter \u003d new WildcardFilter(\"log?.txt\");\n        assertFiltering(filter, new File(\"log1.txt\"), true);\n        assertFiltering(filter, new File(\"log12.txt\"), false);\n        //\n        assertFiltering(filter, new File(\"log1.txt\").toPath(), true);\n        assertFiltering(filter, new File(\"log12.txt\").toPath(), false);\n\n        filter \u003d new WildcardFilter(\"open??.????04\");\n        assertFiltering(filter, new File(\"openAB.102504\"), true);\n        assertFiltering(filter, new File(\"openA.102504\"), false);\n        assertFiltering(filter, new File(\"openXY.123103\"), false);\n//        assertFiltering(filter, new File(\"openAB.102504.old\"), false);\n        //\n        assertFiltering(filter, new File(\"openAB.102504\").toPath(), true);\n        assertFiltering(filter, new File(\"openA.102504\").toPath(), false);\n        assertFiltering(filter, new File(\"openXY.123103\").toPath(), false);\n//        assertFiltering(filter, new File(\"openAB.102504.old\").toPath(), false);\n\n        filter \u003d new WildcardFilter(\"*.java\", \"*.class\");\n        assertFiltering(filter, new File(\"Test.java\"), true);\n        assertFiltering(filter, new File(\"Test.class\"), true);\n        assertFiltering(filter, new File(\"Test.jsp\"), false);\n        //\n        assertFiltering(filter, new File(\"Test.java\").toPath(), true);\n        assertFiltering(filter, new File(\"Test.class\").toPath(), true);\n        assertFiltering(filter, new File(\"Test.jsp\").toPath(), false);\n\n        assertFiltering(listFilter, new File(\"Test.txt\"), true);\n        assertFiltering(listFilter, new File(\"Test.xml\"), true);\n        assertFiltering(listFilter, new File(\"Test.gif\"), true);\n        assertFiltering(listFilter, new File(\"Test.bmp\"), false);\n        //\n        assertFiltering(listFilter, new File(\"Test.txt\").toPath(), true);\n        assertFiltering(listFilter, new File(\"Test.xml\").toPath(), true);\n        assertFiltering(listFilter, new File(\"Test.gif\").toPath(), true);\n        assertFiltering(listFilter, new File(\"Test.bmp\").toPath(), false);\n\n        // File\n        assertTrue(listFilter.accept(txtFile));\n        assertFalse(listFilter.accept(bmpFile));\n        assertFalse(listFilter.accept(dirFile));\n        // Path\n        assertTrue(listFilter.matches(txtPath));\n        assertFalse(listFilter.matches(bmpPath));\n        assertFalse(listFilter.matches(dirPath));\n        //\n        assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));\n\n        assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));\n        assertFalse(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));\n        assertFalse(listFilter.accept(dirFile.getParentFile(), dirFile.getName()));\n        //\n        assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));\n\n        assertThrows(NullPointerException.class, () -\u003e new WildcardFilter((String) null));\n        assertThrows(NullPointerException.class, () -\u003e new WildcardFilter((String[]) null));\n        assertThrows(NullPointerException.class, () -\u003e new WildcardFilter((List\u003cString\u003e) null));\n    }",
    "begin_line": 294,
    "end_line": 370,
    "comment": "",
    "child_ranges": [
      "(line 295,col 9)-(line 295,col 58)",
      "(line 296,col 9)-(line 296,col 82)",
      "(line 297,col 9)-(line 297,col 72)",
      "(line 298,col 9)-(line 298,col 50)",
      "(line 299,col 9)-(line 299,col 46)",
      "(line 300,col 9)-(line 300,col 50)",
      "(line 301,col 9)-(line 301,col 46)",
      "(line 302,col 9)-(line 302,col 50)",
      "(line 303,col 9)-(line 303,col 46)",
      "(line 305,col 9)-(line 305,col 59)",
      "(line 307,col 9)-(line 307,col 68)",
      "(line 309,col 9)-(line 309,col 48)",
      "(line 310,col 9)-(line 310,col 60)",
      "(line 311,col 9)-(line 311,col 62)",
      "(line 313,col 9)-(line 313,col 69)",
      "(line 314,col 9)-(line 314,col 71)",
      "(line 316,col 9)-(line 316,col 53)",
      "(line 317,col 9)-(line 317,col 65)",
      "(line 318,col 9)-(line 318,col 65)",
      "(line 319,col 9)-(line 319,col 66)",
      "(line 322,col 9)-(line 322,col 74)",
      "(line 323,col 9)-(line 323,col 74)",
      "(line 324,col 9)-(line 324,col 75)",
      "(line 327,col 9)-(line 327,col 57)",
      "(line 328,col 9)-(line 328,col 61)",
      "(line 329,col 9)-(line 329,col 62)",
      "(line 330,col 9)-(line 330,col 61)",
      "(line 332,col 9)-(line 332,col 70)",
      "(line 333,col 9)-(line 333,col 71)",
      "(line 334,col 9)-(line 334,col 70)",
      "(line 336,col 9)-(line 336,col 64)",
      "(line 337,col 9)-(line 337,col 64)",
      "(line 338,col 9)-(line 338,col 64)",
      "(line 339,col 9)-(line 339,col 65)",
      "(line 341,col 9)-(line 341,col 73)",
      "(line 342,col 9)-(line 342,col 73)",
      "(line 343,col 9)-(line 343,col 73)",
      "(line 344,col 9)-(line 344,col 74)",
      "(line 347,col 9)-(line 347,col 47)",
      "(line 348,col 9)-(line 348,col 48)",
      "(line 349,col 9)-(line 349,col 48)",
      "(line 351,col 9)-(line 351,col 48)",
      "(line 352,col 9)-(line 352,col 49)",
      "(line 353,col 9)-(line 353,col 49)",
      "(line 355,col 9)-(line 355,col 81)",
      "(line 356,col 9)-(line 356,col 82)",
      "(line 357,col 9)-(line 357,col 82)",
      "(line 359,col 9)-(line 359,col 82)",
      "(line 360,col 9)-(line 360,col 83)",
      "(line 361,col 9)-(line 361,col 83)",
      "(line 363,col 9)-(line 363,col 81)",
      "(line 364,col 9)-(line 364,col 82)",
      "(line 365,col 9)-(line 365,col 82)",
      "(line 367,col 9)-(line 367,col 90)",
      "(line 368,col 9)-(line 368,col 92)",
      "(line 369,col 9)-(line 369,col 96)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testDirectory()",
    "snippet": "@Test\n    public void testDirectory() throws IOException {\n        // XXX: This test presumes the current working dir is the base dir of the source checkout.\n        final IOFileFilter filter \u003d new DirectoryFileFilter();\n\n        assertFiltering(filter, new File(\"src/\"), true);\n        assertFiltering(filter, new File(\"src/\").toPath(), true);\n        assertFiltering(filter, new File(\"src/main/java/\"), true);\n        assertFiltering(filter, new File(\"src/main/java/\").toPath(), true);\n\n        assertFiltering(filter, new File(\"pom.xml\"), false);\n        assertFiltering(filter, new File(\"pom.xml\").toPath(), false);\n\n        assertFiltering(filter, new File(\"imaginary\"), false);\n        assertFiltering(filter, new File(\"imaginary\").toPath(), false);\n        assertFiltering(filter, new File(\"imaginary/\"), false);\n        assertFiltering(filter, new File(\"imaginary/\").toPath(), false);\n\n        assertFiltering(filter, new File(\"LICENSE.txt\"), false);\n        assertFiltering(filter, new File(\"LICENSE.txt\").toPath(), false);\n\n        assertFiltering(filter, (File) null, false);\n        assertFiltering(filter, (Path) null, false);\n\n        assertSame(DirectoryFileFilter.DIRECTORY, DirectoryFileFilter.INSTANCE);\n    }",
    "begin_line": 373,
    "end_line": 397,
    "comment": "",
    "child_ranges": [
      "(line 375,col 9)-(line 375,col 62)",
      "(line 377,col 9)-(line 377,col 56)",
      "(line 378,col 9)-(line 378,col 65)",
      "(line 379,col 9)-(line 379,col 66)",
      "(line 380,col 9)-(line 380,col 75)",
      "(line 382,col 9)-(line 382,col 60)",
      "(line 383,col 9)-(line 383,col 69)",
      "(line 385,col 9)-(line 385,col 62)",
      "(line 386,col 9)-(line 386,col 71)",
      "(line 387,col 9)-(line 387,col 63)",
      "(line 388,col 9)-(line 388,col 72)",
      "(line 390,col 9)-(line 390,col 64)",
      "(line 391,col 9)-(line 391,col 73)",
      "(line 393,col 9)-(line 393,col 52)",
      "(line 394,col 9)-(line 394,col 52)",
      "(line 396,col 9)-(line 396,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testEmpty()",
    "snippet": "@Test\n    public void testEmpty() throws Exception {\n\n        // Empty Dir\n        final File emptyDirFile \u003d new File(temporaryFolder, \"empty-dir\");\n        final Path emptyDirPath \u003d emptyDirFile.toPath();\n        emptyDirFile.mkdirs();\n        assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, true);\n        assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, true);\n        assertFiltering(EmptyFileFilter.EMPTY, (File) null, true);\n        assertFiltering(EmptyFileFilter.EMPTY, (Path) null, true);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, (File) null, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, (Path) null, false);\n\n        // Empty File\n        final File emptyFile \u003d new File(emptyDirFile, \"empty-file.txt\");\n        final Path emptyPath \u003d emptyFile.toPath();\n        if (!emptyFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + emptyFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(emptyFile.toPath()))) {\n            TestUtils.generateTestData(output1, 0);\n        }\n        assertFiltering(EmptyFileFilter.EMPTY, emptyFile, true);\n        assertFiltering(EmptyFileFilter.EMPTY, emptyPath, true);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyFile, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyPath, false);\n\n        // Not Empty Dir\n        assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, false);\n        assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, true);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, true);\n\n        // Not Empty File\n        final File notEmptyFile \u003d new File(emptyDirFile, \"not-empty-file.txt\");\n        final Path notEmptyPath \u003d notEmptyFile.toPath();\n        if (!notEmptyFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + notEmptyFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(notEmptyFile.toPath()))) {\n            TestUtils.generateTestData(output, 32);\n        }\n        assertFiltering(EmptyFileFilter.EMPTY, notEmptyFile, false);\n        assertFiltering(EmptyFileFilter.EMPTY, notEmptyPath, false);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);\n        assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyPath, true);\n        FileUtils.forceDelete(emptyDirFile);\n    }",
    "begin_line": 400,
    "end_line": 449,
    "comment": "",
    "child_ranges": [
      "(line 403,col 9)-(line 403,col 73)",
      "(line 404,col 9)-(line 404,col 56)",
      "(line 405,col 9)-(line 405,col 30)",
      "(line 406,col 9)-(line 406,col 67)",
      "(line 407,col 9)-(line 407,col 67)",
      "(line 408,col 9)-(line 408,col 66)",
      "(line 409,col 9)-(line 409,col 66)",
      "(line 410,col 9)-(line 410,col 72)",
      "(line 411,col 9)-(line 411,col 72)",
      "(line 412,col 9)-(line 412,col 71)",
      "(line 413,col 9)-(line 413,col 71)",
      "(line 416,col 9)-(line 416,col 72)",
      "(line 417,col 9)-(line 417,col 50)",
      "(line 418,col 9)-(line 420,col 9)",
      "(line 421,col 9)-(line 423,col 9)",
      "(line 424,col 9)-(line 424,col 64)",
      "(line 425,col 9)-(line 425,col 64)",
      "(line 426,col 9)-(line 426,col 69)",
      "(line 427,col 9)-(line 427,col 69)",
      "(line 430,col 9)-(line 430,col 68)",
      "(line 431,col 9)-(line 431,col 68)",
      "(line 432,col 9)-(line 432,col 71)",
      "(line 433,col 9)-(line 433,col 71)",
      "(line 436,col 9)-(line 436,col 79)",
      "(line 437,col 9)-(line 437,col 56)",
      "(line 438,col 9)-(line 440,col 9)",
      "(line 441,col 9)-(line 443,col 9)",
      "(line 444,col 9)-(line 444,col 68)",
      "(line 445,col 9)-(line 445,col 68)",
      "(line 446,col 9)-(line 446,col 71)",
      "(line 447,col 9)-(line 447,col 71)",
      "(line 448,col 9)-(line 448,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testEnsureTestCoverage()",
    "snippet": "@Test\n    public void testEnsureTestCoverage() {\n        assertNotNull(new FileFilterUtils()); // dummy for test coverage\n    }",
    "begin_line": 452,
    "end_line": 454,
    "comment": "",
    "child_ranges": [
      "(line 453,col 9)-(line 453,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFalse()",
    "snippet": "@Test\n    public void testFalse() throws IOException {\n        final IOFileFilter filter \u003d FileFilterUtils.falseFileFilter();\n        assertFiltering(filter, new File(\"foo.test\"), false);\n        assertFiltering(filter, new File(\"foo.test\").toPath(), false);\n        assertFiltering(filter, new File(\"foo\"), false);\n        assertFiltering(filter, new File(\"foo\").toPath(), false);\n        assertFiltering(filter, (File) null, false);\n        assertFiltering(filter, (Path) null, false);\n        assertSame(FalseFileFilter.FALSE, FalseFileFilter.INSTANCE);\n        assertSame(TrueFileFilter.TRUE, FalseFileFilter.INSTANCE.negate());\n        assertSame(TrueFileFilter.INSTANCE, FalseFileFilter.INSTANCE.negate());\n        assertNotNull(FalseFileFilter.INSTANCE.toString());\n    }",
    "begin_line": 457,
    "end_line": 469,
    "comment": "",
    "child_ranges": [
      "(line 458,col 9)-(line 458,col 70)",
      "(line 459,col 9)-(line 459,col 61)",
      "(line 460,col 9)-(line 460,col 70)",
      "(line 461,col 9)-(line 461,col 56)",
      "(line 462,col 9)-(line 462,col 65)",
      "(line 463,col 9)-(line 463,col 52)",
      "(line 464,col 9)-(line 464,col 52)",
      "(line 465,col 9)-(line 465,col 68)",
      "(line 466,col 9)-(line 466,col 75)",
      "(line 467,col 9)-(line 467,col 79)",
      "(line 468,col 9)-(line 468,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFileEqualsFilter()",
    "snippet": "@Test\n    public void testFileEqualsFilter() throws IOException {\n        assertFooBarFileFiltering(\n            new FileEqualsFileFilter(new File(\"foo\")).or(new FileEqualsFileFilter(new File(\"bar\"))));\n    }",
    "begin_line": 472,
    "end_line": 475,
    "comment": "",
    "child_ranges": [
      "(line 473,col 9)-(line 474,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFileFilterUtils_and()",
    "snippet": "@Test\n    public void testFileFilterUtils_and() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        assertFiltering(FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File(\"foo.test\"), true);\n        assertFiltering(FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File(\"foo.test\"), false);\n        assertFiltering(FileFilterUtils.and(falseFilter, trueFilter), new File(\"foo.test\"), false);\n        assertFiltering(FileFilterUtils.and(falseFilter, falseFilter), new File(\"foo.test\"), false);\n    }",
    "begin_line": 478,
    "end_line": 485,
    "comment": "",
    "child_ranges": [
      "(line 479,col 9)-(line 479,col 64)",
      "(line 480,col 9)-(line 480,col 66)",
      "(line 481,col 9)-(line 481,col 109)",
      "(line 482,col 9)-(line 482,col 111)",
      "(line 483,col 9)-(line 483,col 99)",
      "(line 484,col 9)-(line 484,col 100)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFileFilterUtils_or()",
    "snippet": "@Test\n    public void testFileFilterUtils_or() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        final File testFile \u003d new File(\"foo.test\");\n        assertFiltering(FileFilterUtils.or(trueFilter, trueFilter), testFile, true);\n        assertFiltering(FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);\n        assertFiltering(FileFilterUtils.or(falseFilter, trueFilter), testFile, true);\n        assertFiltering(FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);\n    }",
    "begin_line": 488,
    "end_line": 496,
    "comment": "",
    "child_ranges": [
      "(line 489,col 9)-(line 489,col 64)",
      "(line 490,col 9)-(line 490,col 66)",
      "(line 491,col 9)-(line 491,col 51)",
      "(line 492,col 9)-(line 492,col 84)",
      "(line 493,col 9)-(line 493,col 97)",
      "(line 494,col 9)-(line 494,col 85)",
      "(line 495,col 9)-(line 495,col 100)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFiles()",
    "snippet": "@Test\n    public void testFiles() throws IOException {\n        // XXX: This test presumes the current working dir is the base dir of the source checkout.\n        final IOFileFilter filter \u003d FileFileFilter.INSTANCE;\n\n        assertFiltering(filter, (File) null, false);\n        assertFiltering(filter, new File(\"src/\"), false);\n        assertFiltering(filter, new File(\"src/\").toPath(), false);\n        assertFiltering(filter, new File(\"src/java/\"), false);\n        assertFiltering(filter, new File(\"src/java/\").toPath(), false);\n\n        assertFiltering(filter, new File(\"pom.xml\"), true);\n        assertFiltering(filter, new File(\"pom.xml\").toPath(), true);\n\n        assertFiltering(filter, new File(\"imaginary\"), false);\n        assertFiltering(filter, new File(\"imaginary\").toPath(), false);\n        assertFiltering(filter, new File(\"imaginary/\"), false);\n        assertFiltering(filter, new File(\"imaginary/\").toPath(), false);\n\n        assertFiltering(filter, new File(\"LICENSE.txt\"), true);\n        assertFiltering(filter, new File(\"LICENSE.txt\").toPath(), true);\n    }",
    "begin_line": 499,
    "end_line": 519,
    "comment": "",
    "child_ranges": [
      "(line 501,col 9)-(line 501,col 60)",
      "(line 503,col 9)-(line 503,col 52)",
      "(line 504,col 9)-(line 504,col 57)",
      "(line 505,col 9)-(line 505,col 66)",
      "(line 506,col 9)-(line 506,col 62)",
      "(line 507,col 9)-(line 507,col 71)",
      "(line 509,col 9)-(line 509,col 59)",
      "(line 510,col 9)-(line 510,col 68)",
      "(line 512,col 9)-(line 512,col 62)",
      "(line 513,col 9)-(line 513,col 71)",
      "(line 514,col 9)-(line 514,col 63)",
      "(line 515,col 9)-(line 515,col 72)",
      "(line 517,col 9)-(line 517,col 63)",
      "(line 518,col 9)-(line 518,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterArray_fromList()",
    "snippet": "@Test\n    public void testFilterArray_fromList() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n        final List\u003cFile\u003e fileList \u003d Arrays.asList(fileA, fileB);\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, fileList);\n\n        assertEquals(1, filtered.length);\n        assertEquals(fileA, filtered[0]);\n    }",
    "begin_line": 526,
    "end_line": 537,
    "comment": "",
    "child_ranges": [
      "(line 527,col 9)-(line 527,col 67)",
      "(line 528,col 9)-(line 528,col 67)",
      "(line 529,col 9)-(line 529,col 64)",
      "(line 531,col 9)-(line 531,col 72)",
      "(line 533,col 9)-(line 533,col 73)",
      "(line 535,col 9)-(line 535,col 41)",
      "(line 536,col 9)-(line 536,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterArray_IOFileFilter()",
    "snippet": "@Test\n    public void testFilterArray_IOFileFilter() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, fileA, fileB);\n\n        assertEquals(1, filtered.length);\n        assertEquals(fileA, filtered[0]);\n    }",
    "begin_line": 544,
    "end_line": 554,
    "comment": "",
    "child_ranges": [
      "(line 545,col 9)-(line 545,col 67)",
      "(line 546,col 9)-(line 546,col 67)",
      "(line 548,col 9)-(line 548,col 72)",
      "(line 550,col 9)-(line 550,col 77)",
      "(line 552,col 9)-(line 552,col 41)",
      "(line 553,col 9)-(line 553,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterArray_PathVisitorFileFilter_FileExistsNo()",
    "snippet": "@Test\n    public void testFilterArray_PathVisitorFileFilter_FileExistsNo() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n\n        final IOFileFilter filter \u003d new PathVisitorFileFilter(new NameFileFilter(\"A\"));\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, fileA, fileB);\n\n        assertEquals(1, filtered.length);\n        assertEquals(fileA, filtered[0]);\n    }",
    "begin_line": 561,
    "end_line": 571,
    "comment": "",
    "child_ranges": [
      "(line 562,col 9)-(line 562,col 67)",
      "(line 563,col 9)-(line 563,col 67)",
      "(line 565,col 9)-(line 565,col 87)",
      "(line 567,col 9)-(line 567,col 77)",
      "(line 569,col 9)-(line 569,col 41)",
      "(line 570,col 9)-(line 570,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterArray_PathVisitorFileFilter_FileExistsYes()",
    "snippet": "@Test\n    public void testFilterArray_PathVisitorFileFilter_FileExistsYes() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n        FileUtils.write(fileA, \"test\", StandardCharsets.US_ASCII);\n\n        final IOFileFilter filter \u003d new PathVisitorFileFilter(new NameFileFilter(\"A\"));\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, fileA, fileB);\n\n        assertEquals(1, filtered.length);\n        assertEquals(fileA, filtered[0]);\n    }",
    "begin_line": 578,
    "end_line": 589,
    "comment": "",
    "child_ranges": [
      "(line 579,col 9)-(line 579,col 67)",
      "(line 580,col 9)-(line 580,col 67)",
      "(line 581,col 9)-(line 581,col 66)",
      "(line 583,col 9)-(line 583,col 87)",
      "(line 585,col 9)-(line 585,col 77)",
      "(line 587,col 9)-(line 587,col 41)",
      "(line 588,col 9)-(line 588,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterFilesArrayNullParameters()",
    "snippet": "@Test\n    public void testFilterFilesArrayNullParameters() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.filter(null, fileA, fileB));\n\n        final IOFileFilter filter \u003d FileFilterUtils.trueFileFilter();\n        FileFilterUtils.filter(filter, fileA, null);\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, (File[]) null);\n        assertEquals(0, filtered.length);\n    }",
    "begin_line": 595,
    "end_line": 605,
    "comment": "",
    "child_ranges": [
      "(line 596,col 9)-(line 596,col 67)",
      "(line 597,col 9)-(line 597,col 67)",
      "(line 598,col 9)-(line 598,col 99)",
      "(line 600,col 9)-(line 600,col 69)",
      "(line 601,col 9)-(line 601,col 52)",
      "(line 603,col 9)-(line 603,col 78)",
      "(line 604,col 9)-(line 604,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterList()",
    "snippet": "@Test\n    public void testFilterList() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n        final List\u003cFile\u003e fileList \u003d Arrays.asList(fileA, fileB);\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final List\u003cFile\u003e filteredList \u003d FileFilterUtils.filterList(filter, fileList);\n\n        assertTrue(filteredList.contains(fileA));\n        assertFalse(filteredList.contains(fileB));\n    }",
    "begin_line": 612,
    "end_line": 623,
    "comment": "",
    "child_ranges": [
      "(line 613,col 9)-(line 613,col 67)",
      "(line 614,col 9)-(line 614,col 67)",
      "(line 615,col 9)-(line 615,col 64)",
      "(line 617,col 9)-(line 617,col 72)",
      "(line 619,col 9)-(line 619,col 85)",
      "(line 621,col 9)-(line 621,col 49)",
      "(line 622,col 9)-(line 622,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterList_fromArray()",
    "snippet": "@Test\n    public void testFilterList_fromArray() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final List\u003cFile\u003e filteredList \u003d FileFilterUtils.filterList(filter, fileA, fileB);\n\n        assertTrue(filteredList.contains(fileA));\n        assertFalse(filteredList.contains(fileB));\n    }",
    "begin_line": 630,
    "end_line": 640,
    "comment": "",
    "child_ranges": [
      "(line 631,col 9)-(line 631,col 67)",
      "(line 632,col 9)-(line 632,col 67)",
      "(line 634,col 9)-(line 634,col 72)",
      "(line 636,col 9)-(line 636,col 89)",
      "(line 638,col 9)-(line 638,col 49)",
      "(line 639,col 9)-(line 639,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterListNullParameters()",
    "snippet": "@Test\n    public void testFilterListNullParameters() {\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.filterList(null, Collections.emptyList()));\n\n        final IOFileFilter filter \u003d FileFilterUtils.trueFileFilter();\n        List\u003cFile\u003e filteredList \u003d FileFilterUtils.filterList(filter, Collections.singletonList(null));\n        assertEquals(1, filteredList.size());\n        assertEquals(null, filteredList.get(0));\n\n        filteredList \u003d FileFilterUtils.filterList(filter, (List\u003cFile\u003e) null);\n        assertEquals(0, filteredList.size());\n    }",
    "begin_line": 647,
    "end_line": 657,
    "comment": "",
    "child_ranges": [
      "(line 648,col 9)-(line 648,col 114)",
      "(line 650,col 9)-(line 650,col 69)",
      "(line 651,col 9)-(line 651,col 102)",
      "(line 652,col 9)-(line 652,col 45)",
      "(line 653,col 9)-(line 653,col 48)",
      "(line 655,col 9)-(line 655,col 77)",
      "(line 656,col 9)-(line 656,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterPathsArrayNullParameters()",
    "snippet": "@Test\n    public void testFilterPathsArrayNullParameters() throws Exception {\n        final Path fileA \u003d TestUtils.newFile(temporaryFolder, \"A\").toPath();\n        final Path fileB \u003d TestUtils.newFile(temporaryFolder, \"B\").toPath();\n        assertThrows(NullPointerException.class, () -\u003e PathUtils.filter(null, fileA, fileB));\n\n        final IOFileFilter filter \u003d FileFilterUtils.trueFileFilter();\n        PathUtils.filter(filter, fileA, null);\n\n        final File[] filtered \u003d FileFilterUtils.filter(filter, (File[]) null);\n        assertEquals(0, filtered.length);\n    }",
    "begin_line": 663,
    "end_line": 673,
    "comment": "",
    "child_ranges": [
      "(line 664,col 9)-(line 664,col 76)",
      "(line 665,col 9)-(line 665,col 76)",
      "(line 666,col 9)-(line 666,col 93)",
      "(line 668,col 9)-(line 668,col 69)",
      "(line 669,col 9)-(line 669,col 46)",
      "(line 671,col 9)-(line 671,col 78)",
      "(line 672,col 9)-(line 672,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterSet()",
    "snippet": "@Test\n    public void testFilterSet() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n        final Set\u003cFile\u003e fileList \u003d new HashSet\u003c\u003e(Arrays.asList(fileA, fileB));\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final Set\u003cFile\u003e filteredSet \u003d FileFilterUtils.filterSet(filter, fileList);\n\n        assertTrue(filteredSet.contains(fileA));\n        assertFalse(filteredSet.contains(fileB));\n    }",
    "begin_line": 680,
    "end_line": 691,
    "comment": "",
    "child_ranges": [
      "(line 681,col 9)-(line 681,col 67)",
      "(line 682,col 9)-(line 682,col 67)",
      "(line 683,col 9)-(line 683,col 78)",
      "(line 685,col 9)-(line 685,col 72)",
      "(line 687,col 9)-(line 687,col 82)",
      "(line 689,col 9)-(line 689,col 48)",
      "(line 690,col 9)-(line 690,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterSet_fromArray()",
    "snippet": "@Test\n    public void testFilterSet_fromArray() throws Exception {\n        final File fileA \u003d TestUtils.newFile(temporaryFolder, \"A\");\n        final File fileB \u003d TestUtils.newFile(temporaryFolder, \"B\");\n\n        final IOFileFilter filter \u003d FileFilterUtils.nameFileFilter(\"A\");\n\n        final Set\u003cFile\u003e filteredSet \u003d FileFilterUtils.filterSet(filter, fileA, fileB);\n\n        assertTrue(filteredSet.contains(fileA));\n        assertFalse(filteredSet.contains(fileB));\n    }",
    "begin_line": 698,
    "end_line": 708,
    "comment": "",
    "child_ranges": [
      "(line 699,col 9)-(line 699,col 67)",
      "(line 700,col 9)-(line 700,col 67)",
      "(line 702,col 9)-(line 702,col 72)",
      "(line 704,col 9)-(line 704,col 86)",
      "(line 706,col 9)-(line 706,col 48)",
      "(line 707,col 9)-(line 707,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testFilterSetNullParameters()",
    "snippet": "@Test\n    public void testFilterSetNullParameters() {\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.filterSet(null, Collections.emptySet()));\n\n        final IOFileFilter filter \u003d FileFilterUtils.trueFileFilter();\n        FileFilterUtils.filterSet(filter, new HashSet\u003c\u003e(Collections.singletonList(null)));\n\n        final Set\u003cFile\u003e filteredSet \u003d FileFilterUtils.filterSet(filter, (Set\u003cFile\u003e) null);\n        assertEquals(0, filteredSet.size());\n    }",
    "begin_line": 715,
    "end_line": 723,
    "comment": "",
    "child_ranges": [
      "(line 716,col 9)-(line 716,col 112)",
      "(line 718,col 9)-(line 718,col 69)",
      "(line 719,col 9)-(line 719,col 90)",
      "(line 721,col 9)-(line 721,col 90)",
      "(line 722,col 9)-(line 722,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testHidden()",
    "snippet": "@Test\n    public void testHidden() throws IOException {\n        final File hiddenDirFile \u003d new File(SVN_DIR_NAME);\n        final Path hiddenDirPath \u003d hiddenDirFile.toPath();\n        if (hiddenDirFile.exists()) {\n            assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirFile, hiddenDirFile.isHidden());\n            assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirPath, hiddenDirFile.isHidden());\n            assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirFile, !hiddenDirFile.isHidden());\n            assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirPath, !hiddenDirFile.isHidden());\n        }\n        final Path path \u003d temporaryFolder.toPath();\n        assertFiltering(HiddenFileFilter.HIDDEN, temporaryFolder, false);\n        assertFiltering(HiddenFileFilter.HIDDEN, path, false);\n        assertFiltering(HiddenFileFilter.HIDDEN, (Path) null, true);\n        assertFiltering(HiddenFileFilter.VISIBLE, temporaryFolder, true);\n        assertFiltering(HiddenFileFilter.VISIBLE, path, true);\n        assertFiltering(HiddenFileFilter.VISIBLE, (Path) null, false);\n    }",
    "begin_line": 726,
    "end_line": 742,
    "comment": "",
    "child_ranges": [
      "(line 727,col 9)-(line 727,col 58)",
      "(line 728,col 9)-(line 728,col 58)",
      "(line 729,col 9)-(line 734,col 9)",
      "(line 735,col 9)-(line 735,col 51)",
      "(line 736,col 9)-(line 736,col 73)",
      "(line 737,col 9)-(line 737,col 62)",
      "(line 738,col 9)-(line 738,col 68)",
      "(line 739,col 9)-(line 739,col 73)",
      "(line 740,col 9)-(line 740,col 62)",
      "(line 741,col 9)-(line 741,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMagicNumberFileFilterBytes()",
    "snippet": "@Test\n    public void testMagicNumberFileFilterBytes() throws Exception {\n        final byte[] classFileMagicNumber \u003d {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE};\n        final String xmlFileContent \u003d \"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\"\u003e\\n\" + \"\u003celement\u003etext\u003c/element\u003e\";\n\n        final File classAFile \u003d new File(temporaryFolder, \"A.class\");\n        final Path classAPath \u003d classAFile.toPath();\n        final File xmlBFile \u003d new File(temporaryFolder, \"B.xml\");\n        final Path xmlBPath \u003d xmlBFile.toPath();\n        final File emptyFile \u003d new File(temporaryFolder, \"C.xml\");\n        final Path emptyPath \u003d emptyFile.toPath();\n        final File dirFile \u003d new File(temporaryFolder, \"D\");\n        final Path dirPath \u003d dirFile.toPath();\n        dirFile.mkdirs();\n\n        try (OutputStream classFileAStream \u003d FileUtils.openOutputStream(classAFile)) {\n            IOUtils.write(classFileMagicNumber, classFileAStream);\n            TestUtils.generateTestData(classFileAStream, 32);\n        }\n\n        FileUtils.write(xmlBFile, xmlFileContent, StandardCharsets.UTF_8);\n        FileUtils.touch(emptyFile);\n\n        IOFileFilter filter \u003d new MagicNumberFileFilter(classFileMagicNumber);\n\n        assertFiltering(filter, classAFile, true);\n        assertFiltering(filter, classAPath, true);\n        assertFiltering(filter, xmlBFile, false);\n        assertFiltering(filter, xmlBPath, false);\n        assertFiltering(filter, emptyFile, false);\n        assertFiltering(filter, emptyPath, false);\n        assertFiltering(filter, dirFile, false);\n        assertFiltering(filter, dirPath, false);\n\n        filter \u003d FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);\n\n        assertFiltering(filter, classAFile, true);\n        assertFiltering(filter, classAPath, true);\n        assertFiltering(filter, xmlBFile, false);\n        assertFiltering(filter, xmlBPath, false);\n        assertFiltering(filter, emptyFile, false);\n        assertFiltering(filter, emptyPath, false);\n        assertFiltering(filter, dirFile, false);\n        assertFiltering(filter, dirPath, false);\n    }",
    "begin_line": 745,
    "end_line": 788,
    "comment": "",
    "child_ranges": [
      "(line 746,col 9)-(line 746,col 97)",
      "(line 747,col 9)-(line 747,col 112)",
      "(line 749,col 9)-(line 749,col 69)",
      "(line 750,col 9)-(line 750,col 52)",
      "(line 751,col 9)-(line 751,col 65)",
      "(line 752,col 9)-(line 752,col 48)",
      "(line 753,col 9)-(line 753,col 66)",
      "(line 754,col 9)-(line 754,col 50)",
      "(line 755,col 9)-(line 755,col 60)",
      "(line 756,col 9)-(line 756,col 46)",
      "(line 757,col 9)-(line 757,col 25)",
      "(line 759,col 9)-(line 762,col 9)",
      "(line 764,col 9)-(line 764,col 74)",
      "(line 765,col 9)-(line 765,col 35)",
      "(line 767,col 9)-(line 767,col 78)",
      "(line 769,col 9)-(line 769,col 50)",
      "(line 770,col 9)-(line 770,col 50)",
      "(line 771,col 9)-(line 771,col 49)",
      "(line 772,col 9)-(line 772,col 49)",
      "(line 773,col 9)-(line 773,col 50)",
      "(line 774,col 9)-(line 774,col 50)",
      "(line 775,col 9)-(line 775,col 48)",
      "(line 776,col 9)-(line 776,col 48)",
      "(line 778,col 9)-(line 778,col 77)",
      "(line 780,col 9)-(line 780,col 50)",
      "(line 781,col 9)-(line 781,col 50)",
      "(line 782,col 9)-(line 782,col 49)",
      "(line 783,col 9)-(line 783,col 49)",
      "(line 784,col 9)-(line 784,col 50)",
      "(line 785,col 9)-(line 785,col 50)",
      "(line 786,col 9)-(line 786,col 48)",
      "(line 787,col 9)-(line 787,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMagicNumberFileFilterBytesOffset()",
    "snippet": "@Test\n    public void testMagicNumberFileFilterBytesOffset() throws Exception {\n        final byte[] tarMagicNumber \u003d {0x75, 0x73, 0x74, 0x61, 0x72};\n        final long tarMagicNumberOffset \u003d 257;\n\n        final File tarFileA \u003d new File(temporaryFolder, \"A.tar\");\n        final File randomFileB \u003d new File(temporaryFolder, \"B.txt\");\n        final File dir \u003d new File(temporaryFolder, \"D\");\n        dir.mkdirs();\n\n        try (OutputStream tarFileAStream \u003d FileUtils.openOutputStream(tarFileA)) {\n            TestUtils.generateTestData(tarFileAStream, tarMagicNumberOffset);\n            IOUtils.write(tarMagicNumber, tarFileAStream);\n        }\n\n        if (!randomFileB.getParentFile().exists()) {\n            fail(\"Cannot create file \" + randomFileB + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(randomFileB.toPath()))) {\n            TestUtils.generateTestData(output, 2 * tarMagicNumberOffset);\n        }\n\n        IOFileFilter filter \u003d new MagicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);\n\n        assertFiltering(filter, tarFileA, true);\n        assertFiltering(filter, randomFileB, false);\n        assertFiltering(filter, dir, false);\n\n        filter \u003d FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);\n\n        assertFiltering(filter, tarFileA, true);\n        assertFiltering(filter, randomFileB, false);\n        assertFiltering(filter, dir, false);\n    }",
    "begin_line": 791,
    "end_line": 823,
    "comment": "",
    "child_ranges": [
      "(line 792,col 9)-(line 792,col 69)",
      "(line 793,col 9)-(line 793,col 46)",
      "(line 795,col 9)-(line 795,col 65)",
      "(line 796,col 9)-(line 796,col 68)",
      "(line 797,col 9)-(line 797,col 56)",
      "(line 798,col 9)-(line 798,col 21)",
      "(line 800,col 9)-(line 803,col 9)",
      "(line 805,col 9)-(line 807,col 9)",
      "(line 808,col 9)-(line 810,col 9)",
      "(line 812,col 9)-(line 812,col 94)",
      "(line 814,col 9)-(line 814,col 48)",
      "(line 815,col 9)-(line 815,col 52)",
      "(line 816,col 9)-(line 816,col 44)",
      "(line 818,col 9)-(line 818,col 93)",
      "(line 820,col 9)-(line 820,col 48)",
      "(line 821,col 9)-(line 821,col 52)",
      "(line 822,col 9)-(line 822,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMagicNumberFileFilterString()",
    "snippet": "@Test\n    public void testMagicNumberFileFilterString() throws Exception {\n        final byte[] classFileMagicNumber \u003d {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE};\n        final String xmlFileContent \u003d \"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\"\u003e\\n\" + \"\u003celement\u003etext\u003c/element\u003e\";\n        final String xmlMagicNumber \u003d \"\u003c?xml version\u003d\\\"1.0\\\"\";\n\n        final File classFileA \u003d new File(temporaryFolder, \"A.class\");\n        final File xmlFileB \u003d new File(temporaryFolder, \"B.xml\");\n        final File dir \u003d new File(temporaryFolder, \"D\");\n        dir.mkdirs();\n\n        try (OutputStream classFileAStream \u003d FileUtils.openOutputStream(classFileA)) {\n            IOUtils.write(classFileMagicNumber, classFileAStream);\n            TestUtils.generateTestData(classFileAStream, 32);\n        }\n\n        FileUtils.write(xmlFileB, xmlFileContent, StandardCharsets.UTF_8);\n\n        IOFileFilter filter \u003d new MagicNumberFileFilter(xmlMagicNumber);\n\n        assertFiltering(filter, classFileA, false);\n        assertFiltering(filter, xmlFileB, true);\n        assertFiltering(filter, dir, false);\n\n        filter \u003d FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);\n\n        assertFiltering(filter, classFileA, false);\n        assertFiltering(filter, xmlFileB, true);\n        assertFiltering(filter, dir, false);\n    }",
    "begin_line": 826,
    "end_line": 854,
    "comment": "",
    "child_ranges": [
      "(line 827,col 9)-(line 827,col 97)",
      "(line 828,col 9)-(line 828,col 112)",
      "(line 829,col 9)-(line 829,col 62)",
      "(line 831,col 9)-(line 831,col 69)",
      "(line 832,col 9)-(line 832,col 65)",
      "(line 833,col 9)-(line 833,col 56)",
      "(line 834,col 9)-(line 834,col 21)",
      "(line 836,col 9)-(line 839,col 9)",
      "(line 841,col 9)-(line 841,col 74)",
      "(line 843,col 9)-(line 843,col 72)",
      "(line 845,col 9)-(line 845,col 51)",
      "(line 846,col 9)-(line 846,col 48)",
      "(line 847,col 9)-(line 847,col 44)",
      "(line 849,col 9)-(line 849,col 71)",
      "(line 851,col 9)-(line 851,col 51)",
      "(line 852,col 9)-(line 852,col 48)",
      "(line 853,col 9)-(line 853,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMagicNumberFileFilterStringOffset()",
    "snippet": "@Test\n    public void testMagicNumberFileFilterStringOffset() throws Exception {\n        final String tarMagicNumber \u003d \"ustar\";\n        final long tarMagicNumberOffset \u003d 257;\n\n        final File tarFileA \u003d new File(temporaryFolder, \"A.tar\");\n        final File randomFileB \u003d new File(temporaryFolder, \"B.txt\");\n        final File dir \u003d new File(temporaryFolder, \"D\");\n        dir.mkdirs();\n\n        try (OutputStream tarFileAStream \u003d FileUtils.openOutputStream(tarFileA)) {\n            TestUtils.generateTestData(tarFileAStream, tarMagicNumberOffset);\n            IOUtils.write(tarMagicNumber, tarFileAStream, StandardCharsets.UTF_8);\n        }\n\n        if (!randomFileB.getParentFile().exists()) {\n            fail(\"Cannot create file \" + randomFileB + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(randomFileB.toPath()))) {\n            TestUtils.generateTestData(output, 2 * tarMagicNumberOffset);\n        }\n\n        IOFileFilter filter \u003d new MagicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);\n\n        assertFiltering(filter, tarFileA, true);\n        assertFiltering(filter, randomFileB, false);\n        assertFiltering(filter, dir, false);\n\n        filter \u003d FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);\n\n        assertFiltering(filter, tarFileA, true);\n        assertFiltering(filter, randomFileB, false);\n        assertFiltering(filter, dir, false);\n    }",
    "begin_line": 857,
    "end_line": 889,
    "comment": "",
    "child_ranges": [
      "(line 858,col 9)-(line 858,col 46)",
      "(line 859,col 9)-(line 859,col 46)",
      "(line 861,col 9)-(line 861,col 65)",
      "(line 862,col 9)-(line 862,col 68)",
      "(line 863,col 9)-(line 863,col 56)",
      "(line 864,col 9)-(line 864,col 21)",
      "(line 866,col 9)-(line 869,col 9)",
      "(line 871,col 9)-(line 873,col 9)",
      "(line 874,col 9)-(line 876,col 9)",
      "(line 878,col 9)-(line 878,col 94)",
      "(line 880,col 9)-(line 880,col 48)",
      "(line 881,col 9)-(line 881,col 52)",
      "(line 882,col 9)-(line 882,col 44)",
      "(line 884,col 9)-(line 884,col 93)",
      "(line 886,col 9)-(line 886,col 48)",
      "(line 887,col 9)-(line 887,col 52)",
      "(line 888,col 9)-(line 888,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMagicNumberFileFilterValidation()",
    "snippet": "@Test\n    public void testMagicNumberFileFilterValidation() {\n        assertThrows(NullPointerException.class, () -\u003e new MagicNumberFileFilter((String) null, 0));\n        assertThrows(IllegalArgumentException.class, () -\u003e new MagicNumberFileFilter(\"0\", -1));\n        assertThrows(IllegalArgumentException.class, () -\u003e new MagicNumberFileFilter(\"\", 0));\n        assertThrows(NullPointerException.class, () -\u003e new MagicNumberFileFilter((byte[]) null, 0));\n        assertThrows(IllegalArgumentException.class, () -\u003e new MagicNumberFileFilter(new byte[] {0}, -1));\n        assertThrows(IllegalArgumentException.class, () -\u003e new MagicNumberFileFilter(new byte[] {}, 0));\n    }",
    "begin_line": 892,
    "end_line": 899,
    "comment": "",
    "child_ranges": [
      "(line 893,col 9)-(line 893,col 100)",
      "(line 894,col 9)-(line 894,col 95)",
      "(line 895,col 9)-(line 895,col 93)",
      "(line 896,col 9)-(line 896,col 100)",
      "(line 897,col 9)-(line 897,col 106)",
      "(line 898,col 9)-(line 898,col 104)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMakeCVSAware()",
    "snippet": "@Test\n    public void testMakeCVSAware() throws Exception {\n        final IOFileFilter filter1 \u003d FileFilterUtils.makeCVSAware(null);\n        final IOFileFilter filter2 \u003d FileFilterUtils.makeCVSAware(FileFilterUtils.nameFileFilter(\"test-file1.txt\"));\n\n        File file \u003d new File(temporaryFolder, \"CVS\");\n        file.mkdirs();\n        assertFiltering(filter1, file, false);\n        assertFiltering(filter2, file, false);\n        FileUtils.deleteDirectory(file);\n\n        file \u003d new File(temporaryFolder, \"test-file1.txt\");\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output2 \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output2, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, true);\n\n        file \u003d new File(temporaryFolder, \"test-file2.log\");\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output1, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, false);\n\n        file \u003d new File(temporaryFolder, \"CVS\");\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, false);\n    }",
    "begin_line": 902,
    "end_line": 941,
    "comment": "",
    "child_ranges": [
      "(line 903,col 9)-(line 903,col 72)",
      "(line 904,col 9)-(line 904,col 116)",
      "(line 906,col 9)-(line 906,col 53)",
      "(line 907,col 9)-(line 907,col 22)",
      "(line 908,col 9)-(line 908,col 46)",
      "(line 909,col 9)-(line 909,col 46)",
      "(line 910,col 9)-(line 910,col 40)",
      "(line 912,col 9)-(line 912,col 59)",
      "(line 913,col 9)-(line 915,col 9)",
      "(line 916,col 9)-(line 918,col 9)",
      "(line 919,col 9)-(line 919,col 45)",
      "(line 920,col 9)-(line 920,col 45)",
      "(line 922,col 9)-(line 922,col 59)",
      "(line 923,col 9)-(line 925,col 9)",
      "(line 926,col 9)-(line 928,col 9)",
      "(line 929,col 9)-(line 929,col 45)",
      "(line 930,col 9)-(line 930,col 46)",
      "(line 932,col 9)-(line 932,col 48)",
      "(line 933,col 9)-(line 935,col 9)",
      "(line 936,col 9)-(line 938,col 9)",
      "(line 939,col 9)-(line 939,col 45)",
      "(line 940,col 9)-(line 940,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMakeDirectoryOnly()",
    "snippet": "@Test\n    public void testMakeDirectoryOnly() throws Exception {\n        assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null));\n\n        final IOFileFilter filter \u003d FileFilterUtils.makeDirectoryOnly(FileFilterUtils.nameFileFilter(\"B\"));\n\n        final File fileA \u003d new File(temporaryFolder, \"A\");\n        final File fileB \u003d new File(temporaryFolder, \"B\");\n\n        fileA.mkdirs();\n        fileB.mkdirs();\n\n        assertFiltering(filter, fileA, false);\n        assertFiltering(filter, fileB, true);\n\n        FileUtils.deleteDirectory(fileA);\n        FileUtils.deleteDirectory(fileB);\n\n        if (!fileA.getParentFile().exists()) {\n            fail(\"Cannot create file \" + fileA + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(fileA.toPath()))) {\n            TestUtils.generateTestData(output1, 32);\n        }\n        if (!fileB.getParentFile().exists()) {\n            fail(\"Cannot create file \" + fileB + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(fileB.toPath()))) {\n            TestUtils.generateTestData(output, 32);\n        }\n\n        assertFiltering(filter, fileA, false);\n        assertFiltering(filter, fileB, false);\n\n        fileA.delete();\n        fileB.delete();\n    }",
    "begin_line": 944,
    "end_line": 979,
    "comment": "",
    "child_ranges": [
      "(line 945,col 9)-(line 945,col 91)",
      "(line 947,col 9)-(line 947,col 107)",
      "(line 949,col 9)-(line 949,col 58)",
      "(line 950,col 9)-(line 950,col 58)",
      "(line 952,col 9)-(line 952,col 23)",
      "(line 953,col 9)-(line 953,col 23)",
      "(line 955,col 9)-(line 955,col 46)",
      "(line 956,col 9)-(line 956,col 45)",
      "(line 958,col 9)-(line 958,col 41)",
      "(line 959,col 9)-(line 959,col 41)",
      "(line 961,col 9)-(line 963,col 9)",
      "(line 964,col 9)-(line 966,col 9)",
      "(line 967,col 9)-(line 969,col 9)",
      "(line 970,col 9)-(line 972,col 9)",
      "(line 974,col 9)-(line 974,col 46)",
      "(line 975,col 9)-(line 975,col 46)",
      "(line 977,col 9)-(line 977,col 23)",
      "(line 978,col 9)-(line 978,col 23)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMakeFileOnly()",
    "snippet": "@Test\n    public void testMakeFileOnly() throws Exception {\n        assertSame(FileFileFilter.INSTANCE, FileFilterUtils.makeFileOnly(null));\n\n        final IOFileFilter filter \u003d FileFilterUtils.makeFileOnly(FileFilterUtils.nameFileFilter(\"B\"));\n\n        final File fileA \u003d new File(temporaryFolder, \"A\");\n        final File fileB \u003d new File(temporaryFolder, \"B\");\n\n        fileA.mkdirs();\n        fileB.mkdirs();\n\n        assertFiltering(filter, fileA, false);\n        assertFiltering(filter, fileB, false);\n\n        FileUtils.deleteDirectory(fileA);\n        FileUtils.deleteDirectory(fileB);\n\n        if (!fileA.getParentFile().exists()) {\n            fail(\"Cannot create file \" + fileA + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(fileA.toPath()))) {\n            TestUtils.generateTestData(output1, 32);\n        }\n        if (!fileB.getParentFile().exists()) {\n            fail(\"Cannot create file \" + fileB + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(fileB.toPath()))) {\n            TestUtils.generateTestData(output, 32);\n        }\n\n        assertFiltering(filter, fileA, false);\n        assertFiltering(filter, fileB, true);\n\n        fileA.delete();\n        fileB.delete();\n    }",
    "begin_line": 983,
    "end_line": 1018,
    "comment": "",
    "child_ranges": [
      "(line 984,col 9)-(line 984,col 80)",
      "(line 986,col 9)-(line 986,col 102)",
      "(line 988,col 9)-(line 988,col 58)",
      "(line 989,col 9)-(line 989,col 58)",
      "(line 991,col 9)-(line 991,col 23)",
      "(line 992,col 9)-(line 992,col 23)",
      "(line 994,col 9)-(line 994,col 46)",
      "(line 995,col 9)-(line 995,col 46)",
      "(line 997,col 9)-(line 997,col 41)",
      "(line 998,col 9)-(line 998,col 41)",
      "(line 1000,col 9)-(line 1002,col 9)",
      "(line 1003,col 9)-(line 1005,col 9)",
      "(line 1006,col 9)-(line 1008,col 9)",
      "(line 1009,col 9)-(line 1011,col 9)",
      "(line 1013,col 9)-(line 1013,col 46)",
      "(line 1014,col 9)-(line 1014,col 45)",
      "(line 1016,col 9)-(line 1016,col 23)",
      "(line 1017,col 9)-(line 1017,col 23)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testMakeSVNAware()",
    "snippet": "@Test\n    public void testMakeSVNAware() throws Exception {\n        final IOFileFilter filter1 \u003d FileFilterUtils.makeSVNAware(null);\n        final IOFileFilter filter2 \u003d FileFilterUtils.makeSVNAware(FileFilterUtils.nameFileFilter(\"test-file1.txt\"));\n\n        File file \u003d new File(temporaryFolder, SVN_DIR_NAME);\n        file.mkdirs();\n        assertFiltering(filter1, file, false);\n        assertFiltering(filter2, file, false);\n        FileUtils.deleteDirectory(file);\n\n        file \u003d new File(temporaryFolder, \"test-file1.txt\");\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output2 \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output2, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, true);\n\n        file \u003d new File(temporaryFolder, \"test-file2.log\");\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output1, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, false);\n\n        file \u003d new File(temporaryFolder, SVN_DIR_NAME);\n        if (!file.getParentFile().exists()) {\n            fail(\"Cannot create file \" + file + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(file.toPath()))) {\n            TestUtils.generateTestData(output, 0);\n        }\n        assertFiltering(filter1, file, true);\n        assertFiltering(filter2, file, false);\n    }",
    "begin_line": 1021,
    "end_line": 1060,
    "comment": "",
    "child_ranges": [
      "(line 1022,col 9)-(line 1022,col 72)",
      "(line 1023,col 9)-(line 1023,col 116)",
      "(line 1025,col 9)-(line 1025,col 60)",
      "(line 1026,col 9)-(line 1026,col 22)",
      "(line 1027,col 9)-(line 1027,col 46)",
      "(line 1028,col 9)-(line 1028,col 46)",
      "(line 1029,col 9)-(line 1029,col 40)",
      "(line 1031,col 9)-(line 1031,col 59)",
      "(line 1032,col 9)-(line 1034,col 9)",
      "(line 1035,col 9)-(line 1037,col 9)",
      "(line 1038,col 9)-(line 1038,col 45)",
      "(line 1039,col 9)-(line 1039,col 45)",
      "(line 1041,col 9)-(line 1041,col 59)",
      "(line 1042,col 9)-(line 1044,col 9)",
      "(line 1045,col 9)-(line 1047,col 9)",
      "(line 1048,col 9)-(line 1048,col 45)",
      "(line 1049,col 9)-(line 1049,col 46)",
      "(line 1051,col 9)-(line 1051,col 55)",
      "(line 1052,col 9)-(line 1054,col 9)",
      "(line 1055,col 9)-(line 1057,col 9)",
      "(line 1058,col 9)-(line 1058,col 45)",
      "(line 1059,col 9)-(line 1059,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNameFilter()",
    "snippet": "@Test\n    public void testNameFilter() throws IOException {\n        final NameFileFilter filter \u003d new NameFileFilter(\"foo\", \"bar\");\n        assertFooBarFileFiltering(filter);\n        assertFiltering(filter, (File) null, false);\n        assertFiltering(filter, (Path) null, false);\n    }",
    "begin_line": 1063,
    "end_line": 1068,
    "comment": "",
    "child_ranges": [
      "(line 1064,col 9)-(line 1064,col 71)",
      "(line 1065,col 9)-(line 1065,col 42)",
      "(line 1066,col 9)-(line 1066,col 52)",
      "(line 1067,col 9)-(line 1067,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNameFilterNullArgument()",
    "snippet": "@Test\n    public void testNameFilterNullArgument() {\n        final String test \u003d null;\n        final String failMessage \u003d \"constructing a NameFileFilter with a null String argument should fail.\";\n        assertThrows(NullPointerException.class, () -\u003e new NameFileFilter(test), failMessage);\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.nameFileFilter(test, IOCase.INSENSITIVE), failMessage);\n    }",
    "begin_line": 1071,
    "end_line": 1076,
    "comment": "",
    "child_ranges": [
      "(line 1072,col 9)-(line 1072,col 33)",
      "(line 1073,col 9)-(line 1073,col 108)",
      "(line 1074,col 9)-(line 1074,col 94)",
      "(line 1075,col 9)-(line 1075,col 126)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNameFilterNullArrayArgument()",
    "snippet": "@Test\n    public void testNameFilterNullArrayArgument() {\n        assertThrows(NullPointerException.class, () -\u003e new NameFileFilter((String[]) null));\n    }",
    "begin_line": 1079,
    "end_line": 1081,
    "comment": "",
    "child_ranges": [
      "(line 1080,col 9)-(line 1080,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNameFilterNullListArgument()",
    "snippet": "@Test\n    public void testNameFilterNullListArgument() {\n        final List\u003cString\u003e test \u003d null;\n        assertThrows(NullPointerException.class, () -\u003e new NameFileFilter(test));\n    }",
    "begin_line": 1084,
    "end_line": 1087,
    "comment": "",
    "child_ranges": [
      "(line 1085,col 9)-(line 1085,col 39)",
      "(line 1086,col 9)-(line 1086,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNegate()",
    "snippet": "@Test\n    public void testNegate() throws IOException {\n        final IOFileFilter filter \u003d FileFilterUtils.notFileFilter(FileFilterUtils.trueFileFilter());\n        assertFiltering(filter, new File(\"foo.test\"), false);\n        assertFiltering(filter, new File(\"foo\"), false);\n        assertFiltering(filter.negate(), new File(\"foo\"), true);\n        assertFiltering(filter, (File) null, false);\n        assertThrows(NullPointerException.class, () -\u003e new NotFileFilter(null));\n    }",
    "begin_line": 1090,
    "end_line": 1097,
    "comment": "",
    "child_ranges": [
      "(line 1091,col 9)-(line 1091,col 100)",
      "(line 1092,col 9)-(line 1092,col 61)",
      "(line 1093,col 9)-(line 1093,col 56)",
      "(line 1094,col 9)-(line 1094,col 64)",
      "(line 1095,col 9)-(line 1095,col 52)",
      "(line 1096,col 9)-(line 1096,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testNullFilters()",
    "snippet": "@Test\n    public void testNullFilters() {\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.toList((IOFileFilter) null));\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.toList(new IOFileFilter[] {null}));\n    }",
    "begin_line": 1100,
    "end_line": 1103,
    "comment": "",
    "child_ranges": [
      "(line 1101,col 9)-(line 1101,col 100)",
      "(line 1102,col 9)-(line 1102,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testOr()",
    "snippet": "@Test\n    public void testOr() throws IOException {\n        final IOFileFilter trueFilter \u003d TrueFileFilter.INSTANCE;\n        final IOFileFilter falseFilter \u003d FalseFileFilter.INSTANCE;\n        final File testFile \u003d new File(\"foo.test\");\n        final Path testPath \u003d testFile.toPath();\n        assertFiltering(new OrFileFilter(trueFilter, trueFilter), testFile, true);\n        assertFiltering(new OrFileFilter(trueFilter, falseFilter), testFile, true);\n        assertFiltering(new OrFileFilter(falseFilter, trueFilter), testFile, true);\n        assertFiltering(new OrFileFilter(falseFilter, falseFilter), testFile, false);\n        assertFiltering(new OrFileFilter(), testFile, false);\n        //\n        assertFiltering(new OrFileFilter(trueFilter, trueFilter), testPath, true);\n        assertFiltering(new OrFileFilter(trueFilter, falseFilter), testPath, true);\n        assertFiltering(new OrFileFilter(falseFilter, trueFilter), testPath, true);\n        assertFiltering(new OrFileFilter(falseFilter, falseFilter), testPath, false);\n        assertFiltering(new OrFileFilter(), testPath, false);\n        //\n        assertFiltering(falseFilter.or(trueFilter), testPath, true);\n\n        final List\u003cIOFileFilter\u003e filters \u003d new ArrayList\u003c\u003e();\n        filters.add(trueFilter);\n        filters.add(falseFilter);\n\n        final OrFileFilter orFilter \u003d new OrFileFilter(filters);\n\n        assertFiltering(orFilter, testFile, true);\n        assertFiltering(orFilter, testPath, true);\n        assertEquals(orFilter.getFileFilters(), filters);\n        orFilter.removeFileFilter(trueFilter);\n        assertFiltering(orFilter, testFile, false);\n        assertFiltering(orFilter, testPath, false);\n        orFilter.setFileFilters(filters);\n        assertFiltering(orFilter, testFile, true);\n        assertFiltering(orFilter, testPath, true);\n\n        assertTrue(orFilter.accept(testFile.getParentFile(), testFile.getName()));\n        assertEquals(FileVisitResult.CONTINUE, orFilter.accept(testPath, null));\n        assertTrue(orFilter.matches(testPath));\n        orFilter.removeFileFilter(trueFilter);\n        assertFalse(orFilter.accept(testFile.getParentFile(), testFile.getName()));\n        assertEquals(FileVisitResult.TERMINATE, orFilter.accept(testPath, null));\n        assertFalse(orFilter.matches(testPath));\n\n        assertThrows(NullPointerException.class, () -\u003e new OrFileFilter(falseFilter, null));\n    }",
    "begin_line": 1106,
    "end_line": 1150,
    "comment": "",
    "child_ranges": [
      "(line 1107,col 9)-(line 1107,col 64)",
      "(line 1108,col 9)-(line 1108,col 66)",
      "(line 1109,col 9)-(line 1109,col 51)",
      "(line 1110,col 9)-(line 1110,col 48)",
      "(line 1111,col 9)-(line 1111,col 82)",
      "(line 1112,col 9)-(line 1112,col 83)",
      "(line 1113,col 9)-(line 1113,col 83)",
      "(line 1114,col 9)-(line 1114,col 85)",
      "(line 1115,col 9)-(line 1115,col 61)",
      "(line 1117,col 9)-(line 1117,col 82)",
      "(line 1118,col 9)-(line 1118,col 83)",
      "(line 1119,col 9)-(line 1119,col 83)",
      "(line 1120,col 9)-(line 1120,col 85)",
      "(line 1121,col 9)-(line 1121,col 61)",
      "(line 1123,col 9)-(line 1123,col 68)",
      "(line 1125,col 9)-(line 1125,col 61)",
      "(line 1126,col 9)-(line 1126,col 32)",
      "(line 1127,col 9)-(line 1127,col 33)",
      "(line 1129,col 9)-(line 1129,col 64)",
      "(line 1131,col 9)-(line 1131,col 50)",
      "(line 1132,col 9)-(line 1132,col 50)",
      "(line 1133,col 9)-(line 1133,col 57)",
      "(line 1134,col 9)-(line 1134,col 46)",
      "(line 1135,col 9)-(line 1135,col 51)",
      "(line 1136,col 9)-(line 1136,col 51)",
      "(line 1137,col 9)-(line 1137,col 41)",
      "(line 1138,col 9)-(line 1138,col 50)",
      "(line 1139,col 9)-(line 1139,col 50)",
      "(line 1141,col 9)-(line 1141,col 82)",
      "(line 1142,col 9)-(line 1142,col 80)",
      "(line 1143,col 9)-(line 1143,col 47)",
      "(line 1144,col 9)-(line 1144,col 46)",
      "(line 1145,col 9)-(line 1145,col 83)",
      "(line 1146,col 9)-(line 1146,col 81)",
      "(line 1147,col 9)-(line 1147,col 48)",
      "(line 1149,col 9)-(line 1149,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testPathEqualsFilter()",
    "snippet": "@Test\n    public void testPathEqualsFilter() throws IOException {\n        assertFooBarFileFiltering(\n            new PathEqualsFileFilter(Paths.get(\"foo\")).or(new PathEqualsFileFilter(Paths.get(\"bar\"))));\n    }",
    "begin_line": 1153,
    "end_line": 1156,
    "comment": "",
    "child_ranges": [
      "(line 1154,col 9)-(line 1155,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testPrefix()",
    "snippet": "@Test\n    public void testPrefix() throws IOException {\n        IOFileFilter filter \u003d new PrefixFileFilter(\"foo\", \"bar\");\n        final File testFile \u003d new File(\"test\");\n        final Path testPath \u003d testFile.toPath();\n        final File fredFile \u003d new File(\"fred\");\n        final Path fredPath \u003d fredFile.toPath();\n\n        assertFiltering(filter, new File(\"foo.test\"), true);\n        assertFiltering(filter, new File(\"FOO.test\"), false); // case-sensitive\n        assertFiltering(filter, new File(\"foo\"), true);\n        assertFiltering(filter, new File(\"bar\"), true);\n        assertFiltering(filter, new File(\"food/\"), true);\n        //\n        assertFiltering(filter, new File(\"foo.test\").toPath(), true);\n        assertFiltering(filter, new File(\"FOO.test\").toPath(), false); // case-sensitive\n        assertFiltering(filter, new File(\"foo\").toPath(), true);\n        assertFiltering(filter, new File(\"bar\").toPath(), true);\n        assertFiltering(filter, new File(\"food/\").toPath(), true);\n\n        filter \u003d FileFilterUtils.prefixFileFilter(\"bar\");\n        assertFiltering(filter, new File(\"barred\\\\\"), true);\n        assertFiltering(filter, new File(\"test\"), false);\n        assertFiltering(filter, new File(\"fo_o.test\"), false);\n        assertFiltering(filter, new File(\"abar.exe\"), false);\n        //\n        assertFiltering(filter, new File(\"barred\\\\\").toPath(), true);\n        assertFiltering(filter, new File(\"test\").toPath(), false);\n        assertFiltering(filter, new File(\"fo_o.test\").toPath(), false);\n        assertFiltering(filter, new File(\"abar.exe\").toPath(), false);\n\n        filter \u003d new PrefixFileFilter(\"tes\");\n        assertFiltering(filter, new File(\"test\"), true);\n        assertFiltering(filter, new File(\"fred\"), false);\n        //\n        assertFiltering(filter, new File(\"test\").toPath(), true);\n        assertFiltering(filter, new File(\"fred\").toPath(), false);\n\n        assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));\n        assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));\n        //\n        assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));\n        assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));\n        //\n        assertTrue(filter.matches(testPath));\n        assertFalse(filter.matches(fredPath));\n\n        final List\u003cString\u003e prefixes \u003d Arrays.asList(\"foo\", \"fre\");\n        final IOFileFilter listFilter \u003d new PrefixFileFilter(prefixes);\n\n        assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));\n        assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));\n        //\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));\n        assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));\n        //\n        assertFalse(listFilter.matches(testPath));\n        assertTrue(listFilter.matches(fredPath));\n\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((String) null));\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((String[]) null));\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((List\u003cString\u003e) null));\n    }",
    "begin_line": 1159,
    "end_line": 1220,
    "comment": "",
    "child_ranges": [
      "(line 1160,col 9)-(line 1160,col 65)",
      "(line 1161,col 9)-(line 1161,col 47)",
      "(line 1162,col 9)-(line 1162,col 48)",
      "(line 1163,col 9)-(line 1163,col 47)",
      "(line 1164,col 9)-(line 1164,col 48)",
      "(line 1166,col 9)-(line 1166,col 60)",
      "(line 1167,col 9)-(line 1167,col 61)",
      "(line 1168,col 9)-(line 1168,col 55)",
      "(line 1169,col 9)-(line 1169,col 55)",
      "(line 1170,col 9)-(line 1170,col 57)",
      "(line 1172,col 9)-(line 1172,col 69)",
      "(line 1173,col 9)-(line 1173,col 70)",
      "(line 1174,col 9)-(line 1174,col 64)",
      "(line 1175,col 9)-(line 1175,col 64)",
      "(line 1176,col 9)-(line 1176,col 66)",
      "(line 1178,col 9)-(line 1178,col 57)",
      "(line 1179,col 9)-(line 1179,col 60)",
      "(line 1180,col 9)-(line 1180,col 57)",
      "(line 1181,col 9)-(line 1181,col 62)",
      "(line 1182,col 9)-(line 1182,col 61)",
      "(line 1184,col 9)-(line 1184,col 69)",
      "(line 1185,col 9)-(line 1185,col 66)",
      "(line 1186,col 9)-(line 1186,col 71)",
      "(line 1187,col 9)-(line 1187,col 70)",
      "(line 1189,col 9)-(line 1189,col 45)",
      "(line 1190,col 9)-(line 1190,col 56)",
      "(line 1191,col 9)-(line 1191,col 57)",
      "(line 1193,col 9)-(line 1193,col 65)",
      "(line 1194,col 9)-(line 1194,col 66)",
      "(line 1196,col 9)-(line 1196,col 80)",
      "(line 1197,col 9)-(line 1197,col 81)",
      "(line 1199,col 9)-(line 1199,col 78)",
      "(line 1200,col 9)-(line 1200,col 79)",
      "(line 1202,col 9)-(line 1202,col 45)",
      "(line 1203,col 9)-(line 1203,col 46)",
      "(line 1205,col 9)-(line 1205,col 66)",
      "(line 1206,col 9)-(line 1206,col 71)",
      "(line 1208,col 9)-(line 1208,col 85)",
      "(line 1209,col 9)-(line 1209,col 84)",
      "(line 1211,col 9)-(line 1211,col 83)",
      "(line 1212,col 9)-(line 1212,col 82)",
      "(line 1214,col 9)-(line 1214,col 50)",
      "(line 1215,col 9)-(line 1215,col 49)",
      "(line 1217,col 9)-(line 1217,col 92)",
      "(line 1218,col 9)-(line 1218,col 94)",
      "(line 1219,col 9)-(line 1219,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testPrefixCaseInsensitive()",
    "snippet": "@Test\n    public void testPrefixCaseInsensitive() throws IOException {\n\n        IOFileFilter filter \u003d new PrefixFileFilter(new String[] {\"foo\", \"bar\"}, IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"foo.test1\"), true);\n        assertFiltering(filter, new File(\"bar.test1\"), true);\n        assertFiltering(filter, new File(\"FOO.test1\"), true); // case-insensitive\n        assertFiltering(filter, new File(\"BAR.test1\"), true); // case-insensitive\n\n        filter \u003d new PrefixFileFilter(\"bar\", IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"foo.test2\"), false);\n        assertFiltering(filter, new File(\"bar.test2\"), true);\n        assertFiltering(filter, new File(\"FOO.test2\"), false); // case-insensitive\n        assertFiltering(filter, new File(\"BAR.test2\"), true); // case-insensitive\n\n        final List\u003cString\u003e prefixes \u003d Arrays.asList(\"foo\", \"bar\");\n        filter \u003d new PrefixFileFilter(prefixes, IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"foo.test3\"), true);\n        assertFiltering(filter, new File(\"bar.test3\"), true);\n        assertFiltering(filter, new File(\"FOO.test3\"), true); // case-insensitive\n        assertFiltering(filter, new File(\"BAR.test3\"), true); // case-insensitive\n\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((String) null, IOCase.INSENSITIVE));\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((String[]) null, IOCase.INSENSITIVE));\n        assertThrows(NullPointerException.class, () -\u003e new PrefixFileFilter((List\u003cString\u003e) null, IOCase.INSENSITIVE));\n        // FileFilterUtils.prefixFileFilter(String, IOCase) tests\n        filter \u003d FileFilterUtils.prefixFileFilter(\"bar\", IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"foo.test2\"), false);\n        assertFiltering(filter, new File(\"bar.test2\"), true);\n        assertFiltering(filter, new File(\"FOO.test2\"), false); // case-insensitive\n        assertFiltering(filter, new File(\"BAR.test2\"), true); // case-insensitive\n\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.prefixFileFilter(null, IOCase.INSENSITIVE));\n    }",
    "begin_line": 1223,
    "end_line": 1255,
    "comment": "",
    "child_ranges": [
      "(line 1225,col 9)-(line 1225,col 100)",
      "(line 1226,col 9)-(line 1226,col 61)",
      "(line 1227,col 9)-(line 1227,col 61)",
      "(line 1228,col 9)-(line 1228,col 61)",
      "(line 1229,col 9)-(line 1229,col 61)",
      "(line 1231,col 9)-(line 1231,col 65)",
      "(line 1232,col 9)-(line 1232,col 62)",
      "(line 1233,col 9)-(line 1233,col 61)",
      "(line 1234,col 9)-(line 1234,col 62)",
      "(line 1235,col 9)-(line 1235,col 61)",
      "(line 1237,col 9)-(line 1237,col 66)",
      "(line 1238,col 9)-(line 1238,col 68)",
      "(line 1239,col 9)-(line 1239,col 61)",
      "(line 1240,col 9)-(line 1240,col 61)",
      "(line 1241,col 9)-(line 1241,col 61)",
      "(line 1242,col 9)-(line 1242,col 61)",
      "(line 1244,col 9)-(line 1244,col 112)",
      "(line 1245,col 9)-(line 1245,col 114)",
      "(line 1246,col 9)-(line 1246,col 118)",
      "(line 1248,col 9)-(line 1248,col 77)",
      "(line 1249,col 9)-(line 1249,col 62)",
      "(line 1250,col 9)-(line 1250,col 61)",
      "(line 1251,col 9)-(line 1251,col 62)",
      "(line 1252,col 9)-(line 1252,col 61)",
      "(line 1254,col 9)-(line 1254,col 115)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testSizeFilterOnFiles()",
    "snippet": "@Test\n    public void testSizeFilterOnFiles() throws Exception {\n        final File smallFile \u003d new File(temporaryFolder, \"small.txt\");\n        if (!smallFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + smallFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output1 \u003d new BufferedOutputStream(Files.newOutputStream(smallFile.toPath()))) {\n            TestUtils.generateTestData(output1, 32);\n        }\n        final File largeFile \u003d new File(temporaryFolder, \"large.txt\");\n        if (!largeFile.getParentFile().exists()) {\n            fail(\"Cannot create file \" + largeFile + \" as the parent directory does not exist\");\n        }\n        try (BufferedOutputStream output \u003d new BufferedOutputStream(Files.newOutputStream(largeFile.toPath()))) {\n            TestUtils.generateTestData(output, 128);\n        }\n        final IOFileFilter filter1 \u003d FileFilterUtils.sizeFileFilter(64);\n        final IOFileFilter filter2 \u003d FileFilterUtils.sizeFileFilter(64, true);\n        final IOFileFilter filter3 \u003d FileFilterUtils.sizeFileFilter(64, false);\n\n        assertFiltering(filter1, smallFile, false);\n        assertFiltering(filter2, smallFile, false);\n        assertFiltering(filter3, smallFile, true);\n        assertFiltering(filter1, largeFile, true);\n        assertFiltering(filter2, largeFile, true);\n        assertFiltering(filter3, largeFile, false);\n\n        // size range tests\n        final IOFileFilter filter4 \u003d FileFilterUtils.sizeRangeFileFilter(33, 127);\n        final IOFileFilter filter5 \u003d FileFilterUtils.sizeRangeFileFilter(32, 127);\n        final IOFileFilter filter6 \u003d FileFilterUtils.sizeRangeFileFilter(33, 128);\n        final IOFileFilter filter7 \u003d FileFilterUtils.sizeRangeFileFilter(31, 129);\n        final IOFileFilter filter8 \u003d FileFilterUtils.sizeRangeFileFilter(128, 128);\n\n        assertFiltering(filter4, smallFile, false);\n        assertFiltering(filter4, largeFile, false);\n        assertFiltering(filter5, smallFile, true);\n        assertFiltering(filter5, largeFile, false);\n        assertFiltering(filter6, smallFile, false);\n        assertFiltering(filter6, largeFile, true);\n        assertFiltering(filter7, smallFile, true);\n        assertFiltering(filter7, largeFile, true);\n        assertFiltering(filter8, largeFile, true);\n\n        assertThrows(IllegalArgumentException.class, () -\u003e FileFilterUtils.sizeFileFilter(-1));\n    }",
    "begin_line": 1258,
    "end_line": 1302,
    "comment": "",
    "child_ranges": [
      "(line 1259,col 9)-(line 1259,col 70)",
      "(line 1260,col 9)-(line 1262,col 9)",
      "(line 1263,col 9)-(line 1265,col 9)",
      "(line 1266,col 9)-(line 1266,col 70)",
      "(line 1267,col 9)-(line 1269,col 9)",
      "(line 1270,col 9)-(line 1272,col 9)",
      "(line 1273,col 9)-(line 1273,col 72)",
      "(line 1274,col 9)-(line 1274,col 78)",
      "(line 1275,col 9)-(line 1275,col 79)",
      "(line 1277,col 9)-(line 1277,col 51)",
      "(line 1278,col 9)-(line 1278,col 51)",
      "(line 1279,col 9)-(line 1279,col 50)",
      "(line 1280,col 9)-(line 1280,col 50)",
      "(line 1281,col 9)-(line 1281,col 50)",
      "(line 1282,col 9)-(line 1282,col 51)",
      "(line 1285,col 9)-(line 1285,col 82)",
      "(line 1286,col 9)-(line 1286,col 82)",
      "(line 1287,col 9)-(line 1287,col 82)",
      "(line 1288,col 9)-(line 1288,col 82)",
      "(line 1289,col 9)-(line 1289,col 83)",
      "(line 1291,col 9)-(line 1291,col 51)",
      "(line 1292,col 9)-(line 1292,col 51)",
      "(line 1293,col 9)-(line 1293,col 50)",
      "(line 1294,col 9)-(line 1294,col 51)",
      "(line 1295,col 9)-(line 1295,col 51)",
      "(line 1296,col 9)-(line 1296,col 50)",
      "(line 1297,col 9)-(line 1297,col 50)",
      "(line 1298,col 9)-(line 1298,col 50)",
      "(line 1299,col 9)-(line 1299,col 50)",
      "(line 1301,col 9)-(line 1301,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testSizeFilterOnPaths()",
    "snippet": "@Test\n    public void testSizeFilterOnPaths() throws Exception {\n        final Path smallFile \u003d Paths.get(temporaryFolder.toString(), \"small.txt\");\n        if (Files.notExists(smallFile.getParent())) {\n            fail(\"Cannot create file \" + smallFile + \" as the parent directory does not exist\");\n        }\n        try (OutputStream output \u003d Files.newOutputStream(smallFile)) {\n            TestUtils.generateTestData(output, 32);\n        }\n        final Path largeFile \u003d Paths.get(temporaryFolder.toString(), \"large.txt\");\n        if (Files.notExists(largeFile.getParent())) {\n            fail(\"Cannot create file \" + largeFile + \" as the parent directory does not exist\");\n        }\n        try (OutputStream output \u003d Files.newOutputStream(largeFile)) {\n            TestUtils.generateTestData(output, 128);\n        }\n        final IOFileFilter filter1 \u003d FileFilterUtils.sizeFileFilter(64);\n        final IOFileFilter filter2 \u003d FileFilterUtils.sizeFileFilter(64, true);\n        final IOFileFilter filter3 \u003d FileFilterUtils.sizeFileFilter(64, false);\n\n        assertFiltering(filter1, smallFile, false);\n        assertFiltering(filter2, smallFile, false);\n        assertFiltering(filter3, smallFile, true);\n        assertFiltering(filter1, largeFile, true);\n        assertFiltering(filter2, largeFile, true);\n        assertFiltering(filter3, largeFile, false);\n\n        // size range tests\n        final IOFileFilter filter4 \u003d FileFilterUtils.sizeRangeFileFilter(33, 127);\n        final IOFileFilter filter5 \u003d FileFilterUtils.sizeRangeFileFilter(32, 127);\n        final IOFileFilter filter6 \u003d FileFilterUtils.sizeRangeFileFilter(33, 128);\n        final IOFileFilter filter7 \u003d FileFilterUtils.sizeRangeFileFilter(31, 129);\n        final IOFileFilter filter8 \u003d FileFilterUtils.sizeRangeFileFilter(128, 128);\n\n        assertFiltering(filter4, smallFile, false);\n        assertFiltering(filter4, largeFile, false);\n        assertFiltering(filter5, smallFile, true);\n        assertFiltering(filter5, largeFile, false);\n        assertFiltering(filter6, smallFile, false);\n        assertFiltering(filter6, largeFile, true);\n        assertFiltering(filter7, smallFile, true);\n        assertFiltering(filter7, largeFile, true);\n        assertFiltering(filter8, largeFile, true);\n\n        assertThrows(IllegalArgumentException.class, () -\u003e FileFilterUtils.sizeFileFilter(-1));\n    }",
    "begin_line": 1305,
    "end_line": 1349,
    "comment": "",
    "child_ranges": [
      "(line 1306,col 9)-(line 1306,col 82)",
      "(line 1307,col 9)-(line 1309,col 9)",
      "(line 1310,col 9)-(line 1312,col 9)",
      "(line 1313,col 9)-(line 1313,col 82)",
      "(line 1314,col 9)-(line 1316,col 9)",
      "(line 1317,col 9)-(line 1319,col 9)",
      "(line 1320,col 9)-(line 1320,col 72)",
      "(line 1321,col 9)-(line 1321,col 78)",
      "(line 1322,col 9)-(line 1322,col 79)",
      "(line 1324,col 9)-(line 1324,col 51)",
      "(line 1325,col 9)-(line 1325,col 51)",
      "(line 1326,col 9)-(line 1326,col 50)",
      "(line 1327,col 9)-(line 1327,col 50)",
      "(line 1328,col 9)-(line 1328,col 50)",
      "(line 1329,col 9)-(line 1329,col 51)",
      "(line 1332,col 9)-(line 1332,col 82)",
      "(line 1333,col 9)-(line 1333,col 82)",
      "(line 1334,col 9)-(line 1334,col 82)",
      "(line 1335,col 9)-(line 1335,col 82)",
      "(line 1336,col 9)-(line 1336,col 83)",
      "(line 1338,col 9)-(line 1338,col 51)",
      "(line 1339,col 9)-(line 1339,col 51)",
      "(line 1340,col 9)-(line 1340,col 50)",
      "(line 1341,col 9)-(line 1341,col 51)",
      "(line 1342,col 9)-(line 1342,col 51)",
      "(line 1343,col 9)-(line 1343,col 50)",
      "(line 1344,col 9)-(line 1344,col 50)",
      "(line 1345,col 9)-(line 1345,col 50)",
      "(line 1346,col 9)-(line 1346,col 50)",
      "(line 1348,col 9)-(line 1348,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testSuffix()",
    "snippet": "@Test\n    public void testSuffix() throws IOException {\n        IOFileFilter filter \u003d new SuffixFileFilter(\"tes\", \"est\");\n        final File testFile \u003d new File(\"test\");\n        final Path testPath \u003d testFile.toPath();\n        final File fredFile \u003d new File(\"fred\");\n        final Path fredPath \u003d fredFile.toPath();\n        //\n        assertFiltering(filter, new File(\"fred.tes\"), true);\n        assertFiltering(filter, new File(\"fred.est\"), true);\n        assertFiltering(filter, new File(\"fred.EST\"), false); // case-sensitive\n        assertFiltering(filter, new File(\"fred.exe\"), false);\n        //\n        assertFiltering(filter, new File(\"fred.tes\").toPath(), true);\n        assertFiltering(filter, new File(\"fred.est\").toPath(), true);\n        assertFiltering(filter, new File(\"fred.EST\").toPath(), false); // case-sensitive\n        assertFiltering(filter, new File(\"fred.exe\").toPath(), false);\n\n        filter \u003d FileFilterUtils.or(FileFilterUtils.suffixFileFilter(\"tes\"), FileFilterUtils.suffixFileFilter(\"est\"));\n        assertFiltering(filter, new File(\"fred\"), false);\n        assertFiltering(filter, new File(\".tes\"), true);\n        assertFiltering(filter, new File(\"fred.test\"), true);\n        //\n        assertFiltering(filter, new File(\"fred\").toPath(), false);\n        assertFiltering(filter, new File(\".tes\").toPath(), true);\n        assertFiltering(filter, new File(\"fred.test\").toPath(), true);\n\n        filter \u003d new SuffixFileFilter(\"est\");\n        assertFiltering(filter, new File(\"test\"), true);\n        assertFiltering(filter, new File(\"fred\"), false);\n        //\n        assertFiltering(filter, new File(\"test\").toPath(), true);\n        assertFiltering(filter, new File(\"fred\").toPath(), false);\n\n        assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));\n        assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));\n        //\n        assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));\n        assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));\n        //\n        assertTrue(filter.matches(testPath));\n        assertFalse(filter.matches(fredPath));\n\n        final List\u003cString\u003e prefixes \u003d Arrays.asList(\"ood\", \"red\");\n        final IOFileFilter listFilter \u003d new SuffixFileFilter(prefixes);\n\n        assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));\n        assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));\n        //\n        assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));\n        assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));\n\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((String) null));\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((String[]) null));\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((List\u003cString\u003e) null));\n    }",
    "begin_line": 1352,
    "end_line": 1406,
    "comment": "",
    "child_ranges": [
      "(line 1353,col 9)-(line 1353,col 65)",
      "(line 1354,col 9)-(line 1354,col 47)",
      "(line 1355,col 9)-(line 1355,col 48)",
      "(line 1356,col 9)-(line 1356,col 47)",
      "(line 1357,col 9)-(line 1357,col 48)",
      "(line 1359,col 9)-(line 1359,col 60)",
      "(line 1360,col 9)-(line 1360,col 60)",
      "(line 1361,col 9)-(line 1361,col 61)",
      "(line 1362,col 9)-(line 1362,col 61)",
      "(line 1364,col 9)-(line 1364,col 69)",
      "(line 1365,col 9)-(line 1365,col 69)",
      "(line 1366,col 9)-(line 1366,col 70)",
      "(line 1367,col 9)-(line 1367,col 70)",
      "(line 1369,col 9)-(line 1369,col 118)",
      "(line 1370,col 9)-(line 1370,col 57)",
      "(line 1371,col 9)-(line 1371,col 56)",
      "(line 1372,col 9)-(line 1372,col 61)",
      "(line 1374,col 9)-(line 1374,col 66)",
      "(line 1375,col 9)-(line 1375,col 65)",
      "(line 1376,col 9)-(line 1376,col 70)",
      "(line 1378,col 9)-(line 1378,col 45)",
      "(line 1379,col 9)-(line 1379,col 56)",
      "(line 1380,col 9)-(line 1380,col 57)",
      "(line 1382,col 9)-(line 1382,col 65)",
      "(line 1383,col 9)-(line 1383,col 66)",
      "(line 1385,col 9)-(line 1385,col 80)",
      "(line 1386,col 9)-(line 1386,col 81)",
      "(line 1388,col 9)-(line 1388,col 78)",
      "(line 1389,col 9)-(line 1389,col 79)",
      "(line 1391,col 9)-(line 1391,col 45)",
      "(line 1392,col 9)-(line 1392,col 46)",
      "(line 1394,col 9)-(line 1394,col 66)",
      "(line 1395,col 9)-(line 1395,col 71)",
      "(line 1397,col 9)-(line 1397,col 85)",
      "(line 1398,col 9)-(line 1398,col 84)",
      "(line 1400,col 9)-(line 1400,col 83)",
      "(line 1401,col 9)-(line 1401,col 82)",
      "(line 1403,col 9)-(line 1403,col 92)",
      "(line 1404,col 9)-(line 1404,col 94)",
      "(line 1405,col 9)-(line 1405,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testSuffixCaseInsensitive()",
    "snippet": "@Test\n    public void testSuffixCaseInsensitive() throws IOException {\n\n        IOFileFilter filter \u003d new SuffixFileFilter(new String[] {\"tes\", \"est\"}, IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"foo.tes\"), true);\n        assertFiltering(filter, new File(\"foo.est\"), true);\n        assertFiltering(filter, new File(\"foo.EST\"), true); // case-sensitive\n        assertFiltering(filter, new File(\"foo.TES\"), true); // case-sensitive\n        assertFiltering(filter, new File(\"foo.exe\"), false);\n\n        filter \u003d new SuffixFileFilter(\"est\", IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"test\"), true);\n        assertFiltering(filter, new File(\"TEST\"), true);\n\n        final List\u003cString\u003e suffixes \u003d Arrays.asList(\"tes\", \"est\");\n        filter \u003d new SuffixFileFilter(suffixes, IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"bar.tes\"), true);\n        assertFiltering(filter, new File(\"bar.est\"), true);\n        assertFiltering(filter, new File(\"bar.EST\"), true); // case-sensitive\n        assertFiltering(filter, new File(\"bar.TES\"), true); // case-sensitive\n        assertFiltering(filter, new File(\"bar.exe\"), false);\n\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((String) null, IOCase.INSENSITIVE));\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((String[]) null, IOCase.INSENSITIVE));\n        assertThrows(NullPointerException.class, () -\u003e new SuffixFileFilter((List\u003cString\u003e) null, IOCase.INSENSITIVE));\n\n        // FileFilterUtils.suffixFileFilter(String, IOCase) tests\n        filter \u003d FileFilterUtils.suffixFileFilter(\"est\", IOCase.INSENSITIVE);\n        assertFiltering(filter, new File(\"test\"), true);\n        assertFiltering(filter, new File(\"TEST\"), true);\n\n        assertThrows(NullPointerException.class, () -\u003e FileFilterUtils.suffixFileFilter(null, IOCase.INSENSITIVE));\n    }",
    "begin_line": 1409,
    "end_line": 1440,
    "comment": "",
    "child_ranges": [
      "(line 1411,col 9)-(line 1411,col 100)",
      "(line 1412,col 9)-(line 1412,col 59)",
      "(line 1413,col 9)-(line 1413,col 59)",
      "(line 1414,col 9)-(line 1414,col 59)",
      "(line 1415,col 9)-(line 1415,col 59)",
      "(line 1416,col 9)-(line 1416,col 60)",
      "(line 1418,col 9)-(line 1418,col 65)",
      "(line 1419,col 9)-(line 1419,col 56)",
      "(line 1420,col 9)-(line 1420,col 56)",
      "(line 1422,col 9)-(line 1422,col 66)",
      "(line 1423,col 9)-(line 1423,col 68)",
      "(line 1424,col 9)-(line 1424,col 59)",
      "(line 1425,col 9)-(line 1425,col 59)",
      "(line 1426,col 9)-(line 1426,col 59)",
      "(line 1427,col 9)-(line 1427,col 59)",
      "(line 1428,col 9)-(line 1428,col 60)",
      "(line 1430,col 9)-(line 1430,col 112)",
      "(line 1431,col 9)-(line 1431,col 114)",
      "(line 1432,col 9)-(line 1432,col 118)",
      "(line 1435,col 9)-(line 1435,col 77)",
      "(line 1436,col 9)-(line 1436,col 56)",
      "(line 1437,col 9)-(line 1437,col 56)",
      "(line 1439,col 9)-(line 1439,col 115)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.filefilter.FileFilterTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/filefilter/FileFilterTest.java",
    "signature": "org.apache.commons.io.filefilter.FileFilterTest.testTrue()",
    "snippet": "@Test\n    public void testTrue() throws IOException {\n        final IOFileFilter filter \u003d FileFilterUtils.trueFileFilter();\n        assertFiltering(filter, new File(\"foo.test\"), true);\n        assertFiltering(filter, new File(\"foo\"), true);\n        assertFiltering(filter, (File) null, true);\n        //\n        assertFiltering(filter, new File(\"foo.test\").toPath(), true);\n        assertFiltering(filter, new File(\"foo\").toPath(), true);\n        assertFiltering(filter, (Path) null, true);\n        //\n        assertSame(TrueFileFilter.TRUE, TrueFileFilter.INSTANCE);\n        assertSame(FalseFileFilter.FALSE, TrueFileFilter.INSTANCE.negate());\n        assertSame(FalseFileFilter.INSTANCE, TrueFileFilter.INSTANCE.negate());\n        assertNotNull(TrueFileFilter.INSTANCE.toString());\n    }",
    "begin_line": 1443,
    "end_line": 1457,
    "comment": "",
    "child_ranges": [
      "(line 1444,col 9)-(line 1444,col 69)",
      "(line 1445,col 9)-(line 1445,col 60)",
      "(line 1446,col 9)-(line 1446,col 55)",
      "(line 1447,col 9)-(line 1447,col 51)",
      "(line 1449,col 9)-(line 1449,col 69)",
      "(line 1450,col 9)-(line 1450,col 64)",
      "(line 1451,col 9)-(line 1451,col 51)",
      "(line 1453,col 9)-(line 1453,col 65)",
      "(line 1454,col 9)-(line 1454,col 76)",
      "(line 1455,col 9)-(line 1455,col 79)",
      "(line 1456,col 9)-(line 1456,col 58)"
    ]
  }
]