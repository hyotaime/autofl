[
  {
    "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
    "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.dimension2()",
    "snippet": "@Test\n    public void dimension2() {\n        KMeansPlusPlusClusterer\u003cEuclideanIntegerPoint\u003e transformer \u003d\n            new KMeansPlusPlusClusterer\u003cEuclideanIntegerPoint\u003e(new Random(1746432956321l));\n        EuclideanIntegerPoint[] points \u003d new EuclideanIntegerPoint[] {\n\n                // first expected cluster\n                new EuclideanIntegerPoint(new int[] { -15,  3 }),\n                new EuclideanIntegerPoint(new int[] { -15,  4 }),\n                new EuclideanIntegerPoint(new int[] { -15,  5 }),\n                new EuclideanIntegerPoint(new int[] { -14,  3 }),\n                new EuclideanIntegerPoint(new int[] { -14,  5 }),\n                new EuclideanIntegerPoint(new int[] { -13,  3 }),\n                new EuclideanIntegerPoint(new int[] { -13,  4 }),\n                new EuclideanIntegerPoint(new int[] { -13,  5 }),\n\n                // second expected cluster\n                new EuclideanIntegerPoint(new int[] { -1,  0 }),\n                new EuclideanIntegerPoint(new int[] { -1, -1 }),\n                new EuclideanIntegerPoint(new int[] {  0, -1 }),\n                new EuclideanIntegerPoint(new int[] {  1, -1 }),\n                new EuclideanIntegerPoint(new int[] {  1, -2 }),\n\n                // third expected cluster\n                new EuclideanIntegerPoint(new int[] { 13,  3 }),\n                new EuclideanIntegerPoint(new int[] { 13,  4 }),\n                new EuclideanIntegerPoint(new int[] { 14,  4 }),\n                new EuclideanIntegerPoint(new int[] { 14,  7 }),\n                new EuclideanIntegerPoint(new int[] { 16,  5 }),\n                new EuclideanIntegerPoint(new int[] { 16,  6 }),\n                new EuclideanIntegerPoint(new int[] { 17,  4 }),\n                new EuclideanIntegerPoint(new int[] { 17,  7 })\n\n        };\n        List\u003cCluster\u003cEuclideanIntegerPoint\u003e\u003e clusters \u003d\n            transformer.cluster(Arrays.asList(points), 3, 10);\n\n        assertEquals(3, clusters.size());\n        boolean cluster1Found \u003d false;\n        boolean cluster2Found \u003d false;\n        boolean cluster3Found \u003d false;\n        for (Cluster\u003cEuclideanIntegerPoint\u003e cluster : clusters) {\n            int[] center \u003d cluster.getCenter().getPoint();\n            if (center[0] \u003c 0) {\n                cluster1Found \u003d true;\n                assertEquals(8, cluster.getPoints().size());\n                assertEquals(-14, center[0]);\n                assertEquals( 4, center[1]);\n            } else if (center[1] \u003c 0) {\n                cluster2Found \u003d true;\n                assertEquals(5, cluster.getPoints().size());\n                assertEquals( 0, center[0]);\n                assertEquals(-1, center[1]);\n            } else {\n                cluster3Found \u003d true;\n                assertEquals(8, cluster.getPoints().size());\n                assertEquals(15, center[0]);\n                assertEquals(5, center[1]);\n            }\n        }\n        assertTrue(cluster1Found);\n        assertTrue(cluster2Found);\n        assertTrue(cluster3Found);\n\n    }",
    "begin_line": 32,
    "end_line": 95,
    "comment": "",
    "child_ranges": [
      "(line 33,col 9)-(line 34,col 91)",
      "(line 35,col 9)-(line 64,col 10)",
      "(line 65,col 9)-(line 66,col 62)",
      "(line 68,col 9)-(line 68,col 41)",
      "(line 69,col 9)-(line 69,col 38)",
      "(line 70,col 9)-(line 70,col 38)",
      "(line 71,col 9)-(line 71,col 38)",
      "(line 72,col 9)-(line 90,col 9)",
      "(line 91,col 9)-(line 91,col 34)",
      "(line 92,col 9)-(line 92,col 34)",
      "(line 93,col 9)-(line 93,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
    "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate()",
    "snippet": "@Test\n    public void testPerformClusterAnalysisDegenerate() {\n        KMeansPlusPlusClusterer\u003cEuclideanIntegerPoint\u003e transformer \u003d new KMeansPlusPlusClusterer\u003cEuclideanIntegerPoint\u003e(\n                new Random(1746432956321l));\n        EuclideanIntegerPoint[] points \u003d new EuclideanIntegerPoint[] {\n                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n        List\u003cCluster\u003cEuclideanIntegerPoint\u003e\u003e clusters \u003d transformer.cluster(Arrays.asList(points), 1, 1);\n        assertEquals(1, clusters.size());\n        assertEquals(2, (clusters.get(0).getPoints().size()));\n        EuclideanIntegerPoint pt1 \u003d new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n        EuclideanIntegerPoint pt2 \u003d new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n        assertTrue(clusters.get(0).getPoints().contains(pt1));\n        assertTrue(clusters.get(0).getPoints().contains(pt2));\n\n    }",
    "begin_line": 103,
    "end_line": 117,
    "comment": "/** \n * JIRA: MATH-305 Two points, one cluster, one iteration\n */\n",
    "child_ranges": [
      "(line 104,col 9)-(line 105,col 44)",
      "(line 106,col 9)-(line 108,col 73)",
      "(line 109,col 9)-(line 109,col 105)",
      "(line 110,col 9)-(line 110,col 41)",
      "(line 111,col 9)-(line 111,col 62)",
      "(line 112,col 9)-(line 112,col 90)",
      "(line 113,col 9)-(line 113,col 90)",
      "(line 114,col 9)-(line 114,col 62)",
      "(line 115,col 9)-(line 115,col 62)"
    ]
  }
]