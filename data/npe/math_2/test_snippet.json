[
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testDimensions()",
    "snippet": "@Test\n    public void testDimensions() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testData2);\n        Assert.assertEquals(\"testData row dimension\",3,m.getRowDimension());\n        Assert.assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n        Assert.assertTrue(\"testData is square\",m.isSquare());\n        Assert.assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n        Assert.assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n        Assert.assertTrue(\"testData2 is not square\",!m2.isSquare());\n    }",
    "begin_line": 104,
    "end_line": 113,
    "comment": "/** \n * test dimensions \n */\n",
    "child_ranges": [
      "(line 105,col 9)-(line 105,col 68)",
      "(line 106,col 9)-(line 106,col 70)",
      "(line 107,col 9)-(line 107,col 76)",
      "(line 108,col 9)-(line 108,col 82)",
      "(line 109,col 9)-(line 109,col 61)",
      "(line 110,col 9)-(line 110,col 78)",
      "(line 111,col 9)-(line 111,col 84)",
      "(line 112,col 9)-(line 112,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testCopyFunctions()",
    "snippet": "@Test\n    public void testCopyFunctions() {\n        Array2DRowRealMatrix m1 \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(m1.getData());\n        Assert.assertEquals(m2,m1);\n        Array2DRowRealMatrix m3 \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m4 \u003d new Array2DRowRealMatrix(m3.getData(), false);\n        Assert.assertEquals(m4,m3);\n    }",
    "begin_line": 117,
    "end_line": 124,
    "comment": "/** \n * test copy functions \n */\n",
    "child_ranges": [
      "(line 118,col 9)-(line 118,col 69)",
      "(line 119,col 9)-(line 119,col 73)",
      "(line 120,col 9)-(line 120,col 35)",
      "(line 121,col 9)-(line 121,col 69)",
      "(line 122,col 9)-(line 122,col 80)",
      "(line 123,col 9)-(line 123,col 35)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testAdd()",
    "snippet": "@Test\n    public void testAdd() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix mInv \u003d new Array2DRowRealMatrix(testDataInv);\n        RealMatrix mPlusMInv \u003d m.add(mInv);\n        double[][] sumEntries \u003d mPlusMInv.getData();\n        for (int row \u003d 0; row \u003c m.getRowDimension(); row++) {\n            for (int col \u003d 0; col \u003c m.getColumnDimension(); col++) {\n                Assert.assertEquals(\"sum entry entry\",\n                    testDataPlusInv[row][col],sumEntries[row][col],\n                        entryTolerance);\n            }\n        }\n    }",
    "begin_line": 128,
    "end_line": 140,
    "comment": "/** \n * test add \n */\n",
    "child_ranges": [
      "(line 129,col 9)-(line 129,col 68)",
      "(line 130,col 9)-(line 130,col 74)",
      "(line 131,col 9)-(line 131,col 43)",
      "(line 132,col 9)-(line 132,col 52)",
      "(line 133,col 9)-(line 139,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testAddFail()",
    "snippet": "@Test\n    public void testAddFail() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testData2);\n        try {\n            m.add(m2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 144,
    "end_line": 153,
    "comment": "/** \n * test add failure \n */\n",
    "child_ranges": [
      "(line 145,col 9)-(line 145,col 68)",
      "(line 146,col 9)-(line 146,col 70)",
      "(line 147,col 9)-(line 152,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testNorm()",
    "snippet": "@Test\n    public void testNorm() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testData2);\n        Assert.assertEquals(\"testData norm\",14d,m.getNorm(),entryTolerance);\n        Assert.assertEquals(\"testData2 norm\",7d,m2.getNorm(),entryTolerance);\n    }",
    "begin_line": 157,
    "end_line": 162,
    "comment": "/** \n * test norm \n */\n",
    "child_ranges": [
      "(line 158,col 9)-(line 158,col 68)",
      "(line 159,col 9)-(line 159,col 70)",
      "(line 160,col 9)-(line 160,col 76)",
      "(line 161,col 9)-(line 161,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testFrobeniusNorm()",
    "snippet": "@Test\n    public void testFrobeniusNorm() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testData2);\n        Assert.assertEquals(\"testData Frobenius norm\", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);\n        Assert.assertEquals(\"testData2 Frobenius norm\", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);\n    }",
    "begin_line": 166,
    "end_line": 171,
    "comment": "/** \n * test Frobenius norm \n */\n",
    "child_ranges": [
      "(line 167,col 9)-(line 167,col 68)",
      "(line 168,col 9)-(line 168,col 70)",
      "(line 169,col 9)-(line 169,col 115)",
      "(line 170,col 9)-(line 170,col 116)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testPlusMinus()",
    "snippet": "@Test\n    public void testPlusMinus() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testDataInv);\n        TestUtils.assertEquals(\"m-n \u003d m + -n\",m.subtract(m2),\n            m2.scalarMultiply(-1d).add(m),entryTolerance);\n        try {\n            m.subtract(new Array2DRowRealMatrix(testData2));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 175,
    "end_line": 186,
    "comment": "/** \n * test m-n \u003d m + -n \n */\n",
    "child_ranges": [
      "(line 176,col 9)-(line 176,col 68)",
      "(line 177,col 9)-(line 177,col 72)",
      "(line 178,col 9)-(line 179,col 58)",
      "(line 180,col 9)-(line 185,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testMultiply()",
    "snippet": "@Test\n    public void testMultiply() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix mInv \u003d new Array2DRowRealMatrix(testDataInv);\n        Array2DRowRealMatrix identity \u003d new Array2DRowRealMatrix(id);\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix(testData2);\n        TestUtils.assertEquals(\"inverse multiply\",m.multiply(mInv),\n            identity,entryTolerance);\n        TestUtils.assertEquals(\"inverse multiply\",mInv.multiply(m),\n            identity,entryTolerance);\n        TestUtils.assertEquals(\"identity multiply\",m.multiply(identity),\n            m,entryTolerance);\n        TestUtils.assertEquals(\"identity multiply\",identity.multiply(mInv),\n            mInv,entryTolerance);\n        TestUtils.assertEquals(\"identity multiply\",m2.multiply(identity),\n            m2,entryTolerance);\n        try {\n            m.multiply(new Array2DRowRealMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 190,
    "end_line": 211,
    "comment": "/** \n * test multiply \n */\n",
    "child_ranges": [
      "(line 191,col 9)-(line 191,col 68)",
      "(line 192,col 9)-(line 192,col 74)",
      "(line 193,col 9)-(line 193,col 69)",
      "(line 194,col 9)-(line 194,col 70)",
      "(line 195,col 9)-(line 196,col 37)",
      "(line 197,col 9)-(line 198,col 37)",
      "(line 199,col 9)-(line 200,col 30)",
      "(line 201,col 9)-(line 202,col 33)",
      "(line 203,col 9)-(line 204,col 31)",
      "(line 205,col 9)-(line 210,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testMultiply2()",
    "snippet": "@Test\n    public void testMultiply2() {\n       RealMatrix m3 \u003d new Array2DRowRealMatrix(d3);\n       RealMatrix m4 \u003d new Array2DRowRealMatrix(d4);\n       RealMatrix m5 \u003d new Array2DRowRealMatrix(d5);\n       TestUtils.assertEquals(\"m3*m4\u003dm5\", m3.multiply(m4), m5, entryTolerance);\n   }",
    "begin_line": 220,
    "end_line": 225,
    "comment": "",
    "child_ranges": [
      "(line 221,col 8)-(line 221,col 52)",
      "(line 222,col 8)-(line 222,col 52)",
      "(line 223,col 8)-(line 223,col 52)",
      "(line 224,col 8)-(line 224,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testPower()",
    "snippet": "@Test\n    public void testPower() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix mInv \u003d new Array2DRowRealMatrix(testDataInv);\n        Array2DRowRealMatrix mPlusInv \u003d new Array2DRowRealMatrix(testDataPlusInv);\n        Array2DRowRealMatrix identity \u003d new Array2DRowRealMatrix(id);\n        \n        TestUtils.assertEquals(\"m^0\", m.power(0),\n            identity, entryTolerance);        \n        TestUtils.assertEquals(\"mInv^0\", mInv.power(0),\n                identity, entryTolerance);        \n        TestUtils.assertEquals(\"mPlusInv^0\", mPlusInv.power(0),\n                identity, entryTolerance);\n        \n        TestUtils.assertEquals(\"m^1\", m.power(1),\n                m, entryTolerance);        \n        TestUtils.assertEquals(\"mInv^1\", mInv.power(1),\n                mInv, entryTolerance);        \n        TestUtils.assertEquals(\"mPlusInv^1\", mPlusInv.power(1),\n                mPlusInv, entryTolerance); \n        \n        RealMatrix C1 \u003d m.copy();\n        RealMatrix C2 \u003d mInv.copy();\n        RealMatrix C3 \u003d mPlusInv.copy();\n        \n        for (int i \u003d 2; i \u003c\u003d 10; ++i) {\n            C1 \u003d C1.multiply(m);\n            C2 \u003d C2.multiply(mInv);\n            C3 \u003d C3.multiply(mPlusInv);\n            \n            TestUtils.assertEquals(\"m^\" + i, m.power(i),\n                    C1, entryTolerance);        \n            TestUtils.assertEquals(\"mInv^\" + i, mInv.power(i),\n                    C2, entryTolerance);        \n            TestUtils.assertEquals(\"mPlusInv^\" + i, mPlusInv.power(i),\n                    C3, entryTolerance);            \n        }\n        \n        try {\n            Array2DRowRealMatrix mNotSquare \u003d new Array2DRowRealMatrix(testData2T);\n            mNotSquare.power(2);\n            Assert.fail(\"Expecting NonSquareMatrixException\");\n        } catch (NonSquareMatrixException ex) {\n            // ignored\n        }\n        \n        try {\n            m.power(-1);\n            Assert.fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 228,
    "end_line": 279,
    "comment": "",
    "child_ranges": [
      "(line 229,col 9)-(line 229,col 68)",
      "(line 230,col 9)-(line 230,col 74)",
      "(line 231,col 9)-(line 231,col 82)",
      "(line 232,col 9)-(line 232,col 69)",
      "(line 234,col 9)-(line 235,col 38)",
      "(line 236,col 9)-(line 237,col 42)",
      "(line 238,col 9)-(line 239,col 42)",
      "(line 241,col 9)-(line 242,col 35)",
      "(line 243,col 9)-(line 244,col 38)",
      "(line 245,col 9)-(line 246,col 42)",
      "(line 248,col 9)-(line 248,col 33)",
      "(line 249,col 9)-(line 249,col 36)",
      "(line 250,col 9)-(line 250,col 40)",
      "(line 252,col 9)-(line 263,col 9)",
      "(line 265,col 9)-(line 271,col 9)",
      "(line 273,col 9)-(line 278,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testTrace()",
    "snippet": "@Test\n    public void testTrace() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(id);\n        Assert.assertEquals(\"identity trace\",3d,m.getTrace(),entryTolerance);\n        m \u003d new Array2DRowRealMatrix(testData2);\n        try {\n            m.getTrace();\n            Assert.fail(\"Expecting NonSquareMatrixException\");\n        } catch (NonSquareMatrixException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 283,
    "end_line": 293,
    "comment": "/** \n * test trace \n */\n",
    "child_ranges": [
      "(line 284,col 9)-(line 284,col 52)",
      "(line 285,col 9)-(line 285,col 77)",
      "(line 286,col 9)-(line 286,col 48)",
      "(line 287,col 9)-(line 292,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testScalarAdd()",
    "snippet": "@Test\n    public void testScalarAdd() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        TestUtils.assertEquals(\"scalar add\",new Array2DRowRealMatrix(testDataPlus2),\n            m.scalarAdd(2d),entryTolerance);\n    }",
    "begin_line": 297,
    "end_line": 301,
    "comment": "/** \n * test sclarAdd \n */\n",
    "child_ranges": [
      "(line 298,col 9)-(line 298,col 58)",
      "(line 299,col 9)-(line 300,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testOperate()",
    "snippet": "@Test\n    public void testOperate() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(id);\n        TestUtils.assertEquals(\"identity operate\", testVector,\n                    m.operate(testVector), entryTolerance);\n        TestUtils.assertEquals(\"identity operate\", testVector,\n                    m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);\n        m \u003d new Array2DRowRealMatrix(bigSingular);\n        try {\n            m.operate(testVector);\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 305,
    "end_line": 318,
    "comment": "/** \n * test operate \n */\n",
    "child_ranges": [
      "(line 306,col 9)-(line 306,col 52)",
      "(line 307,col 9)-(line 308,col 59)",
      "(line 309,col 9)-(line 310,col 90)",
      "(line 311,col 9)-(line 311,col 50)",
      "(line 312,col 9)-(line 317,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testMath209()",
    "snippet": "@Test\n    public void testMath209() {\n        RealMatrix a \u003d new Array2DRowRealMatrix(new double[][] {\n                { 1, 2 }, { 3, 4 }, { 5, 6 }\n        }, false);\n        double[] b \u003d a.operate(new double[] { 1, 1 });\n        Assert.assertEquals(a.getRowDimension(), b.length);\n        Assert.assertEquals( 3.0, b[0], 1.0e-12);\n        Assert.assertEquals( 7.0, b[1], 1.0e-12);\n        Assert.assertEquals(11.0, b[2], 1.0e-12);\n    }",
    "begin_line": 322,
    "end_line": 331,
    "comment": "/** \n * test issue MATH-209 \n */\n",
    "child_ranges": [
      "(line 323,col 9)-(line 325,col 18)",
      "(line 326,col 9)-(line 326,col 54)",
      "(line 327,col 9)-(line 327,col 59)",
      "(line 328,col 9)-(line 328,col 49)",
      "(line 329,col 9)-(line 329,col 49)",
      "(line 330,col 9)-(line 330,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testTranspose()",
    "snippet": "@Test\n    public void testTranspose() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        RealMatrix mIT \u003d new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n        RealMatrix mTI \u003d new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n        TestUtils.assertEquals(\"inverse-transpose\", mIT, mTI, normTolerance);\n        m \u003d new Array2DRowRealMatrix(testData2);\n        RealMatrix mt \u003d new Array2DRowRealMatrix(testData2T);\n        TestUtils.assertEquals(\"transpose\",mt,m.transpose(),normTolerance);\n    }",
    "begin_line": 335,
    "end_line": 343,
    "comment": "/** \n * test transpose \n */\n",
    "child_ranges": [
      "(line 336,col 9)-(line 336,col 58)",
      "(line 337,col 9)-(line 337,col 89)",
      "(line 338,col 9)-(line 338,col 89)",
      "(line 339,col 9)-(line 339,col 77)",
      "(line 340,col 9)-(line 340,col 48)",
      "(line 341,col 9)-(line 341,col 61)",
      "(line 342,col 9)-(line 342,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testPremultiplyVector()",
    "snippet": "@Test\n    public void testPremultiplyVector() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        TestUtils.assertEquals(\"premultiply\", m.preMultiply(testVector),\n                    preMultTest, normTolerance);\n        TestUtils.assertEquals(\"premultiply\", m.preMultiply(new ArrayRealVector(testVector).getData()),\n                    preMultTest, normTolerance);\n        m \u003d new Array2DRowRealMatrix(bigSingular);\n        try {\n            m.preMultiply(testVector);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 347,
    "end_line": 360,
    "comment": "/** \n * test preMultiply by vector \n */\n",
    "child_ranges": [
      "(line 348,col 9)-(line 348,col 58)",
      "(line 349,col 9)-(line 350,col 48)",
      "(line 351,col 9)-(line 352,col 48)",
      "(line 353,col 9)-(line 353,col 50)",
      "(line 354,col 9)-(line 359,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testPremultiply()",
    "snippet": "@Test\n    public void testPremultiply() {\n        RealMatrix m3 \u003d new Array2DRowRealMatrix(d3);\n        RealMatrix m4 \u003d new Array2DRowRealMatrix(d4);\n        RealMatrix m5 \u003d new Array2DRowRealMatrix(d5);\n        TestUtils.assertEquals(\"m3*m4\u003dm5\", m4.preMultiply(m3), m5, entryTolerance);\n\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix mInv \u003d new Array2DRowRealMatrix(testDataInv);\n        Array2DRowRealMatrix identity \u003d new Array2DRowRealMatrix(id);\n        TestUtils.assertEquals(\"inverse multiply\",m.preMultiply(mInv),\n                identity,entryTolerance);\n        TestUtils.assertEquals(\"inverse multiply\",mInv.preMultiply(m),\n                identity,entryTolerance);\n        TestUtils.assertEquals(\"identity multiply\",m.preMultiply(identity),\n                m,entryTolerance);\n        TestUtils.assertEquals(\"identity multiply\",identity.preMultiply(mInv),\n                mInv,entryTolerance);\n        try {\n            m.preMultiply(new Array2DRowRealMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 363,
    "end_line": 386,
    "comment": "",
    "child_ranges": [
      "(line 364,col 9)-(line 364,col 53)",
      "(line 365,col 9)-(line 365,col 53)",
      "(line 366,col 9)-(line 366,col 53)",
      "(line 367,col 9)-(line 367,col 83)",
      "(line 369,col 9)-(line 369,col 68)",
      "(line 370,col 9)-(line 370,col 74)",
      "(line 371,col 9)-(line 371,col 69)",
      "(line 372,col 9)-(line 373,col 41)",
      "(line 374,col 9)-(line 375,col 41)",
      "(line 376,col 9)-(line 377,col 34)",
      "(line 378,col 9)-(line 379,col 37)",
      "(line 380,col 9)-(line 385,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetVectors()",
    "snippet": "@Test\n    public void testGetVectors() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        TestUtils.assertEquals(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n        TestUtils.assertEquals(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n        try {\n            m.getRow(10);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 389,
    "end_line": 405,
    "comment": "",
    "child_ranges": [
      "(line 390,col 9)-(line 390,col 58)",
      "(line 391,col 9)-(line 391,col 82)",
      "(line 392,col 9)-(line 392,col 85)",
      "(line 393,col 9)-(line 398,col 9)",
      "(line 399,col 9)-(line 404,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetEntry()",
    "snippet": "@Test\n    public void testGetEntry() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Assert.assertEquals(\"get entry\",m.getEntry(0,1),2d,entryTolerance);\n        try {\n            m.getEntry(10, 4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 408,
    "end_line": 417,
    "comment": "",
    "child_ranges": [
      "(line 409,col 9)-(line 409,col 58)",
      "(line 410,col 9)-(line 410,col 75)",
      "(line 411,col 9)-(line 416,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testExamples()",
    "snippet": "@Test\n    public void testExamples() {\n        // Create a real matrix with two rows and three columns\n        double[][] matrixData \u003d { {1d,2d,3d}, {2d,5d,3d}};\n        RealMatrix m \u003d new Array2DRowRealMatrix(matrixData);\n        // One more with three rows, two columns\n        double[][] matrixData2 \u003d { {1d,2d}, {2d,5d}, {1d, 7d}};\n        RealMatrix n \u003d new Array2DRowRealMatrix(matrixData2);\n        // Now multiply m by n\n        RealMatrix p \u003d m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        // Invert p\n        RealMatrix pInverse \u003d new LUDecompositionImpl(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        // Solve example\n        double[][] coefficientsData \u003d {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n        RealMatrix coefficients \u003d new Array2DRowRealMatrix(coefficientsData);\n        double[] constants \u003d {1, -2, 1};\n        double[] solution \u003d new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n        Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n        Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);\n\n    }",
    "begin_line": 421,
    "end_line": 446,
    "comment": "/** \n * test examples in user guide \n */\n",
    "child_ranges": [
      "(line 423,col 9)-(line 423,col 58)",
      "(line 424,col 9)-(line 424,col 60)",
      "(line 426,col 9)-(line 426,col 63)",
      "(line 427,col 9)-(line 427,col 61)",
      "(line 429,col 9)-(line 429,col 37)",
      "(line 430,col 9)-(line 430,col 52)",
      "(line 431,col 9)-(line 431,col 55)",
      "(line 433,col 9)-(line 433,col 82)",
      "(line 434,col 9)-(line 434,col 59)",
      "(line 435,col 9)-(line 435,col 62)",
      "(line 438,col 9)-(line 438,col 76)",
      "(line 439,col 9)-(line 439,col 77)",
      "(line 440,col 9)-(line 440,col 40)",
      "(line 441,col 9)-(line 441,col 95)",
      "(line 442,col 9)-(line 442,col 101)",
      "(line 443,col 9)-(line 443,col 103)",
      "(line 444,col 9)-(line 444,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetSubMatrix()",
    "snippet": "@Test\n    public void testGetSubMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n        checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n        checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);\n        checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);\n        checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);\n        checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);\n        checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);\n        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n        checkGetSubMatrix(m, null, -1, 1, 2, 2, true);\n        checkGetSubMatrix(m, null,  1, 0, 2, 2, true);\n        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n        checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);\n        checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);\n    }",
    "begin_line": 450,
    "end_line": 467,
    "comment": "",
    "child_ranges": [
      "(line 451,col 9)-(line 451,col 61)",
      "(line 452,col 9)-(line 452,col 68)",
      "(line 453,col 9)-(line 453,col 68)",
      "(line 454,col 9)-(line 454,col 68)",
      "(line 455,col 9)-(line 455,col 97)",
      "(line 456,col 9)-(line 456,col 97)",
      "(line 457,col 9)-(line 457,col 97)",
      "(line 458,col 9)-(line 458,col 97)",
      "(line 459,col 9)-(line 459,col 97)",
      "(line 460,col 9)-(line 460,col 97)",
      "(line 461,col 9)-(line 461,col 54)",
      "(line 462,col 9)-(line 462,col 54)",
      "(line 463,col 9)-(line 463,col 54)",
      "(line 464,col 9)-(line 464,col 54)",
      "(line 465,col 9)-(line 465,col 75)",
      "(line 466,col 9)-(line 466,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.checkGetSubMatrix(RealMatrix, double[][], int, int, int, int, boolean)",
    "snippet": "private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n                                   int startRow, int endRow, int startColumn, int endColumn,\n                                   boolean mustFail) {\n        try {\n            RealMatrix sub \u003d m.getSubMatrix(startRow, endRow, startColumn, endColumn);\n            Assert.assertEquals(new Array2DRowRealMatrix(reference), sub);\n            if (mustFail) {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 469,
    "end_line": 491,
    "comment": "",
    "child_ranges": [
      "(line 472,col 9)-(line 490,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.checkGetSubMatrix(RealMatrix, double[][], int[], int[], boolean)",
    "snippet": "private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n                                   int[] selectedRows, int[] selectedColumns,\n                                   boolean mustFail) {\n        try {\n            RealMatrix sub \u003d m.getSubMatrix(selectedRows, selectedColumns);\n            Assert.assertEquals(new Array2DRowRealMatrix(reference), sub);\n            if (mustFail) {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 493,
    "end_line": 515,
    "comment": "",
    "child_ranges": [
      "(line 496,col 9)-(line 514,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testCopySubMatrix()",
    "snippet": "@Test\n    public void testCopySubMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n        checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n        checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);\n        checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);\n        checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);\n        checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);\n        checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);\n\n        checkCopy(m, null,  1, 0, 2, 4, true);\n        checkCopy(m, null, -1, 1, 2, 2, true);\n        checkCopy(m, null,  1, 0, 2, 2, true);\n        checkCopy(m, null,  1, 0, 2, 4, true);\n        checkCopy(m, null, new int[] {},    new int[] { 0 }, true);\n        checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);\n    }",
    "begin_line": 518,
    "end_line": 536,
    "comment": "",
    "child_ranges": [
      "(line 519,col 9)-(line 519,col 61)",
      "(line 520,col 9)-(line 520,col 60)",
      "(line 521,col 9)-(line 521,col 60)",
      "(line 522,col 9)-(line 522,col 60)",
      "(line 523,col 9)-(line 523,col 89)",
      "(line 524,col 9)-(line 524,col 89)",
      "(line 525,col 9)-(line 525,col 89)",
      "(line 526,col 9)-(line 526,col 89)",
      "(line 527,col 9)-(line 527,col 89)",
      "(line 528,col 9)-(line 528,col 89)",
      "(line 530,col 9)-(line 530,col 46)",
      "(line 531,col 9)-(line 531,col 46)",
      "(line 532,col 9)-(line 532,col 46)",
      "(line 533,col 9)-(line 533,col 46)",
      "(line 534,col 9)-(line 534,col 67)",
      "(line 535,col 9)-(line 535,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.checkCopy(RealMatrix, double[][], int, int, int, int, boolean)",
    "snippet": "private void checkCopy(RealMatrix m, double[][] reference,\n                           int startRow, int endRow, int startColumn, int endColumn,\n                           boolean mustFail) {\n        try {\n            double[][] sub \u003d (reference \u003d\u003d null) ?\n                             new double[1][1] :\n                             new double[reference.length][reference[0].length];\n            m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);\n            Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));\n            if (mustFail) {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 538,
    "end_line": 563,
    "comment": "",
    "child_ranges": [
      "(line 541,col 9)-(line 562,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.checkCopy(RealMatrix, double[][], int[], int[], boolean)",
    "snippet": "private void checkCopy(RealMatrix m, double[][] reference,\n                           int[] selectedRows, int[] selectedColumns,\n                           boolean mustFail) {\n        try {\n            double[][] sub \u003d (reference \u003d\u003d null) ?\n                    new double[1][1] :\n                    new double[reference.length][reference[0].length];\n            m.copySubMatrix(selectedRows, selectedColumns, sub);\n            Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));\n            if (mustFail) {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (!mustFail) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 565,
    "end_line": 590,
    "comment": "",
    "child_ranges": [
      "(line 568,col 9)-(line 589,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetRowMatrix()",
    "snippet": "@Test\n    public void testGetRowMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealMatrix mRow0 \u003d new Array2DRowRealMatrix(subRow0);\n        RealMatrix mRow3 \u003d new Array2DRowRealMatrix(subRow3);\n        Assert.assertEquals(\"Row0\", mRow0,\n                m.getRowMatrix(0));\n        Assert.assertEquals(\"Row3\", mRow3,\n                m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 593,
    "end_line": 613,
    "comment": "",
    "child_ranges": [
      "(line 594,col 9)-(line 594,col 61)",
      "(line 595,col 9)-(line 595,col 61)",
      "(line 596,col 9)-(line 596,col 61)",
      "(line 597,col 9)-(line 598,col 35)",
      "(line 599,col 9)-(line 600,col 35)",
      "(line 601,col 9)-(line 606,col 9)",
      "(line 607,col 9)-(line 612,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetRowMatrix()",
    "snippet": "@Test\n    public void testSetRowMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealMatrix mRow3 \u003d new Array2DRowRealMatrix(subRow3);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowMatrix(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowMatrix(0));\n        try {\n            m.setRowMatrix(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 616,
    "end_line": 634,
    "comment": "",
    "child_ranges": [
      "(line 617,col 9)-(line 617,col 61)",
      "(line 618,col 9)-(line 618,col 61)",
      "(line 619,col 9)-(line 619,col 55)",
      "(line 620,col 9)-(line 620,col 33)",
      "(line 621,col 9)-(line 621,col 54)",
      "(line 622,col 9)-(line 627,col 9)",
      "(line 628,col 9)-(line 633,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetColumnMatrix()",
    "snippet": "@Test\n    public void testGetColumnMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealMatrix mColumn1 \u003d new Array2DRowRealMatrix(subColumn1);\n        RealMatrix mColumn3 \u003d new Array2DRowRealMatrix(subColumn3);\n        Assert.assertEquals(\"Column1\", mColumn1,\n                m.getColumnMatrix(1));\n        Assert.assertEquals(\"Column3\", mColumn3,\n                m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 637,
    "end_line": 657,
    "comment": "",
    "child_ranges": [
      "(line 638,col 9)-(line 638,col 61)",
      "(line 639,col 9)-(line 639,col 67)",
      "(line 640,col 9)-(line 640,col 67)",
      "(line 641,col 9)-(line 642,col 38)",
      "(line 643,col 9)-(line 644,col 38)",
      "(line 645,col 9)-(line 650,col 9)",
      "(line 651,col 9)-(line 656,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetColumnMatrix()",
    "snippet": "@Test\n    public void testSetColumnMatrix() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealMatrix mColumn3 \u003d new Array2DRowRealMatrix(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));\n        m.setColumnMatrix(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnMatrix(1));\n        try {\n            m.setColumnMatrix(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 660,
    "end_line": 678,
    "comment": "",
    "child_ranges": [
      "(line 661,col 9)-(line 661,col 61)",
      "(line 662,col 9)-(line 662,col 67)",
      "(line 663,col 9)-(line 663,col 61)",
      "(line 664,col 9)-(line 664,col 39)",
      "(line 665,col 9)-(line 665,col 60)",
      "(line 666,col 9)-(line 671,col 9)",
      "(line 672,col 9)-(line 677,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetRowVector()",
    "snippet": "@Test\n    public void testGetRowVector() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealVector mRow0 \u003d new ArrayRealVector(subRow0[0]);\n        RealVector mRow3 \u003d new ArrayRealVector(subRow3[0]);\n        Assert.assertEquals(\"Row0\", mRow0, m.getRowVector(0));\n        Assert.assertEquals(\"Row3\", mRow3, m.getRowVector(3));\n        try {\n            m.getRowVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 681,
    "end_line": 699,
    "comment": "",
    "child_ranges": [
      "(line 682,col 9)-(line 682,col 61)",
      "(line 683,col 9)-(line 683,col 59)",
      "(line 684,col 9)-(line 684,col 59)",
      "(line 685,col 9)-(line 685,col 62)",
      "(line 686,col 9)-(line 686,col 62)",
      "(line 687,col 9)-(line 692,col 9)",
      "(line 693,col 9)-(line 698,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetRowVector()",
    "snippet": "@Test\n    public void testSetRowVector() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealVector mRow3 \u003d new ArrayRealVector(subRow3[0]);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowVector(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowVector(0));\n        try {\n            m.setRowVector(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowVector(0, new ArrayRealVector(5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 702,
    "end_line": 720,
    "comment": "",
    "child_ranges": [
      "(line 703,col 9)-(line 703,col 61)",
      "(line 704,col 9)-(line 704,col 59)",
      "(line 705,col 9)-(line 705,col 55)",
      "(line 706,col 9)-(line 706,col 33)",
      "(line 707,col 9)-(line 707,col 54)",
      "(line 708,col 9)-(line 713,col 9)",
      "(line 714,col 9)-(line 719,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetColumnVector()",
    "snippet": "@Test\n    public void testGetColumnVector() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealVector mColumn1 \u003d columnToVector(subColumn1);\n        RealVector mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertEquals(\"Column1\", mColumn1, m.getColumnVector(1));\n        Assert.assertEquals(\"Column3\", mColumn3, m.getColumnVector(3));\n        try {\n            m.getColumnVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 723,
    "end_line": 741,
    "comment": "",
    "child_ranges": [
      "(line 724,col 9)-(line 724,col 61)",
      "(line 725,col 9)-(line 725,col 57)",
      "(line 726,col 9)-(line 726,col 57)",
      "(line 727,col 9)-(line 727,col 71)",
      "(line 728,col 9)-(line 728,col 71)",
      "(line 729,col 9)-(line 734,col 9)",
      "(line 735,col 9)-(line 740,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetColumnVector()",
    "snippet": "@Test\n    public void testSetColumnVector() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        RealVector mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnVector(1));\n        m.setColumnVector(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnVector(1));\n        try {\n            m.setColumnVector(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnVector(0, new ArrayRealVector(5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 744,
    "end_line": 762,
    "comment": "",
    "child_ranges": [
      "(line 745,col 9)-(line 745,col 61)",
      "(line 746,col 9)-(line 746,col 57)",
      "(line 747,col 9)-(line 747,col 61)",
      "(line 748,col 9)-(line 748,col 39)",
      "(line 749,col 9)-(line 749,col 60)",
      "(line 750,col 9)-(line 755,col 9)",
      "(line 756,col 9)-(line 761,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.columnToVector(double[][])",
    "snippet": "private RealVector columnToVector(double[][] column) {\n        double[] data \u003d new double[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return new ArrayRealVector(data, false);\n    }",
    "begin_line": 764,
    "end_line": 770,
    "comment": "",
    "child_ranges": [
      "(line 765,col 9)-(line 765,col 50)",
      "(line 766,col 9)-(line 768,col 9)",
      "(line 769,col 9)-(line 769,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetRow()",
    "snippet": "@Test\n    public void testGetRow() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        checkArrays(subRow0[0], m.getRow(0));\n        checkArrays(subRow3[0], m.getRow(3));\n        try {\n            m.getRow(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRow(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 773,
    "end_line": 789,
    "comment": "",
    "child_ranges": [
      "(line 774,col 9)-(line 774,col 61)",
      "(line 775,col 9)-(line 775,col 45)",
      "(line 776,col 9)-(line 776,col 45)",
      "(line 777,col 9)-(line 782,col 9)",
      "(line 783,col 9)-(line 788,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetRow()",
    "snippet": "@Test\n    public void testSetRow() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        Assert.assertTrue(subRow3[0][0] !\u003d m.getRow(0)[0]);\n        m.setRow(0, subRow3[0]);\n        checkArrays(subRow3[0], m.getRow(0));\n        try {\n            m.setRow(-1, subRow3[0]);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRow(0, new double[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 792,
    "end_line": 809,
    "comment": "",
    "child_ranges": [
      "(line 793,col 9)-(line 793,col 61)",
      "(line 794,col 9)-(line 794,col 59)",
      "(line 795,col 9)-(line 795,col 32)",
      "(line 796,col 9)-(line 796,col 45)",
      "(line 797,col 9)-(line 802,col 9)",
      "(line 803,col 9)-(line 808,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testGetColumn()",
    "snippet": "@Test\n    public void testGetColumn() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        double[] mColumn1 \u003d columnToArray(subColumn1);\n        double[] mColumn3 \u003d columnToArray(subColumn3);\n        checkArrays(mColumn1, m.getColumn(1));\n        checkArrays(mColumn3, m.getColumn(3));\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumn(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 812,
    "end_line": 830,
    "comment": "",
    "child_ranges": [
      "(line 813,col 9)-(line 813,col 61)",
      "(line 814,col 9)-(line 814,col 54)",
      "(line 815,col 9)-(line 815,col 54)",
      "(line 816,col 9)-(line 816,col 46)",
      "(line 817,col 9)-(line 817,col 46)",
      "(line 818,col 9)-(line 823,col 9)",
      "(line 824,col 9)-(line 829,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetColumn()",
    "snippet": "@Test\n    public void testSetColumn() {\n        RealMatrix m \u003d new Array2DRowRealMatrix(subTestData);\n        double[] mColumn3 \u003d columnToArray(subColumn3);\n        Assert.assertTrue(mColumn3[0] !\u003d m.getColumn(1)[0]);\n        m.setColumn(1, mColumn3);\n        checkArrays(mColumn3, m.getColumn(1));\n        try {\n            m.setColumn(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumn(0, new double[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 833,
    "end_line": 851,
    "comment": "",
    "child_ranges": [
      "(line 834,col 9)-(line 834,col 61)",
      "(line 835,col 9)-(line 835,col 54)",
      "(line 836,col 9)-(line 836,col 60)",
      "(line 837,col 9)-(line 837,col 33)",
      "(line 838,col 9)-(line 838,col 46)",
      "(line 839,col 9)-(line 844,col 9)",
      "(line 845,col 9)-(line 850,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.columnToArray(double[][])",
    "snippet": "private double[] columnToArray(double[][] column) {\n        double[] data \u003d new double[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return data;\n    }",
    "begin_line": 853,
    "end_line": 859,
    "comment": "",
    "child_ranges": [
      "(line 854,col 9)-(line 854,col 50)",
      "(line 855,col 9)-(line 857,col 9)",
      "(line 858,col 9)-(line 858,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.checkArrays(double[], double[])",
    "snippet": "private void checkArrays(double[] expected, double[] actual) {\n        Assert.assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c expected.length; ++i) {\n            Assert.assertEquals(expected[i], actual[i], 0);\n        }\n    }",
    "begin_line": 861,
    "end_line": 866,
    "comment": "",
    "child_ranges": [
      "(line 862,col 9)-(line 862,col 60)",
      "(line 863,col 9)-(line 865,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testEqualsAndHashCode()",
    "snippet": "@Test\n    public void testEqualsAndHashCode() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Array2DRowRealMatrix m1 \u003d (Array2DRowRealMatrix) m.copy();\n        Array2DRowRealMatrix mt \u003d (Array2DRowRealMatrix) m.transpose();\n        Assert.assertTrue(m.hashCode() !\u003d mt.hashCode());\n        Assert.assertEquals(m.hashCode(), m1.hashCode());\n        Assert.assertEquals(m, m);\n        Assert.assertEquals(m, m1);\n        Assert.assertFalse(m.equals(null));\n        Assert.assertFalse(m.equals(mt));\n        Assert.assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));\n    }",
    "begin_line": 869,
    "end_line": 880,
    "comment": "",
    "child_ranges": [
      "(line 870,col 9)-(line 870,col 68)",
      "(line 871,col 9)-(line 871,col 66)",
      "(line 872,col 9)-(line 872,col 71)",
      "(line 873,col 9)-(line 873,col 57)",
      "(line 874,col 9)-(line 874,col 57)",
      "(line 875,col 9)-(line 875,col 34)",
      "(line 876,col 9)-(line 876,col 35)",
      "(line 877,col 9)-(line 877,col 43)",
      "(line 878,col 9)-(line 878,col 41)",
      "(line 879,col 9)-(line 879,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Assert.assertEquals(\"Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\",\n                m.toString());\n        m \u003d new Array2DRowRealMatrix();\n        Assert.assertEquals(\"Array2DRowRealMatrix{}\",\n                m.toString());\n    }",
    "begin_line": 883,
    "end_line": 890,
    "comment": "",
    "child_ranges": [
      "(line 884,col 9)-(line 884,col 68)",
      "(line 885,col 9)-(line 886,col 30)",
      "(line 887,col 9)-(line 887,col 39)",
      "(line 888,col 9)-(line 889,col 30)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSetSubMatrix()",
    "snippet": "@Test\n    public void testSetSubMatrix() throws Exception {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        m.setSubMatrix(detData2,1,1);\n        RealMatrix expected \u003d MatrixUtils.createRealMatrix\n            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(detData2,0,0);\n        expected \u003d MatrixUtils.createRealMatrix\n            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(testDataPlus2,0,0);\n        expected \u003d MatrixUtils.createRealMatrix\n            (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n        Assert.assertEquals(expected, m);\n\n        // dimension overflow\n        try {\n            m.setSubMatrix(testData,1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        // dimension underflow\n        try {\n            m.setSubMatrix(testData,-1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        try {\n            m.setSubMatrix(testData,1,-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n\n        // null\n        try {\n            m.setSubMatrix(null,1,1);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException e) {\n            // expected\n        }\n        Array2DRowRealMatrix m2 \u003d new Array2DRowRealMatrix();\n        try {\n            m2.setSubMatrix(testData,0,1);\n            Assert.fail(\"expecting MathIllegalStateException\");\n        } catch (MathIllegalStateException e) {\n            // expected\n        }\n        try {\n            m2.setSubMatrix(testData,1,0);\n            Assert.fail(\"expecting MathIllegalStateException\");\n        } catch (MathIllegalStateException e) {\n            // expected\n        }\n\n        // ragged\n        try {\n            m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n        // empty\n        try {\n            m.setSubMatrix(new double[][] {{}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n    }",
    "begin_line": 893,
    "end_line": 967,
    "comment": "",
    "child_ranges": [
      "(line 894,col 9)-(line 894,col 68)",
      "(line 895,col 9)-(line 895,col 37)",
      "(line 896,col 9)-(line 897,col 73)",
      "(line 898,col 9)-(line 898,col 41)",
      "(line 900,col 9)-(line 900,col 37)",
      "(line 901,col 9)-(line 902,col 73)",
      "(line 903,col 9)-(line 903,col 41)",
      "(line 905,col 9)-(line 905,col 42)",
      "(line 906,col 9)-(line 907,col 74)",
      "(line 908,col 9)-(line 908,col 41)",
      "(line 911,col 9)-(line 916,col 9)",
      "(line 918,col 9)-(line 923,col 9)",
      "(line 924,col 9)-(line 929,col 9)",
      "(line 932,col 9)-(line 937,col 9)",
      "(line 938,col 9)-(line 938,col 61)",
      "(line 939,col 9)-(line 944,col 9)",
      "(line 945,col 9)-(line 950,col 9)",
      "(line 953,col 9)-(line 958,col 9)",
      "(line 961,col 9)-(line 966,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testWalk()",
    "snippet": "@Test\n    public void testWalk() throws MathUserException {\n        int rows    \u003d 150;\n        int columns \u003d 75;\n\n        RealMatrix m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInRowOrder(new SetVisitor());\n        GetVisitor getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInColumnOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new Array2DRowRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n    }",
    "begin_line": 970,
    "end_line": 1053,
    "comment": "",
    "child_ranges": [
      "(line 971,col 9)-(line 971,col 26)",
      "(line 972,col 9)-(line 972,col 25)",
      "(line 974,col 9)-(line 974,col 63)",
      "(line 975,col 9)-(line 975,col 43)",
      "(line 976,col 9)-(line 976,col 49)",
      "(line 977,col 9)-(line 977,col 43)",
      "(line 978,col 9)-(line 978,col 67)",
      "(line 980,col 9)-(line 980,col 52)",
      "(line 981,col 9)-(line 981,col 72)",
      "(line 982,col 9)-(line 982,col 38)",
      "(line 983,col 9)-(line 983,col 72)",
      "(line 984,col 9)-(line 984,col 79)",
      "(line 985,col 9)-(line 988,col 9)",
      "(line 989,col 9)-(line 992,col 9)",
      "(line 994,col 9)-(line 994,col 52)",
      "(line 995,col 9)-(line 995,col 46)",
      "(line 996,col 9)-(line 996,col 38)",
      "(line 997,col 9)-(line 997,col 43)",
      "(line 998,col 9)-(line 998,col 67)",
      "(line 1000,col 9)-(line 1000,col 52)",
      "(line 1001,col 9)-(line 1001,col 75)",
      "(line 1002,col 9)-(line 1002,col 38)",
      "(line 1003,col 9)-(line 1003,col 72)",
      "(line 1004,col 9)-(line 1004,col 79)",
      "(line 1005,col 9)-(line 1008,col 9)",
      "(line 1009,col 9)-(line 1012,col 9)",
      "(line 1014,col 9)-(line 1014,col 52)",
      "(line 1015,col 9)-(line 1015,col 49)",
      "(line 1016,col 9)-(line 1016,col 38)",
      "(line 1017,col 9)-(line 1017,col 37)",
      "(line 1018,col 9)-(line 1018,col 67)",
      "(line 1020,col 9)-(line 1020,col 52)",
      "(line 1021,col 9)-(line 1021,col 78)",
      "(line 1022,col 9)-(line 1022,col 38)",
      "(line 1023,col 9)-(line 1023,col 66)",
      "(line 1024,col 9)-(line 1024,col 79)",
      "(line 1025,col 9)-(line 1028,col 9)",
      "(line 1029,col 9)-(line 1032,col 9)",
      "(line 1034,col 9)-(line 1034,col 52)",
      "(line 1035,col 9)-(line 1035,col 49)",
      "(line 1036,col 9)-(line 1036,col 38)",
      "(line 1037,col 9)-(line 1037,col 40)",
      "(line 1038,col 9)-(line 1038,col 67)",
      "(line 1040,col 9)-(line 1040,col 52)",
      "(line 1041,col 9)-(line 1041,col 78)",
      "(line 1042,col 9)-(line 1042,col 38)",
      "(line 1043,col 9)-(line 1043,col 69)",
      "(line 1044,col 9)-(line 1044,col 79)",
      "(line 1045,col 9)-(line 1048,col 9)",
      "(line 1049,col 9)-(line 1052,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.testSerial()",
    "snippet": "@Test\n    public void testSerial()  {\n        Array2DRowRealMatrix m \u003d new Array2DRowRealMatrix(testData);\n        Assert.assertEquals(m,TestUtils.serializeAndRecover(m));\n    }",
    "begin_line": 1056,
    "end_line": 1059,
    "comment": "",
    "child_ranges": [
      "(line 1057,col 9)-(line 1057,col 68)",
      "(line 1058,col 9)-(line 1058,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.visit(int, int, double)",
    "snippet": "@Override\n        public double visit(int i, int j, double value) {\n            return i + j / 1024.0;\n        }",
    "begin_line": 1064,
    "end_line": 1066,
    "comment": "",
    "child_ranges": [
      "(line 1065,col 13)-(line 1065,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.visit(int, int, double)",
    "snippet": "@Override\n        public void visit(int i, int j, double value) {\n            ++count;\n            Assert.assertEquals(i + j / 1024.0, value, 0.0);\n        }",
    "begin_line": 1072,
    "end_line": 1075,
    "comment": "",
    "child_ranges": [
      "(line 1073,col 13)-(line 1073,col 20)",
      "(line 1074,col 13)-(line 1074,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.getCount()",
    "snippet": "public int getCount() {\n            return count;\n        }",
    "begin_line": 1076,
    "end_line": 1078,
    "comment": "",
    "child_ranges": [
      "(line 1077,col 13)-(line 1077,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.splitLU(RealMatrix, double[][], double[][])",
    "snippet": "protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) {\n        if (!lu.isSquare()) {\n            throw new NonSquareMatrixException(lu.getRowDimension(), lu.getColumnDimension());\n        }\n        if (lowerData.length !\u003d lowerData[0].length) {\n            throw new DimensionMismatchException(lowerData.length, lowerData[0].length);\n        }\n        if (upperData.length !\u003d upperData[0].length) {\n            throw new DimensionMismatchException(upperData.length, upperData[0].length);\n        }\n        if (lowerData.length !\u003d upperData.length) {\n            throw new DimensionMismatchException(lowerData.length, upperData.length);\n        }\n        if (lowerData.length !\u003d lu.getRowDimension()) {\n            throw new DimensionMismatchException(lowerData.length, lu.getRowDimension());\n        }\n\n        int n \u003d lu.getRowDimension();\n        for (int i \u003d 0; i \u003c n; i++) {\n            for (int j \u003d 0; j \u003c n; j++) {\n                if (j \u003c i) {\n                    lowerData[i][j] \u003d lu.getEntry(i, j);\n                    upperData[i][j] \u003d 0d;\n                } else if (i \u003d\u003d j) {\n                    lowerData[i][j] \u003d 1d;\n                    upperData[i][j] \u003d lu.getEntry(i, j);\n                } else {\n                    lowerData[i][j] \u003d 0d;\n                    upperData[i][j] \u003d lu.getEntry(i, j);\n                }\n            }\n        }\n    }",
    "begin_line": 1084,
    "end_line": 1116,
    "comment": "/** \n * extracts the l  and u matrices from compact lu representation \n */\n",
    "child_ranges": [
      "(line 1085,col 9)-(line 1087,col 9)",
      "(line 1088,col 9)-(line 1090,col 9)",
      "(line 1091,col 9)-(line 1093,col 9)",
      "(line 1094,col 9)-(line 1096,col 9)",
      "(line 1097,col 9)-(line 1099,col 9)",
      "(line 1101,col 9)-(line 1101,col 37)",
      "(line 1102,col 9)-(line 1115,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.Array2DRowRealMatrixTest.permuteRows(RealMatrix, int[])",
    "snippet": "protected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) {\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n        if (matrix.getRowDimension() !\u003d permutation.length) {\n            throw new DimensionMismatchException(matrix.getRowDimension(), permutation.length);\n        }\n\n        int n \u003d matrix.getRowDimension();\n        int m \u003d matrix.getColumnDimension();\n        double out[][] \u003d new double[m][n];\n        for (int i \u003d 0; i \u003c n; i++) {\n            for (int j \u003d 0; j \u003c m; j++) {\n                out[i][j] \u003d matrix.getEntry(permutation[i], j);\n            }\n        }\n        return new Array2DRowRealMatrix(out);\n    }",
    "begin_line": 1119,
    "end_line": 1137,
    "comment": "/** \n * Returns the result of applying the given row permutation to the matrix \n */\n",
    "child_ranges": [
      "(line 1120,col 9)-(line 1123,col 9)",
      "(line 1124,col 9)-(line 1126,col 9)",
      "(line 1128,col 9)-(line 1128,col 41)",
      "(line 1129,col 9)-(line 1129,col 44)",
      "(line 1130,col 9)-(line 1130,col 42)",
      "(line 1131,col 9)-(line 1135,col 9)",
      "(line 1136,col 9)-(line 1136,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testDimensions()",
    "snippet": "@Test\n    public void testDimensions() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testData2);\n        Assert.assertEquals(\"testData row dimension\",3,m.getRowDimension());\n        Assert.assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n        Assert.assertTrue(\"testData is square\",m.isSquare());\n        Assert.assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n        Assert.assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n        Assert.assertTrue(\"testData2 is not square\",!m2.isSquare());\n    }",
    "begin_line": 104,
    "end_line": 113,
    "comment": "/** \n * test dimensions \n */\n",
    "child_ranges": [
      "(line 105,col 9)-(line 105,col 58)",
      "(line 106,col 9)-(line 106,col 60)",
      "(line 107,col 9)-(line 107,col 76)",
      "(line 108,col 9)-(line 108,col 82)",
      "(line 109,col 9)-(line 109,col 61)",
      "(line 110,col 9)-(line 110,col 78)",
      "(line 111,col 9)-(line 111,col 84)",
      "(line 112,col 9)-(line 112,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testCopyFunctions()",
    "snippet": "@Test\n    public void testCopyFunctions() {\n        Random r \u003d new Random(66636328996002l);\n        BlockRealMatrix m1 \u003d createRandomMatrix(r, 47, 83);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(m1.getData());\n        Assert.assertEquals(m1, m2);\n        BlockRealMatrix m3 \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m4 \u003d new BlockRealMatrix(m3.getData());\n        Assert.assertEquals(m3, m4);\n    }",
    "begin_line": 117,
    "end_line": 125,
    "comment": "/** \n * test copy functions \n */\n",
    "child_ranges": [
      "(line 118,col 9)-(line 118,col 47)",
      "(line 119,col 9)-(line 119,col 59)",
      "(line 120,col 9)-(line 120,col 63)",
      "(line 121,col 9)-(line 121,col 36)",
      "(line 122,col 9)-(line 122,col 59)",
      "(line 123,col 9)-(line 123,col 63)",
      "(line 124,col 9)-(line 124,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testAdd()",
    "snippet": "@Test\n    public void testAdd() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix mInv \u003d new BlockRealMatrix(testDataInv);\n        RealMatrix mPlusMInv \u003d m.add(mInv);\n        double[][] sumEntries \u003d mPlusMInv.getData();\n        for (int row \u003d 0; row \u003c m.getRowDimension(); row++) {\n            for (int col \u003d 0; col \u003c m.getColumnDimension(); col++) {\n                Assert.assertEquals(\"sum entry entry\",\n                    testDataPlusInv[row][col],sumEntries[row][col],\n                        entryTolerance);\n            }\n        }\n    }",
    "begin_line": 129,
    "end_line": 141,
    "comment": "/** \n * test add \n */\n",
    "child_ranges": [
      "(line 130,col 9)-(line 130,col 58)",
      "(line 131,col 9)-(line 131,col 64)",
      "(line 132,col 9)-(line 132,col 43)",
      "(line 133,col 9)-(line 133,col 52)",
      "(line 134,col 9)-(line 140,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testAddFail()",
    "snippet": "@Test\n    public void testAddFail() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testData2);\n        try {\n            m.add(m2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 145,
    "end_line": 154,
    "comment": "/** \n * test add failure \n */\n",
    "child_ranges": [
      "(line 146,col 9)-(line 146,col 58)",
      "(line 147,col 9)-(line 147,col 60)",
      "(line 148,col 9)-(line 153,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testNorm()",
    "snippet": "@Test\n    public void testNorm() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testData2);\n        Assert.assertEquals(\"testData norm\",14d,m.getNorm(),entryTolerance);\n        Assert.assertEquals(\"testData2 norm\",7d,m2.getNorm(),entryTolerance);\n    }",
    "begin_line": 158,
    "end_line": 163,
    "comment": "/** \n * test norm \n */\n",
    "child_ranges": [
      "(line 159,col 9)-(line 159,col 58)",
      "(line 160,col 9)-(line 160,col 60)",
      "(line 161,col 9)-(line 161,col 76)",
      "(line 162,col 9)-(line 162,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testFrobeniusNorm()",
    "snippet": "@Test\n    public void testFrobeniusNorm() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testData2);\n        Assert.assertEquals(\"testData Frobenius norm\", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);\n        Assert.assertEquals(\"testData2 Frobenius norm\", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);\n    }",
    "begin_line": 167,
    "end_line": 172,
    "comment": "/** \n * test Frobenius norm \n */\n",
    "child_ranges": [
      "(line 168,col 9)-(line 168,col 58)",
      "(line 169,col 9)-(line 169,col 60)",
      "(line 170,col 9)-(line 170,col 115)",
      "(line 171,col 9)-(line 171,col 116)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testPlusMinus()",
    "snippet": "@Test\n    public void testPlusMinus() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testDataInv);\n        assertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);\n        try {\n            m.subtract(new BlockRealMatrix(testData2));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 176,
    "end_line": 186,
    "comment": "/** \n * test m-n \u003d m + -n \n */\n",
    "child_ranges": [
      "(line 177,col 9)-(line 177,col 58)",
      "(line 178,col 9)-(line 178,col 62)",
      "(line 179,col 9)-(line 179,col 83)",
      "(line 180,col 9)-(line 185,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testMultiply()",
    "snippet": "@Test\n    public void testMultiply() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix mInv \u003d new BlockRealMatrix(testDataInv);\n        BlockRealMatrix identity \u003d new BlockRealMatrix(id);\n        BlockRealMatrix m2 \u003d new BlockRealMatrix(testData2);\n        assertClose(m.multiply(mInv), identity, entryTolerance);\n        assertClose(mInv.multiply(m), identity, entryTolerance);\n        assertClose(m.multiply(identity), m, entryTolerance);\n        assertClose(identity.multiply(mInv), mInv, entryTolerance);\n        assertClose(m2.multiply(identity), m2, entryTolerance);\n        try {\n            m.multiply(new BlockRealMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n    }",
    "begin_line": 190,
    "end_line": 206,
    "comment": "/** \n * test multiply \n */\n",
    "child_ranges": [
      "(line 191,col 9)-(line 191,col 58)",
      "(line 192,col 9)-(line 192,col 64)",
      "(line 193,col 9)-(line 193,col 59)",
      "(line 194,col 9)-(line 194,col 60)",
      "(line 195,col 9)-(line 195,col 64)",
      "(line 196,col 9)-(line 196,col 64)",
      "(line 197,col 9)-(line 197,col 61)",
      "(line 198,col 9)-(line 198,col 67)",
      "(line 199,col 9)-(line 199,col 63)",
      "(line 200,col 9)-(line 205,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSeveralBlocks()",
    "snippet": "@Test\n    public void testSeveralBlocks() {\n        RealMatrix m \u003d new BlockRealMatrix(35, 71);\n        for (int i \u003d 0; i \u003c m.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c m.getColumnDimension(); ++j) {\n                m.setEntry(i, j, i + j / 1024.0);\n            }\n        }\n\n        RealMatrix mT \u003d m.transpose();\n        Assert.assertEquals(m.getRowDimension(), mT.getColumnDimension());\n        Assert.assertEquals(m.getColumnDimension(), mT.getRowDimension());\n        for (int i \u003d 0; i \u003c mT.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mT.getColumnDimension(); ++j) {\n                Assert.assertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix mPm \u003d m.add(m);\n        for (int i \u003d 0; i \u003c mPm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mPm.getColumnDimension(); ++j) {\n                Assert.assertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix mPmMm \u003d mPm.subtract(m);\n        for (int i \u003d 0; i \u003c mPmMm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mPmMm.getColumnDimension(); ++j) {\n                Assert.assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix mTm \u003d mT.multiply(m);\n        for (int i \u003d 0; i \u003c mTm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mTm.getColumnDimension(); ++j) {\n                double sum \u003d 0;\n                for (int k \u003d 0; k \u003c mT.getColumnDimension(); ++k) {\n                    sum +\u003d (k + i / 1024.0) * (k + j / 1024.0);\n                }\n                Assert.assertEquals(sum, mTm.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix mmT \u003d m.multiply(mT);\n        for (int i \u003d 0; i \u003c mmT.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mmT.getColumnDimension(); ++j) {\n                double sum \u003d 0;\n                for (int k \u003d 0; k \u003c m.getColumnDimension(); ++k) {\n                    sum +\u003d (i + k / 1024.0) * (j + k / 1024.0);\n                }\n                Assert.assertEquals(sum, mmT.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix sub1 \u003d m.getSubMatrix(2, 9, 5, 20);\n        for (int i \u003d 0; i \u003c sub1.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub1.getColumnDimension(); ++j) {\n                Assert.assertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix sub2 \u003d m.getSubMatrix(10, 12, 3, 70);\n        for (int i \u003d 0; i \u003c sub2.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub2.getColumnDimension(); ++j) {\n                Assert.assertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix sub3 \u003d m.getSubMatrix(30, 34, 0, 5);\n        for (int i \u003d 0; i \u003c sub3.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub3.getColumnDimension(); ++j) {\n                Assert.assertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);\n            }\n        }\n\n        RealMatrix sub4 \u003d m.getSubMatrix(30, 32, 62, 65);\n        for (int i \u003d 0; i \u003c sub4.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub4.getColumnDimension(); ++j) {\n                Assert.assertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);\n            }\n        }\n\n    }",
    "begin_line": 209,
    "end_line": 290,
    "comment": "",
    "child_ranges": [
      "(line 210,col 9)-(line 210,col 51)",
      "(line 211,col 9)-(line 215,col 9)",
      "(line 217,col 9)-(line 217,col 38)",
      "(line 218,col 9)-(line 218,col 74)",
      "(line 219,col 9)-(line 219,col 74)",
      "(line 220,col 9)-(line 224,col 9)",
      "(line 226,col 9)-(line 226,col 34)",
      "(line 227,col 9)-(line 231,col 9)",
      "(line 233,col 9)-(line 233,col 43)",
      "(line 234,col 9)-(line 238,col 9)",
      "(line 240,col 9)-(line 240,col 40)",
      "(line 241,col 9)-(line 249,col 9)",
      "(line 251,col 9)-(line 251,col 40)",
      "(line 252,col 9)-(line 260,col 9)",
      "(line 262,col 9)-(line 262,col 54)",
      "(line 263,col 9)-(line 267,col 9)",
      "(line 269,col 9)-(line 269,col 56)",
      "(line 270,col 9)-(line 274,col 9)",
      "(line 276,col 9)-(line 276,col 55)",
      "(line 277,col 9)-(line 281,col 9)",
      "(line 283,col 9)-(line 283,col 57)",
      "(line 284,col 9)-(line 288,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testMultiply2()",
    "snippet": "@Test\n    public void testMultiply2() {\n        RealMatrix m3 \u003d new BlockRealMatrix(d3);\n        RealMatrix m4 \u003d new BlockRealMatrix(d4);\n        RealMatrix m5 \u003d new BlockRealMatrix(d5);\n        assertClose(m3.multiply(m4), m5, entryTolerance);\n    }",
    "begin_line": 299,
    "end_line": 304,
    "comment": "",
    "child_ranges": [
      "(line 300,col 9)-(line 300,col 48)",
      "(line 301,col 9)-(line 301,col 48)",
      "(line 302,col 9)-(line 302,col 48)",
      "(line 303,col 9)-(line 303,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testTrace()",
    "snippet": "@Test\n    public void testTrace() {\n        RealMatrix m \u003d new BlockRealMatrix(id);\n        Assert.assertEquals(\"identity trace\",3d,m.getTrace(),entryTolerance);\n        m \u003d new BlockRealMatrix(testData2);\n        try {\n            m.getTrace();\n            Assert.fail(\"Expecting NonSquareMatrixException\");\n        } catch (NonSquareMatrixException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 308,
    "end_line": 318,
    "comment": "/** \n * test trace \n */\n",
    "child_ranges": [
      "(line 309,col 9)-(line 309,col 47)",
      "(line 310,col 9)-(line 310,col 77)",
      "(line 311,col 9)-(line 311,col 43)",
      "(line 312,col 9)-(line 317,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testScalarAdd()",
    "snippet": "@Test\n    public void testScalarAdd() {\n        RealMatrix m \u003d new BlockRealMatrix(testData);\n        assertClose(new BlockRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);\n    }",
    "begin_line": 322,
    "end_line": 325,
    "comment": "/** \n * test scalarAdd \n */\n",
    "child_ranges": [
      "(line 323,col 9)-(line 323,col 53)",
      "(line 324,col 9)-(line 324,col 89)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testOperate()",
    "snippet": "@Test\n    public void testOperate() {\n        RealMatrix m \u003d new BlockRealMatrix(id);\n        assertClose(testVector, m.operate(testVector), entryTolerance);\n        assertClose(testVector, m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);\n        m \u003d new BlockRealMatrix(bigSingular);\n        try {\n            m.operate(testVector);\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 329,
    "end_line": 340,
    "comment": "/** \n * test operate \n */\n",
    "child_ranges": [
      "(line 330,col 9)-(line 330,col 47)",
      "(line 331,col 9)-(line 331,col 71)",
      "(line 332,col 9)-(line 332,col 102)",
      "(line 333,col 9)-(line 333,col 45)",
      "(line 334,col 9)-(line 339,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testOperateLarge()",
    "snippet": "@Test\n    public void testOperateLarge() {\n        int p \u003d (7 * BlockRealMatrix.BLOCK_SIZE) / 2;\n        int q \u003d (5 * BlockRealMatrix.BLOCK_SIZE) / 2;\n        int r \u003d  3 * BlockRealMatrix.BLOCK_SIZE;\n        Random random \u003d new Random(111007463902334l);\n        RealMatrix m1 \u003d createRandomMatrix(random, p, q);\n        RealMatrix m2 \u003d createRandomMatrix(random, q, r);\n        RealMatrix m1m2 \u003d m1.multiply(m2);\n        for (int i \u003d 0; i \u003c r; ++i) {\n            checkArrays(m1m2.getColumn(i), m1.operate(m2.getColumn(i)));\n        }\n    }",
    "begin_line": 343,
    "end_line": 354,
    "comment": "",
    "child_ranges": [
      "(line 344,col 9)-(line 344,col 53)",
      "(line 345,col 9)-(line 345,col 53)",
      "(line 346,col 9)-(line 346,col 48)",
      "(line 347,col 9)-(line 347,col 53)",
      "(line 348,col 9)-(line 348,col 57)",
      "(line 349,col 9)-(line 349,col 57)",
      "(line 350,col 9)-(line 350,col 42)",
      "(line 351,col 9)-(line 353,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testOperatePremultiplyLarge()",
    "snippet": "@Test\n    public void testOperatePremultiplyLarge() {\n        int p \u003d (7 * BlockRealMatrix.BLOCK_SIZE) / 2;\n        int q \u003d (5 * BlockRealMatrix.BLOCK_SIZE) / 2;\n        int r \u003d  3 * BlockRealMatrix.BLOCK_SIZE;\n        Random random \u003d new Random(111007463902334l);\n        RealMatrix m1 \u003d createRandomMatrix(random, p, q);\n        RealMatrix m2 \u003d createRandomMatrix(random, q, r);\n        RealMatrix m1m2 \u003d m1.multiply(m2);\n        for (int i \u003d 0; i \u003c p; ++i) {\n            checkArrays(m1m2.getRow(i), m2.preMultiply(m1.getRow(i)));\n        }\n    }",
    "begin_line": 357,
    "end_line": 368,
    "comment": "",
    "child_ranges": [
      "(line 358,col 9)-(line 358,col 53)",
      "(line 359,col 9)-(line 359,col 53)",
      "(line 360,col 9)-(line 360,col 48)",
      "(line 361,col 9)-(line 361,col 53)",
      "(line 362,col 9)-(line 362,col 57)",
      "(line 363,col 9)-(line 363,col 57)",
      "(line 364,col 9)-(line 364,col 42)",
      "(line 365,col 9)-(line 367,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testMath209()",
    "snippet": "@Test\n    public void testMath209() {\n        RealMatrix a \u003d new BlockRealMatrix(new double[][] {\n                { 1, 2 }, { 3, 4 }, { 5, 6 }\n        });\n        double[] b \u003d a.operate(new double[] { 1, 1 });\n        Assert.assertEquals(a.getRowDimension(), b.length);\n        Assert.assertEquals( 3.0, b[0], 1.0e-12);\n        Assert.assertEquals( 7.0, b[1], 1.0e-12);\n        Assert.assertEquals(11.0, b[2], 1.0e-12);\n    }",
    "begin_line": 372,
    "end_line": 381,
    "comment": "/** \n * test issue MATH-209 \n */\n",
    "child_ranges": [
      "(line 373,col 9)-(line 375,col 11)",
      "(line 376,col 9)-(line 376,col 54)",
      "(line 377,col 9)-(line 377,col 59)",
      "(line 378,col 9)-(line 378,col 49)",
      "(line 379,col 9)-(line 379,col 49)",
      "(line 380,col 9)-(line 380,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testTranspose()",
    "snippet": "@Test\n    public void testTranspose() {\n        RealMatrix m \u003d new BlockRealMatrix(testData);\n        RealMatrix mIT \u003d new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n        RealMatrix mTI \u003d new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n        assertClose(mIT, mTI, normTolerance);\n        m \u003d new BlockRealMatrix(testData2);\n        RealMatrix mt \u003d new BlockRealMatrix(testData2T);\n        assertClose(mt, m.transpose(), normTolerance);\n    }",
    "begin_line": 385,
    "end_line": 393,
    "comment": "/** \n * test transpose \n */\n",
    "child_ranges": [
      "(line 386,col 9)-(line 386,col 53)",
      "(line 387,col 9)-(line 387,col 89)",
      "(line 388,col 9)-(line 388,col 89)",
      "(line 389,col 9)-(line 389,col 45)",
      "(line 390,col 9)-(line 390,col 43)",
      "(line 391,col 9)-(line 391,col 56)",
      "(line 392,col 9)-(line 392,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testPremultiplyVector()",
    "snippet": "@Test\n    public void testPremultiplyVector() {\n        RealMatrix m \u003d new BlockRealMatrix(testData);\n        assertClose(m.preMultiply(testVector), preMultTest, normTolerance);\n        assertClose(m.preMultiply(new ArrayRealVector(testVector).getData()),\n                    preMultTest, normTolerance);\n        m \u003d new BlockRealMatrix(bigSingular);\n        try {\n            m.preMultiply(testVector);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 397,
    "end_line": 409,
    "comment": "/** \n * test preMultiply by vector \n */\n",
    "child_ranges": [
      "(line 398,col 9)-(line 398,col 53)",
      "(line 399,col 9)-(line 399,col 75)",
      "(line 400,col 9)-(line 401,col 48)",
      "(line 402,col 9)-(line 402,col 45)",
      "(line 403,col 9)-(line 408,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testPremultiply()",
    "snippet": "@Test\n    public void testPremultiply() {\n        RealMatrix m3 \u003d new BlockRealMatrix(d3);\n        RealMatrix m4 \u003d new BlockRealMatrix(d4);\n        RealMatrix m5 \u003d new BlockRealMatrix(d5);\n        assertClose(m4.preMultiply(m3), m5, entryTolerance);\n\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix mInv \u003d new BlockRealMatrix(testDataInv);\n        BlockRealMatrix identity \u003d new BlockRealMatrix(id);\n        assertClose(m.preMultiply(mInv), identity, entryTolerance);\n        assertClose(mInv.preMultiply(m), identity, entryTolerance);\n        assertClose(m.preMultiply(identity), m, entryTolerance);\n        assertClose(identity.preMultiply(mInv), mInv, entryTolerance);\n        try {\n            m.preMultiply(new BlockRealMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 412,
    "end_line": 431,
    "comment": "",
    "child_ranges": [
      "(line 413,col 9)-(line 413,col 48)",
      "(line 414,col 9)-(line 414,col 48)",
      "(line 415,col 9)-(line 415,col 48)",
      "(line 416,col 9)-(line 416,col 60)",
      "(line 418,col 9)-(line 418,col 58)",
      "(line 419,col 9)-(line 419,col 64)",
      "(line 420,col 9)-(line 420,col 59)",
      "(line 421,col 9)-(line 421,col 67)",
      "(line 422,col 9)-(line 422,col 67)",
      "(line 423,col 9)-(line 423,col 64)",
      "(line 424,col 9)-(line 424,col 70)",
      "(line 425,col 9)-(line 430,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetVectors()",
    "snippet": "@Test\n    public void testGetVectors() {\n        RealMatrix m \u003d new BlockRealMatrix(testData);\n        assertClose(m.getRow(0), testDataRow1, entryTolerance);\n        assertClose(m.getColumn(2), testDataCol3, entryTolerance);\n        try {\n            m.getRow(10);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 434,
    "end_line": 450,
    "comment": "",
    "child_ranges": [
      "(line 435,col 9)-(line 435,col 53)",
      "(line 436,col 9)-(line 436,col 63)",
      "(line 437,col 9)-(line 437,col 66)",
      "(line 438,col 9)-(line 443,col 9)",
      "(line 444,col 9)-(line 449,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetEntry()",
    "snippet": "@Test\n    public void testGetEntry() {\n        RealMatrix m \u003d new BlockRealMatrix(testData);\n        Assert.assertEquals(\"get entry\",m.getEntry(0,1),2d,entryTolerance);\n        try {\n            m.getEntry(10, 4);\n            Assert.fail (\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 453,
    "end_line": 462,
    "comment": "",
    "child_ranges": [
      "(line 454,col 9)-(line 454,col 53)",
      "(line 455,col 9)-(line 455,col 75)",
      "(line 456,col 9)-(line 461,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testExamples()",
    "snippet": "@Test\n    public void testExamples() {\n        // Create a real matrix with two rows and three columns\n        double[][] matrixData \u003d { {1d,2d,3d}, {2d,5d,3d}};\n        RealMatrix m \u003d new BlockRealMatrix(matrixData);\n        // One more with three rows, two columns\n        double[][] matrixData2 \u003d { {1d,2d}, {2d,5d}, {1d, 7d}};\n        RealMatrix n \u003d new BlockRealMatrix(matrixData2);\n        // Now multiply m by n\n        RealMatrix p \u003d m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        // Invert p\n        RealMatrix pInverse \u003d new LUDecompositionImpl(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        // Solve example\n        double[][] coefficientsData \u003d {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n        RealMatrix coefficients \u003d new BlockRealMatrix(coefficientsData);\n        double[] constants \u003d {1, -2, 1};\n        double[] solution \u003d new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n        Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n        Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);\n\n    }",
    "begin_line": 466,
    "end_line": 491,
    "comment": "/** \n * test examples in user guide \n */\n",
    "child_ranges": [
      "(line 468,col 9)-(line 468,col 58)",
      "(line 469,col 9)-(line 469,col 55)",
      "(line 471,col 9)-(line 471,col 63)",
      "(line 472,col 9)-(line 472,col 56)",
      "(line 474,col 9)-(line 474,col 37)",
      "(line 475,col 9)-(line 475,col 52)",
      "(line 476,col 9)-(line 476,col 55)",
      "(line 478,col 9)-(line 478,col 82)",
      "(line 479,col 9)-(line 479,col 59)",
      "(line 480,col 9)-(line 480,col 62)",
      "(line 483,col 9)-(line 483,col 76)",
      "(line 484,col 9)-(line 484,col 72)",
      "(line 485,col 9)-(line 485,col 40)",
      "(line 486,col 9)-(line 486,col 95)",
      "(line 487,col 9)-(line 487,col 101)",
      "(line 488,col 9)-(line 488,col 103)",
      "(line 489,col 9)-(line 489,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSubMatrix()",
    "snippet": "@Test\n    public void testGetSubMatrix() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0);\n        checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3);\n        checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);\n        checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });\n        checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });\n        checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });\n        checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkGetSubMatrix(m, null,  1, 0, 2, 4);\n        checkGetSubMatrix(m, null, -1, 1, 2, 2);\n        checkGetSubMatrix(m, null,  1, 0, 2, 2);\n        checkGetSubMatrix(m, null,  1, 0, 2, 4);\n        checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 });\n        checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 });\n    }",
    "begin_line": 495,
    "end_line": 512,
    "comment": "",
    "child_ranges": [
      "(line 496,col 9)-(line 496,col 56)",
      "(line 497,col 9)-(line 497,col 61)",
      "(line 498,col 9)-(line 498,col 61)",
      "(line 499,col 9)-(line 499,col 61)",
      "(line 500,col 9)-(line 500,col 87)",
      "(line 501,col 9)-(line 501,col 87)",
      "(line 502,col 9)-(line 502,col 90)",
      "(line 503,col 9)-(line 503,col 90)",
      "(line 504,col 9)-(line 504,col 87)",
      "(line 505,col 9)-(line 505,col 87)",
      "(line 506,col 9)-(line 506,col 48)",
      "(line 507,col 9)-(line 507,col 48)",
      "(line 508,col 9)-(line 508,col 48)",
      "(line 509,col 9)-(line 509,col 48)",
      "(line 510,col 9)-(line 510,col 69)",
      "(line 511,col 9)-(line 511,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.checkGetSubMatrix(RealMatrix, double[][], int, int, int, int)",
    "snippet": "private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n                                   int startRow, int endRow, int startColumn, int endColumn) {\n        try {\n            RealMatrix sub \u003d m.getSubMatrix(startRow, endRow, startColumn, endColumn);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockRealMatrix(reference), sub);\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 514,
    "end_line": 536,
    "comment": "",
    "child_ranges": [
      "(line 516,col 9)-(line 535,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.checkGetSubMatrix(RealMatrix, double[][], int[], int[])",
    "snippet": "private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n                                   int[] selectedRows, int[] selectedColumns) {\n        try {\n            RealMatrix sub \u003d m.getSubMatrix(selectedRows, selectedColumns);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockRealMatrix(reference), sub);\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallExceptiono r NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 538,
    "end_line": 560,
    "comment": "",
    "child_ranges": [
      "(line 540,col 9)-(line 559,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetMatrixLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        RealMatrix sub \u003d new BlockRealMatrix(n - 4, n - 4).scalarAdd(1);\n\n        m.setSubMatrix(sub.getData(), 2, 2);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if ((i \u003c 2) || (i \u003e n - 3) || (j \u003c 2) || (j \u003e n - 3)) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));\n\n    }",
    "begin_line": 563,
    "end_line": 580,
    "comment": "",
    "child_ranges": [
      "(line 564,col 9)-(line 564,col 47)",
      "(line 565,col 9)-(line 565,col 49)",
      "(line 566,col 9)-(line 566,col 72)",
      "(line 568,col 9)-(line 568,col 44)",
      "(line 569,col 9)-(line 577,col 9)",
      "(line 578,col 9)-(line 578,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testCopySubMatrix()",
    "snippet": "@Test\n    public void testCopySubMatrix() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0);\n        checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3);\n        checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);\n        checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });\n        checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });\n        checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });\n        checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n\n        checkCopy(m, null,  1, 0, 2, 4);\n        checkCopy(m, null, -1, 1, 2, 2);\n        checkCopy(m, null,  1, 0, 2, 2);\n        checkCopy(m, null,  1, 0, 2, 4);\n        checkCopy(m, null, new int[] {},    new int[] { 0 });\n        checkCopy(m, null, new int[] { 0 }, new int[] { 4 });\n    }",
    "begin_line": 583,
    "end_line": 601,
    "comment": "",
    "child_ranges": [
      "(line 584,col 9)-(line 584,col 56)",
      "(line 585,col 9)-(line 585,col 53)",
      "(line 586,col 9)-(line 586,col 53)",
      "(line 587,col 9)-(line 587,col 53)",
      "(line 588,col 9)-(line 588,col 79)",
      "(line 589,col 9)-(line 589,col 79)",
      "(line 590,col 9)-(line 590,col 82)",
      "(line 591,col 9)-(line 591,col 82)",
      "(line 592,col 9)-(line 592,col 79)",
      "(line 593,col 9)-(line 593,col 79)",
      "(line 595,col 9)-(line 595,col 40)",
      "(line 596,col 9)-(line 596,col 40)",
      "(line 597,col 9)-(line 597,col 40)",
      "(line 598,col 9)-(line 598,col 40)",
      "(line 599,col 9)-(line 599,col 61)",
      "(line 600,col 9)-(line 600,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.checkCopy(RealMatrix, double[][], int, int, int, int)",
    "snippet": "private void checkCopy(RealMatrix m, double[][] reference,\n                           int startRow, int endRow, int startColumn, int endColumn) {\n        try {\n            double[][] sub \u003d (reference \u003d\u003d null) ?\n                             new double[1][1] :\n                             new double[reference.length][reference[0].length];\n            m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 603,
    "end_line": 628,
    "comment": "",
    "child_ranges": [
      "(line 605,col 9)-(line 627,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.checkCopy(RealMatrix, double[][], int[], int[])",
    "snippet": "private void checkCopy(RealMatrix m, double[][] reference,\n                           int[] selectedRows, int[] selectedColumns) {\n        try {\n            double[][] sub \u003d (reference \u003d\u003d null) ?\n                    new double[1][1] :\n                    new double[reference.length][reference[0].length];\n            m.copySubMatrix(selectedRows, selectedColumns, sub);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 630,
    "end_line": 655,
    "comment": "",
    "child_ranges": [
      "(line 632,col 9)-(line 654,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetRowMatrix()",
    "snippet": "@Test\n    public void testGetRowMatrix() {\n        RealMatrix m     \u003d new BlockRealMatrix(subTestData);\n        RealMatrix mRow0 \u003d new BlockRealMatrix(subRow0);\n        RealMatrix mRow3 \u003d new BlockRealMatrix(subRow3);\n        Assert.assertEquals(\"Row0\", mRow0, m.getRowMatrix(0));\n        Assert.assertEquals(\"Row3\", mRow3, m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 658,
    "end_line": 676,
    "comment": "",
    "child_ranges": [
      "(line 659,col 9)-(line 659,col 60)",
      "(line 660,col 9)-(line 660,col 56)",
      "(line 661,col 9)-(line 661,col 56)",
      "(line 662,col 9)-(line 662,col 62)",
      "(line 663,col 9)-(line 663,col 62)",
      "(line 664,col 9)-(line 669,col 9)",
      "(line 670,col 9)-(line 675,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetRowMatrix()",
    "snippet": "@Test\n    public void testSetRowMatrix() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealMatrix mRow3 \u003d new BlockRealMatrix(subRow3);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowMatrix(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowMatrix(0));\n        try {\n            m.setRowMatrix(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 679,
    "end_line": 697,
    "comment": "",
    "child_ranges": [
      "(line 680,col 9)-(line 680,col 56)",
      "(line 681,col 9)-(line 681,col 56)",
      "(line 682,col 9)-(line 682,col 55)",
      "(line 683,col 9)-(line 683,col 33)",
      "(line 684,col 9)-(line 684,col 54)",
      "(line 685,col 9)-(line 690,col 9)",
      "(line 691,col 9)-(line 696,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetRowMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetRowMatrixLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        RealMatrix sub \u003d new BlockRealMatrix(1, n).scalarAdd(1);\n\n        m.setRowMatrix(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getRowMatrix(2));\n    }",
    "begin_line": 700,
    "end_line": 716,
    "comment": "",
    "child_ranges": [
      "(line 701,col 9)-(line 701,col 47)",
      "(line 702,col 9)-(line 702,col 49)",
      "(line 703,col 9)-(line 703,col 64)",
      "(line 705,col 9)-(line 705,col 31)",
      "(line 706,col 9)-(line 714,col 9)",
      "(line 715,col 9)-(line 715,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetColumnMatrix()",
    "snippet": "@Test\n    public void testGetColumnMatrix() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealMatrix mColumn1 \u003d new BlockRealMatrix(subColumn1);\n        RealMatrix mColumn3 \u003d new BlockRealMatrix(subColumn3);\n        Assert.assertEquals(mColumn1, m.getColumnMatrix(1));\n        Assert.assertEquals(mColumn3, m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 719,
    "end_line": 737,
    "comment": "",
    "child_ranges": [
      "(line 720,col 9)-(line 720,col 56)",
      "(line 721,col 9)-(line 721,col 62)",
      "(line 722,col 9)-(line 722,col 62)",
      "(line 723,col 9)-(line 723,col 60)",
      "(line 724,col 9)-(line 724,col 60)",
      "(line 725,col 9)-(line 730,col 9)",
      "(line 731,col 9)-(line 736,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetColumnMatrix()",
    "snippet": "@Test\n    public void testSetColumnMatrix() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealMatrix mColumn3 \u003d new BlockRealMatrix(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));\n        m.setColumnMatrix(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnMatrix(1));\n        try {\n            m.setColumnMatrix(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 740,
    "end_line": 758,
    "comment": "",
    "child_ranges": [
      "(line 741,col 9)-(line 741,col 56)",
      "(line 742,col 9)-(line 742,col 62)",
      "(line 743,col 9)-(line 743,col 61)",
      "(line 744,col 9)-(line 744,col 39)",
      "(line 745,col 9)-(line 745,col 60)",
      "(line 746,col 9)-(line 751,col 9)",
      "(line 752,col 9)-(line 757,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetColumnMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetColumnMatrixLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        RealMatrix sub \u003d new BlockRealMatrix(n, 1).scalarAdd(1);\n\n        m.setColumnMatrix(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getColumnMatrix(2));\n\n    }",
    "begin_line": 761,
    "end_line": 778,
    "comment": "",
    "child_ranges": [
      "(line 762,col 9)-(line 762,col 47)",
      "(line 763,col 9)-(line 763,col 49)",
      "(line 764,col 9)-(line 764,col 64)",
      "(line 766,col 9)-(line 766,col 34)",
      "(line 767,col 9)-(line 775,col 9)",
      "(line 776,col 9)-(line 776,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetRowVector()",
    "snippet": "@Test\n    public void testGetRowVector() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealVector mRow0 \u003d new ArrayRealVector(subRow0[0]);\n        RealVector mRow3 \u003d new ArrayRealVector(subRow3[0]);\n        Assert.assertEquals(mRow0, m.getRowVector(0));\n        Assert.assertEquals(mRow3, m.getRowVector(3));\n        try {\n            m.getRowVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 781,
    "end_line": 799,
    "comment": "",
    "child_ranges": [
      "(line 782,col 9)-(line 782,col 56)",
      "(line 783,col 9)-(line 783,col 59)",
      "(line 784,col 9)-(line 784,col 59)",
      "(line 785,col 9)-(line 785,col 54)",
      "(line 786,col 9)-(line 786,col 54)",
      "(line 787,col 9)-(line 792,col 9)",
      "(line 793,col 9)-(line 798,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetRowVector()",
    "snippet": "@Test\n    public void testSetRowVector() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealVector mRow3 \u003d new ArrayRealVector(subRow3[0]);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowVector(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowVector(0));\n        try {\n            m.setRowVector(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowVector(0, new ArrayRealVector(5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 802,
    "end_line": 820,
    "comment": "",
    "child_ranges": [
      "(line 803,col 9)-(line 803,col 56)",
      "(line 804,col 9)-(line 804,col 59)",
      "(line 805,col 9)-(line 805,col 55)",
      "(line 806,col 9)-(line 806,col 33)",
      "(line 807,col 9)-(line 807,col 54)",
      "(line 808,col 9)-(line 813,col 9)",
      "(line 814,col 9)-(line 819,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetRowVectorLarge()",
    "snippet": "@Test\n    public void testGetSetRowVectorLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        RealVector sub \u003d new ArrayRealVector(n, 1.0);\n\n        m.setRowVector(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getRowVector(2));\n    }",
    "begin_line": 823,
    "end_line": 839,
    "comment": "",
    "child_ranges": [
      "(line 824,col 9)-(line 824,col 47)",
      "(line 825,col 9)-(line 825,col 49)",
      "(line 826,col 9)-(line 826,col 53)",
      "(line 828,col 9)-(line 828,col 31)",
      "(line 829,col 9)-(line 837,col 9)",
      "(line 838,col 9)-(line 838,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetColumnVector()",
    "snippet": "@Test\n    public void testGetColumnVector() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealVector mColumn1 \u003d columnToVector(subColumn1);\n        RealVector mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertEquals(mColumn1, m.getColumnVector(1));\n        Assert.assertEquals(mColumn3, m.getColumnVector(3));\n        try {\n            m.getColumnVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 842,
    "end_line": 860,
    "comment": "",
    "child_ranges": [
      "(line 843,col 9)-(line 843,col 56)",
      "(line 844,col 9)-(line 844,col 57)",
      "(line 845,col 9)-(line 845,col 57)",
      "(line 846,col 9)-(line 846,col 60)",
      "(line 847,col 9)-(line 847,col 60)",
      "(line 848,col 9)-(line 853,col 9)",
      "(line 854,col 9)-(line 859,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetColumnVector()",
    "snippet": "@Test\n    public void testSetColumnVector() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        RealVector mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnVector(1));\n        m.setColumnVector(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnVector(1));\n        try {\n            m.setColumnVector(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnVector(0, new ArrayRealVector(5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 863,
    "end_line": 881,
    "comment": "",
    "child_ranges": [
      "(line 864,col 9)-(line 864,col 56)",
      "(line 865,col 9)-(line 865,col 57)",
      "(line 866,col 9)-(line 866,col 61)",
      "(line 867,col 9)-(line 867,col 39)",
      "(line 868,col 9)-(line 868,col 60)",
      "(line 869,col 9)-(line 874,col 9)",
      "(line 875,col 9)-(line 880,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetColumnVectorLarge()",
    "snippet": "@Test\n    public void testGetSetColumnVectorLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        RealVector sub \u003d new ArrayRealVector(n, 1.0);\n\n        m.setColumnVector(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getColumnVector(2));\n    }",
    "begin_line": 884,
    "end_line": 900,
    "comment": "",
    "child_ranges": [
      "(line 885,col 9)-(line 885,col 47)",
      "(line 886,col 9)-(line 886,col 49)",
      "(line 887,col 9)-(line 887,col 53)",
      "(line 889,col 9)-(line 889,col 34)",
      "(line 890,col 9)-(line 898,col 9)",
      "(line 899,col 9)-(line 899,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.columnToVector(double[][])",
    "snippet": "private RealVector columnToVector(double[][] column) {\n        double[] data \u003d new double[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return new ArrayRealVector(data, false);\n    }",
    "begin_line": 902,
    "end_line": 908,
    "comment": "",
    "child_ranges": [
      "(line 903,col 9)-(line 903,col 50)",
      "(line 904,col 9)-(line 906,col 9)",
      "(line 907,col 9)-(line 907,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetRow()",
    "snippet": "@Test\n    public void testGetRow() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        checkArrays(subRow0[0], m.getRow(0));\n        checkArrays(subRow3[0], m.getRow(3));\n        try {\n            m.getRow(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRow(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 911,
    "end_line": 927,
    "comment": "",
    "child_ranges": [
      "(line 912,col 9)-(line 912,col 56)",
      "(line 913,col 9)-(line 913,col 45)",
      "(line 914,col 9)-(line 914,col 45)",
      "(line 915,col 9)-(line 920,col 9)",
      "(line 921,col 9)-(line 926,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetRow()",
    "snippet": "@Test\n    public void testSetRow() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        Assert.assertTrue(subRow3[0][0] !\u003d m.getRow(0)[0]);\n        m.setRow(0, subRow3[0]);\n        checkArrays(subRow3[0], m.getRow(0));\n        try {\n            m.setRow(-1, subRow3[0]);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRow(0, new double[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 930,
    "end_line": 947,
    "comment": "",
    "child_ranges": [
      "(line 931,col 9)-(line 931,col 56)",
      "(line 932,col 9)-(line 932,col 59)",
      "(line 933,col 9)-(line 933,col 32)",
      "(line 934,col 9)-(line 934,col 45)",
      "(line 935,col 9)-(line 940,col 9)",
      "(line 941,col 9)-(line 946,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetRowLarge()",
    "snippet": "@Test\n    public void testGetSetRowLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        double[] sub \u003d new double[n];\n        Arrays.fill(sub, 1.0);\n\n        m.setRow(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        checkArrays(sub, m.getRow(2));\n    }",
    "begin_line": 950,
    "end_line": 967,
    "comment": "",
    "child_ranges": [
      "(line 951,col 9)-(line 951,col 47)",
      "(line 952,col 9)-(line 952,col 49)",
      "(line 953,col 9)-(line 953,col 37)",
      "(line 954,col 9)-(line 954,col 30)",
      "(line 956,col 9)-(line 956,col 25)",
      "(line 957,col 9)-(line 965,col 9)",
      "(line 966,col 9)-(line 966,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetColumn()",
    "snippet": "@Test\n    public void testGetColumn() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        double[] mColumn1 \u003d columnToArray(subColumn1);\n        double[] mColumn3 \u003d columnToArray(subColumn3);\n        checkArrays(mColumn1, m.getColumn(1));\n        checkArrays(mColumn3, m.getColumn(3));\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumn(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 970,
    "end_line": 988,
    "comment": "",
    "child_ranges": [
      "(line 971,col 9)-(line 971,col 56)",
      "(line 972,col 9)-(line 972,col 54)",
      "(line 973,col 9)-(line 973,col 54)",
      "(line 974,col 9)-(line 974,col 46)",
      "(line 975,col 9)-(line 975,col 46)",
      "(line 976,col 9)-(line 981,col 9)",
      "(line 982,col 9)-(line 987,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetColumn()",
    "snippet": "@Test\n    public void testSetColumn() {\n        RealMatrix m \u003d new BlockRealMatrix(subTestData);\n        double[] mColumn3 \u003d columnToArray(subColumn3);\n        Assert.assertTrue(mColumn3[0] !\u003d m.getColumn(1)[0]);\n        m.setColumn(1, mColumn3);\n        checkArrays(mColumn3, m.getColumn(1));\n        try {\n            m.setColumn(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumn(0, new double[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 991,
    "end_line": 1009,
    "comment": "",
    "child_ranges": [
      "(line 992,col 9)-(line 992,col 56)",
      "(line 993,col 9)-(line 993,col 54)",
      "(line 994,col 9)-(line 994,col 60)",
      "(line 995,col 9)-(line 995,col 33)",
      "(line 996,col 9)-(line 996,col 46)",
      "(line 997,col 9)-(line 1002,col 9)",
      "(line 1003,col 9)-(line 1008,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testGetSetColumnLarge()",
    "snippet": "@Test\n    public void testGetSetColumnLarge() {\n        int n \u003d 3 * BlockRealMatrix.BLOCK_SIZE;\n        RealMatrix m \u003d new BlockRealMatrix(n, n);\n        double[] sub \u003d new double[n];\n        Arrays.fill(sub, 1.0);\n\n        m.setColumn(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);\n                } else {\n                    Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);\n                }\n            }\n        }\n        checkArrays(sub, m.getColumn(2));\n    }",
    "begin_line": 1012,
    "end_line": 1029,
    "comment": "",
    "child_ranges": [
      "(line 1013,col 9)-(line 1013,col 47)",
      "(line 1014,col 9)-(line 1014,col 49)",
      "(line 1015,col 9)-(line 1015,col 37)",
      "(line 1016,col 9)-(line 1016,col 30)",
      "(line 1018,col 9)-(line 1018,col 28)",
      "(line 1019,col 9)-(line 1027,col 9)",
      "(line 1028,col 9)-(line 1028,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.columnToArray(double[][])",
    "snippet": "private double[] columnToArray(double[][] column) {\n        double[] data \u003d new double[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return data;\n    }",
    "begin_line": 1031,
    "end_line": 1037,
    "comment": "",
    "child_ranges": [
      "(line 1032,col 9)-(line 1032,col 50)",
      "(line 1033,col 9)-(line 1035,col 9)",
      "(line 1036,col 9)-(line 1036,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.checkArrays(double[], double[])",
    "snippet": "private void checkArrays(double[] expected, double[] actual) {\n        Assert.assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c expected.length; ++i) {\n            Assert.assertEquals(expected[i], actual[i], 0);\n        }\n    }",
    "begin_line": 1039,
    "end_line": 1044,
    "comment": "",
    "child_ranges": [
      "(line 1040,col 9)-(line 1040,col 60)",
      "(line 1041,col 9)-(line 1043,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testEqualsAndHashCode()",
    "snippet": "@Test\n    public void testEqualsAndHashCode() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        BlockRealMatrix m1 \u003d m.copy();\n        BlockRealMatrix mt \u003d m.transpose();\n        Assert.assertTrue(m.hashCode() !\u003d mt.hashCode());\n        Assert.assertEquals(m.hashCode(), m1.hashCode());\n        Assert.assertEquals(m, m);\n        Assert.assertEquals(m, m1);\n        Assert.assertFalse(m.equals(null));\n        Assert.assertFalse(m.equals(mt));\n        Assert.assertFalse(m.equals(new BlockRealMatrix(bigSingular)));\n    }",
    "begin_line": 1047,
    "end_line": 1058,
    "comment": "",
    "child_ranges": [
      "(line 1048,col 9)-(line 1048,col 58)",
      "(line 1049,col 9)-(line 1049,col 38)",
      "(line 1050,col 9)-(line 1050,col 43)",
      "(line 1051,col 9)-(line 1051,col 57)",
      "(line 1052,col 9)-(line 1052,col 57)",
      "(line 1053,col 9)-(line 1053,col 34)",
      "(line 1054,col 9)-(line 1054,col 35)",
      "(line 1055,col 9)-(line 1055,col 43)",
      "(line 1056,col 9)-(line 1056,col 41)",
      "(line 1057,col 9)-(line 1057,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        Assert.assertEquals(\"BlockRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\",\n                m.toString());\n    }",
    "begin_line": 1061,
    "end_line": 1065,
    "comment": "",
    "child_ranges": [
      "(line 1062,col 9)-(line 1062,col 58)",
      "(line 1063,col 9)-(line 1064,col 30)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSetSubMatrix()",
    "snippet": "@Test\n    public void testSetSubMatrix() throws Exception {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        m.setSubMatrix(detData2,1,1);\n        RealMatrix expected \u003d new BlockRealMatrix\n            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(detData2,0,0);\n        expected \u003d new BlockRealMatrix\n            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(testDataPlus2,0,0);\n        expected \u003d new BlockRealMatrix\n            (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n        Assert.assertEquals(expected, m);\n\n        // javadoc example\n        BlockRealMatrix matrix \u003d new BlockRealMatrix\n            (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n        matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);\n        expected \u003d new BlockRealMatrix\n            (new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});\n        Assert.assertEquals(expected, matrix);\n\n        // dimension overflow\n        try {\n            m.setSubMatrix(testData,1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        // dimension underflow\n        try {\n            m.setSubMatrix(testData,-1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        try {\n            m.setSubMatrix(testData,1,-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n\n        // null\n        try {\n            m.setSubMatrix(null,1,1);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException e) {\n            // expected\n        }\n\n        // ragged\n        try {\n            m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n        // empty\n        try {\n            m.setSubMatrix(new double[][] {{}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n    }",
    "begin_line": 1068,
    "end_line": 1137,
    "comment": "",
    "child_ranges": [
      "(line 1069,col 9)-(line 1069,col 58)",
      "(line 1070,col 9)-(line 1070,col 37)",
      "(line 1071,col 9)-(line 1072,col 73)",
      "(line 1073,col 9)-(line 1073,col 41)",
      "(line 1075,col 9)-(line 1075,col 37)",
      "(line 1076,col 9)-(line 1077,col 73)",
      "(line 1078,col 9)-(line 1078,col 41)",
      "(line 1080,col 9)-(line 1080,col 42)",
      "(line 1081,col 9)-(line 1082,col 74)",
      "(line 1083,col 9)-(line 1083,col 41)",
      "(line 1086,col 9)-(line 1087,col 73)",
      "(line 1088,col 9)-(line 1088,col 67)",
      "(line 1089,col 9)-(line 1090,col 72)",
      "(line 1091,col 9)-(line 1091,col 46)",
      "(line 1094,col 9)-(line 1099,col 9)",
      "(line 1101,col 9)-(line 1106,col 9)",
      "(line 1107,col 9)-(line 1112,col 9)",
      "(line 1115,col 9)-(line 1120,col 9)",
      "(line 1123,col 9)-(line 1128,col 9)",
      "(line 1131,col 9)-(line 1136,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testWalk()",
    "snippet": "@Test\n    public void testWalk() throws MathUserException {\n        int rows    \u003d 150;\n        int columns \u003d 75;\n\n        RealMatrix m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInRowOrder(new SetVisitor());\n        GetVisitor getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInColumnOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockRealMatrix(rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(0.0, m.getEntry(i, 0), 0);\n            Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(0.0, m.getEntry(0, j), 0);\n            Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);\n        }\n\n    }",
    "begin_line": 1140,
    "end_line": 1224,
    "comment": "",
    "child_ranges": [
      "(line 1141,col 9)-(line 1141,col 26)",
      "(line 1142,col 9)-(line 1142,col 25)",
      "(line 1144,col 9)-(line 1144,col 58)",
      "(line 1145,col 9)-(line 1145,col 43)",
      "(line 1146,col 9)-(line 1146,col 49)",
      "(line 1147,col 9)-(line 1147,col 43)",
      "(line 1148,col 9)-(line 1148,col 67)",
      "(line 1150,col 9)-(line 1150,col 47)",
      "(line 1151,col 9)-(line 1151,col 72)",
      "(line 1152,col 9)-(line 1152,col 38)",
      "(line 1153,col 9)-(line 1153,col 72)",
      "(line 1154,col 9)-(line 1154,col 79)",
      "(line 1155,col 9)-(line 1158,col 9)",
      "(line 1159,col 9)-(line 1162,col 9)",
      "(line 1164,col 9)-(line 1164,col 47)",
      "(line 1165,col 9)-(line 1165,col 46)",
      "(line 1166,col 9)-(line 1166,col 38)",
      "(line 1167,col 9)-(line 1167,col 43)",
      "(line 1168,col 9)-(line 1168,col 67)",
      "(line 1170,col 9)-(line 1170,col 47)",
      "(line 1171,col 9)-(line 1171,col 75)",
      "(line 1172,col 9)-(line 1172,col 38)",
      "(line 1173,col 9)-(line 1173,col 72)",
      "(line 1174,col 9)-(line 1174,col 79)",
      "(line 1175,col 9)-(line 1178,col 9)",
      "(line 1179,col 9)-(line 1182,col 9)",
      "(line 1184,col 9)-(line 1184,col 47)",
      "(line 1185,col 9)-(line 1185,col 49)",
      "(line 1186,col 9)-(line 1186,col 38)",
      "(line 1187,col 9)-(line 1187,col 37)",
      "(line 1188,col 9)-(line 1188,col 67)",
      "(line 1190,col 9)-(line 1190,col 47)",
      "(line 1191,col 9)-(line 1191,col 78)",
      "(line 1192,col 9)-(line 1192,col 38)",
      "(line 1193,col 9)-(line 1193,col 66)",
      "(line 1194,col 9)-(line 1194,col 79)",
      "(line 1195,col 9)-(line 1198,col 9)",
      "(line 1199,col 9)-(line 1202,col 9)",
      "(line 1204,col 9)-(line 1204,col 47)",
      "(line 1205,col 9)-(line 1205,col 49)",
      "(line 1206,col 9)-(line 1206,col 38)",
      "(line 1207,col 9)-(line 1207,col 40)",
      "(line 1208,col 9)-(line 1208,col 67)",
      "(line 1210,col 9)-(line 1210,col 47)",
      "(line 1211,col 9)-(line 1211,col 78)",
      "(line 1212,col 9)-(line 1212,col 38)",
      "(line 1213,col 9)-(line 1213,col 69)",
      "(line 1214,col 9)-(line 1214,col 79)",
      "(line 1215,col 9)-(line 1218,col 9)",
      "(line 1219,col 9)-(line 1222,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.testSerial()",
    "snippet": "@Test\n    public void testSerial()  {\n        BlockRealMatrix m \u003d new BlockRealMatrix(testData);\n        Assert.assertEquals(m,TestUtils.serializeAndRecover(m));\n    }",
    "begin_line": 1227,
    "end_line": 1230,
    "comment": "",
    "child_ranges": [
      "(line 1228,col 9)-(line 1228,col 58)",
      "(line 1229,col 9)-(line 1229,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.visit(int, int, double)",
    "snippet": "@Override\n        public double visit(int i, int j, double value) {\n            return i + j / 1024.0;\n        }",
    "begin_line": 1234,
    "end_line": 1236,
    "comment": "",
    "child_ranges": [
      "(line 1235,col 13)-(line 1235,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.visit(int, int, double)",
    "snippet": "@Override\n        public void visit(int i, int j, double value) {\n            ++count;\n            Assert.assertEquals(i + j / 1024.0, value, 0.0);\n        }",
    "begin_line": 1242,
    "end_line": 1245,
    "comment": "",
    "child_ranges": [
      "(line 1243,col 13)-(line 1243,col 20)",
      "(line 1244,col 13)-(line 1244,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.getCount()",
    "snippet": "public int getCount() {\n            return count;\n        }",
    "begin_line": 1246,
    "end_line": 1248,
    "comment": "",
    "child_ranges": [
      "(line 1247,col 13)-(line 1247,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.assertClose(RealMatrix, RealMatrix, double)",
    "snippet": "protected void assertClose(RealMatrix m, RealMatrix n, double tolerance) {\n        Assert.assertTrue(m.subtract(n).getNorm() \u003c tolerance);\n    }",
    "begin_line": 1254,
    "end_line": 1256,
    "comment": "/** \n * verifies that two matrices are close (1-norm) \n */\n",
    "child_ranges": [
      "(line 1255,col 9)-(line 1255,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.assertClose(double[], double[], double)",
    "snippet": "protected void assertClose(double[] m, double[] n, double tolerance) {\n        if (m.length !\u003d n.length) {\n            Assert.fail(\"vectors not same length\");\n        }\n        for (int i \u003d 0; i \u003c m.length; i++) {\n            Assert.assertEquals(m[i], n[i], tolerance);\n        }\n    }",
    "begin_line": 1259,
    "end_line": 1266,
    "comment": "/** \n * verifies that two vectors are close (sup norm) \n */\n",
    "child_ranges": [
      "(line 1260,col 9)-(line 1262,col 9)",
      "(line 1263,col 9)-(line 1265,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockRealMatrixTest.createRandomMatrix(java.util.Random, int, int)",
    "snippet": "private BlockRealMatrix createRandomMatrix(Random r, int rows, int columns) {\n        BlockRealMatrix m \u003d new BlockRealMatrix(rows, columns);\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            for (int j \u003d 0; j \u003c columns; ++j) {\n                m.setEntry(i, j, 200 * r.nextDouble() - 100);\n            }\n        }\n        return m;\n    }",
    "begin_line": 1268,
    "end_line": 1276,
    "comment": "",
    "child_ranges": [
      "(line 1269,col 9)-(line 1269,col 63)",
      "(line 1270,col 9)-(line 1274,col 9)",
      "(line 1275,col 9)-(line 1275,col 17)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testDimensions()",
    "snippet": "@Test\n    public void testDimensions() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix m2 \u003d createSparseMatrix(testData2);\n        Assert.assertEquals(\"testData row dimension\", 3, m.getRowDimension());\n        Assert.assertEquals(\"testData column dimension\", 3, m.getColumnDimension());\n        Assert.assertTrue(\"testData is square\", m.isSquare());\n        Assert.assertEquals(\"testData2 row dimension\", m2.getRowDimension(), 2);\n        Assert.assertEquals(\"testData2 column dimension\", m2.getColumnDimension(), 3);\n        Assert.assertTrue(\"testData2 is not square\", !m2.isSquare());\n    }",
    "begin_line": 113,
    "end_line": 122,
    "comment": "/** \n * test dimensions \n */\n",
    "child_ranges": [
      "(line 114,col 9)-(line 114,col 59)",
      "(line 115,col 9)-(line 115,col 61)",
      "(line 116,col 9)-(line 116,col 78)",
      "(line 117,col 9)-(line 117,col 84)",
      "(line 118,col 9)-(line 118,col 62)",
      "(line 119,col 9)-(line 119,col 80)",
      "(line 120,col 9)-(line 120,col 86)",
      "(line 121,col 9)-(line 121,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testCopyFunctions()",
    "snippet": "@Test\n    public void testCopyFunctions() {\n        OpenMapRealMatrix m1 \u003d createSparseMatrix(testData);\n        RealMatrix m2 \u003d m1.copy();\n        Assert.assertEquals(m1.getClass(), m2.getClass());\n        Assert.assertEquals((m2), m1);\n        OpenMapRealMatrix m3 \u003d createSparseMatrix(testData);\n        RealMatrix m4 \u003d m3.copy();\n        Assert.assertEquals(m3.getClass(), m4.getClass());\n        Assert.assertEquals((m4), m3);\n    }",
    "begin_line": 126,
    "end_line": 135,
    "comment": "/** \n * test copy functions \n */\n",
    "child_ranges": [
      "(line 127,col 9)-(line 127,col 60)",
      "(line 128,col 9)-(line 128,col 34)",
      "(line 129,col 9)-(line 129,col 58)",
      "(line 130,col 9)-(line 130,col 38)",
      "(line 131,col 9)-(line 131,col 60)",
      "(line 132,col 9)-(line 132,col 34)",
      "(line 133,col 9)-(line 133,col 58)",
      "(line 134,col 9)-(line 134,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testAdd()",
    "snippet": "@Test\n    public void testAdd() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix mInv \u003d createSparseMatrix(testDataInv);\n        OpenMapRealMatrix mDataPlusInv \u003d createSparseMatrix(testDataPlusInv);\n        RealMatrix mPlusMInv \u003d m.add(mInv);\n        for (int row \u003d 0; row \u003c m.getRowDimension(); row++) {\n            for (int col \u003d 0; col \u003c m.getColumnDimension(); col++) {\n                Assert.assertEquals(\"sum entry entry\",\n                    mDataPlusInv.getEntry(row, col), mPlusMInv.getEntry(row, col),\n                    entryTolerance);\n            }\n        }\n    }",
    "begin_line": 139,
    "end_line": 151,
    "comment": "/** \n * test add \n */\n",
    "child_ranges": [
      "(line 140,col 9)-(line 140,col 59)",
      "(line 141,col 9)-(line 141,col 65)",
      "(line 142,col 9)-(line 142,col 77)",
      "(line 143,col 9)-(line 143,col 43)",
      "(line 144,col 9)-(line 150,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testAddFail()",
    "snippet": "@Test\n    public void testAddFail() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix m2 \u003d createSparseMatrix(testData2);\n        try {\n            m.add(m2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 155,
    "end_line": 164,
    "comment": "/** \n * test add failure \n */\n",
    "child_ranges": [
      "(line 156,col 9)-(line 156,col 59)",
      "(line 157,col 9)-(line 157,col 61)",
      "(line 158,col 9)-(line 163,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testNorm()",
    "snippet": "@Test\n    public void testNorm() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix m2 \u003d createSparseMatrix(testData2);\n        Assert.assertEquals(\"testData norm\", 14d, m.getNorm(), entryTolerance);\n        Assert.assertEquals(\"testData2 norm\", 7d, m2.getNorm(), entryTolerance);\n    }",
    "begin_line": 168,
    "end_line": 173,
    "comment": "/** \n * test norm \n */\n",
    "child_ranges": [
      "(line 169,col 9)-(line 169,col 59)",
      "(line 170,col 9)-(line 170,col 61)",
      "(line 171,col 9)-(line 171,col 79)",
      "(line 172,col 9)-(line 172,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus()",
    "snippet": "@Test\n    public void testPlusMinus() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix n \u003d createSparseMatrix(testDataInv);\n        assertClose(\"m-n \u003d m + -n\", m.subtract(n),\n            n.scalarMultiply(-1d).add(m), entryTolerance);\n        try {\n            m.subtract(createSparseMatrix(testData2));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 177,
    "end_line": 188,
    "comment": "/** \n * test m-n \u003d m + -n \n */\n",
    "child_ranges": [
      "(line 178,col 9)-(line 178,col 59)",
      "(line 179,col 9)-(line 179,col 62)",
      "(line 180,col 9)-(line 181,col 58)",
      "(line 182,col 9)-(line 187,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply()",
    "snippet": "@Test\n    public void testMultiply() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix mInv \u003d createSparseMatrix(testDataInv);\n        OpenMapRealMatrix identity \u003d createSparseMatrix(id);\n        OpenMapRealMatrix m2 \u003d createSparseMatrix(testData2);\n        assertClose(\"inverse multiply\", m.multiply(mInv), identity,\n                entryTolerance);\n        assertClose(\"inverse multiply\", m.multiply(new BlockRealMatrix(testDataInv)), identity,\n                    entryTolerance);\n        assertClose(\"inverse multiply\", mInv.multiply(m), identity,\n                entryTolerance);\n        assertClose(\"identity multiply\", m.multiply(identity), m,\n                entryTolerance);\n        assertClose(\"identity multiply\", identity.multiply(mInv), mInv,\n                entryTolerance);\n        assertClose(\"identity multiply\", m2.multiply(identity), m2,\n                entryTolerance);\n        try {\n            m.multiply(createSparseMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 192,
    "end_line": 215,
    "comment": "/** \n * test multiply \n */\n",
    "child_ranges": [
      "(line 193,col 9)-(line 193,col 59)",
      "(line 194,col 9)-(line 194,col 65)",
      "(line 195,col 9)-(line 195,col 60)",
      "(line 196,col 9)-(line 196,col 61)",
      "(line 197,col 9)-(line 198,col 32)",
      "(line 199,col 9)-(line 200,col 36)",
      "(line 201,col 9)-(line 202,col 32)",
      "(line 203,col 9)-(line 204,col 32)",
      "(line 205,col 9)-(line 206,col 32)",
      "(line 207,col 9)-(line 208,col 32)",
      "(line 209,col 9)-(line 214,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2()",
    "snippet": "@Test\n    public void testMultiply2() {\n        RealMatrix m3 \u003d createSparseMatrix(d3);\n        RealMatrix m4 \u003d createSparseMatrix(d4);\n        RealMatrix m5 \u003d createSparseMatrix(d5);\n        assertClose(\"m3*m4\u003dm5\", m3.multiply(m4), m5, entryTolerance);\n    }",
    "begin_line": 224,
    "end_line": 229,
    "comment": "",
    "child_ranges": [
      "(line 225,col 9)-(line 225,col 47)",
      "(line 226,col 9)-(line 226,col 47)",
      "(line 227,col 9)-(line 227,col 47)",
      "(line 228,col 9)-(line 228,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testTrace()",
    "snippet": "@Test\n    public void testTrace() {\n        RealMatrix m \u003d createSparseMatrix(id);\n        Assert.assertEquals(\"identity trace\", 3d, m.getTrace(), entryTolerance);\n        m \u003d createSparseMatrix(testData2);\n        try {\n            m.getTrace();\n            Assert.fail(\"Expecting NonSquareMatrixException\");\n        } catch (NonSquareMatrixException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 233,
    "end_line": 243,
    "comment": "/** \n * test trace \n */\n",
    "child_ranges": [
      "(line 234,col 9)-(line 234,col 46)",
      "(line 235,col 9)-(line 235,col 80)",
      "(line 236,col 9)-(line 236,col 42)",
      "(line 237,col 9)-(line 242,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd()",
    "snippet": "@Test\n    public void testScalarAdd() {\n        RealMatrix m \u003d createSparseMatrix(testData);\n        assertClose(\"scalar add\", createSparseMatrix(testDataPlus2),\n            m.scalarAdd(2d), entryTolerance);\n    }",
    "begin_line": 247,
    "end_line": 251,
    "comment": "/** \n * test sclarAdd \n */\n",
    "child_ranges": [
      "(line 248,col 9)-(line 248,col 52)",
      "(line 249,col 9)-(line 250,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testOperate()",
    "snippet": "@Test\n    public void testOperate() {\n        RealMatrix m \u003d createSparseMatrix(id);\n        assertClose(\"identity operate\", testVector, m.operate(testVector),\n                entryTolerance);\n        assertClose(\"identity operate\", testVector, m.operate(\n                new ArrayRealVector(testVector)).getData(), entryTolerance);\n        m \u003d createSparseMatrix(bigSingular);\n        try {\n            m.operate(testVector);\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 255,
    "end_line": 268,
    "comment": "/** \n * test operate \n */\n",
    "child_ranges": [
      "(line 256,col 9)-(line 256,col 46)",
      "(line 257,col 9)-(line 258,col 32)",
      "(line 259,col 9)-(line 260,col 76)",
      "(line 261,col 9)-(line 261,col 44)",
      "(line 262,col 9)-(line 267,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testMath209()",
    "snippet": "@Test\n    public void testMath209() {\n        RealMatrix a \u003d createSparseMatrix(new double[][] {\n                { 1, 2 }, { 3, 4 }, { 5, 6 } });\n        double[] b \u003d a.operate(new double[] { 1, 1 });\n        Assert.assertEquals(a.getRowDimension(), b.length);\n        Assert.assertEquals(3.0, b[0], 1.0e-12);\n        Assert.assertEquals(7.0, b[1], 1.0e-12);\n        Assert.assertEquals(11.0, b[2], 1.0e-12);\n    }",
    "begin_line": 272,
    "end_line": 280,
    "comment": "/** \n * test issue MATH-209 \n */\n",
    "child_ranges": [
      "(line 273,col 9)-(line 274,col 48)",
      "(line 275,col 9)-(line 275,col 54)",
      "(line 276,col 9)-(line 276,col 59)",
      "(line 277,col 9)-(line 277,col 48)",
      "(line 278,col 9)-(line 278,col 48)",
      "(line 279,col 9)-(line 279,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose()",
    "snippet": "@Test\n    public void testTranspose() {\n        RealMatrix m \u003d createSparseMatrix(testData);\n        RealMatrix mIT \u003d new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n        RealMatrix mTI \u003d new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n        assertClose(\"inverse-transpose\", mIT, mTI, normTolerance);\n        m \u003d createSparseMatrix(testData2);\n        RealMatrix mt \u003d createSparseMatrix(testData2T);\n        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n    }",
    "begin_line": 284,
    "end_line": 292,
    "comment": "/** \n * test transpose \n */\n",
    "child_ranges": [
      "(line 285,col 9)-(line 285,col 52)",
      "(line 286,col 9)-(line 286,col 89)",
      "(line 287,col 9)-(line 287,col 89)",
      "(line 288,col 9)-(line 288,col 66)",
      "(line 289,col 9)-(line 289,col 42)",
      "(line 290,col 9)-(line 290,col 55)",
      "(line 291,col 9)-(line 291,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiplyVector()",
    "snippet": "@Test\n    public void testPremultiplyVector() {\n        RealMatrix m \u003d createSparseMatrix(testData);\n        assertClose(\"premultiply\", m.preMultiply(testVector), preMultTest,\n            normTolerance);\n        assertClose(\"premultiply\", m.preMultiply(\n            new ArrayRealVector(testVector).getData()), preMultTest, normTolerance);\n        m \u003d createSparseMatrix(bigSingular);\n        try {\n            m.preMultiply(testVector);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 296,
    "end_line": 309,
    "comment": "/** \n * test preMultiply by vector \n */\n",
    "child_ranges": [
      "(line 297,col 9)-(line 297,col 52)",
      "(line 298,col 9)-(line 299,col 27)",
      "(line 300,col 9)-(line 301,col 84)",
      "(line 302,col 9)-(line 302,col 44)",
      "(line 303,col 9)-(line 308,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply()",
    "snippet": "@Test\n    public void testPremultiply() {\n        RealMatrix m3 \u003d createSparseMatrix(d3);\n        RealMatrix m4 \u003d createSparseMatrix(d4);\n        RealMatrix m5 \u003d createSparseMatrix(d5);\n        assertClose(\"m3*m4\u003dm5\", m4.preMultiply(m3), m5, entryTolerance);\n\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix mInv \u003d createSparseMatrix(testDataInv);\n        OpenMapRealMatrix identity \u003d createSparseMatrix(id);\n        assertClose(\"inverse multiply\", m.preMultiply(mInv), identity,\n                entryTolerance);\n        assertClose(\"inverse multiply\", mInv.preMultiply(m), identity,\n                entryTolerance);\n        assertClose(\"identity multiply\", m.preMultiply(identity), m,\n                entryTolerance);\n        assertClose(\"identity multiply\", identity.preMultiply(mInv), mInv,\n                entryTolerance);\n        try {\n            m.preMultiply(createSparseMatrix(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 312,
    "end_line": 335,
    "comment": "",
    "child_ranges": [
      "(line 313,col 9)-(line 313,col 47)",
      "(line 314,col 9)-(line 314,col 47)",
      "(line 315,col 9)-(line 315,col 47)",
      "(line 316,col 9)-(line 316,col 72)",
      "(line 318,col 9)-(line 318,col 59)",
      "(line 319,col 9)-(line 319,col 65)",
      "(line 320,col 9)-(line 320,col 60)",
      "(line 321,col 9)-(line 322,col 32)",
      "(line 323,col 9)-(line 324,col 32)",
      "(line 325,col 9)-(line 326,col 32)",
      "(line 327,col 9)-(line 328,col 32)",
      "(line 329,col 9)-(line 334,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetVectors()",
    "snippet": "@Test\n    public void testGetVectors() {\n        RealMatrix m \u003d createSparseMatrix(testData);\n        assertClose(\"get row\", m.getRow(0), testDataRow1, entryTolerance);\n        assertClose(\"get col\", m.getColumn(2), testDataCol3, entryTolerance);\n        try {\n            m.getRow(10);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 338,
    "end_line": 354,
    "comment": "",
    "child_ranges": [
      "(line 339,col 9)-(line 339,col 52)",
      "(line 340,col 9)-(line 340,col 74)",
      "(line 341,col 9)-(line 341,col 77)",
      "(line 342,col 9)-(line 347,col 9)",
      "(line 348,col 9)-(line 353,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetEntry()",
    "snippet": "@Test\n    public void testGetEntry() {\n        RealMatrix m \u003d createSparseMatrix(testData);\n        Assert.assertEquals(\"get entry\", m.getEntry(0, 1), 2d, entryTolerance);\n        try {\n            m.getEntry(10, 4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 357,
    "end_line": 366,
    "comment": "",
    "child_ranges": [
      "(line 358,col 9)-(line 358,col 52)",
      "(line 359,col 9)-(line 359,col 79)",
      "(line 360,col 9)-(line 365,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testExamples()",
    "snippet": "@Test\n    public void testExamples() {\n        // Create a real matrix with two rows and three columns\n        double[][] matrixData \u003d { { 1d, 2d, 3d }, { 2d, 5d, 3d } };\n        RealMatrix m \u003d createSparseMatrix(matrixData);\n        // One more with three rows, two columns\n        double[][] matrixData2 \u003d { { 1d, 2d }, { 2d, 5d }, { 1d, 7d } };\n        RealMatrix n \u003d createSparseMatrix(matrixData2);\n        // Now multiply m by n\n        RealMatrix p \u003d m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        // Invert p\n        RealMatrix pInverse \u003d new LUDecompositionImpl(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        // Solve example\n        double[][] coefficientsData \u003d { { 2, 3, -2 }, { -1, 7, 6 },\n                { 4, -3, -5 } };\n        RealMatrix coefficients \u003d createSparseMatrix(coefficientsData);\n        double[] constants \u003d { 1, -2, 1 };\n        double[] solution \u003d new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n        Assert.assertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],\n                constants[0], 1E-12);\n        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],\n                constants[1], 1E-12);\n        Assert.assertEquals(4 * solution[0] - 3 * solution[1] - 5 * solution[2],\n                constants[2], 1E-12);\n\n    }",
    "begin_line": 370,
    "end_line": 399,
    "comment": "/** \n * test examples in user guide \n */\n",
    "child_ranges": [
      "(line 372,col 9)-(line 372,col 67)",
      "(line 373,col 9)-(line 373,col 54)",
      "(line 375,col 9)-(line 375,col 72)",
      "(line 376,col 9)-(line 376,col 55)",
      "(line 378,col 9)-(line 378,col 37)",
      "(line 379,col 9)-(line 379,col 52)",
      "(line 380,col 9)-(line 380,col 55)",
      "(line 382,col 9)-(line 382,col 82)",
      "(line 383,col 9)-(line 383,col 59)",
      "(line 384,col 9)-(line 384,col 62)",
      "(line 387,col 9)-(line 388,col 32)",
      "(line 389,col 9)-(line 389,col 71)",
      "(line 390,col 9)-(line 390,col 42)",
      "(line 391,col 9)-(line 391,col 95)",
      "(line 392,col 9)-(line 393,col 37)",
      "(line 394,col 9)-(line 395,col 37)",
      "(line 396,col 9)-(line 397,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testSubMatrix()",
    "snippet": "@Test\n    public void testSubMatrix() {\n        RealMatrix m \u003d createSparseMatrix(subTestData);\n        RealMatrix mRows23Cols00 \u003d createSparseMatrix(subRows23Cols00);\n        RealMatrix mRows00Cols33 \u003d createSparseMatrix(subRows00Cols33);\n        RealMatrix mRows01Cols23 \u003d createSparseMatrix(subRows01Cols23);\n        RealMatrix mRows02Cols13 \u003d createSparseMatrix(subRows02Cols13);\n        RealMatrix mRows03Cols12 \u003d createSparseMatrix(subRows03Cols12);\n        RealMatrix mRows03Cols123 \u003d createSparseMatrix(subRows03Cols123);\n        RealMatrix mRows20Cols123 \u003d createSparseMatrix(subRows20Cols123);\n        RealMatrix mRows31Cols31 \u003d createSparseMatrix(subRows31Cols31);\n        Assert.assertEquals(\"Rows23Cols00\", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));\n        Assert.assertEquals(\"Rows00Cols33\", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));\n        Assert.assertEquals(\"Rows01Cols23\", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));\n        Assert.assertEquals(\"Rows02Cols13\", mRows02Cols13,\n            m.getSubMatrix(new int[] { 0, 2 }, new int[] { 1, 3 }));\n        Assert.assertEquals(\"Rows03Cols12\", mRows03Cols12,\n            m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2 }));\n        Assert.assertEquals(\"Rows03Cols123\", mRows03Cols123,\n            m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2, 3 }));\n        Assert.assertEquals(\"Rows20Cols123\", mRows20Cols123,\n            m.getSubMatrix(new int[] { 2, 0 }, new int[] { 1, 2, 3 }));\n        Assert.assertEquals(\"Rows31Cols31\", mRows31Cols31,\n            m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));\n        Assert.assertEquals(\"Rows31Cols31\", mRows31Cols31,\n            m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));\n\n        try {\n            m.getSubMatrix(1, 0, 2, 4);\n            Assert.fail(\"Expecting NumberIsTooSmallException\");\n        } catch (NumberIsTooSmallException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(-1, 1, 2, 2);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1, 0, 2, 2);\n            Assert.fail(\"Expecting NumberIsTooSmallException\");\n        } catch (NumberIsTooSmallException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1, 0, 2, 4);\n            Assert.fail(\"Expecting NumberIsTooSmallException\");\n        } catch (NumberIsTooSmallException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] {}, new int[] { 0 });\n            Assert.fail(\"Expecting NoDataException\");\n        } catch (NoDataException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] { 0 }, new int[] { 4 });\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 403,
    "end_line": 465,
    "comment": "",
    "child_ranges": [
      "(line 404,col 9)-(line 404,col 55)",
      "(line 405,col 9)-(line 405,col 71)",
      "(line 406,col 9)-(line 406,col 71)",
      "(line 407,col 9)-(line 407,col 71)",
      "(line 408,col 9)-(line 408,col 71)",
      "(line 409,col 9)-(line 409,col 71)",
      "(line 410,col 9)-(line 410,col 73)",
      "(line 411,col 9)-(line 411,col 73)",
      "(line 412,col 9)-(line 412,col 71)",
      "(line 413,col 9)-(line 413,col 87)",
      "(line 414,col 9)-(line 414,col 87)",
      "(line 415,col 9)-(line 415,col 87)",
      "(line 416,col 9)-(line 417,col 68)",
      "(line 418,col 9)-(line 419,col 68)",
      "(line 420,col 9)-(line 421,col 71)",
      "(line 422,col 9)-(line 423,col 71)",
      "(line 424,col 9)-(line 425,col 68)",
      "(line 426,col 9)-(line 427,col 68)",
      "(line 429,col 9)-(line 434,col 9)",
      "(line 435,col 9)-(line 440,col 9)",
      "(line 441,col 9)-(line 446,col 9)",
      "(line 447,col 9)-(line 452,col 9)",
      "(line 453,col 9)-(line 458,col 9)",
      "(line 459,col 9)-(line 464,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetRowMatrix()",
    "snippet": "@Test\n    public void testGetRowMatrix() {\n        RealMatrix m \u003d createSparseMatrix(subTestData);\n        RealMatrix mRow0 \u003d createSparseMatrix(subRow0);\n        RealMatrix mRow3 \u003d createSparseMatrix(subRow3);\n        Assert.assertEquals(\"Row0\", mRow0, m.getRowMatrix(0));\n        Assert.assertEquals(\"Row3\", mRow3, m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 468,
    "end_line": 486,
    "comment": "",
    "child_ranges": [
      "(line 469,col 9)-(line 469,col 55)",
      "(line 470,col 9)-(line 470,col 55)",
      "(line 471,col 9)-(line 471,col 55)",
      "(line 472,col 9)-(line 472,col 62)",
      "(line 473,col 9)-(line 473,col 62)",
      "(line 474,col 9)-(line 479,col 9)",
      "(line 480,col 9)-(line 485,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetColumnMatrix()",
    "snippet": "@Test\n    public void testGetColumnMatrix() {\n        RealMatrix m \u003d createSparseMatrix(subTestData);\n        RealMatrix mColumn1 \u003d createSparseMatrix(subColumn1);\n        RealMatrix mColumn3 \u003d createSparseMatrix(subColumn3);\n        Assert.assertEquals(\"Column1\", mColumn1, m.getColumnMatrix(1));\n        Assert.assertEquals(\"Column3\", mColumn3, m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 489,
    "end_line": 507,
    "comment": "",
    "child_ranges": [
      "(line 490,col 9)-(line 490,col 55)",
      "(line 491,col 9)-(line 491,col 61)",
      "(line 492,col 9)-(line 492,col 61)",
      "(line 493,col 9)-(line 493,col 71)",
      "(line 494,col 9)-(line 494,col 71)",
      "(line 495,col 9)-(line 500,col 9)",
      "(line 501,col 9)-(line 506,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetRowVector()",
    "snippet": "@Test\n    public void testGetRowVector() {\n        RealMatrix m \u003d createSparseMatrix(subTestData);\n        RealVector mRow0 \u003d new ArrayRealVector(subRow0[0]);\n        RealVector mRow3 \u003d new ArrayRealVector(subRow3[0]);\n        Assert.assertEquals(\"Row0\", mRow0, m.getRowVector(0));\n        Assert.assertEquals(\"Row3\", mRow3, m.getRowVector(3));\n        try {\n            m.getRowVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 510,
    "end_line": 528,
    "comment": "",
    "child_ranges": [
      "(line 511,col 9)-(line 511,col 55)",
      "(line 512,col 9)-(line 512,col 59)",
      "(line 513,col 9)-(line 513,col 59)",
      "(line 514,col 9)-(line 514,col 62)",
      "(line 515,col 9)-(line 515,col 62)",
      "(line 516,col 9)-(line 521,col 9)",
      "(line 522,col 9)-(line 527,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testGetColumnVector()",
    "snippet": "@Test\n    public void testGetColumnVector() {\n        RealMatrix m \u003d createSparseMatrix(subTestData);\n        RealVector mColumn1 \u003d columnToVector(subColumn1);\n        RealVector mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertEquals(\"Column1\", mColumn1, m.getColumnVector(1));\n        Assert.assertEquals(\"Column3\", mColumn3, m.getColumnVector(3));\n        try {\n            m.getColumnVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 531,
    "end_line": 549,
    "comment": "",
    "child_ranges": [
      "(line 532,col 9)-(line 532,col 55)",
      "(line 533,col 9)-(line 533,col 57)",
      "(line 534,col 9)-(line 534,col 57)",
      "(line 535,col 9)-(line 535,col 71)",
      "(line 536,col 9)-(line 536,col 71)",
      "(line 537,col 9)-(line 542,col 9)",
      "(line 543,col 9)-(line 548,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.columnToVector(double[][])",
    "snippet": "private RealVector columnToVector(double[][] column) {\n        double[] data \u003d new double[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return new ArrayRealVector(data, false);\n    }",
    "begin_line": 551,
    "end_line": 557,
    "comment": "",
    "child_ranges": [
      "(line 552,col 9)-(line 552,col 50)",
      "(line 553,col 9)-(line 555,col 9)",
      "(line 556,col 9)-(line 556,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testEqualsAndHashCode()",
    "snippet": "@Test\n    public void testEqualsAndHashCode() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        OpenMapRealMatrix m1 \u003d m.copy();\n        OpenMapRealMatrix mt \u003d (OpenMapRealMatrix) m.transpose();\n        Assert.assertTrue(m.hashCode() !\u003d mt.hashCode());\n        Assert.assertEquals(m.hashCode(), m1.hashCode());\n        Assert.assertEquals(m, m);\n        Assert.assertEquals(m, m1);\n        Assert.assertFalse(m.equals(null));\n        Assert.assertFalse(m.equals(mt));\n        Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));\n    }",
    "begin_line": 560,
    "end_line": 571,
    "comment": "",
    "child_ranges": [
      "(line 561,col 9)-(line 561,col 59)",
      "(line 562,col 9)-(line 562,col 40)",
      "(line 563,col 9)-(line 563,col 65)",
      "(line 564,col 9)-(line 564,col 57)",
      "(line 565,col 9)-(line 565,col 57)",
      "(line 566,col 9)-(line 566,col 34)",
      "(line 567,col 9)-(line 567,col 35)",
      "(line 568,col 9)-(line 568,col 43)",
      "(line 569,col 9)-(line 569,col 41)",
      "(line 570,col 9)-(line 570,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        Assert.assertEquals(\"OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\",\n            m.toString());\n        m \u003d new OpenMapRealMatrix(1, 1);\n        Assert.assertEquals(\"OpenMapRealMatrix{{0.0}}\", m.toString());\n    }",
    "begin_line": 574,
    "end_line": 580,
    "comment": "",
    "child_ranges": [
      "(line 575,col 9)-(line 575,col 59)",
      "(line 576,col 9)-(line 577,col 26)",
      "(line 578,col 9)-(line 578,col 40)",
      "(line 579,col 9)-(line 579,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testSetSubMatrix()",
    "snippet": "@Test\n    public void testSetSubMatrix() {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        m.setSubMatrix(detData2, 1, 1);\n        RealMatrix expected \u003d createSparseMatrix(new double[][] {\n                { 1.0, 2.0, 3.0 }, { 2.0, 1.0, 3.0 }, { 1.0, 2.0, 4.0 } });\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(detData2, 0, 0);\n        expected \u003d createSparseMatrix(new double[][] {\n                { 1.0, 3.0, 3.0 }, { 2.0, 4.0, 3.0 }, { 1.0, 2.0, 4.0 } });\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(testDataPlus2, 0, 0);\n        expected \u003d createSparseMatrix(new double[][] {\n                { 3.0, 4.0, 5.0 }, { 4.0, 7.0, 5.0 }, { 3.0, 2.0, 10.0 } });\n        Assert.assertEquals(expected, m);\n\n        // javadoc example\n        OpenMapRealMatrix matrix \u003d\n            createSparseMatrix(new double[][] {\n        { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 0, 1, 2 } });\n        matrix.setSubMatrix(new double[][] { { 3, 4 }, { 5, 6 } }, 1, 1);\n        expected \u003d createSparseMatrix(new double[][] {\n                { 1, 2, 3, 4 }, { 5, 3, 4, 8 }, { 9, 5, 6, 2 } });\n        Assert.assertEquals(expected, matrix);\n\n        // dimension overflow\n        try {\n            m.setSubMatrix(testData, 1, 1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        // dimension underflow\n        try {\n            m.setSubMatrix(testData, -1, 1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        try {\n            m.setSubMatrix(testData, 1, -1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n\n        // null\n        try {\n            m.setSubMatrix(null, 1, 1);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException e) {\n            // expected\n        }\n        try {\n            new OpenMapRealMatrix(0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n        // ragged\n        try {\n            m.setSubMatrix(new double[][] { { 1 }, { 2, 3 } }, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n        // empty\n        try {\n            m.setSubMatrix(new double[][] { {} }, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n    }",
    "begin_line": 583,
    "end_line": 660,
    "comment": "",
    "child_ranges": [
      "(line 584,col 9)-(line 584,col 59)",
      "(line 585,col 9)-(line 585,col 39)",
      "(line 586,col 9)-(line 587,col 75)",
      "(line 588,col 9)-(line 588,col 41)",
      "(line 590,col 9)-(line 590,col 39)",
      "(line 591,col 9)-(line 592,col 75)",
      "(line 593,col 9)-(line 593,col 41)",
      "(line 595,col 9)-(line 595,col 44)",
      "(line 596,col 9)-(line 597,col 76)",
      "(line 598,col 9)-(line 598,col 41)",
      "(line 601,col 9)-(line 603,col 58)",
      "(line 604,col 9)-(line 604,col 73)",
      "(line 605,col 9)-(line 606,col 66)",
      "(line 607,col 9)-(line 607,col 46)",
      "(line 610,col 9)-(line 615,col 9)",
      "(line 617,col 9)-(line 622,col 9)",
      "(line 623,col 9)-(line 628,col 9)",
      "(line 631,col 9)-(line 636,col 9)",
      "(line 637,col 9)-(line 642,col 9)",
      "(line 645,col 9)-(line 650,col 9)",
      "(line 653,col 9)-(line 658,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.testSerial()",
    "snippet": "@Test\n    public void testSerial()  {\n        OpenMapRealMatrix m \u003d createSparseMatrix(testData);\n        Assert.assertEquals(m,TestUtils.serializeAndRecover(m));\n    }",
    "begin_line": 663,
    "end_line": 666,
    "comment": "",
    "child_ranges": [
      "(line 664,col 9)-(line 664,col 59)",
      "(line 665,col 9)-(line 665,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.assertClose(java.lang.String, RealMatrix, RealMatrix, double)",
    "snippet": "protected void assertClose(String msg, RealMatrix m, RealMatrix n,\n            double tolerance) {\n        Assert.assertTrue(msg, m.subtract(n).getNorm() \u003c tolerance);\n    }",
    "begin_line": 671,
    "end_line": 674,
    "comment": "/** \n * verifies that two matrices are close (1-norm) \n */\n",
    "child_ranges": [
      "(line 673,col 9)-(line 673,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.assertClose(java.lang.String, double[], double[], double)",
    "snippet": "protected void assertClose(String msg, double[] m, double[] n,\n            double tolerance) {\n        if (m.length !\u003d n.length) {\n            Assert.fail(\"vectors not same length\");\n        }\n        for (int i \u003d 0; i \u003c m.length; i++) {\n            Assert.assertEquals(msg + \" \" + i + \" elements differ\", m[i], n[i],\n                    tolerance);\n        }\n    }",
    "begin_line": 677,
    "end_line": 686,
    "comment": "/** \n * verifies that two vectors are close (sup norm) \n */\n",
    "child_ranges": [
      "(line 679,col 9)-(line 681,col 9)",
      "(line 682,col 9)-(line 685,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.SparseRealMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/SparseRealMatrixTest.java",
    "signature": "org.apache.commons.math.linear.SparseRealMatrixTest.createSparseMatrix(double[][])",
    "snippet": "private OpenMapRealMatrix createSparseMatrix(double[][] data) {\n        OpenMapRealMatrix matrix \u003d new OpenMapRealMatrix(data.length, data[0].length);\n        for (int row \u003d 0; row \u003c data.length; row++) {\n            for (int col \u003d 0; col \u003c data[row].length; col++) {\n                matrix.setEntry(row, col, data[row][col]);\n            }\n        }\n        return matrix;\n    }",
    "begin_line": 688,
    "end_line": 696,
    "comment": "",
    "child_ranges": [
      "(line 689,col 9)-(line 689,col 86)",
      "(line 690,col 9)-(line 694,col 9)",
      "(line 695,col 9)-(line 695,col 22)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testDimensions()",
    "snippet": "@Test\n    public void testDimensions() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e m2 \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2);\n        Assert.assertEquals(\"testData row dimension\",3,m.getRowDimension());\n        Assert.assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n        Assert.assertTrue(\"testData is square\",m.isSquare());\n        Assert.assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n        Assert.assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n        Assert.assertTrue(\"testData2 is not square\",!m2.isSquare());\n    }",
    "begin_line": 163,
    "end_line": 172,
    "comment": "/** \n * test dimensions \n */\n",
    "child_ranges": [
      "(line 164,col 9)-(line 164,col 80)",
      "(line 165,col 9)-(line 165,col 82)",
      "(line 166,col 9)-(line 166,col 76)",
      "(line 167,col 9)-(line 167,col 82)",
      "(line 168,col 9)-(line 168,col 61)",
      "(line 169,col 9)-(line 169,col 78)",
      "(line 170,col 9)-(line 170,col 84)",
      "(line 171,col 9)-(line 171,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testCopyFunctions()",
    "snippet": "@Test\n    public void testCopyFunctions() {\n        Random r \u003d new Random(66636328996002l);\n        BlockFieldMatrix\u003cFraction\u003e m1 \u003d createRandomMatrix(r, 47, 83);\n        BlockFieldMatrix\u003cFraction\u003e m2 \u003d new BlockFieldMatrix\u003cFraction\u003e(m1.getData());\n        Assert.assertEquals(m1, m2);\n        BlockFieldMatrix\u003cFraction\u003e m3 \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e m4 \u003d new BlockFieldMatrix\u003cFraction\u003e(m3.getData());\n        Assert.assertEquals(m3, m4);\n    }",
    "begin_line": 176,
    "end_line": 184,
    "comment": "/** \n * test copy functions \n */\n",
    "child_ranges": [
      "(line 177,col 9)-(line 177,col 47)",
      "(line 178,col 9)-(line 178,col 70)",
      "(line 179,col 9)-(line 179,col 85)",
      "(line 180,col 9)-(line 180,col 36)",
      "(line 181,col 9)-(line 181,col 81)",
      "(line 182,col 9)-(line 182,col 85)",
      "(line 183,col 9)-(line 183,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testAdd()",
    "snippet": "@Test\n    public void testAdd() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e mInv \u003d new BlockFieldMatrix\u003cFraction\u003e(testDataInv);\n        FieldMatrix\u003cFraction\u003e mPlusMInv \u003d m.add(mInv);\n        Fraction[][] sumEntries \u003d mPlusMInv.getData();\n        for (int row \u003d 0; row \u003c m.getRowDimension(); row++) {\n            for (int col \u003d 0; col \u003c m.getColumnDimension(); col++) {\n                Assert.assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);\n            }\n        }\n    }",
    "begin_line": 188,
    "end_line": 198,
    "comment": "/** \n * test add \n */\n",
    "child_ranges": [
      "(line 189,col 9)-(line 189,col 80)",
      "(line 190,col 9)-(line 190,col 86)",
      "(line 191,col 9)-(line 191,col 54)",
      "(line 192,col 9)-(line 192,col 54)",
      "(line 193,col 9)-(line 197,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testAddFail()",
    "snippet": "@Test\n    public void testAddFail() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e m2 \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2);\n        try {\n            m.add(m2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 202,
    "end_line": 211,
    "comment": "/** \n * test add failure \n */\n",
    "child_ranges": [
      "(line 203,col 9)-(line 203,col 80)",
      "(line 204,col 9)-(line 204,col 82)",
      "(line 205,col 9)-(line 210,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testPlusMinus()",
    "snippet": "@Test\n    public void testPlusMinus() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e m2 \u003d new BlockFieldMatrix\u003cFraction\u003e(testDataInv);\n        TestUtils.assertEquals(m.subtract(m2), m2.scalarMultiply(new Fraction(-1)).add(m));\n        try {\n            m.subtract(new BlockFieldMatrix\u003cFraction\u003e(testData2));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 215,
    "end_line": 225,
    "comment": "/** \n * test m-n \u003d m + -n \n */\n",
    "child_ranges": [
      "(line 216,col 9)-(line 216,col 80)",
      "(line 217,col 9)-(line 217,col 84)",
      "(line 218,col 9)-(line 218,col 91)",
      "(line 219,col 9)-(line 224,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testMultiply()",
    "snippet": "@Test\n    public void testMultiply() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e mInv \u003d new BlockFieldMatrix\u003cFraction\u003e(testDataInv);\n        BlockFieldMatrix\u003cFraction\u003e identity \u003d new BlockFieldMatrix\u003cFraction\u003e(id);\n        BlockFieldMatrix\u003cFraction\u003e m2 \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2);\n        TestUtils.assertEquals(m.multiply(mInv), identity);\n        TestUtils.assertEquals(mInv.multiply(m), identity);\n        TestUtils.assertEquals(m.multiply(identity), m);\n        TestUtils.assertEquals(identity.multiply(mInv), mInv);\n        TestUtils.assertEquals(m2.multiply(identity), m2);\n        try {\n            m.multiply(new BlockFieldMatrix\u003cFraction\u003e(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n    }",
    "begin_line": 229,
    "end_line": 245,
    "comment": "/** \n * test multiply \n */\n",
    "child_ranges": [
      "(line 230,col 9)-(line 230,col 80)",
      "(line 231,col 9)-(line 231,col 86)",
      "(line 232,col 9)-(line 232,col 81)",
      "(line 233,col 9)-(line 233,col 82)",
      "(line 234,col 9)-(line 234,col 59)",
      "(line 235,col 9)-(line 235,col 59)",
      "(line 236,col 9)-(line 236,col 56)",
      "(line 237,col 9)-(line 237,col 62)",
      "(line 238,col 9)-(line 238,col 58)",
      "(line 239,col 9)-(line 244,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSeveralBlocks()",
    "snippet": "@Test\n    public void testSeveralBlocks() {\n        FieldMatrix\u003cFraction\u003e m \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), 37, 41);\n        for (int i \u003d 0; i \u003c m.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c m.getColumnDimension(); ++j) {\n                m.setEntry(i, j, new Fraction(i * 11 + j, 11));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e mT \u003d m.transpose();\n        Assert.assertEquals(m.getRowDimension(), mT.getColumnDimension());\n        Assert.assertEquals(m.getColumnDimension(), mT.getRowDimension());\n        for (int i \u003d 0; i \u003c mT.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mT.getColumnDimension(); ++j) {\n                Assert.assertEquals(m.getEntry(j, i), mT.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e mPm \u003d m.add(m);\n        for (int i \u003d 0; i \u003c mPm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mPm.getColumnDimension(); ++j) {\n                Assert.assertEquals(m.getEntry(i, j).multiply(new Fraction(2)), mPm.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e mPmMm \u003d mPm.subtract(m);\n        for (int i \u003d 0; i \u003c mPmMm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mPmMm.getColumnDimension(); ++j) {\n                Assert.assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e mTm \u003d mT.multiply(m);\n        for (int i \u003d 0; i \u003c mTm.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mTm.getColumnDimension(); ++j) {\n                Fraction sum \u003d Fraction.ZERO;\n                for (int k \u003d 0; k \u003c mT.getColumnDimension(); ++k) {\n                    sum \u003d sum.add(new Fraction(k * 11 + i, 11).multiply(new Fraction(k * 11 + j, 11)));\n                }\n                Assert.assertEquals(sum, mTm.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e mmT \u003d m.multiply(mT);\n        for (int i \u003d 0; i \u003c mmT.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c mmT.getColumnDimension(); ++j) {\n                Fraction sum \u003d Fraction.ZERO;\n                for (int k \u003d 0; k \u003c m.getColumnDimension(); ++k) {\n                    sum \u003d sum.add(new Fraction(i * 11 + k, 11).multiply(new Fraction(j * 11 + k, 11)));\n                }\n                Assert.assertEquals(sum, mmT.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e sub1 \u003d m.getSubMatrix(2, 9, 5, 20);\n        for (int i \u003d 0; i \u003c sub1.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub1.getColumnDimension(); ++j) {\n                Assert.assertEquals(new Fraction((i + 2) * 11 + (j + 5), 11), sub1.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e sub2 \u003d m.getSubMatrix(10, 12, 3, 40);\n        for (int i \u003d 0; i \u003c sub2.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub2.getColumnDimension(); ++j) {\n                Assert.assertEquals(new Fraction((i + 10) * 11 + (j + 3), 11), sub2.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e sub3 \u003d m.getSubMatrix(30, 34, 0, 5);\n        for (int i \u003d 0; i \u003c sub3.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub3.getColumnDimension(); ++j) {\n                Assert.assertEquals(new Fraction((i + 30) * 11 + (j + 0), 11), sub3.getEntry(i, j));\n            }\n        }\n\n        FieldMatrix\u003cFraction\u003e sub4 \u003d m.getSubMatrix(30, 32, 32, 35);\n        for (int i \u003d 0; i \u003c sub4.getRowDimension(); ++i) {\n            for (int j \u003d 0; j \u003c sub4.getColumnDimension(); ++j) {\n                Assert.assertEquals(new Fraction((i + 30) * 11 + (j + 32), 11), sub4.getEntry(i, j));\n            }\n        }\n\n    }",
    "begin_line": 248,
    "end_line": 330,
    "comment": "",
    "child_ranges": [
      "(line 249,col 9)-(line 250,col 80)",
      "(line 251,col 9)-(line 255,col 9)",
      "(line 257,col 9)-(line 257,col 49)",
      "(line 258,col 9)-(line 258,col 74)",
      "(line 259,col 9)-(line 259,col 74)",
      "(line 260,col 9)-(line 264,col 9)",
      "(line 266,col 9)-(line 266,col 45)",
      "(line 267,col 9)-(line 271,col 9)",
      "(line 273,col 9)-(line 273,col 54)",
      "(line 274,col 9)-(line 278,col 9)",
      "(line 280,col 9)-(line 280,col 51)",
      "(line 281,col 9)-(line 289,col 9)",
      "(line 291,col 9)-(line 291,col 51)",
      "(line 292,col 9)-(line 300,col 9)",
      "(line 302,col 9)-(line 302,col 65)",
      "(line 303,col 9)-(line 307,col 9)",
      "(line 309,col 9)-(line 309,col 67)",
      "(line 310,col 9)-(line 314,col 9)",
      "(line 316,col 9)-(line 316,col 66)",
      "(line 317,col 9)-(line 321,col 9)",
      "(line 323,col 9)-(line 323,col 68)",
      "(line 324,col 9)-(line 328,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testMultiply2()",
    "snippet": "@Test\n    public void testMultiply2() {\n       FieldMatrix\u003cFraction\u003e m3 \u003d new BlockFieldMatrix\u003cFraction\u003e(d3);\n       FieldMatrix\u003cFraction\u003e m4 \u003d new BlockFieldMatrix\u003cFraction\u003e(d4);\n       FieldMatrix\u003cFraction\u003e m5 \u003d new BlockFieldMatrix\u003cFraction\u003e(d5);\n       TestUtils.assertEquals(m3.multiply(m4), m5);\n   }",
    "begin_line": 347,
    "end_line": 352,
    "comment": "",
    "child_ranges": [
      "(line 348,col 8)-(line 348,col 69)",
      "(line 349,col 8)-(line 349,col 69)",
      "(line 350,col 8)-(line 350,col 69)",
      "(line 351,col 8)-(line 351,col 51)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testTrace()",
    "snippet": "@Test\n    public void testTrace() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(id);\n        Assert.assertEquals(new Fraction(3),m.getTrace());\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2);\n        try {\n            m.getTrace();\n            Assert.fail(\"Expecting NonSquareMatrixException\");\n        } catch (NonSquareMatrixException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 356,
    "end_line": 366,
    "comment": "/** \n * test trace \n */\n",
    "child_ranges": [
      "(line 357,col 9)-(line 357,col 69)",
      "(line 358,col 9)-(line 358,col 58)",
      "(line 359,col 9)-(line 359,col 54)",
      "(line 360,col 9)-(line 365,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testScalarAdd()",
    "snippet": "@Test\n    public void testScalarAdd() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        TestUtils.assertEquals(new BlockFieldMatrix\u003cFraction\u003e(testDataPlus2),\n                               m.scalarAdd(new Fraction(2)));\n    }",
    "begin_line": 370,
    "end_line": 374,
    "comment": "/** \n * test scalarAdd \n */\n",
    "child_ranges": [
      "(line 371,col 9)-(line 371,col 75)",
      "(line 372,col 9)-(line 373,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testOperate()",
    "snippet": "@Test\n    public void testOperate() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(id);\n        TestUtils.assertEquals(testVector, m.operate(testVector));\n        TestUtils.assertEquals(testVector, m.operate(new ArrayFieldVector\u003cFraction\u003e(testVector)).getData());\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(bigSingular);\n        try {\n            m.operate(testVector);\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 378,
    "end_line": 389,
    "comment": "/** \n * test operate \n */\n",
    "child_ranges": [
      "(line 379,col 9)-(line 379,col 69)",
      "(line 380,col 9)-(line 380,col 66)",
      "(line 381,col 9)-(line 381,col 108)",
      "(line 382,col 9)-(line 382,col 56)",
      "(line 383,col 9)-(line 388,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testOperateLarge()",
    "snippet": "@Test\n    public void testOperateLarge() {\n        int p \u003d (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;\n        int q \u003d (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;\n        int r \u003d  BlockFieldMatrix.BLOCK_SIZE / 2;\n        Random random \u003d new Random(111007463902334l);\n        FieldMatrix\u003cFraction\u003e m1 \u003d createRandomMatrix(random, p, q);\n        FieldMatrix\u003cFraction\u003e m2 \u003d createRandomMatrix(random, q, r);\n        FieldMatrix\u003cFraction\u003e m1m2 \u003d m1.multiply(m2);\n        for (int i \u003d 0; i \u003c r; ++i) {\n            TestUtils.assertEquals(m1m2.getColumn(i), m1.operate(m2.getColumn(i)));\n        }\n    }",
    "begin_line": 392,
    "end_line": 403,
    "comment": "",
    "child_ranges": [
      "(line 393,col 9)-(line 393,col 56)",
      "(line 394,col 9)-(line 394,col 56)",
      "(line 395,col 9)-(line 395,col 49)",
      "(line 396,col 9)-(line 396,col 53)",
      "(line 397,col 9)-(line 397,col 68)",
      "(line 398,col 9)-(line 398,col 68)",
      "(line 399,col 9)-(line 399,col 53)",
      "(line 400,col 9)-(line 402,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testOperatePremultiplyLarge()",
    "snippet": "@Test\n    public void testOperatePremultiplyLarge() {\n        int p \u003d (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;\n        int q \u003d (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;\n        int r \u003d  BlockFieldMatrix.BLOCK_SIZE / 2;\n        Random random \u003d new Random(111007463902334l);\n        FieldMatrix\u003cFraction\u003e m1 \u003d createRandomMatrix(random, p, q);\n        FieldMatrix\u003cFraction\u003e m2 \u003d createRandomMatrix(random, q, r);\n        FieldMatrix\u003cFraction\u003e m1m2 \u003d m1.multiply(m2);\n        for (int i \u003d 0; i \u003c p; ++i) {\n            TestUtils.assertEquals(m1m2.getRow(i), m2.preMultiply(m1.getRow(i)));\n        }\n    }",
    "begin_line": 406,
    "end_line": 417,
    "comment": "",
    "child_ranges": [
      "(line 407,col 9)-(line 407,col 56)",
      "(line 408,col 9)-(line 408,col 56)",
      "(line 409,col 9)-(line 409,col 49)",
      "(line 410,col 9)-(line 410,col 53)",
      "(line 411,col 9)-(line 411,col 68)",
      "(line 412,col 9)-(line 412,col 68)",
      "(line 413,col 9)-(line 413,col 53)",
      "(line 414,col 9)-(line 416,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testMath209()",
    "snippet": "@Test\n    public void testMath209() {\n        FieldMatrix\u003cFraction\u003e a \u003d new BlockFieldMatrix\u003cFraction\u003e(new Fraction[][] {\n                { new Fraction(1), new Fraction(2) },\n                { new Fraction(3), new Fraction(4) },\n                { new Fraction(5), new Fraction(6) }\n        });\n        Fraction[] b \u003d a.operate(new Fraction[] { new Fraction(1), new Fraction(1) });\n        Assert.assertEquals(a.getRowDimension(), b.length);\n        Assert.assertEquals( new Fraction(3), b[0]);\n        Assert.assertEquals( new Fraction(7), b[1]);\n        Assert.assertEquals(new Fraction(11), b[2]);\n    }",
    "begin_line": 421,
    "end_line": 432,
    "comment": "/** \n * test issue MATH-209 \n */\n",
    "child_ranges": [
      "(line 422,col 9)-(line 426,col 11)",
      "(line 427,col 9)-(line 427,col 86)",
      "(line 428,col 9)-(line 428,col 59)",
      "(line 429,col 9)-(line 429,col 52)",
      "(line 430,col 9)-(line 430,col 52)",
      "(line 431,col 9)-(line 431,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testTranspose()",
    "snippet": "@Test\n    public void testTranspose() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        FieldMatrix\u003cFraction\u003e mIT \u003d new FieldLUDecompositionImpl\u003cFraction\u003e(m).getSolver().getInverse().transpose();\n        FieldMatrix\u003cFraction\u003e mTI \u003d new FieldLUDecompositionImpl\u003cFraction\u003e(m.transpose()).getSolver().getInverse();\n        TestUtils.assertEquals(mIT, mTI);\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2);\n        FieldMatrix\u003cFraction\u003e mt \u003d new BlockFieldMatrix\u003cFraction\u003e(testData2T);\n        TestUtils.assertEquals(mt, m.transpose());\n    }",
    "begin_line": 436,
    "end_line": 444,
    "comment": "/** \n * test transpose \n */\n",
    "child_ranges": [
      "(line 437,col 9)-(line 437,col 75)",
      "(line 438,col 9)-(line 438,col 115)",
      "(line 439,col 9)-(line 439,col 115)",
      "(line 440,col 9)-(line 440,col 41)",
      "(line 441,col 9)-(line 441,col 54)",
      "(line 442,col 9)-(line 442,col 78)",
      "(line 443,col 9)-(line 443,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testPremultiplyVector()",
    "snippet": "@Test\n    public void testPremultiplyVector() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        TestUtils.assertEquals(m.preMultiply(testVector), preMultTest);\n        TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector\u003cFraction\u003e(testVector).getData()),\n                               preMultTest);\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(bigSingular);\n        try {\n            m.preMultiply(testVector);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 448,
    "end_line": 460,
    "comment": "/** \n * test preMultiply by vector \n */\n",
    "child_ranges": [
      "(line 449,col 9)-(line 449,col 75)",
      "(line 450,col 9)-(line 450,col 71)",
      "(line 451,col 9)-(line 452,col 44)",
      "(line 453,col 9)-(line 453,col 56)",
      "(line 454,col 9)-(line 459,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testPremultiply()",
    "snippet": "@Test\n    public void testPremultiply() {\n        FieldMatrix\u003cFraction\u003e m3 \u003d new BlockFieldMatrix\u003cFraction\u003e(d3);\n        FieldMatrix\u003cFraction\u003e m4 \u003d new BlockFieldMatrix\u003cFraction\u003e(d4);\n        FieldMatrix\u003cFraction\u003e m5 \u003d new BlockFieldMatrix\u003cFraction\u003e(d5);\n        TestUtils.assertEquals(m4.preMultiply(m3), m5);\n\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e mInv \u003d new BlockFieldMatrix\u003cFraction\u003e(testDataInv);\n        BlockFieldMatrix\u003cFraction\u003e identity \u003d new BlockFieldMatrix\u003cFraction\u003e(id);\n        TestUtils.assertEquals(m.preMultiply(mInv), identity);\n        TestUtils.assertEquals(mInv.preMultiply(m), identity);\n        TestUtils.assertEquals(m.preMultiply(identity), m);\n        TestUtils.assertEquals(identity.preMultiply(mInv), mInv);\n        try {\n            m.preMultiply(new BlockFieldMatrix\u003cFraction\u003e(bigSingular));\n            Assert.fail(\"Expecting illegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 463,
    "end_line": 482,
    "comment": "",
    "child_ranges": [
      "(line 464,col 9)-(line 464,col 70)",
      "(line 465,col 9)-(line 465,col 70)",
      "(line 466,col 9)-(line 466,col 70)",
      "(line 467,col 9)-(line 467,col 55)",
      "(line 469,col 9)-(line 469,col 80)",
      "(line 470,col 9)-(line 470,col 86)",
      "(line 471,col 9)-(line 471,col 81)",
      "(line 472,col 9)-(line 472,col 62)",
      "(line 473,col 9)-(line 473,col 62)",
      "(line 474,col 9)-(line 474,col 59)",
      "(line 475,col 9)-(line 475,col 65)",
      "(line 476,col 9)-(line 481,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetVectors()",
    "snippet": "@Test\n    public void testGetVectors() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        TestUtils.assertEquals(m.getRow(0), testDataRow1);\n        TestUtils.assertEquals(m.getColumn(2), testDataCol3);\n        try {\n            m.getRow(10);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // ignored\n        }\n    }",
    "begin_line": 485,
    "end_line": 501,
    "comment": "",
    "child_ranges": [
      "(line 486,col 9)-(line 486,col 75)",
      "(line 487,col 9)-(line 487,col 58)",
      "(line 488,col 9)-(line 488,col 61)",
      "(line 489,col 9)-(line 494,col 9)",
      "(line 495,col 9)-(line 500,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetEntry()",
    "snippet": "@Test\n    public void testGetEntry() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        Assert.assertEquals(m.getEntry(0,1),new Fraction(2));\n        try {\n            m.getEntry(10, 4);\n            Assert.fail (\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 504,
    "end_line": 513,
    "comment": "",
    "child_ranges": [
      "(line 505,col 9)-(line 505,col 75)",
      "(line 506,col 9)-(line 506,col 61)",
      "(line 507,col 9)-(line 512,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testExamples()",
    "snippet": "@Test\n    public void testExamples() {\n        // Create a real matrix with two rows and three columns\n        Fraction[][] matrixData \u003d {\n                {new Fraction(1),new Fraction(2),new Fraction(3)},\n                {new Fraction(2),new Fraction(5),new Fraction(3)}\n        };\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(matrixData);\n        // One more with three rows, two columns\n        Fraction[][] matrixData2 \u003d {\n                {new Fraction(1),new Fraction(2)},\n                {new Fraction(2),new Fraction(5)},\n                {new Fraction(1), new Fraction(7)}\n        };\n        FieldMatrix\u003cFraction\u003e n \u003d new BlockFieldMatrix\u003cFraction\u003e(matrixData2);\n        // Now multiply m by n\n        FieldMatrix\u003cFraction\u003e p \u003d m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        // Invert p\n        FieldMatrix\u003cFraction\u003e pInverse \u003d new FieldLUDecompositionImpl\u003cFraction\u003e(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        // Solve example\n        Fraction[][] coefficientsData \u003d {\n                {new Fraction(2), new Fraction(3), new Fraction(-2)},\n                {new Fraction(-1), new Fraction(7), new Fraction(6)},\n                {new Fraction(4), new Fraction(-3), new Fraction(-5)}\n        };\n        FieldMatrix\u003cFraction\u003e coefficients \u003d new BlockFieldMatrix\u003cFraction\u003e(coefficientsData);\n        Fraction[] constants \u003d {new Fraction(1), new Fraction(-2), new Fraction(1)};\n        Fraction[] solution \u003d new FieldLUDecompositionImpl\u003cFraction\u003e(coefficients).getSolver().solve(constants);\n        Assert.assertEquals(new Fraction(2).multiply(solution[0]).\n                     add(new Fraction(3).multiply(solution[1])).\n                     subtract(new Fraction(2).multiply(solution[2])),\n                     constants[0]);\n        Assert.assertEquals(new Fraction(-1).multiply(solution[0]).\n                     add(new Fraction(7).multiply(solution[1])).\n                     add(new Fraction(6).multiply(solution[2])),\n                     constants[1]);\n        Assert.assertEquals(new Fraction(4).multiply(solution[0]).\n                     subtract(new Fraction(3).multiply(solution[1])).\n                     subtract(new Fraction(5).multiply(solution[2])),\n                     constants[2]);\n\n    }",
    "begin_line": 517,
    "end_line": 562,
    "comment": "/** \n * test examples in user guide \n */\n",
    "child_ranges": [
      "(line 519,col 9)-(line 522,col 10)",
      "(line 523,col 9)-(line 523,col 77)",
      "(line 525,col 9)-(line 529,col 10)",
      "(line 530,col 9)-(line 530,col 78)",
      "(line 532,col 9)-(line 532,col 48)",
      "(line 533,col 9)-(line 533,col 52)",
      "(line 534,col 9)-(line 534,col 55)",
      "(line 536,col 9)-(line 536,col 108)",
      "(line 537,col 9)-(line 537,col 59)",
      "(line 538,col 9)-(line 538,col 62)",
      "(line 541,col 9)-(line 545,col 10)",
      "(line 546,col 9)-(line 546,col 94)",
      "(line 547,col 9)-(line 547,col 84)",
      "(line 548,col 9)-(line 548,col 112)",
      "(line 549,col 9)-(line 552,col 35)",
      "(line 553,col 9)-(line 556,col 35)",
      "(line 557,col 9)-(line 560,col 35)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSubMatrix()",
    "snippet": "@Test\n    public void testGetSubMatrix() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0);\n        checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3);\n        checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);\n        checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });\n        checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });\n        checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });\n        checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkGetSubMatrix(m, null,  1, 0, 2, 4);\n        checkGetSubMatrix(m, null, -1, 1, 2, 2);\n        checkGetSubMatrix(m, null,  1, 0, 2, 2);\n        checkGetSubMatrix(m, null,  1, 0, 2, 4);\n        checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 });\n        checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 });\n    }",
    "begin_line": 566,
    "end_line": 583,
    "comment": "",
    "child_ranges": [
      "(line 567,col 9)-(line 567,col 78)",
      "(line 568,col 9)-(line 568,col 61)",
      "(line 569,col 9)-(line 569,col 61)",
      "(line 570,col 9)-(line 570,col 61)",
      "(line 571,col 9)-(line 571,col 87)",
      "(line 572,col 9)-(line 572,col 87)",
      "(line 573,col 9)-(line 573,col 90)",
      "(line 574,col 9)-(line 574,col 90)",
      "(line 575,col 9)-(line 575,col 87)",
      "(line 576,col 9)-(line 576,col 87)",
      "(line 577,col 9)-(line 577,col 48)",
      "(line 578,col 9)-(line 578,col 48)",
      "(line 579,col 9)-(line 579,col 48)",
      "(line 580,col 9)-(line 580,col 48)",
      "(line 581,col 9)-(line 581,col 69)",
      "(line 582,col 9)-(line 582,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.checkGetSubMatrix(FieldMatrix\u003cFraction\u003e, Fraction[][], int, int, int, int)",
    "snippet": "private void checkGetSubMatrix(FieldMatrix\u003cFraction\u003e m, Fraction[][] reference,\n                                   int startRow, int endRow, int startColumn, int endColumn) {\n        try {\n            FieldMatrix\u003cFraction\u003e sub \u003d m.getSubMatrix(startRow, endRow, startColumn, endColumn);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockFieldMatrix\u003cFraction\u003e(reference), sub);\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NotStrictlyPositiveException\"\n                     + \" or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NotStrictlyPositiveException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 585,
    "end_line": 612,
    "comment": "",
    "child_ranges": [
      "(line 587,col 9)-(line 611,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.checkGetSubMatrix(FieldMatrix\u003cFraction\u003e, Fraction[][], int[], int[])",
    "snippet": "private void checkGetSubMatrix(FieldMatrix\u003cFraction\u003e m, Fraction[][] reference,\n                                   int[] selectedRows, int[] selectedColumns) {\n        try {\n            FieldMatrix\u003cFraction\u003e sub \u003d m.getSubMatrix(selectedRows, selectedColumns);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockFieldMatrix\u003cFraction\u003e(reference), sub);\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NotStrictlyPositiveException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 614,
    "end_line": 640,
    "comment": "",
    "child_ranges": [
      "(line 616,col 9)-(line 639,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetMatrixLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        FieldMatrix\u003cFraction\u003e sub \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n - 4, n - 4).scalarAdd(new Fraction(1));\n\n        m.setSubMatrix(sub.getData(), 2, 2);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if ((i \u003c 2) || (i \u003e n - 3) || (j \u003c 2) || (j \u003e n - 3)) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));\n    }",
    "begin_line": 643,
    "end_line": 661,
    "comment": "",
    "child_ranges": [
      "(line 644,col 9)-(line 644,col 48)",
      "(line 645,col 9)-(line 646,col 78)",
      "(line 647,col 9)-(line 648,col 113)",
      "(line 650,col 9)-(line 650,col 44)",
      "(line 651,col 9)-(line 659,col 9)",
      "(line 660,col 9)-(line 660,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testCopySubMatrix()",
    "snippet": "@Test\n    public void testCopySubMatrix() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0);\n        checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3);\n        checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);\n        checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });\n        checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });\n        checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });\n        checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });\n\n        checkCopy(m, null,  1, 0, 2, 4);\n        checkCopy(m, null, -1, 1, 2, 2);\n        checkCopy(m, null,  1, 0, 2, 2);\n        checkCopy(m, null,  1, 0, 2, 4);\n        checkCopy(m, null, new int[] {}, new int[] { 0 });\n        checkCopy(m, null, new int[] { 0 }, new int[] { 4 });\n    }",
    "begin_line": 664,
    "end_line": 682,
    "comment": "",
    "child_ranges": [
      "(line 665,col 9)-(line 665,col 78)",
      "(line 666,col 9)-(line 666,col 53)",
      "(line 667,col 9)-(line 667,col 53)",
      "(line 668,col 9)-(line 668,col 53)",
      "(line 669,col 9)-(line 669,col 79)",
      "(line 670,col 9)-(line 670,col 79)",
      "(line 671,col 9)-(line 671,col 82)",
      "(line 672,col 9)-(line 672,col 82)",
      "(line 673,col 9)-(line 673,col 79)",
      "(line 674,col 9)-(line 674,col 79)",
      "(line 676,col 9)-(line 676,col 40)",
      "(line 677,col 9)-(line 677,col 40)",
      "(line 678,col 9)-(line 678,col 40)",
      "(line 679,col 9)-(line 679,col 40)",
      "(line 680,col 9)-(line 680,col 58)",
      "(line 681,col 9)-(line 681,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.checkCopy(FieldMatrix\u003cFraction\u003e, Fraction[][], int, int, int, int)",
    "snippet": "private void checkCopy(FieldMatrix\u003cFraction\u003e m, Fraction[][] reference,\n                           int startRow, int endRow, int startColumn, int endColumn) {\n        try {\n            Fraction[][] sub \u003d (reference \u003d\u003d null) ?\n                             new Fraction[1][1] :\n                             new Fraction[reference.length][reference[0].length];\n            m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockFieldMatrix\u003cFraction\u003e(reference), new BlockFieldMatrix\u003cFraction\u003e(sub));\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 684,
    "end_line": 709,
    "comment": "",
    "child_ranges": [
      "(line 686,col 9)-(line 708,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.checkCopy(FieldMatrix\u003cFraction\u003e, Fraction[][], int[], int[])",
    "snippet": "private void checkCopy(FieldMatrix\u003cFraction\u003e m, Fraction[][] reference,\n                           int[] selectedRows, int[] selectedColumns) {\n        try {\n            Fraction[][] sub \u003d (reference \u003d\u003d null) ?\n                    new Fraction[1][1] :\n                    new Fraction[reference.length][reference[0].length];\n            m.copySubMatrix(selectedRows, selectedColumns, sub);\n            if (reference !\u003d null) {\n                Assert.assertEquals(new BlockFieldMatrix\u003cFraction\u003e(reference), new BlockFieldMatrix\u003cFraction\u003e(sub));\n            } else {\n                Assert.fail(\"Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException\");\n            }\n        } catch (OutOfRangeException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NumberIsTooSmallException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        } catch (NoDataException e) {\n            if (reference !\u003d null) {\n                throw e;\n            }\n        }\n    }",
    "begin_line": 711,
    "end_line": 736,
    "comment": "",
    "child_ranges": [
      "(line 713,col 9)-(line 735,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetRowMatrix()",
    "snippet": "@Test\n    public void testGetRowMatrix() {\n        FieldMatrix\u003cFraction\u003e m     \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldMatrix\u003cFraction\u003e mRow0 \u003d new BlockFieldMatrix\u003cFraction\u003e(subRow0);\n        FieldMatrix\u003cFraction\u003e mRow3 \u003d new BlockFieldMatrix\u003cFraction\u003e(subRow3);\n        Assert.assertEquals(\"Row0\", mRow0, m.getRowMatrix(0));\n        Assert.assertEquals(\"Row3\", mRow3, m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 739,
    "end_line": 757,
    "comment": "",
    "child_ranges": [
      "(line 740,col 9)-(line 740,col 82)",
      "(line 741,col 9)-(line 741,col 78)",
      "(line 742,col 9)-(line 742,col 78)",
      "(line 743,col 9)-(line 743,col 62)",
      "(line 744,col 9)-(line 744,col 62)",
      "(line 745,col 9)-(line 750,col 9)",
      "(line 751,col 9)-(line 756,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetRowMatrix()",
    "snippet": "@Test\n    public void testSetRowMatrix() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldMatrix\u003cFraction\u003e mRow3 \u003d new BlockFieldMatrix\u003cFraction\u003e(subRow3);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowMatrix(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowMatrix(0));\n        try {\n            m.setRowMatrix(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 760,
    "end_line": 778,
    "comment": "",
    "child_ranges": [
      "(line 761,col 9)-(line 761,col 78)",
      "(line 762,col 9)-(line 762,col 78)",
      "(line 763,col 9)-(line 763,col 55)",
      "(line 764,col 9)-(line 764,col 33)",
      "(line 765,col 9)-(line 765,col 54)",
      "(line 766,col 9)-(line 771,col 9)",
      "(line 772,col 9)-(line 777,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetRowMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetRowMatrixLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        FieldMatrix\u003cFraction\u003e sub \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), 1, n).scalarAdd(new Fraction(1));\n\n        m.setRowMatrix(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getRowMatrix(2));\n\n    }",
    "begin_line": 781,
    "end_line": 800,
    "comment": "",
    "child_ranges": [
      "(line 782,col 9)-(line 782,col 48)",
      "(line 783,col 9)-(line 784,col 78)",
      "(line 785,col 9)-(line 786,col 105)",
      "(line 788,col 9)-(line 788,col 31)",
      "(line 789,col 9)-(line 797,col 9)",
      "(line 798,col 9)-(line 798,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetColumnMatrix()",
    "snippet": "@Test\n    public void testGetColumnMatrix() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldMatrix\u003cFraction\u003e mColumn1 \u003d new BlockFieldMatrix\u003cFraction\u003e(subColumn1);\n        FieldMatrix\u003cFraction\u003e mColumn3 \u003d new BlockFieldMatrix\u003cFraction\u003e(subColumn3);\n        Assert.assertEquals(mColumn1, m.getColumnMatrix(1));\n        Assert.assertEquals(mColumn3, m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 803,
    "end_line": 821,
    "comment": "",
    "child_ranges": [
      "(line 804,col 9)-(line 804,col 78)",
      "(line 805,col 9)-(line 805,col 84)",
      "(line 806,col 9)-(line 806,col 84)",
      "(line 807,col 9)-(line 807,col 60)",
      "(line 808,col 9)-(line 808,col 60)",
      "(line 809,col 9)-(line 814,col 9)",
      "(line 815,col 9)-(line 820,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetColumnMatrix()",
    "snippet": "@Test\n    public void testSetColumnMatrix() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldMatrix\u003cFraction\u003e mColumn3 \u003d new BlockFieldMatrix\u003cFraction\u003e(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));\n        m.setColumnMatrix(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnMatrix(1));\n        try {\n            m.setColumnMatrix(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnMatrix(0, m);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 824,
    "end_line": 842,
    "comment": "",
    "child_ranges": [
      "(line 825,col 9)-(line 825,col 78)",
      "(line 826,col 9)-(line 826,col 84)",
      "(line 827,col 9)-(line 827,col 61)",
      "(line 828,col 9)-(line 828,col 39)",
      "(line 829,col 9)-(line 829,col 60)",
      "(line 830,col 9)-(line 835,col 9)",
      "(line 836,col 9)-(line 841,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetColumnMatrixLarge()",
    "snippet": "@Test\n    public void testGetSetColumnMatrixLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        FieldMatrix\u003cFraction\u003e sub \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, 1).scalarAdd(new Fraction(1));\n\n        m.setColumnMatrix(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getColumnMatrix(2));\n\n    }",
    "begin_line": 845,
    "end_line": 864,
    "comment": "",
    "child_ranges": [
      "(line 846,col 9)-(line 846,col 48)",
      "(line 847,col 9)-(line 848,col 78)",
      "(line 849,col 9)-(line 850,col 105)",
      "(line 852,col 9)-(line 852,col 34)",
      "(line 853,col 9)-(line 861,col 9)",
      "(line 862,col 9)-(line 862,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetRowVector()",
    "snippet": "@Test\n    public void testGetRowVector() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldVector\u003cFraction\u003e mRow0 \u003d new ArrayFieldVector\u003cFraction\u003e(subRow0[0]);\n        FieldVector\u003cFraction\u003e mRow3 \u003d new ArrayFieldVector\u003cFraction\u003e(subRow3[0]);\n        Assert.assertEquals(mRow0, m.getRowVector(0));\n        Assert.assertEquals(mRow3, m.getRowVector(3));\n        try {\n            m.getRowVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRowVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 867,
    "end_line": 885,
    "comment": "",
    "child_ranges": [
      "(line 868,col 9)-(line 868,col 78)",
      "(line 869,col 9)-(line 869,col 81)",
      "(line 870,col 9)-(line 870,col 81)",
      "(line 871,col 9)-(line 871,col 54)",
      "(line 872,col 9)-(line 872,col 54)",
      "(line 873,col 9)-(line 878,col 9)",
      "(line 879,col 9)-(line 884,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetRowVector()",
    "snippet": "@Test\n    public void testSetRowVector() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldVector\u003cFraction\u003e mRow3 \u003d new ArrayFieldVector\u003cFraction\u003e(subRow3[0]);\n        Assert.assertNotSame(mRow3, m.getRowMatrix(0));\n        m.setRowVector(0, mRow3);\n        Assert.assertEquals(mRow3, m.getRowVector(0));\n        try {\n            m.setRowVector(-1, mRow3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRowVector(0, new ArrayFieldVector\u003cFraction\u003e(FractionField.getInstance(), 5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 888,
    "end_line": 906,
    "comment": "",
    "child_ranges": [
      "(line 889,col 9)-(line 889,col 78)",
      "(line 890,col 9)-(line 890,col 81)",
      "(line 891,col 9)-(line 891,col 55)",
      "(line 892,col 9)-(line 892,col 33)",
      "(line 893,col 9)-(line 893,col 54)",
      "(line 894,col 9)-(line 899,col 9)",
      "(line 900,col 9)-(line 905,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetRowVectorLarge()",
    "snippet": "@Test\n    public void testGetSetRowVectorLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        FieldVector\u003cFraction\u003e sub \u003d new ArrayFieldVector\u003cFraction\u003e(n, new Fraction(1));\n\n        m.setRowVector(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getRowVector(2));\n\n    }",
    "begin_line": 909,
    "end_line": 926,
    "comment": "",
    "child_ranges": [
      "(line 910,col 9)-(line 910,col 48)",
      "(line 911,col 9)-(line 911,col 100)",
      "(line 912,col 9)-(line 912,col 87)",
      "(line 914,col 9)-(line 914,col 31)",
      "(line 915,col 9)-(line 923,col 9)",
      "(line 924,col 9)-(line 924,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetColumnVector()",
    "snippet": "@Test\n    public void testGetColumnVector() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldVector\u003cFraction\u003e mColumn1 \u003d columnToVector(subColumn1);\n        FieldVector\u003cFraction\u003e mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertEquals(mColumn1, m.getColumnVector(1));\n        Assert.assertEquals(mColumn3, m.getColumnVector(3));\n        try {\n            m.getColumnVector(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumnVector(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 929,
    "end_line": 947,
    "comment": "",
    "child_ranges": [
      "(line 930,col 9)-(line 930,col 78)",
      "(line 931,col 9)-(line 931,col 68)",
      "(line 932,col 9)-(line 932,col 68)",
      "(line 933,col 9)-(line 933,col 60)",
      "(line 934,col 9)-(line 934,col 60)",
      "(line 935,col 9)-(line 940,col 9)",
      "(line 941,col 9)-(line 946,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetColumnVector()",
    "snippet": "@Test\n    public void testSetColumnVector() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        FieldVector\u003cFraction\u003e mColumn3 \u003d columnToVector(subColumn3);\n        Assert.assertNotSame(mColumn3, m.getColumnVector(1));\n        m.setColumnVector(1, mColumn3);\n        Assert.assertEquals(mColumn3, m.getColumnVector(1));\n        try {\n            m.setColumnVector(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumnVector(0, new ArrayFieldVector\u003cFraction\u003e(FractionField.getInstance(), 5));\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 950,
    "end_line": 968,
    "comment": "",
    "child_ranges": [
      "(line 951,col 9)-(line 951,col 78)",
      "(line 952,col 9)-(line 952,col 68)",
      "(line 953,col 9)-(line 953,col 61)",
      "(line 954,col 9)-(line 954,col 39)",
      "(line 955,col 9)-(line 955,col 60)",
      "(line 956,col 9)-(line 961,col 9)",
      "(line 962,col 9)-(line 967,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetColumnVectorLarge()",
    "snippet": "@Test\n    public void testGetSetColumnVectorLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        FieldVector\u003cFraction\u003e sub \u003d new ArrayFieldVector\u003cFraction\u003e(n, new Fraction(1));\n\n        m.setColumnVector(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        Assert.assertEquals(sub, m.getColumnVector(2));\n\n    }",
    "begin_line": 971,
    "end_line": 988,
    "comment": "",
    "child_ranges": [
      "(line 972,col 9)-(line 972,col 48)",
      "(line 973,col 9)-(line 973,col 100)",
      "(line 974,col 9)-(line 974,col 87)",
      "(line 976,col 9)-(line 976,col 34)",
      "(line 977,col 9)-(line 985,col 9)",
      "(line 986,col 9)-(line 986,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.columnToVector(Fraction[][])",
    "snippet": "private FieldVector\u003cFraction\u003e columnToVector(Fraction[][] column) {\n        Fraction[] data \u003d new Fraction[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return new ArrayFieldVector\u003cFraction\u003e(data, false);\n    }",
    "begin_line": 990,
    "end_line": 996,
    "comment": "",
    "child_ranges": [
      "(line 991,col 9)-(line 991,col 54)",
      "(line 992,col 9)-(line 994,col 9)",
      "(line 995,col 9)-(line 995,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetRow()",
    "snippet": "@Test\n    public void testGetRow() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        checkArrays(subRow0[0], m.getRow(0));\n        checkArrays(subRow3[0], m.getRow(3));\n        try {\n            m.getRow(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getRow(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 999,
    "end_line": 1015,
    "comment": "",
    "child_ranges": [
      "(line 1000,col 9)-(line 1000,col 78)",
      "(line 1001,col 9)-(line 1001,col 45)",
      "(line 1002,col 9)-(line 1002,col 45)",
      "(line 1003,col 9)-(line 1008,col 9)",
      "(line 1009,col 9)-(line 1014,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetRow()",
    "snippet": "@Test\n    public void testSetRow() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        Assert.assertTrue(subRow3[0][0] !\u003d m.getRow(0)[0]);\n        m.setRow(0, subRow3[0]);\n        checkArrays(subRow3[0], m.getRow(0));\n        try {\n            m.setRow(-1, subRow3[0]);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setRow(0, new Fraction[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 1018,
    "end_line": 1035,
    "comment": "",
    "child_ranges": [
      "(line 1019,col 9)-(line 1019,col 78)",
      "(line 1020,col 9)-(line 1020,col 59)",
      "(line 1021,col 9)-(line 1021,col 32)",
      "(line 1022,col 9)-(line 1022,col 45)",
      "(line 1023,col 9)-(line 1028,col 9)",
      "(line 1029,col 9)-(line 1034,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetRowLarge()",
    "snippet": "@Test\n    public void testGetSetRowLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        Fraction[] sub \u003d new Fraction[n];\n        Arrays.fill(sub, new Fraction(1));\n\n        m.setRow(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (i !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        checkArrays(sub, m.getRow(2));\n\n    }",
    "begin_line": 1038,
    "end_line": 1056,
    "comment": "",
    "child_ranges": [
      "(line 1039,col 9)-(line 1039,col 48)",
      "(line 1040,col 9)-(line 1040,col 100)",
      "(line 1041,col 9)-(line 1041,col 41)",
      "(line 1042,col 9)-(line 1042,col 42)",
      "(line 1044,col 9)-(line 1044,col 25)",
      "(line 1045,col 9)-(line 1053,col 9)",
      "(line 1054,col 9)-(line 1054,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetColumn()",
    "snippet": "@Test\n    public void testGetColumn() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        Fraction[] mColumn1 \u003d columnToArray(subColumn1);\n        Fraction[] mColumn3 \u003d columnToArray(subColumn3);\n        checkArrays(mColumn1, m.getColumn(1));\n        checkArrays(mColumn3, m.getColumn(3));\n        try {\n            m.getColumn(-1);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.getColumn(4);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n    }",
    "begin_line": 1059,
    "end_line": 1077,
    "comment": "",
    "child_ranges": [
      "(line 1060,col 9)-(line 1060,col 78)",
      "(line 1061,col 9)-(line 1061,col 56)",
      "(line 1062,col 9)-(line 1062,col 56)",
      "(line 1063,col 9)-(line 1063,col 46)",
      "(line 1064,col 9)-(line 1064,col 46)",
      "(line 1065,col 9)-(line 1070,col 9)",
      "(line 1071,col 9)-(line 1076,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetColumn()",
    "snippet": "@Test\n    public void testSetColumn() {\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(subTestData);\n        Fraction[] mColumn3 \u003d columnToArray(subColumn3);\n        Assert.assertTrue(mColumn3[0] !\u003d m.getColumn(1)[0]);\n        m.setColumn(1, mColumn3);\n        checkArrays(mColumn3, m.getColumn(1));\n        try {\n            m.setColumn(-1, mColumn3);\n            Assert.fail(\"Expecting OutOfRangeException\");\n        } catch (OutOfRangeException ex) {\n            // expected\n        }\n        try {\n            m.setColumn(0, new Fraction[5]);\n            Assert.fail(\"Expecting MatrixDimensionMismatchException\");\n        } catch (MatrixDimensionMismatchException ex) {\n            // expected\n        }\n    }",
    "begin_line": 1080,
    "end_line": 1098,
    "comment": "",
    "child_ranges": [
      "(line 1081,col 9)-(line 1081,col 78)",
      "(line 1082,col 9)-(line 1082,col 56)",
      "(line 1083,col 9)-(line 1083,col 60)",
      "(line 1084,col 9)-(line 1084,col 33)",
      "(line 1085,col 9)-(line 1085,col 46)",
      "(line 1086,col 9)-(line 1091,col 9)",
      "(line 1092,col 9)-(line 1097,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testGetSetColumnLarge()",
    "snippet": "@Test\n    public void testGetSetColumnLarge() {\n        int n \u003d 3 * BlockFieldMatrix.BLOCK_SIZE;\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), n, n);\n        Fraction[] sub \u003d new Fraction[n];\n        Arrays.fill(sub, new Fraction(1));\n\n        m.setColumn(2, sub);\n        for (int i \u003d 0; i \u003c n; ++i) {\n            for (int j \u003d 0; j \u003c n; ++j) {\n                if (j !\u003d 2) {\n                    Assert.assertEquals(new Fraction(0), m.getEntry(i, j));\n                } else {\n                    Assert.assertEquals(new Fraction(1), m.getEntry(i, j));\n                }\n            }\n        }\n        checkArrays(sub, m.getColumn(2));\n\n    }",
    "begin_line": 1101,
    "end_line": 1119,
    "comment": "",
    "child_ranges": [
      "(line 1102,col 9)-(line 1102,col 48)",
      "(line 1103,col 9)-(line 1103,col 100)",
      "(line 1104,col 9)-(line 1104,col 41)",
      "(line 1105,col 9)-(line 1105,col 42)",
      "(line 1107,col 9)-(line 1107,col 28)",
      "(line 1108,col 9)-(line 1116,col 9)",
      "(line 1117,col 9)-(line 1117,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.columnToArray(Fraction[][])",
    "snippet": "private Fraction[] columnToArray(Fraction[][] column) {\n        Fraction[] data \u003d new Fraction[column.length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            data[i] \u003d column[i][0];\n        }\n        return data;\n    }",
    "begin_line": 1121,
    "end_line": 1127,
    "comment": "",
    "child_ranges": [
      "(line 1122,col 9)-(line 1122,col 54)",
      "(line 1123,col 9)-(line 1125,col 9)",
      "(line 1126,col 9)-(line 1126,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.checkArrays(Fraction[], Fraction[])",
    "snippet": "private void checkArrays(Fraction[] expected, Fraction[] actual) {\n        Assert.assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c expected.length; ++i) {\n            Assert.assertEquals(expected[i], actual[i]);\n        }\n    }",
    "begin_line": 1129,
    "end_line": 1134,
    "comment": "",
    "child_ranges": [
      "(line 1130,col 9)-(line 1130,col 60)",
      "(line 1131,col 9)-(line 1133,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testEqualsAndHashCode()",
    "snippet": "@Test\n    public void testEqualsAndHashCode() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        BlockFieldMatrix\u003cFraction\u003e m1 \u003d (BlockFieldMatrix\u003cFraction\u003e) m.copy();\n        BlockFieldMatrix\u003cFraction\u003e mt \u003d (BlockFieldMatrix\u003cFraction\u003e) m.transpose();\n        Assert.assertTrue(m.hashCode() !\u003d mt.hashCode());\n        Assert.assertEquals(m.hashCode(), m1.hashCode());\n        Assert.assertEquals(m, m);\n        Assert.assertEquals(m, m1);\n        Assert.assertFalse(m.equals(null));\n        Assert.assertFalse(m.equals(mt));\n        Assert.assertFalse(m.equals(new BlockFieldMatrix\u003cFraction\u003e(bigSingular)));\n    }",
    "begin_line": 1137,
    "end_line": 1148,
    "comment": "",
    "child_ranges": [
      "(line 1138,col 9)-(line 1138,col 80)",
      "(line 1139,col 9)-(line 1139,col 78)",
      "(line 1140,col 9)-(line 1140,col 83)",
      "(line 1141,col 9)-(line 1141,col 57)",
      "(line 1142,col 9)-(line 1142,col 57)",
      "(line 1143,col 9)-(line 1143,col 34)",
      "(line 1144,col 9)-(line 1144,col 35)",
      "(line 1145,col 9)-(line 1145,col 43)",
      "(line 1146,col 9)-(line 1146,col 41)",
      "(line 1147,col 9)-(line 1147,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        Assert.assertEquals(\"BlockFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}\", m.toString());\n    }",
    "begin_line": 1151,
    "end_line": 1154,
    "comment": "",
    "child_ranges": [
      "(line 1152,col 9)-(line 1152,col 80)",
      "(line 1153,col 9)-(line 1153,col 87)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSetSubMatrix()",
    "snippet": "@Test\n    public void testSetSubMatrix() throws Exception {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        m.setSubMatrix(detData2,1,1);\n        FieldMatrix\u003cFraction\u003e expected \u003d new BlockFieldMatrix\u003cFraction\u003e\n            (new Fraction[][] {{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(detData2,0,0);\n        expected \u003d new BlockFieldMatrix\u003cFraction\u003e\n            (new Fraction[][] {{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});\n        Assert.assertEquals(expected, m);\n\n        m.setSubMatrix(testDataPlus2,0,0);\n        expected \u003d new BlockFieldMatrix\u003cFraction\u003e\n            (new Fraction[][] {{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});\n        Assert.assertEquals(expected, m);\n\n        // javadoc example\n        BlockFieldMatrix\u003cFraction\u003e matrix \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(new Fraction[][] {\n                    {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4)},\n                    {new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8)},\n                    {new Fraction(9), new Fraction(0), new Fraction(1) , new Fraction(2)}\n            });\n        matrix.setSubMatrix(new Fraction[][] {\n                {new Fraction(3), new Fraction(4)},\n                {new Fraction(5), new Fraction(6)}\n        }, 1, 1);\n        expected \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(new Fraction[][] {\n                    {new Fraction(1), new Fraction(2), new Fraction(3),new Fraction(4)},\n                    {new Fraction(5), new Fraction(3), new Fraction(4), new Fraction(8)},\n                    {new Fraction(9), new Fraction(5) ,new Fraction(6), new Fraction(2)}\n            });\n        Assert.assertEquals(expected, matrix);\n\n        // dimension overflow\n        try {\n            m.setSubMatrix(testData,1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        // dimension underflow\n        try {\n            m.setSubMatrix(testData,-1,1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n        try {\n            m.setSubMatrix(testData,1,-1);\n            Assert.fail(\"expecting OutOfRangeException\");\n        } catch (OutOfRangeException e) {\n            // expected\n        }\n\n        // null\n        try {\n            m.setSubMatrix(null,1,1);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException e) {\n            // expected\n        }\n\n        // ragged\n        try {\n            m.setSubMatrix(new Fraction[][] {{new Fraction(1)}, {new Fraction(2), new Fraction(3)}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n\n        // empty\n        try {\n            m.setSubMatrix(new Fraction[][] {{}}, 0, 0);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n            // expected\n        }\n    }",
    "begin_line": 1157,
    "end_line": 1237,
    "comment": "",
    "child_ranges": [
      "(line 1158,col 9)-(line 1158,col 80)",
      "(line 1159,col 9)-(line 1159,col 37)",
      "(line 1160,col 9)-(line 1161,col 183)",
      "(line 1162,col 9)-(line 1162,col 41)",
      "(line 1164,col 9)-(line 1164,col 37)",
      "(line 1165,col 9)-(line 1166,col 183)",
      "(line 1167,col 9)-(line 1167,col 41)",
      "(line 1169,col 9)-(line 1169,col 42)",
      "(line 1170,col 9)-(line 1171,col 184)",
      "(line 1172,col 9)-(line 1172,col 41)",
      "(line 1175,col 9)-(line 1180,col 15)",
      "(line 1181,col 9)-(line 1184,col 17)",
      "(line 1185,col 9)-(line 1190,col 15)",
      "(line 1191,col 9)-(line 1191,col 46)",
      "(line 1194,col 9)-(line 1199,col 9)",
      "(line 1201,col 9)-(line 1206,col 9)",
      "(line 1207,col 9)-(line 1212,col 9)",
      "(line 1215,col 9)-(line 1220,col 9)",
      "(line 1223,col 9)-(line 1228,col 9)",
      "(line 1231,col 9)-(line 1236,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testWalk()",
    "snippet": "@Test\n    public void testWalk() throws MathUserException {\n        int rows    \u003d 150;\n        int columns \u003d 75;\n\n        FieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInRowOrder(new SetVisitor());\n        GetVisitor getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(0, j));\n            Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));\n        }\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInColumnOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(0, j));\n            Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));\n        }\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(0, j));\n            Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));\n        }\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor());\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor);\n        Assert.assertEquals(rows * columns, getVisitor.getCount());\n\n        m \u003d new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);\n        getVisitor \u003d new GetVisitor();\n        m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);\n        Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));\n            Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));\n        }\n        for (int j \u003d 0; j \u003c columns; ++j) {\n            Assert.assertEquals(new Fraction(0), m.getEntry(0, j));\n            Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));\n        }\n\n    }",
    "begin_line": 1240,
    "end_line": 1324,
    "comment": "",
    "child_ranges": [
      "(line 1241,col 9)-(line 1241,col 26)",
      "(line 1242,col 9)-(line 1242,col 25)",
      "(line 1244,col 9)-(line 1244,col 109)",
      "(line 1245,col 9)-(line 1245,col 43)",
      "(line 1246,col 9)-(line 1246,col 49)",
      "(line 1247,col 9)-(line 1247,col 43)",
      "(line 1248,col 9)-(line 1248,col 67)",
      "(line 1250,col 9)-(line 1250,col 87)",
      "(line 1251,col 9)-(line 1251,col 72)",
      "(line 1252,col 9)-(line 1252,col 38)",
      "(line 1253,col 9)-(line 1253,col 72)",
      "(line 1254,col 9)-(line 1254,col 79)",
      "(line 1255,col 9)-(line 1258,col 9)",
      "(line 1259,col 9)-(line 1262,col 9)",
      "(line 1264,col 9)-(line 1264,col 87)",
      "(line 1265,col 9)-(line 1265,col 46)",
      "(line 1266,col 9)-(line 1266,col 38)",
      "(line 1267,col 9)-(line 1267,col 43)",
      "(line 1268,col 9)-(line 1268,col 67)",
      "(line 1270,col 9)-(line 1270,col 87)",
      "(line 1271,col 9)-(line 1271,col 75)",
      "(line 1272,col 9)-(line 1272,col 38)",
      "(line 1273,col 9)-(line 1273,col 72)",
      "(line 1274,col 9)-(line 1274,col 79)",
      "(line 1275,col 9)-(line 1278,col 9)",
      "(line 1279,col 9)-(line 1282,col 9)",
      "(line 1284,col 9)-(line 1284,col 87)",
      "(line 1285,col 9)-(line 1285,col 49)",
      "(line 1286,col 9)-(line 1286,col 38)",
      "(line 1287,col 9)-(line 1287,col 37)",
      "(line 1288,col 9)-(line 1288,col 67)",
      "(line 1290,col 9)-(line 1290,col 87)",
      "(line 1291,col 9)-(line 1291,col 78)",
      "(line 1292,col 9)-(line 1292,col 38)",
      "(line 1293,col 9)-(line 1293,col 66)",
      "(line 1294,col 9)-(line 1294,col 79)",
      "(line 1295,col 9)-(line 1298,col 9)",
      "(line 1299,col 9)-(line 1302,col 9)",
      "(line 1304,col 9)-(line 1304,col 87)",
      "(line 1305,col 9)-(line 1305,col 49)",
      "(line 1306,col 9)-(line 1306,col 38)",
      "(line 1307,col 9)-(line 1307,col 40)",
      "(line 1308,col 9)-(line 1308,col 67)",
      "(line 1310,col 9)-(line 1310,col 87)",
      "(line 1311,col 9)-(line 1311,col 78)",
      "(line 1312,col 9)-(line 1312,col 38)",
      "(line 1313,col 9)-(line 1313,col 69)",
      "(line 1314,col 9)-(line 1314,col 79)",
      "(line 1315,col 9)-(line 1318,col 9)",
      "(line 1319,col 9)-(line 1322,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.testSerial()",
    "snippet": "@Test\n    public void testSerial()  {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d new BlockFieldMatrix\u003cFraction\u003e(testData);\n        Assert.assertEquals(m,TestUtils.serializeAndRecover(m));\n    }",
    "begin_line": 1327,
    "end_line": 1330,
    "comment": "",
    "child_ranges": [
      "(line 1328,col 9)-(line 1328,col 80)",
      "(line 1329,col 9)-(line 1329,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.SetVisitor()",
    "snippet": "public SetVisitor() {\n            super(Fraction.ZERO);\n        }",
    "begin_line": 1333,
    "end_line": 1335,
    "comment": "",
    "child_ranges": [
      "(line 1334,col 13)-(line 1334,col 33)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.visit(int, int, Fraction)",
    "snippet": "@Override\n        public Fraction visit(int i, int j, Fraction value) {\n            return new Fraction(i * 11 + j, 11);\n        }",
    "begin_line": 1337,
    "end_line": 1339,
    "comment": "",
    "child_ranges": [
      "(line 1338,col 13)-(line 1338,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.GetVisitor()",
    "snippet": "public GetVisitor() {\n            super(Fraction.ZERO);\n            count \u003d 0;\n        }",
    "begin_line": 1344,
    "end_line": 1347,
    "comment": "",
    "child_ranges": [
      "(line 1345,col 13)-(line 1345,col 33)",
      "(line 1346,col 13)-(line 1346,col 22)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.visit(int, int, Fraction)",
    "snippet": "@Override\n        public void visit(int i, int j, Fraction value) {\n            ++count;\n            Assert.assertEquals(new Fraction(i * 11 + j, 11), value);\n        }",
    "begin_line": 1349,
    "end_line": 1352,
    "comment": "",
    "child_ranges": [
      "(line 1350,col 13)-(line 1350,col 20)",
      "(line 1351,col 13)-(line 1351,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.getCount()",
    "snippet": "public int getCount() {\n            return count;\n        }",
    "begin_line": 1353,
    "end_line": 1355,
    "comment": "",
    "child_ranges": [
      "(line 1354,col 13)-(line 1354,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.math.linear.BlockFieldMatrixTest",
    "child_classes": [],
    "src_path": "org/apache/commons/math/linear/BlockFieldMatrixTest.java",
    "signature": "org.apache.commons.math.linear.BlockFieldMatrixTest.createRandomMatrix(java.util.Random, int, int)",
    "snippet": "private BlockFieldMatrix\u003cFraction\u003e createRandomMatrix(Random r, int rows, int columns) {\n        BlockFieldMatrix\u003cFraction\u003e m \u003d\n            new BlockFieldMatrix\u003cFraction\u003e(FractionField.getInstance(), rows, columns);\n        for (int i \u003d 0; i \u003c rows; ++i) {\n            for (int j \u003d 0; j \u003c columns; ++j) {\n                int p \u003d r.nextInt(20) - 10;\n                int q \u003d r.nextInt(20) - 10;\n                if (q \u003d\u003d 0) {\n                    q \u003d 1;\n                }\n                m.setEntry(i, j, new Fraction(p, q));\n            }\n        }\n        return m;\n    }",
    "begin_line": 1358,
    "end_line": 1372,
    "comment": "",
    "child_ranges": [
      "(line 1359,col 9)-(line 1360,col 87)",
      "(line 1361,col 9)-(line 1370,col 9)",
      "(line 1371,col 9)-(line 1371,col 17)"
    ]
  }
]