[
  {
    "name": "ArgumentMatcher.matches#72",
    "is_bug": true,
    "src_path": "org/mockito/ArgumentMatcher.java",
    "class_name": "org.mockito.ArgumentMatcher",
    "signature": "org.mockito.ArgumentMatcher.matches(java.lang.Object)",
    "snippet": "public abstract boolean matches(Object argument);",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * Returns whether this matcher accepts the given argument. \u003cp\u003e The method should \u003cb\u003enever\u003c/b\u003e assert if the argument doesn\u0027t match. It should only return false.\n * @param argument the argument\n * @return whether this matcher accepts the given argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcher.describeTo#86",
    "is_bug": true,
    "src_path": "org/mockito/ArgumentMatcher.java",
    "class_name": "org.mockito.ArgumentMatcher",
    "signature": "org.mockito.ArgumentMatcher.describeTo(Description)",
    "snippet": "public void describeTo(Description description) {\n        String className \u003d getClass().getSimpleName();\n        description.appendText(Decamelizer.decamelizeMatcher(className));\n    }",
    "begin_line": 86,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyBoolean#113",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyBoolean()",
    "snippet": "public static boolean anyBoolean() {\r\n        return reportMatcher(Any.ANY).returnFalse();\r\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "/** \n * any boolean, Boolean or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyByte#124",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyByte()",
    "snippet": "public static byte anyByte() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 124,
    "end_line": 126,
    "comment": "/** \n * any byte, Byte or null \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyChar#135",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyChar()",
    "snippet": "public static char anyChar() {\r\n        return reportMatcher(Any.ANY).returnChar();\r\n    }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * any char, Character or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyInt#146",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyInt()",
    "snippet": "public static int anyInt() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * any int, Integer or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyLong#157",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyLong()",
    "snippet": "public static long anyLong() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "/** \n * any long, Long or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyFloat#168",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyFloat()",
    "snippet": "public static float anyFloat() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "/** \n * any float, Float or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyDouble#179",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyDouble()",
    "snippet": "public static double anyDouble() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "/** \n * any double, Double or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyShort#190",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyShort()",
    "snippet": "public static short anyShort() {\r\n        return reportMatcher(Any.ANY).returnZero();\r\n    }",
    "begin_line": 190,
    "end_line": 192,
    "comment": "/** \n * any short, Short or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyObject#201",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyObject()",
    "snippet": "public static \u003cT\u003e T anyObject() {\r\n        return (T) reportMatcher(Any.ANY).returnNull();\r\n    }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * any Object or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.any#217",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.any(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e T any(Class\u003cT\u003e clazz) {\r\n        return (T) anyObject();\r\n    }",
    "begin_line": 217,
    "end_line": 219,
    "comment": "/** \n * any object of specified class.  \u003cp\u003e Sometimes looks better than anyObject() - especially when explicit casting is required \u003cp\u003e Alias to  {@link Matchers#anyObject()}\u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.any#230",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.any()",
    "snippet": "public static \u003cT\u003e T any() {\r\n        return (T) anyObject();\r\n    }",
    "begin_line": 230,
    "end_line": 232,
    "comment": "/** \n * any object or null  \u003cp\u003e Shorter alias to  {@link Matchers#anyObject()}\u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyString#241",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyString()",
    "snippet": "public static String anyString() {\r\n        return reportMatcher(Any.ANY).returnString();\r\n    }",
    "begin_line": 241,
    "end_line": 243,
    "comment": "/** \n * any String or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty String (\"\")\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyList#252",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyList()",
    "snippet": "public static List anyList() {\r\n        return reportMatcher(Any.ANY).returnList();\r\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * any List or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyListOf#266",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyListOf(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e List\u003cT\u003e anyListOf(Class\u003cT\u003e clazz) {\r\n        return (List) reportMatcher(Any.ANY).returnList();\r\n    }",
    "begin_line": 266,
    "end_line": 268,
    "comment": "/** \n * generic friendly alias to  {@link Matchers#anyList()}. It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings. \u003cp\u003e any List or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anySet#277",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anySet()",
    "snippet": "public static Set anySet() {\r\n        return reportMatcher(Any.ANY).returnSet();\r\n    }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "/** \n * any Set or null \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty Set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anySetOf#291",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anySetOf(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e Set\u003cT\u003e anySetOf(Class\u003cT\u003e clazz) {\r\n        return (Set) reportMatcher(Any.ANY).returnSet();\r\n    }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "/** \n * generic friendly alias to  {@link Matchers#anySet()}. It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings. \u003cp\u003e any Set or null \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty Set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyMap#302",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyMap()",
    "snippet": "public static Map anyMap() {\r\n        return reportMatcher(Any.ANY).returnMap();\r\n    }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "/** \n * any Map or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty Map.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyCollection#313",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyCollection()",
    "snippet": "public static Collection anyCollection() {\r\n        return reportMatcher(Any.ANY).returnList();\r\n    }",
    "begin_line": 313,
    "end_line": 315,
    "comment": "/** \n * any Collection or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty Collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.anyCollectionOf#327",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.anyCollectionOf(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e Collection\u003cT\u003e anyCollectionOf(Class\u003cT\u003e clazz) {\r\n        return (Collection) reportMatcher(Any.ANY).returnList();\r\n    }",
    "begin_line": 327,
    "end_line": 329,
    "comment": "/** \n * generic friendly alias to  {@link Matchers#anyCollection()}.  It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.      \u003cp\u003e any Collection or null. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return empty Collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.isA#342",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.isA(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e T isA(Class\u003cT\u003e clazz) {\r\n        return reportMatcher(new InstanceOf(clazz)).\u003cT\u003ereturnNull();\r\n    }",
    "begin_line": 342,
    "end_line": 344,
    "comment": "/** \n * Object argument that implements the given class.  \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param \u003c T \u003e the accepted type.\n * @param clazz the class of the accepted type.\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#355",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(boolean)",
    "snippet": "public static boolean eq(boolean value) {\r\n        return reportMatcher(new Equals(value)).returnFalse();\r\n    }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "/** \n * boolean argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#368",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(byte)",
    "snippet": "public static byte eq(byte value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 368,
    "end_line": 370,
    "comment": "/** \n * byte argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#381",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(char)",
    "snippet": "public static char eq(char value) {\r\n        return reportMatcher(new Equals(value)).returnChar();\r\n    }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "/** \n * char argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#394",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(double)",
    "snippet": "public static double eq(double value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "/** \n * double argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#407",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(float)",
    "snippet": "public static float eq(float value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 407,
    "end_line": 409,
    "comment": "/** \n * float argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#420",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(int)",
    "snippet": "public static int eq(int value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 420,
    "end_line": 422,
    "comment": "/** \n * int argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#433",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(long)",
    "snippet": "public static long eq(long value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 433,
    "end_line": 435,
    "comment": "/** \n * long argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#446",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(short)",
    "snippet": "public static short eq(short value) {\r\n        return reportMatcher(new Equals(value)).returnZero();\r\n    }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "/** \n * short argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.eq#459",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.eq(T)",
    "snippet": "public static \u003cT\u003e T eq(T value) {\r\n        return reportMatcher(new Equals(value)).\u003cT\u003ereturnNull();\r\n    }",
    "begin_line": 459,
    "end_line": 461,
    "comment": "/** \n * Object argument that is equal to the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.refEq#481",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.refEq(T, java.lang.String)",
    "snippet": "public static \u003cT\u003e T refEq(T value, String... excludeFields) {\r\n        return reportMatcher(new ReflectionEquals(value, excludeFields)).\u003cT\u003ereturnNull();\r\n    }",
    "begin_line": 481,
    "end_line": 483,
    "comment": "/** \n * Object argument that is reflection-equal to the given value with support for excluding selected fields from a class. \u003cp\u003e This matcher can be used when equals() is not implemented on compared objects. Matcher uses java reflection API to compare fields of wanted and actual object. \u003cp\u003e Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from apache commons library. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param value the given value.\n * @param excludeFields fields to exclude, if field does not exist it is ignored.\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.same#496",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.same(T)",
    "snippet": "public static \u003cT\u003e T same(T value) {\r\n        return reportMatcher(new Same(value)).\u003cT\u003ereturnNull();\r\n    }",
    "begin_line": 496,
    "end_line": 498,
    "comment": "/** \n * Object argument that is the same as the given value. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param \u003c T \u003e the type of the object, it is passed through to prevent casts.\n * @param value the given value.\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.isNull#507",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.isNull()",
    "snippet": "public static Object isNull() {\r\n        return reportMatcher(Null.NULL).returnNull();\r\n    }",
    "begin_line": 507,
    "end_line": 509,
    "comment": "/** \n * null argument. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.notNull#520",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.notNull()",
    "snippet": "public static Object notNull() {\r\n        return reportMatcher(NotNull.NOT_NULL).returnNull();\r\n    }",
    "begin_line": 520,
    "end_line": 522,
    "comment": "/** \n * not null argument. \u003cp\u003e alias to  {@link Matchers#isNotNull()}\u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.isNotNull#533",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.isNotNull()",
    "snippet": "public static Object isNotNull() {\r\n        return notNull();\r\n    }",
    "begin_line": 533,
    "end_line": 535,
    "comment": "/** \n * not null argument. \u003cp\u003e alias to  {@link Matchers#notNull()}\u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.contains#546",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.contains(java.lang.String)",
    "snippet": "public static String contains(String substring) {\r\n        return reportMatcher(new Contains(substring)).returnString();\r\n    }",
    "begin_line": 546,
    "end_line": 548,
    "comment": "/** \n * String argument that contains the given substring. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param substring the substring.\n * @return empty String (\"\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.matches#559",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.matches(java.lang.String)",
    "snippet": "public static String matches(String regex) {\r\n        return reportMatcher(new Matches(regex)).returnString();\r\n    }",
    "begin_line": 559,
    "end_line": 561,
    "comment": "/** \n * String argument that matches the given regular expression. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param regex the regular expression.\n * @return empty String (\"\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.endsWith#572",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.endsWith(java.lang.String)",
    "snippet": "public static String endsWith(String suffix) {\r\n        return reportMatcher(new EndsWith(suffix)).returnString();\r\n    }",
    "begin_line": 572,
    "end_line": 574,
    "comment": "/** \n * String argument that ends with the given suffix. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param suffix the suffix.\n * @return empty String (\"\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.startsWith#585",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.startsWith(java.lang.String)",
    "snippet": "public static String startsWith(String prefix) {\r\n        return reportMatcher(new StartsWith(prefix)).returnString();\r\n    }",
    "begin_line": 585,
    "end_line": 587,
    "comment": "/** \n * String argument that starts with the given prefix. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param prefix the prefix.\n * @return empty String (\"\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.argThat#597",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.argThat(Matcher\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e T argThat(Matcher\u003cT\u003e matcher) {\r\n        return reportMatcher(matcher).\u003cT\u003ereturnNull();\r\n    }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link ArgumentMatcher} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.charThat#609",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.charThat(Matcher\u003cCharacter\u003e)",
    "snippet": "public static char charThat(Matcher\u003cCharacter\u003e matcher) {\r\n        return reportMatcher(matcher).returnChar();\r\n    }",
    "begin_line": 609,
    "end_line": 611,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.booleanThat#621",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.booleanThat(Matcher\u003cBoolean\u003e)",
    "snippet": "public static boolean booleanThat(Matcher\u003cBoolean\u003e matcher) {\r\n        return reportMatcher(matcher).returnFalse();\r\n    }",
    "begin_line": 621,
    "end_line": 623,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.byteThat#633",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.byteThat(Matcher\u003cByte\u003e)",
    "snippet": "public static byte byteThat(Matcher\u003cByte\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 633,
    "end_line": 635,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.shortThat#645",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.shortThat(Matcher\u003cShort\u003e)",
    "snippet": "public static short shortThat(Matcher\u003cShort\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.intThat#657",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.intThat(Matcher\u003cInteger\u003e)",
    "snippet": "public static int intThat(Matcher\u003cInteger\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 657,
    "end_line": 659,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.longThat#669",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.longThat(Matcher\u003cLong\u003e)",
    "snippet": "public static long longThat(Matcher\u003cLong\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 669,
    "end_line": 671,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.floatThat#681",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.floatThat(Matcher\u003cFloat\u003e)",
    "snippet": "public static float floatThat(Matcher\u003cFloat\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 681,
    "end_line": 683,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.doubleThat#693",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.doubleThat(Matcher\u003cDouble\u003e)",
    "snippet": "public static double doubleThat(Matcher\u003cDouble\u003e matcher) {\r\n        return reportMatcher(matcher).returnZero();\r\n    }",
    "begin_line": 693,
    "end_line": 695,
    "comment": "/** \n * Allows creating custom argument matchers. \u003cp\u003e See examples in javadoc for  {@link Matchers} class\n * @param matcher decides whether argument matches\n * @return \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matchers.reportMatcher#697",
    "is_bug": true,
    "src_path": "org/mockito/Matchers.java",
    "class_name": "org.mockito.Matchers",
    "signature": "org.mockito.Matchers.reportMatcher(Matcher\u003c?\u003e)",
    "snippet": "private static HandyReturnValues reportMatcher(Matcher\u003c?\u003e matcher) {\r\n        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\r\n    }",
    "begin_line": 697,
    "end_line": 699,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.mock#670",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e T mock(Class\u003cT\u003e classToMock) {\r\n        return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\r\n    }",
    "begin_line": 670,
    "end_line": 672,
    "comment": "/** \n * Creates mock object of given class or interface. \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param classToMock class or interface to mock\n * @return mock object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.mock#688",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, java.lang.String)",
    "snippet": "public static \u003cT\u003e T mock(Class\u003cT\u003e classToMock, String name) {\r\n        return mock(classToMock, withSettings()\r\n                .name(name)\r\n                .defaultAnswer(RETURNS_DEFAULTS));\r\n    }",
    "begin_line": 688,
    "end_line": 692,
    "comment": "/** \n * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.  \u003cp\u003e Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.  \u003cb\u003eIf you have too many mocks then refactor the code\u003c/b\u003e so that it\u0027s easy to test/debug without necessity of naming mocks. \u003cp\u003e \u003cb\u003eIf you use \u0026#064;Mock annotation then you\u0027ve got naming mocks for free!\u003c/b\u003e \u0026#064;Mock uses field name as mock name.  {@link Mock Read more.}\u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param classToMock class or interface to mock\n * @return mock object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.mock#724",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.ReturnValues)",
    "snippet": "@Deprecated\r\n    public static \u003cT\u003e T mock(Class\u003cT\u003e classToMock, ReturnValues returnValues) {\r\n        return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\r\n    }",
    "begin_line": 724,
    "end_line": 726,
    "comment": "/** \n * @deprecated \u003cb\u003ePlease use mock(Foo.class, defaultAnswer);\u003c/b\u003e \u003cp\u003e See  {@link Mockito#mock(Class,Answer)}\u003cp\u003e Why it is deprecated? ReturnValues is being replaced by Answer for better consistency \u0026 interoperability of the framework.  Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues. There\u0027s no point in mainting exactly the same interfaces. \u003cp\u003e Creates mock with a specified strategy for its return values.  It\u0027s quite advanced feature and typically you don\u0027t need it to write decent tests. However it can be helpful when working with legacy systems. \u003cp\u003e Obviously return values are used only when you don\u0027t stub the method call. \u003cpre\u003e Foo mock \u003d mock(Foo.class, Mockito.RETURNS_SMART_NULLS); Foo mockTwo \u003d mock(Foo.class, new YourOwnReturnValues());  \u003c/pre\u003e \u003cp\u003eSee examples in javadoc for  {@link Mockito} class\u003c/p\u003e\n * @param classToMock class or interface to mock\n * @param returnValues default return values for unstubbed methods\n * @return mock object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.mock#747",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.stubbing.Answer)",
    "snippet": "public static \u003cT\u003e T mock(Class\u003cT\u003e classToMock, Answer defaultAnswer) {\r\n        return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\r\n    }",
    "begin_line": 747,
    "end_line": 749,
    "comment": "/** \n * Creates mock with a specified strategy for its answers to interactions.  It\u0027s quite advanced feature and typically you don\u0027t need it to write decent tests. However it can be helpful when working with legacy systems. \u003cp\u003e It is the default answer so it will be used \u003cb\u003eonly when you don\u0027t\u003c/b\u003e stub the method call. \u003cpre\u003e Foo mock \u003d mock(Foo.class, RETURNS_SMART_NULLS); Foo mockTwo \u003d mock(Foo.class, new YourOwnAnswer());  \u003c/pre\u003e \u003cp\u003eSee examples in javadoc for  {@link Mockito} class\u003c/p\u003e\n * @param classToMock class or interface to mock\n * @param defaultAnswer default answer for unstubbed methods\n * @return mock object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.mock#774",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.MockSettings)",
    "snippet": "public static \u003cT\u003e T mock(Class\u003cT\u003e classToMock, MockSettings mockSettings) {\r\n        return MOCKITO_CORE.mock(classToMock, mockSettings);\r\n    }",
    "begin_line": 774,
    "end_line": 776,
    "comment": "/** \n * Creates a mock with some non-standard settings. \u003cp\u003e The number of configuration points for a mock grows  so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods.  Hence  {@link MockSettings}. \u003cpre\u003e Listener mock \u003d mock(Listener.class, withSettings() .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS)); );   \u003c/pre\u003e \u003cb\u003eUse it carefully and occasionally\u003c/b\u003e. What might be reason your test needs non-standard mocks?  Is the code under test so complicated that it requires non-standard mocks?  Wouldn\u0027t you prefer to refactor the code under test so it is testable in a simple way? \u003cp\u003e See also  {@link Mockito#withSettings()}\u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param classToMock class or interface to mock\n * @param mockSettings additional mock settings\n * @return mock object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.spy#844",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.spy(T)",
    "snippet": "public static \u003cT\u003e T spy(T object) {\r\n        return MOCKITO_CORE.mock((Class\u003cT\u003e) object.getClass(), withSettings()\r\n                .spiedInstance(object)\r\n                .defaultAnswer(CALLS_REAL_METHODS));\r\n    }",
    "begin_line": 844,
    "end_line": 848,
    "comment": "/** \n * Creates a spy of the real object. The spy calls \u003cb\u003ereal\u003c/b\u003e methods unless they are stubbed. \u003cp\u003e Real spies should be used \u003cb\u003ecarefully and occasionally\u003c/b\u003e, for example when dealing with legacy code. \u003cp\u003e As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e: Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects. How does partial mock fit into this paradigm? Well, it just doesn\u0027t...  Partial mock usually means that the complexity has been moved to a different method on the same object. In most cases, this is not the way you want to design your application. \u003cp\u003e However, there are rare cases when partial mocks come handy:  dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.) However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code. \u003cp\u003e Example: \u003cpre\u003e List list \u003d new LinkedList(); List spy \u003d spy(list); //optionally, you can stub out some methods: when(spy.size()).thenReturn(100); //using the spy calls \u003cb\u003ereal\u003c/b\u003e methods spy.add(\"one\"); spy.add(\"two\"); //prints \"one\" - the first element of a list System.out.println(spy.get(0)); //size() method was stubbed - 100 is printed System.out.println(spy.size()); //optionally, you can verify verify(spy).add(\"one\"); verify(spy).add(\"two\"); \u003c/pre\u003e \u003ch4\u003eImportant gotcha on spying real objects!\u003c/h4\u003e 1. Sometimes it\u0027s impossible to use  {@link Mockito#when(Object)} for stubbing spies. Example:\u003cpre\u003e List list \u003d new LinkedList(); List spy \u003d spy(list); //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty) when(spy.get(0)).thenReturn(\"foo\"); //You have to use doReturn() for stubbing doReturn(\"foo\").when(spy).get(0); \u003c/pre\u003e 2. Watch out for final methods.  Mockito doesn\u0027t mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method \u003d trouble. What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method. Typically you may get a NullPointerException because mock instances don\u0027t have fields initiated. \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param object to spy on\n * @return a spy of the real object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.stub#877",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.stub(T)",
    "snippet": "@Deprecated\r\n    public static \u003cT\u003e DeprecatedOngoingStubbing\u003cT\u003e stub(T methodCall) {\r\n        return MOCKITO_CORE.stub(methodCall);\r\n    }",
    "begin_line": 877,
    "end_line": 879,
    "comment": "/** \n * \u003cpre\u003e //Instead of: stub(mock.count()).toReturn(10); //Please do: when(mock.count()).thenReturn(10); \u003c/pre\u003e  Many users found stub() confusing therefore stub() has been deprecated in favor of  {@link Mockito#when(Object)} \u003cp\u003e How to fix deprecation warnings? Typically it\u0027s just few minutes of search \u0026 replace job: \u003cpre\u003e Mockito.stub;  \u003ci\u003ereplace with:\u003c/i\u003e  Mockito.when; stub(          \u003ci\u003ereplace with:\u003c/i\u003e  when( .toReturn(     \u003ci\u003ereplace with:\u003c/i\u003e  .thenReturn( .toThrow(      \u003ci\u003ereplace with:\u003c/i\u003e  .thenThrow( .toAnswer(     \u003ci\u003ereplace with:\u003c/i\u003e  .thenAnswer( \u003c/pre\u003e If you\u0027re an existing user then sorry for making your code littered with deprecation warnings.  This change was required to make Mockito better.\n * @param methodCall method call\n * @return DeprecatedOngoingStubbing object to set stubbed value/exception\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.when#940",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.when(T)",
    "snippet": "public static \u003cT\u003e OngoingStubbing\u003cT\u003e when(T methodCall) {\r\n        return MOCKITO_CORE.when(methodCall);\r\n    }",
    "begin_line": 940,
    "end_line": 942,
    "comment": "/** \n * Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called.  \u003cp\u003e Simply put: \"\u003cb\u003eWhen\u003c/b\u003e the x method is called \u003cb\u003ethen\u003c/b\u003e return y\". \u003cp\u003e \u003cb\u003ewhen() is a successor of deprecated  {@link Mockito#stub(Object)}\u003c/b\u003e \u003cp\u003e Examples: \u003cpre\u003e \u003cb\u003ewhen\u003c/b\u003e(mock.someMethod()).\u003cb\u003ethenReturn\u003c/b\u003e(10); //you can use flexible argument matchers, e.g: when(mock.someMethod(\u003cb\u003eanyString()\u003c/b\u003e)).thenReturn(10); //setting exception to be thrown: when(mock.someMethod(\"some arg\")).thenThrow(new RuntimeException()); //you can set different behavior for consecutive method calls. //Last stubbing (e.g: thenReturn(\"foo\")) determines the behavior of further consecutive calls. when(mock.someMethod(\"some arg\")) .thenThrow(new RuntimeException()) .thenReturn(\"foo\"); //Alternative, shorter version for consecutive stubbing: when(mock.someMethod(\"some arg\")) .thenReturn(\"one\", \"two\"); //is the same as: when(mock.someMethod(\"some arg\")) .thenReturn(\"one\") .thenReturn(\"two\"); //shorter version for consecutive method calls throwing exceptions: when(mock.someMethod(\"some arg\")) .thenThrow(new RuntimeException(), new NullPointerException(); \u003c/pre\u003e For stubbing void methods with throwables see:  {@link Mockito#doThrow(Throwable)}\u003cp\u003e Stubbing can be overridden: for example common stubbing can go to fixture setup but the test methods can override it. \u003cp\u003e Once stubbed, the method will always return stubbed value regardless of how many times it is called. \u003cp\u003e Last stubbing is more important - when you stubbed the same method with the same arguments many times. \u003cp\u003e Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e. Let\u0027s say you\u0027ve stubbed foo.bar().  If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed). If your code doesn\u0027t care what get(0) returns then it should not be stubbed.  Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e. \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param methodCall method to be stubbed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.verify#969",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.verify(T)",
    "snippet": "public static \u003cT\u003e T verify(T mock) {\r\n        return MOCKITO_CORE.verify(mock, times(1));\r\n    }",
    "begin_line": 969,
    "end_line": 971,
    "comment": "/** \n * Verifies certain behavior \u003cb\u003ehappened once\u003c/b\u003e  \u003cp\u003e Alias to \u003ccode\u003everify(mock, times(1))\u003c/code\u003e E.g: \u003cpre\u003e verify(mock).someMethod(\"some arg\"); \u003c/pre\u003e Above is equivalent to: \u003cpre\u003e verify(mock, times(1)).someMethod(\"some arg\"); \u003c/pre\u003e \u003cp\u003e Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e. Let\u0027s say you\u0027ve stubbed foo.bar().  If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed). If your code doesn\u0027t care what get(0) returns then it should not be stubbed.  Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e. \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param mock to be verified\n * @return mock object itself\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.reset#1000",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.reset(T)",
    "snippet": "public static \u003cT\u003e void reset(T ... mocks) {\r\n        MOCKITO_CORE.reset(mocks);\r\n    }",
    "begin_line": 1000,
    "end_line": 1002,
    "comment": "/** \n * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests. Normally, you don\u0027t need to reset your mocks, just create new mocks for each test method.  \u003cp\u003e Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests. \u003cb\u003eFirst potential code smell is reset() in the middle of the test method.\u003c/b\u003e This probably means you\u0027re testing too much. Follow the whisper of your test methods: \"Please keep us small \u0026 focused on single behavior\".  There are several threads about it on mockito mailing list. \u003cp\u003e The only reason we added reset() method is to make it possible to work with container-injected mocks. See issue 55 (\u003ca href\u003d\"http://code.google.com/p/mockito/issues/detail?id\u003d55\"\u003ehere\u003c/a\u003e) or FAQ (\u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehere\u003c/a\u003e). \u003cp\u003e \u003cb\u003eDon\u0027t harm yourself.\u003c/b\u003e reset() in the middle of the test method is a code smell (you\u0027re probably testing too much).  \u003cpre\u003e List mock \u003d mock(List.class); when(mock.size()).thenReturn(10); mock.add(1); reset(mock); //at this point the mock forgot any interactions \u0026 stubbing \u003c/pre\u003e\n * @param \u003c T \u003e\n * @param mocks\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.verify#1024",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.verify(T, org.mockito.internal.verification.api.VerificationMode)",
    "snippet": "public static \u003cT\u003e T verify(T mock, VerificationMode mode) {\r\n        return MOCKITO_CORE.verify(mock, mode);\r\n    }",
    "begin_line": 1024,
    "end_line": 1026,
    "comment": "/** \n * Verifies certain behavior happened at least once / exact number of times / never. E.g: \u003cpre\u003e verify(mock, times(5)).someMethod(\"was called five times\"); verify(mock, atLeast(2)).someMethod(\"was called at least two times\"); //you can use flexible argument matchers, e.g: verify(mock, atLeastOnce()).someMethod(\u003cb\u003eanyString()\u003c/b\u003e); \u003c/pre\u003e \u003cb\u003etimes(1) is the default\u003c/b\u003e and can be omitted \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param mock to be verified\n * @param mode times(x), atLeastOnce() or never()\n * @return mock object itself\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.verifyNoMoreInteractions#1069",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.verifyNoMoreInteractions(java.lang.Object)",
    "snippet": "public static void verifyNoMoreInteractions(Object... mocks) {\r\n        MOCKITO_CORE.verifyNoMoreInteractions(mocks);\r\n    }",
    "begin_line": 1069,
    "end_line": 1071,
    "comment": "/** \n * Checks if any of given mocks has any unverified interaction. \u003cp\u003e You can use this method after you verified your mocks - to make sure that nothing else was invoked on your mocks. \u003cp\u003e See also  {@link Mockito#never()} - it is more explicit and communicates the intent well.\u003cp\u003e Stubbed invocations (if called) are also treated as interactions. \u003cp\u003e A word of \u003cb\u003ewarning\u003c/b\u003e:  Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method.  verifyNoMoreInteractions() is not recommended to use in every test method.  verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it\u0027s relevant. Abusing it leads to overspecified, less maintainable tests. You can find further reading  \u003ca href\u003d\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\"\u003ehere\u003c/a\u003e. \u003cp\u003e This method will also detect unverified invocations that occurred before the test method, for example: in setUp(), \u0026#064;Before method or in constructor. Consider writing nice code that makes interactions only in test methods. \u003cp\u003e Example: \u003cpre\u003e //interactions mock.doSomething(); mock.doSomethingUnexpected(); //verification verify(mock).doSomething(); //following will fail because \u0027doSomethingUnexpected()\u0027 is unexpected verifyNoMoreInteractions(mock); \u003c/pre\u003e See examples in javadoc for  {@link Mockito} class\n * @param mocks to be verified\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.verifyZeroInteractions#1088",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.verifyZeroInteractions(java.lang.Object)",
    "snippet": "public static void verifyZeroInteractions(Object... mocks) {\r\n        MOCKITO_CORE.verifyNoMoreInteractions(mocks);\r\n    }",
    "begin_line": 1088,
    "end_line": 1090,
    "comment": "/** \n * Verifies that no interactions happened on given mocks. \u003cpre\u003e verifyZeroInteractions(mockOne, mockTwo); \u003c/pre\u003e This method will also detect invocations  that occurred before the test method, for example: in setUp(), \u0026#064;Before method or in constructor. Consider writing nice code that makes interactions only in test methods.   \u003cp\u003e See also  {@link Mockito#never()} - it is more explicit and communicates the intent well.\u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param mocks to be verified\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.stubVoid#1124",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.stubVoid(T)",
    "snippet": "public static \u003cT\u003e VoidMethodStubbable\u003cT\u003e stubVoid(T mock) {\r\n        return MOCKITO_CORE.stubVoid(mock);\r\n    }",
    "begin_line": 1124,
    "end_line": 1126,
    "comment": "/** \n * \u003cpre\u003e //Instead of: stubVoid(mock).toThrow(e).on().someVoidMethod(); //Please do: doThrow(e).when(mock).someVoidMethod(); \u003c/pre\u003e  doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods.  \u003cp\u003e Originally, stubVoid() was used for stubbing void methods with exceptions. E.g: \u003cpre\u003e stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(); //you can stub with different behavior for consecutive calls. //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.    stubVoid(mock) .toThrow(new RuntimeException()) .toReturn() .on().someMethod(); \u003c/pre\u003e See examples in javadoc for  {@link Mockito} class\n * @deprecated Use {@link Mockito#doThrow(Throwable)} method for stubbing voids\n * @param mock to stub\n * @return stubbable object that allows stubbing with throwable\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.doThrow#1142",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.doThrow(java.lang.Throwable)",
    "snippet": "public static Stubber doThrow(Throwable toBeThrown) {\r\n        return MOCKITO_CORE.doAnswer(new ThrowsException(toBeThrown));\r\n    }",
    "begin_line": 1142,
    "end_line": 1144,
    "comment": "/** \n * Use doThrow() when you want to stub the void method with an exception. \u003cp\u003e Stubbing voids requires different approach from  {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\u003cp\u003e Example: \u003cpre\u003e doThrow(new RuntimeException()).when(mock).someVoidMethod(); \u003c/pre\u003e\n * @param toBeThrown to be thrown when the stubbed method is called\n * @return stubber - to select a method for stubbing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.doCallRealMethod#1176",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.doCallRealMethod()",
    "snippet": "public static Stubber doCallRealMethod() {\r\n        return MOCKITO_CORE.doAnswer(new CallsRealMethods());\r\n    }",
    "begin_line": 1176,
    "end_line": 1178,
    "comment": "/** \n * Use doCallRealMethod() when you want to call the real implementation of a method. \u003cp\u003e As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e: Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects. How does partial mock fit into this paradigm? Well, it just doesn\u0027t...  Partial mock usually means that the complexity has been moved to a different method on the same object. In most cases, this is not the way you want to design your application. \u003cp\u003e However, there are rare cases when partial mocks come handy:  dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.) However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code. \u003cp\u003e See also javadoc  {@link Mockito#spy(Object)} to find out more about partial mocks. \u003cb\u003eMockito.spy() is a recommended way of creating partial mocks.\u003c/b\u003e  The reason is it guarantees real methods are called against correctly constructed object because you\u0027re responsible for constructing the object passed to spy() method. \u003cp\u003e Example: \u003cpre\u003e Foo mock \u003d mock(Foo.class); doCallRealMethod().when(mock).someVoidMethod(); // this will call the real implementation of Foo.someVoidMethod() mock.someVoidMethod(); \u003c/pre\u003e \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @return stubber - to select a method for stubbing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.doAnswer#1202",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.doAnswer(org.mockito.stubbing.Answer)",
    "snippet": "public static Stubber doAnswer(Answer answer) {\r\n        return MOCKITO_CORE.doAnswer(answer);\r\n    }",
    "begin_line": 1202,
    "end_line": 1204,
    "comment": "/** \n * Use doAnswer() when you want to stub a void method with generic  {@link Answer}. \u003cp\u003e Stubbing voids requires different approach from  {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\u003cp\u003e Example: \u003cpre\u003e doAnswer(new Answer() { public Object answer(InvocationOnMock invocation) { Object[] args \u003d invocation.getArguments(); Mock mock \u003d invocation.getMock(); return null; }}) .when(mock).someMethod(); \u003c/pre\u003e \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param answer to answer when the stubbed method is called\n * @return stubber - to select a method for stubbing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.doNothing#1241",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.doNothing()",
    "snippet": "public static Stubber doNothing() {\r\n        return MOCKITO_CORE.doAnswer(new DoesNothing());\r\n    }",
    "begin_line": 1241,
    "end_line": 1243,
    "comment": "/** \n * Use doNothing() for setting void methods to do nothing. \u003cb\u003eBeware that void methods on mocks do nothing by default!\u003c/b\u003e  However, there are rare situations when doNothing() comes handy:   \u003cp\u003e 1. Stubbing consecutive calls on a void method: \u003cpre\u003e doNothing(). doThrow(new RuntimeException()) .when(mock).someVoidMethod(); //does nothing the first time: mock.someVoidMethod(); //throws RuntimeException the next time: mock.someVoidMethod(); \u003c/pre\u003e 2. When you spy real objects and you want the void method to do nothing: \u003cpre\u003e List list \u003d new LinkedList(); List spy \u003d spy(list); //let\u0027s make clear() do nothing doNothing().when(spy).clear(); spy.add(\"one\"); //clear() does nothing, so the list still contains \"one\" spy.clear(); \u003c/pre\u003e \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @return stubber - to select a method for stubbing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.doReturn#1287",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.doReturn(java.lang.Object)",
    "snippet": "public static Stubber doReturn(Object toBeReturned) {\r\n        return MOCKITO_CORE.doAnswer(new Returns(toBeReturned));\r\n    }",
    "begin_line": 1287,
    "end_line": 1289,
    "comment": "/** \n * Use doReturn() in those rare occasions when you cannot use  {@link Mockito#when(Object)}. \u003cp\u003e \u003cb\u003eBeware that  {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe and more readable\u003c/b\u003e (especially when stubbing consecutive calls).  \u003cp\u003e Here are those rare occasions when doReturn() comes handy: \u003cp\u003e 1. When spying real objects and calling real methods on a spy brings side effects   \u003cpre\u003e List list \u003d new LinkedList(); List spy \u003d spy(list); //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty) when(spy.get(0)).thenReturn(\"foo\"); //You have to use doReturn() for stubbing: doReturn(\"foo\").when(spy).get(0); \u003c/pre\u003e 2. Overriding a previous exception-stubbing: \u003cpre\u003e when(mock.foo()).thenThrow(new RuntimeException()); //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.  when(mock.foo()).thenReturn(\"bar\"); //You have to use doReturn() for stubbing: doReturn(\"bar\").when(mock).foo(); \u003c/pre\u003e Above scenarios shows a tradeoff of Mockito\u0027s ellegant syntax. Note that the scenarios are very rare, though.  Spying should be sporadic and overriding exception-stubbing is very rare.   \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param toBeReturned to be returned when the stubbed method is called\n * @return stubber - to select a method for stubbing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.inOrder#1312",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.inOrder(java.lang.Object)",
    "snippet": "public static InOrder inOrder(Object... mocks) {\r\n        return MOCKITO_CORE.inOrder(mocks);\r\n    }",
    "begin_line": 1312,
    "end_line": 1314,
    "comment": "/** \n * Creates InOrder object that allows verifying mocks in order. \u003cpre\u003e InOrder inOrder \u003d inOrder(firstMock, secondMock); inOrder.verify(firstMock).add(\"was called first\"); inOrder.verify(secondMock).add(\"was called second\"); \u003c/pre\u003e Verification in order is flexible - \u003cb\u003eyou don\u0027t have to verify all interactions\u003c/b\u003e one-by-one but only those that you are interested in testing in order. \u003cp\u003e Also, you can create InOrder object passing only mocks that are relevant for in-order verification.   \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @param mocks to be verified in order\n * @return InOrder object to be used to verify in order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.times#1328",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.times(int)",
    "snippet": "public static VerificationMode times(int wantedNumberOfInvocations) {\r\n        return VerificationModeFactory.times(wantedNumberOfInvocations);\r\n    }",
    "begin_line": 1328,
    "end_line": 1330,
    "comment": "/** \n * Allows verifying exact number of invocations. E.g: \u003cpre\u003e verify(mock, times(2)).someMethod(\"some arg\"); \u003c/pre\u003e See examples in javadoc for  {@link Mockito} class\n * @param wantedNumberOfInvocations wanted number of invocations \n * @return verification mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.never#1349",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.never()",
    "snippet": "public static VerificationMode never() {\r\n        return times(0);\r\n    }",
    "begin_line": 1349,
    "end_line": 1351,
    "comment": "/** \n * Alias to times(0), see  {@link Mockito#times(int)}\u003cp\u003e Verifies that interaction did not happen. E.g: \u003cpre\u003e verify(mock, never()).someMethod(); \u003c/pre\u003e \u003cp\u003e If you want to verify there were NO interactions with the mock  check out  {@link Mockito#verifyZeroInteractions(Object...)}or  {@link Mockito#verifyNoMoreInteractions(Object...)}\u003cp\u003e See examples in javadoc for  {@link Mockito} class\n * @return verification mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.atLeastOnce#1364",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.atLeastOnce()",
    "snippet": "public static VerificationMode atLeastOnce() {\r\n        return VerificationModeFactory.atLeastOnce();\r\n    }",
    "begin_line": 1364,
    "end_line": 1366,
    "comment": "/** \n * Allows at-least-once verification. E.g: \u003cpre\u003e verify(mock, atLeastOnce()).someMethod(\"some arg\"); \u003c/pre\u003e Alias to atLeast(1) See examples in javadoc for  {@link Mockito} class\n * @return verification mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.atLeast#1380",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.atLeast(int)",
    "snippet": "public static VerificationMode atLeast(int minNumberOfInvocations) {\r\n        return VerificationModeFactory.atLeast(minNumberOfInvocations);\r\n    }",
    "begin_line": 1380,
    "end_line": 1382,
    "comment": "/** \n * Allows at-least-x verification. E.g: \u003cpre\u003e verify(mock, atLeast(3)).someMethod(\"some arg\"); \u003c/pre\u003e See examples in javadoc for  {@link Mockito} class\n * @param minNumberOfInvocations minimum number of invocations \n * @return verification mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.atMost#1396",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.atMost(int)",
    "snippet": "public static VerificationMode atMost(int maxNumberOfInvocations) {\r\n        return VerificationModeFactory.atMost(maxNumberOfInvocations);\r\n    }",
    "begin_line": 1396,
    "end_line": 1398,
    "comment": "/** \n * Allows at-most-x verification. E.g: \u003cpre\u003e verify(mock, atMost(3)).someMethod(\"some arg\"); \u003c/pre\u003e See examples in javadoc for  {@link Mockito} class\n * @param maxNumberOfInvocations max number of invocations \n * @return verification mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.validateMockitoUsage#1445",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.validateMockitoUsage()",
    "snippet": "public static void validateMockitoUsage() {\r\n        MOCKITO_CORE.validateMockitoUsage();\r\n    }",
    "begin_line": 1445,
    "end_line": 1447,
    "comment": "/** \n * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehttp://code.google.com/p/mockito/wiki/FAQ\u003c/a\u003e \u003cp\u003e In case of questions you may also post to mockito mailing list: \u003ca href\u003d\"http://groups.google.com/group/mockito\"\u003ehttp://groups.google.com/group/mockito\u003c/a\u003e  \u003cp\u003e {@link Mockito#validateMockitoUsage()} \u003cb\u003eexplicitly validates\u003c/b\u003e the framework state to detect invalid use of Mockito.However, this feature is optional \u003cb\u003ebecause Mockito validates the usage all the time...\u003c/b\u003e but there is a gotcha so read on. \u003cp\u003e Examples of incorrect use: \u003cpre\u003e //Oups, someone forgot thenReturn() part: when(mock.get()); //Oups, someone put the verified method call inside verify() where it should be outside: verify(mock.execute()); //Oups, someone has used EasyMock for too long and forgot to specify the method to verify: verify(mock); \u003c/pre\u003e Mockito throws exceptions if you misuse it so that you know if your tests are written correctly.  The gotcha is that Mockito does the validation \u003cb\u003enext time\u003c/b\u003e you use the framework (e.g. next time you verify, stub, call mock etc.).  But even though the exception might be thrown in the next test,  the exception \u003cb\u003emessage contains a navigable stack trace element\u003c/b\u003e with location of the defect.  Hence you can click and find the place where Mockito was misused. \u003cp\u003e Sometimes though, you might want to validate the framework usage explicitly.  For example, one of the users wanted to put  {@link Mockito#validateMockitoUsage()} in his \u0026#064;After methodso that he knows immediately when he misused Mockito.  Without it, he would have known about it not sooner than \u003cb\u003enext time\u003c/b\u003e he used the framework. One more benefit of having validateMockitoUsage() in \u0026#064;After is that jUnit runner will always fail in the test method with defect whereas ordinary \u0027next-time\u0027 validation might fail the \u003cb\u003enext\u003c/b\u003e test method.  But even though JUnit might report next test as red, don\u0027t worry about it  and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.    \u003cp\u003e \u003cb\u003eBuilt-in runner:  {@link MockitoJUnitRunner}\u003c/b\u003e does validateMockitoUsage() after each test method. \u003cp\u003e Bear in mind that \u003cb\u003eusually you don\u0027t have to validateMockitoUsage()\u003c/b\u003e  and framework validation triggered on next-time basis should be just enough, mainly because of enhanced exception message with clickable location of defect. However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure (like your own runner or base class for all tests) because adding a special action to \u0026#064;After has zero cost. \u003cp\u003e See examples in javadoc for  {@link Mockito} class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Mockito.withSettings#1479",
    "is_bug": true,
    "src_path": "org/mockito/Mockito.java",
    "class_name": "org.mockito.Mockito",
    "signature": "org.mockito.Mockito.withSettings()",
    "snippet": "public static MockSettings withSettings() {\r\n        return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\r\n    }",
    "begin_line": 1479,
    "end_line": 1481,
    "comment": "/** \n * Allows mock creation with additional mock settings.  \u003cp\u003e Don\u0027t use it too often.  Consider writing simple tests that use simple mocks.  Repeat after me: simple tests push simple, KISSy, readable \u0026 maintainable code. If you cannot write a test in a simple way - refactor the code under test. \u003cp\u003e Examples of mock settings: \u003cpre\u003e //Creates mock with different default answer \u0026 name Foo mock \u003d mock(Foo.class, withSettings() .defaultAnswer(RETURNS_SMART_NULLS) .name(\"cool mockie\")); //Creates mock with different default answer, descriptive name and extra interfaces Foo mock \u003d mock(Foo.class, withSettings() .defaultAnswer(RETURNS_SMART_NULLS) .name(\"cool mockie\") .extraInterfaces(Bar.class));     \u003c/pre\u003e {@link MockSettings} has been introduced for two reasons. Firstly, to make it easy to add another mock settings when the demand comes. Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods. \u003cp\u003e See javadoc for  {@link MockSettings} to learn about possible mock settings.\u003cp\u003e\n * @return mock settings instance with defaults.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoAnnotations.initMocks#80",
    "is_bug": true,
    "src_path": "org/mockito/MockitoAnnotations.java",
    "class_name": "org.mockito.MockitoAnnotations",
    "signature": "org.mockito.MockitoAnnotations.initMocks(java.lang.Object)",
    "snippet": "public static void initMocks(Object testClass) {\n        if (testClass \u003d\u003d null) {\n            throw new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n        }\n        \n        Class\u003c?\u003e clazz \u003d testClass.getClass();\n        while (clazz !\u003d Object.class) {\n            scan(testClass, clazz);\n            clazz \u003d clazz.getSuperclass();\n        }\n    }",
    "begin_line": 80,
    "end_line": 90,
    "comment": "/** \n * Initializes objects annotated with \u0026#064;Mock for given testClass. \u003cp\u003e See examples in javadoc for  {@link MockitoAnnotations} class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoAnnotations.scan#92",
    "is_bug": true,
    "src_path": "org/mockito/MockitoAnnotations.java",
    "class_name": "org.mockito.MockitoAnnotations",
    "signature": "org.mockito.MockitoAnnotations.scan(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static void scan(Object testClass, Class\u003c?\u003e clazz) {\n        AnnotationEngine annotationEngine \u003d new GlobalConfiguration().getAnnotationEngine();\n        Field[] fields \u003d clazz.getDeclaredFields();\n        for (Field field : fields) {\n            for(Annotation annotation : field.getAnnotations()) {\n                Object mock \u003d annotationEngine.createMockFor(annotation, field);\n                if (mock !\u003d null) {\n                    boolean wasAccessible \u003d field.isAccessible();\n                    field.setAccessible(true);\n                    try {\n                        field.set(testClass, mock);\n                    } catch (IllegalAccessException e) {\n                        throw new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n                    } finally {\n                        field.setAccessible(wasAccessible);\n                    }    \n                }\n            }\n        }\n    }",
    "begin_line": 92,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultMockitoConfiguration.getReturnValues#26",
    "is_bug": true,
    "src_path": "org/mockito/configuration/DefaultMockitoConfiguration.java",
    "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
    "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getReturnValues()",
    "snippet": "@Deprecated\r\n    public ReturnValues getReturnValues() {\r\n        throw new RuntimeException(\"\\n\" + \"This method should not be used by the framework because it was deprecated\"\r\n                + \"\\n\" + \"Please report the failure to the Mockito mailing list\");\r\n    }",
    "begin_line": 26,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultMockitoConfiguration.getDefaultAnswer#31",
    "is_bug": true,
    "src_path": "org/mockito/configuration/DefaultMockitoConfiguration.java",
    "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
    "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getDefaultAnswer()",
    "snippet": "public Answer\u003cObject\u003e getDefaultAnswer() {\r\n        return new ReturnsEmptyValues();\r\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultMockitoConfiguration.getAnnotationEngine#38",
    "is_bug": true,
    "src_path": "org/mockito/configuration/DefaultMockitoConfiguration.java",
    "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
    "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getAnnotationEngine()",
    "snippet": "public AnnotationEngine getAnnotationEngine() {\r\n        return new DefaultAnnotationEngine();\r\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultMockitoConfiguration.cleansStackTrace#45",
    "is_bug": true,
    "src_path": "org/mockito/configuration/DefaultMockitoConfiguration.java",
    "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
    "signature": "org.mockito.configuration.DefaultMockitoConfiguration.cleansStackTrace()",
    "snippet": "public boolean cleansStackTrace() {\r\n        return true;\r\n    }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.checkedExceptionInvalid#45",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.checkedExceptionInvalid(java.lang.Throwable)",
    "snippet": "public void checkedExceptionInvalid(Throwable t) {\n        throw new MockitoException(join(\n                \"Checked exception is invalid for this method!\",\n                \"Invalid: \" + t\n                ));\n    }",
    "begin_line": 45,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.cannotStubWithNullThrowable#52",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.cannotStubWithNullThrowable()",
    "snippet": "public void cannotStubWithNullThrowable() {\n        throw new MockitoException(join(\n                \"Cannot stub with null throwable!\"\n                ));\n\n    }",
    "begin_line": 52,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.unfinishedStubbing#59",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.unfinishedStubbing(org.mockito.internal.debugging.Location)",
    "snippet": "public void unfinishedStubbing(Location location) {\n        throw new UnfinishedStubbingException(join(\n                \"Unfinished stubbing detected here:\",\n                location,\n                \"\",\n                \"E.g. thenReturn() may be missing.\",\n                \"Examples of correct stubbing:\",\n                \"    when(mock.isOk()).thenReturn(true);\",\n                \"    when(mock.isOk()).thenThrow(exception);\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"Hints:\",\n                \" 1. missing thenReturn()\",\n                \" 2. although stubbed methods may return mocks, you cannot inline mock creation (mock()) call inside a thenReturn method (see issue 53)\",\n                \"\"\n        ));\n    }",
    "begin_line": 59,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.missingMethodInvocation#76",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.missingMethodInvocation()",
    "snippet": "public void missingMethodInvocation() {\n        throw new MissingMethodInvocationException(join(\n                \"when() requires an argument which has to be a method call on a mock.\",\n                \"For example:\",\n                \"    when(mock.getArticles()).thenReturn(articles);\",\n                \"\",\n                \"Also, this error might show up because you stub final/private/equals() or hashCode() method.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));\n    }",
    "begin_line": 76,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.unfinishedVerificationException#88",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.unfinishedVerificationException(org.mockito.internal.debugging.Location)",
    "snippet": "public void unfinishedVerificationException(Location location) {\n        UnfinishedVerificationException exception \u003d new UnfinishedVerificationException(join(\n                \"Missing method call for verify(mock) here:\",\n                location,\n                \"\",\n                \"Example of correct verification:\",\n                \"    verify(mock).doSomething()\",\n                \"\",\n                \"Also, this error might show up because you verify final/private/equals() or hashCode() method.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));\n        \n        throw exception;\n    }",
    "begin_line": 88,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.notAMockPassedToVerify#104",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.notAMockPassedToVerify()",
    "snippet": "public void notAMockPassedToVerify() {\n        throw new NotAMockException(join(\n                \"Argument passed to verify() is not a mock!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\"\n        ));\n    }",
    "begin_line": 104,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.nullPassedToVerify#114",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.nullPassedToVerify()",
    "snippet": "public void nullPassedToVerify() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument passed to verify() is null!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\",\n                \"Also, if you use @Mock annotation don\u0027t miss initMocks()\"\n        ));\n    }",
    "begin_line": 114,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.notAMockPassedToWhenMethod#125",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.notAMockPassedToWhenMethod()",
    "snippet": "public void notAMockPassedToWhenMethod() {\n        throw new NotAMockException(join(\n                \"Argument passed to when() is not a mock!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\"\n        ));\n    }",
    "begin_line": 125,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.nullPassedToWhenMethod#133",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.nullPassedToWhenMethod()",
    "snippet": "public void nullPassedToWhenMethod() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument passed to when() is null!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\",                \n                \"Also, if you use @Mock annotation don\u0027t miss initMocks()\"\n        ));\n    }",
    "begin_line": 133,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.mocksHaveToBePassedToVerifyNoMoreInteractions#142",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.mocksHaveToBePassedToVerifyNoMoreInteractions()",
    "snippet": "public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n        throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that should be verified, e.g:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n                ));\n    }",
    "begin_line": 142,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.notAMockPassedToVerifyNoMoreInteractions#151",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.notAMockPassedToVerifyNoMoreInteractions()",
    "snippet": "public void notAMockPassedToVerifyNoMoreInteractions() {\n        throw new NotAMockException(join(\n            \"Argument(s) passed is not a mock!\",\n            \"Examples of correct verifications:\",\n            \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));\n    }",
    "begin_line": 151,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.nullPassedToVerifyNoMoreInteractions#160",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.nullPassedToVerifyNoMoreInteractions()",
    "snippet": "public void nullPassedToVerifyNoMoreInteractions() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Examples of correct verifications:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));\n    }",
    "begin_line": 160,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.notAMockPassedWhenCreatingInOrder#169",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.notAMockPassedWhenCreatingInOrder()",
    "snippet": "public void notAMockPassedWhenCreatingInOrder() {\n        throw new NotAMockException(join(\n                \"Argument(s) passed is not a mock!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder \u003d inOrder(mockOne, mockTwo);\"\n                ));\n    }",
    "begin_line": 169,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.nullPassedWhenCreatingInOrder#178",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.nullPassedWhenCreatingInOrder()",
    "snippet": "public void nullPassedWhenCreatingInOrder() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder \u003d inOrder(mockOne, mockTwo);\"\n                ));\n    }",
    "begin_line": 178,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.mocksHaveToBePassedWhenCreatingInOrder#187",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.mocksHaveToBePassedWhenCreatingInOrder()",
    "snippet": "public void mocksHaveToBePassedWhenCreatingInOrder() {\n        throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder \u003d inOrder(mockOne, mockTwo);\"\n                ));\n    }",
    "begin_line": 187,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.inOrderRequiresFamiliarMock#196",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.inOrderRequiresFamiliarMock()",
    "snippet": "public void inOrderRequiresFamiliarMock() {\n        throw new MockitoException(join(\n                \"InOrder can only verify mocks that were passed in during creation of InOrder.\",\n                \"For example:\",\n                \"    InOrder inOrder \u003d inOrder(mockOne);\",\n                \"    inOrder.verify(mockOne).doStuff();\"\n                ));\n    }",
    "begin_line": 196,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.invalidUseOfMatchers#205",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.invalidUseOfMatchers(int, int)",
    "snippet": "public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount) {\n        throw new InvalidUseOfMatchersException(join(\n                \"Invalid use of argument matchers!\",\n                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n                \"This exception may occur if matchers are combined with raw values:\",        \n                \"    //incorrect:\",\n                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                \"When using matchers, all arguments have to be provided by matchers.\",\n                \"For example:\",\n                \"    //correct:\",\n                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n                \"\",\n                \"For more info see javadoc for Matchers class.\"\n        ));\n    }",
    "begin_line": 205,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.argumentsAreDifferent#221",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.argumentsAreDifferent(java.lang.String, java.lang.String, org.mockito.internal.debugging.Location)",
    "snippet": "public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n        String message \u003d join(\"Argument(s) are different! Wanted:\", \n                wanted,\n                new Location(),\n                \"Actual invocation has different arguments:\",\n                actual,\n                actualLocation,\n                \"\"\n                );\n        \n        if (JUnitTool.hasJUnit()) {\n            throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);\n        } else {\n            throw new ArgumentsAreDifferent(message);\n        }\n    }",
    "begin_line": 221,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.wantedButNotInvoked#238",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation)",
    "snippet": "public void wantedButNotInvoked(PrintableInvocation wanted) {\n        throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));\n    }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.wantedButNotInvoked#242",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation, java.util.List\u003c? extends org.mockito.exceptions.PrintableInvocation\u003e)",
    "snippet": "public void wantedButNotInvoked(PrintableInvocation wanted, List\u003c? extends PrintableInvocation\u003e invocations) {\n        String allInvocations;\n        if (invocations.isEmpty()) {\n            allInvocations \u003d \"Actually, there were zero interactions with this mock.\\n\";\n        } else {\n            StringBuilder sb \u003d new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");\n            for (PrintableInvocation i : invocations) {\n                 sb.append(i.getLocation());\n                 sb.append(\"\\n\");\n            }\n            allInvocations \u003d sb.toString();\n        }\n        \n        String message \u003d createWantedButNotInvokedMessage(wanted);\n        throw new WantedButNotInvoked(message + allInvocations);\n    }",
    "begin_line": 242,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.createWantedButNotInvokedMessage#259",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.createWantedButNotInvokedMessage(org.mockito.exceptions.PrintableInvocation)",
    "snippet": "private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\n        return join(\n                \"Wanted but not invoked:\",\n                wanted.toString(),\n                new Location(),\n                \"\"\n        );\n    }",
    "begin_line": 259,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.wantedButNotInvokedInOrder#268",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.wantedButNotInvokedInOrder(org.mockito.exceptions.PrintableInvocation, org.mockito.exceptions.PrintableInvocation)",
    "snippet": "public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n        throw new VerificationInOrderFailure(join(\n                    \"Verification in order failure\",\n                    \"Wanted but not invoked:\",\n                    wanted.toString(),\n                    new Location(),\n                    \"Wanted anywhere AFTER following interaction:\",\n                    previous.toString(),\n                    previous.getLocation(),\n                    \"\"\n        ));\n    }",
    "begin_line": 268,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.tooManyActualInvocations#281",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.tooManyActualInvocations(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n        String message \u003d createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n        throw new TooManyActualInvocations(message);\n    }",
    "begin_line": 281,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.createTooManyInvocationsMessage#286",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.createTooManyInvocationsMessage(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n            Location firstUndesired) {\n        return join(\n                wanted.toString(),\n                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n                new Location(),\n                \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                firstUndesired,\n                \"\"\n        );\n    }",
    "begin_line": 286,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.neverWantedButInvoked#298",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.neverWantedButInvoked(org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n        throw new NeverWantedButInvoked(join(\n                wanted.toString(),\n                \"Never wanted here:\",\n                new Location(),\n                \"But invoked here:\",\n                firstUndesired,\n                \"\"\n        ));\n    }",
    "begin_line": 298,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.tooManyActualInvocationsInOrder#309",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.tooManyActualInvocationsInOrder(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n        String message \u003d createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n        throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));\n    }",
    "begin_line": 309,
    "end_line": 314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.createTooLittleInvocationsMessage#316",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.createTooLittleInvocationsMessage(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n            Location lastActualInvocation) {\n        String ending \u003d \n            (lastActualInvocation !\u003d null)? lastActualInvocation + \"\\n\" : \"\\n\";\n            \n            String message \u003d join(\n                    wanted.toString(),\n                    \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n                    new Location(),\n                    \"But was \" + discrepancy.getPluralizedActualCount() + \":\", \n                    ending\n            );\n            return message;\n    }",
    "begin_line": 316,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.tooLittleActualInvocations#331",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.tooLittleActualInvocations(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n        String message \u003d createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n        \n        throw new TooLittleActualInvocations(message);\n    }",
    "begin_line": 331,
    "end_line": 335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.tooLittleActualInvocationsInOrder#337",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.tooLittleActualInvocationsInOrder(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
    "snippet": "public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n        String message \u003d createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n        \n        throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));\n    }",
    "begin_line": 337,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.noMoreInteractionsWanted#345",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(org.mockito.exceptions.PrintableInvocation)",
    "snippet": "public void noMoreInteractionsWanted(PrintableInvocation undesired) {\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                \"\"\n                ));\n    }",
    "begin_line": 345,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.cannotMockFinalClass#355",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.cannotMockFinalClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public void cannotMockFinalClass(Class\u003c?\u003e clazz) {\n        throw new MockitoException(join(\n                \"Cannot mock/spy \" + clazz.toString(),\n                \"Mockito cannot mock/spy following:\",\n                \"  - final classes\",\n                \"  - anonymous classes\",\n                \"  - primitive types\"\n        ));\n    }",
    "begin_line": 355,
    "end_line": 363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.cannotStubVoidMethodWithAReturnValue#365",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue()",
    "snippet": "public void cannotStubVoidMethodWithAReturnValue() {\n        throw new MockitoException(join(\n                \"Cannot stub a void method with a return value!\",\n                \"Voids are usually stubbed with Throwables:\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\"\n             ));\n    }",
    "begin_line": 365,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.onlyVoidMethodsCanBeSetToDoNothing#373",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.onlyVoidMethodsCanBeSetToDoNothing()",
    "snippet": "public void onlyVoidMethodsCanBeSetToDoNothing() {\n        throw new MockitoException(join(\n                \"Only void methods can doNothing()!\",\n                \"Example of correct use of doNothing():\",\n                \"    doNothing().\",\n                \"    doThrow(new RuntimeException())\",\n                \"    .when(mock).someVoidMethod();\",\n                \"Above means:\",\n                \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n             ));\n    }",
    "begin_line": 373,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.wrongTypeOfReturnValue#385",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.wrongTypeOfReturnValue(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public void wrongTypeOfReturnValue(String expectedType, String actualType, String methodName) {\n        throw new WrongTypeOfReturnValue(join(\n                actualType + \" cannot be returned by \" + methodName + \"()\",\n                methodName + \"() should return \" + expectedType\n                ));\n    }",
    "begin_line": 385,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.wantedAtMostX#392",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.wantedAtMostX(int, int)",
    "snippet": "public void wantedAtMostX(int maxNumberOfInvocations, int foundSize) {\n        throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));\n    }",
    "begin_line": 392,
    "end_line": 394,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.misplacedArgumentMatcher#396",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.misplacedArgumentMatcher(org.mockito.internal.debugging.Location)",
    "snippet": "public void misplacedArgumentMatcher(Location location) {\n        throw new InvalidUseOfMatchersException(join(\n                \"Misplaced argument matcher detected here:\",\n                location,\n                \"\",\n                \"You cannot use argument matchers outside of verification or stubbing.\",\n                \"Examples of correct usage of argument matchers:\",\n                \"    when(mock.get(anyInt())).thenReturn(null);\",\n                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n                \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                \"\",\n                \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n                \"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode() methods.\",                \n                \"\"\n                ));\n    }",
    "begin_line": 396,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.smartNullPointerException#413",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.smartNullPointerException(org.mockito.internal.debugging.Location)",
    "snippet": "public void smartNullPointerException(Location location) {\n        throw new SmartNullPointerException(join(\n                \"You have a NullPointerException here:\",\n                new Location(),\n                \"Because this method was *not* stubbed correctly:\",\n                location,\n                \"\"\n                ));\n    }",
    "begin_line": 413,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.noArgumentValueWasCaptured#423",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.noArgumentValueWasCaptured()",
    "snippet": "public void noArgumentValueWasCaptured() {\n        throw new MockitoException(join(\n                \"No argument value was captured!\",\n                \"You might have forgotten to use argument.capture() in verify()...\",\n                \"...or you used capture() in stubbing but stubbed method was not called.\",\n                \"Be aware that it is recommended to use capture() only with verify()\",\n                \"\",\n                \"Examples of correct argument capturing:\",\n                \"    Argument\u003cPerson\u003e argument \u003d new Argument\u003cPerson\u003e();\",\n                \"    verify(mock).doSomething(argument.capture());\",\n                \"    assertEquals(\\\"John\\\", argument.getValue().getName());\",\n                \"\"\n                ));\n    }",
    "begin_line": 423,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.extraInterfacesDoesNotAcceptNullParameters#438",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.extraInterfacesDoesNotAcceptNullParameters()",
    "snippet": "public void extraInterfacesDoesNotAcceptNullParameters() {\n        throw new MockitoException(join(\n                \"extraInterfaces() does not accept null parameters.\"\n                ));\n    }",
    "begin_line": 438,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.extraInterfacesAcceptsOnlyInterfaces#444",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.extraInterfacesAcceptsOnlyInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public void extraInterfacesAcceptsOnlyInterfaces(Class\u003c?\u003e wrongType) {\n        throw new MockitoException(join(\n                \"extraInterfaces() accepts only interfaces.\",\n                \"You passed following type: \" + wrongType.getSimpleName() + \" which is not an interface.\"\n        ));\n    }",
    "begin_line": 444,
    "end_line": 449,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.extraInterfacesCannotContainMockedType#451",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.extraInterfacesCannotContainMockedType(java.lang.Class\u003c?\u003e)",
    "snippet": "public void extraInterfacesCannotContainMockedType(Class\u003c?\u003e wrongType) {\n        throw new MockitoException(join(\n                \"extraInterfaces() does not accept the same type as the mocked type.\",\n                \"You mocked following type: \" + wrongType.getSimpleName(), \n                \"and you passed the same very interface to the extraInterfaces()\"\n        ));\n    }",
    "begin_line": 451,
    "end_line": 457,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reporter.extraInterfacesRequiresAtLeastOneInterface#459",
    "is_bug": true,
    "src_path": "org/mockito/exceptions/Reporter.java",
    "class_name": "org.mockito.exceptions.Reporter",
    "signature": "org.mockito.exceptions.Reporter.extraInterfacesRequiresAtLeastOneInterface()",
    "snippet": "public void extraInterfacesRequiresAtLeastOneInterface() {\n        throw new MockitoException(join(\n                \"extraInterfaces() requires at least one interface.\"\n        ));\n    }",
    "begin_line": 459,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.MockHandler#44",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.MockHandler(org.mockito.internal.util.MockName, org.mockito.internal.progress.MockingProgress, org.mockito.internal.invocation.MatchersBinder, org.mockito.internal.creation.MockSettingsImpl)",
    "snippet": "public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder, MockSettingsImpl mockSettings) {\r\n        this.mockName \u003d mockName;\r\n        this.mockingProgress \u003d mockingProgress;\r\n        this.matchersBinder \u003d matchersBinder;\r\n        this.mockSettings \u003d mockSettings;\r\n        this.mockitoStubber \u003d new MockitoStubber(mockingProgress);\r\n        this.registeredInvocations \u003d new RegisteredInvocations();\r\n    }",
    "begin_line": 44,
    "end_line": 51,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.MockHandler#53",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.MockHandler(org.mockito.internal.MockHandler\u003cT\u003e)",
    "snippet": "public MockHandler(MockHandler\u003cT\u003e oldMockHandler) {\r\n        this(oldMockHandler.mockName, oldMockHandler.mockingProgress, oldMockHandler.matchersBinder, oldMockHandler.mockSettings);\r\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.intercept#57",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], MethodProxy)",
    "snippet": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\r\n        if (mockitoStubber.hasAnswersForStubbing()) {\r\n            //stubbing voids with stubVoid() or doAnswer() style\r\n            Invocation invocation \u003d new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));\r\n            InvocationMatcher invocationMatcher \u003d matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\r\n            mockitoStubber.setMethodForStubbing(invocationMatcher);\r\n            return null;\r\n        }\r\n        VerificationMode verificationMode \u003d mockingProgress.pullVerificationMode();\r\n\r\n        Invocation invocation \u003d new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));\r\n        InvocationMatcher invocationMatcher \u003d matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\r\n        \r\n        mockingProgress.validateState();\r\n\r\n        if (verificationMode !\u003d null) {\r\n            VerificationDataImpl data \u003d new VerificationDataImpl(registeredInvocations.getAll(), invocationMatcher);\r\n            verificationMode.verify(data);\r\n            return null;\r\n        }\r\n\r\n        registeredInvocations.add(invocationMatcher.getInvocation());\r\n        mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\r\n        OngoingStubbingImpl\u003cT\u003e ongoingStubbing \u003d new OngoingStubbingImpl\u003cT\u003e(mockitoStubber, registeredInvocations);\r\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\r\n\r\n        Answer\u003c?\u003e stubbedAnswer \u003d mockitoStubber.findAnswerFor(invocation);\r\n        if (!invocation.isVoid() \u0026\u0026 stubbedAnswer \u003d\u003d null) {\r\n            //it is a return-value interaction but not stubbed. This *might* be a problem\r\n            mockingProgress.getDebuggingInfo().addPotentiallyUnstubbed(invocationMatcher);\r\n        }\r\n        \r\n        if (stubbedAnswer !\u003d null) {\r\n            mockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\r\n            return stubbedAnswer.answer(invocation);\r\n        } else {\r\n            Object ret \u003d mockSettings.getDefaultAnswer().answer(invocation);\r\n            \r\n            //redo setting invocation for potential stubbing in case of partial mocks / spies.\r\n            //Without it, the real method inside \u0027when\u0027 might have delegated \r\n            //to other self method and overwrite the intended stubbed method with a different one.\r\n            mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\r\n            return ret;\r\n        }\r\n    }",
    "begin_line": 57,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.verifyNoMoreInteractions#103",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.verifyNoMoreInteractions()",
    "snippet": "public void verifyNoMoreInteractions() {\r\n        VerificationDataImpl data \u003d new VerificationDataImpl(registeredInvocations.getAll(), null);\r\n        VerificationModeFactory.noMoreInteractions().verify(data);\r\n    }",
    "begin_line": 103,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.voidMethodStubbable#108",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.voidMethodStubbable(T)",
    "snippet": "public VoidMethodStubbable\u003cT\u003e voidMethodStubbable(T mock) {\r\n        return new VoidMethodStubbableImpl\u003cT\u003e(mock, mockitoStubber);\r\n    }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.getRegisteredInvocations#112",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.getRegisteredInvocations()",
    "snippet": "public List\u003cInvocation\u003e getRegisteredInvocations() {\r\n        return registeredInvocations.getAll();\r\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.getMockName#116",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.getMockName()",
    "snippet": "public MockName getMockName() {\r\n        return mockName;\r\n    }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockHandler.setAnswersForStubbing#121",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockHandler.java",
    "class_name": "org.mockito.internal.MockHandler",
    "signature": "org.mockito.internal.MockHandler.setAnswersForStubbing(java.util.List\u003corg.mockito.stubbing.Answer\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\r\n    public void setAnswersForStubbing(List\u003cAnswer\u003e answers) {\r\n        mockitoStubber.setAnswersForStubbing(answers);\r\n    }",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.mock#36",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.mock(java.lang.Class\u003cT\u003e, org.mockito.MockSettings)",
    "snippet": "public \u003cT\u003e T mock(Class\u003cT\u003e classToMock, MockSettings mockSettings) {\r\n        mockingProgress.validateState();\r\n        mockingProgress.resetOngoingStubbing();\r\n        return mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\r\n    }",
    "begin_line": 36,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.stub#42",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.stub()",
    "snippet": "public IOngoingStubbing stub() {\r\n        IOngoingStubbing stubbing \u003d mockingProgress.pullOngoingStubbing();\r\n        if (stubbing \u003d\u003d null) {\r\n            mockingProgress.reset();\r\n            reporter.missingMethodInvocation();\r\n        }\r\n        return stubbing;\r\n    }",
    "begin_line": 42,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.stub#52",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.stub(T)",
    "snippet": "@Deprecated\r\n    public \u003cT\u003e DeprecatedOngoingStubbing\u003cT\u003e stub(T methodCall) {\r\n        mockingProgress.stubbingStarted();\r\n        return (DeprecatedOngoingStubbing) stub();\r\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.when#57",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.when(T)",
    "snippet": "public \u003cT\u003e OngoingStubbing\u003cT\u003e when(T methodCall) {\r\n        mockingProgress.stubbingStarted();\r\n        return (OngoingStubbing) stub();\r\n    }",
    "begin_line": 57,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.verify#63",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.verify(T, org.mockito.internal.verification.api.VerificationMode)",
    "snippet": "public \u003cT\u003e T verify(T mock, VerificationMode mode) {\r\n        if (mock \u003d\u003d null) {\r\n            reporter.nullPassedToVerify();\r\n        } else if (!mockUtil.isMock(mock)) {\r\n            reporter.notAMockPassedToVerify();\r\n        }\r\n        mockingProgress.verificationStarted(mode);\r\n        return mock;\r\n    }",
    "begin_line": 63,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.reset#73",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.reset(T)",
    "snippet": "public \u003cT\u003e void reset(T ... mocks) {\r\n        mockingProgress.validateState();\r\n        mockingProgress.reset();\r\n        mockingProgress.resetOngoingStubbing();\r\n        \r\n        for (T m : mocks) {\r\n            mockUtil.resetMock(m, mockingProgress);\r\n        }\r\n    }",
    "begin_line": 73,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.verifyNoMoreInteractions#83",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.verifyNoMoreInteractions(java.lang.Object)",
    "snippet": "public void verifyNoMoreInteractions(Object... mocks) {\r\n        assertMocksNotEmpty(mocks);\r\n        mockingProgress.validateState();\r\n        for (Object mock : mocks) {\r\n            try {\r\n                if (mock \u003d\u003d null) {\r\n                    reporter.nullPassedToVerifyNoMoreInteractions();\r\n                }\r\n                mockUtil.getMockHandler(mock).verifyNoMoreInteractions();\r\n            } catch (NotAMockException e) {\r\n                reporter.notAMockPassedToVerifyNoMoreInteractions();\r\n            }\r\n        }\r\n    }",
    "begin_line": 83,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.assertMocksNotEmpty#98",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.assertMocksNotEmpty(java.lang.Object[])",
    "snippet": "private void assertMocksNotEmpty(Object[] mocks) {\r\n        if (mocks \u003d\u003d null || mocks.length \u003d\u003d 0) {\r\n            reporter.mocksHaveToBePassedToVerifyNoMoreInteractions();\r\n        }\r\n    }",
    "begin_line": 98,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.inOrder#104",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.inOrder(java.lang.Object)",
    "snippet": "public InOrder inOrder(Object... mocks) {\r\n        if (mocks \u003d\u003d null || mocks.length \u003d\u003d 0) {\r\n            reporter.mocksHaveToBePassedWhenCreatingInOrder();\r\n        }\r\n        for (Object mock : mocks) {\r\n            if (mock \u003d\u003d null) {\r\n                reporter.nullPassedWhenCreatingInOrder();\r\n            } else if (!mockUtil.isMock(mock)) {\r\n                reporter.notAMockPassedWhenCreatingInOrder();\r\n            }\r\n        }\r\n        InOrder inOrder \u003d new InOrderImpl(Arrays.asList(mocks));\r\n        return inOrder;\r\n    }",
    "begin_line": 104,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.doAnswer#119",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.doAnswer(org.mockito.stubbing.Answer)",
    "snippet": "public Stubber doAnswer(Answer answer) {\r\n        mockingProgress.stubbingStarted();\r\n        mockingProgress.resetOngoingStubbing();\r\n        return new StubberImpl().doAnswer(answer);\r\n    }",
    "begin_line": 119,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.stubVoid#125",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.stubVoid(T)",
    "snippet": "public \u003cT\u003e VoidMethodStubbable\u003cT\u003e stubVoid(T mock) {\r\n        MockHandler\u003cT\u003e handler \u003d mockUtil.getMockHandler(mock);\r\n        mockingProgress.stubbingStarted();\r\n        return handler.voidMethodStubbable(mock);\r\n    }",
    "begin_line": 125,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.validateMockitoUsage#131",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.validateMockitoUsage()",
    "snippet": "public void validateMockitoUsage() {\r\n        mockingProgress.validateState();\r\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoCore.getLastInvocation#138",
    "is_bug": true,
    "src_path": "org/mockito/internal/MockitoCore.java",
    "class_name": "org.mockito.internal.MockitoCore",
    "signature": "org.mockito.internal.MockitoCore.getLastInvocation()",
    "snippet": "public Invocation getLastInvocation() {\r\n        OngoingStubbingImpl ongoingStubbing \u003d ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());\r\n        List\u003cInvocation\u003e allInvocations \u003d ongoingStubbing.getRegisteredInvocations().getAll();\r\n        return allInvocations.get(allInvocations.size()-1);\r\n    }",
    "begin_line": 138,
    "end_line": 142,
    "comment": "/** \n * For testing purposes only. Is not the part of main API.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassPathLoader.loadConfiguration#16",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/ClassPathLoader.java",
    "class_name": "org.mockito.internal.configuration.ClassPathLoader",
    "signature": "org.mockito.internal.configuration.ClassPathLoader.loadConfiguration()",
    "snippet": "@SuppressWarnings({\"unchecked\"})\r\n    public IMockitoConfiguration loadConfiguration() {\r\n        //Trying to get config from classpath\r\n        Class configClass \u003d null;\r\n        try {\r\n            configClass \u003d (Class) Class.forName(\"org.mockito.configuration.MockitoConfiguration\");\r\n        } catch (ClassNotFoundException e) {\r\n            //that\u0027s ok, it means there is no global config, using default one. \r\n            return null;\r\n        }\r\n        \r\n        try {\r\n            return (IMockitoConfiguration) configClass.newInstance();\r\n        } catch (ClassCastException e) {\r\n            throw new MockitoConfigurationException(\"\\n\" +\r\n                    \"MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.\", e);\r\n        } catch (Exception e) {\r\n            throw new MockitoConfigurationException(\"\\n\" +\r\n                    \"Unable to instantianate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?\", e);\r\n        }\r\n    }",
    "begin_line": 16,
    "end_line": 35,
    "comment": "/** \n * @return configuration loaded from classpath or null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultAnnotationEngine.createMockFor#26",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/DefaultAnnotationEngine.java",
    "class_name": "org.mockito.internal.configuration.DefaultAnnotationEngine",
    "signature": "org.mockito.internal.configuration.DefaultAnnotationEngine.createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)",
    "snippet": "@SuppressWarnings(\"deprecation\")\r\n    public Object createMockFor(Annotation annotation, Field field) {\r\n        if (annotation instanceof Mock || annotation instanceof org.mockito.MockitoAnnotations.Mock) {\r\n            return Mockito.mock(field.getType(), field.getName());\r\n        } else {\r\n            return null;\r\n        }\r\n    }",
    "begin_line": 26,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.getIt#22",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.getIt()",
    "snippet": "IMockitoConfiguration getIt() {\r\n        return globalConfiguration.get();\r\n    }",
    "begin_line": 22,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.GlobalConfiguration#26",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.GlobalConfiguration()",
    "snippet": "public GlobalConfiguration() {\r\n        //Configuration should be loaded only once but I cannot really test it\r\n        if (globalConfiguration.get() \u003d\u003d null) {\r\n            globalConfiguration.set(createConfig());\r\n        }\r\n    }",
    "begin_line": 26,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.createConfig#34",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.createConfig()",
    "snippet": "@SuppressWarnings(\"deprecation\")\r\n    private IMockitoConfiguration createConfig() {\r\n        IMockitoConfiguration defaultConfiguration \u003d new DefaultMockitoConfiguration();\r\n        IMockitoConfiguration config \u003d new ClassPathLoader().loadConfiguration();\r\n        if (config !\u003d null) {\r\n            return config;\r\n        } else {\r\n            return defaultConfiguration;\r\n        }\r\n    }",
    "begin_line": 34,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.validate#44",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.validate()",
    "snippet": "public static void validate() {\r\n        new GlobalConfiguration();\r\n    }",
    "begin_line": 44,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.getReturnValues#48",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.getReturnValues()",
    "snippet": "public ReturnValues getReturnValues() {\r\n        return globalConfiguration.get().getReturnValues();\r\n    }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.getAnnotationEngine#52",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.getAnnotationEngine()",
    "snippet": "public AnnotationEngine getAnnotationEngine() {\r\n        return globalConfiguration.get().getAnnotationEngine();\r\n    }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.cleansStackTrace#56",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.cleansStackTrace()",
    "snippet": "public boolean cleansStackTrace() {\r\n        return globalConfiguration.get().cleansStackTrace();\r\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalConfiguration.getDefaultAnswer#60",
    "is_bug": true,
    "src_path": "org/mockito/internal/configuration/GlobalConfiguration.java",
    "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
    "signature": "org.mockito.internal.configuration.GlobalConfiguration.getDefaultAnswer()",
    "snippet": "public Answer\u003cObject\u003e getDefaultAnswer() {\r\n        return globalConfiguration.get().getDefaultAnswer();\r\n    }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodInterceptorFilter.MethodInterceptorFilter#22",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MethodInterceptorFilter.java",
    "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
    "signature": "org.mockito.internal.creation.MethodInterceptorFilter.MethodInterceptorFilter(java.lang.Class, T)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public MethodInterceptorFilter(Class toMock, T delegate) {\n        try {\n            if (toMock.isInterface()) {\n                toMock \u003d Object.class;\n            }\n            equalsMethod \u003d toMock.getMethod(\"equals\", new Class[] { Object.class });\n            hashCodeMethod \u003d toMock.getMethod(\"hashCode\", (Class[]) null);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n                \"\\n please report it to the mocking mailing list at http://mockito.org\");\n        }\n        this.delegate \u003d delegate;\n    }",
    "begin_line": 22,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodInterceptorFilter.intercept#36",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MethodInterceptorFilter.java",
    "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
    "signature": "org.mockito.internal.creation.MethodInterceptorFilter.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], MethodProxy)",
    "snippet": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\n            throws Throwable {\n        if (equalsMethod.equals(method)) {\n            return Boolean.valueOf(proxy \u003d\u003d args[0]);\n        } else if (hashCodeMethod.equals(method)) {\n            return hashCodeForMock(proxy);\n        }\n        \n        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n        \n        return delegate.intercept(proxy, method, args, methodProxy);\n    }",
    "begin_line": 36,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodInterceptorFilter.hashCodeForMock#49",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MethodInterceptorFilter.java",
    "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
    "signature": "org.mockito.internal.creation.MethodInterceptorFilter.hashCodeForMock(java.lang.Object)",
    "snippet": "private int hashCodeForMock(Object mock) {\n        return new Integer(System.identityHashCode(mock));\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodInterceptorFilter.getDelegate#53",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MethodInterceptorFilter.java",
    "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
    "signature": "org.mockito.internal.creation.MethodInterceptorFilter.getDelegate()",
    "snippet": "public T getDelegate() {\n        return delegate;\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.extraInterfaces#18",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.extraInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public MockSettings extraInterfaces(Class\u003c?\u003e... extraInterfaces) {\r\n        if (extraInterfaces \u003d\u003d null || extraInterfaces.length \u003d\u003d 0) {\r\n            new Reporter().extraInterfacesRequiresAtLeastOneInterface();\r\n        }\r\n            \r\n        for (Class\u003c?\u003e i : extraInterfaces) {\r\n            if (i \u003d\u003d null) {\r\n                new Reporter().extraInterfacesDoesNotAcceptNullParameters();\r\n            } else if (!i.isInterface()) {\r\n                new Reporter().extraInterfacesAcceptsOnlyInterfaces(i);\r\n            }\r\n        }\r\n        this.extraInterfaces \u003d extraInterfaces;\r\n        return this;\r\n    }",
    "begin_line": 18,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.getMockName#34",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.getMockName()",
    "snippet": "public String getMockName() {\r\n        return name;\r\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.getExtraInterfaces#38",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.getExtraInterfaces()",
    "snippet": "public Class\u003c?\u003e[] getExtraInterfaces() {\r\n        return extraInterfaces;\r\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.getSpiedInstance#42",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.getSpiedInstance()",
    "snippet": "public Object getSpiedInstance() {\r\n        return spiedInstance;\r\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.name#46",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.name(java.lang.String)",
    "snippet": "public MockSettings name(String name) {\r\n        this.name \u003d name;\r\n        return this;\r\n    }",
    "begin_line": 46,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.spiedInstance#51",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.spiedInstance(java.lang.Object)",
    "snippet": "public MockSettings spiedInstance(Object spiedInstance) {\r\n        this.spiedInstance \u003d spiedInstance;\r\n        return this;\r\n    }",
    "begin_line": 51,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.defaultAnswer#57",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.defaultAnswer(org.mockito.stubbing.Answer)",
    "snippet": "@SuppressWarnings(\"unchecked\")\r\n    public MockSettings defaultAnswer(Answer defaultAnswer) {\r\n        this.defaultAnswer \u003d defaultAnswer;\r\n        return this;\r\n    }",
    "begin_line": 57,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockSettingsImpl.getDefaultAnswer#62",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/MockSettingsImpl.java",
    "class_name": "org.mockito.internal.creation.MockSettingsImpl",
    "signature": "org.mockito.internal.creation.MockSettingsImpl.getDefaultAnswer()",
    "snippet": "public Answer\u003cObject\u003e getDefaultAnswer() {\r\n        return defaultAnswer;\r\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoNamingPolicy.getTag#14",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/cglib/MockitoNamingPolicy.java",
    "class_name": "org.mockito.internal.creation.cglib.MockitoNamingPolicy",
    "signature": "org.mockito.internal.creation.cglib.MockitoNamingPolicy.getTag()",
    "snippet": "@Override\r\n    protected String getTag() {\r\n        return \"ByMockitoWithCGLIB\";\r\n    }",
    "begin_line": 14,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.ClassImposterizer#32",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.ClassImposterizer()",
    "snippet": "private ClassImposterizer() {}",
    "begin_line": 32,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.getClassName#41",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.getClassName(java.lang.String, java.lang.String, java.lang.Object, Predicate)",
    "snippet": "@Override\r\n        public String getClassName(String prefix, String source, Object key, Predicate names) {\r\n            return \"codegen.\" + super.getClassName(prefix, source, key, names);\r\n        }",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.accept#47",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.accept(java.lang.reflect.Method)",
    "snippet": "public int accept(Method method) {\r\n            return method.isBridge() ? 1 : 0;\r\n        }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.canImposterise#52",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.canImposterise(java.lang.Class\u003c?\u003e)",
    "snippet": "public boolean canImposterise(Class\u003c?\u003e type) {\r\n        return !type.isPrimitive() \u0026\u0026 !Modifier.isFinal(type.getModifiers()) \u0026\u0026 !type.isAnonymousClass();\r\n    }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.imposterise#56",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(MethodInterceptor, java.lang.Class\u003cT\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public \u003cT\u003e T imposterise(final MethodInterceptor interceptor, Class\u003cT\u003e mockedType, Class\u003c?\u003e... ancillaryTypes) {\r\n        try {\r\n            setConstructorsAccessible(mockedType, true);\r\n            Class\u003c?\u003e proxyClass \u003d createProxyClass(mockedType, ancillaryTypes);\r\n            return mockedType.cast(createProxy(proxyClass, interceptor));\r\n        } finally {\r\n            setConstructorsAccessible(mockedType, false);\r\n        }\r\n    }",
    "begin_line": 56,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.setConstructorsAccessible#66",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.setConstructorsAccessible(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "private void setConstructorsAccessible(Class\u003c?\u003e mockedType, boolean accessible) {\r\n        for (Constructor\u003c?\u003e constructor : mockedType.getDeclaredConstructors()) {\r\n            constructor.setAccessible(accessible);\r\n        }\r\n    }",
    "begin_line": 66,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.createProxyClass#72",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.createProxyClass(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private \u003cT\u003e Class\u003c?\u003e createProxyClass(Class\u003c?\u003e mockedType, Class\u003c?\u003e...interfaces) {\r\n        if (mockedType \u003d\u003d Object.class) {\r\n            mockedType \u003d ClassWithSuperclassToWorkAroundCglibBug.class;\r\n        }\r\n        \r\n        Enhancer enhancer \u003d new Enhancer() {\r\n            @Override\r\n            @SuppressWarnings(\"unchecked\")\r\n            protected void filterConstructors(Class sc, List constructors) {\r\n                // Don\u0027t filter\r\n            }\r\n        };\r\n        enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\r\n        enhancer.setUseFactory(true);\r\n        if (mockedType.isInterface()) {\r\n            enhancer.setSuperclass(Object.class);\r\n            enhancer.setInterfaces(prepend(mockedType, interfaces));\r\n        } else {\r\n            enhancer.setSuperclass(mockedType);\r\n            enhancer.setInterfaces(interfaces);\r\n        }\r\n        enhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\r\n        enhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\r\n        if (mockedType.getSigners() !\u003d null) {\r\n            enhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\r\n        } else {\r\n            enhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\r\n        }\r\n        \r\n        try {\r\n            return enhancer.createClass(); \r\n        } catch (CodeGenerationException e) {\r\n            if (Modifier.isPrivate(mockedType.getModifiers())) {\r\n                throw new MockitoException(\"\\n\"\r\n                        + \"Mockito cannot mock this class: \" + mockedType \r\n                        + \".\\n\"\r\n                        + \"Most likely it is a private class that is not visible by Mockito\");\r\n            }\r\n            throw new MockitoException(\"\\n\"\r\n                    + \"Mockito cannot mock this class: \" + mockedType \r\n                    + \".\\n\" \r\n                    + \"Mockito can only mock visible \u0026 non-final classes\");\r\n        }\r\n    }",
    "begin_line": 72,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.filterConstructors#80",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.filterConstructors(java.lang.Class, java.util.List)",
    "snippet": "@Override\r\n            @SuppressWarnings(\"unchecked\")\r\n            protected void filterConstructors(Class sc, List constructors) {\r\n                // Don\u0027t filter\r\n            }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.createProxy#117",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.createProxy(java.lang.Class\u003c?\u003e, MethodInterceptor)",
    "snippet": "private Object createProxy(Class\u003c?\u003e proxyClass, final MethodInterceptor interceptor) {\r\n        Factory proxy \u003d (Factory) objenesis.newInstance(proxyClass);\r\n        proxy.setCallbacks(new Callback[] {interceptor, NoOp.INSTANCE});\r\n        return proxy;\r\n    }",
    "begin_line": 117,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassImposterizer.prepend#123",
    "is_bug": true,
    "src_path": "org/mockito/internal/creation/jmock/ClassImposterizer.java",
    "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
    "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.prepend(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private Class\u003c?\u003e[] prepend(Class\u003c?\u003e first, Class\u003c?\u003e... rest) {\r\n        Class\u003c?\u003e[] all \u003d new Class\u003c?\u003e[rest.length+1];\r\n        all[0] \u003d first;\r\n        System.arraycopy(rest, 0, all, 1, rest.length);\r\n        return all;\r\n    }",
    "begin_line": 123,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.addStubbedInvocation#22",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.addStubbedInvocation(org.mockito.internal.invocation.Invocation)",
    "snippet": "public void addStubbedInvocation(Invocation invocation) {\r\n        if (!collectingData) {\r\n            return;\r\n        }\r\n        \r\n        Iterator\u003cInvocationMatcher\u003e unstubbedIterator \u003d unstubbedInvocations.iterator();\r\n        while(unstubbedIterator.hasNext()) {\r\n            InvocationMatcher unstubbed \u003d unstubbedIterator.next();\r\n            if (unstubbed.getInvocation().equals(invocation)) {\r\n                unstubbedIterator.remove();\r\n            }\r\n        }\r\n        \r\n        unusedStubs.add(invocation);\r\n    }",
    "begin_line": 22,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.addPotentiallyUnstubbed#38",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.addPotentiallyUnstubbed(org.mockito.internal.invocation.InvocationMatcher)",
    "snippet": "public void addPotentiallyUnstubbed(InvocationMatcher invocationMatcher) {\r\n        if (!collectingData) {\r\n            return;\r\n        }\r\n        unstubbedInvocations.add(invocationMatcher);\r\n    }",
    "begin_line": 38,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.reportUsedStub#45",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.reportUsedStub(org.mockito.internal.invocation.InvocationMatcher)",
    "snippet": "public void reportUsedStub(InvocationMatcher invocationMatcher) {\r\n        Iterator\u003cInvocation\u003e i \u003d unusedStubs.iterator();\r\n        while(i.hasNext()) {\r\n            Invocation invocation \u003d i.next();\r\n            if (invocationMatcher.matches(invocation)) {\r\n                i.remove();\r\n            }\r\n        }\r\n    }",
    "begin_line": 45,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.collectData#55",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.collectData()",
    "snippet": "public void collectData() {\r\n        collectingData \u003d true;\r\n    }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.clearData#59",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.clearData()",
    "snippet": "public void clearData() {\r\n        collectingData \u003d false;\r\n        unstubbedInvocations.clear();\r\n        unusedStubs.clear();\r\n    }",
    "begin_line": 59,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.printWarnings#65",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.printWarnings(org.mockito.internal.util.MockitoLogger)",
    "snippet": "public void printWarnings(MockitoLogger logger) {\r\n        if (hasData()) {\r\n            WarningsPrinter warningsPrinter \u003d new WarningsPrinter(unusedStubs, unstubbedInvocations);\r\n            warningsPrinter.print(logger);\r\n        }\r\n    }",
    "begin_line": 65,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DebuggingInfo.hasData#72",
    "is_bug": true,
    "src_path": "org/mockito/internal/debugging/DebuggingInfo.java",
    "class_name": "org.mockito.internal.debugging.DebuggingInfo",
    "signature": "org.mockito.internal.debugging.DebuggingInfo.hasData()",
    "snippet": "public boolean hasData() {\r\n        return !unusedStubs.isEmpty() || !unstubbedInvocations.isEmpty();\r\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchersBinder.bindMatchers#16",
    "is_bug": true,
    "src_path": "org/mockito/internal/invocation/MatchersBinder.java",
    "class_name": "org.mockito.internal.invocation.MatchersBinder",
    "signature": "org.mockito.internal.invocation.MatchersBinder.bindMatchers(org.mockito.internal.progress.ArgumentMatcherStorage, org.mockito.internal.invocation.Invocation)",
    "snippet": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n        List\u003cMatcher\u003e lastMatchers \u003d argumentMatcherStorage.pullMatchers();\n        validateMatchers(invocation, lastMatchers);\n\n        InvocationMatcher invocationWithMatchers \u003d new InvocationMatcher(invocation, lastMatchers);\n        return invocationWithMatchers;\n    }",
    "begin_line": 16,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchersBinder.validateMatchers#24",
    "is_bug": true,
    "src_path": "org/mockito/internal/invocation/MatchersBinder.java",
    "class_name": "org.mockito.internal.invocation.MatchersBinder",
    "signature": "org.mockito.internal.invocation.MatchersBinder.validateMatchers(org.mockito.internal.invocation.Invocation, List\u003cMatcher\u003e)",
    "snippet": "private void validateMatchers(Invocation invocation, List\u003cMatcher\u003e matchers) {\n        if (!matchers.isEmpty()) {\n            int recordedMatchersSize \u003d matchers.size();\n            int expectedMatchersSize \u003d invocation.getArgumentsCount();\n            if (expectedMatchersSize !\u003d recordedMatchersSize) {\n                new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n            }\n        }\n    }",
    "begin_line": 24,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.Equals#15",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.Equals(java.lang.Object)",
    "snippet": "public Equals(Object wanted) {\n        this.wanted \u003d wanted;\n    }",
    "begin_line": 15,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.matches#19",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.matches(java.lang.Object)",
    "snippet": "public boolean matches(Object actual) {\n        if (this.wanted \u003d\u003d null) {\n            return actual \u003d\u003d null;\n        }\n        return wanted.equals(actual);\n    }",
    "begin_line": 19,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.describeTo#26",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.describeTo(Description)",
    "snippet": "public void describeTo(Description description) {\n        description.appendText(describe(wanted));\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.describe#30",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.describe(java.lang.Object)",
    "snippet": "public String describe(Object object) {\n        String text \u003d quoting();\n        if (object \u003d\u003d null) {\n            text+\u003d\"null\";\n        } else {\n            text+\u003dobject.toString();\n        }\n        text+\u003d quoting();\n        return text;\n    }",
    "begin_line": 30,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.quoting#41",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.quoting()",
    "snippet": "private String quoting() {\n        if (wanted instanceof String) {\n            return \"\\\"\";\n        } else if (wanted instanceof Character) {\n            return \"\u0027\";\n        } else {\n            return \"\";\n        }\n    }",
    "begin_line": 41,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.getWanted#51",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.getWanted()",
    "snippet": "protected final Object getWanted() {\n        return wanted;\n    }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.equals#56",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (o \u003d\u003d null || !this.getClass().equals(o.getClass())) {\n            return false;\n        }\n        Equals other \u003d (Equals) o;\n        return this.wanted \u003d\u003d null \u0026\u0026 other.wanted \u003d\u003d null || this.wanted !\u003d null \u0026\u0026 this.wanted.equals(other.wanted);\n    }",
    "begin_line": 56,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.hashCode#65",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        throw new UnsupportedOperationException(\"hashCode() is not supported\");\n    }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.withExtraTypeInfo#69",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.withExtraTypeInfo()",
    "snippet": "public SelfDescribing withExtraTypeInfo() {\n        return new SelfDescribing() {\n            public void describeTo(Description description) {\n                description.appendText(describe(\"(\"+ wanted.getClass().getSimpleName() +\") \" + wanted));\n            }};\n    }",
    "begin_line": 69,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.describeTo#71",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.describeTo(Description)",
    "snippet": "public void describeTo(Description description) {\n                description.appendText(describe(\"(\"+ wanted.getClass().getSimpleName() +\") \" + wanted));\n            }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Equals.typeMatches#76",
    "is_bug": true,
    "src_path": "org/mockito/internal/matchers/Equals.java",
    "class_name": "org.mockito.internal.matchers.Equals",
    "signature": "org.mockito.internal.matchers.Equals.typeMatches(java.lang.Object)",
    "snippet": "public boolean typeMatches(Object object) {\n        return wanted !\u003d null \u0026\u0026 object !\u003d null \u0026\u0026 object.getClass() \u003d\u003d wanted.getClass();\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.reportMatcher#29",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportMatcher(Matcher)",
    "snippet": "public HandyReturnValues reportMatcher(Matcher matcher) {\n        matcherStack.push(new LocalizedMatcher(matcher));\n        return new HandyReturnValues();\n    }",
    "begin_line": 29,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.pullMatchers#37",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.pullMatchers()",
    "snippet": "public List\u003cMatcher\u003e pullMatchers() {\n        if (matcherStack.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        List\u003cLocalizedMatcher\u003e matchers \u003d new ArrayList\u003cLocalizedMatcher\u003e(matcherStack);\n        matcherStack.clear();\n        return (List) matchers;\n    }",
    "begin_line": 37,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.reportAnd#50",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportAnd()",
    "snippet": "public HandyReturnValues reportAnd() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n        And and \u003d new And(popLastArgumentMatchers(2));\n        matcherStack.push(new LocalizedMatcher(and));\n        return new HandyReturnValues();\n    }",
    "begin_line": 50,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.reportNot#60",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportNot()",
    "snippet": "public HandyReturnValues reportNot() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n        Not not \u003d new Not(popLastArgumentMatchers(1).get(0));\n        matcherStack.push(new LocalizedMatcher(not));\n        return new HandyReturnValues();\n    }",
    "begin_line": 60,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.popLastArgumentMatchers#67",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.popLastArgumentMatchers(int)",
    "snippet": "private List\u003cMatcher\u003e popLastArgumentMatchers(int count) {\n        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n        assertState(matcherStack.size() \u003e\u003d count,\n                \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n        List\u003cMatcher\u003e result \u003d new LinkedList\u003cMatcher\u003e();\n        result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n        for (int i \u003d 0; i \u003c count; i++) {\n            matcherStack.pop();\n        }\n        return result;\n    }",
    "begin_line": 67,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.assertState#79",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.assertState(boolean, java.lang.String)",
    "snippet": "private void assertState(boolean toAssert, String message) {\n        if (!toAssert) {\n            matcherStack.clear();\n            throw new InvalidUseOfMatchersException(message);\n        }\n    }",
    "begin_line": 79,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.reportOr#89",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportOr()",
    "snippet": "public HandyReturnValues reportOr() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n        Or or \u003d new Or(popLastArgumentMatchers(2));\n        matcherStack.push(new LocalizedMatcher(or));\n        return new HandyReturnValues();\n    }",
    "begin_line": 89,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.validateState#99",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.validateState()",
    "snippet": "public void validateState() {\n        if (!matcherStack.isEmpty()) {\n            LocalizedMatcher lastMatcher \u003d matcherStack.lastElement();\n            matcherStack.clear();\n            new Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n        }\n    }",
    "begin_line": 99,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatcherStorageImpl.reset#110",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
    "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
    "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reset()",
    "snippet": "public void reset() {\n        matcherStack.clear();\n    }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.reportOngoingStubbing#27",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.reportOngoingStubbing(org.mockito.internal.progress.IOngoingStubbing)",
    "snippet": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n        this.iOngoingStubbing \u003d iOngoingStubbing;\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.pullOngoingStubbing#31",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.pullOngoingStubbing()",
    "snippet": "public IOngoingStubbing pullOngoingStubbing() {\n        IOngoingStubbing temp \u003d iOngoingStubbing;\n        iOngoingStubbing \u003d null;\n        return temp;\n    }",
    "begin_line": 31,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.verificationStarted#37",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.verificationStarted(org.mockito.internal.verification.api.VerificationMode)",
    "snippet": "public void verificationStarted(VerificationMode verify) {\n        validateState();\n        resetOngoingStubbing();\n        verificationMode \u003d new Localized(verify);\n    }",
    "begin_line": 37,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.resetOngoingStubbing#46",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.resetOngoingStubbing()",
    "snippet": "public void resetOngoingStubbing() {\n        iOngoingStubbing \u003d null;\n    }",
    "begin_line": 46,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.pullVerificationMode#50",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.pullVerificationMode()",
    "snippet": "public VerificationMode pullVerificationMode() {\n        if (verificationMode \u003d\u003d null) {\n            return null;\n        }\n        \n        VerificationMode temp \u003d verificationMode.getObject();\n        verificationMode \u003d null;\n        return temp;\n    }",
    "begin_line": 50,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.stubbingStarted#60",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.stubbingStarted()",
    "snippet": "public void stubbingStarted() {\n        validateState();\n        stubbingInProgress \u003d new Location();\n    }",
    "begin_line": 60,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.validateState#65",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.validateState()",
    "snippet": "public void validateState() {\n        //State is cool when GlobalConfiguration is already loaded\n        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class \n        GlobalConfiguration.validate();\n        \n        if (verificationMode !\u003d null) {\n            Location location \u003d verificationMode.getLocation();\n            verificationMode \u003d null;\n            reporter.unfinishedVerificationException(location);\n        }\n        \n        if (stubbingInProgress !\u003d null) {\n            Location temp \u003d stubbingInProgress;\n            stubbingInProgress \u003d null;\n            reporter.unfinishedStubbing(temp);\n        }\n      \n        getArgumentMatcherStorage().validateState();\n    }",
    "begin_line": 65,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.stubbingCompleted#85",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.stubbingCompleted(org.mockito.internal.invocation.Invocation)",
    "snippet": "public void stubbingCompleted(Invocation invocation) {\n        debuggingInfo.addStubbedInvocation(invocation);        \n        stubbingInProgress \u003d null;\n    }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.toString#90",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.toString()",
    "snippet": "public String toString() {\n        return  \"iOngoingStubbing: \" + iOngoingStubbing + \n        \", verificationMode: \" + verificationMode +\n        \", stubbingInProgress: \" + stubbingInProgress;\n    }",
    "begin_line": 90,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.reset#96",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.reset()",
    "snippet": "public void reset() {\n        stubbingInProgress \u003d null;\n        verificationMode \u003d null;\n        getArgumentMatcherStorage().reset();\n    }",
    "begin_line": 96,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.getArgumentMatcherStorage#102",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.getArgumentMatcherStorage()",
    "snippet": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\n        return argumentMatcherStorage;\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockingProgressImpl.getDebuggingInfo#106",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/MockingProgressImpl.java",
    "class_name": "org.mockito.internal.progress.MockingProgressImpl",
    "signature": "org.mockito.internal.progress.MockingProgressImpl.getDebuggingInfo()",
    "snippet": "public DebuggingInfo getDebuggingInfo() {\n        return debuggingInfo;\n    }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.threadSafely#15",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.threadSafely()",
    "snippet": "static MockingProgress threadSafely() {\n        if (mockingProgress.get() \u003d\u003d null) {\n            mockingProgress.set(new MockingProgressImpl());\n        }\n        return mockingProgress.get();\n    }",
    "begin_line": 15,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.reportOngoingStubbing#22",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.reportOngoingStubbing(org.mockito.internal.progress.IOngoingStubbing)",
    "snippet": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n        threadSafely().reportOngoingStubbing(iOngoingStubbing);\n    }",
    "begin_line": 22,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.pullOngoingStubbing#26",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.pullOngoingStubbing()",
    "snippet": "public IOngoingStubbing pullOngoingStubbing() {\n        return threadSafely().pullOngoingStubbing();\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.verificationStarted#30",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.verificationStarted(org.mockito.internal.verification.api.VerificationMode)",
    "snippet": "public void verificationStarted(VerificationMode verify) {\n        threadSafely().verificationStarted(verify);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.pullVerificationMode#34",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.pullVerificationMode()",
    "snippet": "public VerificationMode pullVerificationMode() {\n        return threadSafely().pullVerificationMode();\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.stubbingStarted#38",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.stubbingStarted()",
    "snippet": "public void stubbingStarted() {\n        threadSafely().stubbingStarted();\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.validateState#42",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.validateState()",
    "snippet": "public void validateState() {\n        threadSafely().validateState();\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.stubbingCompleted#46",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.stubbingCompleted(org.mockito.internal.invocation.Invocation)",
    "snippet": "public void stubbingCompleted(Invocation invocation) {\n        threadSafely().stubbingCompleted(invocation);\n    }",
    "begin_line": 46,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.toString#50",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.toString()",
    "snippet": "public String toString() {\n        return threadSafely().toString();\n    }",
    "begin_line": 50,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.reset#54",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.reset()",
    "snippet": "public void reset() {\n        threadSafely().reset();\n    }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.resetOngoingStubbing#58",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.resetOngoingStubbing()",
    "snippet": "public void resetOngoingStubbing() {\n        threadSafely().resetOngoingStubbing();\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.getArgumentMatcherStorage#62",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.getArgumentMatcherStorage()",
    "snippet": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\n        return threadSafely().getArgumentMatcherStorage();\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThreadSafeMockingProgress.getDebuggingInfo#66",
    "is_bug": true,
    "src_path": "org/mockito/internal/progress/ThreadSafeMockingProgress.java",
    "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
    "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.getDebuggingInfo()",
    "snippet": "public DebuggingInfo getDebuggingInfo() {\n        return threadSafely().getDebuggingInfo();\n    }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.MockitoStubber#26",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.MockitoStubber(org.mockito.internal.progress.MockingProgress)",
    "snippet": "public MockitoStubber(MockingProgress mockingProgress) {\r\n        this.mockingProgress \u003d mockingProgress;\r\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.setInvocationForPotentialStubbing#30",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.setInvocationForPotentialStubbing(org.mockito.internal.invocation.InvocationMatcher)",
    "snippet": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\r\n        this.invocationForStubbing \u003d invocation;\r\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.addAnswer#34",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswer(org.mockito.stubbing.Answer)",
    "snippet": "public void addAnswer(Answer answer) {\r\n        addAnswer(answer, false);\r\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.addConsecutiveAnswer#38",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.addConsecutiveAnswer(org.mockito.stubbing.Answer)",
    "snippet": "public void addConsecutiveAnswer(Answer answer) {\r\n        addAnswer(answer, true);\r\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.addAnswer#42",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswer(org.mockito.stubbing.Answer, boolean)",
    "snippet": "private void addAnswer(Answer answer, boolean isConsecutive) {\r\n        Invocation invocation \u003d invocationForStubbing.getInvocation();\r\n        mockingProgress.stubbingCompleted(invocation);\r\n        AnswersValidator answersValidator \u003d new AnswersValidator();\r\n        answersValidator.validate(answer, invocation);\r\n        \r\n        if (isConsecutive) {\r\n            stubbed.getFirst().addAnswer(answer);\r\n        } else {\r\n            stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\r\n        }\r\n    }",
    "begin_line": 42,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.answerTo#55",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.answerTo(org.mockito.internal.invocation.Invocation)",
    "snippet": "Object answerTo(Invocation invocation) throws Throwable {\r\n        return findAnswerFor(invocation).answer(invocation);\r\n    }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.findAnswerFor#59",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.findAnswerFor(org.mockito.internal.invocation.Invocation)",
    "snippet": "public Answer\u003c?\u003e findAnswerFor(Invocation invocation) {\r\n        for (StubbedInvocationMatcher s : stubbed) {\r\n            if (s.matches(invocation)) {\r\n                return s;\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }",
    "begin_line": 59,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.addAnswerForVoidMethod#69",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswerForVoidMethod(org.mockito.stubbing.Answer)",
    "snippet": "public void addAnswerForVoidMethod(Answer answer) {\r\n        answersForStubbing.add(answer);\r\n    }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.setAnswersForStubbing#73",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.setAnswersForStubbing(java.util.List\u003corg.mockito.stubbing.Answer\u003e)",
    "snippet": "public void setAnswersForStubbing(List\u003cAnswer\u003e answers) {\r\n        answersForStubbing.addAll(answers);\r\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.hasAnswersForStubbing#77",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.hasAnswersForStubbing()",
    "snippet": "public boolean hasAnswersForStubbing() {\r\n        return !answersForStubbing.isEmpty();\r\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.setMethodForStubbing#81",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.setMethodForStubbing(org.mockito.internal.invocation.InvocationMatcher)",
    "snippet": "public void setMethodForStubbing(InvocationMatcher invocation) {\r\n        invocationForStubbing \u003d invocation;\r\n        assert hasAnswersForStubbing();\r\n        for (int i \u003d 0; i \u003c answersForStubbing.size(); i++) {\r\n            addAnswer(answersForStubbing.get(i), i !\u003d 0);\r\n        }\r\n        answersForStubbing.clear();\r\n    }",
    "begin_line": 81,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockitoStubber.toString#91",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/MockitoStubber.java",
    "class_name": "org.mockito.internal.stubbing.MockitoStubber",
    "signature": "org.mockito.internal.stubbing.MockitoStubber.toString()",
    "snippet": "@Override\r\n    public String toString() {\r\n        return \"invocationForStubbing: \" + invocationForStubbing;\r\n    }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CallsRealMethods.answer#31",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/answers/CallsRealMethods.java",
    "class_name": "org.mockito.internal.stubbing.answers.CallsRealMethods",
    "signature": "org.mockito.internal.stubbing.answers.CallsRealMethods.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(InvocationOnMock invocation) throws Throwable {\r\n        return invocation.callRealMethod();\r\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GloballyConfiguredAnswer.answer#19",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer",
    "signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(InvocationOnMock invocation) throws Throwable {\r\n        return new GlobalConfiguration().getDefaultAnswer().answer(invocation);\r\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsEmptyValues.answer#55",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(InvocationOnMock invocation) {\n        if (Invocation.isToString(invocation)) {\n            Object mock \u003d invocation.getMock();\n            MockName name \u003d new MockUtil().getMockName(mock);\n            if (name.isSurrogate()) {\n                return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n            } else {\n                return name.toString();\n            }\n        }\n        \n        Class\u003c?\u003e returnType \u003d invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
    "begin_line": 55,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsEmptyValues.returnValueFor#70",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.returnValueFor(java.lang.Class\u003c?\u003e)",
    "snippet": "Object returnValueFor(Class\u003c?\u003e type) {\n        if (type.isPrimitive()) {\n            return primitiveOf(type);\n        } else if (Primitives.isPrimitiveWrapper(type)) {\n            return Primitives.primitiveWrapperOf(type);\n        //new instances are used instead of Collections.emptyList(), etc.\n        //to avoid UnsupportedOperationException if code under test modifies returned collection\n        } else if (type \u003d\u003d Collection.class) {\n            return new LinkedList\u003cObject\u003e();\n        } else if (type \u003d\u003d Set.class) {\n            return new HashSet\u003cObject\u003e();\n        } else if (type \u003d\u003d HashSet.class) {\n            return new HashSet\u003cObject\u003e();\n        } else if (type \u003d\u003d SortedSet.class) {\n            return new TreeSet\u003cObject\u003e();\n        } else if (type \u003d\u003d TreeSet.class) {\n            return new TreeSet\u003cObject\u003e();\n        } else if (type \u003d\u003d LinkedHashSet.class) {\n            return new LinkedHashSet\u003cObject\u003e();\n        } else if (type \u003d\u003d List.class) {\n            return new LinkedList\u003cObject\u003e();\n        } else if (type \u003d\u003d LinkedList.class) {\n            return new LinkedList\u003cObject\u003e();\n        } else if (type \u003d\u003d ArrayList.class) {\n            return new ArrayList\u003cObject\u003e();\n        } else if (type \u003d\u003d Map.class) {\n            return new HashMap\u003cObject, Object\u003e();\n        } else if (type \u003d\u003d HashMap.class) {\n            return new HashMap\u003cObject, Object\u003e();\n        } else if (type \u003d\u003d SortedMap.class) {\n            return new TreeMap\u003cObject, Object\u003e();\n        } else if (type \u003d\u003d TreeMap.class) {\n            return new TreeMap\u003cObject, Object\u003e();\n        } else if (type \u003d\u003d LinkedHashMap.class) {\n            return new LinkedHashMap\u003cObject, Object\u003e();\n        }       \n        //Let\u0027s not care about the rest of collections.\n        return null;\n    }",
    "begin_line": 70,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsEmptyValues.primitiveOf#110",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.primitiveOf(java.lang.Class\u003c?\u003e)",
    "snippet": "private Object primitiveOf(Class\u003c?\u003e type) {\n        if (type \u003d\u003d Boolean.TYPE) {\n            return false;\n        } else if (type \u003d\u003d Character.TYPE) {\n            return (char) 0;\n        } else {\n            return 0;\n        } \n    }",
    "begin_line": 110,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsMocks.answer#18",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(InvocationOnMock invocation) throws Throwable {\r\n        Object ret \u003d delegate.answer(invocation);\r\n        if (ret !\u003d null) {\r\n            return ret;\r\n        }\r\n            \r\n        return returnValueFor(invocation.getMethod().getReturnType());\r\n    }",
    "begin_line": 18,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsMocks.returnValueFor#28",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks.returnValueFor(java.lang.Class\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\r\n    Object returnValueFor(Class\u003c?\u003e clazz) {\r\n        if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {\r\n            return null;\r\n        }\r\n        \r\n        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));\r\n    }",
    "begin_line": 28,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsMoreEmptyValues.answer#50",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(InvocationOnMock invocation) throws Throwable {\n        Object ret \u003d delegate.answer(invocation);\n        if (ret !\u003d null) {\n            return ret;\n        }\n\n        Class\u003c?\u003e returnType \u003d invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
    "begin_line": 50,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReturnsMoreEmptyValues.returnValueFor#60",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues.returnValueFor(java.lang.Class\u003c?\u003e)",
    "snippet": "Object returnValueFor(Class\u003c?\u003e type) {\n        if (type \u003d\u003d String.class) {\n            return \"\";\n        }  else if (type.isArray()) {\n            Class\u003c?\u003e componenetType \u003d type.getComponentType();\n            return Array.newInstance(componenetType, 0);\n        }\n        return null;\n    }",
    "begin_line": 60,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThrowingInterceptor.ThrowingInterceptor#43",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.ThrowingInterceptor(org.mockito.invocation.InvocationOnMock)",
    "snippet": "private ThrowingInterceptor(InvocationOnMock invocation) {\r\n            this.invocation \u003d invocation;\r\n        }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThrowingInterceptor.intercept#47",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], MethodProxy)",
    "snippet": "public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\r\n            if (Invocation.isToString(method)) {\r\n                return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\r\n            }\r\n            \r\n            new Reporter().smartNullPointerException(location);\r\n            return null;\r\n        }",
    "begin_line": 47,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ThrowingInterceptor.answer#59",
    "is_bug": true,
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.answer(org.mockito.invocation.InvocationOnMock)",
    "snippet": "public Object answer(final InvocationOnMock invocation) throws Throwable {\r\n        Object defaultReturnValue \u003d delegate.answer(invocation);\r\n        if (defaultReturnValue !\u003d null) {\r\n            return defaultReturnValue;\r\n        }\r\n        Class\u003c?\u003e type \u003d invocation.getMethod().getReturnType();\r\n        if (ClassImposterizer.INSTANCE.canImposterise(type)) {\r\n            return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\r\n        }\r\n        return null;\r\n    }",
    "begin_line": 59,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreationValidator.validateType#13",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/CreationValidator.java",
    "class_name": "org.mockito.internal.util.CreationValidator",
    "signature": "org.mockito.internal.util.CreationValidator.validateType(java.lang.Class)",
    "snippet": "public void validateType(Class classToMock) {\r\n        if (!ClassImposterizer.INSTANCE.canImposterise(classToMock)) {\r\n            new Reporter().cannotMockFinalClass(classToMock);\r\n        }\r\n    }",
    "begin_line": 13,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreationValidator.validateExtraInterfaces#19",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/CreationValidator.java",
    "class_name": "org.mockito.internal.util.CreationValidator",
    "signature": "org.mockito.internal.util.CreationValidator.validateExtraInterfaces(java.lang.Class, java.lang.Class)",
    "snippet": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\r\n        if (extraInterfaces \u003d\u003d null) {\r\n            return;\r\n        }\r\n        \r\n        for (Class i : extraInterfaces) {\r\n            if (classToMock \u003d\u003d i) {\r\n                new Reporter().extraInterfacesCannotContainMockedType(classToMock);\r\n            }\r\n        }\r\n    }",
    "begin_line": 19,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockName.MockName#13",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockName.java",
    "class_name": "org.mockito.internal.util.MockName",
    "signature": "org.mockito.internal.util.MockName.MockName(java.lang.String, java.lang.Class)",
    "snippet": "@SuppressWarnings(\"unchecked\")\r\n    public MockName(String mockName, Class classToMock) {\r\n        if (mockName \u003d\u003d null) {\r\n            this.mockName \u003d toInstanceName(classToMock);\r\n            this.surrogate \u003d true;\r\n        } else {\r\n            this.mockName \u003d mockName;\r\n        }\r\n    }",
    "begin_line": 13,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockName.toInstanceName#22",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockName.java",
    "class_name": "org.mockito.internal.util.MockName",
    "signature": "org.mockito.internal.util.MockName.toInstanceName(java.lang.Class\u003c?\u003e)",
    "snippet": "private static String toInstanceName(Class\u003c?\u003e clazz) {\r\n        String className \u003d clazz.getSimpleName();\r\n        //lower case first letter\r\n        return className.substring(0, 1).toLowerCase() + className.substring(1);\r\n    }",
    "begin_line": 22,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockName.isSurrogate#28",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockName.java",
    "class_name": "org.mockito.internal.util.MockName",
    "signature": "org.mockito.internal.util.MockName.isSurrogate()",
    "snippet": "public boolean isSurrogate() {\r\n        return surrogate;\r\n    }",
    "begin_line": 28,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockName.toString#33",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockName.java",
    "class_name": "org.mockito.internal.util.MockName",
    "signature": "org.mockito.internal.util.MockName.toString()",
    "snippet": "@Override\r\n    public String toString() {\r\n        return mockName;\r\n    }",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.MockUtil#23",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.MockUtil(org.mockito.internal.util.CreationValidator)",
    "snippet": "public MockUtil(CreationValidator creationValidator) {\r\n        this.creationValidator \u003d creationValidator;\r\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.MockUtil#27",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.MockUtil()",
    "snippet": "public MockUtil() {\r\n        this(new CreationValidator());\r\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.createMock#31",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.createMock(java.lang.Class\u003cT\u003e, org.mockito.internal.progress.MockingProgress, org.mockito.internal.creation.MockSettingsImpl)",
    "snippet": "public \u003cT\u003e T createMock(Class\u003cT\u003e classToMock, MockingProgress progress, MockSettingsImpl settings) {\r\n        creationValidator.validateType(classToMock);\r\n        creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\r\n        \r\n        MockName mockName \u003d new MockName(settings.getMockName(), classToMock);\r\n        MockHandler\u003cT\u003e mockHandler \u003d new MockHandler\u003cT\u003e(mockName, progress, new MatchersBinder(), settings);\r\n        MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e filter \u003d new MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e(classToMock, mockHandler);\r\n        Class\u003c?\u003e[] interfaces \u003d settings.getExtraInterfaces();\r\n        Class\u003c?\u003e[] ancillaryTypes \u003d interfaces \u003d\u003d null ? new Class\u003c?\u003e[0] : interfaces;\r\n        Object spiedInstance \u003d settings.getSpiedInstance();\r\n        \r\n        T mock \u003d ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\r\n        \r\n        if (spiedInstance !\u003d null) {\r\n            new LenientCopyTool().copyToMock(spiedInstance, mock);\r\n        }\r\n        \r\n        return mock;\r\n    }",
    "begin_line": 31,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.resetMock#51",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.resetMock(T, org.mockito.internal.progress.MockingProgress)",
    "snippet": "public \u003cT\u003e void resetMock(T mock, MockingProgress progress) {\r\n        MockHandler\u003cT\u003e oldMockHandler \u003d (MockHandler\u003cT\u003e) getMockHandler(mock);\r\n        MockHandler\u003cT\u003e newMockHandler \u003d new MockHandler\u003cT\u003e(oldMockHandler);\r\n        MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e newFilter \u003d new MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e(Object.class, newMockHandler);\r\n        ((Factory) mock).setCallback(0, newFilter);\r\n    }",
    "begin_line": 51,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.getMockHandler#58",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.getMockHandler(T)",
    "snippet": "public \u003cT\u003e MockHandler\u003cT\u003e getMockHandler(T mock) {\r\n        if (mock \u003d\u003d null) {\r\n            throw new NotAMockException(\"Argument should be a mock, but is null!\");\r\n        }\r\n\r\n        if (isMockitoMock(mock)) {\r\n            return getInterceptor(mock).getDelegate();\r\n        } else {\r\n            throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\r\n        }\r\n    }",
    "begin_line": 58,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.isMockitoMock#70",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.isMockitoMock(T)",
    "snippet": "private \u003cT\u003e boolean isMockitoMock(T mock) {\r\n        return Enhancer.isEnhanced(mock.getClass()) \u0026\u0026 getInterceptor(mock) !\u003d null;\r\n    }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.isMock#74",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.isMock(java.lang.Object)",
    "snippet": "public boolean isMock(Object mock) {\r\n        return mock !\u003d null \u0026\u0026 isMockitoMock(mock);\r\n    }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.getInterceptor#79",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.getInterceptor(T)",
    "snippet": "@SuppressWarnings(\"unchecked\")\r\n    private \u003cT\u003e MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e getInterceptor(T mock) {\r\n        Factory factory \u003d (Factory) mock;\r\n        Callback callback \u003d factory.getCallback(0);\r\n        if (callback instanceof MethodInterceptorFilter) {\r\n            return (MethodInterceptorFilter\u003cMockHandler\u003cT\u003e\u003e) callback;\r\n        }\r\n        return null;\r\n    }",
    "begin_line": 79,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MockUtil.getMockName#88",
    "is_bug": true,
    "src_path": "org/mockito/internal/util/MockUtil.java",
    "class_name": "org.mockito.internal.util.MockUtil",
    "signature": "org.mockito.internal.util.MockUtil.getMockName(java.lang.Object)",
    "snippet": "public MockName getMockName(Object mock) {\r\n        return getMockHandler(mock).getMockName();\r\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegisteredInvocations.add#20",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/RegisteredInvocations.java",
    "class_name": "org.mockito.internal.verification.RegisteredInvocations",
    "signature": "org.mockito.internal.verification.RegisteredInvocations.add(org.mockito.internal.invocation.Invocation)",
    "snippet": "public void add(Invocation invocation) {\n        invocations.add(invocation);\n    }",
    "begin_line": 20,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegisteredInvocations.removeLast#24",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/RegisteredInvocations.java",
    "class_name": "org.mockito.internal.verification.RegisteredInvocations",
    "signature": "org.mockito.internal.verification.RegisteredInvocations.removeLast()",
    "snippet": "public void removeLast() {\n        invocations.remove(invocations.size()-1);\n    }",
    "begin_line": 24,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegisteredInvocations.getAll#28",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/RegisteredInvocations.java",
    "class_name": "org.mockito.internal.verification.RegisteredInvocations",
    "signature": "org.mockito.internal.verification.RegisteredInvocations.getAll()",
    "snippet": "public List\u003cInvocation\u003e getAll() {\n        return ListUtil.filter(new LinkedList\u003cInvocation\u003e(invocations), new RemoveToString());\n    }",
    "begin_line": 28,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RemoveToString.isOut#33",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/RegisteredInvocations.java",
    "class_name": "org.mockito.internal.verification.RegisteredInvocations",
    "signature": "org.mockito.internal.verification.RegisteredInvocations.isOut(org.mockito.internal.invocation.Invocation)",
    "snippet": "public boolean isOut(Invocation invocation) {\n            return Invocation.isToString(invocation);\n        }",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes#20",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(List\u003cMatcher\u003e, java.lang.Object[])",
    "snippet": "public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List\u003cMatcher\u003e matchers, Object[] arguments) {\r\n        if (matchers.size() !\u003d arguments.length) {\r\n            return new Integer[0];\r\n        }\r\n        \r\n        List\u003cInteger\u003e suspicious \u003d new LinkedList\u003cInteger\u003e();\r\n        int i \u003d 0;\r\n        for (Matcher m : matchers) {\r\n            if (m instanceof ContainsExtraTypeInformation \r\n                    \u0026\u0026 !safelyMatches(m, arguments[i]) \r\n                    \u0026\u0026 toStringEquals(m, arguments[i])\r\n                    \u0026\u0026 !((ContainsExtraTypeInformation) m).typeMatches(arguments[i])) {\r\n                suspicious.add(i);\r\n            }\r\n            i++;\r\n        }\r\n        return suspicious.toArray(new Integer[0]);\r\n    }",
    "begin_line": 20,
    "end_line": 37,
    "comment": "/** \n * Suspiciously not matching arguments are those that don\u0027t much, the toString() representation is the same but types are different.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatchingTool.safelyMatches#39",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.safelyMatches(Matcher, java.lang.Object)",
    "snippet": "private boolean safelyMatches(Matcher m, Object arg) {\r\n        try {\r\n            return m.matches(arg);\r\n        } catch (Throwable t) {\r\n            return false;\r\n        }\r\n    }",
    "begin_line": 39,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArgumentMatchingTool.toStringEquals#47",
    "is_bug": true,
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.toStringEquals(Matcher, java.lang.Object)",
    "snippet": "private boolean toStringEquals(Matcher m, Object arg) {\r\n        return StringDescription.toString(m).equals(arg.toString());\r\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]