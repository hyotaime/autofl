[
  {
    "class_name": "com.fasterxml.jackson.databind.TestStdDateFormat",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/TestStdDateFormat.java",
    "signature": "com.fasterxml.jackson.databind.TestStdDateFormat.testFactories()",
    "snippet": "public void testFactories() {\n        TimeZone tz \u003d TimeZone.getTimeZone(\"GMT\");\n        Locale loc \u003d Locale.US;\n        assertNotNull(StdDateFormat.getISO8601Format(tz, loc));\n        assertNotNull(StdDateFormat.getRFC1123Format(tz, loc));\n    }",
    "begin_line": 11,
    "end_line": 16,
    "comment": "",
    "child_ranges": [
      "(line 12,col 9)-(line 12,col 50)",
      "(line 13,col 9)-(line 13,col 31)",
      "(line 14,col 9)-(line 14,col 63)",
      "(line 15,col 9)-(line 15,col 63)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.TestStdDateFormat",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/TestStdDateFormat.java",
    "signature": "com.fasterxml.jackson.databind.TestStdDateFormat.testLenient()",
    "snippet": "public void testLenient() throws Exception\n    {\n        StdDateFormat f \u003d StdDateFormat.instance;\n\n        // default should be lenient\n        assertTrue(f.isLenient());\n\n        StdDateFormat f2 \u003d f.clone();\n        assertTrue(f2.isLenient());\n\n        f2.setLenient(false);\n        assertFalse(f2.isLenient());\n\n        f2.setLenient(true);\n        assertTrue(f2.isLenient());\n\n        // and for testing, finally, leave as non-lenient\n        f2.setLenient(false);\n        assertFalse(f2.isLenient());\n        StdDateFormat f3 \u003d f2.clone();\n        assertFalse(f3.isLenient());\n\n        // first, legal dates are... legal\n        Date dt \u003d f3.parse(\"2015-11-30\");\n        assertNotNull(dt);\n\n        // but as importantly, when not lenient, do not allow\n        try {\n            f3.parse(\"2015-11-32\");\n            fail(\"Should not pass\");\n        } catch (ParseException e) {\n            verifyException(e, \"can not parse date\");\n        }\n\n        // ... yet, with lenient, do allow\n        f3.setLenient(true);\n        dt \u003d f3.parse(\"2015-11-32\");\n        assertNotNull(dt);\n    }",
    "begin_line": 19,
    "end_line": 57,
    "comment": "",
    "child_ranges": [
      "(line 21,col 9)-(line 21,col 49)",
      "(line 24,col 9)-(line 24,col 34)",
      "(line 26,col 9)-(line 26,col 37)",
      "(line 27,col 9)-(line 27,col 35)",
      "(line 29,col 9)-(line 29,col 29)",
      "(line 30,col 9)-(line 30,col 36)",
      "(line 32,col 9)-(line 32,col 28)",
      "(line 33,col 9)-(line 33,col 35)",
      "(line 36,col 9)-(line 36,col 29)",
      "(line 37,col 9)-(line 37,col 36)",
      "(line 38,col 9)-(line 38,col 38)",
      "(line 39,col 9)-(line 39,col 36)",
      "(line 42,col 9)-(line 42,col 41)",
      "(line 43,col 9)-(line 43,col 26)",
      "(line 46,col 9)-(line 51,col 9)",
      "(line 54,col 9)-(line 54,col 28)",
      "(line 55,col 9)-(line 55,col 36)",
      "(line 56,col 9)-(line 56,col 26)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.TestStdDateFormat",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/TestStdDateFormat.java",
    "signature": "com.fasterxml.jackson.databind.TestStdDateFormat.testInvalid()",
    "snippet": "public void testInvalid() {\n        StdDateFormat std \u003d new StdDateFormat();\n        try {\n            std.parse(\"foobar\");\n        } catch (java.text.ParseException e) {\n            verifyException(e, \"Can not parse\");\n        }\n    }",
    "begin_line": 59,
    "end_line": 66,
    "comment": "",
    "child_ranges": [
      "(line 60,col 9)-(line 60,col 48)",
      "(line 61,col 9)-(line 65,col 9)"
    ]
  }
]