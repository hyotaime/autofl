[
  {
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_empty_collections_or_null_for_non_collections()",
    "snippet": "@Test public void should_return_empty_collections_or_null_for_non_collections() {\n        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n\n        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n\n        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n\n        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n\n        assertNull(values.returnValueFor(String.class));\n    }",
    "begin_line": 33,
    "end_line": 53,
    "comment": "",
    "child_ranges": [
      "(line 34,col 9)-(line 34,col 85)",
      "(line 36,col 9)-(line 36,col 71)",
      "(line 37,col 9)-(line 37,col 83)",
      "(line 38,col 9)-(line 38,col 79)",
      "(line 39,col 9)-(line 39,col 79)",
      "(line 40,col 9)-(line 40,col 91)",
      "(line 42,col 9)-(line 42,col 73)",
      "(line 43,col 9)-(line 43,col 83)",
      "(line 44,col 9)-(line 44,col 85)",
      "(line 46,col 9)-(line 46,col 71)",
      "(line 47,col 9)-(line 47,col 83)",
      "(line 48,col 9)-(line 48,col 79)",
      "(line 49,col 9)-(line 49,col 79)",
      "(line 50,col 9)-(line 50,col 91)",
      "(line 52,col 9)-(line 52,col 56)"
    ]
  },
  {
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_empty_iterable()",
    "snippet": "@Test\n    public void should_return_empty_iterable() throws Exception {\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "child_ranges": [
      "(line 57,col 9)-(line 57,col 93)"
    ]
  },
  {
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_primitive()",
    "snippet": "@Test public void should_return_primitive() {\n        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));\n        assertEquals((short) 0, values.returnValueFor(Short.TYPE));\n        assertEquals(0, values.returnValueFor(Integer.TYPE));\n        assertEquals(0L, values.returnValueFor(Long.TYPE));\n        assertEquals(0F, values.returnValueFor(Float.TYPE));\n        assertEquals(0D, values.returnValueFor(Double.TYPE));\n    }",
    "begin_line": 60,
    "end_line": 69,
    "comment": "",
    "child_ranges": [
      "(line 61,col 9)-(line 61,col 65)",
      "(line 62,col 9)-(line 62,col 70)",
      "(line 63,col 9)-(line 63,col 65)",
      "(line 64,col 9)-(line 64,col 67)",
      "(line 65,col 9)-(line 65,col 61)",
      "(line 66,col 9)-(line 66,col 59)",
      "(line 67,col 9)-(line 67,col 60)",
      "(line 68,col 9)-(line 68,col 61)"
    ]
  },
  {
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_non_zero_for_compareTo_method()",
    "snippet": "@Test public void should_return_non_zero_for_compareTo_method() {\n        //given\n        Date d \u003d mock(Date.class);\n        d.compareTo(new Date());\n        Invocation compareTo \u003d this.getLastInvocation();\n\n        //when\n        Object result \u003d values.answer(compareTo);\n        \n        //then\n        assertTrue(result !\u003d (Object) 0);\n    }",
    "begin_line": 71,
    "end_line": 82,
    "comment": "",
    "child_ranges": [
      "(line 73,col 9)-(line 73,col 34)",
      "(line 74,col 9)-(line 74,col 32)",
      "(line 75,col 9)-(line 75,col 56)",
      "(line 78,col 9)-(line 78,col 49)",
      "(line 81,col 9)-(line 81,col 41)"
    ]
  },
  {
    "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
    "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_zero_if_mock_is_compared_to_itself()",
    "snippet": "@Test public void should_return_zero_if_mock_is_compared_to_itself() {\n        //given\n        Date d \u003d mock(Date.class);\n        d.compareTo(d);\n        Invocation compareTo \u003d this.getLastInvocation();\n\n        //when\n        Object result \u003d values.answer(compareTo);\n\n        //then\n        assertEquals(0, result);\n    }",
    "begin_line": 84,
    "end_line": 95,
    "comment": "",
    "child_ranges": [
      "(line 86,col 9)-(line 86,col 34)",
      "(line 87,col 9)-(line 87,col 23)",
      "(line 88,col 9)-(line 88,col 56)",
      "(line 91,col 9)-(line 91,col 49)",
      "(line 94,col 9)-(line 94,col 32)"
    ]
  }
]