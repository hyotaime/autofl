[
  {
    "name": "CardinalityHelper.CardinalityHelper#73",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.CardinalityHelper(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public CardinalityHelper(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n            cardinalityA \u003d CollectionUtils.\u003cO\u003egetCardinalityMap(a);\n            cardinalityB \u003d CollectionUtils.\u003cO\u003egetCardinalityMap(b);\n        }",
    "begin_line": 73,
    "end_line": 76,
    "comment": "/** \n * Create a new CardinalityHelper for two collections.\n * @param a  the first collection\n * @param b  the second collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CardinalityHelper.max#83",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.max(java.lang.Object)",
    "snippet": "public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Returns the maximum frequency of an object.\n * @param obj  the object\n * @return the maximum frequency of the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CardinalityHelper.min#92",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.min(java.lang.Object)",
    "snippet": "public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns the minimum frequency of an object.\n * @param obj  the object\n * @return the minimum frequency of the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CardinalityHelper.freqA#101",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.freqA(java.lang.Object)",
    "snippet": "public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Returns the frequency of this object in collection A.\n * @param obj  the object\n * @return the frequency of the object in collection A\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CardinalityHelper.freqB#110",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.freqB(java.lang.Object)",
    "snippet": "public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "/** \n * Returns the frequency of this object in collection B.\n * @param obj  the object\n * @return the frequency of the object in collection B\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CardinalityHelper.getFreq#114",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.getFreq(java.lang.Object, java.util.Map\u003c?,java.lang.Integer\u003e)",
    "snippet": "private int getFreq(final Object obj, final Map\u003c?, Integer\u003e freqMap) {\n            final Integer count \u003d freqMap.get(obj);\n            if (count !\u003d null) {\n                return count.intValue();\n            }\n            return 0;\n        }",
    "begin_line": 114,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.SetOperationCardinalityHelper#140",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public SetOperationCardinalityHelper(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n            super(a, b);\n            elements \u003d new HashSet\u003c\u003e();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList \u003d new ArrayList\u003c\u003e(elements.size());\n        }",
    "begin_line": 140,
    "end_line": 147,
    "comment": "/** \n * Create a new set operation helper from the two collections.\n * @param a  the first collection\n * @param b  the second collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.iterator#150",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.iterator()",
    "snippet": "@Override\n        public Iterator\u003cO\u003e iterator() {\n            return elements.iterator();\n        }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.setCardinality#159",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.setCardinality(O, int)",
    "snippet": "public void setCardinality(final O obj, final int count) {\n            for (int i \u003d 0; i \u003c count; i++) {\n                newList.add(obj);\n            }\n        }",
    "begin_line": 159,
    "end_line": 163,
    "comment": "/** \n * Add the object  {@code count} times to the result collection.\n * @param obj  the object to add\n * @param count  the count\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.list#169",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.list()",
    "snippet": "public Collection\u003cO\u003e list() {\n            return newList;\n        }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "/** \n * Returns the resulting collection.\n * @return the result\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.CollectionUtils#187",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.CollectionUtils()",
    "snippet": "private CollectionUtils() {}",
    "begin_line": 187,
    "end_line": 187,
    "comment": "/** \n * \u003ccode\u003eCollectionUtils\u003c/code\u003e should not normally be instantiated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.emptyCollection#198",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.emptyCollection()",
    "snippet": "@SuppressWarnings(\"unchecked\") emptyCollection() {\n        return EMPTY_COLLECTION;\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Returns the immutable EMPTY_COLLECTION with generic type safety.\n * @see #EMPTY_COLLECTION\n * @since 4.0\n * @param \u003c T \u003e the element type\n * @return immutable empty collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.emptyIfNull#210",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.emptyIfNull(java.util.Collection\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e Collection\u003cT\u003e emptyIfNull(final Collection\u003cT\u003e collection) {\n        return collection \u003d\u003d null ? CollectionUtils.\u003cT\u003eemptyCollection() : collection;\n    }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "/** \n * Returns an immutable empty collection if the argument is \u003ccode\u003enull\u003c/code\u003e, or the argument itself otherwise.\n * @param \u003c T \u003e the element type\n * @param collection the collection, possibly \u003ccode\u003enull\u003c/code\u003e\n * @return an empty collection if the argument is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.union#229",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.union(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e union(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n        final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }",
    "begin_line": 229,
    "end_line": 235,
    "comment": "/** \n * Returns a  {@link Collection} containing the union of the given{@link Iterable}s. \u003cp\u003e The cardinality of each element in the returned  {@link Collection} willbe equal to the maximum of the cardinality of that element in the two given  {@link Iterable}s.\n * @param a the first collection, must not be null\n * @param b the second collection, must not be null\n * @param \u003c O \u003e the generic type that is able to represent the types containedin both input collections.\n * @return the union of the two collections\n * @see Collection#addAll\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.intersection#253",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.intersection(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e intersection(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n        final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }",
    "begin_line": 253,
    "end_line": 259,
    "comment": "/** \n * Returns a  {@link Collection} containing the intersection of the given{@link Iterable}s. \u003cp\u003e The cardinality of each element in the returned  {@link Collection} willbe equal to the minimum of the cardinality of that element in the two given  {@link Iterable}s.\n * @param a the first collection, must not be null\n * @param b the second collection, must not be null\n * @param \u003c O \u003e the generic type that is able to represent the types containedin both input collections.\n * @return the intersection of the two collections\n * @see Collection#retainAll\n * @see #containsAny\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.disjunction#281",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.disjunction(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e disjunction(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n        final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }",
    "begin_line": 281,
    "end_line": 287,
    "comment": "/** \n * Returns a  {@link Collection} containing the exclusive disjunction(symmetric difference) of the given  {@link Iterable}s. \u003cp\u003e The cardinality of each element \u003ci\u003ee\u003c/i\u003e in the returned {@link Collection} will be equal to\u003ccode\u003emax(cardinality(\u003ci\u003ee\u003c/i\u003e,\u003ci\u003ea\u003c/i\u003e),cardinality(\u003ci\u003ee\u003c/i\u003e,\u003ci\u003eb\u003c/i\u003e)) - min(cardinality(\u003ci\u003ee\u003c/i\u003e,\u003ci\u003ea\u003c/i\u003e), cardinality(\u003ci\u003ee\u003c/i\u003e,\u003ci\u003eb\u003c/i\u003e))\u003c/code\u003e. \u003cp\u003e This is equivalent to {@code} {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}or {@code} {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n * @param a the first collection, must not be null\n * @param b the second collection, must not be null\n * @param \u003c O \u003e the generic type that is able to represent the types containedin both input collections.\n * @return the symmetric difference of the two collections\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.subtract#302",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.subtract(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e subtract(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b) {\n        final Predicate\u003cO\u003e p \u003d TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }",
    "begin_line": 302,
    "end_line": 305,
    "comment": "/** \n * Returns a new  {@link Collection} containing {@code \u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e}. The cardinality of each element \u003ci\u003ee\u003c/i\u003e in the returned  {@link Collection}will be the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e minus the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, or zero, whichever is greater.\n * @param a  the collection to subtract from, must not be null\n * @param b  the collection to subtract, must not be null\n * @param \u003c O \u003e the generic type that is able to represent the types containedin both input collections.\n * @return a new collection with the results\n * @see Collection#removeAll\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.subtract#328",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.subtract(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003cO\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e subtract(final Iterable\u003c? extends O\u003e a,\n                                             final Iterable\u003c? extends O\u003e b,\n                                             final Predicate\u003cO\u003e p) {\n        final ArrayList\u003cO\u003e list \u003d new ArrayList\u003c\u003e();\n        final HashBag\u003cO\u003e bag \u003d new HashBag\u003c\u003e();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }",
    "begin_line": 328,
    "end_line": 344,
    "comment": "/** \n * Returns a new  {@link Collection} containing \u003ci\u003ea\u003c/i\u003e minus a subset of\u003ci\u003eb\u003c/i\u003e.  Only the elements of \u003ci\u003eb\u003c/i\u003e that satisfy the predicate condition, \u003ci\u003ep\u003c/i\u003e are subtracted from \u003ci\u003ea\u003c/i\u003e. \u003cp\u003eThe cardinality of each element \u003ci\u003ee\u003c/i\u003e in the returned  {@link Collection}that satisfies the predicate condition will be the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e minus the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, or zero, whichever is greater.\u003c/p\u003e \u003cp\u003eThe cardinality of each element \u003ci\u003ee\u003c/i\u003e in the returned  {@link Collection} that does \u003cb\u003enot\u003c/b\u003esatisfy the predicate condition will be equal to the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e.\u003c/p\u003e\n * @param a  the collection to subtract from, must not be null\n * @param b  the collection to subtract, must not be null\n * @param p  the condition used to determine which elements of \u003ci\u003eb\u003c/i\u003e aresubtracted.\n * @param \u003c O \u003e the generic type that is able to represent the types containedin both input collections.\n * @return a new collection with the results\n * @since 4.0\n * @see Collection#removeAll\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.containsAll#368",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.containsAll(java.util.Collection\u003c?\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean containsAll(final Collection\u003c?\u003e coll1, final Collection\u003c?\u003e coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        }\n        final Iterator\u003c?\u003e it \u003d coll1.iterator();\n        final Set\u003cObject\u003e elementsAlreadySeen \u003d new HashSet\u003c\u003e();\n        for (final Object nextElement : coll2) {\n            if (elementsAlreadySeen.contains(nextElement)) {\n                continue;\n            }\n\n            boolean foundCurrentElement \u003d false;\n            while (it.hasNext()) {\n                final Object p \u003d it.next();\n                elementsAlreadySeen.add(p);\n                if (nextElement \u003d\u003d null ? p \u003d\u003d null : nextElement.equals(p)) {\n                    foundCurrentElement \u003d true;\n                    break;\n                }\n            }\n\n            if (!foundCurrentElement) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 368,
    "end_line": 394,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e iff all elements of  {@code coll2} are also containedin  {@code coll1}. The cardinality of values in  {@code coll2} is not taken into account,which is the same behavior as  {@link Collection#containsAll(Collection)}. \u003cp\u003e In other words, this method returns \u003ccode\u003etrue\u003c/code\u003e iff the {@link #intersection} of \u003ci\u003ecoll1\u003c/i\u003e and \u003ci\u003ecoll2\u003c/i\u003e has the same cardinality asthe set of unique values from  {@code coll2}. In case  {@code coll2} is empty, {@code true}will be returned. \u003cp\u003e This method is intended as a replacement for  {@link Collection#containsAll(Collection)}with a guaranteed runtime complexity of  {@code O(n + m)}. Depending on the type of {@link Collection} provided, this method will be much faster than calling{@link Collection#containsAll(Collection)} instead, though this will come at thecost of an additional space complexity O(n).\n * @param coll1  the first collection, must not be null\n * @param coll2  the second collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff the intersection of the collections has the same cardinalityas the set of unique elements from the second collection\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.containsAny#409",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.containsAny(java.util.Collection\u003c?\u003e, T)",
    "snippet": "public static \u003cT\u003e boolean containsAny(final Collection\u003c?\u003e coll1, @SuppressWarnings(\"unchecked\") final T... coll2) {\n        if (coll1.size() \u003c coll2.length) {\n            for (final Object aColl1 : coll1) {\n                if (ArrayUtils.contains(coll2, aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 409,
    "end_line": 424,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e iff at least one element is in both collections. \u003cp\u003e In other words, this method returns \u003ccode\u003etrue\u003c/code\u003e iff the {@link #intersection} of \u003ci\u003ecoll1\u003c/i\u003e and \u003ci\u003ecoll2\u003c/i\u003e is not empty.\n * @param \u003c T \u003e the type of object to lookup in \u003ccode\u003ecoll1\u003c/code\u003e.\n * @param coll1  the first collection, must not be null\n * @param coll2  the second collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff the intersection of the collections is non-empty\n * @since 4.2\n * @see #intersection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.containsAny#438",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.containsAny(java.util.Collection\u003c?\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean containsAny(final Collection\u003c?\u003e coll1, final Collection\u003c?\u003e coll2) {\n        if (coll1.size() \u003c coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 438,
    "end_line": 453,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e iff at least one element is in both collections. \u003cp\u003e In other words, this method returns \u003ccode\u003etrue\u003c/code\u003e iff the {@link #intersection} of \u003ci\u003ecoll1\u003c/i\u003e and \u003ci\u003ecoll2\u003c/i\u003e is not empty.\n * @param coll1  the first collection, must not be null\n * @param coll2  the second collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff the intersection of the collections is non-empty\n * @since 2.1\n * @see #intersection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.getCardinalityMap#467",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.getCardinalityMap(java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO\u003e Map\u003cO, Integer\u003e getCardinalityMap(final Iterable\u003c? extends O\u003e coll) {\n        final Map\u003cO, Integer\u003e count \u003d new HashMap\u003c\u003e();\n        for (final O obj : coll) {\n            final Integer c \u003d count.get(obj);\n            if (c \u003d\u003d null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }",
    "begin_line": 467,
    "end_line": 478,
    "comment": "/** \n * Returns a  {@link Map} mapping each unique element in the given{@link Collection} to an {@link Integer} representing the numberof occurrences of that element in the  {@link Collection}. \u003cp\u003e Only those elements present in the collection will appear as keys in the map.\n * @param \u003c O \u003e  the type of object in the returned {@link Map}. This is a super type of \u0026lt;I\u0026gt;.\n * @param coll  the collection to get the cardinality map for, must not be null\n * @return the populated cardinality map\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.isSubCollection#492",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isSubCollection(java.util.Collection\u003c?\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean isSubCollection(final Collection\u003c?\u003e a, final Collection\u003c?\u003e b) {\n        final CardinalityHelper\u003cObject\u003e helper \u003d new CardinalityHelper\u003c\u003e(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) \u003e helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 492,
    "end_line": 500,
    "comment": "/** \n * Returns  {@code true} iff \u003ci\u003ea\u003c/i\u003e is a sub-collection of \u003ci\u003eb\u003c/i\u003e,that is, iff the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e is less than or equal to the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, for each element \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e.\n * @param a the first (sub?) collection, must not be null\n * @param b the second (super?) collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff \u003ci\u003ea\u003c/i\u003e is a sub-collection of \u003ci\u003eb\u003c/i\u003e\n * @see #isProperSubCollection\n * @see Collection#containsAll\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.isProperSubCollection#523",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isProperSubCollection(java.util.Collection\u003c?\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean isProperSubCollection(final Collection\u003c?\u003e a, final Collection\u003c?\u003e b) {\n        return a.size() \u003c b.size() \u0026\u0026 CollectionUtils.isSubCollection(a, b);\n    }",
    "begin_line": 523,
    "end_line": 525,
    "comment": "/** \n * Returns  {@code true} iff \u003ci\u003ea\u003c/i\u003e is a \u003ci\u003eproper\u003c/i\u003e sub-collection of \u003ci\u003eb\u003c/i\u003e,that is, iff the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e is less than or equal to the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, for each element \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e, and there is at least one element \u003ci\u003ef\u003c/i\u003e such that the cardinality of \u003ci\u003ef\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e is strictly greater than the cardinality of \u003ci\u003ef\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e. \u003cp\u003e The implementation assumes \u003cul\u003e \u003cli\u003e\u003ccode\u003ea.size()\u003c/code\u003e and \u003ccode\u003eb.size()\u003c/code\u003e represent the total cardinality of \u003ci\u003ea\u003c/i\u003e and \u003ci\u003eb\u003c/i\u003e, resp. \u003c/li\u003e \u003cli\u003e\u003ccode\u003ea.size() \u0026lt; Integer.MAXVALUE\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\n * @param a  the first (sub?) collection, must not be null\n * @param b  the second (super?) collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff \u003ci\u003ea\u003c/i\u003e is a \u003ci\u003eproper\u003c/i\u003e sub-collection of \u003ci\u003eb\u003c/i\u003e\n * @see #isSubCollection\n * @see Collection#containsAll\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.isEqualCollection#539",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isEqualCollection(java.util.Collection\u003c?\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean isEqualCollection(final Collection\u003c?\u003e a, final Collection\u003c?\u003e b) {\n        if(a.size() !\u003d b.size()) {\n            return false;\n        }\n        final CardinalityHelper\u003cObject\u003e helper \u003d new CardinalityHelper\u003c\u003e(a, b);\n        if(helper.cardinalityA.size() !\u003d helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) !\u003d helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 539,
    "end_line": 553,
    "comment": "/** \n * Returns  {@code true} iff the given {@link Collection}s contain exactly the same elements with exactly the same cardinalities. \u003cp\u003e That is, iff the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e is equal to the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, for each element \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e or \u003ci\u003eb\u003c/i\u003e.\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @return \u003ccode\u003etrue\u003c/code\u003e iff the collections contain the same elements with the same cardinalities.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.isEqualCollection#576",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isEqualCollection(java.util.Collection\u003c? extends E\u003e, java.util.Collection\u003c? extends E\u003e, org.apache.commons.collections4.Equator\u003c? super E\u003e)",
    "snippet": "public static \u003cE\u003e boolean isEqualCollection(final Collection\u003c? extends E\u003e a,\n                                                final Collection\u003c? extends E\u003e b,\n                                                final Equator\u003c? super E\u003e equator) {\n        if (equator \u003d\u003d null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() !\u003d b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer\u003cE, ?\u003e transformer \u003d new Transformer() {\n            @Override\n            public EquatorWrapper\u003c?\u003e transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }",
    "begin_line": 576,
    "end_line": 596,
    "comment": "/** \n * Returns  {@code true} iff the given {@link Collection}s contain exactly the same elements with exactly the same cardinalities. \u003cp\u003e That is, iff the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e is equal to the cardinality of \u003ci\u003ee\u003c/i\u003e in \u003ci\u003eb\u003c/i\u003e, for each element \u003ci\u003ee\u003c/i\u003e in \u003ci\u003ea\u003c/i\u003e or \u003ci\u003eb\u003c/i\u003e. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e from version 4.1 onwards this method requires the input collections and equator to be of compatible type (using bounded wildcards). Providing incompatible arguments (e.g. by casting to their rawtypes) will result in a  {@code ClassCastException} thrown at runtime.\n * @param \u003c E \u003e  the element type\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @param equator  the Equator used for testing equality\n * @return \u003ccode\u003etrue\u003c/code\u003e iff the collections contain the same elements with the same cardinalities.\n * @throws NullPointerException if the equator is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetOperationCardinalityHelper.transform#590",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.transform(java.lang.Object)",
    "snippet": "@Override\n            public EquatorWrapper\u003c?\u003e transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }",
    "begin_line": 590,
    "end_line": 592,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.EquatorWrapper#611",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.EquatorWrapper(org.apache.commons.collections4.Equator\u003c? super O\u003e, O)",
    "snippet": "public EquatorWrapper(final Equator\u003c? super O\u003e equator, final O object) {\n            this.equator \u003d equator;\n            this.object \u003d object;\n        }",
    "begin_line": 611,
    "end_line": 614,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.getObject#616",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.getObject()",
    "snippet": "public O getObject() {\n            return object;\n        }",
    "begin_line": 616,
    "end_line": 618,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.equals#621",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper\u003cO\u003e otherObj \u003d (EquatorWrapper\u003cO\u003e) obj;\n            return equator.equate(object, otherObj.getObject());\n        }",
    "begin_line": 621,
    "end_line": 628,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.hashCode#631",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.hashCode()",
    "snippet": "@Override\n        public int hashCode() {\n            return equator.hash(object);\n        }",
    "begin_line": 631,
    "end_line": 633,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.cardinality#648",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.cardinality(O, java.lang.Iterable\u003c? super O\u003e)",
    "snippet": "@Deprecated\n    public static \u003cO\u003e int cardinality(final O obj, final Iterable\u003c? super O\u003e coll) {\n        if (coll \u003d\u003d null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }",
    "begin_line": 648,
    "end_line": 653,
    "comment": "/** \n * Returns the number of occurrences of \u003ci\u003eobj\u003c/i\u003e in \u003ci\u003ecoll\u003c/i\u003e.\n * @param obj the object to find the cardinality of\n * @param coll the {@link Iterable} to search\n * @param \u003c O \u003e the type of object that the {@link Iterable} may contain.\n * @return the number of occurrences of obj in coll\n * @throws NullPointerException if coll is null\n * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable,Object)} instead.Be aware that the order of parameters has changed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.find#668",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.find(java.lang.Iterable\u003cT\u003e, org.apache.commons.collections4.Predicate\u003c? super T\u003e)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T find(final Iterable\u003cT\u003e collection, final Predicate\u003c? super T\u003e predicate) {\n        return predicate !\u003d null ? IterableUtils.find(collection, predicate) : null;\n    }",
    "begin_line": 668,
    "end_line": 670,
    "comment": "/** \n * Finds the first element in the given collection which matches the given predicate. \u003cp\u003e If the input collection or predicate is null, or no element of the collection matches the predicate, null is returned.\n * @param \u003c T \u003e  the type of object the {@link Iterable} contains\n * @param collection  the collection to search, may be null\n * @param predicate  the predicate to use, may be null\n * @return the first element of the collection which matches the predicate or null if none could be found\n * @deprecated since 4.1, use {@link IterableUtils#find(Iterable,Predicate)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.forAllDo#685",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.forAllDo(java.lang.Iterable\u003cT\u003e, C)",
    "snippet": "@Deprecated\n    public static \u003cT, C extends Closure\u003c? super T\u003e\u003e C forAllDo(final Iterable\u003cT\u003e collection, final C closure) {\n        if (closure !\u003d null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }",
    "begin_line": 685,
    "end_line": 690,
    "comment": "/** \n * Executes the given closure on each element in the collection. \u003cp\u003e If the input collection or closure is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Iterable} contains\n * @param \u003c C \u003e  the closure type\n * @param collection  the collection to get the input from, may be null\n * @param closure  the closure to perform, may be null\n * @return closure\n * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable,Closure)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.forAllDo#706",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.forAllDo(java.util.Iterator\u003cT\u003e, C)",
    "snippet": "@Deprecated\n    public static \u003cT, C extends Closure\u003c? super T\u003e\u003e C forAllDo(final Iterator\u003cT\u003e iterator, final C closure) {\n        if (closure !\u003d null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }",
    "begin_line": 706,
    "end_line": 711,
    "comment": "/** \n * Executes the given closure on each element in the collection. \u003cp\u003e If the input collection or closure is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Iterator} contains\n * @param \u003c C \u003e  the closure type\n * @param iterator  the iterator to get the input from, may be null\n * @param closure  the closure to perform, may be null\n * @return closure\n * @since 4.0\n * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator,Closure)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.forAllButLastDo#727",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.forAllButLastDo(java.lang.Iterable\u003cT\u003e, C)",
    "snippet": "@Deprecated\n    public static \u003cT, C extends Closure\u003c? super T\u003e\u003e T forAllButLastDo(final Iterable\u003cT\u003e collection,\n                                                                      final C closure) {\n        return closure !\u003d null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }",
    "begin_line": 727,
    "end_line": 730,
    "comment": "/** \n * Executes the given closure on each but the last element in the collection. \u003cp\u003e If the input collection or closure is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Iterable} contains\n * @param \u003c C \u003e  the closure type\n * @param collection  the collection to get the input from, may be null\n * @param closure  the closure to perform, may be null\n * @return the last element in the collection, or null if either collection or closure is null\n * @since 4.0\n * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable,Closure)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.forAllButLastDo#746",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.forAllButLastDo(java.util.Iterator\u003cT\u003e, C)",
    "snippet": "@Deprecated\n    public static \u003cT, C extends Closure\u003c? super T\u003e\u003e T forAllButLastDo(final Iterator\u003cT\u003e iterator, final C closure) {\n        return closure !\u003d null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }",
    "begin_line": 746,
    "end_line": 748,
    "comment": "/** \n * Executes the given closure on each but the last element in the collection. \u003cp\u003e If the input collection or closure is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Collection} contains\n * @param \u003c C \u003e  the closure type\n * @param iterator  the iterator to get the input from, may be null\n * @param closure  the closure to perform, may be null\n * @return the last element in the collection, or null if either iterator or closure is null\n * @since 4.0\n * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator,Closure)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.filter#761",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.filter(java.lang.Iterable\u003cT\u003e, org.apache.commons.collections4.Predicate\u003c? super T\u003e)",
    "snippet": "public static \u003cT\u003e boolean filter(final Iterable\u003cT\u003e collection, final Predicate\u003c? super T\u003e predicate) {\n        boolean result \u003d false;\n        if (collection !\u003d null \u0026\u0026 predicate !\u003d null) {\n            for (final Iterator\u003cT\u003e it \u003d collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result \u003d true;\n                }\n            }\n        }\n        return result;\n    }",
    "begin_line": 761,
    "end_line": 772,
    "comment": "/** \n * Filter the collection by applying a Predicate to each element. If the predicate returns false, remove the element. \u003cp\u003e If the input collection or predicate is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Iterable} contains\n * @param collection  the collection to get the input from, may be null\n * @param predicate  the predicate to use as a filter, may be null\n * @return true if the collection is modified by this call, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.filterInverse#788",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.filterInverse(java.lang.Iterable\u003cT\u003e, org.apache.commons.collections4.Predicate\u003c? super T\u003e)",
    "snippet": "public static \u003cT\u003e boolean filterInverse(final Iterable\u003cT\u003e collection, final Predicate\u003c? super T\u003e predicate) {\n        return filter(collection, predicate \u003d\u003d null ? null : PredicateUtils.notPredicate(predicate));\n    }",
    "begin_line": 788,
    "end_line": 790,
    "comment": "/** \n * Filter the collection by applying a Predicate to each element. If the predicate returns true, remove the element. \u003cp\u003e This is equivalent to \u003cpre\u003efilter(collection, PredicateUtils.notPredicate(predicate))\u003c/pre\u003e if predicate is !\u003d null. \u003cp\u003e If the input collection or predicate is null, there is no change made.\n * @param \u003c T \u003e  the type of object the {@link Iterable} contains\n * @param collection  the collection to get the input from, may be null\n * @param predicate  the predicate to use as a filter, may be null\n * @return true if the collection is modified by this call, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.transform#809",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.transform(java.util.Collection\u003cC\u003e, org.apache.commons.collections4.Transformer\u003c? super C,? extends C\u003e)",
    "snippet": "public static \u003cC\u003e void transform(final Collection\u003cC\u003e collection,\n                                     final Transformer\u003c? super C, ? extends C\u003e transformer) {\n\n        if (collection !\u003d null \u0026\u0026 transformer !\u003d null) {\n            if (collection instanceof List\u003c?\u003e) {\n                final List\u003cC\u003e list \u003d (List\u003cC\u003e) collection;\n                for (final ListIterator\u003cC\u003e it \u003d list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection\u003cC\u003e resultCollection \u003d collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }",
    "begin_line": 809,
    "end_line": 824,
    "comment": "/** \n * Transform the collection by applying a Transformer to each element. \u003cp\u003e If the input collection or transformer is null, there is no change made. \u003cp\u003e This routine is best for Lists, for which set() is used to do the transformations \"in place.\" For other Collections, clear() and addAll() are used to replace elements. \u003cp\u003e If the input collection controls its input, such as a Set, and the Transformer creates duplicates (or are otherwise invalid), the collection may reduce in size due to calling this method.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the {@link Collection} to get the input from, may be null\n * @param transformer  the transformer to perform, may be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.countMatches#839",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.countMatches(java.lang.Iterable\u003cC\u003e, org.apache.commons.collections4.Predicate\u003c? super C\u003e)",
    "snippet": "@Deprecated\n    public static \u003cC\u003e int countMatches(final Iterable\u003cC\u003e input, final Predicate\u003c? super C\u003e predicate) {\n        return predicate \u003d\u003d null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }",
    "begin_line": 839,
    "end_line": 841,
    "comment": "/** \n * Counts the number of elements in the input collection that match the predicate. \u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e collection or predicate matches no elements.\n * @param \u003c C \u003e  the type of object the {@link Iterable} contains\n * @param input  the {@link Iterable} to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @return the number of matches for the predicate in the collection\n * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable,Predicate)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.exists#856",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.exists(java.lang.Iterable\u003cC\u003e, org.apache.commons.collections4.Predicate\u003c? super C\u003e)",
    "snippet": "@Deprecated\n    public static \u003cC\u003e boolean exists(final Iterable\u003cC\u003e input, final Predicate\u003c? super C\u003e predicate) {\n        return predicate !\u003d null \u0026\u0026 IterableUtils.matchesAny(input, predicate);\n    }",
    "begin_line": 856,
    "end_line": 858,
    "comment": "/** \n * Answers true if a predicate is true for at least one element of a collection. \u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e collection or predicate returns false.\n * @param \u003c C \u003e  the type of object the {@link Iterable} contains\n * @param input  the {@link Iterable} to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @return true if at least one element of the collection matches the predicate\n * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable,Predicate)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.matchesAll#876",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.matchesAll(java.lang.Iterable\u003cC\u003e, org.apache.commons.collections4.Predicate\u003c? super C\u003e)",
    "snippet": "@Deprecated\n    public static \u003cC\u003e boolean matchesAll(final Iterable\u003cC\u003e input, final Predicate\u003c? super C\u003e predicate) {\n        return predicate !\u003d null \u0026\u0026 IterableUtils.matchesAll(input, predicate);\n    }",
    "begin_line": 876,
    "end_line": 878,
    "comment": "/** \n * Answers true if a predicate is true for every element of a collection. \u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e predicate returns false.\u003cbr\u003e A \u003ccode\u003enull\u003c/code\u003e or empty collection returns true.\n * @param \u003c C \u003e  the type of object the {@link Iterable} contains\n * @param input  the {@link Iterable} to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @return true if every element of the collection matches the predicate or if thecollection is empty, false otherwise\n * @since 4.0\n * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable,Predicate)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.select#892",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.select(java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003c? super O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e select(final Iterable\u003c? extends O\u003e inputCollection,\n                                           final Predicate\u003c? super O\u003e predicate) {\n        final Collection\u003cO\u003e answer \u003d inputCollection instanceof Collection\u003c?\u003e ?\n                new ArrayList\u003cO\u003e(((Collection\u003c?\u003e) inputCollection).size()) : new ArrayList\u003cO\u003e();\n        return select(inputCollection, predicate, answer);\n    }",
    "begin_line": 892,
    "end_line": 897,
    "comment": "/** \n * Selects all elements from input collection which match the given predicate into an output collection. \u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e predicate matches no elements.\n * @param \u003c O \u003e  the type of object the {@link Iterable} contains\n * @param inputCollection  the collection to get the input from, may not be null\n * @param predicate  the predicate to use, may be null\n * @return the elements matching the predicate (new list)\n * @throws NullPointerException if the input collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.select#914",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.select(java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003c? super O\u003e, R)",
    "snippet": "public static \u003cO, R extends Collection\u003c? super O\u003e\u003e R select(final Iterable\u003c? extends O\u003e inputCollection,\n            final Predicate\u003c? super O\u003e predicate, final R outputCollection) {\n\n        if (inputCollection !\u003d null \u0026\u0026 predicate !\u003d null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }",
    "begin_line": 914,
    "end_line": 925,
    "comment": "/** \n * Selects all elements from input collection which match the given predicate and adds them to outputCollection. \u003cp\u003e If the input collection or predicate is null, there is no change to the output collection.\n * @param \u003c O \u003e  the type of object the {@link Iterable} contains\n * @param \u003c R \u003e  the type of the output {@link Collection}\n * @param inputCollection  the collection to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @param outputCollection  the collection to output into, may not be null if the inputCollectionand predicate or not null\n * @return the outputCollection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.select#954",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.select(java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003c? super O\u003e, R, R)",
    "snippet": "public static \u003cO, R extends Collection\u003c? super O\u003e\u003e R select(final Iterable\u003c? extends O\u003e inputCollection,\n            final Predicate\u003c? super O\u003e predicate, final R outputCollection, final R rejectedCollection) {\n\n        if (inputCollection !\u003d null \u0026\u0026 predicate !\u003d null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }",
    "begin_line": 954,
    "end_line": 967,
    "comment": "/** \n * Selects all elements from inputCollection into an output and rejected collection, based on the evaluation of the given predicate. \u003cp\u003e Elements matching the predicate are added to the \u003ccode\u003eoutputCollection\u003c/code\u003e, all other elements are added to the \u003ccode\u003erejectedCollection\u003c/code\u003e. \u003cp\u003e If the input predicate is \u003ccode\u003enull\u003c/code\u003e, no elements are added to \u003ccode\u003eoutputCollection\u003c/code\u003e or \u003ccode\u003erejectedCollection\u003c/code\u003e. \u003cp\u003e Note: calling the method is equivalent to the following code snippet: \u003cpre\u003e select(inputCollection, predicate, outputCollection); selectRejected(inputCollection, predicate, rejectedCollection); \u003c/pre\u003e\n * @param \u003c O \u003e  the type of object the {@link Iterable} contains\n * @param \u003c R \u003e  the type of the output {@link Collection}\n * @param inputCollection  the collection to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @param outputCollection  the collection to output selected elements into, may not be null if theinputCollection and predicate are not null\n * @param rejectedCollection  the collection to output rejected elements into, may not be null if theinputCollection or predicate are not null\n * @return the outputCollection\n * @since 4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.selectRejected#982",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.selectRejected(java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003c? super O\u003e)",
    "snippet": "public static \u003cO\u003e Collection\u003cO\u003e selectRejected(final Iterable\u003c? extends O\u003e inputCollection,\n                                                   final Predicate\u003c? super O\u003e predicate) {\n        final Collection\u003cO\u003e answer \u003d inputCollection instanceof Collection\u003c?\u003e ?\n                new ArrayList\u003cO\u003e(((Collection\u003c?\u003e) inputCollection).size()) : new ArrayList\u003cO\u003e();\n        return selectRejected(inputCollection, predicate, answer);\n    }",
    "begin_line": 982,
    "end_line": 987,
    "comment": "/** \n * Selects all elements from inputCollection which don\u0027t match the given predicate into an output collection. \u003cp\u003e If the input predicate is \u003ccode\u003enull\u003c/code\u003e, the result is an empty list.\n * @param \u003c O \u003e  the type of object the {@link Iterable} contains\n * @param inputCollection  the collection to get the input from, may not be null\n * @param predicate  the predicate to use, may be null\n * @return the elements \u003cb\u003enot\u003c/b\u003e matching the predicate (new list)\n * @throws NullPointerException if the input collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.selectRejected#1004",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.selectRejected(java.lang.Iterable\u003c? extends O\u003e, org.apache.commons.collections4.Predicate\u003c? super O\u003e, R)",
    "snippet": "public static \u003cO, R extends Collection\u003c? super O\u003e\u003e R selectRejected(final Iterable\u003c? extends O\u003e inputCollection,\n            final Predicate\u003c? super O\u003e predicate, final R outputCollection) {\n\n        if (inputCollection !\u003d null \u0026\u0026 predicate !\u003d null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }",
    "begin_line": 1004,
    "end_line": 1015,
    "comment": "/** \n * Selects all elements from inputCollection which don\u0027t match the given predicate and adds them to outputCollection. \u003cp\u003e If the input predicate is \u003ccode\u003enull\u003c/code\u003e, no elements are added to \u003ccode\u003eoutputCollection\u003c/code\u003e.\n * @param \u003c O \u003e  the type of object the {@link Iterable} contains\n * @param \u003c R \u003e  the type of the output {@link Collection}\n * @param inputCollection  the collection to get the input from, may be null\n * @param predicate  the predicate to use, may be null\n * @param outputCollection  the collection to output into, may not be null if the inputCollectionand predicate or not null\n * @return outputCollection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collect#1030",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collect(java.lang.Iterable\u003cI\u003e, org.apache.commons.collections4.Transformer\u003c? super I,? extends O\u003e)",
    "snippet": "public static \u003cI, O\u003e Collection\u003cO\u003e collect(final Iterable\u003cI\u003e inputCollection,\n                                               final Transformer\u003c? super I, ? extends O\u003e transformer) {\n        final Collection\u003cO\u003e answer \u003d inputCollection instanceof Collection\u003c?\u003e ?\n                new ArrayList\u003cO\u003e(((Collection\u003c?\u003e) inputCollection).size()) : new ArrayList\u003cO\u003e();\n        return collect(inputCollection, transformer, answer);\n    }",
    "begin_line": 1030,
    "end_line": 1035,
    "comment": "/** \n * Returns a new Collection containing all elements of the input collection transformed by the given transformer. \u003cp\u003e If the input collection or transformer is null, the result is an empty list.\n * @param \u003c I \u003e  the type of object in the input collection\n * @param \u003c O \u003e  the type of object in the output collection\n * @param inputCollection  the collection to get the input from, may not be null\n * @param transformer  the transformer to use, may be null\n * @return the transformed result (new list)\n * @throws NullPointerException if the input collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collect#1049",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collect(java.util.Iterator\u003cI\u003e, org.apache.commons.collections4.Transformer\u003c? super I,? extends O\u003e)",
    "snippet": "public static \u003cI, O\u003e Collection\u003cO\u003e collect(final Iterator\u003cI\u003e inputIterator,\n                                               final Transformer\u003c? super I, ? extends O\u003e transformer) {\n        return collect(inputIterator, transformer, new ArrayList\u003cO\u003e());\n    }",
    "begin_line": 1049,
    "end_line": 1052,
    "comment": "/** \n * Transforms all elements from the input iterator with the given transformer and adds them to the output collection. \u003cp\u003e If the input iterator or transformer is null, the result is an empty list.\n * @param \u003c I \u003e  the type of object in the input collection\n * @param \u003c O \u003e  the type of object in the output collection\n * @param inputIterator  the iterator to get the input from, may be null\n * @param transformer  the transformer to use, may be null\n * @return the transformed result (new list)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collect#1072",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collect(java.lang.Iterable\u003c? extends I\u003e, org.apache.commons.collections4.Transformer\u003c? super I,? extends O\u003e, R)",
    "snippet": "public static \u003cI, O, R extends Collection\u003c? super O\u003e\u003e R collect(final Iterable\u003c? extends I\u003e inputCollection,\n            final Transformer\u003c? super I, ? extends O\u003e transformer, final R outputCollection) {\n        if (inputCollection !\u003d null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }",
    "begin_line": 1072,
    "end_line": 1078,
    "comment": "/** \n * Transforms all elements from input collection with the given transformer and adds them to the output collection. \u003cp\u003e If the input collection or transformer is null, there is no change to the output collection.\n * @param \u003c I \u003e  the type of object in the input collection\n * @param \u003c O \u003e  the type of object in the output collection\n * @param \u003c R \u003e  the type of the output collection\n * @param inputCollection  the collection to get the input from, may be null\n * @param transformer  the transformer to use, may be null\n * @param outputCollection  the collection to output into, may not be null if inputCollectionand transformer are not null\n * @return the output collection with the transformed input added\n * @throws NullPointerException if the outputCollection is null and both, inputCollection andtransformer are not null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collect#1098",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collect(java.util.Iterator\u003c? extends I\u003e, org.apache.commons.collections4.Transformer\u003c? super I,? extends O\u003e, R)",
    "snippet": "public static \u003cI, O, R extends Collection\u003c? super O\u003e\u003e R collect(final Iterator\u003c? extends I\u003e inputIterator,\n            final Transformer\u003c? super I, ? extends O\u003e transformer, final R outputCollection) {\n        if (inputIterator !\u003d null \u0026\u0026 transformer !\u003d null) {\n            while (inputIterator.hasNext()) {\n                final I item \u003d inputIterator.next();\n                final O value \u003d transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }",
    "begin_line": 1098,
    "end_line": 1108,
    "comment": "/** \n * Transforms all elements from the input iterator with the given transformer and adds them to the output collection. \u003cp\u003e If the input iterator or transformer is null, there is no change to the output collection.\n * @param \u003c I \u003e  the type of object in the input collection\n * @param \u003c O \u003e  the type of object in the output collection\n * @param \u003c R \u003e  the type of the output collection\n * @param inputIterator  the iterator to get the input from, may be null\n * @param transformer  the transformer to use, may be null\n * @param outputCollection  the collection to output into, may not be null if inputIteratorand transformer are not null\n * @return the outputCollection with the transformed input added\n * @throws NullPointerException if the output collection is null and both, inputIterator andtransformer are not null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.addIgnoreNull#1121",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.addIgnoreNull(java.util.Collection\u003cT\u003e, T)",
    "snippet": "public static \u003cT\u003e boolean addIgnoreNull(final Collection\u003cT\u003e collection, final T object) {\n        if (collection \u003d\u003d null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object !\u003d null \u0026\u0026 collection.add(object);\n    }",
    "begin_line": 1121,
    "end_line": 1126,
    "comment": "/** \n * Adds an element to the collection unless the element is null.\n * @param \u003c T \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to add to, must not be null\n * @param object  the object to add, if null it will not be added\n * @return true if the collection changed\n * @throws NullPointerException if the collection is null\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.addAll#1139",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.addAll(java.util.Collection\u003cC\u003e, java.lang.Iterable\u003c? extends C\u003e)",
    "snippet": "public static \u003cC\u003e boolean addAll(final Collection\u003cC\u003e collection, final Iterable\u003c? extends C\u003e iterable) {\n        if (iterable instanceof Collection\u003c?\u003e) {\n            return collection.addAll((Collection\u003c? extends C\u003e) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }",
    "begin_line": 1139,
    "end_line": 1144,
    "comment": "/** \n * Adds all elements in the  {@link Iterable} to the given collection. If the{@link Iterable} is a {@link Collection} then it is cast and will beadded using  {@link Collection#addAll(Collection)} instead of iterating.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to add to, must not be null\n * @param iterable  the iterable of elements to add, must not be null\n * @return a boolean indicating whether the collection has changed or not.\n * @throws NullPointerException if the collection or iterator is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.addAll#1155",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.addAll(java.util.Collection\u003cC\u003e, java.util.Iterator\u003c? extends C\u003e)",
    "snippet": "public static \u003cC\u003e boolean addAll(final Collection\u003cC\u003e collection, final Iterator\u003c? extends C\u003e iterator) {\n        boolean changed \u003d false;\n        while (iterator.hasNext()) {\n            changed |\u003d collection.add(iterator.next());\n        }\n        return changed;\n    }",
    "begin_line": 1155,
    "end_line": 1161,
    "comment": "/** \n * Adds all elements in the iteration to the given collection.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to add to, must not be null\n * @param iterator  the iterator of elements to add, must not be null\n * @return a boolean indicating whether the collection has changed or not.\n * @throws NullPointerException if the collection or iterator is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.addAll#1172",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.addAll(java.util.Collection\u003cC\u003e, java.util.Enumeration\u003c? extends C\u003e)",
    "snippet": "public static \u003cC\u003e boolean addAll(final Collection\u003cC\u003e collection, final Enumeration\u003c? extends C\u003e enumeration) {\n        boolean changed \u003d false;\n        while (enumeration.hasMoreElements()) {\n            changed |\u003d collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }",
    "begin_line": 1172,
    "end_line": 1178,
    "comment": "/** \n * Adds all elements in the enumeration to the given collection.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to add to, must not be null\n * @param enumeration  the enumeration of elements to add, must not be null\n * @return {@code true} if the collections was changed, {@code false} otherwise\n * @throws NullPointerException if the collection or enumeration is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.addAll#1189",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.addAll(java.util.Collection\u003cC\u003e, C)",
    "snippet": "public static \u003cC\u003e boolean addAll(final Collection\u003cC\u003e collection, final C... elements) {\n        boolean changed \u003d false;\n        for (final C element : elements) {\n            changed |\u003d collection.add(element);\n        }\n        return changed;\n    }",
    "begin_line": 1189,
    "end_line": 1195,
    "comment": "/** \n * Adds all elements in the array to the given collection.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to add to, must not be null\n * @param elements  the array of elements to add, must not be null\n * @return {@code true} if the collection was changed, {@code false} otherwise\n * @throws NullPointerException if the collection or array is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.get#1213",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator\u003cT\u003e, int)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T get(final Iterator\u003cT\u003e iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }",
    "begin_line": 1213,
    "end_line": 1215,
    "comment": "/** \n * Returns the \u003ccode\u003eindex\u003c/code\u003e-th value in  {@link Iterator}, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element. \u003cp\u003e The Iterator is advanced to \u003ccode\u003eindex\u003c/code\u003e (or to the end, if \u003ccode\u003eindex\u003c/code\u003e exceeds the number of entries) as a side effect of this method.\n * @param iterator  the iterator to get a value from\n * @param index  the index to get\n * @param \u003c T \u003e the type of object in the {@link Iterator}\n * @return the object at the specified index\n * @throws IndexOutOfBoundsException if the index is invalid\n * @throws IllegalArgumentException if the object type is invalid\n * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.checkIndexBounds#1222",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.checkIndexBounds(int)",
    "snippet": "static void checkIndexBounds(final int index) {\n        if (index \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }",
    "begin_line": 1222,
    "end_line": 1226,
    "comment": "/** \n * Ensures an index is not negative.\n * @param index the index to check.\n * @throws IndexOutOfBoundsException if the index is negative.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.get#1242",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.get(java.lang.Iterable\u003cT\u003e, int)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T get(final Iterable\u003cT\u003e iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }",
    "begin_line": 1242,
    "end_line": 1244,
    "comment": "/** \n * Returns the \u003ccode\u003eindex\u003c/code\u003e-th value in the \u003ccode\u003eiterable\u003c/code\u003e\u0027s  {@link Iterator}, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element. \u003cp\u003e If the  {@link Iterable} is a {@link List}, then it will use  {@link List#get(int)}.\n * @param iterable  the {@link Iterable} to get a value from\n * @param index  the index to get\n * @param \u003c T \u003e the type of object in the {@link Iterable}.\n * @return the object at the specified index\n * @throws IndexOutOfBoundsException if the index is invalid\n * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.get#1276",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.get(java.lang.Object, int)",
    "snippet": "public static Object get(final Object object, final int index) {\n        final int i \u003d index;\n        if (i \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map\u003c?,?\u003e) {\n            final Map\u003c?, ?\u003e map \u003d (Map\u003c?, ?\u003e) object;\n            final Iterator\u003c?\u003e iterator \u003d map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator\u003c?\u003e) {\n            final Iterator\u003c?\u003e it \u003d (Iterator\u003c?\u003e) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable\u003c?\u003e) {\n            final Iterable\u003c?\u003e iterable \u003d (Iterable\u003c?\u003e) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Enumeration\u003c?\u003e) {\n            final Enumeration\u003c?\u003e it \u003d (Enumeration\u003c?\u003e) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }",
    "begin_line": 1276,
    "end_line": 1305,
    "comment": "/** \n * Returns the \u003ccode\u003eindex\u003c/code\u003e-th value in \u003ccode\u003eobject\u003c/code\u003e, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element or \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003eobject\u003c/code\u003e is not an instance of one of the supported types. \u003cp\u003e The supported types, and associated semantics are: \u003cul\u003e \u003cli\u003e Map -- the value returned is the \u003ccode\u003eMap.Entry\u003c/code\u003e in position \u003ccode\u003eindex\u003c/code\u003e in the map\u0027s \u003ccode\u003eentrySet\u003c/code\u003e iterator, if there is such an entry.\u003c/li\u003e \u003cli\u003e List -- this method is equivalent to the list\u0027s get method.\u003c/li\u003e \u003cli\u003e Array -- the \u003ccode\u003eindex\u003c/code\u003e-th array entry is returned, if there is such an entry; otherwise an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e is thrown.\u003c/li\u003e \u003cli\u003e Collection -- the value returned is the \u003ccode\u003eindex\u003c/code\u003e-th object returned by the collection\u0027s default iterator, if there is such an element.\u003c/li\u003e \u003cli\u003e Iterator or Enumeration -- the value returned is the \u003ccode\u003eindex\u003c/code\u003e-th object in the Iterator/Enumeration, if there is such an element.  The Iterator/Enumeration is advanced to \u003ccode\u003eindex\u003c/code\u003e (or to the end, if \u003ccode\u003eindex\u003c/code\u003e exceeds the number of entries) as a side effect of this method.\u003c/li\u003e \u003c/ul\u003e\n * @param object  the object to get a value from\n * @param index  the index to get\n * @return the object at the specified index\n * @throws IndexOutOfBoundsException if the index is invalid\n * @throws IllegalArgumentException if the object type is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.get#1318",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.get(java.util.Map\u003cK,V\u003e, int)",
    "snippet": "public static \u003cK,V\u003e Map.Entry\u003cK, V\u003e get(final Map\u003cK,V\u003e map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }",
    "begin_line": 1318,
    "end_line": 1321,
    "comment": "/** \n * Returns the \u003ccode\u003eindex\u003c/code\u003e-th \u003ccode\u003eMap.Entry\u003c/code\u003e in the \u003ccode\u003emap\u003c/code\u003e\u0027s \u003ccode\u003eentrySet\u003c/code\u003e, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element.\n * @param \u003c K \u003e  the key type in the {@link Map}\n * @param \u003c V \u003e  the key type in the {@link Map}\n * @param map  the object to get a value from\n * @param index  the index to get\n * @return the object at the specified index\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.size#1340",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.size(java.lang.Object)",
    "snippet": "public static int size(final Object object) {\n        if (object \u003d\u003d null) {\n            return 0;\n        }\n        int total \u003d 0;\n        if (object instanceof Map\u003c?,?\u003e) {\n            total \u003d ((Map\u003c?, ?\u003e) object).size();\n        } else if (object instanceof Collection\u003c?\u003e) {\n            total \u003d ((Collection\u003c?\u003e) object).size();\n        } else if (object instanceof Iterable\u003c?\u003e) {\n            total \u003d IterableUtils.size((Iterable\u003c?\u003e) object);\n        } else if (object instanceof Object[]) {\n            total \u003d ((Object[]) object).length;\n        } else if (object instanceof Iterator\u003c?\u003e) {\n            total \u003d IteratorUtils.size((Iterator\u003c?\u003e) object);\n        } else if (object instanceof Enumeration\u003c?\u003e) {\n            final Enumeration\u003c?\u003e it \u003d (Enumeration\u003c?\u003e) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total \u003d Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }",
    "begin_line": 1340,
    "end_line": 1369,
    "comment": "/** \n * Gets the size of the collection/iterator specified. \u003cp\u003e This method can handles objects as follows \u003cul\u003e \u003cli\u003eCollection - the collection size \u003cli\u003eMap - the map size \u003cli\u003eArray - the array size \u003cli\u003eIterator - the number of elements remaining in the iterator \u003cli\u003eEnumeration - the number of elements remaining in the enumeration \u003c/ul\u003e\n * @param object  the object to get the size of, may be null\n * @return the size of the specified collection or 0 if the object was null\n * @throws IllegalArgumentException thrown if object is not recognized\n * @since 3.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.sizeIsEmpty#1391",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(java.lang.Object)",
    "snippet": "public static boolean sizeIsEmpty(final Object object) {\n        if (object \u003d\u003d null) {\n            return true;\n        } else if (object instanceof Collection\u003c?\u003e) {\n            return ((Collection\u003c?\u003e) object).isEmpty();\n        } else if (object instanceof Iterable\u003c?\u003e) {\n            return IterableUtils.isEmpty((Iterable\u003c?\u003e) object);\n        } else if (object instanceof Map\u003c?, ?\u003e) {\n            return ((Map\u003c?, ?\u003e) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length \u003d\u003d 0;\n        } else if (object instanceof Iterator\u003c?\u003e) {\n            return ((Iterator\u003c?\u003e) object).hasNext() \u003d\u003d false;\n        } else if (object instanceof Enumeration\u003c?\u003e) {\n            return ((Enumeration\u003c?\u003e) object).hasMoreElements() \u003d\u003d false;\n        } else {\n            try {\n                return Array.getLength(object) \u003d\u003d 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }",
    "begin_line": 1391,
    "end_line": 1413,
    "comment": "/** \n * Checks if the specified collection/array/iterator is empty. \u003cp\u003e This method can handles objects as follows \u003cul\u003e \u003cli\u003eCollection - via collection isEmpty \u003cli\u003eMap - via map isEmpty \u003cli\u003eArray - using array size \u003cli\u003eIterator - via hasNext \u003cli\u003eEnumeration - via hasMoreElements \u003c/ul\u003e \u003cp\u003e Note: This method is named to avoid clashing with {@link #isEmpty(Collection)}.\n * @param object  the object to get the size of, may be null\n * @return true if empty or null\n * @throws IllegalArgumentException thrown if object is not recognized\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.isEmpty#1425",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isEmpty(java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean isEmpty(final Collection\u003c?\u003e coll) {\n        return coll \u003d\u003d null || coll.isEmpty();\n    }",
    "begin_line": 1425,
    "end_line": 1427,
    "comment": "/** \n * Null-safe check if the specified collection is empty. \u003cp\u003e Null returns true.\n * @param coll  the collection to check, may be null\n * @return true if empty or null\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.isNotEmpty#1438",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isNotEmpty(java.util.Collection\u003c?\u003e)",
    "snippet": "public static boolean isNotEmpty(final Collection\u003c?\u003e coll) {\n        return !isEmpty(coll);\n    }",
    "begin_line": 1438,
    "end_line": 1440,
    "comment": "/** \n * Null-safe check if the specified collection is not empty. \u003cp\u003e Null returns false.\n * @param coll  the collection to check, may be null\n * @return true if non-null and non-empty\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.reverseArray#1448",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.reverseArray(java.lang.Object[])",
    "snippet": "public static void reverseArray(final Object[] array) {\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        Object tmp;\n\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1448,
    "end_line": 1460,
    "comment": "/** \n * Reverses the order of the given array.\n * @param array  the array to reverse\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.isFull#1477",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.isFull(java.util.Collection\u003c? extends java.lang.Object\u003e)",
    "snippet": "public static boolean isFull(final Collection\u003c? extends Object\u003e coll) {\n        if (coll \u003d\u003d null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection\u003c?\u003e) coll).isFull();\n        }\n        try {\n            final BoundedCollection\u003c?\u003e bcoll \u003d\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }",
    "begin_line": 1477,
    "end_line": 1491,
    "comment": "/** \n * Returns true if no more elements can be added to the Collection. \u003cp\u003e This method uses the  {@link BoundedCollection} interface to determine thefull status. If the collection does not implement this interface then false is returned. \u003cp\u003e The collection does not have to implement this interface directly. If the collection has been decorated using the decorators subpackage then these will be removed to access the BoundedCollection.\n * @param coll  the collection to check\n * @return true if the BoundedCollection is full\n * @throws NullPointerException if the collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.maxSize#1508",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.maxSize(java.util.Collection\u003c? extends java.lang.Object\u003e)",
    "snippet": "public static int maxSize(final Collection\u003c? extends Object\u003e coll) {\n        if (coll \u003d\u003d null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection\u003c?\u003e) coll).maxSize();\n        }\n        try {\n            final BoundedCollection\u003c?\u003e bcoll \u003d\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }",
    "begin_line": 1508,
    "end_line": 1522,
    "comment": "/** \n * Get the maximum number of elements that the Collection can contain. \u003cp\u003e This method uses the  {@link BoundedCollection} interface to determine themaximum size. If the collection does not implement this interface then -1 is returned. \u003cp\u003e The collection does not have to implement this interface directly. If the collection has been decorated using the decorators subpackage then these will be removed to access the BoundedCollection.\n * @param coll  the collection to check\n * @return the maximum size of the BoundedCollection, -1 if no maximum size\n * @throws NullPointerException if the collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collate#1538",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e)",
    "snippet": "public static \u003cO extends Comparable\u003c? super O\u003e\u003e List\u003cO\u003e collate(final Iterable\u003c? extends O\u003e a,\n                                                                    final Iterable\u003c? extends O\u003e b) {\n        return collate(a, b, ComparatorUtils.\u003cO\u003enaturalComparator(), true);\n    }",
    "begin_line": 1538,
    "end_line": 1541,
    "comment": "/** \n * Merges two sorted Collections, a and b, into a single, sorted List such that the natural ordering of the elements is retained. \u003cp\u003e Uses the standard O(n) merge algorithm for combining two sorted lists.\n * @param \u003c O \u003e  the element type\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @return a new sorted List, containing the elements of Collection a and b\n * @throws NullPointerException if either collection is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collate#1558",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e, boolean)",
    "snippet": "public static \u003cO extends Comparable\u003c? super O\u003e\u003e List\u003cO\u003e collate(final Iterable\u003c? extends O\u003e a,\n                                                                    final Iterable\u003c? extends O\u003e b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.\u003cO\u003enaturalComparator(), includeDuplicates);\n    }",
    "begin_line": 1558,
    "end_line": 1562,
    "comment": "/** \n * Merges two sorted Collections, a and b, into a single, sorted List such that the natural ordering of the elements is retained. \u003cp\u003e Uses the standard O(n) merge algorithm for combining two sorted lists.\n * @param \u003c O \u003e  the element type\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwisethey will be removed in the output collection\n * @return a new sorted List, containing the elements of Collection a and b\n * @throws NullPointerException if either collection is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collate#1578",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e, java.util.Comparator\u003c? super O\u003e)",
    "snippet": "public static \u003cO\u003e List\u003cO\u003e collate(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b,\n                                      final Comparator\u003c? super O\u003e c) {\n        return collate(a, b, c, true);\n    }",
    "begin_line": 1578,
    "end_line": 1581,
    "comment": "/** \n * Merges two sorted Collections, a and b, into a single, sorted List such that the ordering of the elements according to Comparator c is retained. \u003cp\u003e Uses the standard O(n) merge algorithm for combining two sorted lists.\n * @param \u003c O \u003e  the element type\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @param c  the comparator to use for the merge.\n * @return a new sorted List, containing the elements of Collection a and b\n * @throws NullPointerException if either collection or the comparator is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.collate#1599",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u003c? extends O\u003e, java.lang.Iterable\u003c? extends O\u003e, java.util.Comparator\u003c? super O\u003e, boolean)",
    "snippet": "public static \u003cO\u003e List\u003cO\u003e collate(final Iterable\u003c? extends O\u003e a, final Iterable\u003c? extends O\u003e b,\n                                      final Comparator\u003c? super O\u003e c, final boolean includeDuplicates) {\n\n        if (a \u003d\u003d null || b \u003d\u003d null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c \u003d\u003d null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize \u003d a instanceof Collection\u003c?\u003e \u0026\u0026 b instanceof Collection\u003c?\u003e ?\n                Math.max(1, ((Collection\u003c?\u003e) a).size() + ((Collection\u003c?\u003e) b).size()) : 10;\n\n        final Iterator\u003cO\u003e iterator \u003d new CollatingIterator\u003c\u003e(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        }\n        final ArrayList\u003cO\u003e mergedList \u003d new ArrayList\u003c\u003e(totalSize);\n\n        O lastItem \u003d null;\n        while (iterator.hasNext()) {\n            final O item \u003d iterator.next();\n            if (lastItem \u003d\u003d null || !lastItem.equals(item)) {\n                mergedList.add(item);\n            }\n            lastItem \u003d item;\n        }\n\n        mergedList.trimToSize();\n        return mergedList;\n    }",
    "begin_line": 1599,
    "end_line": 1630,
    "comment": "/** \n * Merges two sorted Collections, a and b, into a single, sorted List such that the ordering of the elements according to Comparator c is retained. \u003cp\u003e Uses the standard O(n) merge algorithm for combining two sorted lists.\n * @param \u003c O \u003e  the element type\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @param c  the comparator to use for the merge.\n * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwisethey will be removed in the output collection\n * @return a new sorted List, containing the elements of Collection a and b\n * @throws NullPointerException if either collection or the comparator is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.permutations#1652",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.permutations(java.util.Collection\u003cE\u003e)",
    "snippet": "public static \u003cE\u003e Collection\u003cList\u003cE\u003e\u003e permutations(final Collection\u003cE\u003e collection) {\n        final PermutationIterator\u003cE\u003e it \u003d new PermutationIterator\u003c\u003e(collection);\n        final Collection\u003cList\u003cE\u003e\u003e result \u003d new ArrayList\u003c\u003e();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }",
    "begin_line": 1652,
    "end_line": 1659,
    "comment": "/** \n * Returns a  {@link Collection} of all the permutations of the input collection.\u003cp\u003e NOTE: the number of permutations of a given collection is equal to n!, where n is the size of the collection. Thus, the resulting collection will become \u003cb\u003every\u003c/b\u003e large for collections \u0026gt; 10 (e.g. 10! \u003d 3628800, 15! \u003d 1307674368000). \u003cp\u003e For larger collections it is advised to use a  {@link PermutationIterator} toiterate over all permutations.\n * @see PermutationIterator\n * @param \u003c E \u003e  the element type\n * @param collection  the collection to create permutations for, may not be null\n * @return an unordered collection of all permutations of the input collection\n * @throws NullPointerException if collection is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.retainAll#1684",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.retainAll(java.util.Collection\u003cC\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static \u003cC\u003e Collection\u003cC\u003e retainAll(final Collection\u003cC\u003e collection, final Collection\u003c?\u003e retain) {\n        return ListUtils.retainAll(collection, retain);\n    }",
    "begin_line": 1684,
    "end_line": 1686,
    "comment": "/** \n * Returns a collection containing all the elements in \u003ccode\u003ecollection\u003c/code\u003e that are also in \u003ccode\u003eretain\u003c/code\u003e. The cardinality of an element \u003ccode\u003ee\u003c/code\u003e in the returned collection is the same as the cardinality of \u003ccode\u003ee\u003c/code\u003e in \u003ccode\u003ecollection\u003c/code\u003e unless \u003ccode\u003eretain\u003c/code\u003e does not contain \u003ccode\u003ee\u003c/code\u003e, in which case the cardinality is zero. This method is useful if you do not wish to modify the collection \u003ccode\u003ec\u003c/code\u003e and thus cannot call \u003ccode\u003ec.retainAll(retain);\u003c/code\u003e. \u003cp\u003e This implementation iterates over \u003ccode\u003ecollection\u003c/code\u003e, checking each element in turn to see if it\u0027s contained in \u003ccode\u003eretain\u003c/code\u003e. If it\u0027s contained, it\u0027s added to the returned list. As a consequence, it is advised to use a collection type for \u003ccode\u003eretain\u003c/code\u003e that provides a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection whose contents are the target of the #retailAll operation\n * @param retain  the collection containing the elements to be retained in the returned collection\n * @return a \u003ccode\u003eCollection\u003c/code\u003e containing all the elements of \u003ccode\u003ecollection\u003c/code\u003ethat occur at least once in \u003ccode\u003eretain\u003c/code\u003e.\n * @throws NullPointerException if either parameter is null\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.retainAll#1713",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.retainAll(java.lang.Iterable\u003cE\u003e, java.lang.Iterable\u003c? extends E\u003e, org.apache.commons.collections4.Equator\u003c? super E\u003e)",
    "snippet": "public static \u003cE\u003e Collection\u003cE\u003e retainAll(final Iterable\u003cE\u003e collection,\n                                              final Iterable\u003c? extends E\u003e retain,\n                                              final Equator\u003c? super E\u003e equator) {\n\n        final Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e transformer \u003d new Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e() {\n            @Override\n            public EquatorWrapper\u003cE\u003e transform(final E input) {\n                return new EquatorWrapper\u003c\u003e(equator, input);\n            }\n        };\n\n        final Set\u003cEquatorWrapper\u003cE\u003e\u003e retainSet \u003d\n                collect(retain, transformer, new HashSet\u003cEquatorWrapper\u003cE\u003e\u003e());\n\n        final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper\u003c\u003e(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }",
    "begin_line": 1713,
    "end_line": 1734,
    "comment": "/** \n * Returns a collection containing all the elements in \u003ccode\u003ecollection\u003c/code\u003e that are also in \u003ccode\u003eretain\u003c/code\u003e. The cardinality of an element \u003ccode\u003ee\u003c/code\u003e in the returned collection is the same as the cardinality of \u003ccode\u003ee\u003c/code\u003e in \u003ccode\u003ecollection\u003c/code\u003e unless \u003ccode\u003eretain\u003c/code\u003e does not contain \u003ccode\u003ee\u003c/code\u003e, in which case the cardinality is zero. This method is useful if you do not wish to modify the collection \u003ccode\u003ec\u003c/code\u003e and thus cannot call \u003ccode\u003ec.retainAll(retain);\u003c/code\u003e. \u003cp\u003e Moreover this method uses an  {@link Equator} instead of{@link Object#equals(Object)} to determine the equality of the elementsin \u003ccode\u003ecollection\u003c/code\u003e and \u003ccode\u003eretain\u003c/code\u003e. Hence this method is useful in cases where the equals behavior of an object needs to be modified without changing the object itself.\n * @param \u003c E \u003e the type of object the {@link Collection} contains\n * @param collection the collection whose contents are the target of the {@code retainAll} operation\n * @param retain the collection containing the elements to be retained in the returned collection\n * @param equator the Equator used for testing equality\n * @return a \u003ccode\u003eCollection\u003c/code\u003e containing all the elements of \u003ccode\u003ecollection\u003c/code\u003ethat occur at least once in \u003ccode\u003eretain\u003c/code\u003e according to the \u003ccode\u003eequator\u003c/code\u003e\n * @throws NullPointerException if any of the parameters is null\n * @since 4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.transform#1719",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.transform(E)",
    "snippet": "@Override\n            public EquatorWrapper\u003cE\u003e transform(final E input) {\n                return new EquatorWrapper\u003c\u003e(equator, input);\n            }",
    "begin_line": 1719,
    "end_line": 1721,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.removeAll#1759",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.removeAll(java.util.Collection\u003cE\u003e, java.util.Collection\u003c?\u003e)",
    "snippet": "public static \u003cE\u003e Collection\u003cE\u003e removeAll(final Collection\u003cE\u003e collection, final Collection\u003c?\u003e remove) {\n        return ListUtils.removeAll(collection, remove);\n  }",
    "begin_line": 1759,
    "end_line": 1761,
    "comment": "/** \n * Removes the elements in \u003ccode\u003eremove\u003c/code\u003e from \u003ccode\u003ecollection\u003c/code\u003e. That is, this method returns a collection containing all the elements in \u003ccode\u003ec\u003c/code\u003e that are not in \u003ccode\u003eremove\u003c/code\u003e. The cardinality of an element \u003ccode\u003ee\u003c/code\u003e in the returned collection is the same as the cardinality of \u003ccode\u003ee\u003c/code\u003e in \u003ccode\u003ecollection\u003c/code\u003e unless \u003ccode\u003eremove\u003c/code\u003e contains \u003ccode\u003ee\u003c/code\u003e, in which case the cardinality is zero. This method is useful if you do not wish to modify the collection \u003ccode\u003ec\u003c/code\u003e and thus cannot call \u003ccode\u003ecollection.removeAll(remove);\u003c/code\u003e. \u003cp\u003e This implementation iterates over \u003ccode\u003ecollection\u003c/code\u003e, checking each element in turn to see if it\u0027s contained in \u003ccode\u003eremove\u003c/code\u003e. If it\u0027s not contained, it\u0027s added to the returned list. As a consequence, it is advised to use a collection type for \u003ccode\u003eremove\u003c/code\u003e that provides a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.\n * @param \u003c E \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection from which items are removed (in the returned collection)\n * @param remove  the items to be removed from the returned \u003ccode\u003ecollection\u003c/code\u003e\n * @return a \u003ccode\u003eCollection\u003c/code\u003e containing all the elements of \u003ccode\u003ecollection\u003c/code\u003e exceptany elements that also occur in \u003ccode\u003eremove\u003c/code\u003e.\n * @throws NullPointerException if either parameter is null\n * @since 4.0 (method existed in 3.2 but was completely broken)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.removeAll#1789",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.removeAll(java.lang.Iterable\u003cE\u003e, java.lang.Iterable\u003c? extends E\u003e, org.apache.commons.collections4.Equator\u003c? super E\u003e)",
    "snippet": "public static \u003cE\u003e Collection\u003cE\u003e removeAll(final Iterable\u003cE\u003e collection,\n                                              final Iterable\u003c? extends E\u003e remove,\n                                              final Equator\u003c? super E\u003e equator) {\n\n        final Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e transformer \u003d new Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e() {\n            @Override\n            public EquatorWrapper\u003cE\u003e transform(final E input) {\n                return new EquatorWrapper\u003c\u003e(equator, input);\n            }\n        };\n\n        final Set\u003cEquatorWrapper\u003cE\u003e\u003e removeSet \u003d\n                collect(remove, transformer, new HashSet\u003cEquatorWrapper\u003cE\u003e\u003e());\n\n        final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper\u003c\u003e(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }",
    "begin_line": 1789,
    "end_line": 1810,
    "comment": "/** \n * Removes all elements in \u003ccode\u003eremove\u003c/code\u003e from \u003ccode\u003ecollection\u003c/code\u003e. That is, this method returns a collection containing all the elements in \u003ccode\u003ecollection\u003c/code\u003e that are not in \u003ccode\u003eremove\u003c/code\u003e. The cardinality of an element \u003ccode\u003ee\u003c/code\u003e in the returned collection is the same as the cardinality of \u003ccode\u003ee\u003c/code\u003e in \u003ccode\u003ecollection\u003c/code\u003e unless \u003ccode\u003eremove\u003c/code\u003e contains \u003ccode\u003ee\u003c/code\u003e, in which case the cardinality is zero. This method is useful if you do not wish to modify the collection \u003ccode\u003ec\u003c/code\u003e and thus cannot call \u003ccode\u003ecollection.removeAll(remove)\u003c/code\u003e. \u003cp\u003e Moreover this method uses an  {@link Equator} instead of{@link Object#equals(Object)} to determine the equality of the elementsin \u003ccode\u003ecollection\u003c/code\u003e and \u003ccode\u003eremove\u003c/code\u003e. Hence this method is useful in cases where the equals behavior of an object needs to be modified without changing the object itself.\n * @param \u003c E \u003e the type of object the {@link Collection} contains\n * @param collection the collection from which items are removed (in the returned collection)\n * @param remove the items to be removed from the returned collection\n * @param equator the Equator used for testing equality\n * @return a \u003ccode\u003eCollection\u003c/code\u003e containing all the elements of \u003ccode\u003ecollection\u003c/code\u003eexcept any element that if equal according to the \u003ccode\u003eequator\u003c/code\u003e\n * @throws NullPointerException if any of the parameters is null\n * @since 4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.transform#1795",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.transform(E)",
    "snippet": "@Override\n            public EquatorWrapper\u003cE\u003e transform(final E input) {\n                return new EquatorWrapper\u003c\u003e(equator, input);\n            }",
    "begin_line": 1795,
    "end_line": 1797,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.synchronizedCollection#1838",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.synchronizedCollection(java.util.Collection\u003cC\u003e)",
    "snippet": "@Deprecated\n    public static \u003cC\u003e Collection\u003cC\u003e synchronizedCollection(final Collection\u003cC\u003e collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }",
    "begin_line": 1838,
    "end_line": 1840,
    "comment": "/** \n * Returns a synchronized collection backed by the given collection. \u003cp\u003e You must manually synchronize on the returned buffer\u0027s iterator to avoid non-deterministic behavior: \u003cpre\u003e Collection c \u003d CollectionUtils.synchronizedCollection(myCollection); synchronized (c) { Iterator i \u003d c.iterator(); while (i.hasNext()) { process (i.next()); } } \u003c/pre\u003e This method uses the implementation in the decorators subpackage.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to synchronize, must not be null\n * @return a synchronized collection backed by the given collection\n * @throws NullPointerException if the collection is null\n * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.unmodifiableCollection#1854",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.unmodifiableCollection(java.util.Collection\u003c? extends C\u003e)",
    "snippet": "@Deprecated\n    public static \u003cC\u003e Collection\u003cC\u003e unmodifiableCollection(final Collection\u003c? extends C\u003e collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }",
    "begin_line": 1854,
    "end_line": 1856,
    "comment": "/** \n * Returns an unmodifiable collection backed by the given collection. \u003cp\u003e This method uses the implementation in the decorators subpackage.\n * @param \u003c C \u003e  the type of object the {@link Collection} contains\n * @param collection  the collection to make unmodifiable, must not be null\n * @return an unmodifiable collection backed by the given collection\n * @throws NullPointerException if the collection is null\n * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.predicatedCollection#1872",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.predicatedCollection(java.util.Collection\u003cC\u003e, org.apache.commons.collections4.Predicate\u003c? super C\u003e)",
    "snippet": "public static \u003cC\u003e Collection\u003cC\u003e predicatedCollection(final Collection\u003cC\u003e collection,\n                                                         final Predicate\u003c? super C\u003e predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }",
    "begin_line": 1872,
    "end_line": 1875,
    "comment": "/** \n * Returns a predicated (validating) collection backed by the given collection. \u003cp\u003e Only objects that pass the test in the given predicate can be added to the collection. Trying to add an invalid object results in an IllegalArgumentException. It is important not to use the original collection after invoking this method, as it is a backdoor for adding invalid objects.\n * @param \u003c C \u003e the type of objects in the Collection.\n * @param collection  the collection to predicate, must not be null\n * @param predicate  the predicate for the collection, must not be null\n * @return a predicated collection backed by the given collection\n * @throws NullPointerException if the Collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.transformingCollection#1893",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.transformingCollection(java.util.Collection\u003cE\u003e, org.apache.commons.collections4.Transformer\u003c? super E,? extends E\u003e)",
    "snippet": "public static \u003cE\u003e Collection\u003cE\u003e transformingCollection(final Collection\u003cE\u003e collection,\n            final Transformer\u003c? super E, ? extends E\u003e transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }",
    "begin_line": 1893,
    "end_line": 1896,
    "comment": "/** \n * Returns a transformed bag backed by the given collection. \u003cp\u003e Each object is passed through the transformer as it is added to the Collection. It is important not to use the original collection after invoking this method, as it is a backdoor for adding untransformed objects. \u003cp\u003e Existing entries in the specified collection will not be transformed. If you want that behaviour, see  {@link TransformedCollection#transformedCollection}.\n * @param \u003c E \u003e the type of object the {@link Collection} contains\n * @param collection  the collection to predicate, must not be null\n * @param transformer  the transformer for the collection, must not be null\n * @return a transformed collection backed by the given collection\n * @throws NullPointerException if the Collection or Transformer is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EquatorWrapper.extractSingleton#1907",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/CollectionUtils.java",
    "class_name": "org.apache.commons.collections4.CollectionUtils",
    "signature": "org.apache.commons.collections4.CollectionUtils.extractSingleton(java.util.Collection\u003cE\u003e)",
    "snippet": "public static \u003cE\u003e E extractSingleton(final Collection\u003cE\u003e collection) {\n        if (collection \u003d\u003d null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() !\u003d 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size \u003d\u003d 1\");\n        }\n        return collection.iterator().next();\n    }",
    "begin_line": 1907,
    "end_line": 1915,
    "comment": "/** \n * Extract the lone element of the specified Collection.\n * @param \u003c E \u003e collection type\n * @param collection to read\n * @return sole member of collection\n * @throws NullPointerException if collection is null\n * @throws IllegalArgumentException if collection is empty or contains more than one element\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.AbstractCollectionDecorator#67",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.AbstractCollectionDecorator()",
    "snippet": "protected AbstractCollectionDecorator() {\n        super();\n    }",
    "begin_line": 67,
    "end_line": 69,
    "comment": "/** \n * Constructor only used in deserialization, do not use otherwise.\n * @since 3.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.AbstractCollectionDecorator#77",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.AbstractCollectionDecorator(java.util.Collection\u003cE\u003e)",
    "snippet": "protected AbstractCollectionDecorator(final Collection\u003cE\u003e coll) {\n        if (coll \u003d\u003d null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        this.collection \u003d coll;\n    }",
    "begin_line": 77,
    "end_line": 82,
    "comment": "/** \n * Constructor that wraps (not copies).\n * @param coll  the collection to decorate, must not be null\n * @throws NullPointerException if the collection is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.decorated#90",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.decorated()",
    "snippet": "protected Collection\u003cE\u003e decorated() {\n        return collection;\n    }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Gets the collection being decorated. All access to the decorated collection goes via this method.\n * @return the decorated collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.setCollection#101",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.setCollection(java.util.Collection\u003cE\u003e)",
    "snippet": "protected void setCollection(final Collection\u003cE\u003e coll) {\n        this.collection \u003d coll;\n    }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Sets the collection being decorated. \u003cp\u003e \u003cb\u003eNOTE:\u003c/b\u003e this method should only be used during deserialization\n * @param coll  the decorated collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.add#108",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.add(E)",
    "snippet": "@Override\n    public boolean add(final E object) {\n        return decorated().add(object);\n    }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.addAll#113",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.addAll(java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(final Collection\u003c? extends E\u003e coll) {\n        return decorated().addAll(coll);\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.clear#118",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.clear()",
    "snippet": "@Override\n    public void clear() {\n        decorated().clear();\n    }",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.contains#123",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.contains(java.lang.Object)",
    "snippet": "@Override\n    public boolean contains(final Object object) {\n        return decorated().contains(object);\n    }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.isEmpty#128",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.isEmpty()",
    "snippet": "@Override\n    public boolean isEmpty() {\n        return decorated().isEmpty();\n    }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.iterator#133",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.iterator()",
    "snippet": "@Override\n    public Iterator\u003cE\u003e iterator() {\n        return decorated().iterator();\n    }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.remove#138",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.remove(java.lang.Object)",
    "snippet": "@Override\n    public boolean remove(final Object object) {\n        return decorated().remove(object);\n    }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.size#143",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.size()",
    "snippet": "@Override\n    public int size() {\n        return decorated().size();\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.toArray#148",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.toArray()",
    "snippet": "@Override\n    public Object[] toArray() {\n        return decorated().toArray();\n    }",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.toArray#153",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.toArray(T[])",
    "snippet": "@Override\n    public \u003cT\u003e T[] toArray(final T[] object) {\n        return decorated().toArray(object);\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.containsAll#158",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.containsAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean containsAll(final Collection\u003c?\u003e coll) {\n        return decorated().containsAll(coll);\n    }",
    "begin_line": 158,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.removeAll#163",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.removeAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean removeAll(final Collection\u003c?\u003e coll) {\n        return decorated().removeAll(coll);\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.retainAll#168",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.retainAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean retainAll(final Collection\u003c?\u003e coll) {\n        return decorated().retainAll(coll);\n    }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCollectionDecorator.toString#173",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
    "class_name": "org.apache.commons.collections4.collection.AbstractCollectionDecorator",
    "signature": "org.apache.commons.collections4.collection.AbstractCollectionDecorator.toString()",
    "snippet": "@Override\n    public String toString() {\n        return decorated().toString();\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableIterator.unmodifiableIterator#46",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
    "class_name": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "signature": "org.apache.commons.collections4.iterators.UnmodifiableIterator.unmodifiableIterator(java.util.Iterator\u003c? extends E\u003e)",
    "snippet": "public static \u003cE\u003e Iterator\u003cE\u003e unmodifiableIterator(final Iterator\u003c? extends E\u003e iterator) {\n        if (iterator \u003d\u003d null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (iterator instanceof Unmodifiable) {\n            @SuppressWarnings(\"unchecked\") // safe to upcast\n            final Iterator\u003cE\u003e tmpIterator \u003d (Iterator\u003cE\u003e) iterator;\n            return tmpIterator;\n        }\n        return new UnmodifiableIterator\u003c\u003e(iterator);\n    }",
    "begin_line": 46,
    "end_line": 56,
    "comment": "/** \n * Decorates the specified iterator such that it cannot be modified. \u003cp\u003e If the iterator is already unmodifiable it is returned directly.\n * @param \u003c E \u003e  the element type\n * @param iterator  the iterator to decorate\n * @return a new unmodifiable iterator\n * @throws NullPointerException if the iterator is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableIterator.UnmodifiableIterator#64",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
    "class_name": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "signature": "org.apache.commons.collections4.iterators.UnmodifiableIterator.UnmodifiableIterator(java.util.Iterator\u003c? extends E\u003e)",
    "snippet": "private UnmodifiableIterator(final Iterator\u003c? extends E\u003e iterator) {\n        super();\n        this.iterator \u003d iterator;\n    }",
    "begin_line": 64,
    "end_line": 67,
    "comment": "/** \n * Constructor.\n * @param iterator  the iterator to decorate\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableIterator.hasNext#71",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
    "class_name": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "signature": "org.apache.commons.collections4.iterators.UnmodifiableIterator.hasNext()",
    "snippet": "@Override\n    public boolean hasNext() {\n        return iterator.hasNext();\n    }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableIterator.next#76",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
    "class_name": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "signature": "org.apache.commons.collections4.iterators.UnmodifiableIterator.next()",
    "snippet": "@Override\n    public E next() {\n        return iterator.next();\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableIterator.remove#81",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
    "class_name": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "signature": "org.apache.commons.collections4.iterators.UnmodifiableIterator.remove()",
    "snippet": "@Override\n    public void remove() {\n        throw new UnsupportedOperationException(\"remove() is not supported\");\n    }",
    "begin_line": 81,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.AbstractListDecorator#43",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.AbstractListDecorator()",
    "snippet": "protected AbstractListDecorator() {\n        super();\n    }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * Constructor only used in deserialization, do not use otherwise.\n * @since 3.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.AbstractListDecorator#53",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.AbstractListDecorator(java.util.List\u003cE\u003e)",
    "snippet": "protected AbstractListDecorator(final List\u003cE\u003e list) {\n        super(list);\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Constructor that wraps (not copies).\n * @param list  the list to decorate, must not be null\n * @throws NullPointerException if list is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.decorated#63",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.decorated()",
    "snippet": "@Override\n    protected List\u003cE\u003e decorated() {\n        return (List\u003cE\u003e) super.decorated();\n    }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "/** \n * Gets the list being decorated.\n * @return the decorated list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.equals#68",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(final Object object) {\n        return object \u003d\u003d this || decorated().equals(object);\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.hashCode#73",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        return decorated().hashCode();\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.add#80",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.add(int, E)",
    "snippet": "@Override\n    public void add(final int index, final E object) {\n        decorated().add(index, object);\n    }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.addAll#85",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.addAll(int, java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(final int index, final Collection\u003c? extends E\u003e coll) {\n        return decorated().addAll(index, coll);\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.get#90",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.get(int)",
    "snippet": "@Override\n    public E get(final int index) {\n        return decorated().get(index);\n    }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.indexOf#95",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.indexOf(java.lang.Object)",
    "snippet": "@Override\n    public int indexOf(final Object object) {\n        return decorated().indexOf(object);\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.lastIndexOf#100",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.lastIndexOf(java.lang.Object)",
    "snippet": "@Override\n    public int lastIndexOf(final Object object) {\n        return decorated().lastIndexOf(object);\n    }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.listIterator#105",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.listIterator()",
    "snippet": "@Override\n    public ListIterator\u003cE\u003e listIterator() {\n        return decorated().listIterator();\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.listIterator#110",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.listIterator(int)",
    "snippet": "@Override\n    public ListIterator\u003cE\u003e listIterator(final int index) {\n        return decorated().listIterator(index);\n    }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.remove#115",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.remove(int)",
    "snippet": "@Override\n    public E remove(final int index) {\n        return decorated().remove(index);\n    }",
    "begin_line": 115,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.set#120",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.set(int, E)",
    "snippet": "@Override\n    public E set(final int index, final E object) {\n        return decorated().set(index, object);\n    }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractListDecorator.subList#125",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractListDecorator.subList(int, int)",
    "snippet": "@Override\n    public List\u003cE\u003e subList(final int fromIndex, final int toIndex) {\n        return decorated().subList(fromIndex, toIndex);\n    }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSerializableListDecorator.AbstractSerializableListDecorator#42",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractSerializableListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractSerializableListDecorator.AbstractSerializableListDecorator(java.util.List\u003cE\u003e)",
    "snippet": "protected AbstractSerializableListDecorator(final List\u003cE\u003e list) {\n        super(list);\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "/** \n * Constructor that wraps (not copies).\n * @param list  the list to decorate, must not be null\n * @throws NullPointerException if list is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSerializableListDecorator.writeObject#53",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractSerializableListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractSerializableListDecorator.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(decorated());\n    }",
    "begin_line": 53,
    "end_line": 56,
    "comment": "/** \n * Write the list out using a custom routine.\n * @param out  the output stream\n * @throws IOException if an error occurs while writing to the stream\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSerializableListDecorator.readObject#66",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
    "class_name": "org.apache.commons.collections4.list.AbstractSerializableListDecorator",
    "signature": "org.apache.commons.collections4.list.AbstractSerializableListDecorator.readObject(java.io.ObjectInputStream)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        setCollection((Collection\u003cE\u003e) in.readObject());\n    }",
    "begin_line": 66,
    "end_line": 69,
    "comment": "/** \n * Read the list in using a custom routine.\n * @param in  the input stream\n * @throws IOException if an error occurs while reading from the stream\n * @throws ClassNotFoundException if an object read from the stream can not be loaded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.unmodifiableList#53",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.unmodifiableList(java.util.List\u003c? extends E\u003e)",
    "snippet": "public static \u003cE\u003e List\u003cE\u003e unmodifiableList(final List\u003c? extends E\u003e list) {\n        if (list instanceof Unmodifiable) {\n            @SuppressWarnings(\"unchecked\") // safe to upcast\n            final List\u003cE\u003e tmpList \u003d (List\u003cE\u003e) list;\n            return tmpList;\n        }\n        return new UnmodifiableList\u003c\u003e(list);\n    }",
    "begin_line": 53,
    "end_line": 60,
    "comment": "/** \n * Factory method to create an unmodifiable list.\n * @param \u003c E \u003e the type of the elements in the list\n * @param list  the list to decorate, must not be null\n * @return a new unmodifiable list\n * @throws NullPointerException if list is null\n * @since 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.UnmodifiableList#70",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.UnmodifiableList(java.util.List\u003c? extends E\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") UnmodifiableList(final List\u003c? extends E\u003e list) {\n        super((List\u003cE\u003e) list);\n    }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Constructor that wraps (not copies).\n * @param list  the list to decorate, must not be null\n * @throws NullPointerException if list is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.iterator#76",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.iterator()",
    "snippet": "@Override\n    public Iterator\u003cE\u003e iterator() {\n        return UnmodifiableIterator.unmodifiableIterator(decorated().iterator());\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.add#81",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.add(java.lang.Object)",
    "snippet": "@Override\n    public boolean add(final Object object) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 81,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.addAll#86",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.addAll(java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(final Collection\u003c? extends E\u003e coll) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.clear#91",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.clear()",
    "snippet": "@Override\n    public void clear() {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.remove#96",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.remove(java.lang.Object)",
    "snippet": "@Override\n    public boolean remove(final Object object) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.removeAll#101",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.removeAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean removeAll(final Collection\u003c?\u003e coll) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.retainAll#106",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.retainAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean retainAll(final Collection\u003c?\u003e coll) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.listIterator#112",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.listIterator()",
    "snippet": "@Override\n    public ListIterator\u003cE\u003e listIterator() {\n        return UnmodifiableListIterator.umodifiableListIterator(decorated().listIterator());\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.listIterator#117",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.listIterator(int)",
    "snippet": "@Override\n    public ListIterator\u003cE\u003e listIterator(final int index) {\n        return UnmodifiableListIterator.umodifiableListIterator(decorated().listIterator(index));\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.add#122",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.add(int, E)",
    "snippet": "@Override\n    public void add(final int index, final E object) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.addAll#127",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.addAll(int, java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(final int index, final Collection\u003c? extends E\u003e coll) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.remove#132",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.remove(int)",
    "snippet": "@Override\n    public E remove(final int index) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 132,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.set#137",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.set(int, E)",
    "snippet": "@Override\n    public E set(final int index, final E object) {\n        throw new UnsupportedOperationException();\n    }",
    "begin_line": 137,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnmodifiableList.subList#142",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/list/UnmodifiableList.java",
    "class_name": "org.apache.commons.collections4.list.UnmodifiableList",
    "signature": "org.apache.commons.collections4.list.UnmodifiableList.subList(int, int)",
    "snippet": "@Override\n    public List\u003cE\u003e subList(final int fromIndex, final int toIndex) {\n        final List\u003cE\u003e sub \u003d decorated().subList(fromIndex, toIndex);\n        return new UnmodifiableList\u003c\u003e(sub);\n    }",
    "begin_line": 142,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.CompositeSet#63",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.CompositeSet()",
    "snippet": "public CompositeSet() {\n        super();\n    }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "/** \n * Create an empty CompositeSet.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.CompositeSet#72",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.CompositeSet(java.util.Set\u003cE\u003e)",
    "snippet": "public CompositeSet(final Set\u003cE\u003e set) {\n        super();\n        addComposited(set);\n    }",
    "begin_line": 72,
    "end_line": 75,
    "comment": "/** \n * Create a CompositeSet with just \u003ccode\u003eset\u003c/code\u003e composited.\n * @param set  the initial set in the composite\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.CompositeSet#82",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.CompositeSet(java.util.Set\u003cE\u003e)",
    "snippet": "public CompositeSet(final Set\u003cE\u003e... sets) {\n        super();\n        addComposited(sets);\n    }",
    "begin_line": 82,
    "end_line": 85,
    "comment": "/** \n * Create a composite set with sets as the initial set of composited Sets.\n * @param sets  the initial sets in the composite\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.size#96",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.size()",
    "snippet": "@Override\n    public int size() {\n        int size \u003d 0;\n        for (final Set\u003cE\u003e item : all) {\n            size +\u003d item.size();\n        }\n        return size;\n    }",
    "begin_line": 96,
    "end_line": 102,
    "comment": "/** \n * Gets the size of this composite set. \u003cp\u003e This implementation calls \u003ccode\u003esize()\u003c/code\u003e on each set.\n * @return total number of elements in all contained containers\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.isEmpty#112",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.isEmpty()",
    "snippet": "@Override\n    public boolean isEmpty() {\n        for (final Set\u003cE\u003e item : all) {\n            if (item.isEmpty() \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 112,
    "end_line": 119,
    "comment": "/** \n * Checks whether this composite set is empty. \u003cp\u003e This implementation calls \u003ccode\u003eisEmpty()\u003c/code\u003e on each set.\n * @return true if all of the contained sets are empty\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.contains#130",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.contains(java.lang.Object)",
    "snippet": "@Override\n    public boolean contains(final Object obj) {\n        for (final Set\u003cE\u003e item : all) {\n            if (item.contains(obj)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 130,
    "end_line": 137,
    "comment": "/** \n * Checks whether this composite set contains the object. \u003cp\u003e This implementation calls \u003ccode\u003econtains()\u003c/code\u003e on each set.\n * @param obj  the object to search for\n * @return true if obj is contained in any of the contained sets\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.iterator#150",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.iterator()",
    "snippet": "@Override\n    public Iterator\u003cE\u003e iterator() {\n        if (all.isEmpty()) {\n            return EmptyIterator.\u003cE\u003eemptyIterator();\n        }\n        final IteratorChain\u003cE\u003e chain \u003d new IteratorChain\u003c\u003e();\n        for (final Set\u003cE\u003e item : all) {\n            chain.addIterator(item.iterator());\n        }\n        return chain;\n    }",
    "begin_line": 150,
    "end_line": 159,
    "comment": "/** \n * Gets an iterator over all the sets in this composite. \u003cp\u003e This implementation uses an \u003ccode\u003eIteratorChain\u003c/code\u003e.\n * @return an \u003ccode\u003eIteratorChain\u003c/code\u003e instance which supports\u003ccode\u003eremove()\u003c/code\u003e. Iteration occurs over contained collections in the order they were added, but this behavior should not be relied upon.\n * @see IteratorChain\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.toArray#167",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.toArray()",
    "snippet": "@Override\n    public Object[] toArray() {\n        final Object[] result \u003d new Object[size()];\n        int i \u003d 0;\n        for (final Iterator\u003cE\u003e it \u003d iterator(); it.hasNext(); i++) {\n            result[i] \u003d it.next();\n        }\n        return result;\n    }",
    "begin_line": 167,
    "end_line": 174,
    "comment": "/** \n * Returns an array containing all of the elements in this composite.\n * @return an object array of all the elements in the collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.toArray#186",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.toArray(T[])",
    "snippet": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T[] toArray(final T[] array) {\n        final int size \u003d size();\n        Object[] result \u003d null;\n        if (array.length \u003e\u003d size) {\n            result \u003d array;\n        } else {\n            result \u003d (Object[]) Array.newInstance(array.getClass().getComponentType(), size);\n        }\n\n        int offset \u003d 0;\n        for (final Collection\u003cE\u003e item : all) {\n            for (final E e : item) {\n                result[offset++] \u003d e;\n            }\n        }\n        if (result.length \u003e size) {\n            result[size] \u003d null;\n        }\n        return (T[]) result;\n    }",
    "begin_line": 186,
    "end_line": 205,
    "comment": "/** \n * Returns an object array, populating the supplied array if possible. See \u003ccode\u003eCollection\u003c/code\u003e interface for full details.\n * @param \u003c T \u003e  the type of the elements in the collection\n * @param array  the array to use, populating if possible\n * @return an array of all the elements in the collection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.add#219",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.add(E)",
    "snippet": "@Override\n    public boolean add(final E obj) {\n        if (mutator \u003d\u003d null) {\n           throw new UnsupportedOperationException(\n               \"add() is not supported on CompositeSet without a SetMutator strategy\");\n        }\n        return mutator.add(this, all, obj);\n    }",
    "begin_line": 219,
    "end_line": 225,
    "comment": "/** \n * Adds an object to the collection, throwing UnsupportedOperationException unless a SetMutator strategy is specified.\n * @param obj  the object to add\n * @return {@code true} if the collection was modified\n * @throws UnsupportedOperationException if SetMutator hasn\u0027t been set or add is unsupported\n * @throws ClassCastException if the object cannot be added due to its type\n * @throws NullPointerException if the object cannot be added because its null\n * @throws IllegalArgumentException if the object cannot be added\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.remove#235",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.remove(java.lang.Object)",
    "snippet": "@Override\n    public boolean remove(final Object obj) {\n        for (final Set\u003cE\u003e set : getSets()) {\n            if (set.contains(obj)) {\n                return set.remove(obj);\n            }\n        }\n        return false;\n    }",
    "begin_line": 235,
    "end_line": 242,
    "comment": "/** \n * If a \u003ccode\u003eCollectionMutator\u003c/code\u003e is defined for this CompositeSet then this method will be called anyway.\n * @param obj  object to be removed\n * @return true if the object is removed, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.containsAll#254",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.containsAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean containsAll(final Collection\u003c?\u003e coll) {\n        for (final Object item : coll) {\n            if (contains(item) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 254,
    "end_line": 261,
    "comment": "/** \n * Checks whether this composite contains all the elements in the specified collection. \u003cp\u003e This implementation calls \u003ccode\u003econtains()\u003c/code\u003e for each element in the specified collection.\n * @param coll  the collection to check for\n * @return true if all elements contained\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.addAll#275",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.addAll(java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(final Collection\u003c? extends E\u003e coll) {\n        if (mutator \u003d\u003d null) {\n            throw new UnsupportedOperationException(\n                \"addAll() is not supported on CompositeSet without a SetMutator strategy\");\n        }\n        return mutator.addAll(this, all, coll);\n    }",
    "begin_line": 275,
    "end_line": 281,
    "comment": "/** \n * Adds a collection of elements to this composite, throwing UnsupportedOperationException unless a SetMutator strategy is specified.\n * @param coll  the collection to add\n * @return true if the composite was modified\n * @throws UnsupportedOperationException if SetMutator hasn\u0027t been set or add is unsupported\n * @throws ClassCastException if the object cannot be added due to its type\n * @throws NullPointerException if the object cannot be added because its null\n * @throws IllegalArgumentException if the object cannot be added\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.removeAll#293",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.removeAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean removeAll(final Collection\u003c?\u003e coll) {\n        if (coll.size() \u003d\u003d 0) {\n            return false;\n        }\n        boolean changed \u003d false;\n        for (final Collection\u003cE\u003e item : all) {\n            changed |\u003d item.removeAll(coll);\n        }\n        return changed;\n    }",
    "begin_line": 293,
    "end_line": 302,
    "comment": "/** \n * Removes the elements in the specified collection from this composite set. \u003cp\u003e This implementation calls \u003ccode\u003eremoveAll\u003c/code\u003e on each collection.\n * @param coll  the collection to remove\n * @return true if the composite was modified\n * @throws UnsupportedOperationException if removeAll is unsupported\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.retainAll#315",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.retainAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean retainAll(final Collection\u003c?\u003e coll) {\n        boolean changed \u003d false;\n        for (final Collection\u003cE\u003e item : all) {\n            changed |\u003d item.retainAll(coll);\n        }\n        return changed;\n    }",
    "begin_line": 315,
    "end_line": 321,
    "comment": "/** \n * Retains all the elements in the specified collection in this composite set, removing all others. \u003cp\u003e This implementation calls \u003ccode\u003eretainAll()\u003c/code\u003e on each collection.\n * @param coll  the collection to remove\n * @return true if the composite was modified\n * @throws UnsupportedOperationException if retainAll is unsupported\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.clear#331",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.clear()",
    "snippet": "@Override\n    public void clear() {\n        for (final Collection\u003cE\u003e coll : all) {\n            coll.clear();\n        }\n    }",
    "begin_line": 331,
    "end_line": 335,
    "comment": "/** \n * Removes all of the elements from this composite set. \u003cp\u003e This implementation calls \u003ccode\u003eclear()\u003c/code\u003e on each set.\n * @throws UnsupportedOperationException if clear is unsupported\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.setMutator#343",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.setMutator(org.apache.commons.collections4.set.CompositeSet.SetMutator\u003cE\u003e)",
    "snippet": "public void setMutator(final SetMutator\u003cE\u003e mutator) {\n        this.mutator \u003d mutator;\n    }",
    "begin_line": 343,
    "end_line": 345,
    "comment": "/** \n * Specify a SetMutator strategy instance to handle changes.\n * @param mutator  the mutator to use\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.addComposited#356",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.addComposited(java.util.Set\u003cE\u003e)",
    "snippet": "public synchronized void addComposited(final Set\u003cE\u003e set) {\n        for (final Set\u003cE\u003e existingSet : getSets()) {\n            final Collection\u003cE\u003e intersects \u003d CollectionUtils.intersection(existingSet, set);\n            if (intersects.size() \u003e 0) {\n                if (this.mutator \u003d\u003d null) {\n                    throw new UnsupportedOperationException(\n                        \"Collision adding composited set with no SetMutator set\");\n                }\n                getMutator().resolveCollision(this, existingSet, set, intersects);\n                if (CollectionUtils.intersection(existingSet, set).size() \u003e 0) {\n                    throw new IllegalArgumentException(\n                        \"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\n                }\n            }\n        }\n        all.add(set);\n    }",
    "begin_line": 356,
    "end_line": 372,
    "comment": "/** \n * Add a Set to this composite.\n * @param set  the set to add\n * @throws IllegalArgumentException if a SetMutator is set, but fails to resolve a collision\n * @throws UnsupportedOperationException if there is no SetMutator set\n * @throws NullPointerException if {@code set} is null\n * @see SetMutator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.addComposited#380",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.addComposited(java.util.Set\u003cE\u003e, java.util.Set\u003cE\u003e)",
    "snippet": "public void addComposited(final Set\u003cE\u003e set1, final Set\u003cE\u003e set2) {\n        addComposited(set1);\n        addComposited(set2);\n    }",
    "begin_line": 380,
    "end_line": 383,
    "comment": "/** \n * Add these Sets to the list of sets in this composite.\n * @param set1  the first Set to be appended to the composite\n * @param set2  the second Set to be appended to the composite\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.addComposited#390",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.addComposited(java.util.Set\u003cE\u003e)",
    "snippet": "public void addComposited(final Set\u003cE\u003e... sets) {\n        for (final Set\u003cE\u003e set : sets) {\n            addComposited(set);\n        }\n    }",
    "begin_line": 390,
    "end_line": 394,
    "comment": "/** \n * Add these Sets to the list of sets in this composite\n * @param sets  the Sets to be appended to the composite\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.removeComposited#401",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.removeComposited(java.util.Set\u003cE\u003e)",
    "snippet": "public void removeComposited(final Set\u003cE\u003e set) {\n        all.remove(set);\n    }",
    "begin_line": 401,
    "end_line": 403,
    "comment": "/** \n * Removes a set from those being decorated in this composite.\n * @param set  set to be removed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.toSet#412",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.toSet()",
    "snippet": "public Set\u003cE\u003e toSet() {\n        return new HashSet\u003c\u003e(this);\n    }",
    "begin_line": 412,
    "end_line": 414,
    "comment": "/** \n * Returns a new Set containing all of the elements.\n * @return A new HashSet containing all of the elements in this composite.The new collection is \u003ci\u003enot\u003c/i\u003e backed by this composite.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.getSets#421",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.getSets()",
    "snippet": "public List\u003cSet\u003cE\u003e\u003e getSets() {\n        return UnmodifiableList.unmodifiableList(all);\n    }",
    "begin_line": 421,
    "end_line": 423,
    "comment": "/** \n * Gets the sets being decorated.\n * @return Unmodifiable list of all sets in this composite.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.getMutator#429",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.getMutator()",
    "snippet": "protected SetMutator\u003cE\u003e getMutator() {\n        return mutator;\n    }",
    "begin_line": 429,
    "end_line": 431,
    "comment": "/** \n * Get the set mutator to be used for this CompositeSet.\n * @return the set mutator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.equals#438",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(final Object obj) {\n        if (obj instanceof Set) {\n            final Set\u003c?\u003e set \u003d (Set\u003c?\u003e) obj;\n            return set.size() \u003d\u003d this.size() \u0026\u0026 set.containsAll(this);\n        }\n        return false;\n    }",
    "begin_line": 438,
    "end_line": 444,
    "comment": "/** \n * {@inheritDoc}\n * @see java.util.Set#equals\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompositeSet.hashCode#451",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int code \u003d 0;\n        for (final E e : this) {\n            code +\u003d e \u003d\u003d null ? 0 : e.hashCode();\n        }\n        return code;\n    }",
    "begin_line": 451,
    "end_line": 457,
    "comment": "/** \n * {@inheritDoc}\n * @see java.util.Set#hashCode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetMutator.add#476",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.add(org.apache.commons.collections4.set.CompositeSet\u003cE\u003e, java.util.List\u003cjava.util.Set\u003cE\u003e\u003e, E)",
    "snippet": "boolean add(CompositeSet\u003cE\u003e composite, List\u003cSet\u003cE\u003e\u003e sets, E obj);",
    "begin_line": 476,
    "end_line": 476,
    "comment": "/** \n * Called when an object is to be added to the composite.\n * @param composite  the CompositeSet being changed\n * @param sets  all of the Set instances in this CompositeSet\n * @param obj  the object being added\n * @return true if the collection is changed\n * @throws UnsupportedOperationException if add is unsupported\n * @throws ClassCastException if the object cannot be added due to its type\n * @throws NullPointerException if the object cannot be added because its null\n * @throws IllegalArgumentException if the object cannot be added\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetMutator.addAll#490",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.addAll(org.apache.commons.collections4.set.CompositeSet\u003cE\u003e, java.util.List\u003cjava.util.Set\u003cE\u003e\u003e, java.util.Collection\u003c? extends E\u003e)",
    "snippet": "boolean addAll(CompositeSet\u003cE\u003e composite,\n                              List\u003cSet\u003cE\u003e\u003e sets,\n                              Collection\u003c? extends E\u003e coll);",
    "begin_line": 490,
    "end_line": 492,
    "comment": "/** \n * Called when a collection is to be added to the composite.\n * @param composite  the CompositeSet being changed\n * @param sets  all of the Set instances in this CompositeSet\n * @param coll  the collection being added\n * @return true if the collection is changed\n * @throws UnsupportedOperationException if add is unsupported\n * @throws ClassCastException if the object cannot be added due to its type\n * @throws NullPointerException if the object cannot be added because its null\n * @throws IllegalArgumentException if the object cannot be added\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SetMutator.resolveCollision#506",
    "is_bug": true,
    "src_path": "org/apache/commons/collections4/set/CompositeSet.java",
    "class_name": "org.apache.commons.collections4.set.CompositeSet",
    "signature": "org.apache.commons.collections4.set.CompositeSet.resolveCollision(org.apache.commons.collections4.set.CompositeSet\u003cE\u003e, java.util.Set\u003cE\u003e, java.util.Set\u003cE\u003e, java.util.Collection\u003cE\u003e)",
    "snippet": "void resolveCollision(CompositeSet\u003cE\u003e comp,\n                                     Set\u003cE\u003e existing,\n                                     Set\u003cE\u003e added,\n                                     Collection\u003cE\u003e intersects);",
    "begin_line": 506,
    "end_line": 509,
    "comment": "/** \n * Called when a Set is added to the CompositeSet and there is a collision between existing and added sets. \u003cp\u003e If \u003ccode\u003eadded\u003c/code\u003e and \u003ccode\u003eexisting\u003c/code\u003e still have any intersects after this method returns an IllegalArgumentException will be thrown.\n * @param comp  the CompositeSet being modified\n * @param existing  the Set already existing in the composite\n * @param added  the Set being added to the composite\n * @param intersects  the intersection of the existing and added sets\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]