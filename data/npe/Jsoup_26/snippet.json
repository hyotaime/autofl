[
  {
    "name": "Jsoup.Jsoup#20",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.Jsoup()",
    "snippet": "private Jsoup() {}",
    "begin_line": 20,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#30",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        return Parser.parse(html, baseUri);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "/** \n * Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.\n * @param html    HTML to parse\n * @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occurbefore the HTML declares a  {@code \u003cbase href\u003e} tag.\n * @return sane HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#44",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
    "snippet": "public static Document parse(String html, String baseUri, Parser parser) {\n        return parser.parseInput(html, baseUri);\n    }",
    "begin_line": 44,
    "end_line": 46,
    "comment": "/** \n * Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser.\n * @param html    HTML to parse\n * @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occurbefore the HTML declares a  {@code \u003cbase href\u003e} tag.\n * @param parser alternate {@link Parser#xmlParser() parser} to use.\n * @return sane HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#57",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String)",
    "snippet": "public static Document parse(String html) {\n        return Parser.parse(html, \"\");\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a {@code \u003cbase href\u003e} tag.\n * @param html HTML to parse\n * @return sane HTML\n * @see #parse(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.connect#72",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.connect(java.lang.String)",
    "snippet": "public static Connection connect(String url) {\n        return HttpConnection.connect(url);\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Creates a new  {@link Connection} to a URL. Use to fetch and parse a HTML page.\u003cp\u003e Use examples: \u003cul\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").userAgent(\"Mozilla\").data(\"name\", \"jsoup\").get();\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").cookie(\"auth\", \"token\").post(); \u003c/ul\u003e\n * @param url URL to connect to. The protocol must be {@code http} or {@code https}.\n * @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#87",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "/** \n * Parse the contents of a file as HTML.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#102",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName) throws IOException {\n        return DataUtil.load(in, charsetName, in.getAbsolutePath());\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n * @see #parse(File,String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#117",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Read an input stream, and parse it to a Document.\n * @param in          input stream to read. Make sure to close it after parsing.\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#134",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
    "snippet": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri, parser);\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser.\n * @param in          input stream to read. Make sure to close it after parsing.\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @param parser alternate {@link Parser#xmlParser() parser} to use.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#147",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        return Parser.parseBodyFragment(bodyHtml, baseUri);\n    }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @param baseUri  URL to resolve relative URLs against.\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#159",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml) {\n        return Parser.parseBodyFragment(bodyHtml, \"\");\n    }",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#177",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.net.URL, int)",
    "snippet": "public static Document parse(URL url, int timeoutMillis) throws IOException {\n        Connection con \u003d HttpConnection.connect(url);\n        con.timeout(timeoutMillis);\n        return con.get();\n    }",
    "begin_line": 177,
    "end_line": 181,
    "comment": "/** \n * Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use  {@link #connect(String)} instead.\u003cp\u003e The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to  {@code UTF-8}.\n * @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.\n * @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n * @return The parsed HTML.\n * @throws IOException If the final server response !\u003d 200 OK (redirects are followed), or if there\u0027s an error readingthe response stream.\n * @see #connect(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#194",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        Document clean \u003d cleaner.clean(dirty);\n        return clean.body().html();\n    }",
    "begin_line": 194,
    "end_line": 199,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HTML (body fragment)\n * @param baseUri   URL to resolve relative URLs against\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#211",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, Whitelist whitelist) {\n        return clean(bodyHtml, \"\", whitelist);\n    }",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HTML (body fragment)\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#227",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        Document clean \u003d cleaner.clean(dirty);\n        clean.outputSettings(outputSettings);\n        return clean.body().html();\n    }",
    "begin_line": 227,
    "end_line": 233,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml input untrusted HTML (body fragment)\n * @param baseUri URL to resolve relative URLs against\n * @param whitelist white-list of permitted HTML elements\n * @param outputSettings document output settings; use to control pretty-printing and entity escape modes\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.isValid#243",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.isValid(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, \"\");\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        return cleaner.isValid(dirty);\n    }",
    "begin_line": 243,
    "end_line": 247,
    "comment": "/** \n * Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.\n * @param bodyHtml HTML to test\n * @param whitelist whitelist to test against\n * @return true if no tags or attributes were removed; false otherwise\n * @see #clean(String,org.jsoup.safety.Whitelist) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendableLinkedList.DescendableLinkedList#15",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.DescendableLinkedList()",
    "snippet": "public DescendableLinkedList() {\n        super();\n    }",
    "begin_line": 15,
    "end_line": 17,
    "comment": "/** \n * Create a new DescendableLinkedList.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendableLinkedList.push#23",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.push(E)",
    "snippet": "public void push(E e) {\n        addFirst(e);\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "/** \n * Add a new element to the start of the list.\n * @param e element to add\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendableLinkedList.peekLast#31",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.peekLast()",
    "snippet": "public E peekLast() {\n        return size() \u003d\u003d 0 ? null : getLast();\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "/** \n * Look at the last element, if there is one.\n * @return the last element, or null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendableLinkedList.pollLast#39",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.pollLast()",
    "snippet": "public E pollLast() {\n        return size() \u003d\u003d 0 ? null : removeLast();\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "/** \n * Remove and return the last element, if there is one\n * @return the last element, or null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendableLinkedList.descendingIterator#47",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.descendingIterator()",
    "snippet": "public Iterator\u003cE\u003e descendingIterator() {\n        return new DescendingIterator\u003cE\u003e(size());\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "/** \n * Get an iterator that starts and the end of the list and works towards the start.\n * @return an iterator that starts and the end of the list and works towards the start.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendingIterator.DescendingIterator#55",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.DescendingIterator(int)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        private DescendingIterator(int index) {\n            iter \u003d (ListIterator\u003cE\u003e) listIterator(index);\n        }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendingIterator.hasNext#63",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.hasNext()",
    "snippet": "public boolean hasNext() {\n            return iter.hasPrevious();\n        }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "/** \n * Check if there is another element on the list.\n * @return if another element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendingIterator.next#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.next()",
    "snippet": "public E next() {\n            return iter.previous();\n        }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Get the next element.\n * @return the next element.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DescendingIterator.remove#78",
    "is_bug": true,
    "src_path": "org/jsoup/helper/DescendableLinkedList.java",
    "class_name": "org.jsoup.helper.DescendableLinkedList",
    "signature": "org.jsoup.helper.DescendableLinkedList.remove()",
    "snippet": "public void remove() {\n            iter.remove();\n        }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * Remove the current element.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#19",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Collection, java.lang.String)",
    "snippet": "public static String join(Collection strings, String sep) {\n        return join(strings.iterator(), sep);\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "/** \n * Join a collection of strings by a seperator\n * @param strings collection of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#29",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Iterator, java.lang.String)",
    "snippet": "public static String join(Iterator strings, String sep) {\n        if (!strings.hasNext())\n            return \"\";\n\n        String start \u003d strings.next().toString();\n        if (!strings.hasNext()) // only one, avoid builder\n            return start;\n\n        StringBuilder sb \u003d new StringBuilder(64).append(start);\n        while (strings.hasNext()) {\n            sb.append(sep);\n            sb.append(strings.next());\n        }\n        return sb.toString();\n    }",
    "begin_line": 29,
    "end_line": 43,
    "comment": "/** \n * Join a collection of strings by a seperator\n * @param strings iterator of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.padding#50",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.padding(int)",
    "snippet": "public static String padding(int width) {\n        if (width \u003c 0)\n            throw new IllegalArgumentException(\"width must be \u003e 0\");\n\n        if (width \u003c padding.length)\n            return padding[width];\n\n        char[] out \u003d new char[width];\n        for (int i \u003d 0; i \u003c width; i++)\n            out[i] \u003d \u0027 \u0027;\n        return String.valueOf(out);\n    }",
    "begin_line": 50,
    "end_line": 61,
    "comment": "/** \n * Returns space padding\n * @param width amount of padding desired\n * @return string of spaces * width\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isBlank#68",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isBlank(java.lang.String)",
    "snippet": "public static boolean isBlank(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return true;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!StringUtil.isWhitespace(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 68,
    "end_line": 78,
    "comment": "/** \n * Tests if a string is blank: null, emtpy, or only whitespace (\" \", \\r\\n, \\t, etc)\n * @param string string to test\n * @return if string is blank\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isNumeric#85",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isNumeric(java.lang.String)",
    "snippet": "public static boolean isNumeric(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return false;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!Character.isDigit(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 85,
    "end_line": 95,
    "comment": "/** \n * Tests if a string is numeric, i.e. contains only digit characters\n * @param string string to test\n * @return true if only digit chars, false if empty or null or contains non-digit chrs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isWhitespace#102",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isWhitespace(int)",
    "snippet": "public static boolean isWhitespace(int c){\n        return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027;\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Tests if a code point is \"whitespace\" as defined in the HTML spec.\n * @param c code point to test\n * @return true if code point is whitespace, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.normaliseWhitespace#106",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.normaliseWhitespace(java.lang.String)",
    "snippet": "public static String normaliseWhitespace(String string) {\n        StringBuilder sb \u003d new StringBuilder(string.length());\n\n        boolean lastWasWhite \u003d false;\n        boolean modified \u003d false;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            int c \u003d string.codePointAt(i);\n            if (isWhitespace(c)) {\n                if (lastWasWhite) {\n                    modified \u003d true;\n                    continue;\n                }\n                if (c !\u003d \u0027 \u0027)\n                    modified \u003d true;\n                sb.append(\u0027 \u0027);\n                lastWasWhite \u003d true;\n            }\n            else {\n                sb.appendCodePoint(c);\n                lastWasWhite \u003d false;\n            }\n        }\n        return modified ? sb.toString() : string;\n    }",
    "begin_line": 106,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.in#133",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.in(java.lang.String, java.lang.String)",
    "snippet": "public static boolean in(String needle, String... haystack) {\n        for (String hay : haystack) {\n            if (hay.equals(needle))\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 133,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.Validate#8",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.Validate()",
    "snippet": "private Validate() {}",
    "begin_line": 8,
    "end_line": 8,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#14",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object)",
    "snippet": "public static void notNull(Object obj) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(\"Object must not be null\");\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#24",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object, java.lang.String)",
    "snippet": "public static void notNull(Object obj, String msg) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#33",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean)",
    "snippet": "public static void isTrue(boolean val) {\n        if (!val)\n            throw new IllegalArgumentException(\"Must be true\");\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#43",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean, java.lang.String)",
    "snippet": "public static void isTrue(boolean val, String msg) {\n        if (!val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 43,
    "end_line": 46,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#52",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean)",
    "snippet": "public static void isFalse(boolean val) {\n        if (val)\n            throw new IllegalArgumentException(\"Must be false\");\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#62",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean, java.lang.String)",
    "snippet": "public static void isFalse(boolean val, String msg) {\n        if (val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[])",
    "snippet": "public static void noNullElements(Object[] objects) {\n        noNullElements(objects, \"Array must not contain any null objects\");\n    }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#80",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[], java.lang.String)",
    "snippet": "public static void noNullElements(Object[] objects, String msg) {\n        for (Object obj : objects)\n            if (obj \u003d\u003d null)\n                throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 80,
    "end_line": 84,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#90",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String)",
    "snippet": "public static void notEmpty(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(\"String must not be empty\");\n    }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#100",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String, java.lang.String)",
    "snippet": "public static void notEmpty(String string, String msg) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.fail#109",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.fail(java.lang.String)",
    "snippet": "public static void fail(String msg) {\n        throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Cause a failure.\n * @param msg message to output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.Attribute#21",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.Attribute(java.lang.String, java.lang.String)",
    "snippet": "public Attribute(String key, String value) {\n        Validate.notEmpty(key);\n        Validate.notNull(value);\n        this.key \u003d key.trim().toLowerCase();\n        this.value \u003d value;\n    }",
    "begin_line": 21,
    "end_line": 26,
    "comment": "/** \n * Create a new attribute from unencoded (raw) key and value.\n * @param key attribute key\n * @param value attribute value\n * @see #createFromEncoded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.getKey#32",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.getKey()",
    "snippet": "public String getKey() {\n        return key;\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Get the attribute key.\n * @return the attribute key\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.setKey#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.setKey(java.lang.String)",
    "snippet": "public void setKey(String key) {\n        Validate.notEmpty(key);\n        this.key \u003d key.trim().toLowerCase();\n    }",
    "begin_line": 40,
    "end_line": 43,
    "comment": "/** \n * Set the attribute key. Gets normalised as per the constructor method.\n * @param key the new key; must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.getValue#49",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.getValue()",
    "snippet": "public String getValue() {\n        return value;\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Get the attribute value.\n * @return the attribute value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.setValue#57",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.setValue(java.lang.String)",
    "snippet": "public String setValue(String value) {\n        Validate.notNull(value);\n        String old \u003d this.value;\n        this.value \u003d value;\n        return old;\n    }",
    "begin_line": 57,
    "end_line": 62,
    "comment": "/** \n * Set the attribute value.\n * @param value the new attribute value; must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.html#68",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.html()",
    "snippet": "public String html() {\n        return key + \"\u003d\\\"\" + Entities.escape(value, (new Document(\"\")).outputSettings()) + \"\\\"\";\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Get the HTML representation of this attribute; e.g.  {@code href\u003d\"index.html\"}.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.html#72",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void html(StringBuilder accum, Document.OutputSettings out) {\n        accum\n            .append(key)\n            .append(\"\u003d\\\"\")\n            .append(Entities.escape(value, out))\n            .append(\"\\\"\");\n    }",
    "begin_line": 72,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.toString#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.toString()",
    "snippet": "public String toString() {\n        return html();\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Get the string representation of this attribute, implemented as  {@link #html()}.\n * @return string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.createFromEncoded#94",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.createFromEncoded(java.lang.String, java.lang.String)",
    "snippet": "public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value \u003d Entities.unescape(encodedValue, true);\n        return new Attribute(unencodedKey, value);\n    }",
    "begin_line": 94,
    "end_line": 97,
    "comment": "/** \n * Create a new Attribute from an unencoded key and a HTML attribute encoded value.\n * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n * @param encodedValue HTML attribute encoded value\n * @return attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.isDataAttribute#99",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.isDataAttribute()",
    "snippet": "protected boolean isDataAttribute() {\n        return key.startsWith(Attributes.dataPrefix) \u0026\u0026 key.length() \u003e Attributes.dataPrefix.length();\n    }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.equals#104",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Attribute)) return false;\n\n        Attribute attribute \u003d (Attribute) o;\n\n        if (key !\u003d null ? !key.equals(attribute.key) : attribute.key !\u003d null) return false;\n        if (value !\u003d null ? !value.equals(attribute.value) : attribute.value !\u003d null) return false;\n\n        return true;\n    }",
    "begin_line": 104,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.hashCode#117",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d key !\u003d null ? key.hashCode() : 0;\n        result \u003d 31 * result + (value !\u003d null ? value.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 117,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.clone#124",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.clone()",
    "snippet": "@Override\n    public Attribute clone() {\n        try {\n            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy required\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "begin_line": 124,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.get#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.get(java.lang.String)",
    "snippet": "public String get(String key) {\n        Validate.notEmpty(key);\n\n        if (attributes \u003d\u003d null)\n            return \"\";\n\n        Attribute attr \u003d attributes.get(key.toLowerCase());\n        return attr !\u003d null ? attr.getValue() : \"\";\n    }",
    "begin_line": 30,
    "end_line": 38,
    "comment": "/** \n * Get an attribute value by key.\n * @param key the attribute key\n * @return the attribute value if set; or empty string if not set.\n * @see #hasKey(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#45",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "public void put(String key, String value) {\n        Attribute attr \u003d new Attribute(key, value);\n        put(attr);\n    }",
    "begin_line": 45,
    "end_line": 48,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param key attribute key\n * @param value attribute value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#54",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(org.jsoup.nodes.Attribute)",
    "snippet": "public void put(Attribute attribute) {\n        Validate.notNull(attribute);\n        if (attributes \u003d\u003d null)\n             attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n        attributes.put(attribute.getKey(), attribute);\n    }",
    "begin_line": 54,
    "end_line": 59,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param attribute attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove(java.lang.String)",
    "snippet": "public void remove(String key) {\n        Validate.notEmpty(key);\n        if (attributes \u003d\u003d null)\n            return;\n        attributes.remove(key.toLowerCase());\n    }",
    "begin_line": 65,
    "end_line": 70,
    "comment": "/** \n * Remove an attribute by key.\n * @param key attribute key to remove\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasKey#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasKey(java.lang.String)",
    "snippet": "public boolean hasKey(String key) {\n        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key.toLowerCase());\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Tests if these attributes contain an attribute with this key.\n * @param key key to check for\n * @return true if key exists, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.size#85",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n        if (attributes \u003d\u003d null)\n            return 0;\n        return attributes.size();\n    }",
    "begin_line": 85,
    "end_line": 89,
    "comment": "/** \n * Get the number of attributes in this set.\n * @return size\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.addAll#95",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.addAll(org.jsoup.nodes.Attributes)",
    "snippet": "public void addAll(Attributes incoming) {\n        if (incoming.size() \u003d\u003d 0)\n            return;\n        if (attributes \u003d\u003d null)\n            attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(incoming.size());\n        attributes.putAll(incoming.attributes);\n    }",
    "begin_line": 95,
    "end_line": 101,
    "comment": "/** \n * Add all the attributes from the incoming set to this set.\n * @param incoming attributes to add to these attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.iterator#103",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cAttribute\u003e iterator() {\n        return asList().iterator();\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.asList#112",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.asList()",
    "snippet": "public List\u003cAttribute\u003e asList() {\n        if (attributes \u003d\u003d null)\n            return Collections.emptyList();\n\n        List\u003cAttribute\u003e list \u003d new ArrayList\u003cAttribute\u003e(attributes.size());\n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            list.add(entry.getValue());\n        }\n        return Collections.unmodifiableList(list);\n    }",
    "begin_line": 112,
    "end_line": 121,
    "comment": "/** \n * Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes to keys will not be recognised in the containing set.\n * @return an view of the attributes as a List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.dataset#128",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return new Dataset();\n    }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys starting with  {@code data-}.\n * @return map of custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#136",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        return accum.toString();\n    }",
    "begin_line": 136,
    "end_line": 140,
    "comment": "/** \n * Get the HTML representation of these attributes.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#142",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void html(StringBuilder accum, Document.OutputSettings out) {\n        if (attributes \u003d\u003d null)\n            return;\n        \n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            Attribute attribute \u003d entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }",
    "begin_line": 142,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.toString#153",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.toString()",
    "snippet": "public String toString() {\n        return html();\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.equals#158",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Attributes)) return false;\n        \n        Attributes that \u003d (Attributes) o;\n        \n        if (attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null) return false;\n        \n        return true;\n    }",
    "begin_line": 158,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hashCode#170",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        return attributes !\u003d null ? attributes.hashCode() : 0;\n    }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.clone#175",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.clone()",
    "snippet": "@Override\n    public Attributes clone() {\n        if (attributes \u003d\u003d null)\n            return new Attributes();\n\n        Attributes clone;\n        try {\n            clone \u003d (Attributes) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n        clone.attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(attributes.size());\n        for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());\n        return clone;\n    }",
    "begin_line": 175,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.Dataset#193",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.Dataset()",
    "snippet": "private Dataset() {\n            if (attributes \u003d\u003d null)\n                attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n        }",
    "begin_line": 193,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.entrySet#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.entrySet()",
    "snippet": "public Set\u003cEntry\u003cString, String\u003e\u003e entrySet() {\n            return new EntrySet();\n        }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.put#203",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "@Override\n        public String put(String key, String value) {\n            String dataKey \u003d dataKey(key);\n            String oldValue \u003d hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n            Attribute attr \u003d new Attribute(dataKey, value);\n            attributes.put(dataKey, attr);\n            return oldValue;\n        }",
    "begin_line": 203,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.iterator#212",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iterator() {\n                return new DatasetIterator();\n            }",
    "begin_line": 212,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.size#216",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n                int count \u003d 0;\n                Iterator iter \u003d new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }",
    "begin_line": 216,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.hasNext#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasNext()",
    "snippet": "public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr \u003d attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }",
    "begin_line": 228,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.next#236",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.next()",
    "snippet": "public Entry\u003cString, String\u003e next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }",
    "begin_line": 236,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.remove#240",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove()",
    "snippet": "public void remove() {\n                attributes.remove(attr.getKey());\n            }",
    "begin_line": 240,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.dataKey#246",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataKey(java.lang.String)",
    "snippet": "private static String dataKey(String key) {\n        return dataPrefix + key;\n    }",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.Document#26",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.Document(java.lang.String)",
    "snippet": "public Document(String baseUri) {\n        super(Tag.valueOf(\"#root\"), baseUri);\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "/** \n * Create a new, empty Document.\n * @param baseUri base URI of document\n * @see org.jsoup.Jsoup#parse\n * @see #createShell\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createShell#35",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createShell(java.lang.String)",
    "snippet": "static public Document createShell(String baseUri) {\n        Validate.notNull(baseUri);\n\n        Document doc \u003d new Document(baseUri);\n        Element html \u003d doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n\n        return doc;\n    }",
    "begin_line": 35,
    "end_line": 44,
    "comment": "/** \n * Create a valid, empty shell of a document, suitable for adding more elements to.\n * @param baseUri baseUri of document\n * @return document with html, head, and body elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.head#50",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.head()",
    "snippet": "public Element head() {\n        return findFirstElementByTagName(\"head\", this);\n    }",
    "begin_line": 50,
    "end_line": 52,
    "comment": "/** \n * Accessor to the document\u0027s  {@code head} element.\n * @return {@code head}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.body#58",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.body()",
    "snippet": "public Element body() {\n        return findFirstElementByTagName(\"body\", this);\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "/** \n * Accessor to the document\u0027s  {@code body} element.\n * @return {@code body}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#66",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title()",
    "snippet": "public String title() {\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        return titleEl !\u003d null ? titleEl.text().trim() : \"\";\n    }",
    "begin_line": 66,
    "end_line": 69,
    "comment": "/** \n * Get the string contents of the document\u0027s  {@code title} element.\n * @return Trimmed title, or empty string if none set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#76",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title(java.lang.String)",
    "snippet": "public void title(String title) {\n        Validate.notNull(title);\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        if (titleEl \u003d\u003d null) { // add to head\n            head().appendElement(\"title\").text(title);\n        } else {\n            titleEl.text(title);\n        }\n    }",
    "begin_line": 76,
    "end_line": 84,
    "comment": "/** \n * Set the document\u0027s  {@code title} element. Updates the existing element, or adds {@code title} to {@code head} ifnot present\n * @param title string to set as title\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createElement#91",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createElement(java.lang.String)",
    "snippet": "public Element createElement(String tagName) {\n        return new Element(Tag.valueOf(tagName), this.baseUri());\n    }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "/** \n * Create a new Element, with this document\u0027s base uri. Does not make the new element a child of this document.\n * @param tagName element tag name (e.g. {@code a})\n * @return new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normalise#100",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normalise()",
    "snippet": "public Document normalise() {\n        Element htmlEl \u003d findFirstElementByTagName(\"html\", this);\n        if (htmlEl \u003d\u003d null)\n            htmlEl \u003d appendElement(\"html\");\n        if (head() \u003d\u003d null)\n            htmlEl.prependElement(\"head\");\n        if (body() \u003d\u003d null)\n            htmlEl.appendElement(\"body\");\n\n        // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n        // of. do in inverse order to maintain text order.\n        normaliseTextNodes(head());\n        normaliseTextNodes(htmlEl);\n        normaliseTextNodes(this);\n\n        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n        \n        return this;\n    }",
    "begin_line": 100,
    "end_line": 119,
    "comment": "/** \n * Normalise the document. This happens after the parse phase so generally does not need to be called. Moves any text content that is not in the body element into the body.\n * @return this document after normalisation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseTextNodes#122",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseTextNodes(org.jsoup.nodes.Element)",
    "snippet": "private void normaliseTextNodes(Element element) {\n        List\u003cNode\u003e toMove \u003d new ArrayList\u003cNode\u003e();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn \u003d (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        for (int i \u003d toMove.size()-1; i \u003e\u003d 0; i--) {\n            Node node \u003d toMove.get(i);\n            element.removeChild(node);\n            body().prependChild(new TextNode(\" \", \"\"));\n            body().prependChild(node);\n        }\n    }",
    "begin_line": 122,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseStructure#141",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
    "snippet": "private void normaliseStructure(String tag, Element htmlEl) {\n        Elements elements \u003d this.getElementsByTag(tag);\n        Element master \u003d elements.first(); // will always be available as created above if not existent\n        if (elements.size() \u003e 1) { // dupes, move contents to master\n            List\u003cNode\u003e toMove \u003d new ArrayList\u003cNode\u003e();\n            for (int i \u003d 1; i \u003c elements.size(); i++) {\n                Node dupe \u003d elements.get(i);\n                for (Node node : dupe.childNodes)\n                    toMove.add(node);\n                dupe.remove();\n            }\n\n            for (Node dupe : toMove)\n                master.appendChild(dupe);\n        }\n        // ensure parented by \u003chtml\u003e\n        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master); // includes remove()            \n        }\n    }",
    "begin_line": 141,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.findFirstElementByTagName#163",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.findFirstElementByTagName(java.lang.String, org.jsoup.nodes.Node)",
    "snippet": "private Element findFirstElementByTagName(String tag, Node node) {\n        if (node.nodeName().equals(tag))\n            return (Element) node;\n        else {\n            for (Node child: node.childNodes) {\n                Element found \u003d findFirstElementByTagName(tag, child);\n                if (found !\u003d null)\n                    return found;\n            }\n        }\n        return null;\n    }",
    "begin_line": 163,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.outerHtml#177",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outerHtml()",
    "snippet": "@Override\n    public String outerHtml() {\n        return super.html(); // no outer wrapper tag\n    }",
    "begin_line": 177,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.text#187",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.text(java.lang.String)",
    "snippet": "@Override\n    public Element text(String text) {\n        body().text(text); // overridden to not nuke doc structure\n        return this;\n    }",
    "begin_line": 187,
    "end_line": 190,
    "comment": "/** \n * Set the text of the  {@code body} of this document. Any existing nodes within the body will be cleared.\n * @param text unencoded text\n * @return this document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.nodeName#193",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return \"#document\";\n    }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.clone#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.clone()",
    "snippet": "@Override\n    public Document clone() {\n        Document clone \u003d (Document) super.clone();\n        clone.outputSettings \u003d this.outputSettings.clone();\n        return clone;\n    }",
    "begin_line": 198,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.OutputSettings#214",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.OutputSettings()",
    "snippet": "public OutputSettings() {}",
    "begin_line": 214,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#224",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode()",
    "snippet": "public Entities.EscapeMode escapeMode() {\n            return escapeMode;\n        }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "/** \n * Get the document\u0027s current HTML escape mode: \u003ccode\u003ebase\u003c/code\u003e, which provides a limited set of named HTML entities and escapes other characters as numbered entities for maximum compatibility; or \u003ccode\u003eextended\u003c/code\u003e, which uses the complete set of HTML named entities. \u003cp\u003e The default escape mode is \u003ccode\u003ebase\u003c/code\u003e.\n * @return the document\u0027s current escape mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#233",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode(org.jsoup.nodes.Entities.EscapeMode)",
    "snippet": "public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {\n            this.escapeMode \u003d escapeMode;\n            return this;\n        }",
    "begin_line": 233,
    "end_line": 236,
    "comment": "/** \n * Set the document\u0027s escape mode\n * @param escapeMode the new escape mode to use\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#246",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset()",
    "snippet": "public Charset charset() {\n            return charset;\n        }",
    "begin_line": 246,
    "end_line": 248,
    "comment": "/** \n * Get the document\u0027s current output charset, which is used to control which characters are escaped when generating HTML (via the \u003ccode\u003ehtml()\u003c/code\u003e methods), and which are kept intact. \u003cp\u003e Where possible (when parsing from a URL or File), the document\u0027s output charset is automatically set to the input charset. Otherwise, it defaults to UTF-8.\n * @return the document\u0027s current charset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#255",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.nio.charset.Charset)",
    "snippet": "public OutputSettings charset(Charset charset) {\n            // todo: this should probably update the doc\u0027s meta charset\n            this.charset \u003d charset;\n            charsetEncoder \u003d charset.newEncoder();\n            return this;\n        }",
    "begin_line": 255,
    "end_line": 260,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#267",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.lang.String)",
    "snippet": "public OutputSettings charset(String charset) {\n            charset(Charset.forName(charset));\n            return this;\n        }",
    "begin_line": 267,
    "end_line": 270,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset (by name) to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.encoder#272",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.encoder()",
    "snippet": "CharsetEncoder encoder() {\n            return charsetEncoder;\n        }",
    "begin_line": 272,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#281",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint()",
    "snippet": "public boolean prettyPrint() {\n            return prettyPrint;\n        }",
    "begin_line": 281,
    "end_line": 283,
    "comment": "/** \n * Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format the output, and the output will generally look like the input.\n * @return if pretty printing is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#290",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint(boolean)",
    "snippet": "public OutputSettings prettyPrint(boolean pretty) {\n            prettyPrint \u003d pretty;\n            return this;\n        }",
    "begin_line": 290,
    "end_line": 293,
    "comment": "/** \n * Enable or disable pretty printing.\n * @param pretty new pretty print setting\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#299",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount()",
    "snippet": "public int indentAmount() {\n            return indentAmount;\n        }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "/** \n * Get the current tag indent amount, used when pretty printing.\n * @return the current indent amount\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#308",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount(int)",
    "snippet": "public OutputSettings indentAmount(int indentAmount) {\n            Validate.isTrue(indentAmount \u003e\u003d 0);\n            this.indentAmount \u003d indentAmount;\n            return this;\n        }",
    "begin_line": 308,
    "end_line": 312,
    "comment": "/** \n * Set the indent amount for pretty printing\n * @param indentAmount number of spaces to use for indenting each level. Must be \u003e\u003d 0.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.clone#315",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.clone()",
    "snippet": "@Override\n        public OutputSettings clone() {\n            OutputSettings clone;\n            try {\n                clone \u003d (OutputSettings) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new RuntimeException(e);\n            }\n            clone.charset(charset.name()); // new charset and charset encoder\n            clone.escapeMode \u003d Entities.EscapeMode.valueOf(escapeMode.name());\n            // indentAmount, prettyPrint are primitives so object.clone() will handle\n            return clone;\n        }",
    "begin_line": 315,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outputSettings#333",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outputSettings()",
    "snippet": "public OutputSettings outputSettings() {\n        return outputSettings;\n    }",
    "begin_line": 333,
    "end_line": 335,
    "comment": "/** \n * Get the document\u0027s current output settings.\n * @return the document\u0027s current output settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outputSettings#342",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outputSettings(org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "public Document outputSettings(OutputSettings outputSettings) {\n        Validate.notNull(outputSettings);\n        this.outputSettings \u003d outputSettings;\n        return this;\n    }",
    "begin_line": 342,
    "end_line": 346,
    "comment": "/** \n * Set the document\u0027s output settings.\n * @param outputSettings new output settings.\n * @return this document, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.quirksMode#352",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.quirksMode()",
    "snippet": "public QuirksMode quirksMode() {\n        return quirksMode;\n    }",
    "begin_line": 352,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.quirksMode#356",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.quirksMode(org.jsoup.nodes.Document.QuirksMode)",
    "snippet": "public Document quirksMode(QuirksMode quirksMode) {\n        this.quirksMode \u003d quirksMode;\n        return this;\n    }",
    "begin_line": 356,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#37",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag \u003d tag;\n    }",
    "begin_line": 37,
    "end_line": 42,
    "comment": "/** \n * Create a new, standalone Element. (Standalone in that is has no parent.)\n * @param tag tag of this element\n * @param baseUri the base URI\n * @param attributes initial attributes\n * @see #appendChild(Node)\n * @see #appendElement(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#52",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String)",
    "snippet": "public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "/** \n * Create a new Element from a tag and a base URI.\n * @param tag element tag\n * @param baseUri the base URI of this element. It is acceptable for the base URI to be an emptystring, but not null.\n * @see Tag#valueOf(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nodeName#57",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return tag.getName();\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#66",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName()",
    "snippet": "public String tagName() {\n        return tag.getName();\n    }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Get the name of the tag for this element. E.g.  {@code div}\n * @return the tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName(java.lang.String)",
    "snippet": "public Element tagName(String tagName) {\n        Validate.notEmpty(tagName, \"Tag name must not be empty.\");\n        tag \u003d Tag.valueOf(tagName);\n        return this;\n    }",
    "begin_line": 77,
    "end_line": 81,
    "comment": "/** \n * Change the tag of this element. For example, convert a  {@code \u003cspan\u003e} to a {@code \u003cdiv\u003e} with{@code el.tagName(\"div\");}.\n * @param tagName new tag name for this element\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tag#88",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tag()",
    "snippet": "public Tag tag() {\n        return tag;\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "/** \n * Get the Tag for this element.\n * @return the tag object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.isBlock#98",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.isBlock()",
    "snippet": "public boolean isBlock() {\n        return tag.isBlock();\n    }",
    "begin_line": 98,
    "end_line": 100,
    "comment": "/** \n * Test if this element is a block-level element. (E.g.  {@code \u003cdiv\u003e \u003d\u003d true} or an inline element{@code \u003cp\u003e \u003d\u003d false}).\n * @return true if block, false if not (and thus inline)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.id#107",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.id()",
    "snippet": "public String id() {\n        String id \u003d attr(\"id\");\n        return id \u003d\u003d null ? \"\" : id;\n    }",
    "begin_line": 107,
    "end_line": 110,
    "comment": "/** \n * Get the  {@code id} attribute of this element.\n * @return The id attribute, if present, or an empty string if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attr#118",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attr(java.lang.String, java.lang.String)",
    "snippet": "public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 118,
    "end_line": 121,
    "comment": "/** \n * Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataset#136",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return attributes.dataset();\n    }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Get this element\u0027s HTML5 custom data attributes. Each attribute in the element that has a key starting with \"data-\" is included the dataset. \u003cp\u003e E.g., the element  {@code \u003cdiv data-package\u003d\"jsoup\" data-language\u003d\"Java\" class\u003d\"group\"\u003e...} has the dataset{@code package\u003djsoup, language\u003djava}. \u003cp\u003e This map is a filtered view of the element\u0027s attribute map. Changes to one map (add, remove, update) are reflected in the other map. \u003cp\u003e You can find elements that have data attributes using the  {@code [^data-]} attribute key prefix selector.\n * @return a map of {@code key\u003dvalue} custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parent#141",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parent()",
    "snippet": "@Override\n    public final Element parent() {\n        return (Element) parentNode;\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parents#149",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parents()",
    "snippet": "public Elements parents() {\n        Elements parents \u003d new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }",
    "begin_line": 149,
    "end_line": 153,
    "comment": "/** \n * Get this element\u0027s parent and ancestors, up to the document root.\n * @return this element\u0027s stack of parents, closest first.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.accumulateParents#155",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
    "snippet": "private static void accumulateParents(Element el, Elements parents) {\n        Element parent \u003d el.parent();\n        if (parent !\u003d null \u0026\u0026 !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }",
    "begin_line": 155,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.child#173",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.child(int)",
    "snippet": "public Element child(int index) {\n        return children().get(index);\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "/** \n * Get a child element of this element, by its 0-based index number. \u003cp/\u003e Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list.\n * @param index the index number of the element to retrieve\n * @return the child element, if it exists, or {@code null} if absent.\n * @see #childNode(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.children#185",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.children()",
    "snippet": "public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List\u003cElement\u003e elements \u003d new ArrayList\u003cElement\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }",
    "begin_line": 185,
    "end_line": 193,
    "comment": "/** \n * Get this element\u0027s child elements. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Element nodes.\n * @return child elements. If this element has no children, returns anempty list.\n * @see #childNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.textNodes#211",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.textNodes()",
    "snippet": "public List\u003cTextNode\u003e textNodes() {\n        List\u003cTextNode\u003e textNodes \u003d new ArrayList\u003cTextNode\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof TextNode)\n                textNodes.add((TextNode) node);\n        }\n        return Collections.unmodifiableList(textNodes);\n    }",
    "begin_line": 211,
    "end_line": 218,
    "comment": "/** \n * Get this element\u0027s child text nodes. The list is unmodifiable but the text nodes may be manipulated. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Text nodes.\n * @return child text nodes. If this element has no text nodes, returns anempty list. \u003cp/\u003e For example, with the input HTML:  {@code \u003cp\u003eOne \u003cspan\u003eTwo\u003c/span\u003e Three \u003cbr\u003e Four\u003c/p\u003e} with the {@code p} element selected:\u003cul\u003e \u003cli\u003e {@code p.text()} \u003d {@code \"One Two Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.ownText()} \u003d {@code \"One Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.children()} \u003d {@code Elements[\u003cspan\u003e, \u003cbr\u003e]}\u003c/li\u003e \u003cli\u003e {@code p.childNodes()} \u003d {@code List\u003cNode\u003e[\"One \", \u003cspan\u003e, \" Three \", \u003cbr\u003e, \" Four\"]}\u003c/li\u003e \u003cli\u003e {@code p.textNodes()} \u003d {@code List\u003cTextNode\u003e[\"One \", \" Three \", \" Four\"]}\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataNodes#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataNodes()",
    "snippet": "public List\u003cDataNode\u003e dataNodes() {\n        List\u003cDataNode\u003e dataNodes \u003d new ArrayList\u003cDataNode\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof DataNode)\n                dataNodes.add((DataNode) node);\n        }\n        return Collections.unmodifiableList(dataNodes);\n    }",
    "begin_line": 228,
    "end_line": 235,
    "comment": "/** \n * Get this element\u0027s child data nodes. The list is unmodifiable but the data nodes may be manipulated. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Data nodes.\n * @return child data nodes. If this element has no data nodes, returns anempty list.\n * @see #data()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.select#254",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.select(java.lang.String)",
    "snippet": "public Elements select(String cssQuery) {\n        return Selector.select(cssQuery, this);\n    }",
    "begin_line": 254,
    "end_line": 256,
    "comment": "/** \n * Find elements that match the  {@link Selector} CSS query, with this element as the starting context. Matched elementsmay include this element, or any of its children. \u003cp/\u003e This method is generally more powerful to use than the DOM-type  {@code getElementBy*} methods, becausemultiple filters can be combined, e.g.: \u003cul\u003e \u003cli\u003e {@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\u003cli\u003e {@code el.select(\"a[href*\u003dexample.com]\")} - finds links pointing to example.com (loosely)\u003c/ul\u003e \u003cp/\u003e See the query syntax documentation in  {@link org.jsoup.select.Selector}.\n * @param cssQuery a {@link Selector} CSS-like query\n * @return elements that match the query (empty if none match)\n * @see org.jsoup.select.Selector\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendChild#264",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendChild(org.jsoup.nodes.Node)",
    "snippet": "public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(child);\n        return this;\n    }",
    "begin_line": 264,
    "end_line": 269,
    "comment": "/** \n * Add a node child node to this element.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependChild#277",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependChild(org.jsoup.nodes.Node)",
    "snippet": "public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(0, child);\n        return this;\n    }",
    "begin_line": 277,
    "end_line": 282,
    "comment": "/** \n * Add a node to the start of this element\u0027s children.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendElement#291",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendElement(java.lang.String)",
    "snippet": "public Element appendElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }",
    "begin_line": 291,
    "end_line": 295,
    "comment": "/** \n * Create a new element by tag name, and add it as the last child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependElement#304",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependElement(java.lang.String)",
    "snippet": "public Element prependElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }",
    "begin_line": 304,
    "end_line": 308,
    "comment": "/** \n * Create a new element by tag name, and add it as the first child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendText#316",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendText(java.lang.String)",
    "snippet": "public Element appendText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }",
    "begin_line": 316,
    "end_line": 320,
    "comment": "/** \n * Create and append a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependText#328",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependText(java.lang.String)",
    "snippet": "public Element prependText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }",
    "begin_line": 328,
    "end_line": 332,
    "comment": "/** \n * Create and prepend a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.append#340",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.append(java.lang.String)",
    "snippet": "public Element append(String html) {\n        Validate.notNull(html);\n\n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 340,
    "end_line": 346,
    "comment": "/** \n * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n * @param html HTML to add inside this element, after the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prepend#354",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prepend(java.lang.String)",
    "snippet": "public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(0, nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 354,
    "end_line": 360,
    "comment": "/** \n * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element\u0027s children.\n * @param html HTML to add inside this element, before the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#370",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(java.lang.String)",
    "snippet": "@Override\n    public Element before(String html) {\n        return (Element) super.before(html);\n    }",
    "begin_line": 370,
    "end_line": 372,
    "comment": "/** \n * Insert the specified HTML into the DOM before this element (i.e. as a preceding sibling).\n * @param html HTML to add before this element\n * @return this element, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#381",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element before(Node node) {\n        return (Element) super.before(node);\n    }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "/** \n * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n * @param node to add before this element\n * @return this Element, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#393",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(java.lang.String)",
    "snippet": "@Override\n    public Element after(String html) {\n        return (Element) super.after(html);\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n * @param html HTML to add after this element\n * @return this element, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#404",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element after(Node node) {\n        return (Element) super.after(node);\n    }",
    "begin_line": 404,
    "end_line": 406,
    "comment": "/** \n * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n * @param node to add after this element\n * @return this element, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.empty#412",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.empty()",
    "snippet": "public Element empty() {\n        childNodes.clear();\n        return this;\n    }",
    "begin_line": 412,
    "end_line": 415,
    "comment": "/** \n * Remove all of the element\u0027s child nodes. Any attributes are left as-is.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.wrap#424",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.wrap(java.lang.String)",
    "snippet": "@Override\n    public Element wrap(String html) {\n        return (Element) super.wrap(html);\n    }",
    "begin_line": 424,
    "end_line": 426,
    "comment": "/** \n * Wrap the supplied HTML around this element.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.siblingElements#433",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.siblingElements()",
    "snippet": "public Elements siblingElements() {\n        if (parentNode \u003d\u003d null)\n            return new Elements(0);\n\n        List\u003cElement\u003e elements \u003d parent().children();\n        Elements siblings \u003d new Elements(elements.size() - 1);\n        for (Element el: elements)\n            if (el !\u003d this)\n                siblings.add(el);\n        return siblings;\n    }",
    "begin_line": 433,
    "end_line": 443,
    "comment": "/** \n * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list.\n * @return sibling elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nextElementSibling#453",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nextElementSibling()",
    "snippet": "public Element nextElementSibling() {\n        if (parentNode \u003d\u003d null) return null;\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 453,
    "end_line": 462,
    "comment": "/** \n * Gets the next sibling element of this element. E.g., if a  {@code div} contains two {@code p}s,  the  {@code nextElementSibling} of the first {@code p} is the second {@code p}. \u003cp/\u003e This is similar to  {@link #nextSibling()}, but specifically finds only Elements\n * @return the next element, or null if there is no next element\n * @see #previousElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.previousElementSibling#469",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.previousElementSibling()",
    "snippet": "public Element previousElementSibling() {\n        if (parentNode \u003d\u003d null) return null;\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 469,
    "end_line": 478,
    "comment": "/** \n * Gets the previous element sibling of this element.\n * @return the previous element, or null if there is no previous element\n * @see #nextElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.firstElementSibling#484",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.firstElementSibling()",
    "snippet": "public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(0) : null;\n    }",
    "begin_line": 484,
    "end_line": 488,
    "comment": "/** \n * Gets the first element sibling of this element.\n * @return the first sibling that is an element (aka the parent\u0027s first element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.elementSiblingIndex#495",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.elementSiblingIndex()",
    "snippet": "public Integer elementSiblingIndex() {\n       if (parent() \u003d\u003d null) return 0;\n       return indexInList(this, parent().children()); \n    }",
    "begin_line": 495,
    "end_line": 498,
    "comment": "/** \n * Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0.\n * @return position in element sibling list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.lastElementSibling#504",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.lastElementSibling()",
    "snippet": "public Element lastElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(siblings.size() - 1) : null;\n    }",
    "begin_line": 504,
    "end_line": 507,
    "comment": "/** \n * Gets the last element sibling of this element\n * @return the last sibling that is an element (aka the parent\u0027s last element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.indexInList#509",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.indexInList(org.jsoup.nodes.Element, java.util.List\u003cE\u003e)",
    "snippet": "private static \u003cE extends Element\u003e Integer indexInList(Element search, List\u003cE\u003e elements) {\n        Validate.notNull(search);\n        Validate.notNull(elements);\n\n        for (int i \u003d 0; i \u003c elements.size(); i++) {\n            E element \u003d elements.get(i);\n            if (element.equals(search))\n                return i;\n        }\n        return null;\n    }",
    "begin_line": 509,
    "end_line": 519,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByTag#528",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByTag(java.lang.String)",
    "snippet": "public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName \u003d tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }",
    "begin_line": 528,
    "end_line": 533,
    "comment": "/** \n * Finds elements, including and recursively under this element, with the specified tag name.\n * @param tagName The tag name to search for (case insensitively).\n * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementById#544",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementById(java.lang.String)",
    "snippet": "public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements \u003d Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() \u003e 0)\n            return elements.get(0);\n        else\n            return null;\n    }",
    "begin_line": 544,
    "end_line": 552,
    "comment": "/** \n * Find an element by ID, including or under this element. \u003cp\u003e Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use  {@link Document#getElementById(String)}\n * @param id The ID to search for.\n * @return The first matching element by ID, starting with this element, or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByClass#565",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByClass(java.lang.String)",
    "snippet": "public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }",
    "begin_line": 565,
    "end_line": 569,
    "comment": "/** \n * Find elements that have this class, including or under this element. Case insensitive. \u003cp\u003e Elements can have multiple classes (e.g.  {@code \u003cdiv class\u003d\"header round first\"\u003e}. This method checks each class, so you can find the above with  {@code el.getElementsByClass(\"header\");}.\n * @param className the name of the class to search for.\n * @return elements with the supplied class name, empty if none\n * @see #hasClass(String)\n * @see #classNames()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttribute#577",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttribute(java.lang.String)",
    "snippet": "public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key \u003d key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }",
    "begin_line": 577,
    "end_line": 582,
    "comment": "/** \n * Find elements that have a named attribute set. Case insensitive.\n * @param key name of the attribute, e.g. {@code href}\n * @return elements that have this attribute, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeStarting#590",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeStarting(java.lang.String)",
    "snippet": "public Elements getElementsByAttributeStarting(String keyPrefix) {\n        Validate.notEmpty(keyPrefix);\n        keyPrefix \u003d keyPrefix.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n    }",
    "begin_line": 590,
    "end_line": 595,
    "comment": "/** \n * Find elements that have an attribute name starting with the supplied prefix. Use  {@code data-} to find elementsthat have HTML5 datasets.\n * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n * @return elements that have attribute names that start with with the prefix, empty if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValue#604",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValue(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }",
    "begin_line": 604,
    "end_line": 606,
    "comment": "/** \n * Find elements that have an attribute with the specific value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that have this attribute with this value, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueNot#615",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueNot(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }",
    "begin_line": 615,
    "end_line": 617,
    "comment": "/** \n * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that do not have a matching attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueStarting#626",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueStarting(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }",
    "begin_line": 626,
    "end_line": 628,
    "comment": "/** \n * Find elements that have attributes that start with the value prefix. Case insensitive.\n * @param key name of the attribute\n * @param valuePrefix start of attribute value\n * @return elements that have attributes that start with the value prefix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueEnding#637",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }",
    "begin_line": 637,
    "end_line": 639,
    "comment": "/** \n * Find elements that have attributes that end with the value suffix. Case insensitive.\n * @param key name of the attribute\n * @param valueSuffix end of the attribute value\n * @return elements that have attributes that end with the value suffix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueContaining#648",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueContaining(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }",
    "begin_line": 648,
    "end_line": 650,
    "comment": "/** \n * Find elements that have attributes whose value contains the match string. Case insensitive.\n * @param key name of the attribute\n * @param match substring of value to search for\n * @return elements that have attributes containing this text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#658",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n        \n    }",
    "begin_line": 658,
    "end_line": 661,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param pattern compiled regular expression to match against attribute values\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#669",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsByAttributeValueMatching(key, pattern);\n    }",
    "begin_line": 669,
    "end_line": 677,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param regex regular expression to match against attribute values. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexLessThan#684",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexLessThan(int)",
    "snippet": "public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }",
    "begin_line": 684,
    "end_line": 686,
    "comment": "/** \n * Find elements whose sibling index is less than the supplied index.\n * @param index 0-based index\n * @return elements less than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexGreaterThan#693",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexGreaterThan(int)",
    "snippet": "public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }",
    "begin_line": 693,
    "end_line": 695,
    "comment": "/** \n * Find elements whose sibling index is greater than the supplied index.\n * @param index 0-based index\n * @return elements greater than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexEquals#702",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexEquals(int)",
    "snippet": "public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }",
    "begin_line": 702,
    "end_line": 704,
    "comment": "/** \n * Find elements whose sibling index is equal to the supplied index.\n * @param index 0-based index\n * @return elements equal to index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingText#713",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingText(java.lang.String)",
    "snippet": "public Elements getElementsContainingText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n    }",
    "begin_line": 713,
    "end_line": 715,
    "comment": "/** \n * Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants.\n * @param searchText to look for in the element\u0027s text\n * @return elements that contain the string, case insensitive.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingOwnText#724",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsContainingOwnText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n    }",
    "begin_line": 724,
    "end_line": 726,
    "comment": "/** \n * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants.\n * @param searchText to look for in the element\u0027s own text\n * @return elements that contain the string, case insensitive.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#734",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingText(Pattern pattern) {\n        return Collector.collect(new Evaluator.Matches(pattern), this);\n    }",
    "begin_line": 734,
    "end_line": 736,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#744",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingText(pattern);\n    }",
    "begin_line": 744,
    "end_line": 752,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#760",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingOwnText(Pattern pattern) {\n        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n    }",
    "begin_line": 760,
    "end_line": 762,
    "comment": "/** \n * Find elements whose own text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#770",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingOwnText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingOwnText(pattern);\n    }",
    "begin_line": 770,
    "end_line": 778,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getAllElements#785",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getAllElements()",
    "snippet": "public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }",
    "begin_line": 785,
    "end_line": 787,
    "comment": "/** \n * Find all elements under this element (including self, and children of children).\n * @return all elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#798",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text()",
    "snippet": "public String text() {\n        StringBuilder sb \u003d new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 798,
    "end_line": 802,
    "comment": "/** \n * Gets the combined text of this element and all its children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.text()} returns {@code \"Hello there now!\"}\n * @return unencoded text, or empty string if none.\n * @see #ownText()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#804",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.StringBuilder)",
    "snippet": "private void text(StringBuilder accum) {\n        appendWhitespaceIfBr(this, accum);\n        \n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                Element element \u003d (Element) child;\n                if (accum.length() \u003e 0 \u0026\u0026 element.isBlock() \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }",
    "begin_line": 804,
    "end_line": 818,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#831",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText()",
    "snippet": "public String ownText() {\n        StringBuilder sb \u003d new StringBuilder();\n        ownText(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 831,
    "end_line": 835,
    "comment": "/** \n * Gets the text owned by this element only; does not get the combined text of all children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.ownText()} returns {@code \"Hello now!\"}, whereas  {@code p.text()} returns {@code \"Hello there now!\"}. Note that the text within the  {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n * @return unencoded text, or empty string if none.\n * @see #text()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#837",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText(java.lang.StringBuilder)",
    "snippet": "private void ownText(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                appendWhitespaceIfBr((Element) child, accum);\n            }\n        }\n    }",
    "begin_line": 837,
    "end_line": 846,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendNormalisedText#848",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
    "snippet": "private void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n        String text \u003d textNode.getWholeText();\n\n        if (!preserveWhitespace()) {\n            text \u003d TextNode.normaliseWhitespace(text);\n            if (TextNode.lastCharIsWhitespace(accum))\n                text \u003d TextNode.stripLeadingWhitespace(text);\n        }\n        accum.append(text);\n    }",
    "begin_line": 848,
    "end_line": 857,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendWhitespaceIfBr#859",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendWhitespaceIfBr(org.jsoup.nodes.Element, java.lang.StringBuilder)",
    "snippet": "private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n        if (element.tag.getName().equals(\"br\") \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n            accum.append(\" \");\n    }",
    "begin_line": 859,
    "end_line": 862,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.preserveWhitespace#864",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.preserveWhitespace()",
    "snippet": "boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() !\u003d null \u0026\u0026 parent().preserveWhitespace();\n    }",
    "begin_line": 864,
    "end_line": 866,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#873",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.String)",
    "snippet": "public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode \u003d new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }",
    "begin_line": 873,
    "end_line": 881,
    "comment": "/** \n * Set the text of this element. Any existing contents (text or elements) will be cleared\n * @param text unencoded text\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasText#887",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasText()",
    "snippet": "public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el \u003d (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 887,
    "end_line": 900,
    "comment": "/** \n * Test if this element has any text content (that is not just whitespace).\n * @return true if element has non-blank text content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.data#908",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.data()",
    "snippet": "public String data() {\n        StringBuilder sb \u003d new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data \u003d (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element \u003d (Element) childNode;\n                String elementData \u003d element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }",
    "begin_line": 908,
    "end_line": 922,
    "comment": "/** \n * Get the combined data of this element. Data is e.g. the inside of a  {@code script} tag.\n * @return the data, or empty string if none\n * @see #dataNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.className#929",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.className()",
    "snippet": "public String className() {\n        return attr(\"class\");\n    }",
    "begin_line": 929,
    "end_line": 931,
    "comment": "/** \n * Gets the literal value of this element\u0027s \"class\" attribute, which may include multiple class names, space separated. (E.g. on \u003ccode\u003e\u0026lt;div class\u003d\"header gray\"\u003e\u003c/code\u003e returns, \"\u003ccode\u003eheader gray\u003c/code\u003e\")\n * @return The literal class attribute, or \u003cb\u003eempty string\u003c/b\u003e if no class attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#939",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames()",
    "snippet": "public Set\u003cString\u003e classNames() {\n        if (classNames \u003d\u003d null) {\n            String[] names \u003d className().split(\"\\\\s+\");\n            classNames \u003d new LinkedHashSet\u003cString\u003e(Arrays.asList(names));\n        }\n        return classNames;\n    }",
    "begin_line": 939,
    "end_line": 945,
    "comment": "/** \n * Get all of the element\u0027s class names. E.g. on element  {@code \u003cdiv class\u003d\"header gray\"}\u003e}, returns a set of two elements  {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to the backing  {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n * @return set of classnames, empty if no class attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#952",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public Element classNames(Set\u003cString\u003e classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n        return this;\n    }",
    "begin_line": 952,
    "end_line": 956,
    "comment": "/** \n * Set the element\u0027s  {@code class} attribute to the supplied class names.\n * @param classNames set of classes\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasClass#963",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasClass(java.lang.String)",
    "snippet": "public boolean hasClass(String className) {\n        Set\u003cString\u003e classNames \u003d classNames();\n        for (String name : classNames) {\n            if (className.equalsIgnoreCase(name))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 963,
    "end_line": 970,
    "comment": "/** \n * Tests if this element has a class. Case insensitive.\n * @param className name of class to check for\n * @return true if it does, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.addClass#977",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.addClass(java.lang.String)",
    "snippet": "public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 977,
    "end_line": 985,
    "comment": "/** \n * Add a class name to this element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.removeClass#992",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.removeClass(java.lang.String)",
    "snippet": "public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 992,
    "end_line": 1000,
    "comment": "/** \n * Remove a class name from this element\u0027s  {@code class} attribute.\n * @param className class name to remove\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toggleClass#1007",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toggleClass(java.lang.String)",
    "snippet": "public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 1007,
    "end_line": 1018,
    "comment": "/** \n * Toggle a class name on this element\u0027s  {@code class} attribute: if present, remove it; otherwise add it.\n * @param className class name to toggle\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1024",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val()",
    "snippet": "public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }",
    "begin_line": 1024,
    "end_line": 1029,
    "comment": "/** \n * Get the value of a form element (input, textarea, etc).\n * @return the value of the form element, or empty string if not set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1036",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val(java.lang.String)",
    "snippet": "public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }",
    "begin_line": 1036,
    "end_line": 1042,
    "comment": "/** \n * Set the value of a form element (input, textarea, etc).\n * @param value value to set\n * @return this element (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlHead#1044",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (accum.length() \u003e 0 \u0026\u0026 out.prettyPrint() \u0026\u0026 (tag.formatAsBlock() || (parent() !\u003d null \u0026\u0026 parent().tag().formatAsBlock())))\n            indent(accum, depth, out);\n        accum\n                .append(\"\u003c\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())\n            accum.append(\" /\u003e\");\n        else\n            accum.append(\"\u003e\");\n    }",
    "begin_line": 1044,
    "end_line": 1056,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlTail#1058",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (!(childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())) {\n            if (out.prettyPrint() \u0026\u0026 !childNodes.isEmpty() \u0026\u0026 tag.formatAsBlock())\n                indent(accum, depth, out);\n            accum.append(\"\u003c/\").append(tagName()).append(\"\u003e\");\n        }\n    }",
    "begin_line": 1058,
    "end_line": 1064,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1073",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }",
    "begin_line": 1073,
    "end_line": 1077,
    "comment": "/** \n * Retrieves the element\u0027s inner HTML. E.g. on a  {@code \u003cdiv\u003e} with one empty {@code \u003cp\u003e}, would return {@code \u003cp\u003e\u003c/p\u003e}. (Whereas  {@link #outerHtml()} would return {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e}.)\n * @return String of HTML.\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1079",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.StringBuilder)",
    "snippet": "private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }",
    "begin_line": 1079,
    "end_line": 1082,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1090",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.String)",
    "snippet": "public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }",
    "begin_line": 1090,
    "end_line": 1094,
    "comment": "/** \n * Set this element\u0027s inner HTML. Clears the existing HTML first.\n * @param html HTML to parse and set into this element\n * @return this element\n * @see #append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toString#1096",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 1096,
    "end_line": 1098,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.equals#1101",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        return this \u003d\u003d o;\n    }",
    "begin_line": 1101,
    "end_line": 1103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hashCode#1106",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        // todo: fixup, not very useful\n        int result \u003d super.hashCode();\n        result \u003d 31 * result + (tag !\u003d null ? tag.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 1106,
    "end_line": 1111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.clone#1114",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.clone()",
    "snippet": "@Override\n    public Element clone() {\n        Element clone \u003d (Element) super.clone();\n        clone.classNames(); // creates linked set of class names from class attribute\n        return clone;\n    }",
    "begin_line": 1114,
    "end_line": 1118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.EscapeMode#26",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.EscapeMode(java.util.Map\u003cjava.lang.Character,java.lang.String\u003e)",
    "snippet": " EscapeMode(Map\u003cCharacter, String\u003e map) {\n            this.map \u003d map;\n        }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.getMap#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.getMap()",
    "snippet": "public Map\u003cCharacter, String\u003e getMap() {\n            return map;\n        }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.Entities#42",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.Entities()",
    "snippet": "private Entities() {}",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.isNamedEntity#49",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.isNamedEntity(java.lang.String)",
    "snippet": "public static boolean isNamedEntity(String name) {\n        return full.containsKey(name);\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Check if the input is a known named entity\n * @param name the possible entity name (e.g. \"lt\" or \"amp\"\n * @return true if a known named entity\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.getCharacterByName#58",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.getCharacterByName(java.lang.String)",
    "snippet": "public static Character getCharacterByName(String name) {\n        return full.get(name);\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "/** \n * Get the Character value of the named entity\n * @param name named entity (e.g. \"lt\" or \"amp\")\n * @return the Character value of the named entity (e.g. \u0027\u003c\u0027 or \u0027\u0026\u0027)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#62",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "static String escape(String string, Document.OutputSettings out) {\n        return escape(string, out.encoder(), out.escapeMode());\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#66",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities.EscapeMode)",
    "snippet": "static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n        StringBuilder accum \u003d new StringBuilder(string.length() * 2);\n        Map\u003cCharacter, String\u003e map \u003d escapeMode.getMap();\n\n        for (int pos \u003d 0; pos \u003c string.length(); pos++) {\n            Character c \u003d string.charAt(pos);\n            if (map.containsKey(c))\n                accum.append(\u0027\u0026\u0027).append(map.get(c)).append(\u0027;\u0027);\n            else if (encoder.canEncode(c))\n                accum.append(c.charValue());\n            else\n                accum.append(\"\u0026#\").append((int) c).append(\u0027;\u0027);\n        }\n\n        return accum.toString();\n    }",
    "begin_line": 66,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.unescape#83",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String)",
    "snippet": "static String unescape(String string) {\n        return unescape(string, false);\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.unescape#93",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String, boolean)",
    "snippet": "static String unescape(String string, boolean strict) {\n        // todo: change this method to use Tokeniser.consumeCharacterReference\n        if (!string.contains(\"\u0026\"))\n            return string;\n\n        Matcher m \u003d strict? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string); // \u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]\\\\d*);?\n        StringBuffer accum \u003d new StringBuffer(string.length()); // pity matcher can\u0027t use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval \u003d -1;\n            String num \u003d m.group(3);\n            if (num !\u003d null) {\n                try {\n                    int base \u003d m.group(2) !\u003d null ? 16 : 10; // 2 is hex indicator\n                    charval \u003d Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name \u003d m.group(1);\n                if (full.containsKey(name))\n                    charval \u003d full.get(name);\n            }\n\n            if (charval !\u003d -1 || charval \u003e 0xFFFF) { // out of range\n                String c \u003d Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "begin_line": 93,
    "end_line": 126,
    "comment": "/** \n * Unescape the input string.\n * @param string\n * @param strict if \"strict\" (that is, requires trailing \u0027;\u0027 char, otherwise that\u0027s optional)\n * @return\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.loadEntities#149",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.loadEntities(java.lang.String)",
    "snippet": "private static Map\u003cString, Character\u003e loadEntities(String filename) {\n        Properties properties \u003d new Properties();\n        Map\u003cString, Character\u003e entities \u003d new HashMap\u003cString, Character\u003e();\n        try {\n            InputStream in \u003d Entities.class.getResourceAsStream(filename);\n            properties.load(in);\n            in.close();\n        } catch (IOException e) {\n            throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);\n        }\n\n        for (Map.Entry entry: properties.entrySet()) {\n            Character val \u003d Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));\n            String name \u003d (String) entry.getKey();\n            entities.put(name, val);\n        }\n        return entities;\n    }",
    "begin_line": 149,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.toCharacterKey#168",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.toCharacterKey(java.util.Map\u003cjava.lang.String,java.lang.Character\u003e)",
    "snippet": "private static Map\u003cCharacter, String\u003e toCharacterKey(Map\u003cString, Character\u003e inMap) {\n        Map\u003cCharacter, String\u003e outMap \u003d new HashMap\u003cCharacter, String\u003e();\n        for (Map.Entry\u003cString, Character\u003e entry: inMap.entrySet()) {\n            Character character \u003d entry.getValue();\n            String name \u003d entry.getKey();\n\n            if (outMap.containsKey(character)) {\n                // dupe, prefer the lower case version\n                if (name.toLowerCase().equals(name))\n                    outMap.put(character, name);\n            } else {\n                outMap.put(character, name);\n            }\n        }\n        return outMap;\n    }",
    "begin_line": 168,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#31",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "protected Node(String baseUri, Attributes attributes) {\n        Validate.notNull(baseUri);\n        Validate.notNull(attributes);\n        \n        childNodes \u003d new ArrayList\u003cNode\u003e(4);\n        this.baseUri \u003d baseUri.trim();\n        this.attributes \u003d attributes;\n    }",
    "begin_line": 31,
    "end_line": 38,
    "comment": "/** \n * Create a new Node.\n * @param baseUri base URI\n * @param attributes attributes (not null, but may be empty)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String)",
    "snippet": "protected Node(String baseUri) {\n        this(baseUri, new Attributes());\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#47",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node()",
    "snippet": "protected Node() {\n        childNodes \u003d Collections.emptyList();\n        attributes \u003d null;\n    }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "/** \n * Default constructor. Doesn\u0027t setup base uri, children, or attributes; use with caution.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nodeName#56",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nodeName()",
    "snippet": "public abstract String nodeName();",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n * @return node name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#70",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributes.hasKey(attributeKey))\n            return attributes.get(attributeKey);\n        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n            return absUrl(attributeKey.substring(\"abs:\".length()));\n        else return \"\";\n    }",
    "begin_line": 70,
    "end_line": 78,
    "comment": "/** \n * Get an attribute\u0027s value by its key. \u003cp/\u003e To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e, which is a shortcut to the  {@link #absUrl} method.E.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n * @param attributeKey The attribute key.\n * @return The attribute, or empty string if not present (to avoid nulls).\n * @see #attributes()\n * @see #hasAttr(String)\n * @see #absUrl(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attributes#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attributes()",
    "snippet": "public Attributes attributes() {\n        return attributes;\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Get all of the element\u0027s attributes.\n * @return attributes (which implements iterable, in same order as presented in original HTML).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#94",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String, java.lang.String)",
    "snippet": "public Node attr(String attributeKey, String attributeValue) {\n        attributes.put(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 94,
    "end_line": 97,
    "comment": "/** \n * Set an attribute (key\u003dvalue). If the attribute already exists, it is replaced.\n * @param attributeKey The attribute key.\n * @param attributeValue The attribute value.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasAttr#104",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n            String key \u003d attributeKey.substring(\"abs:\".length());\n            if (attributes.hasKey(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n                return true;\n        }\n        return attributes.hasKey(attributeKey);\n    }",
    "begin_line": 104,
    "end_line": 113,
    "comment": "/** \n * Test if this element has an attribute.\n * @param attributeKey The attribute key to check.\n * @return true if the attribute exists, false if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeAttr#120",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeAttr(java.lang.String)",
    "snippet": "public Node removeAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        attributes.remove(attributeKey);\n        return this;\n    }",
    "begin_line": 120,
    "end_line": 124,
    "comment": "/** \n * Remove an attribute from this element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.baseUri#130",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.baseUri()",
    "snippet": "public String baseUri() {\n        return baseUri;\n    }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Get the base URI of this node.\n * @return base URI\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setBaseUri#138",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setBaseUri(java.lang.String)",
    "snippet": "public void setBaseUri(final String baseUri) {\n        Validate.notNull(baseUri);\n\n        traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                node.baseUri \u003d baseUri;\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        });\n    }",
    "begin_line": 138,
    "end_line": 149,
    "comment": "/** \n * Update the base URI of this node and all of its descendants.\n * @param baseUri base URI to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.head#142",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n                node.baseUri \u003d baseUri;\n            }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.tail#146",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            }",
    "begin_line": 146,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.absUrl#171",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.absUrl(java.lang.String)",
    "snippet": "public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl \u003d attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base \u003d new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs \u003d new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves \u0027//path/file + ?foo\u0027 to \u0027//path/?foo\u0027, not \u0027//path/file?foo\u0027 as desired\n                if (relUrl.startsWith(\"?\"))\n                    relUrl \u003d base.getPath() + relUrl;\n                URL abs \u003d new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "begin_line": 171,
    "end_line": 196,
    "comment": "/** \n * Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or \u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e). \u003cp/\u003e E.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e \u003cp/\u003e If the attribute value is already absolute (i.e. it starts with a protocol, like \u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element\u0027s  {@link #baseUri}, and made absolute using that. \u003cp/\u003e As an alternate, you can use the  {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n * @param attributeKey The attribute key\n * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing orcould not be made successfully into a URL.\n * @see #attr\n * @see java.net.URL#URL(java.net.URL,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNode#203",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNode(int)",
    "snippet": "public Node childNode(int index) {\n        return childNodes.get(index);\n    }",
    "begin_line": 203,
    "end_line": 205,
    "comment": "/** \n * Get a child node by index\n * @param index index of child node\n * @return the child node at this index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodes#212",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodes()",
    "snippet": "public List\u003cNode\u003e childNodes() {\n        // actually returns the real list, as this method is hit many times during selection, and so is a GC time-sink\n        // leaving the documentation as is (warning of unmodifiability) to discourage out-of-API modifications\n        return childNodes;\n    }",
    "begin_line": 212,
    "end_line": 216,
    "comment": "/** \n * Get this node\u0027s children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated.\n * @return list of children. If no children, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodesAsArray#218",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodesAsArray()",
    "snippet": "protected Node[] childNodesAsArray() {\n        return childNodes.toArray(new Node[childNodes().size()]);\n    }",
    "begin_line": 218,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.parent#226",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.parent()",
    "snippet": "public Node parent() {\n        return parentNode;\n    }",
    "begin_line": 226,
    "end_line": 228,
    "comment": "/** \n * Gets this node\u0027s parent node.\n * @return parent node; or null if no parent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.ownerDocument#234",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.ownerDocument()",
    "snippet": "public Document ownerDocument() {\n        if (this instanceof Document)\n            return (Document) this;\n        else if (parentNode \u003d\u003d null)\n            return null;\n        else\n            return parentNode.ownerDocument();\n    }",
    "begin_line": 234,
    "end_line": 241,
    "comment": "/** \n * Gets the Document associated with this Node. \n * @return the Document associated with this Node, or null if there is no such Document.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.remove#246",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.remove()",
    "snippet": "public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }",
    "begin_line": 246,
    "end_line": 249,
    "comment": "/** \n * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#257",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(java.lang.String)",
    "snippet": "public Node before(String html) {\n        addSiblingHtml(siblingIndex(), html);\n        return this;\n    }",
    "begin_line": 257,
    "end_line": 260,
    "comment": "/** \n * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).\n * @param html HTML to add before this node\n * @return this node, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#268",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(org.jsoup.nodes.Node)",
    "snippet": "public Node before(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex(), node);\n        return this;\n    }",
    "begin_line": 268,
    "end_line": 274,
    "comment": "/** \n * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n * @param node to add before this node\n * @return this node, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#282",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(java.lang.String)",
    "snippet": "public Node after(String html) {\n        addSiblingHtml(siblingIndex()+1, html);\n        return this;\n    }",
    "begin_line": 282,
    "end_line": 285,
    "comment": "/** \n * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n * @param html HTML to add after this node\n * @return this node, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#293",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(org.jsoup.nodes.Node)",
    "snippet": "public Node after(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex()+1, node);\n        return this;\n    }",
    "begin_line": 293,
    "end_line": 299,
    "comment": "/** \n * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n * @param node to add after this node\n * @return this node, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addSiblingHtml#301",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addSiblingHtml(int, java.lang.String)",
    "snippet": "private void addSiblingHtml(int index, String html) {\n        Validate.notNull(html);\n        Validate.notNull(parentNode);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;        \n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, context, baseUri());\n        parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n    }",
    "begin_line": 301,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.wrap#315",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.wrap(java.lang.String)",
    "snippet": "public Node wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n        List\u003cNode\u003e wrapChildren \u003d Parser.parseFragment(html, context, baseUri());\n        Node wrapNode \u003d wrapChildren.get(0);\n        if (wrapNode \u003d\u003d null || !(wrapNode instanceof Element)) // nothing to wrap with; noop\n            return null;\n\n        Element wrap \u003d (Element) wrapNode;\n        Element deepest \u003d getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalanced wrap, like \u003cdiv\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e -- The \u003cp\u003e is remainder\n        if (wrapChildren.size() \u003e 0) {\n            for (int i \u003d 0; i \u003c wrapChildren.size(); i++) {\n                Node remainder \u003d wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }",
    "begin_line": 315,
    "end_line": 338,
    "comment": "/** \n * Wrap the supplied HTML around this node.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this node, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.unwrap#353",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.unwrap()",
    "snippet": "public Node unwrap() {\n        Validate.notNull(parentNode);\n\n        int index \u003d siblingIndex;\n        Node firstChild \u003d childNodes.size() \u003e 0 ? childNodes.get(0) : null;\n        parentNode.addChildren(index, this.childNodesAsArray());\n        this.remove();\n\n        return firstChild;\n    }",
    "begin_line": 353,
    "end_line": 362,
    "comment": "/** \n * Removes this node from the DOM, and moves its children up into the node\u0027s parent. This has the effect of dropping the node but keeping its children. \u003cp/\u003e For example, with the input html:\u003cbr/\u003e {@code \u003cdiv\u003eOne \u003cspan\u003eTwo \u003cb\u003eThree\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e}\u003cbr/\u003e Calling  {@code element.unwrap()} on the {@code span} element will result in the html:\u003cbr/\u003e{@code \u003cdiv\u003eOne Two \u003cb\u003eThree\u003c/b\u003e\u003c/div\u003e}\u003cbr/\u003e and the  {@code \"Two \"} {@link TextNode} being returned.\n * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n * @see #remove()\n * @see #wrap(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getDeepChild#364",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getDeepChild(org.jsoup.nodes.Element)",
    "snippet": "private Element getDeepChild(Element el) {\n        List\u003cElement\u003e children \u003d el.children();\n        if (children.size() \u003e 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }",
    "begin_line": 364,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceWith#376",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceWith(org.jsoup.nodes.Node)",
    "snippet": "public void replaceWith(Node in) {\n        Validate.notNull(in);\n        Validate.notNull(parentNode);\n        parentNode.replaceChild(this, in);\n    }",
    "begin_line": 376,
    "end_line": 380,
    "comment": "/** \n * Replace this node in the DOM with the supplied node.\n * @param in the node that will will replace the existing node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setParentNode#382",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setParentNode(org.jsoup.nodes.Node)",
    "snippet": "protected void setParentNode(Node parentNode) {\n        if (this.parentNode !\u003d null)\n            this.parentNode.removeChild(this);\n        this.parentNode \u003d parentNode;\n    }",
    "begin_line": 382,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceChild#388",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
    "snippet": "protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        Validate.notNull(in);\n        if (in.parentNode !\u003d null)\n            in.parentNode.removeChild(in);\n        \n        Integer index \u003d out.siblingIndex();\n        childNodes.set(index, in);\n        in.parentNode \u003d this;\n        in.setSiblingIndex(index);\n        out.parentNode \u003d null;\n    }",
    "begin_line": 388,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeChild#401",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeChild(org.jsoup.nodes.Node)",
    "snippet": "protected void removeChild(Node out) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        int index \u003d out.siblingIndex();\n        childNodes.remove(index);\n        reindexChildren();\n        out.parentNode \u003d null;\n    }",
    "begin_line": 401,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#409",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(Node... children) {\n        //most used. short circuit addChildren(int), which hits reindex children and array copy\n        for (Node child: children) {\n            reparentChild(child);\n            childNodes.add(child);\n            child.setSiblingIndex(childNodes.size()-1);\n        }\n    }",
    "begin_line": 409,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#418",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(int, org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        for (int i \u003d children.length - 1; i \u003e\u003d 0; i--) {\n            Node in \u003d children[i];\n            reparentChild(in);\n            childNodes.add(index, in);\n        }\n        reindexChildren();\n    }",
    "begin_line": 418,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reparentChild#428",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reparentChild(org.jsoup.nodes.Node)",
    "snippet": "private void reparentChild(Node child) {\n        if (child.parentNode !\u003d null)\n            child.parentNode.removeChild(child);\n        child.setParentNode(this);\n    }",
    "begin_line": 428,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reindexChildren#434",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reindexChildren()",
    "snippet": "private void reindexChildren() {\n        for (int i \u003d 0; i \u003c childNodes.size(); i++) {\n            childNodes.get(i).setSiblingIndex(i);\n        }\n    }",
    "begin_line": 434,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingNodes#445",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingNodes()",
    "snippet": "public List\u003cNode\u003e siblingNodes() {\n        if (parentNode \u003d\u003d null)\n            return Collections.emptyList();\n\n        List\u003cNode\u003e nodes \u003d parentNode.childNodes;\n        List\u003cNode\u003e siblings \u003d new ArrayList\u003cNode\u003e(nodes.size() - 1);\n        for (Node node: nodes)\n            if (node !\u003d this)\n                siblings.add(node);\n        return siblings;\n    }",
    "begin_line": 445,
    "end_line": 455,
    "comment": "/** \n * Retrieves this node\u0027s sibling nodes. Similar to  {@link #childNodes()  node.parent.childNodes()}, but does not include this node (a node is not a sibling of itself).\n * @return node siblings. If the node has no parent, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nextSibling#461",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nextSibling()",
    "snippet": "public Node nextSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n        \n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 461,
    "end_line": 472,
    "comment": "/** \n * Get this node\u0027s next sibling.\n * @return next sibling, or null if this is the last sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.previousSibling#478",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.previousSibling()",
    "snippet": "public Node previousSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n\n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 478,
    "end_line": 489,
    "comment": "/** \n * Get this node\u0027s previous sibling.\n * @return the previous sibling, or null if this is the first sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingIndex#497",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingIndex()",
    "snippet": "public int siblingIndex() {\n        return siblingIndex;\n    }",
    "begin_line": 497,
    "end_line": 499,
    "comment": "/** \n * Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.\n * @return position in node sibling list\n * @see org.jsoup.nodes.Element#elementSiblingIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setSiblingIndex#501",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setSiblingIndex(int)",
    "snippet": "protected void setSiblingIndex(int siblingIndex) {\n        this.siblingIndex \u003d siblingIndex;\n    }",
    "begin_line": 501,
    "end_line": 503,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.traverse#510",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.traverse(org.jsoup.select.NodeVisitor)",
    "snippet": "public Node traverse(NodeVisitor nodeVisitor) {\n        Validate.notNull(nodeVisitor);\n        NodeTraversor traversor \u003d new NodeTraversor(nodeVisitor);\n        traversor.traverse(this);\n        return this;\n    }",
    "begin_line": 510,
    "end_line": 515,
    "comment": "/** \n * Perform a depth-first traversal through this node and its descendants.\n * @param nodeVisitor the visitor callbacks to perform on each node\n * @return this node, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#521",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder accum \u003d new StringBuilder(128);\n        outerHtml(accum);\n        return accum.toString();\n    }",
    "begin_line": 521,
    "end_line": 525,
    "comment": "/** \n * Get the outer HTML of this node.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#527",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml(java.lang.StringBuilder)",
    "snippet": "protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n    }",
    "begin_line": 527,
    "end_line": 529,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getOutputSettings#532",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getOutputSettings()",
    "snippet": "private Document.OutputSettings getOutputSettings() {\n        return ownerDocument() !\u003d null ? ownerDocument().outputSettings() : (new Document(\"\")).outputSettings();\n    }",
    "begin_line": 532,
    "end_line": 534,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlHead#540",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 540,
    "end_line": 540,
    "comment": "/** \n * Get the outer HTML of this node.\n * @param accum accumulator to place HTML into\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlTail#542",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 542,
    "end_line": 542,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.toString#544",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 544,
    "end_line": 546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.indent#548",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n    }",
    "begin_line": 548,
    "end_line": 550,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.equals#553",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        // todo: have nodes hold a child index, compare against that and parent (not children)\n        return false;\n    }",
    "begin_line": 553,
    "end_line": 557,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hashCode#560",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d parentNode !\u003d null ? parentNode.hashCode() : 0;\n        // not children, or will block stack as they go back up to parent)\n        result \u003d 31 * result + (attributes !\u003d null ? attributes.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 560,
    "end_line": 565,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.clone#576",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.clone()",
    "snippet": "@Override\n    public Node clone() {\n        return doClone(null); // splits for orphan\n    }",
    "begin_line": 576,
    "end_line": 578,
    "comment": "/** \n * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. \u003cp\u003e The cloned node may be adopted into another Document or node structure using  {@link Element#appendChild(Node)}.\n * @return stand-alone cloned node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.doClone#580",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.doClone(org.jsoup.nodes.Node)",
    "snippet": "protected Node doClone(Node parent) {\n        Node clone;\n        try {\n            clone \u003d (Node) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n\n        clone.parentNode \u003d parent; // can be null, to create an orphan split\n        clone.siblingIndex \u003d parent \u003d\u003d null ? 0 : siblingIndex;\n        clone.attributes \u003d attributes !\u003d null ? attributes.clone() : null;\n        clone.baseUri \u003d baseUri;\n        clone.childNodes \u003d new ArrayList\u003cNode\u003e(childNodes.size());\n        for (Node child: childNodes)\n            clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent\n\n        return clone;\n    }",
    "begin_line": 580,
    "end_line": 597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.OuterHtmlVisitor#603",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": " OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n            this.accum \u003d accum;\n            this.out \u003d out;\n        }",
    "begin_line": 603,
    "end_line": 606,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.head#608",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n            node.outerHtmlHead(accum, depth, out);\n        }",
    "begin_line": 608,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.tail#612",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n                node.outerHtmlTail(accum, depth, out);\n        }",
    "begin_line": 612,
    "end_line": 615,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.CharacterReader#18",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.CharacterReader(java.lang.String)",
    "snippet": " CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input \u003d input.toCharArray();\n        this.length \u003d this.input.length;\n    }",
    "begin_line": 18,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.pos#24",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.pos()",
    "snippet": "int pos() {\n        return pos;\n    }",
    "begin_line": 24,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.isEmpty#28",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.isEmpty()",
    "snippet": "boolean isEmpty() {\n        return pos \u003e\u003d length;\n    }",
    "begin_line": 28,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.current#32",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.current()",
    "snippet": "char current() {\n        return isEmpty() ? EOF : input[pos];\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consume#36",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consume()",
    "snippet": "char consume() {\n        char val \u003d isEmpty() ? EOF : input[pos];\n        pos++;\n        return val;\n    }",
    "begin_line": 36,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.unconsume#42",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.unconsume()",
    "snippet": "void unconsume() {\n        pos--;\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.advance#46",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.advance()",
    "snippet": "void advance() {\n        pos++;\n    }",
    "begin_line": 46,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.mark#50",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.mark()",
    "snippet": "void mark() {\n        mark \u003d pos;\n    }",
    "begin_line": 50,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.rewindToMark#54",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.rewindToMark()",
    "snippet": "void rewindToMark() {\n        pos \u003d mark;\n    }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeAsString#58",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeAsString()",
    "snippet": "String consumeAsString() {\n        return new String(input, pos++, 1);\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.nextIndexOf#67",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.nextIndexOf(char)",
    "snippet": "int nextIndexOf(char c) {\n        // doesn\u0027t handle scanning for surrogates\n        for (int i \u003d pos; i \u003c length; i++) {\n            if (c \u003d\u003d input[i])\n                return i - pos;\n        }\n        return -1;\n    }",
    "begin_line": 67,
    "end_line": 74,
    "comment": "/** \n * Returns the number of characters between the current position and the next instance of the input char\n * @param c scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.nextIndexOf#82",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.nextIndexOf(java.lang.CharSequence)",
    "snippet": "int nextIndexOf(CharSequence seq) {\n        // doesn\u0027t handle scanning for surrogates\n        char startChar \u003d seq.charAt(0);\n        for (int offset \u003d pos; offset \u003c length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar !\u003d input[offset])\n                while(++offset \u003c length \u0026\u0026 startChar !\u003d input[offset]);\n            if (offset \u003c length) {\n                int i \u003d offset + 1;\n                int last \u003d i + seq.length()-1;\n                for (int j \u003d 1; i \u003c last \u0026\u0026 seq.charAt(j) \u003d\u003d input[i]; i++, j++);\n                if (i \u003d\u003d last) // found full sequence\n                    return offset - pos;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 82,
    "end_line": 98,
    "comment": "/** \n * Returns the number of characters between the current position and the next instance of the input sequence\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeTo#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeTo(char)",
    "snippet": "String consumeTo(char c) {\n        int offset \u003d nextIndexOf(c);\n        if (offset !\u003d -1) {\n            String consumed \u003d new String(input, pos, offset);\n            pos +\u003d offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }",
    "begin_line": 100,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeTo#111",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeTo(java.lang.String)",
    "snippet": "String consumeTo(String seq) {\n        int offset \u003d nextIndexOf(seq);\n        if (offset !\u003d -1) {\n            String consumed \u003d new String(input, pos, offset);\n            pos +\u003d offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }",
    "begin_line": 111,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeToAny#122",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeToAny(char)",
    "snippet": "String consumeToAny(final char... chars) {\n        int start \u003d pos;\n\n        OUTER: while (pos \u003c length) {\n            for (int i \u003d 0; i \u003c chars.length; i++) {\n                if (input[pos] \u003d\u003d chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos \u003e start ? new String(input, start, pos-start) : \"\";\n    }",
    "begin_line": 122,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeToEnd#136",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeToEnd()",
    "snippet": "String consumeToEnd() {\n        String data \u003d new String(input, pos, length-pos);\n        pos \u003d length;\n        return data;\n    }",
    "begin_line": 136,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeLetterSequence#142",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeLetterSequence()",
    "snippet": "String consumeLetterSequence() {\n        int start \u003d pos;\n        while (pos \u003c length) {\n            char c \u003d input[pos];\n            if ((c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027))\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }",
    "begin_line": 142,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeLetterThenDigitSequence#155",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeLetterThenDigitSequence()",
    "snippet": "String consumeLetterThenDigitSequence() {\n        int start \u003d pos;\n        while (pos \u003c length) {\n            char c \u003d input[pos];\n            if ((c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c \u003d input[pos];\n            if (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027)\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }",
    "begin_line": 155,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeHexSequence#175",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeHexSequence()",
    "snippet": "String consumeHexSequence() {\n        int start \u003d pos;\n        while (pos \u003c length) {\n            char c \u003d input[pos];\n            if ((c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027) || (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027F\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027f\u0027))\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }",
    "begin_line": 175,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeDigitSequence#187",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeDigitSequence()",
    "snippet": "String consumeDigitSequence() {\n        int start \u003d pos;\n        while (pos \u003c length) {\n            char c \u003d input[pos];\n            if (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027)\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }",
    "begin_line": 187,
    "end_line": 197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matches#199",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matches(char)",
    "snippet": "boolean matches(char c) {\n        return !isEmpty() \u0026\u0026 input[pos] \u003d\u003d c;\n\n    }",
    "begin_line": 199,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matches#204",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matches(java.lang.String)",
    "snippet": "boolean matches(String seq) {\n        int scanLength \u003d seq.length();\n        if (scanLength \u003e length - pos)\n            return false;\n\n        for (int offset \u003d 0; offset \u003c scanLength; offset++)\n            if (seq.charAt(offset) !\u003d input[pos+offset])\n                return false;\n        return true;\n    }",
    "begin_line": 204,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesIgnoreCase#215",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesIgnoreCase(java.lang.String)",
    "snippet": "boolean matchesIgnoreCase(String seq) {\n        int scanLength \u003d seq.length();\n        if (scanLength \u003e length - pos)\n            return false;\n\n        for (int offset \u003d 0; offset \u003c scanLength; offset++) {\n            char upScan \u003d Character.toUpperCase(seq.charAt(offset));\n            char upTarget \u003d Character.toUpperCase(input[pos + offset]);\n            if (upScan !\u003d upTarget)\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 215,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesAny#229",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesAny(char)",
    "snippet": "boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c \u003d input[pos];\n        for (char seek : seq) {\n            if (seek \u003d\u003d c)\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 229,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesLetter#241",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesLetter()",
    "snippet": "boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c \u003d input[pos];\n        return (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027);\n    }",
    "begin_line": 241,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesDigit#248",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesDigit()",
    "snippet": "boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c \u003d input[pos];\n        return (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);\n    }",
    "begin_line": 248,
    "end_line": 253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchConsume#255",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchConsume(java.lang.String)",
    "snippet": "boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos +\u003d seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 255,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchConsumeIgnoreCase#264",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchConsumeIgnoreCase(java.lang.String)",
    "snippet": "boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos +\u003d seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 264,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.containsIgnoreCase#273",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.containsIgnoreCase(java.lang.String)",
    "snippet": "boolean containsIgnoreCase(String seq) {\n        // used to check presence of \u003c/title\u003e, \u003c/style\u003e. only finds consistent case.\n        String loScan \u003d seq.toLowerCase(Locale.ENGLISH);\n        String hiScan \u003d seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) \u003e -1) || (nextIndexOf(hiScan) \u003e -1);\n    }",
    "begin_line": 273,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.toString#281",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.toString()",
    "snippet": "@Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }",
    "begin_line": 281,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.HtmlTreeBuilder#32",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.HtmlTreeBuilder()",
    "snippet": " HtmlTreeBuilder() {}",
    "begin_line": 32,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.parse#35",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.parse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)",
    "snippet": "@Override\n    Document parse(String input, String baseUri, ParseErrorList errors) {\n        state \u003d HtmlTreeBuilderState.Initial;\n        return super.parse(input, baseUri, errors);\n    }",
    "begin_line": 35,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.parseFragment#40",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList)",
    "snippet": "List\u003cNode\u003e parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {\n        // context may be null\n        state \u003d HtmlTreeBuilderState.Initial;\n        initialiseParse(inputFragment, baseUri, errors);\n        contextElement \u003d context;\n        fragmentParsing \u003d true;\n        Element root \u003d null;\n\n        if (context !\u003d null) {\n            if (context.ownerDocument() !\u003d null) // quirks setup:\n                doc.quirksMode(context.ownerDocument().quirksMode());\n\n            // initialise the tokeniser state:\n            String contextTag \u003d context.tagName();\n            if (StringUtil.in(contextTag, \"title\", \"textarea\"))\n                tokeniser.transition(TokeniserState.Rcdata);\n            else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))\n                tokeniser.transition(TokeniserState.Rawtext);\n            else if (contextTag.equals(\"script\"))\n                tokeniser.transition(TokeniserState.ScriptData);\n            else if (contextTag.equals((\"noscript\")))\n                tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext\n            else if (contextTag.equals(\"plaintext\"))\n                tokeniser.transition(TokeniserState.Data);\n            else\n                tokeniser.transition(TokeniserState.Data); // default\n\n            root \u003d new Element(Tag.valueOf(\"html\"), baseUri);\n            doc.appendChild(root);\n            stack.push(root);\n            resetInsertionMode();\n            // todo: setup form element to nearest form on context (up ancestor chain)\n        }\n\n        runParser();\n        if (context !\u003d null)\n            return root.childNodes();\n        else\n            return doc.childNodes();\n    }",
    "begin_line": 40,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.process#82",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.process(org.jsoup.parser.Token)",
    "snippet": "@Override\n    protected boolean process(Token token) {\n        currentToken \u003d token;\n        return this.state.process(token, this);\n    }",
    "begin_line": 82,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.process#87",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "boolean process(Token token, HtmlTreeBuilderState state) {\n        currentToken \u003d token;\n        return state.process(token, this);\n    }",
    "begin_line": 87,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.transition#92",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.transition(org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "void transition(HtmlTreeBuilderState state) {\n        this.state \u003d state;\n    }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.state#96",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.state()",
    "snippet": "HtmlTreeBuilderState state() {\n        return state;\n    }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.markInsertionMode#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.markInsertionMode()",
    "snippet": "void markInsertionMode() {\n        originalState \u003d state;\n    }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.originalState#104",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.originalState()",
    "snippet": "HtmlTreeBuilderState originalState() {\n        return originalState;\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.framesetOk#108",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.framesetOk(boolean)",
    "snippet": "void framesetOk(boolean framesetOk) {\n        this.framesetOk \u003d framesetOk;\n    }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.framesetOk#112",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.framesetOk()",
    "snippet": "boolean framesetOk() {\n        return framesetOk;\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getDocument#116",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getDocument()",
    "snippet": "Document getDocument() {\n        return doc;\n    }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getBaseUri#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getBaseUri()",
    "snippet": "String getBaseUri() {\n        return baseUri;\n    }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.maybeSetBaseUri#124",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.maybeSetBaseUri(org.jsoup.nodes.Element)",
    "snippet": "void maybeSetBaseUri(Element base) {\n        if (baseUriSetFromDoc) // only listen to the first \u003cbase href\u003e in parse\n            return;\n\n        String href \u003d base.absUrl(\"href\");\n        if (href.length() !\u003d 0) { // ignore \u003cbase target\u003e etc\n            baseUri \u003d href;\n            baseUriSetFromDoc \u003d true;\n            doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants\n        }\n    }",
    "begin_line": 124,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isFragmentParsing#136",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isFragmentParsing()",
    "snippet": "boolean isFragmentParsing() {\n        return fragmentParsing;\n    }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.error#140",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.error(org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "void error(HtmlTreeBuilderState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));\n    }",
    "begin_line": 140,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#145",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.StartTag)",
    "snippet": "Element insert(Token.StartTag startTag) {\n        // handle empty unknown tags\n        // when the spec expects an empty tag, will directly hit insertEmpty, so won\u0027t generate fake end tag.\n        if (startTag.isSelfClosing() \u0026\u0026 !Tag.isKnownTag(startTag.name())) {\n            Element el \u003d insertEmpty(startTag);\n            process(new Token.EndTag(el.tagName())); // ensure we get out of whatever state we are in\n            return el;\n        }\n        \n        Element el \u003d new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n        insert(el);\n        return el;\n    }",
    "begin_line": 145,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#159",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(java.lang.String)",
    "snippet": "Element insert(String startTagName) {\n        Element el \u003d new Element(Tag.valueOf(startTagName), baseUri);\n        insert(el);\n        return el;\n    }",
    "begin_line": 159,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#165",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.nodes.Element)",
    "snippet": "void insert(Element el) {\n        insertNode(el);\n        stack.add(el);\n    }",
    "begin_line": 165,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertEmpty#170",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertEmpty(org.jsoup.parser.Token.StartTag)",
    "snippet": "Element insertEmpty(Token.StartTag startTag) {\n        Tag tag \u003d Tag.valueOf(startTag.name());\n        Element el \u003d new Element(tag, baseUri, startTag.attributes);\n        insertNode(el);\n        if (startTag.isSelfClosing()) {\n            tokeniser.acknowledgeSelfClosingFlag();\n            if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output\n                tag.setSelfClosing();\n        }\n        return el;\n    }",
    "begin_line": 170,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#182",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.Comment)",
    "snippet": "void insert(Token.Comment commentToken) {\n        Comment comment \u003d new Comment(commentToken.getData(), baseUri);\n        insertNode(comment);\n    }",
    "begin_line": 182,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#187",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.Character)",
    "snippet": "void insert(Token.Character characterToken) {\n        Node node;\n        // characters in script and style go in as datanodes, not text nodes\n        if (StringUtil.in(currentElement().tagName(), \"script\", \"style\"))\n            node \u003d new DataNode(characterToken.getData(), baseUri);\n        else\n            node \u003d new TextNode(characterToken.getData(), baseUri);\n        currentElement().appendChild(node); // doesn\u0027t use insertNode, because we don\u0027t foster these; and will always have a stack.\n    }",
    "begin_line": 187,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertNode#197",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertNode(org.jsoup.nodes.Node)",
    "snippet": "private void insertNode(Node node) {\n        // if the stack hasn\u0027t been set up yet, elements (doctype, comments) go into the doc\n        if (stack.size() \u003d\u003d 0)\n            doc.appendChild(node);\n        else if (isFosterInserts())\n            insertInFosterParent(node);\n        else\n            currentElement().appendChild(node);\n    }",
    "begin_line": 197,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.pop#207",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.pop()",
    "snippet": "Element pop() {\n        // todo - dev, remove validation check\n        if (stack.peekLast().nodeName().equals(\"td\") \u0026\u0026 !state.name().equals(\"InCell\"))\n            Validate.isFalse(true, \"pop td not in cell\");\n        if (stack.peekLast().nodeName().equals(\"html\"))\n            Validate.isFalse(true, \"popping html!\");\n        return stack.pollLast();\n    }",
    "begin_line": 207,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.push#216",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.push(org.jsoup.nodes.Element)",
    "snippet": "void push(Element element) {\n        stack.add(element);\n    }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getStack#220",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getStack()",
    "snippet": "DescendableLinkedList\u003cElement\u003e getStack() {\n        return stack;\n    }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.onStack#224",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.onStack(org.jsoup.nodes.Element)",
    "snippet": "boolean onStack(Element el) {\n        return isElementInQueue(stack, el);\n    }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isElementInQueue#228",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isElementInQueue(org.jsoup.helper.DescendableLinkedList\u003corg.jsoup.nodes.Element\u003e, org.jsoup.nodes.Element)",
    "snippet": "private boolean isElementInQueue(DescendableLinkedList\u003cElement\u003e queue, Element element) {\n        Iterator\u003cElement\u003e it \u003d queue.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next \u003d\u003d element) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 228,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getFromStack#239",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getFromStack(java.lang.String)",
    "snippet": "Element getFromStack(String elName) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next.nodeName().equals(elName)) {\n                return next;\n            }\n        }\n        return null;\n    }",
    "begin_line": 239,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.removeFromStack#250",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.removeFromStack(org.jsoup.nodes.Element)",
    "snippet": "boolean removeFromStack(Element el) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next \u003d\u003d el) {\n                it.remove();\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 250,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToClose#262",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToClose(java.lang.String)",
    "snippet": "void popStackToClose(String elName) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next.nodeName().equals(elName)) {\n                it.remove();\n                break;\n            } else {\n                it.remove();\n            }\n        }\n    }",
    "begin_line": 262,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToClose#275",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToClose(java.lang.String)",
    "snippet": "void popStackToClose(String... elNames) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (StringUtil.in(next.nodeName(), elNames)) {\n                it.remove();\n                break;\n            } else {\n                it.remove();\n            }\n        }\n    }",
    "begin_line": 275,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToBefore#288",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToBefore(java.lang.String)",
    "snippet": "void popStackToBefore(String elName) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next.nodeName().equals(elName)) {\n                break;\n            } else {\n                it.remove();\n            }\n        }\n    }",
    "begin_line": 288,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableContext#300",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableContext()",
    "snippet": "void clearStackToTableContext() {\n        clearStackToContext(\"table\");\n    }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableBodyContext#304",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableBodyContext()",
    "snippet": "void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\");\n    }",
    "begin_line": 304,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableRowContext#308",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableRowContext()",
    "snippet": "void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\");\n    }",
    "begin_line": 308,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToContext#312",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToContext(java.lang.String)",
    "snippet": "private void clearStackToContext(String... nodeNames) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))\n                break;\n            else\n                it.remove();\n        }\n    }",
    "begin_line": 312,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.aboveOnStack#323",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.aboveOnStack(org.jsoup.nodes.Element)",
    "snippet": "Element aboveOnStack(Element el) {\n        assert onStack(el);\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next \u003d\u003d el) {\n                return it.next();\n            }\n        }\n        return null;\n    }",
    "begin_line": 323,
    "end_line": 333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertOnStackAfter#335",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertOnStackAfter(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void insertOnStackAfter(Element after, Element in) {\n        int i \u003d stack.lastIndexOf(after);\n        Validate.isTrue(i !\u003d -1);\n        stack.add(i+1, in);\n    }",
    "begin_line": 335,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceOnStack#341",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceOnStack(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void replaceOnStack(Element out, Element in) {\n        replaceInQueue(stack, out, in);\n    }",
    "begin_line": 341,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceInQueue#345",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceInQueue(java.util.LinkedList\u003corg.jsoup.nodes.Element\u003e, org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "private void replaceInQueue(LinkedList\u003cElement\u003e queue, Element out, Element in) {\n        int i \u003d queue.lastIndexOf(out);\n        Validate.isTrue(i !\u003d -1);\n        queue.remove(i);\n        queue.add(i, in);\n    }",
    "begin_line": 345,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.resetInsertionMode#352",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.resetInsertionMode()",
    "snippet": "void resetInsertionMode() {\n        boolean last \u003d false;\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element node \u003d it.next();\n            if (!it.hasNext()) {\n                last \u003d true;\n                node \u003d contextElement;\n            }\n            String name \u003d node.nodeName();\n            if (\"select\".equals(name)) {\n                transition(HtmlTreeBuilderState.InSelect);\n                break; // frag\n            } else if ((\"td\".equals(name) || \"td\".equals(name) \u0026\u0026 !last)) {\n                transition(HtmlTreeBuilderState.InCell);\n                break;\n            } else if (\"tr\".equals(name)) {\n                transition(HtmlTreeBuilderState.InRow);\n                break;\n            } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTableBody);\n                break;\n            } else if (\"caption\".equals(name)) {\n                transition(HtmlTreeBuilderState.InCaption);\n                break;\n            } else if (\"colgroup\".equals(name)) {\n                transition(HtmlTreeBuilderState.InColumnGroup);\n                break; // frag\n            } else if (\"table\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTable);\n                break;\n            } else if (\"head\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            } else if (\"body\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            } else if (\"frameset\".equals(name)) {\n                transition(HtmlTreeBuilderState.InFrameset);\n                break; // frag\n            } else if (\"html\".equals(name)) {\n                transition(HtmlTreeBuilderState.BeforeHead);\n                break; // frag\n            } else if (last) {\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            }\n        }\n    }",
    "begin_line": 352,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSpecificScope#403",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(java.lang.String, java.lang.String[], java.lang.String[])",
    "snippet": "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {\n        return inSpecificScope(new String[]{targetName}, baseTypes, extraTypes);\n    }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSpecificScope#407",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])",
    "snippet": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element el \u003d it.next();\n            String elName \u003d el.nodeName();\n            if (StringUtil.in(elName, targetNames))\n                return true;\n            if (StringUtil.in(elName, baseTypes))\n                return false;\n            if (extraTypes !\u003d null \u0026\u0026 StringUtil.in(elName, extraTypes))\n                return false;\n        }\n        Validate.fail(\"Should not be reachable\");\n        return false;\n    }",
    "begin_line": 407,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#423",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String[])",
    "snippet": "boolean inScope(String[] targetNames) {\n        return inSpecificScope(targetNames, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, null);\n    }",
    "begin_line": 423,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#427",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String)",
    "snippet": "boolean inScope(String targetName) {\n        return inScope(targetName, null);\n    }",
    "begin_line": 427,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#431",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String, java.lang.String[])",
    "snippet": "boolean inScope(String targetName, String[] extras) {\n        return inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);\n        // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml\n        // todo: in svg namespace: forignOjbect, desc, title\n    }",
    "begin_line": 431,
    "end_line": 435,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inListItemScope#437",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inListItemScope(java.lang.String)",
    "snippet": "boolean inListItemScope(String targetName) {\n        return inScope(targetName, new String[]{\"ol\", \"ul\"});\n    }",
    "begin_line": 437,
    "end_line": 439,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inButtonScope#441",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inButtonScope(java.lang.String)",
    "snippet": "boolean inButtonScope(String targetName) {\n        return inScope(targetName, new String[]{\"button\"});\n    }",
    "begin_line": 441,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inTableScope#445",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inTableScope(java.lang.String)",
    "snippet": "boolean inTableScope(String targetName) {\n        return inSpecificScope(targetName, new String[]{\"html\", \"table\"}, null);\n    }",
    "begin_line": 445,
    "end_line": 447,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSelectScope#449",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSelectScope(java.lang.String)",
    "snippet": "boolean inSelectScope(String targetName) {\n        Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n        while (it.hasNext()) {\n            Element el \u003d it.next();\n            String elName \u003d el.nodeName();\n            if (elName.equals(targetName))\n                return true;\n            if (!StringUtil.in(elName, \"optgroup\", \"option\")) // all elements except\n                return false;\n        }\n        Validate.fail(\"Should not be reachable\");\n        return false;\n    }",
    "begin_line": 449,
    "end_line": 461,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setHeadElement#463",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setHeadElement(org.jsoup.nodes.Element)",
    "snippet": "void setHeadElement(Element headElement) {\n        this.headElement \u003d headElement;\n    }",
    "begin_line": 463,
    "end_line": 465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getHeadElement#467",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getHeadElement()",
    "snippet": "Element getHeadElement() {\n        return headElement;\n    }",
    "begin_line": 467,
    "end_line": 469,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isFosterInserts#471",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isFosterInserts()",
    "snippet": "boolean isFosterInserts() {\n        return fosterInserts;\n    }",
    "begin_line": 471,
    "end_line": 473,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setFosterInserts#475",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setFosterInserts(boolean)",
    "snippet": "void setFosterInserts(boolean fosterInserts) {\n        this.fosterInserts \u003d fosterInserts;\n    }",
    "begin_line": 475,
    "end_line": 477,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getFormElement#479",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getFormElement()",
    "snippet": "Element getFormElement() {\n        return formElement;\n    }",
    "begin_line": 479,
    "end_line": 481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setFormElement#483",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setFormElement(org.jsoup.nodes.Element)",
    "snippet": "void setFormElement(Element formElement) {\n        this.formElement \u003d formElement;\n    }",
    "begin_line": 483,
    "end_line": 485,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.newPendingTableCharacters#487",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.newPendingTableCharacters()",
    "snippet": "void newPendingTableCharacters() {\n        pendingTableCharacters \u003d new ArrayList\u003cToken.Character\u003e();\n    }",
    "begin_line": 487,
    "end_line": 489,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getPendingTableCharacters#491",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getPendingTableCharacters()",
    "snippet": "List\u003cToken.Character\u003e getPendingTableCharacters() {\n        return pendingTableCharacters;\n    }",
    "begin_line": 491,
    "end_line": 493,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setPendingTableCharacters#495",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setPendingTableCharacters(java.util.List\u003corg.jsoup.parser.Token.Character\u003e)",
    "snippet": "void setPendingTableCharacters(List\u003cToken.Character\u003e pendingTableCharacters) {\n        this.pendingTableCharacters \u003d pendingTableCharacters;\n    }",
    "begin_line": 495,
    "end_line": 497,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.generateImpliedEndTags#508",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags(java.lang.String)",
    "snippet": "void generateImpliedEndTags(String excludeTag) {\n        while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026\n                StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"))\n            pop();\n    }",
    "begin_line": 508,
    "end_line": 512,
    "comment": "/** \n * 11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements.\n * @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from theprocess, then the UA must perform the above steps as if that element was not in the above list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.generateImpliedEndTags#514",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags()",
    "snippet": "void generateImpliedEndTags() {\n        generateImpliedEndTags(null);\n    }",
    "begin_line": 514,
    "end_line": 516,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isSpecial#518",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isSpecial(org.jsoup.nodes.Element)",
    "snippet": "boolean isSpecial(Element el) {\n        // todo: mathml\u0027s mi, mo, mn\n        // todo: svg\u0027s foreigObject, desc, title\n        String name \u003d el.nodeName();\n        return StringUtil.in(name, \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n                \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n                \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n                \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n                \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n                \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n                \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n                \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\");\n    }",
    "begin_line": 518,
    "end_line": 530,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.pushActiveFormattingElements#533",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.pushActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "void pushActiveFormattingElements(Element in) {\n        int numSeen \u003d 0;\n        Iterator\u003cElement\u003e iter \u003d formattingElements.descendingIterator();\n        while (iter.hasNext()) {\n            Element el \u003d  iter.next();\n            if (el \u003d\u003d null) // marker\n                break;\n\n            if (isSameFormattingElement(in, el))\n                numSeen++;\n\n            if (numSeen \u003d\u003d 3) {\n                iter.remove();\n                break;\n            }\n        }\n        formattingElements.add(in);\n    }",
    "begin_line": 533,
    "end_line": 550,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isSameFormattingElement#552",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isSameFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "private boolean isSameFormattingElement(Element a, Element b) {\n        // same if: same namespace, tag, and attributes. Element.equals only checks tag, might in future check children\n        return a.nodeName().equals(b.nodeName()) \u0026\u0026\n                // a.namespace().equals(b.namespace()) \u0026\u0026\n                a.attributes().equals(b.attributes());\n        // todo: namespaces\n    }",
    "begin_line": 552,
    "end_line": 558,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.reconstructFormattingElements#560",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.reconstructFormattingElements()",
    "snippet": "void reconstructFormattingElements() {\n        int size \u003d formattingElements.size();\n        if (size \u003d\u003d 0 || formattingElements.getLast() \u003d\u003d null || onStack(formattingElements.getLast()))\n            return;\n\n        Element entry \u003d formattingElements.getLast();\n        int pos \u003d size - 1;\n        boolean skip \u003d false;\n        while (true) {\n            if (pos \u003d\u003d 0) { // step 4. if none before, skip to 8\n                skip \u003d true;\n                break;\n            }\n            entry \u003d formattingElements.get(--pos); // step 5. one earlier than entry\n            if (entry \u003d\u003d null || onStack(entry)) // step 6 - neither marker nor on stack\n                break; // jump to 8, else continue back to 4\n        }\n        while(true) {\n            if (!skip) // step 7: on later than entry\n                entry \u003d formattingElements.get(++pos);\n            Validate.notNull(entry); // should not occur, as we break at last element\n\n            // 8. create new element from element, 9 insert into current node, onto stack\n            skip \u003d false; // can only skip increment from 4.\n            Element newEl \u003d insert(entry.nodeName()); // todo: avoid fostering here?\n            // newEl.namespace(entry.namespace()); // todo: namespaces\n            newEl.attributes().addAll(entry.attributes());\n\n            // 10. replace entry with new entry\n            formattingElements.add(pos, newEl);\n            formattingElements.remove(pos + 1);\n\n            // 11\n            if (pos \u003d\u003d size-1) // if not last entry in list, jump to 7\n                break;\n        }\n    }",
    "begin_line": 560,
    "end_line": 596,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearFormattingElementsToLastMarker#598",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearFormattingElementsToLastMarker()",
    "snippet": "void clearFormattingElementsToLastMarker() {\n        while (!formattingElements.isEmpty()) {\n            Element el \u003d formattingElements.peekLast();\n            formattingElements.removeLast();\n            if (el \u003d\u003d null)\n                break;\n        }\n    }",
    "begin_line": 598,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.removeFromActiveFormattingElements#607",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.removeFromActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "void removeFromActiveFormattingElements(Element el) {\n        Iterator\u003cElement\u003e it \u003d formattingElements.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next \u003d\u003d el) {\n                it.remove();\n                break;\n            }\n        }\n    }",
    "begin_line": 607,
    "end_line": 616,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isInActiveFormattingElements#618",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isInActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "boolean isInActiveFormattingElements(Element el) {\n        return isElementInQueue(formattingElements, el);\n    }",
    "begin_line": 618,
    "end_line": 620,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getActiveFormattingElement#622",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getActiveFormattingElement(java.lang.String)",
    "snippet": "Element getActiveFormattingElement(String nodeName) {\n        Iterator\u003cElement\u003e it \u003d formattingElements.descendingIterator();\n        while (it.hasNext()) {\n            Element next \u003d it.next();\n            if (next \u003d\u003d null) // scope marker\n                break;\n            else if (next.nodeName().equals(nodeName))\n                return next;\n        }\n        return null;\n    }",
    "begin_line": 622,
    "end_line": 632,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceActiveFormattingElement#634",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceActiveFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void replaceActiveFormattingElement(Element out, Element in) {\n        replaceInQueue(formattingElements, out, in);\n    }",
    "begin_line": 634,
    "end_line": 636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertMarkerToFormattingElements#638",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertMarkerToFormattingElements()",
    "snippet": "void insertMarkerToFormattingElements() {\n        formattingElements.add(null);\n    }",
    "begin_line": 638,
    "end_line": 640,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertInFosterParent#642",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertInFosterParent(org.jsoup.nodes.Node)",
    "snippet": "void insertInFosterParent(Node in) {\n        Element fosterParent \u003d null;\n        Element lastTable \u003d getFromStack(\"table\");\n        boolean isLastTableParent \u003d false;\n        if (lastTable !\u003d null) {\n            if (lastTable.parent() !\u003d null) {\n                fosterParent \u003d lastTable.parent();\n                isLastTableParent \u003d true;\n            } else\n                fosterParent \u003d aboveOnStack(lastTable);\n        } else { // no table \u003d\u003d frag\n            fosterParent \u003d stack.get(0);\n        }\n\n        if (isLastTableParent) {\n            Validate.notNull(lastTable); // last table cannot be null by this point.\n            lastTable.before(in);\n        }\n        else\n            fosterParent.appendChild(in);\n    }",
    "begin_line": 642,
    "end_line": 662,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.toString#665",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.toString()",
    "snippet": "@Override\n    public String toString() {\n        return \"TreeBuilder{\" +\n                \"currentToken\u003d\" + currentToken +\n                \", state\u003d\" + state +\n                \", currentElement\u003d\" + currentElement() +\n                \u0027}\u0027;\n    }",
    "begin_line": 665,
    "end_line": 671,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#15",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                // todo: parse error check on expected doctypes\n                // todo: quirk state check on doctype ids\n                Token.Doctype d \u003d t.asDoctype();\n                DocumentType doctype \u003d new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                tb.getDocument().appendChild(doctype);\n                if (d.isForceQuirks())\n                    tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n                tb.transition(BeforeHtml);\n            } else {\n                // todo: check not iframe srcdoc\n                tb.transition(BeforeHtml);\n                return tb.process(t); // re-process token\n            }\n            return true;\n        }",
    "begin_line": 15,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n                tb.insert(t.asStartTag());\n                tb.transition(BeforeHead);\n            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n                return anythingElse(t, tb);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 38,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#60",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.insert(\"html\");\n            tb.transition(BeforeHead);\n            return tb.process(t);\n        }",
    "begin_line": 60,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#67",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n                return InBody.process(t, tb); // does not transition\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"head\")) {\n                Element head \u003d tb.insert(t.asStartTag());\n                tb.setHeadElement(head);\n                tb.transition(InHead);\n            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n                tb.process(new Token.StartTag(\"head\"));\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.process(new Token.StartTag(\"head\"));\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 67,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start \u003d t.asStartTag();\n                    String name \u003d start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el \u003d tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") \u0026\u0026 el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta \u003d tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript \u0026\u0026 scripting flag \u003d true: rawtext (jsoup doesn\u0027t run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won\u0027t execute them\n                        tb.insert(start);\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end \u003d t.asEndTag();\n                    name \u003d end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 95,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#160",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, TreeBuilder tb) {\n            tb.process(new Token.EndTag(\"head\"));\n            return tb.process(t);\n        }",
    "begin_line": 160,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#166",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"noscript\")) {\n                tb.pop();\n                tb.transition(InHead);\n            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                return tb.process(t, InHead);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"br\")) {\n                return anythingElse(t, tb);\n            } else if ((t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 166,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#188",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            tb.process(new Token.EndTag(\"noscript\"));\n            return tb.process(t);\n        }",
    "begin_line": 188,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#195",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.name();\n                if (name.equals(\"html\")) {\n                    return tb.process(t, InBody);\n                } else if (name.equals(\"body\")) {\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                    tb.transition(InBody);\n                } else if (name.equals(\"frameset\")) {\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                    tb.error(this);\n                    Element head \u003d tb.getHeadElement();\n                    tb.push(head);\n                    tb.process(t, InHead);\n                    tb.removeFromStack(head);\n                } else if (name.equals(\"head\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\")) {\n                    anythingElse(t, tb);\n                } else {\n                    tb.error(this);\n                    return false;\n                }\n            } else {\n                anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 195,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#239",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.process(new Token.StartTag(\"body\"));\n            tb.framesetOk(true);\n            return tb.process(t);\n        }",
    "begin_line": 239,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#246",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character: {\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    String name \u003d startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html \u003d tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body \u003d stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second \u003d stack.get(1);\n                            if (second.parent() !\u003d null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() \u003e 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() !\u003d null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        Element form \u003d tb.insert(startTag);\n                        tb.setFormElement(form);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n                        for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                            Element el \u003d stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        tb.framesetOk(false);\n                        LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n                        for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                            Element el \u003d stack.get(i);\n                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") !\u003d null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA \u003d tb.getFromStack(\"a\");\n                            if (remainingA !\u003d null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        tb.reconstructFormattingElements();\n                        Element el \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() !\u003d Document.QuirksMode.quirks \u0026\u0026 tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el \u003d tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        // we\u0027re not supposed to ask.\n                        startTag.name(\"img\");\n                        return tb.process(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() !\u003d null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form \u003d tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt \u003d startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs \u003d new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state \u003d tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    name \u003d endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored \u003d tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                        // todo: refactor these lookups\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm \u003d tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm \u003d\u003d null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty \u003cp\u003e\u003c/p\u003e\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i \u003d 0; i \u003c 8; i++) {\n                            Element formatEl \u003d tb.getActiveFormattingElement(name);\n                            if (formatEl \u003d\u003d null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() !\u003d formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock \u003d null;\n                            Element commonAncestor \u003d null;\n                            boolean seenFormattingElement \u003d false;\n                            LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n                            for (int si \u003d 0; si \u003c stack.size(); si++) {\n                                Element el \u003d stack.get(si);\n                                if (el \u003d\u003d formatEl) {\n                                    commonAncestor \u003d stack.get(si - 1);\n                                    seenFormattingElement \u003d true;\n                                } else if (seenFormattingElement \u0026\u0026 tb.isSpecial(el)) {\n                                    furthestBlock \u003d el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock \u003d\u003d null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node \u003d furthestBlock;\n                            Element lastNode \u003d furthestBlock;\n                            INNER:\n                            for (int j \u003d 0; j \u003c 3; j++) {\n                                if (tb.onStack(node))\n                                    node \u003d tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node \u003d\u003d formatEl)\n                                    break INNER;\n\n                                Element replacement \u003d new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node \u003d replacement;\n\n                                if (lastNode \u003d\u003d furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode \u003d node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter \u003d new Element(Tag.valueOf(name), tb.getBaseUri());\n                            Node[] childNodes \u003d furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }\n            return true;\n        }",
    "begin_line": 246,
    "end_line": 761,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anyOtherEndTag#763",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anyOtherEndTag(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n            String name \u003d t.asEndTag().name();\n            DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n            Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n            while (it.hasNext()) {\n                Element node \u003d it.next();\n                if (node.nodeName().equals(name)) {\n                    tb.generateImpliedEndTags(name);\n                    if (!name.equals(tb.currentElement().nodeName()))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    break;\n                } else {\n                    if (tb.isSpecial(node)) {\n                        tb.error(this);\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "begin_line": 763,
    "end_line": 783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#787",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.insert(t.asCharacter());\n            } else if (t.isEOF()) {\n                tb.error(this);\n                // if current node is script: already started\n                tb.pop();\n                tb.transition(tb.originalState());\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                // if: An end tag whose tag name is \"script\" -- scripting nesting level, if evaluating scripts\n                tb.pop();\n                tb.transition(tb.originalState());\n            }\n            return true;\n        }",
    "begin_line": 787,
    "end_line": 802,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#805",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.newPendingTableCharacters();\n                tb.markInsertionMode();\n                tb.transition(InTableText);\n                return tb.process(t);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n                return true;\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.name();\n                if (name.equals(\"caption\")) {\n                    tb.clearStackToTableContext();\n                    tb.insertMarkerToFormattingElements();\n                    tb.insert(startTag);\n                    tb.transition(InCaption);\n                } else if (name.equals(\"colgroup\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InColumnGroup);\n                } else if (name.equals(\"col\")) {\n                    tb.process(new Token.StartTag(\"colgroup\"));\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InTableBody);\n                } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {\n                    tb.process(new Token.StartTag(\"tbody\"));\n                    return tb.process(t);\n                } else if (name.equals(\"table\")) {\n                    tb.error(this);\n                    boolean processed \u003d tb.process(new Token.EndTag(\"table\"));\n                    if (processed) // only ignored if in fragment\n                        return tb.process(t);\n                } else if (StringUtil.in(name, \"style\", \"script\")) {\n                    return tb.process(t, InHead);\n                } else if (name.equals(\"input\")) {\n                    if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.insertEmpty(startTag);\n                    }\n                } else if (name.equals(\"form\")) {\n                    tb.error(this);\n                    if (tb.getFormElement() !\u003d null)\n                        return false;\n                    else {\n                        Element form \u003d tb.insertEmpty(startTag);\n                        tb.setFormElement(form);\n                    }\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.name();\n\n                if (name.equals(\"table\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.popStackToClose(\"table\");\n                    }\n                    tb.resetInsertionMode();\n                } else if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEOF()) {\n                if (tb.currentElement().nodeName().equals(\"html\"))\n                    tb.error(this);\n                return true; // stops parsing\n            }\n            return anythingElse(t, tb);\n        }",
    "begin_line": 805,
    "end_line": 888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#890",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            boolean processed \u003d true;\n            if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                tb.setFosterInserts(true);\n                processed \u003d tb.process(t, InBody);\n                tb.setFosterInserts(false);\n            } else {\n                processed \u003d tb.process(t, InBody);\n            }\n            return processed;\n        }",
    "begin_line": 890,
    "end_line": 901,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#904",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() \u003e 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 904,
    "end_line": 937,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#940",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"caption\")) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.name();\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"caption\"))\n                        tb.error(this);\n                    tb.popStackToClose(\"caption\");\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InTable);\n                }\n            } else if ((\n                    t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"table\"))\n                    ) {\n                tb.error(this);\n                boolean processed \u003d tb.process(new Token.EndTag(\"caption\"));\n                if (processed)\n                    return tb.process(t);\n            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return tb.process(t, InBody);\n            }\n            return true;\n        }",
    "begin_line": 940,
    "end_line": 972,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#975",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    String name \u003d startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    name \u003d endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 975,
    "end_line": 1020,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1022",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, TreeBuilder tb) {\n            boolean processed \u003d tb.process(new Token.EndTag(\"colgroup\"));\n            if (processed) // only ignored in frag case\n                return tb.process(t);\n            return true;\n        }",
    "begin_line": 1022,
    "end_line": 1027,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1030",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    String name \u003d startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    name \u003d endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1030,
    "end_line": 1072,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.exitTableBody#1074",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.exitTableBody(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {\n            if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {\n                // frag case\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableBodyContext();\n            tb.process(new Token.EndTag(tb.currentElement().nodeName())); // tbody, tfoot, thead\n            return tb.process(t);\n        }",
    "begin_line": 1074,
    "end_line": 1083,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1085",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }",
    "begin_line": 1085,
    "end_line": 1087,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1090",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.name();\n\n                if (StringUtil.in(name, \"th\", \"td\")) {\n                    tb.clearStackToTableRowContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                    tb.insertMarkerToFormattingElements();\n                } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    return handleMissingTr(t, tb);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.name();\n\n                if (name.equals(\"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this); // frag\n                        return false;\n                    }\n                    tb.clearStackToTableRowContext();\n                    tb.pop(); // tr\n                    tb.transition(InTableBody);\n                } else if (name.equals(\"table\")) {\n                    return handleMissingTr(t, tb);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.process(new Token.EndTag(\"tr\"));\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1090,
    "end_line": 1136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1138",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }",
    "begin_line": 1138,
    "end_line": 1140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleMissingTr#1142",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleMissingTr(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean handleMissingTr(Token t, TreeBuilder tb) {\n            boolean processed \u003d tb.process(new Token.EndTag(\"tr\"));\n            if (processed)\n                return tb.process(t);\n            else\n                return false;\n        }",
    "begin_line": 1142,
    "end_line": 1148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1151",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.name();\n\n                if (StringUtil.in(name, \"td\", \"th\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        tb.transition(InRow); // might not be in scope if empty: \u003ctd /\u003e and processing fake end tag\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InRow);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                    tb.error(this);\n                    return false;\n                } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    closeCell(tb);\n                    return tb.process(t);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isStartTag() \u0026\u0026\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n                    tb.error(this);\n                    return false;\n                }\n                closeCell(tb);\n                return tb.process(t);\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1151,
    "end_line": 1194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1196",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InBody);\n        }",
    "begin_line": 1196,
    "end_line": 1198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.closeCell#1200",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.closeCell(org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private void closeCell(HtmlTreeBuilder tb) {\n            if (tb.inTableScope(\"td\"))\n                tb.process(new Token.EndTag(\"td\"));\n            else\n                tb.process(new Token.EndTag(\"th\")); // only here if th or td in scope\n        }",
    "begin_line": 1200,
    "end_line": 1205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1208",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start \u003d t.asStartTag();\n                    String name \u003d start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end \u003d t.asEndTag();\n                    name \u003d end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") \u0026\u0026 tb.aboveOnStack(tb.currentElement()) !\u003d null \u0026\u0026 tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1208,
    "end_line": 1288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1290",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            return false;\n        }",
    "begin_line": 1290,
    "end_line": 1293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1296",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                tb.process(new Token.EndTag(\"select\"));\n                return tb.process(t);\n            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                if (tb.inTableScope(t.asEndTag().name())) {\n                    tb.process(new Token.EndTag(\"select\"));\n                    return (tb.process(t));\n                } else\n                    return false;\n            } else {\n                return tb.process(t, InSelect);\n            }\n        }",
    "begin_line": 1296,
    "end_line": 1311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1314",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return tb.process(t, InBody);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment()); // into html node\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"html\")) {\n                if (tb.isFragmentParsing()) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterAfterBody);\n                }\n            } else if (t.isEOF()) {\n                // chillax! we\u0027re done\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 1314,
    "end_line": 1339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1342",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag start \u003d t.asStartTag();\n                String name \u003d start.name();\n                if (name.equals(\"html\")) {\n                    return tb.process(start, InBody);\n                } else if (name.equals(\"frameset\")) {\n                    tb.insert(start);\n                } else if (name.equals(\"frame\")) {\n                    tb.insertEmpty(start);\n                } else if (name.equals(\"noframes\")) {\n                    return tb.process(start, InHead);\n                } else {\n                    tb.error(this);\n                    return false;\n                }\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"frameset\")) {\n                if (tb.currentElement().nodeName().equals(\"html\")) { // frag\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.pop();\n                    if (!tb.isFragmentParsing() \u0026\u0026 !tb.currentElement().nodeName().equals(\"frameset\")) {\n                        tb.transition(AfterFrameset);\n                    }\n                }\n            } else if (t.isEOF()) {\n                if (!tb.currentElement().nodeName().equals(\"html\")) {\n                    tb.error(this);\n                    return true;\n                }\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1342,
    "end_line": 1385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1388",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"html\")) {\n                tb.transition(AfterAfterFrameset);\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else if (t.isEOF()) {\n                // cool your heels, we\u0027re complete\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1388,
    "end_line": 1409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1412",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 1412,
    "end_line": 1425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1428",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1428,
    "end_line": 1442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1445",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            return true;\n            // todo: implement. Also; how do we get here?\n        }",
    "begin_line": 1445,
    "end_line": 1448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1453",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "abstract boolean process(Token t, HtmlTreeBuilder tb);",
    "begin_line": 1453,
    "end_line": 1453,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.isWhitespace#1455",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(org.jsoup.parser.Token)",
    "snippet": "private static boolean isWhitespace(Token t) {\n        if (t.isCharacter()) {\n            String data \u003d t.asCharacter().getData();\n            // todo: this checks more than spec - \"\\t\", \"\\n\", \"\\f\", \"\\r\", \" \"\n            for (int i \u003d 0; i \u003c data.length(); i++) {\n                char c \u003d data.charAt(i);\n                if (!StringUtil.isWhitespace(c))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 1455,
    "end_line": 1467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleRcData#1469",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleRcData(org.jsoup.parser.Token.StartTag, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.insert(startTag);\n        tb.tokeniser.transition(TokeniserState.Rcdata);\n        tb.markInsertionMode();\n        tb.transition(Text);\n    }",
    "begin_line": 1469,
    "end_line": 1474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleRawtext#1476",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(org.jsoup.parser.Token.StartTag, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.insert(startTag);\n        tb.tokeniser.transition(TokeniserState.Rawtext);\n        tb.markInsertionMode();\n        tb.transition(Text);\n    }",
    "begin_line": 1476,
    "end_line": 1481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.ParseErrorList#14",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.ParseErrorList(int, int)",
    "snippet": " ParseErrorList(int initialCapacity, int maxSize) {\n        super(initialCapacity);\n        this.maxSize \u003d maxSize;\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.canAddError#19",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.canAddError()",
    "snippet": "boolean canAddError() {\n        return size() \u003c maxSize;\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.getMaxSize#23",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.getMaxSize()",
    "snippet": "int getMaxSize() {\n        return maxSize;\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.noTracking#27",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.noTracking()",
    "snippet": "static ParseErrorList noTracking() {\n        return new ParseErrorList(0, 0);\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.tracking#31",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.tracking(int)",
    "snippet": "static ParseErrorList tracking(int maxSize) {\n        return new ParseErrorList(INITIAL_CAPACITY, maxSize);\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.Parser#24",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.Parser(org.jsoup.parser.TreeBuilder)",
    "snippet": "public Parser(TreeBuilder treeBuilder) {\n        this.treeBuilder \u003d treeBuilder;\n    }",
    "begin_line": 24,
    "end_line": 26,
    "comment": "/** \n * Create a new Parser, using the specified TreeBuilder\n * @param treeBuilder TreeBuilder to use to parse input into Documents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseInput#28",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseInput(java.lang.String, java.lang.String)",
    "snippet": "public Document parseInput(String html, String baseUri) {\n        errors \u003d isTrackErrors() ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\n        Document doc \u003d treeBuilder.parse(html, baseUri, errors);\n        return doc;\n    }",
    "begin_line": 28,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getTreeBuilder#39",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.getTreeBuilder()",
    "snippet": "public TreeBuilder getTreeBuilder() {\n        return treeBuilder;\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "/** \n * Get the TreeBuilder currently in use.\n * @return current TreeBuilder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.setTreeBuilder#48",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.setTreeBuilder(org.jsoup.parser.TreeBuilder)",
    "snippet": "public Parser setTreeBuilder(TreeBuilder treeBuilder) {\n        this.treeBuilder \u003d treeBuilder;\n        return this;\n    }",
    "begin_line": 48,
    "end_line": 51,
    "comment": "/** \n * Update the TreeBuilder used when parsing content.\n * @param treeBuilder current TreeBuilder\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.isTrackErrors#57",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.isTrackErrors()",
    "snippet": "public boolean isTrackErrors() {\n        return maxErrors \u003e 0;\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Check if parse error tracking is enabled.\n * @return current track error state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.setTrackErrors#66",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.setTrackErrors(int)",
    "snippet": "public Parser setTrackErrors(int maxErrors) {\n        this.maxErrors \u003d maxErrors;\n        return this;\n    }",
    "begin_line": 66,
    "end_line": 69,
    "comment": "/** \n * Enable or disable parse error tracking for the next parse.\n * @param maxErrors the maximum number of errors to track. Set to 0 to disable.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getErrors#75",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.getErrors()",
    "snippet": "public List\u003cParseError\u003e getErrors() {\n        return errors;\n    }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "/** \n * Retrieve the parse errors, if any, from the last parse.\n * @return list of parse errors, up to the size of the maximum errors tracked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#88",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        TreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n        return treeBuilder.parse(html, baseUri, ParseErrorList.noTracking());\n    }",
    "begin_line": 88,
    "end_line": 91,
    "comment": "/** \n * Parse HTML into a Document.\n * @param html HTML to parse\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return parsed Document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseFragment#103",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String)",
    "snippet": "public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri) {\n        HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, ParseErrorList.noTracking());\n    }",
    "begin_line": 103,
    "end_line": 106,
    "comment": "/** \n * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n * @param fragmentHtml the fragment of HTML to parse\n * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). Thisprovides stack context (for implicit element creation).\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragment#116",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        Document doc \u003d Document.createShell(baseUri);\n        Element body \u003d doc.body();\n        List\u003cNode\u003e nodeList \u003d parseFragment(bodyHtml, body, baseUri);\n        Node[] nodes \u003d nodeList.toArray(new Node[nodeList.size()]); // the node list gets modified when re-parented\n        for (Node node : nodes) {\n            body.appendChild(node);\n        }\n        return doc;\n    }",
    "begin_line": 116,
    "end_line": 125,
    "comment": "/** \n * Parse a fragment of HTML into the  {@code body} of a Document.\n * @param bodyHtml fragment of HTML\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return Document, with empty head, and HTML parsed into body\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragmentRelaxed#134",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n        return parse(bodyHtml, baseUri);\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * @param bodyHtml HTML to parse\n * @param baseUri baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return parsed Document\n * @deprecated Use {@link #parseBodyFragment} or {@link #parseFragment} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.htmlParser#145",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.htmlParser()",
    "snippet": "public static Parser htmlParser() {\n        return new Parser(new HtmlTreeBuilder());\n    }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Create a new HTML parser. This parser treats input as HTML5, and enforces the creation of a normalised document, based on a knowledge of the semantics of the incoming tags.\n * @return a new HTML parser.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.xmlParser#154",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.xmlParser()",
    "snippet": "public static Parser xmlParser() {\n        return new Parser(new XmlTreeBuilder());\n    }",
    "begin_line": 154,
    "end_line": 156,
    "comment": "/** \n * Create a new XML parser. This parser assumes no knowledge of the incoming tags and does not treat it as HTML, rather creates a simple tree directly from the input.\n * @return a new simple XML parser.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.Tag#25",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.Tag(java.lang.String)",
    "snippet": "private Tag(String tagName) {\n        this.tagName \u003d tagName.toLowerCase();\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getName#34",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.getName()",
    "snippet": "public String getName() {\n        return tagName;\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "/** \n * Get this tag\u0027s name.\n * @return the tag\u0027s name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.valueOf#46",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String)",
    "snippet": "public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName \u003d tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag \u003d tags.get(tagName);\n            if (tag \u003d\u003d null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a \u003cp\u003e)\n                tag \u003d new Tag(tagName);\n                tag.isBlock \u003d false;\n                tag.canContainBlock \u003d true;\n            }\n            return tag;\n        }\n    }",
    "begin_line": 46,
    "end_line": 61,
    "comment": "/** \n * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything. \u003cp/\u003e Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n * @return The tag, either defined or new generic.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isBlock#68",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isBlock()",
    "snippet": "public boolean isBlock() {\n        return isBlock;\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Gets if this is a block tag.\n * @return if block tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.formatAsBlock#77",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.formatAsBlock()",
    "snippet": "public boolean formatAsBlock() {\n        return formatAsBlock;\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Gets if this tag should be formatted as a block (or as inline)\n * @return if should be formatted as block or inline\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.canContainBlock#86",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.canContainBlock()",
    "snippet": "public boolean canContainBlock() {\n        return canContainBlock;\n    }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "/** \n * Gets if this tag can contain block tags.\n * @return if tag can contain block tags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isInline#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isInline()",
    "snippet": "public boolean isInline() {\n        return !isBlock;\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * Gets if this tag is an inline tag.\n * @return if this tag is an inline tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isData#104",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isData()",
    "snippet": "public boolean isData() {\n        return !canContainInline \u0026\u0026 !isEmpty();\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Gets if this tag is a data only tag.\n * @return if this tag is a data only tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isEmpty#113",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return empty;\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "/** \n * Get if this is an empty tag\n * @return if this is an empty tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#122",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isSelfClosing()",
    "snippet": "public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "/** \n * Get if this tag is self closing.\n * @return if this tag should be output as self closing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#131",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag()",
    "snippet": "public boolean isKnownTag() {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Get if this is a pre-defined tag, or was auto created on parsing.\n * @return if a known tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#141",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag(java.lang.String)",
    "snippet": "public static boolean isKnownTag(String tagName) {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Check if this tagname is a known tag.\n * @param tagName name of tag\n * @return if known HTML tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.preserveWhitespace#150",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.preserveWhitespace()",
    "snippet": "public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * Get if this tag should preserve whitespace within child text nodes.\n * @return if preserve whitepace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setSelfClosing#154",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setSelfClosing()",
    "snippet": "Tag setSelfClosing() {\n        selfClosing \u003d true;\n        return this;\n    }",
    "begin_line": 154,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.equals#160",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Tag)) return false;\n\n        Tag tag \u003d (Tag) o;\n\n        if (canContainBlock !\u003d tag.canContainBlock) return false;\n        if (canContainInline !\u003d tag.canContainInline) return false;\n        if (empty !\u003d tag.empty) return false;\n        if (formatAsBlock !\u003d tag.formatAsBlock) return false;\n        if (isBlock !\u003d tag.isBlock) return false;\n        if (preserveWhitespace !\u003d tag.preserveWhitespace) return false;\n        if (selfClosing !\u003d tag.selfClosing) return false;\n        if (!tagName.equals(tag.tagName)) return false;\n\n        return true;\n    }",
    "begin_line": 160,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.hashCode#179",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d tagName.hashCode();\n        result \u003d 31 * result + (isBlock ? 1 : 0);\n        result \u003d 31 * result + (formatAsBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainInline ? 1 : 0);\n        result \u003d 31 * result + (empty ? 1 : 0);\n        result \u003d 31 * result + (selfClosing ? 1 : 0);\n        result \u003d 31 * result + (preserveWhitespace ? 1 : 0);\n        return result;\n    }",
    "begin_line": 179,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.toString#191",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.toString()",
    "snippet": "public String toString() {\n        return tagName;\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.register#256",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.register(org.jsoup.parser.Tag)",
    "snippet": "private static Tag register(Tag tag) {\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }",
    "begin_line": 256,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.Token#13",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Token()",
    "snippet": "private Token() {\n    }",
    "begin_line": 13,
    "end_line": 14,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.tokenType#16",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.tokenType()",
    "snippet": "String tokenType() {\n        return this.getClass().getSimpleName();\n    }",
    "begin_line": 16,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.Doctype#26",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Doctype()",
    "snippet": " Doctype() {\n            type \u003d TokenType.Doctype;\n        }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getName#30",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getName()",
    "snippet": "String getName() {\n            return name.toString();\n        }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getPublicIdentifier#34",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getPublicIdentifier()",
    "snippet": "String getPublicIdentifier() {\n            return publicIdentifier.toString();\n        }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getSystemIdentifier#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getSystemIdentifier()",
    "snippet": "public String getSystemIdentifier() {\n            return systemIdentifier.toString();\n        }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.isForceQuirks#42",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isForceQuirks()",
    "snippet": "public boolean isForceQuirks() {\n            return forceQuirks;\n        }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.newAttribute#55",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.newAttribute()",
    "snippet": "void newAttribute() {\n            if (attributes \u003d\u003d null)\n                attributes \u003d new Attributes();\n\n            if (pendingAttributeName !\u003d null) {\n                Attribute attribute;\n                if (pendingAttributeValue \u003d\u003d null)\n                    attribute \u003d new Attribute(pendingAttributeName, \"\");\n                else\n                    attribute \u003d new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n                attributes.put(attribute);\n            }\n            pendingAttributeName \u003d null;\n            if (pendingAttributeValue !\u003d null)\n                pendingAttributeValue.delete(0, pendingAttributeValue.length());\n        }",
    "begin_line": 55,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.finaliseTag#72",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.finaliseTag()",
    "snippet": "void finaliseTag() {\n            // finalises for emit\n            if (pendingAttributeName !\u003d null) {\n                // todo: check if attribute name exists; if so, drop and error\n                newAttribute();\n            }\n        }",
    "begin_line": 72,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.name#80",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.name()",
    "snippet": "String name() {\n            Validate.isFalse(tagName.length() \u003d\u003d 0);\n            return tagName;\n        }",
    "begin_line": 80,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.name#85",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.name(java.lang.String)",
    "snippet": "Tag name(String name) {\n            tagName \u003d name;\n            return this;\n        }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#90",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isSelfClosing()",
    "snippet": "boolean isSelfClosing() {\n            return selfClosing;\n        }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getAttributes#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getAttributes()",
    "snippet": "@SuppressWarnings({\"TypeMayBeWeakened\"})\n        Attributes getAttributes() {\n            return attributes;\n        }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendTagName#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendTagName(java.lang.String)",
    "snippet": "void appendTagName(String append) {\n            tagName \u003d tagName \u003d\u003d null ? append : tagName.concat(append);\n        }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendTagName#104",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendTagName(char)",
    "snippet": "void appendTagName(char append) {\n            appendTagName(String.valueOf(append));\n        }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeName#108",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeName(java.lang.String)",
    "snippet": "void appendAttributeName(String append) {\n            pendingAttributeName \u003d pendingAttributeName \u003d\u003d null ? append : pendingAttributeName.concat(append);\n        }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeName#112",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeName(char)",
    "snippet": "void appendAttributeName(char append) {\n            appendAttributeName(String.valueOf(append));\n        }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#116",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(java.lang.String)",
    "snippet": "void appendAttributeValue(String append) {\n            pendingAttributeValue \u003d pendingAttributeValue \u003d\u003d null ? new StringBuilder(append) : pendingAttributeValue.append(append);\n        }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(char)",
    "snippet": "void appendAttributeValue(char append) {\n            appendAttributeValue(String.valueOf(append));\n        }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.StartTag#126",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.StartTag()",
    "snippet": " StartTag() {\n            super();\n            attributes \u003d new Attributes();\n            type \u003d TokenType.StartTag;\n        }",
    "begin_line": 126,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.StartTag#132",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.StartTag(java.lang.String)",
    "snippet": " StartTag(String name) {\n            this();\n            this.tagName \u003d name;\n        }",
    "begin_line": 132,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.StartTag#137",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.StartTag(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": " StartTag(String name, Attributes attributes) {\n            this();\n            this.tagName \u003d name;\n            this.attributes \u003d attributes;\n        }",
    "begin_line": 137,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.toString#144",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0)\n                return \"\u003c\" + name() + \" \" + attributes.toString() + \"\u003e\";\n            else\n                return \"\u003c\" + name() + \"\u003e\";\n        }",
    "begin_line": 144,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EndTag.EndTag#153",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.EndTag()",
    "snippet": " EndTag() {\n            super();\n            type \u003d TokenType.EndTag;\n        }",
    "begin_line": 153,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EndTag.EndTag#158",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.EndTag(java.lang.String)",
    "snippet": " EndTag(String name) {\n            this();\n            this.tagName \u003d name;\n        }",
    "begin_line": 158,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EndTag.toString#164",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return \"\u003c/\" + name() + \"\u003e\";\n        }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.Comment#172",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Comment()",
    "snippet": " Comment() {\n            type \u003d TokenType.Comment;\n        }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.getData#176",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getData()",
    "snippet": "String getData() {\n            return data.toString();\n        }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.toString#181",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return \"\u003c!--\" + getData() + \"--\u003e\";\n        }",
    "begin_line": 181,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.Character#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Character(java.lang.String)",
    "snippet": " Character(String data) {\n            type \u003d TokenType.Character;\n            this.data \u003d data;\n        }",
    "begin_line": 189,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.getData#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getData()",
    "snippet": "String getData() {\n            return data;\n        }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.toString#199",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return getData();\n        }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.EOF#205",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.EOF()",
    "snippet": " EOF() {\n            type \u003d Token.TokenType.EOF;\n        }",
    "begin_line": 205,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isDoctype#210",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isDoctype()",
    "snippet": "boolean isDoctype() {\n        return type \u003d\u003d TokenType.Doctype;\n    }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asDoctype#214",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asDoctype()",
    "snippet": "Doctype asDoctype() {\n        return (Doctype) this;\n    }",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isStartTag#218",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isStartTag()",
    "snippet": "boolean isStartTag() {\n        return type \u003d\u003d TokenType.StartTag;\n    }",
    "begin_line": 218,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asStartTag#222",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asStartTag()",
    "snippet": "StartTag asStartTag() {\n        return (StartTag) this;\n    }",
    "begin_line": 222,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isEndTag#226",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isEndTag()",
    "snippet": "boolean isEndTag() {\n        return type \u003d\u003d TokenType.EndTag;\n    }",
    "begin_line": 226,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asEndTag#230",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asEndTag()",
    "snippet": "EndTag asEndTag() {\n        return (EndTag) this;\n    }",
    "begin_line": 230,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isComment#234",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isComment()",
    "snippet": "boolean isComment() {\n        return type \u003d\u003d TokenType.Comment;\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asComment#238",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asComment()",
    "snippet": "Comment asComment() {\n        return (Comment) this;\n    }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isCharacter#242",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isCharacter()",
    "snippet": "boolean isCharacter() {\n        return type \u003d\u003d TokenType.Character;\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asCharacter#246",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asCharacter()",
    "snippet": "Character asCharacter() {\n        return (Character) this;\n    }",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isEOF#250",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isEOF()",
    "snippet": "boolean isEOF() {\n        return type \u003d\u003d TokenType.EOF;\n    }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.Tokeniser#30",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.Tokeniser(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)",
    "snippet": " Tokeniser(CharacterReader reader, ParseErrorList errors) {\n        this.reader \u003d reader;\n        this.errors \u003d errors;\n    }",
    "begin_line": 30,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.read#35",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.read()",
    "snippet": "Token read() {\n        if (!selfClosingFlagAcknowledged) {\n            error(\"Self closing flag not acknowledged\");\n            selfClosingFlagAcknowledged \u003d true;\n        }\n\n        while (!isEmitPending)\n            state.read(this, reader);\n\n        // if emit is pending, a non-character token was found: return any chars in buffer, and leave token for next read:\n        if (charBuffer.length() \u003e 0) {\n            String str \u003d charBuffer.toString();\n            charBuffer.delete(0, charBuffer.length());\n            return new Token.Character(str);\n        } else {\n            isEmitPending \u003d false;\n            return emitPending;\n        }\n    }",
    "begin_line": 35,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#55",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(org.jsoup.parser.Token)",
    "snippet": "void emit(Token token) {\n        Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n\n        emitPending \u003d token;\n        isEmitPending \u003d true;\n\n        if (token.type \u003d\u003d Token.TokenType.StartTag) {\n            Token.StartTag startTag \u003d (Token.StartTag) token;\n            lastStartTag \u003d startTag;\n            if (startTag.selfClosing)\n                selfClosingFlagAcknowledged \u003d false;\n        } else if (token.type \u003d\u003d Token.TokenType.EndTag) {\n            Token.EndTag endTag \u003d (Token.EndTag) token;\n            if (endTag.attributes !\u003d null)\n                error(\"Attributes incorrectly present on end tag\");\n        }\n    }",
    "begin_line": 55,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#73",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(java.lang.String)",
    "snippet": "void emit(String str) {\n        // buffer strings up until last string token found, to emit only one token for a run of character refs etc.\n        // does not set isEmitPending; read checks that\n        charBuffer.append(str);\n    }",
    "begin_line": 73,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#79",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(char)",
    "snippet": "void emit(char c) {\n        charBuffer.append(c);\n    }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.getState#83",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.getState()",
    "snippet": "TokeniserState getState() {\n        return state;\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.transition#87",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.transition(org.jsoup.parser.TokeniserState)",
    "snippet": "void transition(TokeniserState state) {\n        this.state \u003d state;\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.advanceTransition#91",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.advanceTransition(org.jsoup.parser.TokeniserState)",
    "snippet": "void advanceTransition(TokeniserState state) {\n        reader.advance();\n        this.state \u003d state;\n    }",
    "begin_line": 91,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.acknowledgeSelfClosingFlag#96",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.acknowledgeSelfClosingFlag()",
    "snippet": "void acknowledgeSelfClosingFlag() {\n        selfClosingFlagAcknowledged \u003d true;\n    }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.consumeCharacterReference#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.consumeCharacterReference(java.lang.Character, boolean)",
    "snippet": "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty())\n            return null;\n        if (additionalAllowedCharacter !\u003d null \u0026\u0026 additionalAllowedCharacter \u003d\u003d reader.current())\n            return null;\n        if (reader.matchesAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027, \u0027\u003c\u0027, \u0027\u0026\u0027))\n            return null;\n\n        reader.mark();\n        if (reader.matchConsume(\"#\")) { // numbered\n            boolean isHexMode \u003d reader.matchConsumeIgnoreCase(\"X\");\n            String numRef \u003d isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() \u003d\u003d 0) { // didn\u0027t match anything\n                characterReferenceError(\"numeric reference with no numerals\");\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\"))\n                characterReferenceError(\"missing semicolon\"); // missing semi\n            int charval \u003d -1;\n            try {\n                int base \u003d isHexMode ? 16 : 10;\n                charval \u003d Integer.valueOf(numRef, base);\n            } catch (NumberFormatException e) {\n            } // skip\n            if (charval \u003d\u003d -1 || (charval \u003e\u003d 0xD800 \u0026\u0026 charval \u003c\u003d 0xDFFF) || charval \u003e 0x10FFFF) {\n                characterReferenceError(\"character outside of valid range\");\n                return replacementChar;\n            } else {\n                // todo: implement number replacement table\n                // todo: check for extra illegal unicode points as parse errors\n                return (char) charval;\n            }\n        } else { // named\n            // get as many letters as possible, and look for matching entities. unconsume backwards till a match is found\n            String nameRef \u003d reader.consumeLetterThenDigitSequence();\n            String origNameRef \u003d new String(nameRef); // for error reporting. nameRef gets chomped looking for matches\n            boolean looksLegit \u003d reader.matches(\u0027;\u0027);\n            boolean found \u003d false;\n            while (nameRef.length() \u003e 0 \u0026\u0026 !found) {\n                if (Entities.isNamedEntity(nameRef))\n                    found \u003d true;\n                else {\n                    nameRef \u003d nameRef.substring(0, nameRef.length()-1);\n                    reader.unconsume();\n                }\n            }\n            if (!found) {\n                if (looksLegit) // named with semicolon\n                    characterReferenceError(String.format(\"invalid named referenece \u0027%s\u0027\", origNameRef));\n                reader.rewindToMark();\n                return null;\n            }\n            if (inAttribute \u0026\u0026 (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny(\u0027\u003d\u0027, \u0027-\u0027, \u0027_\u0027))) {\n                // don\u0027t want that to match\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\"))\n                characterReferenceError(\"missing semicolon\"); // missing semi\n            return Entities.getCharacterByName(nameRef);\n        }\n    }",
    "begin_line": 100,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createTagPending#164",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createTagPending(boolean)",
    "snippet": "Token.Tag createTagPending(boolean start) {\n        tagPending \u003d start ? new Token.StartTag() : new Token.EndTag();\n        return tagPending;\n    }",
    "begin_line": 164,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitTagPending#169",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitTagPending()",
    "snippet": "void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }",
    "begin_line": 169,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createCommentPending#174",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createCommentPending()",
    "snippet": "void createCommentPending() {\n        commentPending \u003d new Token.Comment();\n    }",
    "begin_line": 174,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitCommentPending#178",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitCommentPending()",
    "snippet": "void emitCommentPending() {\n        emit(commentPending);\n    }",
    "begin_line": 178,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createDoctypePending#182",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createDoctypePending()",
    "snippet": "void createDoctypePending() {\n        doctypePending \u003d new Token.Doctype();\n    }",
    "begin_line": 182,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitDoctypePending#186",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitDoctypePending()",
    "snippet": "void emitDoctypePending() {\n        emit(doctypePending);\n    }",
    "begin_line": 186,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createTempBuffer#190",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createTempBuffer()",
    "snippet": "void createTempBuffer() {\n        dataBuffer \u003d new StringBuilder();\n    }",
    "begin_line": 190,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.isAppropriateEndTagToken#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.isAppropriateEndTagToken()",
    "snippet": "boolean isAppropriateEndTagToken() {\n        if (lastStartTag \u003d\u003d null)\n            return false;\n        return tagPending.tagName.equals(lastStartTag.tagName);\n    }",
    "begin_line": 194,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.appropriateEndTagName#200",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.appropriateEndTagName()",
    "snippet": "String appropriateEndTagName() {\n        return lastStartTag.tagName;\n    }",
    "begin_line": 200,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.error#204",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.error(org.jsoup.parser.TokeniserState)",
    "snippet": "void error(TokeniserState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpected character \u0027%s\u0027 in input state [%s]\", reader.current(), state));\n    }",
    "begin_line": 204,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.eofError#209",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.eofError(org.jsoup.parser.TokeniserState)",
    "snippet": "void eofError(TokeniserState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));\n    }",
    "begin_line": 209,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.characterReferenceError#214",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.characterReferenceError(java.lang.String)",
    "snippet": "private void characterReferenceError(String message) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n    }",
    "begin_line": 214,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.error#219",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.error(java.lang.String)",
    "snippet": "private void error(String errorMsg) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), errorMsg));\n    }",
    "begin_line": 219,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.currentNodeInHtmlNS#224",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.currentNodeInHtmlNS()",
    "snippet": "boolean currentNodeInHtmlNS() {\n        // todo: implement namespaces correctly\n        return true;\n        // Element currentNode \u003d currentNode();\n        // return currentNode !\u003d null \u0026\u0026 currentNode.namespace().equals(\"HTML\");\n    }",
    "begin_line": 224,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#9",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u0026\u0027:\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027\u0026\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 9,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#33",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            Character c \u003d t.consumeCharacterReference(null, false);\n            if (c \u003d\u003d null)\n                t.emit(\u0027\u0026\u0027);\n            else\n                t.emit(c);\n            t.transition(Data);\n        }",
    "begin_line": 33,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#44",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u0026\u0027:\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027\u0026\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 44,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#68",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            Character c \u003d t.consumeCharacterReference(null, false);\n            if (c \u003d\u003d null)\n                t.emit(\u0027\u0026\u0027);\n            else\n                t.emit(c);\n            t.transition(Rcdata);\n        }",
    "begin_line": 68,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#78",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 78,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#99",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 99,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 120,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#139",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027!\u0027:\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case \u0027/\u0027:\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case \u0027?\u0027:\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit(\u0027\u003c\u0027); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }\n        }",
    "begin_line": 139,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#164",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.emit(\"\u003c/\");\n                t.transition(Data);\n            } else if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.transition(TagName);\n            } else if (r.matches(\u0027\u003e\u0027)) {\n                t.error(this);\n                t.advanceTransition(Data);\n            } else {\n                t.error(this);\n                t.advanceTransition(BogusComment);\n            }\n        }",
    "begin_line": 164,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#183",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            // previous TagOpen state did NOT consume, will have a letter char in current\n            String tagName \u003d r.consumeToAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027, \u0027/\u0027, \u0027\u003e\u0027, nullChar).toLowerCase();\n            t.tagPending.appendTagName(tagName);\n\n            switch (r.consume()) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }\n        }",
    "begin_line": 183,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#215",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(RCDATAEndTagOpen);\n            } else if (r.matchesLetter() \u0026\u0026 !r.containsIgnoreCase(\"\u003c/\" + t.appropriateEndTagName())) {\n                // diverge from spec: got a start tag, but there\u0027s no appropriate end tag (\u003c/title\u003e), so rather than\n                // consuming to EOF; break out here\n                t.tagPending \u003d new Token.EndTag(t.appropriateEndTagName());\n                t.emitTagPending();\n                r.unconsume(); // undo \"\u003c\"\n                t.transition(Data);\n            } else {\n                t.emit(\"\u003c\");\n                t.transition(Rcdata);\n            }\n        }",
    "begin_line": 215,
    "end_line": 230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#233",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.tagPending.appendTagName(Character.toLowerCase(r.current()));\n                t.dataBuffer.append(Character.toLowerCase(r.current()));\n                t.advanceTransition(RCDATAEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(Rcdata);\n            }\n        }",
    "begin_line": 233,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#246",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case \u0027/\u0027:\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case \u0027\u003e\u0027:\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }\n        }",
    "begin_line": 246,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#285",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.anythingElse(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "private void anythingElse(Tokeniser t, CharacterReader r) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            t.transition(Rcdata);\n        }",
    "begin_line": 285,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#291",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(RawtextEndTagOpen);\n            } else {\n                t.emit(\u0027\u003c\u0027);\n                t.transition(Rawtext);\n            }\n        }",
    "begin_line": 291,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#302",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.transition(RawtextEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(Rawtext);\n            }\n        }",
    "begin_line": 302,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#313",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name);\n                return;\n            }\n\n            if (t.isAppropriateEndTagToken() \u0026\u0026 !r.isEmpty()) {\n                char c \u003d r.consume();\n                switch (c) {\n                    case \u0027\\t\u0027:\n                    case \u0027\\n\u0027:\n                    case \u0027\\r\u0027:\n                    case \u0027\\f\u0027:\n                    case \u0027 \u0027:\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case \u0027/\u0027:\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case \u0027\u003e\u0027:\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }\n            } else\n                anythingElse(t, r);\n        }",
    "begin_line": 313,
    "end_line": 344,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#346",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.anythingElse(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "private void anythingElse(Tokeniser t, CharacterReader r) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            t.transition(Rawtext);\n        }",
    "begin_line": 346,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#352",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.consume()) {\n                case \u0027/\u0027:\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case \u0027!\u0027:\n                    t.emit(\"\u003c!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"\u003c\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }\n        }",
    "begin_line": 352,
    "end_line": 367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#370",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.transition(ScriptDataEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(ScriptData);\n            }\n\n        }",
    "begin_line": 370,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#382",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name);\n                return;\n            }\n\n            if (t.isAppropriateEndTagToken() \u0026\u0026 !r.isEmpty()) {\n                char c \u003d r.consume();\n                switch (c) {\n                    case \u0027\\t\u0027:\n                    case \u0027\\n\u0027:\n                    case \u0027\\r\u0027:\n                    case \u0027\\f\u0027:\n                    case \u0027 \u0027:\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case \u0027/\u0027:\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case \u0027\u003e\u0027:\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }\n            } else {\n                anythingElse(t, r);\n            }\n        }",
    "begin_line": 382,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#416",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.anythingElse(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "private void anythingElse(Tokeniser t, CharacterReader r) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            t.transition(ScriptData);\n        }",
    "begin_line": 416,
    "end_line": 419,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#422",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027-\u0027)) {\n                t.emit(\u0027-\u0027);\n                t.advanceTransition(ScriptDataEscapeStartDash);\n            } else {\n                t.transition(ScriptData);\n            }\n        }",
    "begin_line": 422,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#432",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027-\u0027)) {\n                t.emit(\u0027-\u0027);\n                t.advanceTransition(ScriptDataEscapedDashDash);\n            } else {\n                t.transition(ScriptData);\n            }\n        }",
    "begin_line": 432,
    "end_line": 439,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#442",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            switch (r.current()) {\n                case \u0027-\u0027:\n                    t.emit(\u0027-\u0027);\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027-\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n            }\n        }",
    "begin_line": 442,
    "end_line": 466,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#469",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 469,
    "end_line": 494,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#497",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 497,
    "end_line": 525,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#528",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTempBuffer();\n                t.dataBuffer.append(Character.toLowerCase(r.current()));\n                t.emit(\"\u003c\" + r.current());\n                t.advanceTransition(ScriptDataDoubleEscapeStart);\n            } else if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(ScriptDataEscapedEndTagOpen);\n            } else {\n                t.emit(\u0027\u003c\u0027);\n                t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 528,
    "end_line": 541,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#544",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.tagPending.appendTagName(Character.toLowerCase(r.current()));\n                t.dataBuffer.append(r.current());\n                t.advanceTransition(ScriptDataEscapedEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 544,
    "end_line": 554,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#557",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name);\n                return;\n            }\n\n            if (t.isAppropriateEndTagToken() \u0026\u0026 !r.isEmpty()) {\n                char c \u003d r.consume();\n                switch (c) {\n                    case \u0027\\t\u0027:\n                    case \u0027\\n\u0027:\n                    case \u0027\\r\u0027:\n                    case \u0027\\f\u0027:\n                    case \u0027 \u0027:\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case \u0027/\u0027:\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case \u0027\u003e\u0027:\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                        break;\n                }\n            } else {\n                anythingElse(t, r);\n            }\n        }",
    "begin_line": 557,
    "end_line": 590,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#592",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.anythingElse(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "private void anythingElse(Tokeniser t, CharacterReader r) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            t.transition(ScriptDataEscaped);\n        }",
    "begin_line": 592,
    "end_line": 595,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#598",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.dataBuffer.append(name.toLowerCase());\n                t.emit(name);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                case \u0027/\u0027:\n                case \u0027\u003e\u0027:\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 598,
    "end_line": 625,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#628",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.current();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027-\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n            }\n        }",
    "begin_line": 628,
    "end_line": 652,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#655",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 655,
    "end_line": 679,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#682",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 682,
    "end_line": 709,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#712",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.emit(\u0027/\u0027);\n                t.createTempBuffer();\n                t.advanceTransition(ScriptDataDoubleEscapeEnd);\n            } else {\n                t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 712,
    "end_line": 720,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#723",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.dataBuffer.append(name.toLowerCase());\n                t.emit(name);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                case \u0027/\u0027:\n                case \u0027\u003e\u0027:\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 723,
    "end_line": 750,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#754",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break; // ignore whitespace\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }\n        }",
    "begin_line": 754,
    "end_line": 794,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#798",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String name \u003d r.consumeToAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027, \u0027/\u0027, \u0027\u003d\u0027, \u0027\u003e\u0027, nullChar, \u0027\"\u0027, \u0027\\\u0027\u0027, \u0027\u003c\u0027);\n            t.tagPending.appendAttributeName(name.toLowerCase());\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(AfterAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003d\u0027:\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }\n        }",
    "begin_line": 798,
    "end_line": 836,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#839",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    // ignore\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003d\u0027:\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }\n        }",
    "begin_line": 839,
    "end_line": 881,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#884",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    // ignore\n                    break;\n                case \u0027\"\u0027:\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                case \u0027`\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }\n        }",
    "begin_line": 884,
    "end_line": 929,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#932",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAny(\u0027\"\u0027, \u0027\u0026\u0027, nullChar);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    Character ref \u003d t.consumeCharacterReference(\u0027\"\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }\n        }",
    "begin_line": 932,
    "end_line": 959,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#962",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAny(\u0027\\\u0027\u0027, \u0027\u0026\u0027, nullChar);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    Character ref \u003d t.consumeCharacterReference(\u0027\\\u0027\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }\n        }",
    "begin_line": 962,
    "end_line": 989,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#992",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027, \u0027\u0026\u0027, \u0027\u003e\u0027, nullChar, \u0027\"\u0027, \u0027\\\u0027\u0027, \u0027\u003c\u0027, \u0027\u003d\u0027, \u0027`\u0027);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027\u0026\u0027:\n                    Character ref \u003d t.consumeCharacterReference(\u0027\u003e\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                case \u0027`\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }\n\n        }",
    "begin_line": 992,
    "end_line": 1036,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1040",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }\n\n        }",
    "begin_line": 1040,
    "end_line": 1067,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1070",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.tagPending.selfClosing \u003d true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }\n        }",
    "begin_line": 1070,
    "end_line": 1086,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1089",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            // todo: handle bogus comment starting from eof. when does that trigger?\n            // rewind to capture character that lead us here\n            r.unconsume();\n            Token.Comment comment \u003d new Token.Comment();\n            comment.data.append(r.consumeTo(\u0027\u003e\u0027));\n            // todo: replace nullChar with replaceChar\n            t.emit(comment);\n            t.advanceTransition(Data);\n        }",
    "begin_line": 1089,
    "end_line": 1098,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1101",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchConsume(\"--\")) {\n                t.createCommentPending();\n                t.transition(CommentStart);\n            } else if (r.matchConsumeIgnoreCase(\"DOCTYPE\")) {\n                t.transition(Doctype);\n            } else if (r.matchConsume(\"[CDATA[\")) {\n                // todo: should actually check current namepspace, and only non-html allows cdata. until namespace\n                // is implemented properly, keep handling as cdata\n                //} else if (!t.currentNodeInHtmlNS() \u0026\u0026 r.matchConsume(\"[CDATA[\")) {\n                t.transition(CdataSection);\n            } else {\n                t.error(this);\n                t.advanceTransition(BogusComment); // advance so this character gets in bogus comment data\u0027s rewind\n            }\n        }",
    "begin_line": 1101,
    "end_line": 1116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1119",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1119,
    "end_line": 1144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1147",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1147,
    "end_line": 1172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1175",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.current();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny(\u0027-\u0027, nullChar));\n            }\n        }",
    "begin_line": 1175,
    "end_line": 1194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1197",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\u0027-\u0027).append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\u0027-\u0027).append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1197,
    "end_line": 1217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1220",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027!\u0027:\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case \u0027-\u0027:\n                    t.error(this);\n                    t.commentPending.data.append(\u0027-\u0027);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1220,
    "end_line": 1250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1253",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1253,
    "end_line": 1278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1281",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }\n        }",
    "begin_line": 1281,
    "end_line": 1302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1305",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createDoctypePending();\n                t.transition(DoctypeName);\n                return;\n            }\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }\n        }",
    "begin_line": 1305,
    "end_line": 1336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1339",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.doctypePending.name.append(name.toLowerCase());\n                return;\n            }\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }\n        }",
    "begin_line": 1339,
    "end_line": 1371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1374",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.doctypePending.forceQuirks \u003d true;\n                t.emitDoctypePending();\n                t.transition(Data);\n                return;\n            }\n            if (r.matchesAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027))\n                r.advance(); // ignore whitespace\n            else if (r.matches(\u0027\u003e\u0027)) {\n                t.emitDoctypePending();\n                t.advanceTransition(Data);\n            } else if (r.matchConsumeIgnoreCase(\"PUBLIC\")) {\n                t.transition(AfterDoctypePublicKeyword);\n            } else if (r.matchConsumeIgnoreCase(\"SYSTEM\")) {\n                t.transition(AfterDoctypeSystemKeyword);\n            } else {\n                t.error(this);\n                t.doctypePending.forceQuirks \u003d true;\n                t.advanceTransition(BogusDoctype);\n            }\n\n        }",
    "begin_line": 1374,
    "end_line": 1397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1400",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1400,
    "end_line": 1437,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1440",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\"\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1440,
    "end_line": 1474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1477",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }\n        }",
    "begin_line": 1477,
    "end_line": 1502,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1505",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }\n        }",
    "begin_line": 1505,
    "end_line": 1530,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1533",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1533,
    "end_line": 1568,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1571",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1571,
    "end_line": 1605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1608",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n            }\n        }",
    "begin_line": 1608,
    "end_line": 1645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1648",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\"\u0027:\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1648,
    "end_line": 1682,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1685",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }\n        }",
    "begin_line": 1685,
    "end_line": 1710,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1713",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }\n        }",
    "begin_line": 1713,
    "end_line": 1738,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1741",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }\n        }",
    "begin_line": 1741,
    "end_line": 1765,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1768",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }\n        }",
    "begin_line": 1768,
    "end_line": 1783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1786",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String data \u003d r.consumeTo(\"]]\u003e\");\n            t.emit(data);\n            r.matchConsume(\"]]\u003e\");\n            t.transition(Data);\n        }",
    "begin_line": 1786,
    "end_line": 1791,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1795",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "abstract void read(Tokeniser t, CharacterReader r);",
    "begin_line": 1795,
    "end_line": 1795,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.initialiseParse#23",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.initialiseParse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)",
    "snippet": "protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\n        Validate.notNull(input, \"String input must not be null\");\n        Validate.notNull(baseUri, \"BaseURI must not be null\");\n\n        doc \u003d new Document(baseUri);\n        reader \u003d new CharacterReader(input);\n        this.errors \u003d errors;\n        tokeniser \u003d new Tokeniser(reader, errors);\n        stack \u003d new DescendableLinkedList\u003cElement\u003e();\n        this.baseUri \u003d baseUri;\n    }",
    "begin_line": 23,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.parse#35",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.parse(java.lang.String, java.lang.String)",
    "snippet": "Document parse(String input, String baseUri) {\n        return parse(input, baseUri, ParseErrorList.noTracking());\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.parse#39",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.parse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)",
    "snippet": "Document parse(String input, String baseUri, ParseErrorList errors) {\n        initialiseParse(input, baseUri, errors);\n        runParser();\n        return doc;\n    }",
    "begin_line": 39,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.runParser#45",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.runParser()",
    "snippet": "protected void runParser() {\n        while (true) {\n            Token token \u003d tokeniser.read();\n            process(token);\n\n            if (token.type \u003d\u003d Token.TokenType.EOF)\n                break;\n        }\n    }",
    "begin_line": 45,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.process#55",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.process(org.jsoup.parser.Token)",
    "snippet": "protected abstract boolean process(Token token);",
    "begin_line": 55,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.currentElement#57",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.currentElement()",
    "snippet": "protected Element currentElement() {\n        return stack.getLast();\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Cleaner.Cleaner#28",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.Cleaner(org.jsoup.safety.Whitelist)",
    "snippet": "public Cleaner(Whitelist whitelist) {\n        Validate.notNull(whitelist);\n        this.whitelist \u003d whitelist;\n    }",
    "begin_line": 28,
    "end_line": 31,
    "comment": "/** \n * Create a new cleaner, that sanitizes documents using the supplied whitelist.\n * @param whitelist white-list to clean with\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Cleaner.clean#39",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.clean(org.jsoup.nodes.Document)",
    "snippet": "public Document clean(Document dirtyDocument) {\n        Validate.notNull(dirtyDocument);\n\n        Document clean \u003d Document.createShell(dirtyDocument.baseUri());\n            copySafeNodes(dirtyDocument.body(), clean.body());\n\n        return clean;\n    }",
    "begin_line": 39,
    "end_line": 46,
    "comment": "/** \n * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist. The original document is not modified. Only elements from the dirt document\u0027s \u003ccode\u003ebody\u003c/code\u003e are used.\n * @param dirtyDocument Untrusted base document to clean.\n * @return cleaned document.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Cleaner.isValid#58",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.isValid(org.jsoup.nodes.Document)",
    "snippet": "public boolean isValid(Document dirtyDocument) {\n        Validate.notNull(dirtyDocument);\n\n        Document clean \u003d Document.createShell(dirtyDocument.baseUri());\n        int numDiscarded \u003d copySafeNodes(dirtyDocument.body(), clean.body());\n        return numDiscarded \u003d\u003d 0;\n    }",
    "begin_line": 58,
    "end_line": 64,
    "comment": "/** \n * Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes in the input HTML are allowed by the whitelist. \u003cp/\u003e This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully using the  {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the documentto ensure enforced attributes are set correctly, and that the output is tidied.\n * @param dirtyDocument document to test\n * @return true if no tags or attributes need to be removed; false if they do\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Cleaner.copySafeNodes#72",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.copySafeNodes(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "private int copySafeNodes(Element source, Element dest) {\n        List\u003cNode\u003e sourceChildren \u003d source.childNodes();\n        int numDiscarded \u003d 0;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl \u003d (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta \u003d createSafeElement(sourceEl);\n                    Element destChild \u003d meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded +\u003d meta.numAttribsDiscarded;\n                    numDiscarded +\u003d copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded +\u003d copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText \u003d (TextNode) sourceChild;\n                TextNode destText \u003d new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don\u0027t care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
    "begin_line": 72,
    "end_line": 98,
    "comment": "/** \n * Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n * @param source source of HTML\n * @param dest destination element to copy into\n * @return number of discarded elements (that were considered unsafe)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Cleaner.createSafeElement#100",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.createSafeElement(org.jsoup.nodes.Element)",
    "snippet": "private ElementMeta createSafeElement(Element sourceEl) {\n        String sourceTag \u003d sourceEl.tagName();\n        Attributes destAttrs \u003d new Attributes();\n        Element dest \u003d new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs);\n        int numDiscarded \u003d 0;\n\n        Attributes sourceAttrs \u003d sourceEl.attributes();\n        for (Attribute sourceAttr : sourceAttrs) {\n            if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr))\n                destAttrs.put(sourceAttr);\n            else\n                numDiscarded++;\n        }\n        Attributes enforcedAttrs \u003d whitelist.getEnforcedAttributes(sourceTag);\n        destAttrs.addAll(enforcedAttrs);\n\n        return new ElementMeta(dest, numDiscarded);\n    }",
    "begin_line": 100,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ElementMeta.ElementMeta#123",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Cleaner.java",
    "class_name": "org.jsoup.safety.Cleaner",
    "signature": "org.jsoup.safety.Cleaner.ElementMeta(org.jsoup.nodes.Element, int)",
    "snippet": " ElementMeta(Element el, int numAttribsDiscarded) {\n            this.el \u003d el;\n            this.numAttribsDiscarded \u003d numAttribsDiscarded;\n        }",
    "begin_line": 123,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.none#62",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.none()",
    "snippet": "public static Whitelist none() {\n        return new Whitelist();\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * This whitelist allows only text nodes: all HTML will be stripped.\n * @return whitelist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.simpleText#72",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.simpleText()",
    "snippet": "public static Whitelist simpleText() {\n        return new Whitelist()\n                .addTags(\"b\", \"em\", \"i\", \"strong\", \"u\")\n                ;\n    }",
    "begin_line": 72,
    "end_line": 76,
    "comment": "/** \n * This whitelist allows only simple text formatting: \u003ccode\u003eb, em, i, strong, u\u003c/code\u003e. All other HTML (tags and attributes) will be removed.\n * @return whitelist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.basic#89",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.basic()",
    "snippet": "public static Whitelist basic() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n                        \"sup\", \"u\", \"ul\")\n\n                .addAttributes(\"a\", \"href\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"q\", \"cite\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n\n                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n                ;\n\n    }",
    "begin_line": 89,
    "end_line": 107,
    "comment": "/** \n * This whitelist allows a fuller range of text nodes: \u003ccode\u003ea, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, strike, strong, sub, sup, u, ul\u003c/code\u003e, and appropriate attributes. \u003cp/\u003e Links (\u003ccode\u003ea\u003c/code\u003e elements) can point to \u003ccode\u003ehttp, https, ftp, mailto\u003c/code\u003e, and have an enforced \u003ccode\u003erel\u003dnofollow\u003c/code\u003e attribute. \u003cp/\u003e Does not allow images.\n * @return whitelist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.basicWithImages#115",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.basicWithImages()",
    "snippet": "public static Whitelist basicWithImages() {\n        return basic()\n                .addTags(\"img\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                ;\n    }",
    "begin_line": 115,
    "end_line": 121,
    "comment": "/** \n * This whitelist allows the same text tags as  {@link #basic}, and also allows \u003ccode\u003eimg\u003c/code\u003e tags, with appropriate attributes, with \u003ccode\u003esrc\u003c/code\u003e pointing to \u003ccode\u003ehttp\u003c/code\u003e or \u003ccode\u003ehttps\u003c/code\u003e.\n * @return whitelist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.relaxed#132",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.relaxed()",
    "snippet": "public static Whitelist relaxed() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                        \"ul\")\n\n                .addAttributes(\"a\", \"href\", \"title\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"col\", \"span\", \"width\")\n                .addAttributes(\"colgroup\", \"span\", \"width\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addAttributes(\"ol\", \"start\", \"type\")\n                .addAttributes(\"q\", \"cite\")\n                .addAttributes(\"table\", \"summary\", \"width\")\n                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n                .addAttributes(\n                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n                        \"width\")\n                .addAttributes(\"ul\", \"type\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                ;\n    }",
    "begin_line": 132,
    "end_line": 160,
    "comment": "/** \n * This whitelist allows a full range of text and structural body HTML: \u003ccode\u003ea, b, blockquote, br, caption, cite, code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul\u003c/code\u003e \u003cp/\u003e Links do not have an enforced \u003ccode\u003erel\u003dnofollow\u003c/code\u003e attribute, but you can add that if desired.\n * @return whitelist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.Whitelist#170",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.Whitelist()",
    "snippet": "public Whitelist() {\n        tagNames \u003d new HashSet\u003cTagName\u003e();\n        attributes \u003d new HashMap\u003cTagName, Set\u003cAttributeKey\u003e\u003e();\n        enforcedAttributes \u003d new HashMap\u003cTagName, Map\u003cAttributeKey, AttributeValue\u003e\u003e();\n        protocols \u003d new HashMap\u003cTagName, Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e\u003e();\n        preserveRelativeLinks \u003d false;\n    }",
    "begin_line": 170,
    "end_line": 176,
    "comment": "/** \n * Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.\n * @see #basic()\n * @see #basicWithImages()\n * @see #simpleText()\n * @see #relaxed()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.addTags#184",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.addTags(java.lang.String)",
    "snippet": "public Whitelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }",
    "begin_line": 184,
    "end_line": 192,
    "comment": "/** \n * Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)\n * @param tags tag names to allow\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.addAttributes#207",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.addAttributes(java.lang.String, java.lang.String)",
    "snippet": "public Whitelist addAttributes(String tag, String... keys) {\n        Validate.notEmpty(tag);\n        Validate.notNull(keys);\n        Validate.isTrue(keys.length \u003e 0, \"No attributes supplied.\");\n\n        TagName tagName \u003d TagName.valueOf(tag);\n        if (!tagNames.contains(tagName))\n            tagNames.add(tagName);\n        Set\u003cAttributeKey\u003e attributeSet \u003d new HashSet\u003cAttributeKey\u003e();\n        for (String key : keys) {\n            Validate.notEmpty(key);\n            attributeSet.add(AttributeKey.valueOf(key));\n        }\n        if (attributes.containsKey(tagName)) {\n            Set\u003cAttributeKey\u003e currentSet \u003d attributes.get(tagName);\n            currentSet.addAll(attributeSet);\n        } else {\n            attributes.put(tagName, attributeSet);\n        }\n        return this;\n    }",
    "begin_line": 207,
    "end_line": 227,
    "comment": "/** \n * Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) \u003cp/\u003e E.g.: \u003ccode\u003eaddAttributes(\"a\", \"href\", \"class\")\u003c/code\u003e allows \u003ccode\u003ehref\u003c/code\u003e and \u003ccode\u003eclass\u003c/code\u003e attributes on \u003ccode\u003ea\u003c/code\u003e tags. \u003cp/\u003e To make an attribute valid for \u003cb\u003eall tags\u003c/b\u003e, use the pseudo tag \u003ccode\u003e:all\u003c/code\u003e, e.g. \u003ccode\u003eaddAttributes(\":all\", \"class\")\u003c/code\u003e.\n * @param tag  The tag the attributes are for. The tag will be added to the allowed tag list if necessary.\n * @param keys List of valid attributes for the tag\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.addEnforcedAttribute#241",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notEmpty(value);\n\n        TagName tagName \u003d TagName.valueOf(tag);\n        if (!tagNames.contains(tagName))\n            tagNames.add(tagName);\n        AttributeKey attrKey \u003d AttributeKey.valueOf(key);\n        AttributeValue attrVal \u003d AttributeValue.valueOf(value);\n\n        if (enforcedAttributes.containsKey(tagName)) {\n            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n        } else {\n            Map\u003cAttributeKey, AttributeValue\u003e attrMap \u003d new HashMap\u003cAttributeKey, AttributeValue\u003e();\n            attrMap.put(attrKey, attrVal);\n            enforcedAttributes.put(tagName, attrMap);\n        }\n        return this;\n    }",
    "begin_line": 241,
    "end_line": 260,
    "comment": "/** \n * Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden. \u003cp/\u003e E.g.: \u003ccode\u003eaddEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\u003c/code\u003e will make all \u003ccode\u003ea\u003c/code\u003e tags output as \u003ccode\u003e\u0026lt;a href\u003d\"...\" rel\u003d\"nofollow\"\u003e\u003c/code\u003e\n * @param tag   The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.\n * @param key   The attribute key\n * @param value The enforced attribute value\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.preserveRelativeLinks#276",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.preserveRelativeLinks(boolean)",
    "snippet": "public Whitelist preserveRelativeLinks(boolean preserve) {\n        preserveRelativeLinks \u003d preserve;\n        return this;\n    }",
    "begin_line": 276,
    "end_line": 279,
    "comment": "/** \n * Configure this Whitelist to preserve relative links in an element\u0027s URL attribute, or convert them to absolute links. By default, this is \u003cb\u003efalse\u003c/b\u003e: URLs will be  made absolute (e.g. start with an allowed protocol, like e.g.  {@code http://}. \u003cp /\u003e Note that when handling relative links, the input document must have an appropriate  {@code base URI} set whenparsing, so that the link\u0027s protocol can be confirmed. Regardless of the setting of the  {@code preserve relativelinks} option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attributewill be removed.\n * @param preserve {@code true} to allow relative links, {@code false} (default) to deny\n * @return this Whitelist, for chaining.\n * @see #addProtocols\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.addProtocols#292",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.addProtocols(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public Whitelist addProtocols(String tag, String key, String... protocols) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notNull(protocols);\n\n        TagName tagName \u003d TagName.valueOf(tag);\n        AttributeKey attrKey \u003d AttributeKey.valueOf(key);\n        Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e attrMap;\n        Set\u003cProtocol\u003e protSet;\n\n        if (this.protocols.containsKey(tagName)) {\n            attrMap \u003d this.protocols.get(tagName);\n        } else {\n            attrMap \u003d new HashMap\u003cAttributeKey, Set\u003cProtocol\u003e\u003e();\n            this.protocols.put(tagName, attrMap);\n        }\n        if (attrMap.containsKey(attrKey)) {\n            protSet \u003d attrMap.get(attrKey);\n        } else {\n            protSet \u003d new HashSet\u003cProtocol\u003e();\n            attrMap.put(attrKey, protSet);\n        }\n        for (String protocol : protocols) {\n            Validate.notEmpty(protocol);\n            Protocol prot \u003d Protocol.valueOf(protocol);\n            protSet.add(prot);\n        }\n        return this;\n    }",
    "begin_line": 292,
    "end_line": 320,
    "comment": "/** \n * Add allowed URL protocols for an element\u0027s URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. \u003cp/\u003e E.g.: \u003ccode\u003eaddProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")\u003c/code\u003e\n * @param tag       Tag the URL protocol is for\n * @param key       Attribute key\n * @param protocols List of valid protocols\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.isSafeTag#322",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.isSafeTag(java.lang.String)",
    "snippet": "boolean isSafeTag(String tag) {\n        return tagNames.contains(TagName.valueOf(tag));\n    }",
    "begin_line": 322,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.isSafeAttribute#326",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.isSafeAttribute(java.lang.String, org.jsoup.nodes.Element, org.jsoup.nodes.Attribute)",
    "snippet": "boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n        TagName tag \u003d TagName.valueOf(tagName);\n        AttributeKey key \u003d AttributeKey.valueOf(attr.getKey());\n\n        if (attributes.containsKey(tag)) {\n            if (attributes.get(tag).contains(key)) {\n                if (protocols.containsKey(tag)) {\n                    Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e attrProts \u003d protocols.get(tag);\n                    // ok if not defined protocol; otherwise test\n                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                } else { // attribute found, no protocols defined, so OK\n                    return true;\n                }\n            }\n        }\n        // no attributes defined for tag, try :all tag\n        return !tagName.equals(\":all\") \u0026\u0026 isSafeAttribute(\":all\", el, attr);\n    }",
    "begin_line": 326,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.testValidProtocol#345",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set\u003corg.jsoup.safety.Whitelist.Protocol\u003e)",
    "snippet": "private boolean testValidProtocol(Element el, Attribute attr, Set\u003cProtocol\u003e protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value \u003d el.absUrl(attr.getKey());\n        if (value.length() \u003d\u003d 0)\n            value \u003d attr.getValue(); // if it could not be made abs, run as-is to allow custom unknown protocols\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot \u003d protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 345,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Whitelist.getEnforcedAttributes#363",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.getEnforcedAttributes(java.lang.String)",
    "snippet": "Attributes getEnforcedAttributes(String tagName) {\n        Attributes attrs \u003d new Attributes();\n        TagName tag \u003d TagName.valueOf(tagName);\n        if (enforcedAttributes.containsKey(tag)) {\n            Map\u003cAttributeKey, AttributeValue\u003e keyVals \u003d enforcedAttributes.get(tag);\n            for (Map.Entry\u003cAttributeKey, AttributeValue\u003e entry : keyVals.entrySet()) {\n                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n            }\n        }\n        return attrs;\n    }",
    "begin_line": 363,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TagName.TagName#378",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.TagName(java.lang.String)",
    "snippet": " TagName(String value) {\n            super(value);\n        }",
    "begin_line": 378,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TagName.valueOf#382",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.valueOf(java.lang.String)",
    "snippet": "static TagName valueOf(String value) {\n            return new TagName(value);\n        }",
    "begin_line": 382,
    "end_line": 384,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeKey.AttributeKey#388",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.AttributeKey(java.lang.String)",
    "snippet": " AttributeKey(String value) {\n            super(value);\n        }",
    "begin_line": 388,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeKey.valueOf#392",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.valueOf(java.lang.String)",
    "snippet": "static AttributeKey valueOf(String value) {\n            return new AttributeKey(value);\n        }",
    "begin_line": 392,
    "end_line": 394,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeValue.AttributeValue#398",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.AttributeValue(java.lang.String)",
    "snippet": " AttributeValue(String value) {\n            super(value);\n        }",
    "begin_line": 398,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeValue.valueOf#402",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.valueOf(java.lang.String)",
    "snippet": "static AttributeValue valueOf(String value) {\n            return new AttributeValue(value);\n        }",
    "begin_line": 402,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Protocol.Protocol#408",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.Protocol(java.lang.String)",
    "snippet": " Protocol(String value) {\n            super(value);\n        }",
    "begin_line": 408,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Protocol.valueOf#412",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.valueOf(java.lang.String)",
    "snippet": "static Protocol valueOf(String value) {\n            return new Protocol(value);\n        }",
    "begin_line": 412,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypedValue.TypedValue#420",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.TypedValue(java.lang.String)",
    "snippet": " TypedValue(String value) {\n            Validate.notNull(value);\n            this.value \u003d value;\n        }",
    "begin_line": 420,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypedValue.hashCode#426",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.hashCode()",
    "snippet": "@Override\n        public int hashCode() {\n            final int prime \u003d 31;\n            int result \u003d 1;\n            result \u003d prime * result + ((value \u003d\u003d null) ? 0 : value.hashCode());\n            return result;\n        }",
    "begin_line": 426,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypedValue.equals#434",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(Object obj) {\n            if (this \u003d\u003d obj) return true;\n            if (obj \u003d\u003d null) return false;\n            if (getClass() !\u003d obj.getClass()) return false;\n            TypedValue other \u003d (TypedValue) obj;\n            if (value \u003d\u003d null) {\n                if (other.value !\u003d null) return false;\n            } else if (!value.equals(other.value)) return false;\n            return true;\n        }",
    "begin_line": 434,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypedValue.toString#446",
    "is_bug": true,
    "src_path": "org/jsoup/safety/Whitelist.java",
    "class_name": "org.jsoup.safety.Whitelist",
    "signature": "org.jsoup.safety.Whitelist.toString()",
    "snippet": "@Override\n        public String toString() {\n            return value;\n        }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]