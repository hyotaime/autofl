[
  {
    "name": "Jsoup.Jsoup#20",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.Jsoup()",
    "snippet": "private Jsoup() {}",
    "begin_line": 20,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#30",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        return Parser.parse(html, baseUri);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "/** \n * Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.\n * @param html    HTML to parse\n * @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occurbefore the HTML declares a  {@code \u003cbase href\u003e} tag.\n * @return sane HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#44",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
    "snippet": "public static Document parse(String html, String baseUri, Parser parser) {\n        return parser.parseInput(html, baseUri);\n    }",
    "begin_line": 44,
    "end_line": 46,
    "comment": "/** \n * Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser.\n * @param html    HTML to parse\n * @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occurbefore the HTML declares a  {@code \u003cbase href\u003e} tag.\n * @param parser alternate {@link Parser#xmlParser() parser} to use.\n * @return sane HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#57",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String)",
    "snippet": "public static Document parse(String html) {\n        return Parser.parse(html, \"\");\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a {@code \u003cbase href\u003e} tag.\n * @param html HTML to parse\n * @return sane HTML\n * @see #parse(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.connect#72",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.connect(java.lang.String)",
    "snippet": "public static Connection connect(String url) {\n        return HttpConnection.connect(url);\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Creates a new  {@link Connection} to a URL. Use to fetch and parse a HTML page.\u003cp\u003e Use examples: \u003cul\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").userAgent(\"Mozilla\").data(\"name\", \"jsoup\").get();\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").cookie(\"auth\", \"token\").post();\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\n * @param url URL to connect to. The protocol must be {@code http} or {@code https}.\n * @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#87",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "/** \n * Parse the contents of a file as HTML.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#102",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName) throws IOException {\n        return DataUtil.load(in, charsetName, in.getAbsolutePath());\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n * @see #parse(File,String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#117",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Read an input stream, and parse it to a Document.\n * @param in          input stream to read. Make sure to close it after parsing.\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#134",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
    "snippet": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri, parser);\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser.\n * @param in          input stream to read. Make sure to close it after parsing.\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @param parser alternate {@link Parser#xmlParser() parser} to use.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#147",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        return Parser.parseBodyFragment(bodyHtml, baseUri);\n    }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @param baseUri  URL to resolve relative URLs against.\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#159",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml) {\n        return Parser.parseBodyFragment(bodyHtml, \"\");\n    }",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#180",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.net.URL, int)",
    "snippet": "public static Document parse(URL url, int timeoutMillis) throws IOException {\n        Connection con \u003d HttpConnection.connect(url);\n        con.timeout(timeoutMillis);\n        return con.get();\n    }",
    "begin_line": 180,
    "end_line": 184,
    "comment": "/** \n * Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use  {@link #connect(String)} instead.\u003cp\u003e The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to  {@code UTF-8}.\n * @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.\n * @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n * @return The parsed HTML.\n * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored\n * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored\n * @throws java.net.SocketTimeoutException if the connection times out\n * @throws IOException if a connection or read error occurs\n * @see #connect(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#197",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        Document clean \u003d cleaner.clean(dirty);\n        return clean.body().html();\n    }",
    "begin_line": 197,
    "end_line": 202,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HTML (body fragment)\n * @param baseUri   URL to resolve relative URLs against\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#214",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, Whitelist whitelist) {\n        return clean(bodyHtml, \"\", whitelist);\n    }",
    "begin_line": 214,
    "end_line": 216,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HTML (body fragment)\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#232",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        Document clean \u003d cleaner.clean(dirty);\n        clean.outputSettings(outputSettings);\n        return clean.body().html();\n    }",
    "begin_line": 232,
    "end_line": 238,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. \u003cp\u003eThe HTML is treated as a body fragment; it\u0027s expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use  {@link Cleaner#clean(Document)} instead, and addstructural tags (\u003ccode\u003ehtml, head, body\u003c/code\u003e etc) to the whitelist.\n * @param bodyHtml input untrusted HTML (body fragment)\n * @param baseUri URL to resolve relative URLs against\n * @param whitelist white-list of permitted HTML elements\n * @param outputSettings document output settings; use to control pretty-printing and entity escape modes\n * @return safe HTML (body fragment)\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.isValid#249",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.isValid(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n        return new Cleaner(whitelist).isValidBodyHtml(bodyHtml);\n    }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "/** \n * Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. \u003cp\u003eThe input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. \u003cp\u003eAssumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)\n * @param bodyHtml HTML to test\n * @param whitelist whitelist to test against\n * @return true if no tags or attributes were removed; false otherwise\n * @see #clean(String,org.jsoup.safety.Whitelist) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.ChangeNotifyingArrayList#10",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.ChangeNotifyingArrayList(int)",
    "snippet": "public ChangeNotifyingArrayList(int initialCapacity) {\n        super(initialCapacity);\n    }",
    "begin_line": 10,
    "end_line": 12,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.onContentsChanged#14",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.onContentsChanged()",
    "snippet": "public abstract void onContentsChanged();",
    "begin_line": 14,
    "end_line": 14,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.set#17",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.set(int, E)",
    "snippet": "@Override\n    public E set(int index, E element) {\n        onContentsChanged();\n        return super.set(index, element);\n    }",
    "begin_line": 17,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.add#23",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.add(E)",
    "snippet": "@Override\n    public boolean add(E e) {\n        onContentsChanged();\n        return super.add(e);\n    }",
    "begin_line": 23,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.add#29",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.add(int, E)",
    "snippet": "@Override\n    public void add(int index, E element) {\n        onContentsChanged();\n        super.add(index, element);\n    }",
    "begin_line": 29,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.remove#35",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.remove(int)",
    "snippet": "@Override\n    public E remove(int index) {\n        onContentsChanged();\n        return super.remove(index);\n    }",
    "begin_line": 35,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.remove#41",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.remove(java.lang.Object)",
    "snippet": "@Override\n    public boolean remove(Object o) {\n        onContentsChanged();\n        return super.remove(o);\n    }",
    "begin_line": 41,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.clear#47",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.clear()",
    "snippet": "@Override\n    public void clear() {\n        onContentsChanged();\n        super.clear();\n    }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.addAll#53",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.addAll(java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(Collection\u003c? extends E\u003e c) {\n        onContentsChanged();\n        return super.addAll(c);\n    }",
    "begin_line": 53,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.addAll#59",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.addAll(int, java.util.Collection\u003c? extends E\u003e)",
    "snippet": "@Override\n    public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n        onContentsChanged();\n        return super.addAll(index, c);\n    }",
    "begin_line": 59,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.removeRange#65",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.removeRange(int, int)",
    "snippet": "@Override\n    protected void removeRange(int fromIndex, int toIndex) {\n        onContentsChanged();\n        super.removeRange(fromIndex, toIndex);\n    }",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.removeAll#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.removeAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean removeAll(Collection\u003c?\u003e c) {\n        onContentsChanged();\n        return super.removeAll(c);\n    }",
    "begin_line": 71,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChangeNotifyingArrayList.retainAll#77",
    "is_bug": true,
    "src_path": "org/jsoup/helper/ChangeNotifyingArrayList.java",
    "class_name": "org.jsoup.helper.ChangeNotifyingArrayList",
    "signature": "org.jsoup.helper.ChangeNotifyingArrayList.retainAll(java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n    public boolean retainAll(Collection\u003c?\u003e c) {\n        onContentsChanged();\n        return super.retainAll(c);\n    }",
    "begin_line": 77,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#24",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Collection, java.lang.String)",
    "snippet": "public static String join(Collection strings, String sep) {\n        return join(strings.iterator(), sep);\n    }",
    "begin_line": 24,
    "end_line": 26,
    "comment": "/** \n * Join a collection of strings by a separator\n * @param strings collection of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#34",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Iterator, java.lang.String)",
    "snippet": "public static String join(Iterator strings, String sep) {\n        if (!strings.hasNext())\n            return \"\";\n\n        String start \u003d strings.next().toString();\n        if (!strings.hasNext()) // only one, avoid builder\n            return start;\n\n        StringBuilder sb \u003d new StringBuilder(64).append(start);\n        while (strings.hasNext()) {\n            sb.append(sep);\n            sb.append(strings.next());\n        }\n        return sb.toString();\n    }",
    "begin_line": 34,
    "end_line": 48,
    "comment": "/** \n * Join a collection of strings by a separator\n * @param strings iterator of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.padding#55",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.padding(int)",
    "snippet": "public static String padding(int width) {\n        if (width \u003c 0)\n            throw new IllegalArgumentException(\"width must be \u003e 0\");\n\n        if (width \u003c padding.length)\n            return padding[width];\n        char[] out \u003d new char[width];\n        for (int i \u003d 0; i \u003c width; i++)\n            out[i] \u003d \u0027 \u0027;\n        return String.valueOf(out);\n    }",
    "begin_line": 55,
    "end_line": 65,
    "comment": "/** \n * Returns space padding\n * @param width amount of padding desired\n * @return string of spaces * width\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isBlank#72",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isBlank(java.lang.String)",
    "snippet": "public static boolean isBlank(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return true;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!StringUtil.isWhitespace(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 72,
    "end_line": 82,
    "comment": "/** \n * Tests if a string is blank: null, empty, or only whitespace (\" \", \\r\\n, \\t, etc)\n * @param string string to test\n * @return if string is blank\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isNumeric#89",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isNumeric(java.lang.String)",
    "snippet": "public static boolean isNumeric(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return false;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!Character.isDigit(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 89,
    "end_line": 99,
    "comment": "/** \n * Tests if a string is numeric, i.e. contains only digit characters\n * @param string string to test\n * @return true if only digit chars, false if empty or null or contains non-digit chars\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isWhitespace#107",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isWhitespace(int)",
    "snippet": "public static boolean isWhitespace(int c){\n        return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027;\n    }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Tests if a code point is \"whitespace\" as defined in the HTML spec. Used for output HTML.\n * @param c code point to test\n * @return true if code point is whitespace, false otherwise\n * @see #isActuallyWhitespace(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isActuallyWhitespace#116",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isActuallyWhitespace(int)",
    "snippet": "public static boolean isActuallyWhitespace(int c){\n        return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d 160;\n        // 160 is \u0026nbsp; (non-breaking space). Not in the spec but expected.\n    }",
    "begin_line": 116,
    "end_line": 119,
    "comment": "/** \n * Tests if a code point is \"whitespace\" as defined by what it looks like. Used for Element.text etc.\n * @param c code point to test\n * @return true if code point is whitespace, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.normaliseWhitespace#127",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.normaliseWhitespace(java.lang.String)",
    "snippet": "public static String normaliseWhitespace(String string) {\n        StringBuilder sb \u003d StringUtil.stringBuilder();\n        appendNormalisedWhitespace(sb, string, false);\n        return sb.toString();\n    }",
    "begin_line": 127,
    "end_line": 131,
    "comment": "/** \n * Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters (e.g. newline, tab) convert to a simple space\n * @param string content to normalise\n * @return normalised string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.appendNormalisedWhitespace#139",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.appendNormalisedWhitespace(java.lang.StringBuilder, java.lang.String, boolean)",
    "snippet": "public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {\n        boolean lastWasWhite \u003d false;\n        boolean reachedNonWhite \u003d false;\n\n        int len \u003d string.length();\n        int c;\n        for (int i \u003d 0; i \u003c len; i+\u003d Character.charCount(c)) {\n            c \u003d string.codePointAt(i);\n            if (isActuallyWhitespace(c)) {\n                if ((stripLeading \u0026\u0026 !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(\u0027 \u0027);\n                lastWasWhite \u003d true;\n            }\n            else {\n                accum.appendCodePoint(c);\n                lastWasWhite \u003d false;\n                reachedNonWhite \u003d true;\n            }\n        }\n    }",
    "begin_line": 139,
    "end_line": 159,
    "comment": "/** \n * After normalizing the whitespace within a string, appends it to a string builder.\n * @param accum builder to append to\n * @param string string to normalize whitespace within\n * @param stripLeading set to true if you wish to remove any leading whitespace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.in#161",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.in(java.lang.String, java.lang.String)",
    "snippet": "public static boolean in(String needle, String... haystack) {\n        for (String hay : haystack) {\n            if (hay.equals(needle))\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 161,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.inSorted#169",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.inSorted(java.lang.String, java.lang.String[])",
    "snippet": "public static boolean inSorted(String needle, String[] haystack) {\n        return Arrays.binarySearch(haystack, needle) \u003e\u003d 0;\n    }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.resolve#180",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.resolve(java.net.URL, java.lang.String)",
    "snippet": "public static URL resolve(URL base, String relUrl) throws MalformedURLException {\n        // workaround: java resolves \u0027//path/file + ?foo\u0027 to \u0027//path/?foo\u0027, not \u0027//path/file?foo\u0027 as desired\n        if (relUrl.startsWith(\"?\"))\n            relUrl \u003d base.getPath() + relUrl;\n        // workaround: //example.com + ./foo \u003d //example.com/./foo, not //example.com/foo\n        if (relUrl.indexOf(\u0027.\u0027) \u003d\u003d 0 \u0026\u0026 base.getFile().indexOf(\u0027/\u0027) !\u003d 0) {\n            base \u003d new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile());\n        }\n        return new URL(base, relUrl);\n    }",
    "begin_line": 180,
    "end_line": 189,
    "comment": "/** \n * Create a new absolute URL, from a provided existing absolute URL and a relative URL component.\n * @param base the existing absolute base URL\n * @param relUrl the relative URL to resolve. (If it\u0027s already absolute, it will be returned)\n * @return the resolved absolute URL\n * @throws MalformedURLException if an error occurred generating the URL\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.resolve#197",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.resolve(java.lang.String, java.lang.String)",
    "snippet": "public static String resolve(final String baseUrl, final String relUrl) {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUrl);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute/rel may be abs on its own, so try that\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            return resolve(base, relUrl).toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }",
    "begin_line": 197,
    "end_line": 211,
    "comment": "/** \n * Create a new absolute URL, from a provided existing absolute URL and a relative URL component.\n * @param baseUrl the existing absolute base URL\n * @param relUrl the relative URL to resolve. (If it\u0027s already absolute, it will be returned)\n * @return an absolute URL if one was able to be generated, or the empty string if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.stringBuilder#218",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.stringBuilder()",
    "snippet": "public static StringBuilder stringBuilder() {\n        StringBuilder sb \u003d stringLocal.get();\n        if (sb.length() \u003e MaxCachedBuilderSize) {\n            sb \u003d new StringBuilder(MaxCachedBuilderSize);\n            stringLocal.set(sb);\n        } else {\n            sb.delete(0, sb.length());\n        }\n        return sb;\n\n    }",
    "begin_line": 218,
    "end_line": 228,
    "comment": "/** \n * Maintains a cached StringBuilder, to minimize new StringBuilder GCs. Prevents it from growing to big per thread. Care must be taken to not grab more than one in the same stack (not locked or mutexed or anything).\n * @return an empty StringBuilder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.initialValue#233",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.initialValue()",
    "snippet": "@Override\n        protected StringBuilder initialValue() {\n            return new StringBuilder(MaxCachedBuilderSize);\n        }",
    "begin_line": 233,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.Validate#8",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.Validate()",
    "snippet": "private Validate() {}",
    "begin_line": 8,
    "end_line": 8,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#14",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object)",
    "snippet": "public static void notNull(Object obj) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(\"Object must not be null\");\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#24",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object, java.lang.String)",
    "snippet": "public static void notNull(Object obj, String msg) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#33",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean)",
    "snippet": "public static void isTrue(boolean val) {\n        if (!val)\n            throw new IllegalArgumentException(\"Must be true\");\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#43",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean, java.lang.String)",
    "snippet": "public static void isTrue(boolean val, String msg) {\n        if (!val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 43,
    "end_line": 46,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#52",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean)",
    "snippet": "public static void isFalse(boolean val) {\n        if (val)\n            throw new IllegalArgumentException(\"Must be false\");\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#62",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean, java.lang.String)",
    "snippet": "public static void isFalse(boolean val, String msg) {\n        if (val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[])",
    "snippet": "public static void noNullElements(Object[] objects) {\n        noNullElements(objects, \"Array must not contain any null objects\");\n    }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#80",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[], java.lang.String)",
    "snippet": "public static void noNullElements(Object[] objects, String msg) {\n        for (Object obj : objects)\n            if (obj \u003d\u003d null)\n                throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 80,
    "end_line": 84,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#90",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String)",
    "snippet": "public static void notEmpty(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(\"String must not be empty\");\n    }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#100",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String, java.lang.String)",
    "snippet": "public static void notEmpty(String string, String msg) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.fail#109",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.fail(java.lang.String)",
    "snippet": "public static void fail(String msg) {\n        throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Cause a failure.\n * @param msg message to output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Normalizer.lowerCase#10",
    "is_bug": true,
    "src_path": "org/jsoup/internal/Normalizer.java",
    "class_name": "org.jsoup.internal.Normalizer",
    "signature": "org.jsoup.internal.Normalizer.lowerCase(java.lang.String)",
    "snippet": "public static String lowerCase(final String input) {\n        return input.toLowerCase(Locale.ENGLISH);\n    }",
    "begin_line": 10,
    "end_line": 12,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Normalizer.normalize#14",
    "is_bug": true,
    "src_path": "org/jsoup/internal/Normalizer.java",
    "class_name": "org.jsoup.internal.Normalizer",
    "signature": "org.jsoup.internal.Normalizer.normalize(java.lang.String)",
    "snippet": "public static String normalize(final String input) {\n        return lowerCase(input).trim();\n    }",
    "begin_line": 14,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.checkCapacity#47",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.checkCapacity(int)",
    "snippet": "private void checkCapacity(int minNewSize) {\n        Validate.isTrue(minNewSize \u003e\u003d size);\n        int curSize \u003d keys.length;\n        if (curSize \u003e\u003d minNewSize)\n            return;\n\n        int newSize \u003d curSize \u003e\u003d InitialCapacity ? size * GrowthFactor : InitialCapacity;\n        if (minNewSize \u003e newSize)\n            newSize \u003d minNewSize;\n\n        keys \u003d copyOf(keys, newSize);\n        vals \u003d copyOf(vals, newSize);\n    }",
    "begin_line": 47,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.copyOf#62",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.copyOf(java.lang.String[], int)",
    "snippet": "private static String[] copyOf(String[] orig, int size) {\n        final String[] copy \u003d new String[size];\n        System.arraycopy(orig, 0, copy, 0,\n                Math.min(orig.length, size));\n        return copy;\n    }",
    "begin_line": 62,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.indexOfKey#69",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.indexOfKey(java.lang.String)",
    "snippet": "int indexOfKey(String key) {\n        Validate.notNull(key);\n        for (int i \u003d 0; i \u003c size; i++) {\n            if (key.equals(keys[i]))\n                return i;\n        }\n        return NotFound;\n    }",
    "begin_line": 69,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.indexOfKeyIgnoreCase#78",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.indexOfKeyIgnoreCase(java.lang.String)",
    "snippet": "private int indexOfKeyIgnoreCase(String key) {\n        Validate.notNull(key);\n        for (int i \u003d 0; i \u003c size; i++) {\n            if (key.equalsIgnoreCase(keys[i]))\n                return i;\n        }\n        return NotFound;\n    }",
    "begin_line": 78,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.checkNotNull#88",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.checkNotNull(java.lang.String)",
    "snippet": "static String checkNotNull(String val) {\n        return val \u003d\u003d null ? EmptyString : val;\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.get#98",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.get(java.lang.String)",
    "snippet": "public String get(String key) {\n        int i \u003d indexOfKey(key);\n        return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\n    }",
    "begin_line": 98,
    "end_line": 101,
    "comment": "/** \n * Get an attribute value by key.\n * @param key the (case-sensitive) attribute key\n * @return the attribute value if set; or empty string if not set (or a boolean attribute).\n * @see #hasKey(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.getIgnoreCase#108",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.getIgnoreCase(java.lang.String)",
    "snippet": "public String getIgnoreCase(String key) {\n        int i \u003d indexOfKeyIgnoreCase(key);\n        return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\n    }",
    "begin_line": 108,
    "end_line": 111,
    "comment": "/** \n * Get an attribute\u0027s value by case-insensitive key\n * @param key the attribute name\n * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.add#114",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.add(java.lang.String, java.lang.String)",
    "snippet": "private void add(String key, String value) {\n        checkCapacity(size + 1);\n        keys[size] \u003d key;\n        vals[size] \u003d value;\n        size++;\n    }",
    "begin_line": 114,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#127",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "public Attributes put(String key, String value) {\n        int i \u003d indexOfKey(key);\n        if (i !\u003d NotFound)\n            vals[i] \u003d value;\n        else\n            add(key, value);\n        return this;\n    }",
    "begin_line": 127,
    "end_line": 134,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param key case sensitive attribute key\n * @param value attribute value\n * @return these attributes, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.putIgnoreCase#136",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.putIgnoreCase(java.lang.String, java.lang.String)",
    "snippet": "void putIgnoreCase(String key, String value) {\n        int i \u003d indexOfKeyIgnoreCase(key);\n        if (i !\u003d NotFound) {\n            vals[i] \u003d value;\n            if (!keys[i].equals(key)) // case changed, update\n                keys[i] \u003d key;\n        }\n        else\n            add(key, value);\n    }",
    "begin_line": 136,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#153",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, boolean)",
    "snippet": "public Attributes put(String key, boolean value) {\n        if (value)\n            putIgnoreCase(key, null);\n        else\n            remove(key);\n        return this;\n    }",
    "begin_line": 153,
    "end_line": 159,
    "comment": "/** \n * Set a new boolean attribute, remove attribute if value is false.\n * @param key case \u003cb\u003einsensitive\u003c/b\u003e attribute key\n * @param value attribute value\n * @return these attributes, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#166",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(org.jsoup.nodes.Attribute)",
    "snippet": "public Attributes put(Attribute attribute) {\n        Validate.notNull(attribute);\n        put(attribute.getKey(), attribute.getValue());\n        attribute.parent \u003d this;\n        return this;\n    }",
    "begin_line": 166,
    "end_line": 171,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param attribute attribute with case sensitive key\n * @return these attributes, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#174",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove(int)",
    "snippet": "private void remove(int index) {\n        Validate.isFalse(index \u003e\u003d size);\n        int shifted \u003d size - index - 1;\n        if (shifted \u003e 0) {\n            System.arraycopy(keys, index + 1, keys, index, shifted);\n            System.arraycopy(vals, index + 1, vals, index, shifted);\n        }\n        size--;\n        keys[size] \u003d null; // release hold\n        vals[size] \u003d null;\n    }",
    "begin_line": 174,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#190",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove(java.lang.String)",
    "snippet": "public void remove(String key) {\n        int i \u003d indexOfKey(key);\n        if (i !\u003d NotFound)\n            remove(i);\n    }",
    "begin_line": 190,
    "end_line": 194,
    "comment": "/** \n * Remove an attribute by key. \u003cb\u003eCase sensitive.\u003c/b\u003e\n * @param key attribute key to remove\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.removeIgnoreCase#200",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.removeIgnoreCase(java.lang.String)",
    "snippet": "public void removeIgnoreCase(String key) {\n        int i \u003d indexOfKeyIgnoreCase(key);\n        if (i !\u003d NotFound)\n            remove(i);\n    }",
    "begin_line": 200,
    "end_line": 204,
    "comment": "/** \n * Remove an attribute by key. \u003cb\u003eCase insensitive.\u003c/b\u003e\n * @param key attribute key to remove\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasKey#211",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasKey(java.lang.String)",
    "snippet": "public boolean hasKey(String key) {\n        return indexOfKey(key) !\u003d NotFound;\n    }",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Tests if these attributes contain an attribute with this key.\n * @param key case-sensitive key to check for\n * @return true if key exists, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasKeyIgnoreCase#220",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasKeyIgnoreCase(java.lang.String)",
    "snippet": "public boolean hasKeyIgnoreCase(String key) {\n        return indexOfKeyIgnoreCase(key) !\u003d NotFound;\n    }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "/** \n * Tests if these attributes contain an attribute with this key.\n * @param key key to check for\n * @return true if key exists, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.size#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n        return size;\n    }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "/** \n * Get the number of attributes in this set.\n * @return size\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.addAll#236",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.addAll(org.jsoup.nodes.Attributes)",
    "snippet": "public void addAll(Attributes incoming) {\n        if (incoming.size() \u003d\u003d 0)\n            return;\n        checkCapacity(size + incoming.size);\n\n        for (Attribute attr : incoming) {\n            // todo - should this be case insensitive?\n            put(attr);\n        }\n\n    }",
    "begin_line": 236,
    "end_line": 246,
    "comment": "/** \n * Add all the attributes from the incoming set to this set.\n * @param incoming attributes to add to these attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.iterator#248",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cAttribute\u003e iterator() {\n        return new Iterator\u003cAttribute\u003e() {\n            int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return i \u003c size;\n            }\n\n            @Override\n            public Attribute next() {\n                final Attribute attr \u003d new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }\n        };\n    }",
    "begin_line": 248,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasNext#253",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasNext()",
    "snippet": "@Override\n            public boolean hasNext() {\n                return i \u003c size;\n            }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.next#258",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.next()",
    "snippet": "@Override\n            public Attribute next() {\n                final Attribute attr \u003d new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }",
    "begin_line": 258,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#265",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove()",
    "snippet": "@Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.asList#275",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.asList()",
    "snippet": "public List\u003cAttribute\u003e asList() {\n        ArrayList\u003cAttribute\u003e list \u003d new ArrayList\u003c\u003e(size);\n        for (int i \u003d 0; i \u003c size; i++) {\n            Attribute attr \u003d vals[i] \u003d\u003d null ?\n                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n                new Attribute(keys[i], vals[i], Attributes.this);\n            list.add(attr);\n        }\n        return Collections.unmodifiableList(list);\n    }",
    "begin_line": 275,
    "end_line": 284,
    "comment": "/** \n * Get the attributes as a List, for iteration.\n * @return an view of the attributes as an unmodifialbe List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.dataset#291",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return new Dataset(this);\n    }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "/** \n * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys starting with  {@code data-}.\n * @return map of custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#300",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        try {\n            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        } catch (IOException e) { // ought never happen\n            throw new SerializationException(e);\n        }\n        return accum.toString();\n    }",
    "begin_line": 300,
    "end_line": 308,
    "comment": "/** \n * Get the HTML representation of these attributes.\n * @return HTML\n * @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#310",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz \u003d size;\n        for (int i \u003d 0; i \u003c sz; i++) {\n            // inlined from Attribute.html()\n            final String key \u003d keys[i];\n            final String val \u003d vals[i];\n            accum.append(\u0027 \u0027).append(key);\n\n            // collapse checked\u003dnull, checked\u003d\"\", checked\u003dchecked; write out others\n            if (!(out.syntax() \u003d\u003d Document.OutputSettings.Syntax.html\n                \u0026\u0026 (val \u003d\u003d null || val.equals(key) \u0026\u0026 Attribute.isBooleanAttribute(key)))) {\n\n                accum.append(\"\u003d\\\"\");\n                Entities.escape(accum, val \u003d\u003d null ? EmptyString : val, out, true, false, false);\n                accum.append(\u0027\"\u0027);\n            }\n        }\n    }",
    "begin_line": 310,
    "end_line": 327,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.toString#330",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.toString()",
    "snippet": "@Override\n    public String toString() {\n        return html();\n    }",
    "begin_line": 330,
    "end_line": 332,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.equals#340",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n\n        Attributes that \u003d (Attributes) o;\n\n        if (size !\u003d that.size) return false;\n        if (!Arrays.equals(keys, that.keys)) return false;\n        return Arrays.equals(vals, that.vals);\n    }",
    "begin_line": 340,
    "end_line": 349,
    "comment": "/** \n * Checks if these attributes are equal to another set of attributes, by comparing the two sets\n * @param o attributes to compare with\n * @return if both sets of attributes have the same content\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hashCode#356",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d size;\n        result \u003d 31 * result + Arrays.hashCode(keys);\n        result \u003d 31 * result + Arrays.hashCode(vals);\n        return result;\n    }",
    "begin_line": 356,
    "end_line": 361,
    "comment": "/** \n * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.\n * @return calculated hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.clone#364",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.clone()",
    "snippet": "@Override\n    public Attributes clone() {\n        Attributes clone;\n        try {\n            clone \u003d (Attributes) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n        clone.size \u003d size;\n        keys \u003d copyOf(keys, size);\n        vals \u003d copyOf(vals, size);\n        return clone;\n    }",
    "begin_line": 364,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.normalize#380",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.normalize()",
    "snippet": "public void normalize() {\n        for (int i \u003d 0; i \u003c size; i++) {\n            keys[i] \u003d lowerCase(keys[i]);\n        }\n    }",
    "begin_line": 380,
    "end_line": 384,
    "comment": "/** \n * Internal method. Lowercases all keys.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.Dataset#389",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.Dataset(org.jsoup.nodes.Attributes)",
    "snippet": "private Dataset(Attributes attributes) {\n            this.attributes \u003d attributes;\n        }",
    "begin_line": 389,
    "end_line": 391,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.entrySet#394",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.entrySet()",
    "snippet": "@Override\n        public Set\u003cEntry\u003cString, String\u003e\u003e entrySet() {\n            return new EntrySet();\n        }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.put#399",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "@Override\n        public String put(String key, String value) {\n            String dataKey \u003d dataKey(key);\n            String oldValue \u003d attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;\n            attributes.put(dataKey, value);\n            return oldValue;\n        }",
    "begin_line": 399,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.iterator#409",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "@Override\n            public Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iterator() {\n                return new DatasetIterator();\n            }",
    "begin_line": 409,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.size#414",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "@Override\n            public int size() {\n                int count \u003d 0;\n                Iterator iter \u003d new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }",
    "begin_line": 414,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.hasNext#426",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasNext()",
    "snippet": "public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr \u003d attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }",
    "begin_line": 426,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.next#434",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.next()",
    "snippet": "public Entry\u003cString, String\u003e next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }",
    "begin_line": 434,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.remove#438",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove()",
    "snippet": "public void remove() {\n                attributes.remove(attr.getKey());\n            }",
    "begin_line": 438,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.dataKey#444",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataKey(java.lang.String)",
    "snippet": "private static String dataKey(String key) {\n        return dataPrefix + key;\n    }",
    "begin_line": 444,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.Document#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.Document(java.lang.String)",
    "snippet": "public Document(String baseUri) {\n        super(Tag.valueOf(\"#root\", ParseSettings.htmlDefault), baseUri);\n        this.location \u003d baseUri;\n    }",
    "begin_line": 30,
    "end_line": 33,
    "comment": "/** \n * Create a new, empty Document.\n * @param baseUri base URI of document\n * @see org.jsoup.Jsoup#parse\n * @see #createShell\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createShell#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createShell(java.lang.String)",
    "snippet": "public static Document createShell(String baseUri) {\n        Validate.notNull(baseUri);\n\n        Document doc \u003d new Document(baseUri);\n        Element html \u003d doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n\n        return doc;\n    }",
    "begin_line": 40,
    "end_line": 49,
    "comment": "/** \n * Create a valid, empty shell of a document, suitable for adding more elements to.\n * @param baseUri baseUri of document\n * @return document with html, head, and body elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.location#56",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.location()",
    "snippet": "public String location() {\n     return location;\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "/** \n * Get the URL this Document was parsed from. If the starting URL is a redirect, this will return the final URL from which the document was served from.\n * @return location\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.head#64",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.head()",
    "snippet": "public Element head() {\n        return findFirstElementByTagName(\"head\", this);\n    }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "/** \n * Accessor to the document\u0027s  {@code head} element.\n * @return {@code head}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.body#72",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.body()",
    "snippet": "public Element body() {\n        return findFirstElementByTagName(\"body\", this);\n    }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Accessor to the document\u0027s  {@code body} element.\n * @return {@code body}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#80",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title()",
    "snippet": "public String title() {\n        // title is a preserve whitespace tag (for document output), but normalised here\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        return titleEl !\u003d null ? StringUtil.normaliseWhitespace(titleEl.text()).trim() : \"\";\n    }",
    "begin_line": 80,
    "end_line": 84,
    "comment": "/** \n * Get the string contents of the document\u0027s  {@code title} element.\n * @return Trimmed title, or empty string if none set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#91",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title(java.lang.String)",
    "snippet": "public void title(String title) {\n        Validate.notNull(title);\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        if (titleEl \u003d\u003d null) { // add to head\n            head().appendElement(\"title\").text(title);\n        } else {\n            titleEl.text(title);\n        }\n    }",
    "begin_line": 91,
    "end_line": 99,
    "comment": "/** \n * Set the document\u0027s  {@code title} element. Updates the existing element, or adds {@code title} to {@code head} ifnot present\n * @param title string to set as title\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createElement#106",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createElement(java.lang.String)",
    "snippet": "public Element createElement(String tagName) {\n        return new Element(Tag.valueOf(tagName, ParseSettings.preserveCase), this.baseUri());\n    }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "/** \n * Create a new Element, with this document\u0027s base uri. Does not make the new element a child of this document.\n * @param tagName element tag name (e.g. {@code a})\n * @return new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normalise#115",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normalise()",
    "snippet": "public Document normalise() {\n        Element htmlEl \u003d findFirstElementByTagName(\"html\", this);\n        if (htmlEl \u003d\u003d null)\n            htmlEl \u003d appendElement(\"html\");\n        if (head() \u003d\u003d null)\n            htmlEl.prependElement(\"head\");\n        if (body() \u003d\u003d null)\n            htmlEl.appendElement(\"body\");\n\n        // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n        // of. do in inverse order to maintain text order.\n        normaliseTextNodes(head());\n        normaliseTextNodes(htmlEl);\n        normaliseTextNodes(this);\n\n        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n        \n        ensureMetaCharsetElement();\n        \n        return this;\n    }",
    "begin_line": 115,
    "end_line": 136,
    "comment": "/** \n * Normalise the document. This happens after the parse phase so generally does not need to be called. Moves any text content that is not in the body element into the body.\n * @return this document after normalisation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseTextNodes#139",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseTextNodes(org.jsoup.nodes.Element)",
    "snippet": "private void normaliseTextNodes(Element element) {\n        List\u003cNode\u003e toMove \u003d new ArrayList\u003c\u003e();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn \u003d (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        for (int i \u003d toMove.size()-1; i \u003e\u003d 0; i--) {\n            Node node \u003d toMove.get(i);\n            element.removeChild(node);\n            body().prependChild(new TextNode(\" \"));\n            body().prependChild(node);\n        }\n    }",
    "begin_line": 139,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseStructure#158",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
    "snippet": "private void normaliseStructure(String tag, Element htmlEl) {\n        Elements elements \u003d this.getElementsByTag(tag);\n        Element master \u003d elements.first(); // will always be available as created above if not existent\n        if (elements.size() \u003e 1) { // dupes, move contents to master\n            List\u003cNode\u003e toMove \u003d new ArrayList\u003c\u003e();\n            for (int i \u003d 1; i \u003c elements.size(); i++) {\n                Node dupe \u003d elements.get(i);\n                toMove.addAll(dupe.ensureChildNodes());\n                dupe.remove();\n            }\n\n            for (Node dupe : toMove)\n                master.appendChild(dupe);\n        }\n        // ensure parented by \u003chtml\u003e\n        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master); // includes remove()            \n        }\n    }",
    "begin_line": 158,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.findFirstElementByTagName#179",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.findFirstElementByTagName(java.lang.String, org.jsoup.nodes.Node)",
    "snippet": "private Element findFirstElementByTagName(String tag, Node node) {\n        if (node.nodeName().equals(tag))\n            return (Element) node;\n        else {\n            int size \u003d node.childNodeSize();\n            for (int i \u003d 0; i \u003c size; i++) {\n                Element found \u003d findFirstElementByTagName(tag, node.childNode(i));\n                if (found !\u003d null)\n                    return found;\n            }\n        }\n        return null;\n    }",
    "begin_line": 179,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.outerHtml#194",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outerHtml()",
    "snippet": "@Override\n    public String outerHtml() {\n        return super.html(); // no outer wrapper tag\n    }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.text#204",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.text(java.lang.String)",
    "snippet": "@Override\n    public Element text(String text) {\n        body().text(text); // overridden to not nuke doc structure\n        return this;\n    }",
    "begin_line": 204,
    "end_line": 207,
    "comment": "/** \n * Set the text of the  {@code body} of this document. Any existing nodes within the body will be cleared.\n * @param text unencoded text\n * @return this document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.nodeName#210",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return \"#document\";\n    }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.charset#238",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.nio.charset.Charset)",
    "snippet": "public void charset(Charset charset) {\n        updateMetaCharsetElement(true);\n        outputSettings.charset(charset);\n        ensureMetaCharsetElement();\n    }",
    "begin_line": 238,
    "end_line": 242,
    "comment": "/** \n * Sets the charset used in this document. This method is equivalent to  {@link OutputSettings#charset(java.nio.charset.Charset) OutputSettings.charset(Charset)} but in addition it updates thecharset / encoding element within the document. \u003cp\u003eThis enables {@link #updateMetaCharsetElement(boolean) meta charset update}.\u003c/p\u003e \u003cp\u003eIf there\u0027s no element with charset / encoding information yet it will be created. Obsolete charset / encoding definitions are removed!\u003c/p\u003e \u003cp\u003e\u003cb\u003eElements used:\u003c/b\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cb\u003eHtml:\u003c/b\u003e \u003ci\u003e\u0026lt;meta charset\u003d\"CHARSET\"\u0026gt;\u003c/i\u003e\u003c/li\u003e \u003cli\u003e\u003cb\u003eXml:\u003c/b\u003e \u003ci\u003e\u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"CHARSET\"\u0026gt;\u003c/i\u003e\u003c/li\u003e \u003c/ul\u003e\n * @param charset Charset\n * @see #updateMetaCharsetElement(boolean) \n * @see OutputSettings#charset(java.nio.charset.Charset) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.charset#252",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset()",
    "snippet": "public Charset charset() {\n        return outputSettings.charset();\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Returns the charset used in this document. This method is equivalent to  {@link OutputSettings#charset()}.\n * @return Current Charset\n * @see OutputSettings#charset() \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.updateMetaCharsetElement#269",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.updateMetaCharsetElement(boolean)",
    "snippet": "public void updateMetaCharsetElement(boolean update) {\n        this.updateMetaCharset \u003d update;\n    }",
    "begin_line": 269,
    "end_line": 271,
    "comment": "/** \n * Sets whether the element with charset information in this document is updated on changes through  {@link #charset(java.nio.charset.Charset) Document.charset(Charset)} or not.\u003cp\u003eIf set to \u003ctt\u003efalse\u003c/tt\u003e \u003ci\u003e(default)\u003c/i\u003e there are no elements modified.\u003c/p\u003e\n * @param update If \u003ctt\u003etrue\u003c/tt\u003e the element updated on charsetchanges, \u003ctt\u003efalse\u003c/tt\u003e if not\n * @see #charset(java.nio.charset.Charset) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.updateMetaCharsetElement#281",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.updateMetaCharsetElement()",
    "snippet": "public boolean updateMetaCharsetElement() {\n        return updateMetaCharset;\n    }",
    "begin_line": 281,
    "end_line": 283,
    "comment": "/** \n * Returns whether the element with charset information in this document is updated on changes through  {@link #charset(java.nio.charset.Charset) Document.charset(Charset)} or not.\n * @return Returns \u003ctt\u003etrue\u003c/tt\u003e if the element is updated on charsetchanges, \u003ctt\u003efalse\u003c/tt\u003e if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.clone#286",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.clone()",
    "snippet": "@Override\n    public Document clone() {\n        Document clone \u003d (Document) super.clone();\n        clone.outputSettings \u003d this.outputSettings.clone();\n        return clone;\n    }",
    "begin_line": 286,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.ensureMetaCharsetElement#311",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.ensureMetaCharsetElement()",
    "snippet": "private void ensureMetaCharsetElement() {\n        if (updateMetaCharset) {\n            OutputSettings.Syntax syntax \u003d outputSettings().syntax();\n\n            if (syntax \u003d\u003d OutputSettings.Syntax.html) {\n                Element metaCharset \u003d select(\"meta[charset]\").first();\n\n                if (metaCharset !\u003d null) {\n                    metaCharset.attr(\"charset\", charset().displayName());\n                } else {\n                    Element head \u003d head();\n\n                    if (head !\u003d null) {\n                        head.appendElement(\"meta\").attr(\"charset\", charset().displayName());\n                    }\n                }\n\n                // Remove obsolete elements\n                select(\"meta[name\u003dcharset]\").remove();\n            } else if (syntax \u003d\u003d OutputSettings.Syntax.xml) {\n                Node node \u003d childNodes().get(0);\n\n                if (node instanceof XmlDeclaration) {\n                    XmlDeclaration decl \u003d (XmlDeclaration) node;\n\n                    if (decl.name().equals(\"xml\")) {\n                        decl.attr(\"encoding\", charset().displayName());\n\n                        final String version \u003d decl.attr(\"version\");\n\n                        if (version !\u003d null) {\n                            decl.attr(\"version\", \"1.0\");\n                        }\n                    } else {\n                        decl \u003d new XmlDeclaration(\"xml\", false);\n                        decl.attr(\"version\", \"1.0\");\n                        decl.attr(\"encoding\", charset().displayName());\n\n                        prependChild(decl);\n                    }\n                } else {\n                    XmlDeclaration decl \u003d new XmlDeclaration(\"xml\", false);\n                    decl.attr(\"version\", \"1.0\");\n                    decl.attr(\"encoding\", charset().displayName());\n\n                    prependChild(decl);\n                }\n            }\n        }\n    }",
    "begin_line": 311,
    "end_line": 360,
    "comment": "/** \n * Ensures a meta charset (html) or xml declaration (xml) with the current encoding used. This only applies with {@link #updateMetaCharsetElement(boolean) updateMetaCharset} set to\u003ctt\u003etrue\u003c/tt\u003e, otherwise this method does nothing. \u003cul\u003e \u003cli\u003eAn existing element gets updated with the current charset\u003c/li\u003e \u003cli\u003eIf there\u0027s no element yet it will be inserted\u003c/li\u003e \u003cli\u003eObsolete elements are removed\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cb\u003eElements used:\u003c/b\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cb\u003eHtml:\u003c/b\u003e \u003ci\u003e\u0026lt;meta charset\u003d\"CHARSET\"\u0026gt;\u003c/i\u003e\u003c/li\u003e \u003cli\u003e\u003cb\u003eXml:\u003c/b\u003e \u003ci\u003e\u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"CHARSET\"\u0026gt;\u003c/i\u003e\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.OutputSettings#382",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.OutputSettings()",
    "snippet": "public OutputSettings() {\n            charset(Charset.forName(\"UTF8\"));\n        }",
    "begin_line": 382,
    "end_line": 384,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#394",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode()",
    "snippet": "public Entities.EscapeMode escapeMode() {\n            return escapeMode;\n        }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "/** \n * Get the document\u0027s current HTML escape mode: \u003ccode\u003ebase\u003c/code\u003e, which provides a limited set of named HTML entities and escapes other characters as numbered entities for maximum compatibility; or \u003ccode\u003eextended\u003c/code\u003e, which uses the complete set of HTML named entities. \u003cp\u003e The default escape mode is \u003ccode\u003ebase\u003c/code\u003e.\n * @return the document\u0027s current escape mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#404",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode(org.jsoup.nodes.Entities.EscapeMode)",
    "snippet": "public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {\n            this.escapeMode \u003d escapeMode;\n            return this;\n        }",
    "begin_line": 404,
    "end_line": 407,
    "comment": "/** \n * Set the document\u0027s escape mode, which determines how characters are escaped when the output character set does not support a given character:- using either a named or a numbered escape.\n * @param escapeMode the new escape mode to use\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#417",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset()",
    "snippet": "public Charset charset() {\n            return charset;\n        }",
    "begin_line": 417,
    "end_line": 419,
    "comment": "/** \n * Get the document\u0027s current output charset, which is used to control which characters are escaped when generating HTML (via the \u003ccode\u003ehtml()\u003c/code\u003e methods), and which are kept intact. \u003cp\u003e Where possible (when parsing from a URL or File), the document\u0027s output charset is automatically set to the input charset. Otherwise, it defaults to UTF-8.\n * @return the document\u0027s current charset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#426",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.nio.charset.Charset)",
    "snippet": "public OutputSettings charset(Charset charset) {\n            this.charset \u003d charset;\n            return this;\n        }",
    "begin_line": 426,
    "end_line": 429,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#436",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.lang.String)",
    "snippet": "public OutputSettings charset(String charset) {\n            charset(Charset.forName(charset));\n            return this;\n        }",
    "begin_line": 436,
    "end_line": 439,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset (by name) to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prepareEncoder#441",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prepareEncoder()",
    "snippet": "CharsetEncoder prepareEncoder() {\n            encoder \u003d charset.newEncoder(); // created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads\n            coreCharset \u003d Entities.CoreCharset.byName(encoder.charset().name());\n            return encoder;\n        }",
    "begin_line": 441,
    "end_line": 445,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.syntax#451",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.syntax()",
    "snippet": "public Syntax syntax() {\n            return syntax;\n        }",
    "begin_line": 451,
    "end_line": 453,
    "comment": "/** \n * Get the document\u0027s current output syntax.\n * @return current syntax\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.syntax#461",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.syntax(org.jsoup.nodes.Document.OutputSettings.Syntax)",
    "snippet": "public OutputSettings syntax(Syntax syntax) {\n            this.syntax \u003d syntax;\n            return this;\n        }",
    "begin_line": 461,
    "end_line": 464,
    "comment": "/** \n * Set the document\u0027s output syntax. Either  {@code html}, with empty tags and boolean attributes (etc), or {@code xml}, with self-closing tags.\n * @param syntax serialization syntax\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#471",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint()",
    "snippet": "public boolean prettyPrint() {\n            return prettyPrint;\n        }",
    "begin_line": 471,
    "end_line": 473,
    "comment": "/** \n * Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format the output, and the output will generally look like the input.\n * @return if pretty printing is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#480",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint(boolean)",
    "snippet": "public OutputSettings prettyPrint(boolean pretty) {\n            prettyPrint \u003d pretty;\n            return this;\n        }",
    "begin_line": 480,
    "end_line": 483,
    "comment": "/** \n * Enable or disable pretty printing.\n * @param pretty new pretty print setting\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outline#490",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outline()",
    "snippet": "public boolean outline() {\n            return outline;\n        }",
    "begin_line": 490,
    "end_line": 492,
    "comment": "/** \n * Get if outline mode is enabled. Default is false. If enabled, the HTML output methods will consider all tags as block.\n * @return if outline mode is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outline#499",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outline(boolean)",
    "snippet": "public OutputSettings outline(boolean outlineMode) {\n            outline \u003d outlineMode;\n            return this;\n        }",
    "begin_line": 499,
    "end_line": 502,
    "comment": "/** \n * Enable or disable HTML outline mode.\n * @param outlineMode new outline setting\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#508",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount()",
    "snippet": "public int indentAmount() {\n            return indentAmount;\n        }",
    "begin_line": 508,
    "end_line": 510,
    "comment": "/** \n * Get the current tag indent amount, used when pretty printing.\n * @return the current indent amount\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#517",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount(int)",
    "snippet": "public OutputSettings indentAmount(int indentAmount) {\n            Validate.isTrue(indentAmount \u003e\u003d 0);\n            this.indentAmount \u003d indentAmount;\n            return this;\n        }",
    "begin_line": 517,
    "end_line": 521,
    "comment": "/** \n * Set the indent amount for pretty printing\n * @param indentAmount number of spaces to use for indenting each level. Must be {@literal \u003e\u003d} 0.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.clone#524",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.clone()",
    "snippet": "@Override\n        public OutputSettings clone() {\n            OutputSettings clone;\n            try {\n                clone \u003d (OutputSettings) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new RuntimeException(e);\n            }\n            clone.charset(charset.name()); // new charset and charset encoder\n            clone.escapeMode \u003d Entities.EscapeMode.valueOf(escapeMode.name());\n            // indentAmount, prettyPrint are primitives so object.clone() will handle\n            return clone;\n        }",
    "begin_line": 524,
    "end_line": 535,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outputSettings#542",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outputSettings()",
    "snippet": "public OutputSettings outputSettings() {\n        return outputSettings;\n    }",
    "begin_line": 542,
    "end_line": 544,
    "comment": "/** \n * Get the document\u0027s current output settings.\n * @return the document\u0027s current output settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outputSettings#551",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outputSettings(org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "public Document outputSettings(OutputSettings outputSettings) {\n        Validate.notNull(outputSettings);\n        this.outputSettings \u003d outputSettings;\n        return this;\n    }",
    "begin_line": 551,
    "end_line": 555,
    "comment": "/** \n * Set the document\u0027s output settings.\n * @param outputSettings new output settings.\n * @return this document, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.quirksMode#561",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.quirksMode()",
    "snippet": "public QuirksMode quirksMode() {\n        return quirksMode;\n    }",
    "begin_line": 561,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.quirksMode#565",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.quirksMode(org.jsoup.nodes.Document.QuirksMode)",
    "snippet": "public Document quirksMode(QuirksMode quirksMode) {\n        this.quirksMode \u003d quirksMode;\n        return this;\n    }",
    "begin_line": 565,
    "end_line": 568,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.DocumentType#28",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.DocumentType(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public DocumentType(String name, String publicId, String systemId) {\n        Validate.notNull(name);\n        Validate.notNull(publicId);\n        Validate.notNull(systemId);\n        attr(NAME, name);\n        attr(PUBLIC_ID, publicId);\n        if (has(PUBLIC_ID)) {\n            attr(PUB_SYS_KEY, PUBLIC_KEY);\n        }\n        attr(SYSTEM_ID, systemId);\n    }",
    "begin_line": 28,
    "end_line": 38,
    "comment": "/** \n * Create a new doctype element.\n * @param name the doctype\u0027s name\n * @param publicId the doctype\u0027s public ID\n * @param systemId the doctype\u0027s system ID\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.DocumentType#48",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.DocumentType(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n        attr(NAME, name);\n        attr(PUBLIC_ID, publicId);\n        if (has(PUBLIC_ID)) {\n            attr(PUB_SYS_KEY, PUBLIC_KEY);\n        }\n        attr(SYSTEM_ID, systemId);\n    }",
    "begin_line": 48,
    "end_line": 55,
    "comment": "/** \n * Create a new doctype element.\n * @param name the doctype\u0027s name\n * @param publicId the doctype\u0027s public ID\n * @param systemId the doctype\u0027s system ID\n * @param baseUri unused\n * @deprecated\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.DocumentType#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.DocumentType(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public DocumentType(String name, String pubSysKey, String publicId, String systemId, String baseUri) {\n        attr(NAME, name);\n        if (pubSysKey !\u003d null) {\n            attr(PUB_SYS_KEY, pubSysKey);\n        }\n        attr(PUBLIC_ID, publicId);\n        attr(SYSTEM_ID, systemId);\n    }",
    "begin_line": 65,
    "end_line": 72,
    "comment": "/** \n * Create a new doctype element.\n * @param name the doctype\u0027s name\n * @param publicId the doctype\u0027s public ID\n * @param systemId the doctype\u0027s system ID\n * @param baseUri unused\n * @deprecated\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.setPubSysKey#73",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.setPubSysKey(java.lang.String)",
    "snippet": "public void setPubSysKey(String value) {\n        if (value !\u003d null)\n            attr(PUB_SYS_KEY, value);\n    }",
    "begin_line": 73,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.nodeName#79",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return \"#doctype\";\n    }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.outerHtmlHead#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "@Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (out.syntax() \u003d\u003d Syntax.html \u0026\u0026 !has(PUBLIC_ID) \u0026\u0026 !has(SYSTEM_ID)) {\n            // looks like a html5 doctype, go lowercase for aesthetics\n            accum.append(\"\u003c!doctype\");\n        } else {\n            accum.append(\"\u003c!DOCTYPE\");\n        }\n        if (has(NAME))\n            accum.append(\" \").append(attr(NAME));\n        if (has(PUB_SYS_KEY))\n            accum.append(\" \").append(attr(PUB_SYS_KEY));\n        if (has(PUBLIC_ID))\n            accum.append(\" \\\"\").append(attr(PUBLIC_ID)).append(\u0027\"\u0027);\n        if (has(SYSTEM_ID))\n            accum.append(\" \\\"\").append(attr(SYSTEM_ID)).append(\u0027\"\u0027);\n        accum.append(\u0027\u003e\u0027);\n    }",
    "begin_line": 84,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.outerHtmlTail#103",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "@Override\n    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {\n    }",
    "begin_line": 103,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DocumentType.has#106",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/DocumentType.java",
    "class_name": "org.jsoup.nodes.DocumentType",
    "signature": "org.jsoup.nodes.DocumentType.has(java.lang.String)",
    "snippet": "private boolean has(final String attribute) {\n        return !StringUtil.isBlank(attr(attribute));\n    }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#53",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(java.lang.String)",
    "snippet": "public Element(String tag) {\n        this(Tag.valueOf(tag), \"\", new Attributes());\n    }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Create a new, standalone element.\n * @param tag tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#66",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "public Element(Tag tag, String baseUri, Attributes attributes) {\n        Validate.notNull(tag);\n        Validate.notNull(baseUri);\n        childNodes \u003d EMPTY_NODES;\n        this.baseUri \u003d baseUri;\n        this.attributes \u003d attributes;\n        this.tag \u003d tag;\n    }",
    "begin_line": 66,
    "end_line": 73,
    "comment": "/** \n * Create a new, standalone Element. (Standalone in that is has no parent.)\n * @param tag tag of this element\n * @param baseUri the base URI\n * @param attributes initial attributes\n * @see #appendChild(Node)\n * @see #appendElement(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#83",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String)",
    "snippet": "public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, null);\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Create a new Element from a tag and a base URI.\n * @param tag element tag\n * @param baseUri the base URI of this element. It is acceptable for the base URI to be an emptystring, but not null.\n * @see Tag#valueOf(String,ParseSettings)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ensureChildNodes#87",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ensureChildNodes()",
    "snippet": "protected List\u003cNode\u003e ensureChildNodes() {\n        if (childNodes \u003d\u003d EMPTY_NODES) {\n            childNodes \u003d new NodeList(4);\n        }\n        return childNodes;\n    }",
    "begin_line": 87,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasAttributes#95",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasAttributes()",
    "snippet": "@Override\n    protected boolean hasAttributes() {\n        return attributes !\u003d null;\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attributes#100",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attributes()",
    "snippet": "@Override\n    public Attributes attributes() {\n        if (!hasAttributes())\n            attributes \u003d new Attributes();\n        return attributes;\n    }",
    "begin_line": 100,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.baseUri#107",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.baseUri()",
    "snippet": "@Override\n    public String baseUri() {\n        return baseUri;\n    }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.doSetBaseUri#112",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.doSetBaseUri(java.lang.String)",
    "snippet": "@Override\n    protected void doSetBaseUri(String baseUri) {\n        this.baseUri \u003d baseUri;\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.childNodeSize#117",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.childNodeSize()",
    "snippet": "@Override\n    public int childNodeSize() {\n        return childNodes.size();\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nodeName#122",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return tag.getName();\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#131",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName()",
    "snippet": "public String tagName() {\n        return tag.getName();\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Get the name of the tag for this element. E.g.  {@code div}\n * @return the tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#142",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName(java.lang.String)",
    "snippet": "public Element tagName(String tagName) {\n        Validate.notEmpty(tagName, \"Tag name must not be empty.\");\n        tag \u003d Tag.valueOf(tagName, ParseSettings.preserveCase); // preserve the requested tag case\n        return this;\n    }",
    "begin_line": 142,
    "end_line": 146,
    "comment": "/** \n * Change the tag of this element. For example, convert a  {@code \u003cspan\u003e} to a {@code \u003cdiv\u003e} with{@code el.tagName(\"div\");}.\n * @param tagName new tag name for this element\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tag#153",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tag()",
    "snippet": "public Tag tag() {\n        return tag;\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "/** \n * Get the Tag for this element.\n * @return the tag object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.isBlock#163",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.isBlock()",
    "snippet": "public boolean isBlock() {\n        return tag.isBlock();\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * Test if this element is a block-level element. (E.g.  {@code \u003cdiv\u003e \u003d\u003d true} or an inline element{@code \u003cp\u003e \u003d\u003d false}).\n * @return true if block, false if not (and thus inline)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.id#172",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.id()",
    "snippet": "public String id() {\n        return attributes().getIgnoreCase(\"id\");\n    }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * Get the  {@code id} attribute of this element.\n * @return The id attribute, if present, or an empty string if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attr#182",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attr(java.lang.String, java.lang.String)",
    "snippet": "public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 182,
    "end_line": 185,
    "comment": "/** \n * Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attr#197",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attr(java.lang.String, boolean)",
    "snippet": "public Element attr(String attributeKey, boolean attributeValue) {\n        attributes().put(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "/** \n * Set a boolean attribute value on this element. Setting to \u003ccode\u003etrue\u003c/code\u003e sets the attribute value to \"\" and marks the attribute as boolean so no value is written out. Setting to \u003ccode\u003efalse\u003c/code\u003e removes the attribute with the same key if it exists.\n * @param attributeKey the attribute key\n * @param attributeValue the attribute value\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataset#215",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return attributes().dataset();\n    }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Get this element\u0027s HTML5 custom data attributes. Each attribute in the element that has a key starting with \"data-\" is included the dataset. \u003cp\u003e E.g., the element  {@code \u003cdiv data-package\u003d\"jsoup\" data-language\u003d\"Java\" class\u003d\"group\"\u003e...} has the dataset{@code package\u003djsoup, language\u003djava}. \u003cp\u003e This map is a filtered view of the element\u0027s attribute map. Changes to one map (add, remove, update) are reflected in the other map. \u003cp\u003e You can find elements that have data attributes using the  {@code [^data-]} attribute key prefix selector.\n * @return a map of {@code key\u003dvalue} custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parent#220",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parent()",
    "snippet": "@Override\n    public final Element parent() {\n        return (Element) parentNode;\n    }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parents#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parents()",
    "snippet": "public Elements parents() {\n        Elements parents \u003d new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }",
    "begin_line": 228,
    "end_line": 232,
    "comment": "/** \n * Get this element\u0027s parent and ancestors, up to the document root.\n * @return this element\u0027s stack of parents, closest first.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.accumulateParents#234",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
    "snippet": "private static void accumulateParents(Element el, Elements parents) {\n        Element parent \u003d el.parent();\n        if (parent !\u003d null \u0026\u0026 !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }",
    "begin_line": 234,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.child#253",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.child(int)",
    "snippet": "public Element child(int index) {\n        return childElementsList().get(index);\n    }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "/** \n * Get a child element of this element, by its 0-based index number. \u003cp\u003e Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. \u003c/p\u003e\n * @param index the index number of the element to retrieve\n * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}\n * @see #childNode(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.children#265",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.children()",
    "snippet": "public Elements children() {\n        return new Elements(childElementsList());\n    }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "/** \n * Get this element\u0027s child elements. \u003cp\u003e This is effectively a filter on  {@link #childNodes()} to get Element nodes.\u003c/p\u003e\n * @return child elements. If this element has no children, returns an empty list.\n * @see #childNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.childElementsList#274",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.childElementsList()",
    "snippet": "private List\u003cElement\u003e childElementsList() {\n        List\u003cElement\u003e children;\n        if (shadowChildrenRef \u003d\u003d null || (children \u003d shadowChildrenRef.get()) \u003d\u003d null) {\n            final int size \u003d childNodes.size();\n            children \u003d new ArrayList\u003c\u003e(size);\n            //noinspection ForLoopReplaceableByForEach (beacause it allocates an Iterator which is wasteful here)\n            for (int i \u003d 0; i \u003c size; i++) {\n                final Node node \u003d childNodes.get(i);\n                if (node instanceof Element)\n                    children.add((Element) node);\n            }\n            shadowChildrenRef \u003d new WeakReference\u003c\u003e(children);\n        }\n        return children;\n    }",
    "begin_line": 274,
    "end_line": 288,
    "comment": "/** \n * Maintains a shadow copy of this element\u0027s child elements. If the nodelist is changed, this cache is invalidated. TODO - think about pulling this out as a helper as there are other shadow lists (like in Attributes) kept around.\n * @return a list of child elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nodelistChanged#294",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nodelistChanged()",
    "snippet": "@Override\n    void nodelistChanged() {\n        super.nodelistChanged();\n        shadowChildrenRef \u003d null;\n    }",
    "begin_line": 294,
    "end_line": 297,
    "comment": "/** \n * Clears the cached shadow child elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.textNodes#315",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.textNodes()",
    "snippet": "public List\u003cTextNode\u003e textNodes() {\n        List\u003cTextNode\u003e textNodes \u003d new ArrayList\u003c\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof TextNode)\n                textNodes.add((TextNode) node);\n        }\n        return Collections.unmodifiableList(textNodes);\n    }",
    "begin_line": 315,
    "end_line": 322,
    "comment": "/** \n * Get this element\u0027s child text nodes. The list is unmodifiable but the text nodes may be manipulated. \u003cp\u003e This is effectively a filter on  {@link #childNodes()} to get Text nodes.\n * @return child text nodes. If this element has no text nodes, returns anempty list. \u003c/p\u003e For example, with the input HTML:  {@code \u003cp\u003eOne \u003cspan\u003eTwo\u003c/span\u003e Three \u003cbr\u003e Four\u003c/p\u003e} with the {@code p} element selected:\u003cul\u003e \u003cli\u003e {@code p.text()} \u003d {@code \"One Two Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.ownText()} \u003d {@code \"One Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.children()} \u003d {@code Elements[\u003cspan\u003e, \u003cbr\u003e]}\u003c/li\u003e \u003cli\u003e {@code p.childNodes()} \u003d {@code List\u003cNode\u003e[\"One \", \u003cspan\u003e, \" Three \", \u003cbr\u003e, \" Four\"]}\u003c/li\u003e \u003cli\u003e {@code p.textNodes()} \u003d {@code List\u003cTextNode\u003e[\"One \", \" Three \", \" Four\"]}\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataNodes#333",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataNodes()",
    "snippet": "public List\u003cDataNode\u003e dataNodes() {\n        List\u003cDataNode\u003e dataNodes \u003d new ArrayList\u003c\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof DataNode)\n                dataNodes.add((DataNode) node);\n        }\n        return Collections.unmodifiableList(dataNodes);\n    }",
    "begin_line": 333,
    "end_line": 340,
    "comment": "/** \n * Get this element\u0027s child data nodes. The list is unmodifiable but the data nodes may be manipulated. \u003cp\u003e This is effectively a filter on  {@link #childNodes()} to get Data nodes.\u003c/p\u003e\n * @return child data nodes. If this element has no data nodes, returns anempty list.\n * @see #data()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.select#362",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.select(java.lang.String)",
    "snippet": "public Elements select(String cssQuery) {\n        return Selector.select(cssQuery, this);\n    }",
    "begin_line": 362,
    "end_line": 364,
    "comment": "/** \n * Find elements that match the  {@link Selector} CSS query, with this element as the starting context. Matched elementsmay include this element, or any of its children. \u003cp\u003e This method is generally more powerful to use than the DOM-type  {@code getElementBy*} methods, becausemultiple filters can be combined, e.g.: \u003c/p\u003e \u003cul\u003e \u003cli\u003e {@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\u003cli\u003e {@code el.select(\"a[href*\u003dexample.com]\")} - finds links pointing to example.com (loosely)\u003c/ul\u003e \u003cp\u003e See the query syntax documentation in  {@link org.jsoup.select.Selector}. \u003c/p\u003e\n * @param cssQuery a {@link Selector} CSS-like query\n * @return elements that match the query (empty if none match)\n * @see org.jsoup.select.Selector\n * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.selectFirst#373",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.selectFirst(java.lang.String)",
    "snippet": "public Element selectFirst(String cssQuery) {\n        return Selector.selectFirst(cssQuery, this);\n    }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "/** \n * Find the first Element that matches the  {@link Selector} CSS query, with this element as the starting context.\u003cp\u003eThis is effectively the same as calling  {@code element.select(query).first()}, but is more efficient as query execution stops on the first hit.\u003c/p\u003e\n * @param cssQuery cssQuery a {@link Selector} CSS-like query\n * @return the first matching element, or \u003cb\u003e{@code null}\u003c/b\u003e if there is no match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.is#382",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.is(java.lang.String)",
    "snippet": "public boolean is(String cssQuery) {\n        return is(QueryParser.parse(cssQuery));\n    }",
    "begin_line": 382,
    "end_line": 384,
    "comment": "/** \n * Check if this element matches the given  {@link Selector} CSS query.\n * @param cssQuery a {@link Selector} CSS query\n * @return if this element matches the query\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.is#391",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.is(org.jsoup.select.Evaluator)",
    "snippet": "public boolean is(Evaluator evaluator) {\n        return evaluator.matches((Element)this.root(), this);\n    }",
    "begin_line": 391,
    "end_line": 393,
    "comment": "/** \n * Check if this element matches the given evaluator.\n * @param evaluator an element evaluator\n * @return if this element matches\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendChild#401",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendChild(org.jsoup.nodes.Node)",
    "snippet": "public Element appendChild(Node child) {\n        Validate.notNull(child);\n\n        // was - Node#addChildren(child). short-circuits an array create and a loop.\n        reparentChild(child);\n        ensureChildNodes();\n        childNodes.add(child);\n        child.setSiblingIndex(childNodes.size() - 1);\n        return this;\n    }",
    "begin_line": 401,
    "end_line": 410,
    "comment": "/** \n * Add a node child node to this element.\n * @param child node to add.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendTo#418",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendTo(org.jsoup.nodes.Element)",
    "snippet": "public Element appendTo(Element parent) {\n        Validate.notNull(parent);\n        parent.appendChild(this);\n        return this;\n    }",
    "begin_line": 418,
    "end_line": 422,
    "comment": "/** \n * Add this element to the supplied parent element, as its next child.\n * @param parent element to which this element will be appended\n * @return this element, so that you can continue modifying the element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependChild#430",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependChild(org.jsoup.nodes.Node)",
    "snippet": "public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(0, child);\n        return this;\n    }",
    "begin_line": 430,
    "end_line": 435,
    "comment": "/** \n * Add a node to the start of this element\u0027s children.\n * @param child node to add.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.insertChildren#447",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.insertChildren(int, java.util.Collection\u003c? extends org.jsoup.nodes.Node\u003e)",
    "snippet": "public Element insertChildren(int index, Collection\u003c? extends Node\u003e children) {\n        Validate.notNull(children, \"Children collection to be inserted must not be null.\");\n        int currentSize \u003d childNodeSize();\n        if (index \u003c 0) index +\u003d currentSize +1; // roll around\n        Validate.isTrue(index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d currentSize, \"Insert position out of bounds.\");\n\n        ArrayList\u003cNode\u003e nodes \u003d new ArrayList\u003c\u003e(children);\n        Node[] nodeArray \u003d nodes.toArray(new Node[nodes.size()]);\n        addChildren(index, nodeArray);\n        return this;\n    }",
    "begin_line": 447,
    "end_line": 457,
    "comment": "/** \n * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.\n * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at theend\n * @param children child nodes to insert\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.insertChildren#468",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.insertChildren(int, org.jsoup.nodes.Node)",
    "snippet": "public Element insertChildren(int index, Node... children) {\n        Validate.notNull(children, \"Children collection to be inserted must not be null.\");\n        int currentSize \u003d childNodeSize();\n        if (index \u003c 0) index +\u003d currentSize +1; // roll around\n        Validate.isTrue(index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d currentSize, \"Insert position out of bounds.\");\n\n        addChildren(index, children);\n        return this;\n    }",
    "begin_line": 468,
    "end_line": 476,
    "comment": "/** \n * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.\n * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at theend\n * @param children child nodes to insert\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendElement#485",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendElement(java.lang.String)",
    "snippet": "public Element appendElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }",
    "begin_line": 485,
    "end_line": 489,
    "comment": "/** \n * Create a new element by tag name, and add it as the last child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependElement#498",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependElement(java.lang.String)",
    "snippet": "public Element prependElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }",
    "begin_line": 498,
    "end_line": 502,
    "comment": "/** \n * Create a new element by tag name, and add it as the first child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendText#510",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendText(java.lang.String)",
    "snippet": "public Element appendText(String text) {\n        Validate.notNull(text);\n        TextNode node \u003d new TextNode(text);\n        appendChild(node);\n        return this;\n    }",
    "begin_line": 510,
    "end_line": 515,
    "comment": "/** \n * Create and append a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependText#523",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependText(java.lang.String)",
    "snippet": "public Element prependText(String text) {\n        Validate.notNull(text);\n        TextNode node \u003d new TextNode(text);\n        prependChild(node);\n        return this;\n    }",
    "begin_line": 523,
    "end_line": 528,
    "comment": "/** \n * Create and prepend a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.append#536",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.append(java.lang.String)",
    "snippet": "public Element append(String html) {\n        Validate.notNull(html);\n\n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 536,
    "end_line": 542,
    "comment": "/** \n * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n * @param html HTML to add inside this element, after the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prepend#550",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prepend(java.lang.String)",
    "snippet": "public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(0, nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 550,
    "end_line": 556,
    "comment": "/** \n * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element\u0027s children.\n * @param html HTML to add inside this element, before the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#566",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(java.lang.String)",
    "snippet": "@Override\n    public Element before(String html) {\n        return (Element) super.before(html);\n    }",
    "begin_line": 566,
    "end_line": 568,
    "comment": "/** \n * Insert the specified HTML into the DOM before this element (as a preceding sibling).\n * @param html HTML to add before this element\n * @return this element, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#577",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element before(Node node) {\n        return (Element) super.before(node);\n    }",
    "begin_line": 577,
    "end_line": 579,
    "comment": "/** \n * Insert the specified node into the DOM before this node (as a preceding sibling).\n * @param node to add before this element\n * @return this Element, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#589",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(java.lang.String)",
    "snippet": "@Override\n    public Element after(String html) {\n        return (Element) super.after(html);\n    }",
    "begin_line": 589,
    "end_line": 591,
    "comment": "/** \n * Insert the specified HTML into the DOM after this element (as a following sibling).\n * @param html HTML to add after this element\n * @return this element, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#600",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element after(Node node) {\n        return (Element) super.after(node);\n    }",
    "begin_line": 600,
    "end_line": 602,
    "comment": "/** \n * Insert the specified node into the DOM after this node (as a following sibling).\n * @param node to add after this element\n * @return this element, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.empty#608",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.empty()",
    "snippet": "public Element empty() {\n        childNodes.clear();\n        return this;\n    }",
    "begin_line": 608,
    "end_line": 611,
    "comment": "/** \n * Remove all of the element\u0027s child nodes. Any attributes are left as-is.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.wrap#620",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.wrap(java.lang.String)",
    "snippet": "@Override\n    public Element wrap(String html) {\n        return (Element) super.wrap(html);\n    }",
    "begin_line": 620,
    "end_line": 622,
    "comment": "/** \n * Wrap the supplied HTML around this element.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.cssSelector#634",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.cssSelector()",
    "snippet": "public String cssSelector() {\n        if (id().length() \u003e 0)\n            return \"#\" + id();\n\n        // Translate HTML namespace ns:tag to CSS namespace syntax ns|tag\n        String tagName \u003d tagName().replace(\u0027:\u0027, \u0027|\u0027);\n        StringBuilder selector \u003d new StringBuilder(tagName);\n        String classes \u003d StringUtil.join(classNames(), \".\");\n        if (classes.length() \u003e 0)\n            selector.append(\u0027.\u0027).append(classes);\n\n        if (parent() \u003d\u003d null || parent() instanceof Document) // don\u0027t add Document to selector, as will always have a html node\n            return selector.toString();\n\n        selector.insert(0, \" \u003e \");\n        if (parent().select(selector.toString()).size() \u003e 1)\n            selector.append(String.format(\n                \":nth-child(%d)\", elementSiblingIndex() + 1));\n\n        return parent().cssSelector() + selector.toString();\n    }",
    "begin_line": 634,
    "end_line": 654,
    "comment": "/** \n * Get a CSS selector that will uniquely select this element. \u003cp\u003e If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by  {@literal \u0027\u003e\u0027}, followed by a unique selector for the element (tag.class.class:nth-child(n)). \u003c/p\u003e\n * @return the CSS Path that can be used to retrieve the element in a selector.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.siblingElements#661",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.siblingElements()",
    "snippet": "public Elements siblingElements() {\n        if (parentNode \u003d\u003d null)\n            return new Elements(0);\n\n        List\u003cElement\u003e elements \u003d parent().childElementsList();\n        Elements siblings \u003d new Elements(elements.size() - 1);\n        for (Element el: elements)\n            if (el !\u003d this)\n                siblings.add(el);\n        return siblings;\n    }",
    "begin_line": 661,
    "end_line": 671,
    "comment": "/** \n * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list.\n * @return sibling elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nextElementSibling#682",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nextElementSibling()",
    "snippet": "public Element nextElementSibling() {\n        if (parentNode \u003d\u003d null) return null;\n        List\u003cElement\u003e siblings \u003d parent().childElementsList();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 682,
    "end_line": 691,
    "comment": "/** \n * Gets the next sibling element of this element. E.g., if a  {@code div} contains two {@code p}s,  the  {@code nextElementSibling} of the first {@code p} is the second {@code p}. \u003cp\u003e This is similar to  {@link #nextSibling()}, but specifically finds only Elements \u003c/p\u003e\n * @return the next element, or null if there is no next element\n * @see #previousElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.previousElementSibling#698",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.previousElementSibling()",
    "snippet": "public Element previousElementSibling() {\n        if (parentNode \u003d\u003d null) return null;\n        List\u003cElement\u003e siblings \u003d parent().childElementsList();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 698,
    "end_line": 707,
    "comment": "/** \n * Gets the previous element sibling of this element.\n * @return the previous element, or null if there is no previous element\n * @see #nextElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.firstElementSibling#713",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.firstElementSibling()",
    "snippet": "public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List\u003cElement\u003e siblings \u003d parent().childElementsList();\n        return siblings.size() \u003e 1 ? siblings.get(0) : null;\n    }",
    "begin_line": 713,
    "end_line": 717,
    "comment": "/** \n * Gets the first element sibling of this element.\n * @return the first sibling that is an element (aka the parent\u0027s first element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.elementSiblingIndex#724",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.elementSiblingIndex()",
    "snippet": "public int elementSiblingIndex() {\n       if (parent() \u003d\u003d null) return 0;\n       return indexInList(this, parent().childElementsList());\n    }",
    "begin_line": 724,
    "end_line": 727,
    "comment": "/** \n * Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0.\n * @return position in element sibling list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.lastElementSibling#733",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.lastElementSibling()",
    "snippet": "public Element lastElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().childElementsList();\n        return siblings.size() \u003e 1 ? siblings.get(siblings.size() - 1) : null;\n    }",
    "begin_line": 733,
    "end_line": 736,
    "comment": "/** \n * Gets the last element sibling of this element\n * @return the last sibling that is an element (aka the parent\u0027s last element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.indexInList#738",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.indexInList(org.jsoup.nodes.Element, java.util.List\u003cE\u003e)",
    "snippet": "private static \u003cE extends Element\u003e int indexInList(Element search, List\u003cE\u003e elements) {\n        for (int i \u003d 0; i \u003c elements.size(); i++) {\n            if (elements.get(i) \u003d\u003d search)\n                return i;\n        }\n        return 0;\n    }",
    "begin_line": 738,
    "end_line": 744,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByTag#753",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByTag(java.lang.String)",
    "snippet": "public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName \u003d normalize(tagName);\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }",
    "begin_line": 753,
    "end_line": 758,
    "comment": "/** \n * Finds elements, including and recursively under this element, with the specified tag name.\n * @param tagName The tag name to search for (case insensitively).\n * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementById#769",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementById(java.lang.String)",
    "snippet": "public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements \u003d Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() \u003e 0)\n            return elements.get(0);\n        else\n            return null;\n    }",
    "begin_line": 769,
    "end_line": 777,
    "comment": "/** \n * Find an element by ID, including or under this element. \u003cp\u003e Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use  {@link Document#getElementById(String)}\n * @param id The ID to search for.\n * @return The first matching element by ID, starting with this element, or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByClass#790",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByClass(java.lang.String)",
    "snippet": "public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }",
    "begin_line": 790,
    "end_line": 794,
    "comment": "/** \n * Find elements that have this class, including or under this element. Case insensitive. \u003cp\u003e Elements can have multiple classes (e.g.  {@code \u003cdiv class\u003d\"header round first\"\u003e}. This method checks each class, so you can find the above with  {@code el.getElementsByClass(\"header\");}.\n * @param className the name of the class to search for.\n * @return elements with the supplied class name, empty if none\n * @see #hasClass(String)\n * @see #classNames()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttribute#802",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttribute(java.lang.String)",
    "snippet": "public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key \u003d key.trim();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }",
    "begin_line": 802,
    "end_line": 807,
    "comment": "/** \n * Find elements that have a named attribute set. Case insensitive.\n * @param key name of the attribute, e.g. {@code href}\n * @return elements that have this attribute, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeStarting#815",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeStarting(java.lang.String)",
    "snippet": "public Elements getElementsByAttributeStarting(String keyPrefix) {\n        Validate.notEmpty(keyPrefix);\n        keyPrefix \u003d keyPrefix.trim();\n\n        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n    }",
    "begin_line": 815,
    "end_line": 820,
    "comment": "/** \n * Find elements that have an attribute name starting with the supplied prefix. Use  {@code data-} to find elementsthat have HTML5 datasets.\n * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n * @return elements that have attribute names that start with with the prefix, empty if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValue#829",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValue(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }",
    "begin_line": 829,
    "end_line": 831,
    "comment": "/** \n * Find elements that have an attribute with the specific value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that have this attribute with this value, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueNot#840",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueNot(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }",
    "begin_line": 840,
    "end_line": 842,
    "comment": "/** \n * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that do not have a matching attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueStarting#851",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueStarting(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }",
    "begin_line": 851,
    "end_line": 853,
    "comment": "/** \n * Find elements that have attributes that start with the value prefix. Case insensitive.\n * @param key name of the attribute\n * @param valuePrefix start of attribute value\n * @return elements that have attributes that start with the value prefix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueEnding#862",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }",
    "begin_line": 862,
    "end_line": 864,
    "comment": "/** \n * Find elements that have attributes that end with the value suffix. Case insensitive.\n * @param key name of the attribute\n * @param valueSuffix end of the attribute value\n * @return elements that have attributes that end with the value suffix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueContaining#873",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueContaining(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }",
    "begin_line": 873,
    "end_line": 875,
    "comment": "/** \n * Find elements that have attributes whose value contains the match string. Case insensitive.\n * @param key name of the attribute\n * @param match substring of value to search for\n * @return elements that have attributes containing this text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#883",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n        \n    }",
    "begin_line": 883,
    "end_line": 886,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param pattern compiled regular expression to match against attribute values\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#894",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsByAttributeValueMatching(key, pattern);\n    }",
    "begin_line": 894,
    "end_line": 902,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param regex regular expression to match against attribute values. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexLessThan#909",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexLessThan(int)",
    "snippet": "public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }",
    "begin_line": 909,
    "end_line": 911,
    "comment": "/** \n * Find elements whose sibling index is less than the supplied index.\n * @param index 0-based index\n * @return elements less than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexGreaterThan#918",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexGreaterThan(int)",
    "snippet": "public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }",
    "begin_line": 918,
    "end_line": 920,
    "comment": "/** \n * Find elements whose sibling index is greater than the supplied index.\n * @param index 0-based index\n * @return elements greater than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexEquals#927",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexEquals(int)",
    "snippet": "public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }",
    "begin_line": 927,
    "end_line": 929,
    "comment": "/** \n * Find elements whose sibling index is equal to the supplied index.\n * @param index 0-based index\n * @return elements equal to index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingText#938",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingText(java.lang.String)",
    "snippet": "public Elements getElementsContainingText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n    }",
    "begin_line": 938,
    "end_line": 940,
    "comment": "/** \n * Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants.\n * @param searchText to look for in the element\u0027s text\n * @return elements that contain the string, case insensitive.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingOwnText#949",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsContainingOwnText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n    }",
    "begin_line": 949,
    "end_line": 951,
    "comment": "/** \n * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants.\n * @param searchText to look for in the element\u0027s own text\n * @return elements that contain the string, case insensitive.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#959",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingText(Pattern pattern) {\n        return Collector.collect(new Evaluator.Matches(pattern), this);\n    }",
    "begin_line": 959,
    "end_line": 961,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#969",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingText(pattern);\n    }",
    "begin_line": 969,
    "end_line": 977,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#985",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingOwnText(Pattern pattern) {\n        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n    }",
    "begin_line": 985,
    "end_line": 987,
    "comment": "/** \n * Find elements whose own text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#995",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingOwnText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingOwnText(pattern);\n    }",
    "begin_line": 995,
    "end_line": 1003,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getAllElements#1010",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getAllElements()",
    "snippet": "public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }",
    "begin_line": 1010,
    "end_line": 1012,
    "comment": "/** \n * Find all elements under this element (including self, and children of children).\n * @return all elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#1023",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text()",
    "snippet": "public String text() {\n        final StringBuilder accum \u003d new StringBuilder();\n        NodeTraversor.traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode \u003d (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element \u003d (Element) node;\n                    if (accum.length() \u003e 0 \u0026\u0026\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) \u0026\u0026\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(\u0027 \u0027);\n                }\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        }, this);\n        return accum.toString().trim();\n    }",
    "begin_line": 1023,
    "end_line": 1043,
    "comment": "/** \n * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello  \u003cb\u003ethere\u003c/b\u003e now! \u003c/p\u003e},  {@code p.text()} returns {@code \"Hello there now!\"}\n * @return unencoded text, or empty string if none.\n * @see #ownText()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.head#1026",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode \u003d (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element \u003d (Element) node;\n                    if (accum.length() \u003e 0 \u0026\u0026\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) \u0026\u0026\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(\u0027 \u0027);\n                }\n            }",
    "begin_line": 1026,
    "end_line": 1037,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tail#1039",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            }",
    "begin_line": 1039,
    "end_line": 1040,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#1056",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText()",
    "snippet": "public String ownText() {\n        StringBuilder sb \u003d new StringBuilder();\n        ownText(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 1056,
    "end_line": 1060,
    "comment": "/** \n * Gets the text owned by this element only; does not get the combined text of all children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.ownText()} returns {@code \"Hello now!\"}, whereas  {@code p.text()} returns {@code \"Hello there now!\"}. Note that the text within the  {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n * @return unencoded text, or empty string if none.\n * @see #text()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#1062",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText(java.lang.StringBuilder)",
    "snippet": "private void ownText(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                appendWhitespaceIfBr((Element) child, accum);\n            }\n        }\n    }",
    "begin_line": 1062,
    "end_line": 1071,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendNormalisedText#1073",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
    "snippet": "private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n        String text \u003d textNode.getWholeText();\n\n        if (preserveWhitespace(textNode.parentNode))\n            accum.append(text);\n        else\n            StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));\n    }",
    "begin_line": 1073,
    "end_line": 1080,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendWhitespaceIfBr#1082",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendWhitespaceIfBr(org.jsoup.nodes.Element, java.lang.StringBuilder)",
    "snippet": "private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n        if (element.tag.getName().equals(\"br\") \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n            accum.append(\" \");\n    }",
    "begin_line": 1082,
    "end_line": 1085,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.preserveWhitespace#1087",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.preserveWhitespace(org.jsoup.nodes.Node)",
    "snippet": "static boolean preserveWhitespace(Node node) {\n        // looks only at this element and one level up, to prevent recursion \u0026 needless stack searches\n        if (node !\u003d null \u0026\u0026 node instanceof Element) {\n            Element element \u003d (Element) node;\n            return element.tag.preserveWhitespace() ||\n                element.parent() !\u003d null \u0026\u0026 element.parent().tag.preserveWhitespace();\n        }\n        return false;\n    }",
    "begin_line": 1087,
    "end_line": 1095,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#1102",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.String)",
    "snippet": "public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode \u003d new TextNode(text);\n        appendChild(textNode);\n\n        return this;\n    }",
    "begin_line": 1102,
    "end_line": 1110,
    "comment": "/** \n * Set the text of this element. Any existing contents (text or elements) will be cleared\n * @param text unencoded text\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasText#1116",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasText()",
    "snippet": "public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el \u003d (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 1116,
    "end_line": 1129,
    "comment": "/** \n * Test if this element has any text content (that is not just whitespace).\n * @return true if element has non-blank text content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.data#1140",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.data()",
    "snippet": "public String data() {\n        StringBuilder sb \u003d new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data \u003d (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Comment) {\n                Comment comment \u003d (Comment) childNode;\n                sb.append(comment.getData());\n            } else if (childNode instanceof Element) {\n                Element element \u003d (Element) childNode;\n                String elementData \u003d element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }",
    "begin_line": 1140,
    "end_line": 1157,
    "comment": "/** \n * Get the combined data of this element. Data is e.g. the inside of a  {@code script} tag. Note that data is NOT thetext of the element. Use  {@link #text()} to get the text that would be visible to a user, and {@link #data()}for the contents of scripts, comments, CSS styles, etc.\n * @return the data, or empty string if none\n * @see #dataNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.className#1164",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.className()",
    "snippet": "public String className() {\n        return attr(\"class\").trim();\n    }",
    "begin_line": 1164,
    "end_line": 1166,
    "comment": "/** \n * Gets the literal value of this element\u0027s \"class\" attribute, which may include multiple class names, space separated. (E.g. on \u003ccode\u003e\u0026lt;div class\u003d\"header gray\"\u0026gt;\u003c/code\u003e returns, \"\u003ccode\u003eheader gray\u003c/code\u003e\")\n * @return The literal class attribute, or \u003cb\u003eempty string\u003c/b\u003e if no class attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#1174",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames()",
    "snippet": "public Set\u003cString\u003e classNames() {\n    \tString[] names \u003d classSplit.split(className());\n    \tSet\u003cString\u003e classNames \u003d new LinkedHashSet\u003c\u003e(Arrays.asList(names));\n    \tclassNames.remove(\"\"); // if classNames() was empty, would include an empty class\n\n        return classNames;\n    }",
    "begin_line": 1174,
    "end_line": 1180,
    "comment": "/** \n * Get all of the element\u0027s class names. E.g. on element  {@code \u003cdiv class\u003d\"header gray\"\u003e}, returns a set of two elements  {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to the backing  {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n * @return set of classnames, empty if no class attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#1187",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public Element classNames(Set\u003cString\u003e classNames) {\n        Validate.notNull(classNames);\n        attributes().put(\"class\", StringUtil.join(classNames, \" \"));\n        return this;\n    }",
    "begin_line": 1187,
    "end_line": 1191,
    "comment": "/** \n * Set the element\u0027s  {@code class} attribute to the supplied class names.\n * @param classNames set of classes\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasClass#1199",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasClass(java.lang.String)",
    "snippet": " hasClass(String className) {\n        final String classAttr \u003d attributes().getIgnoreCase(\"class\");\n        final int len \u003d classAttr.length();\n        final int wantLen \u003d className.length();\n\n        if (len \u003d\u003d 0 || len \u003c wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len \u003d\u003d wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass \u003d false;\n        int start \u003d 0;\n        for (int i \u003d 0; i \u003c len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start \u003d\u003d wantLen \u0026\u0026 classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass \u003d false;\n                }\n            } else {\n                if (!inClass) {\n                    // we\u0027re in a class name : keep the start of the substring\n                    inClass \u003d true;\n                    start \u003d i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass \u0026\u0026 len - start \u003d\u003d wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "begin_line": 1199,
    "end_line": 1240,
    "comment": "/** \n * Tests if this element has a class. Case insensitive.\n * @param className name of class to check for\n * @return true if it does, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.addClass#1247",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.addClass(java.lang.String)",
    "snippet": "public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 1247,
    "end_line": 1255,
    "comment": "/** \n * Add a class name to this element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.removeClass#1262",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.removeClass(java.lang.String)",
    "snippet": "public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 1262,
    "end_line": 1270,
    "comment": "/** \n * Remove a class name from this element\u0027s  {@code class} attribute.\n * @param className class name to remove\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toggleClass#1277",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toggleClass(java.lang.String)",
    "snippet": "public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 1277,
    "end_line": 1288,
    "comment": "/** \n * Toggle a class name on this element\u0027s  {@code class} attribute: if present, remove it; otherwise add it.\n * @param className class name to toggle\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1294",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val()",
    "snippet": "public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }",
    "begin_line": 1294,
    "end_line": 1299,
    "comment": "/** \n * Get the value of a form element (input, textarea, etc).\n * @return the value of the form element, or empty string if not set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1306",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val(java.lang.String)",
    "snippet": "public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }",
    "begin_line": 1306,
    "end_line": 1312,
    "comment": "/** \n * Set the value of a form element (input, textarea, etc).\n * @param value value to set\n * @return this element (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlHead#1314",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException {\n        if (out.prettyPrint() \u0026\u0026 (tag.formatAsBlock() || (parent() !\u003d null \u0026\u0026 parent().tag().formatAsBlock()) || out.outline())) {\n            if (accum instanceof StringBuilder) {\n                if (((StringBuilder) accum).length() \u003e 0)\n                    indent(accum, depth, out);\n            } else {\n                indent(accum, depth, out);\n            }\n        }\n        accum.append(\u0027\u003c\u0027).append(tagName());\n        if (attributes !\u003d null) attributes.html(accum, out);\n\n        // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n        if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing()) {\n            if (out.syntax() \u003d\u003d Document.OutputSettings.Syntax.html \u0026\u0026 tag.isEmpty())\n                accum.append(\u0027\u003e\u0027);\n            else\n                accum.append(\" /\u003e\"); // \u003cimg\u003e in html, \u003cimg /\u003e in xml\n        }\n        else\n            accum.append(\u0027\u003e\u0027);\n    }",
    "begin_line": 1314,
    "end_line": 1335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlTail#1337",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (!(childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())) {\n            if (out.prettyPrint() \u0026\u0026 (!childNodes.isEmpty() \u0026\u0026 (\n                    tag.formatAsBlock() || (out.outline() \u0026\u0026 (childNodes.size()\u003e1 || (childNodes.size()\u003d\u003d1 \u0026\u0026 !(childNodes.get(0) instanceof TextNode))))\n            )))\n                indent(accum, depth, out);\n            accum.append(\"\u003c/\").append(tagName()).append(\u0027\u003e\u0027);\n        }\n    }",
    "begin_line": 1337,
    "end_line": 1345,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1354",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d StringUtil.stringBuilder();\n        html(accum);\n        return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();\n    }",
    "begin_line": 1354,
    "end_line": 1358,
    "comment": "/** \n * Retrieves the element\u0027s inner HTML. E.g. on a  {@code \u003cdiv\u003e} with one empty {@code \u003cp\u003e}, would return {@code \u003cp\u003e\u003c/p\u003e}. (Whereas  {@link #outerHtml()} would return {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e}.)\n * @return String of HTML.\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1360",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.StringBuilder)",
    "snippet": "private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }",
    "begin_line": 1360,
    "end_line": 1363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1369",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(T)",
    "snippet": "@Override\n    public \u003cT extends Appendable\u003e T html(T appendable) {\n        for (Node node : childNodes)\n            node.outerHtml(appendable);\n\n        return appendable;\n    }",
    "begin_line": 1369,
    "end_line": 1374,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1382",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.String)",
    "snippet": "public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }",
    "begin_line": 1382,
    "end_line": 1386,
    "comment": "/** \n * Set this element\u0027s inner HTML. Clears the existing HTML first.\n * @param html HTML to parse and set into this element\n * @return this element\n * @see #append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toString#1388",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 1388,
    "end_line": 1390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.clone#1393",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.clone()",
    "snippet": "@Override\n    public Element clone() {\n        return (Element) super.clone();\n    }",
    "begin_line": 1393,
    "end_line": 1395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.doClone#1398",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.doClone(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    protected Element doClone(Node parent) {\n        Element clone \u003d (Element) super.doClone(parent);\n        clone.attributes \u003d attributes !\u003d null ? attributes.clone() : null;\n        clone.baseUri \u003d baseUri;\n        clone.childNodes \u003d new NodeList(childNodes.size());\n        clone.childNodes.addAll(childNodes);\n\n        return clone;\n    }",
    "begin_line": 1398,
    "end_line": 1406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeList.NodeList#1409",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.NodeList(int)",
    "snippet": " NodeList(int initialCapacity) {\n            super(initialCapacity);\n        }",
    "begin_line": 1409,
    "end_line": 1411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeList.onContentsChanged#1413",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.onContentsChanged()",
    "snippet": "public void onContentsChanged() {\n            nodelistChanged();\n        }",
    "begin_line": 1413,
    "end_line": 1415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.EscapeMode#54",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.EscapeMode(java.lang.String, int)",
    "snippet": " EscapeMode(String file, int size) {\n            load(this, file, size);\n        }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.codepointForName#58",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.codepointForName(java.lang.String)",
    "snippet": "int codepointForName(final String name) {\n            int index \u003d Arrays.binarySearch(nameKeys, name);\n            return index \u003e\u003d 0 ? codeVals[index] : empty;\n        }",
    "begin_line": 58,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.nameForCodepoint#63",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.nameForCodepoint(int)",
    "snippet": "String nameForCodepoint(final int codepoint) {\n            final int index \u003d Arrays.binarySearch(codeKeys, codepoint);\n            if (index \u003e\u003d 0) {\n                // the results are ordered so lower case versions of same codepoint come after uppercase, and we prefer to emit lower\n                // (and binary search for same item with multi results is undefined\n                return (index \u003c nameVals.length - 1 \u0026\u0026 codeKeys[index + 1] \u003d\u003d codepoint) ?\n                    nameVals[index + 1] : nameVals[index];\n            }\n            return emptyName;\n        }",
    "begin_line": 63,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.size#74",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.size()",
    "snippet": "private int size() {\n            return nameKeys.length;\n        }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.Entities#81",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.Entities()",
    "snippet": "private Entities() {\n    }",
    "begin_line": 81,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.isNamedEntity#90",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.isNamedEntity(java.lang.String)",
    "snippet": "public static boolean isNamedEntity(final String name) {\n        return extended.codepointForName(name) !\u003d empty;\n    }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Check if the input is a known named entity\n * @param name the possible entity name (e.g. \"lt\" or \"amp\")\n * @return true if a known named entity\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.isBaseNamedEntity#101",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.isBaseNamedEntity(java.lang.String)",
    "snippet": "public static boolean isBaseNamedEntity(final String name) {\n        return base.codepointForName(name) !\u003d empty;\n    }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Check if the input is a known named entity in the base entity set.\n * @param name the possible entity name (e.g. \"lt\" or \"amp\")\n * @return true if a known named entity in the base set\n * @see #isNamedEntity(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.getCharacterByName#112",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.getCharacterByName(java.lang.String)",
    "snippet": "public static Character getCharacterByName(String name) {\n        return (char) extended.codepointForName(name);\n    }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "/** \n * Get the Character value of the named entity\n * @param name named entity (e.g. \"lt\" or \"amp\")\n * @return the Character value of the named entity (e.g. \u0027{@literal \u003c}\u0027 or \u0027 {@literal \u0026}\u0027)\n * @deprecated does not support characters outside the BMP or multiple character names\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.getByName#122",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.getByName(java.lang.String)",
    "snippet": "public static String getByName(String name) {\n        String val \u003d multipoints.get(name);\n        if (val !\u003d null)\n            return val;\n        int codepoint \u003d extended.codepointForName(name);\n        if (codepoint !\u003d empty)\n            return new String(new int[]{codepoint}, 0, 1);\n        return emptyName;\n    }",
    "begin_line": 122,
    "end_line": 130,
    "comment": "/** \n * Get the character(s) represented by the named entity\n * @param name entity (e.g. \"lt\" or \"amp\")\n * @return the string value of the character(s) represented by this entity, or \"\" if not defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.codepointsForName#132",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.codepointsForName(java.lang.String, int[])",
    "snippet": "public static int codepointsForName(final String name, final int[] codepoints) {\n        String val \u003d multipoints.get(name);\n        if (val !\u003d null) {\n            codepoints[0] \u003d val.codePointAt(0);\n            codepoints[1] \u003d val.codePointAt(1);\n            return 2;\n        }\n        int codepoint \u003d extended.codepointForName(name);\n        if (codepoint !\u003d empty) {\n            codepoints[0] \u003d codepoint;\n            return 1;\n        }\n        return 0;\n    }",
    "begin_line": 132,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#147",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "static String escape(String string, Document.OutputSettings out) {\n        StringBuilder accum \u003d new StringBuilder(string.length() * 2);\n        try {\n            escape(accum, string, out, false, false, false);\n        } catch (IOException e) {\n            throw new SerializationException(e); // doesn\u0027t happen\n        }\n        return accum.toString();\n    }",
    "begin_line": 147,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#158",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.Appendable, java.lang.String, org.jsoup.nodes.Document.OutputSettings, boolean, boolean, boolean)",
    "snippet": "static void escape(Appendable accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) throws IOException {\n\n        boolean lastWasWhite \u003d false;\n        boolean reachedNonWhite \u003d false;\n        final EscapeMode escapeMode \u003d out.escapeMode();\n        final CharsetEncoder encoder \u003d out.encoder !\u003d null ? out.encoder : out.prepareEncoder();\n        final CoreCharset coreCharset \u003d out.coreCharset; // init in out.prepareEncoder()\n        final int length \u003d string.length();\n\n        int codePoint;\n        for (int offset \u003d 0; offset \u003c length; offset +\u003d Character.charCount(codePoint)) {\n            codePoint \u003d string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite \u0026\u0026 !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(\u0027 \u0027);\n                    lastWasWhite \u003d true;\n                    continue;\n                } else {\n                    lastWasWhite \u003d false;\n                    reachedNonWhite \u003d true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint \u003c Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c \u003d (char) codePoint;\n                // html specific and required escapes:\n                switch (c) {\n                    case \u0027\u0026\u0027:\n                        accum.append(\"\u0026amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode !\u003d EscapeMode.xhtml)\n                            accum.append(\"\u0026nbsp;\");\n                        else\n                            accum.append(\"\u0026#xa0;\");\n                        break;\n                    case \u0027\u003c\u0027:\n                        // escape when in character data or when in a xml attribue val; not needed in html attr val\n                        if (!inAttribute || escapeMode \u003d\u003d EscapeMode.xhtml)\n                            accum.append(\"\u0026lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case \u0027\u003e\u0027:\n                        if (!inAttribute)\n                            accum.append(\"\u0026gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case \u0027\"\u0027:\n                        if (inAttribute)\n                            accum.append(\"\u0026quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else\n                            appendEncoded(accum, escapeMode, codePoint);\n                }\n            } else {\n                final String c \u003d new String(Character.toChars(codePoint));\n                if (encoder.canEncode(c)) // uses fallback encoder for simplicity\n                    accum.append(c);\n                else\n                    appendEncoded(accum, escapeMode, codePoint);\n            }\n        }\n    }",
    "begin_line": 158,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.appendEncoded#233",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.appendEncoded(java.lang.Appendable, org.jsoup.nodes.Entities.EscapeMode, int)",
    "snippet": "private static void appendEncoded(Appendable accum, EscapeMode escapeMode, int codePoint) throws IOException {\n        final String name \u003d escapeMode.nameForCodepoint(codePoint);\n        if (name !\u003d emptyName) // ok for identity check\n            accum.append(\u0027\u0026\u0027).append(name).append(\u0027;\u0027);\n        else\n            accum.append(\"\u0026#x\").append(Integer.toHexString(codePoint)).append(\u0027;\u0027);\n    }",
    "begin_line": 233,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.unescape#241",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String)",
    "snippet": "static String unescape(String string) {\n        return unescape(string, false);\n    }",
    "begin_line": 241,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.unescape#252",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String, boolean)",
    "snippet": "static String unescape(String string, boolean strict) {\n        return Parser.unescapeEntities(string, strict);\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Unescape the input string.\n * @param string to un-HTML-escape\n * @param strict if \"strict\" (that is, requires trailing \u0027;\u0027 char, otherwise that\u0027s optional)\n * @return unescaped string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.canEncode#269",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.canEncode(org.jsoup.nodes.Entities.CoreCharset, char, java.nio.charset.CharsetEncoder)",
    "snippet": "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\n        // todo add more charset tests if impacted by Android\u0027s bad perf in canEncode\n        switch (charset) {\n            case ascii:\n                return c \u003c 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }\n    }",
    "begin_line": 269,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.byName#284",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.byName(java.lang.String)",
    "snippet": "static CoreCharset byName(final String name) {\n            if (name.equals(\"US-ASCII\"))\n                return ascii;\n            if (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al\n                return utf;\n            return fallback;\n        }",
    "begin_line": 284,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.load#295",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.load(org.jsoup.nodes.Entities.EscapeMode, java.lang.String, int)",
    "snippet": "private static void load(EscapeMode e, String file, int size) {\n        e.nameKeys \u003d new String[size];\n        e.codeVals \u003d new int[size];\n        e.codeKeys \u003d new int[size];\n        e.nameVals \u003d new String[size];\n\n        InputStream stream \u003d Entities.class.getResourceAsStream(file);\n        if (stream \u003d\u003d null)\n            throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n\n        int i \u003d 0;\n        BufferedReader input \u003d null;\n        try {\n            input \u003d new BufferedReader(new InputStreamReader(stream, ASCII));\n            CharacterReader reader \u003d new CharacterReader(input);\n\n            while (!reader.isEmpty()) {\n                // NotNestedLessLess\u003d10913,824;1887\n\n                final String name \u003d reader.consumeTo(\u0027\u003d\u0027);\n                reader.advance();\n                final int cp1 \u003d Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\n                final char codeDelim \u003d reader.current();\n                reader.advance();\n                final int cp2;\n                if (codeDelim \u003d\u003d \u0027,\u0027) {\n                    cp2 \u003d Integer.parseInt(reader.consumeTo(\u0027;\u0027), codepointRadix);\n                    reader.advance();\n                } else {\n                    cp2 \u003d empty;\n                }\n                String indexS \u003d reader.consumeTo(\u0027\\n\u0027);\n                // default git checkout on windows will add a \\r there, so remove\n                if (indexS.charAt(indexS.length() - 1) \u003d\u003d \u0027\\r\u0027) {\n                    indexS \u003d indexS.substring(0, indexS.length() - 1);\n                }\n                final int index \u003d Integer.parseInt(indexS, codepointRadix);\n                reader.advance();\n\n                e.nameKeys[i] \u003d name;\n                e.codeVals[i] \u003d cp1;\n                e.codeKeys[index] \u003d cp1;\n                e.nameVals[index] \u003d name;\n\n                if (cp2 !\u003d empty) {\n                    multipoints.put(name, new String(new int[]{cp1, cp2}, 0, 2));\n                }\n                i++;\n            }\n        } finally {\n            try {\n                if (input !\u003d null) {\n                    input.close();\n                }\n            } catch (IOException e1) {\n                //ignore exception\n            }\n        }\n        Validate.isTrue(i \u003d\u003d size, \"Unexpected count of entities loaded for \" + file);\n    }",
    "begin_line": 295,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.hasAttributes#10",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.hasAttributes()",
    "snippet": "protected final boolean hasAttributes() {\n        return value instanceof Attributes;\n    }",
    "begin_line": 10,
    "end_line": 12,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.attributes#15",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.attributes()",
    "snippet": "@Override\n    public final Attributes attributes() {\n        ensureAttributes();\n        return (Attributes) value;\n    }",
    "begin_line": 15,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.ensureAttributes#20",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.ensureAttributes()",
    "snippet": "private void ensureAttributes() {\n        if (!hasAttributes()) {\n            Object coreValue \u003d value;\n            Attributes attributes \u003d new Attributes();\n            value \u003d attributes;\n            if (coreValue !\u003d null)\n                attributes.put(nodeName(), (String) coreValue);\n        }\n    }",
    "begin_line": 20,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.coreValue#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.coreValue()",
    "snippet": "String coreValue() {\n        return attr(nodeName());\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.coreValue#34",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.coreValue(java.lang.String)",
    "snippet": "void coreValue(String value) {\n        attr(nodeName(), value);\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.attr#39",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.attr(java.lang.String)",
    "snippet": "@Override\n    public String attr(String key) {\n        Validate.notNull(key);\n        if (!hasAttributes()) {\n            return key.equals(nodeName()) ? (String) value : EmptyString;\n        }\n        return super.attr(key);\n    }",
    "begin_line": 39,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.attr#48",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.attr(java.lang.String, java.lang.String)",
    "snippet": "@Override\n    public Node attr(String key, String value) {\n        if (!hasAttributes() \u0026\u0026 key.equals(nodeName())) {\n            this.value \u003d value;\n        } else {\n            ensureAttributes();\n            super.attr(key, value);\n        }\n        return this;\n    }",
    "begin_line": 48,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.hasAttr#59",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.hasAttr(java.lang.String)",
    "snippet": "@Override\n    public boolean hasAttr(String key) {\n        ensureAttributes();\n        return super.hasAttr(key);\n    }",
    "begin_line": 59,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.removeAttr#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.removeAttr(java.lang.String)",
    "snippet": "@Override\n    public Node removeAttr(String key) {\n        ensureAttributes();\n        return super.removeAttr(key);\n    }",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.absUrl#71",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.absUrl(java.lang.String)",
    "snippet": "@Override\n    public String absUrl(String key) {\n        ensureAttributes();\n        return super.absUrl(key);\n    }",
    "begin_line": 71,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.baseUri#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.baseUri()",
    "snippet": "@Override\n    public String baseUri() {\n        return hasParent() ? parent().baseUri() : \"\";\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.doSetBaseUri#82",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.doSetBaseUri(java.lang.String)",
    "snippet": "@Override\n    protected void doSetBaseUri(String baseUri) {\n        // noop\n    }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.childNodeSize#87",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.childNodeSize()",
    "snippet": "@Override\n    public int childNodeSize() {\n        return 0;\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeafNode.ensureChildNodes#92",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/LeafNode.java",
    "class_name": "org.jsoup.nodes.LeafNode",
    "signature": "org.jsoup.nodes.LeafNode.ensureChildNodes()",
    "snippet": "@Override\n    protected List\u003cNode\u003e ensureChildNodes() {\n        throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\");\n    }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#26",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node()",
    "snippet": "protected Node() {\n    }",
    "begin_line": 26,
    "end_line": 27,
    "comment": "/** \n * Default constructor. Doesn\u0027t setup base uri, children, or attributes; use with caution.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nodeName#33",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nodeName()",
    "snippet": "public abstract String nodeName();",
    "begin_line": 33,
    "end_line": 33,
    "comment": "/** \n * Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n * @return node name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasAttributes#38",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasAttributes()",
    "snippet": "protected abstract boolean hasAttributes();",
    "begin_line": 38,
    "end_line": 38,
    "comment": "/** \n * Check if this Node has an actual Attributes object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasParent#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasParent()",
    "snippet": "public boolean hasParent() {\n        return parentNode !\u003d null;\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#59",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        if (!hasAttributes())\n            return EmptyString;\n\n        String val \u003d attributes().getIgnoreCase(attributeKey);\n        if (val.length() \u003e 0)\n            return val;\n        else if (attributeKey.startsWith(\"abs:\"))\n            return absUrl(attributeKey.substring(\"abs:\".length()));\n        else return \"\";\n    }",
    "begin_line": 59,
    "end_line": 70,
    "comment": "/** \n * Get an attribute\u0027s value by its key. \u003cb\u003eCase insensitive\u003c/b\u003e \u003cp\u003e To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e, which is a shortcut to the  {@link #absUrl} method.\u003c/p\u003e E.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n * @param attributeKey The attribute key.\n * @return The attribute, or empty string if not present (to avoid nulls).\n * @see #attributes()\n * @see #hasAttr(String)\n * @see #absUrl(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attributes#76",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attributes()",
    "snippet": "public abstract Attributes attributes();",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * Get all of the element\u0027s attributes.\n * @return attributes (which implements iterable, in same order as presented in original HTML).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#85",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String, java.lang.String)",
    "snippet": "public Node attr(String attributeKey, String attributeValue) {\n        attributes().putIgnoreCase(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "/** \n * Set an attribute (key\u003dvalue). If the attribute already exists, it is replaced. The attribute key comparison is \u003cb\u003ecase insensitive\u003c/b\u003e.\n * @param attributeKey The attribute key.\n * @param attributeValue The attribute value.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasAttr#95",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributeKey.startsWith(\"abs:\")) {\n            String key \u003d attributeKey.substring(\"abs:\".length());\n            if (attributes().hasKeyIgnoreCase(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n                return true;\n        }\n        return attributes().hasKeyIgnoreCase(attributeKey);\n    }",
    "begin_line": 95,
    "end_line": 104,
    "comment": "/** \n * Test if this element has an attribute. \u003cb\u003eCase insensitive\u003c/b\u003e\n * @param attributeKey The attribute key to check.\n * @return true if the attribute exists, false if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeAttr#111",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeAttr(java.lang.String)",
    "snippet": "public Node removeAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        attributes().removeIgnoreCase(attributeKey);\n        return this;\n    }",
    "begin_line": 111,
    "end_line": 115,
    "comment": "/** \n * Remove an attribute from this element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.clearAttributes#121",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.clearAttributes()",
    "snippet": "public Node clearAttributes() {\n        Iterator\u003cAttribute\u003e it \u003d attributes().iterator();\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n        return this;\n    }",
    "begin_line": 121,
    "end_line": 128,
    "comment": "/** \n * Clear (remove) all of the attributes in this node.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.baseUri#134",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.baseUri()",
    "snippet": "public abstract String baseUri();",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * Get the base URI of this node.\n * @return base URI\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.doSetBaseUri#140",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.doSetBaseUri(java.lang.String)",
    "snippet": "protected abstract void doSetBaseUri(String baseUri);",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.\n * @param baseUri new URI\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setBaseUri#146",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setBaseUri(java.lang.String)",
    "snippet": "public void setBaseUri(final String baseUri) {\n        Validate.notNull(baseUri);\n\n        traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                node.doSetBaseUri(baseUri);\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        });\n    }",
    "begin_line": 146,
    "end_line": 157,
    "comment": "/** \n * Update the base URI of this node and all of its descendants.\n * @param baseUri base URI to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.head#150",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n                node.doSetBaseUri(baseUri);\n            }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.tail#154",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            }",
    "begin_line": 154,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.absUrl#182",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.absUrl(java.lang.String)",
    "snippet": "public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            return StringUtil.resolve(baseUri(), attr(attributeKey));\n        }\n    }",
    "begin_line": 182,
    "end_line": 190,
    "comment": "/** \n * Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;img src\u0026gt;\u003c/code\u003e). \u003cp\u003e E.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e \u003c/p\u003e \u003cp\u003e If the attribute value is already absolute (i.e. it starts with a protocol, like \u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element\u0027s  {@link #baseUri}, and made absolute using that. \u003c/p\u003e \u003cp\u003e As an alternate, you can use the  {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e \u003c/p\u003e\n * @param attributeKey The attribute key\n * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing orcould not be made successfully into a URL.\n * @see #attr\n * @see java.net.URL#URL(java.net.URL,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.ensureChildNodes#192",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.ensureChildNodes()",
    "snippet": "protected abstract List\u003cNode\u003e ensureChildNodes();",
    "begin_line": 192,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNode#199",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNode(int)",
    "snippet": "public Node childNode(int index) {\n        return ensureChildNodes().get(index);\n    }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "/** \n * Get a child node by its 0-based index.\n * @param index index of child node\n * @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodes#208",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodes()",
    "snippet": "public List\u003cNode\u003e childNodes() {\n        return Collections.unmodifiableList(ensureChildNodes());\n    }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * Get this node\u0027s children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated.\n * @return list of children. If no children, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodesCopy#217",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodesCopy()",
    "snippet": "public List\u003cNode\u003e childNodesCopy() {\n        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n        final ArrayList\u003cNode\u003e children \u003d new ArrayList\u003c\u003e(nodes.size());\n        for (Node node : nodes) {\n            children.add(node.clone());\n        }\n        return children;\n    }",
    "begin_line": 217,
    "end_line": 224,
    "comment": "/** \n * Returns a deep copy of this node\u0027s children. Changes made to these nodes will not be reflected in the original nodes\n * @return a deep copy of this node\u0027s children\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodeSize#230",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodeSize()",
    "snippet": "public abstract int childNodeSize();",
    "begin_line": 230,
    "end_line": 230,
    "comment": "/** \n * Get the number of child nodes that this node holds.\n * @return the number of child nodes that this node holds.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodesAsArray#232",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodesAsArray()",
    "snippet": "protected Node[] childNodesAsArray() {\n        return ensureChildNodes().toArray(new Node[childNodeSize()]);\n    }",
    "begin_line": 232,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.parent#240",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.parent()",
    "snippet": "public Node parent() {\n        return parentNode;\n    }",
    "begin_line": 240,
    "end_line": 242,
    "comment": "/** \n * Gets this node\u0027s parent node.\n * @return parent node; or null if no parent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.parentNode#248",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.parentNode()",
    "snippet": "public final Node parentNode() {\n        return parentNode;\n    }",
    "begin_line": 248,
    "end_line": 250,
    "comment": "/** \n * Gets this node\u0027s parent node. Not overridable by extending classes, so useful if you really just need the Node type.\n * @return parent node; or null if no parent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.root#256",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.root()",
    "snippet": "public Node root() {\n        Node node \u003d this;\n        while (node.parentNode !\u003d null)\n            node \u003d node.parentNode;\n        return node;\n    }",
    "begin_line": 256,
    "end_line": 261,
    "comment": "/** \n * Get this node\u0027s root node; that is, its topmost ancestor. If this node is the top ancestor, returns  {@code this}.\n * @return topmost ancestor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.ownerDocument#267",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.ownerDocument()",
    "snippet": "public Document ownerDocument() {\n        Node root \u003d root();\n        return (root instanceof Document) ? (Document) root : null;\n    }",
    "begin_line": 267,
    "end_line": 270,
    "comment": "/** \n * Gets the Document associated with this Node.\n * @return the Document associated with this Node, or null if there is no such Document.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.remove#275",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.remove()",
    "snippet": "public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }",
    "begin_line": 275,
    "end_line": 278,
    "comment": "/** \n * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#286",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(java.lang.String)",
    "snippet": "public Node before(String html) {\n        addSiblingHtml(siblingIndex, html);\n        return this;\n    }",
    "begin_line": 286,
    "end_line": 289,
    "comment": "/** \n * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).\n * @param html HTML to add before this node\n * @return this node, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#297",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(org.jsoup.nodes.Node)",
    "snippet": "public Node before(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex, node);\n        return this;\n    }",
    "begin_line": 297,
    "end_line": 303,
    "comment": "/** \n * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n * @param node to add before this node\n * @return this node, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#311",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(java.lang.String)",
    "snippet": "public Node after(String html) {\n        addSiblingHtml(siblingIndex + 1, html);\n        return this;\n    }",
    "begin_line": 311,
    "end_line": 314,
    "comment": "/** \n * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n * @param html HTML to add after this node\n * @return this node, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#322",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(org.jsoup.nodes.Node)",
    "snippet": "public Node after(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex + 1, node);\n        return this;\n    }",
    "begin_line": 322,
    "end_line": 328,
    "comment": "/** \n * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n * @param node to add after this node\n * @return this node, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addSiblingHtml#330",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addSiblingHtml(int, java.lang.String)",
    "snippet": "private void addSiblingHtml(int index, String html) {\n        Validate.notNull(html);\n        Validate.notNull(parentNode);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, context, baseUri());\n        parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n    }",
    "begin_line": 330,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.wrap#344",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.wrap(java.lang.String)",
    "snippet": "public Node wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n        List\u003cNode\u003e wrapChildren \u003d Parser.parseFragment(html, context, baseUri());\n        Node wrapNode \u003d wrapChildren.get(0);\n        if (wrapNode \u003d\u003d null || !(wrapNode instanceof Element)) // nothing to wrap with; noop\n            return null;\n\n        Element wrap \u003d (Element) wrapNode;\n        Element deepest \u003d getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalanced wrap, like \u003cdiv\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e -- The \u003cp\u003e is remainder\n        if (wrapChildren.size() \u003e 0) {\n            //noinspection ForLoopReplaceableByForEach (beacause it allocates an Iterator which is wasteful here)\n            for (int i \u003d 0; i \u003c wrapChildren.size(); i++) {\n                Node remainder \u003d wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }",
    "begin_line": 344,
    "end_line": 368,
    "comment": "/** \n * Wrap the supplied HTML around this node.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this node, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.unwrap#385",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.unwrap()",
    "snippet": "public Node unwrap() {\n        Validate.notNull(parentNode);\n        final List\u003cNode\u003e childNodes \u003d ensureChildNodes();\n        Node firstChild \u003d childNodes.size() \u003e 0 ? childNodes.get(0) : null;\n        parentNode.addChildren(siblingIndex, this.childNodesAsArray());\n        this.remove();\n\n        return firstChild;\n    }",
    "begin_line": 385,
    "end_line": 393,
    "comment": "/** \n * Removes this node from the DOM, and moves its children up into the node\u0027s parent. This has the effect of dropping the node but keeping its children. \u003cp\u003e For example, with the input html: \u003c/p\u003e \u003cp\u003e {@code \u003cdiv\u003eOne \u003cspan\u003eTwo \u003cb\u003eThree\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e}\u003c/p\u003e Calling  {@code element.unwrap()} on the {@code span} element will result in the html:\u003cp\u003e {@code \u003cdiv\u003eOne Two \u003cb\u003eThree\u003c/b\u003e\u003c/div\u003e}\u003c/p\u003e and the  {@code \"Two \"} {@link TextNode} being returned.\n * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n * @see #remove()\n * @see #wrap(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getDeepChild#395",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getDeepChild(org.jsoup.nodes.Element)",
    "snippet": "private Element getDeepChild(Element el) {\n        List\u003cElement\u003e children \u003d el.children();\n        if (children.size() \u003e 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }",
    "begin_line": 395,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nodelistChanged#403",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nodelistChanged()",
    "snippet": "void nodelistChanged() {\n        // Element overrides this to clear its shadow children elements\n    }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceWith#411",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceWith(org.jsoup.nodes.Node)",
    "snippet": "public void replaceWith(Node in) {\n        Validate.notNull(in);\n        Validate.notNull(parentNode);\n        parentNode.replaceChild(this, in);\n    }",
    "begin_line": 411,
    "end_line": 415,
    "comment": "/** \n * Replace this node in the DOM with the supplied node.\n * @param in the node that will will replace the existing node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setParentNode#417",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setParentNode(org.jsoup.nodes.Node)",
    "snippet": "protected void setParentNode(Node parentNode) {\n        Validate.notNull(parentNode);\n        if (this.parentNode !\u003d null)\n            this.parentNode.removeChild(this);\n        this.parentNode \u003d parentNode;\n    }",
    "begin_line": 417,
    "end_line": 422,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceChild#424",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
    "snippet": "protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        Validate.notNull(in);\n        if (in.parentNode !\u003d null)\n            in.parentNode.removeChild(in);\n\n        final int index \u003d out.siblingIndex;\n        ensureChildNodes().set(index, in);\n        in.parentNode \u003d this;\n        in.setSiblingIndex(index);\n        out.parentNode \u003d null;\n    }",
    "begin_line": 424,
    "end_line": 435,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeChild#437",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeChild(org.jsoup.nodes.Node)",
    "snippet": "protected void removeChild(Node out) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        final int index \u003d out.siblingIndex;\n        ensureChildNodes().remove(index);\n        reindexChildren(index);\n        out.parentNode \u003d null;\n    }",
    "begin_line": 437,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#445",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(Node... children) {\n        //most used. short circuit addChildren(int), which hits reindex children and array copy\n        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n\n        for (Node child: children) {\n            reparentChild(child);\n            nodes.add(child);\n            child.setSiblingIndex(nodes.size()-1);\n        }\n    }",
    "begin_line": 445,
    "end_line": 454,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#456",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(int, org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n\n        for (Node child : children) {\n            reparentChild(child);\n        }\n        nodes.addAll(index, Arrays.asList(children));\n        reindexChildren(index);\n    }",
    "begin_line": 456,
    "end_line": 465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reparentChild#467",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reparentChild(org.jsoup.nodes.Node)",
    "snippet": "protected void reparentChild(Node child) {\n        child.setParentNode(this);\n    }",
    "begin_line": 467,
    "end_line": 469,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reindexChildren#471",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reindexChildren(int)",
    "snippet": "private void reindexChildren(int start) {\n        final List\u003cNode\u003e childNodes \u003d ensureChildNodes();\n\n        for (int i \u003d start; i \u003c childNodes.size(); i++) {\n            childNodes.get(i).setSiblingIndex(i);\n        }\n    }",
    "begin_line": 471,
    "end_line": 477,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingNodes#484",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingNodes()",
    "snippet": "public List\u003cNode\u003e siblingNodes() {\n        if (parentNode \u003d\u003d null)\n            return Collections.emptyList();\n\n        List\u003cNode\u003e nodes \u003d parentNode.ensureChildNodes();\n        List\u003cNode\u003e siblings \u003d new ArrayList\u003c\u003e(nodes.size() - 1);\n        for (Node node: nodes)\n            if (node !\u003d this)\n                siblings.add(node);\n        return siblings;\n    }",
    "begin_line": 484,
    "end_line": 494,
    "comment": "/** \n * Retrieves this node\u0027s sibling nodes. Similar to  {@link #childNodes()  node.parent.childNodes()}, but does not include this node (a node is not a sibling of itself).\n * @return node siblings. If the node has no parent, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nextSibling#500",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nextSibling()",
    "snippet": "public Node nextSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n\n        final List\u003cNode\u003e siblings \u003d parentNode.ensureChildNodes();\n        final int index \u003d siblingIndex+1;\n        if (siblings.size() \u003e index)\n            return siblings.get(index);\n        else\n            return null;\n    }",
    "begin_line": 500,
    "end_line": 510,
    "comment": "/** \n * Get this node\u0027s next sibling.\n * @return next sibling, or null if this is the last sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.previousSibling#516",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.previousSibling()",
    "snippet": "public Node previousSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n\n        if (siblingIndex \u003e 0)\n            return parentNode.ensureChildNodes().get(siblingIndex-1);\n        else\n            return null;\n    }",
    "begin_line": 516,
    "end_line": 524,
    "comment": "/** \n * Get this node\u0027s previous sibling.\n * @return the previous sibling, or null if this is the first sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingIndex#532",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingIndex()",
    "snippet": "public int siblingIndex() {\n        return siblingIndex;\n    }",
    "begin_line": 532,
    "end_line": 534,
    "comment": "/** \n * Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.\n * @return position in node sibling list\n * @see org.jsoup.nodes.Element#elementSiblingIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setSiblingIndex#536",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setSiblingIndex(int)",
    "snippet": "protected void setSiblingIndex(int siblingIndex) {\n        this.siblingIndex \u003d siblingIndex;\n    }",
    "begin_line": 536,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.traverse#545",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.traverse(org.jsoup.select.NodeVisitor)",
    "snippet": "public Node traverse(NodeVisitor nodeVisitor) {\n        Validate.notNull(nodeVisitor);\n        NodeTraversor.traverse(nodeVisitor, this);\n        return this;\n    }",
    "begin_line": 545,
    "end_line": 549,
    "comment": "/** \n * Perform a depth-first traversal through this node and its descendants.\n * @param nodeVisitor the visitor callbacks to perform on each node\n * @return this node, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.filter#556",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.filter(org.jsoup.select.NodeFilter)",
    "snippet": "public Node filter(NodeFilter nodeFilter) {\n        Validate.notNull(nodeFilter);\n        NodeTraversor.filter(nodeFilter, this);\n        return this;\n    }",
    "begin_line": 556,
    "end_line": 560,
    "comment": "/** \n * Perform a depth-first filtering through this node and its descendants.\n * @param nodeFilter the filter callbacks to perform on each node\n * @return this node, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#566",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder accum \u003d new StringBuilder(128);\n        outerHtml(accum);\n        return accum.toString();\n    }",
    "begin_line": 566,
    "end_line": 570,
    "comment": "/** \n * Get the outer HTML of this node.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#572",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml(java.lang.Appendable)",
    "snippet": "protected void outerHtml(Appendable accum) {\n        NodeTraversor.traverse(new OuterHtmlVisitor(accum, getOutputSettings()), this);\n    }",
    "begin_line": 572,
    "end_line": 574,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getOutputSettings#577",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getOutputSettings()",
    "snippet": "Document.OutputSettings getOutputSettings() {\n        Document owner \u003d ownerDocument();\n        return owner !\u003d null ? owner.outputSettings() : (new Document(\"\")).outputSettings();\n    }",
    "begin_line": 577,
    "end_line": 580,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlHead#587",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException;",
    "begin_line": 587,
    "end_line": 587,
    "comment": "/** \n * Get the outer HTML of this node.\n * @param accum accumulator to place HTML into\n * @throws IOException if appending to the given accumulator fails.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlTail#589",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlTail(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException;",
    "begin_line": 589,
    "end_line": 589,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.html#597",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.html(T)",
    "snippet": "public \u003cT extends Appendable\u003e T html(T appendable) {\n        outerHtml(appendable);\n        return appendable;\n    }",
    "begin_line": 597,
    "end_line": 600,
    "comment": "/** \n * Write this node and its children to the given  {@link Appendable}.\n * @param appendable the {@link Appendable} to write to.\n * @return the supplied {@link Appendable}, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.toString#602",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 602,
    "end_line": 604,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.indent#606",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.indent(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void indent(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        accum.append(\u0027\\n\u0027).append(StringUtil.padding(depth * out.indentAmount()));\n    }",
    "begin_line": 606,
    "end_line": 608,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.equals#617",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        // implemented just so that javadoc is clear this is an identity test\n        return this \u003d\u003d o;\n    }",
    "begin_line": 617,
    "end_line": 620,
    "comment": "/** \n * Check if this node is the same instance of another (object identity test).\n * @param o other object to compare to\n * @return true if the content of this node is the same as the other\n * @see Node#hasSameValue(Object) to compare nodes by their value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasSameValue#629",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasSameValue(java.lang.Object)",
    "snippet": "public boolean hasSameValue(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n\n        return this.outerHtml().equals(((Node) o).outerHtml());\n    }",
    "begin_line": 629,
    "end_line": 634,
    "comment": "/** \n * Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity.\n * @param o other object to compare to\n * @return true if the content of this node is the same as the other\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.clone#645",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.clone()",
    "snippet": "@Override\n    public Node clone() {\n        Node thisClone \u003d doClone(null); // splits for orphan\n\n        // Queue up nodes that need their children cloned (BFS).\n        final LinkedList\u003cNode\u003e nodesToProcess \u003d new LinkedList\u003c\u003e();\n        nodesToProcess.add(thisClone);\n\n        while (!nodesToProcess.isEmpty()) {\n            Node currParent \u003d nodesToProcess.remove();\n\n            final int size \u003d currParent.childNodeSize();\n            for (int i \u003d 0; i \u003c size; i++) {\n                final List\u003cNode\u003e childNodes \u003d currParent.ensureChildNodes();\n                Node childClone \u003d childNodes.get(i).doClone(currParent);\n                childNodes.set(i, childClone);\n                nodesToProcess.add(childClone);\n            }\n        }\n\n        return thisClone;\n    }",
    "begin_line": 645,
    "end_line": 665,
    "comment": "/** \n * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. \u003cp\u003e The cloned node may be adopted into another Document or node structure using  {@link Element#appendChild(Node)}.\n * @return stand-alone cloned node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.doClone#671",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.doClone(org.jsoup.nodes.Node)",
    "snippet": "protected Node doClone(Node parent) {\n        Node clone;\n\n        try {\n            clone \u003d (Node) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n\n        clone.parentNode \u003d parent; // can be null, to create an orphan split\n        clone.siblingIndex \u003d parent \u003d\u003d null ? 0 : siblingIndex;\n\n        return clone;\n    }",
    "begin_line": 671,
    "end_line": 684,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.OuterHtmlVisitor#690",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": " OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\n            this.accum \u003d accum;\n            this.out \u003d out;\n            out.prepareEncoder();\n        }",
    "begin_line": 690,
    "end_line": 694,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.head#696",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n            try {\n\t\t\t\tnode.outerHtmlHead(accum, depth, out);\n\t\t\t} catch (IOException exception) {\n\t\t\t\tthrow new SerializationException(exception);\n\t\t\t}\n        }",
    "begin_line": 696,
    "end_line": 702,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.tail#704",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) { // saves a void hit.\n\t\t\t\ttry {\n\t\t\t\t\tnode.outerHtmlTail(accum, depth, out);\n\t\t\t\t} catch (IOException exception) {\n\t\t\t\t\tthrow new SerializationException(exception);\n\t\t\t\t}\n            }\n        }",
    "begin_line": 704,
    "end_line": 712,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.TextNode#20",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.TextNode(java.lang.String)",
    "snippet": "public TextNode(String text) {\n        value \u003d text;\n    }",
    "begin_line": 20,
    "end_line": 22,
    "comment": "/** \n * Create a new TextNode representing the supplied (unencoded) text).\n * @param text raw text\n * @see #createFromEncoded(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.TextNode#32",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.TextNode(java.lang.String, java.lang.String)",
    "snippet": "public TextNode(String text, String baseUri) {\n        this(text);\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Create a new TextNode representing the supplied (unencoded) text).\n * @param text raw text\n * @param baseUri base uri - ignored for this node type\n * @see #createFromEncoded(String,String)\n * @deprecated use {@link TextNode#TextNode(String)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.nodeName#36",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.nodeName()",
    "snippet": "public String nodeName() {\n        return \"#text\";\n    }",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.text#45",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.text()",
    "snippet": "public String text() {\n        return normaliseWhitespace(getWholeText());\n    }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "/** \n * Get the text content of this text node.\n * @return Unencoded, normalised text.\n * @see TextNode#getWholeText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.text#54",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.text(java.lang.String)",
    "snippet": "public TextNode text(String text) {\n        coreValue(text);\n        return this;\n    }",
    "begin_line": 54,
    "end_line": 57,
    "comment": "/** \n * Set the text content of this text node.\n * @param text unencoded text\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.getWholeText#63",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.getWholeText()",
    "snippet": "public String getWholeText() {\n        return coreValue();\n    }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "/** \n * Get the (unencoded) text of this text node, including any newlines and spaces present in the original.\n * @return text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.isBlank#71",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.isBlank()",
    "snippet": "public boolean isBlank() {\n        return StringUtil.isBlank(coreValue());\n    }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Test if this text node is blank -- that is, empty or only whitespace (including newlines).\n * @return true if this document is empty or only whitespace, false if it contains any text content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.splitText#81",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.splitText(int)",
    "snippet": "public TextNode splitText(int offset) {\n        final String text \u003d coreValue();\n        Validate.isTrue(offset \u003e\u003d 0, \"Split offset must be not be negative\");\n        Validate.isTrue(offset \u003c text.length(), \"Split offset must not be greater than current text length\");\n\n        String head \u003d text.substring(0, offset);\n        String tail \u003d text.substring(offset);\n        text(head);\n        TextNode tailNode \u003d new TextNode(tail);\n        if (parent() !\u003d null)\n            parent().addChildren(siblingIndex()+1, tailNode);\n\n        return tailNode;\n    }",
    "begin_line": 81,
    "end_line": 94,
    "comment": "/** \n * Split this text node into two nodes at the specified string offset. After splitting, this node will contain the original text up to the offset, and will have a new text node sibling containing the text after the offset.\n * @param offset string offset point to split node at.\n * @return the newly created text node containing the text after the offset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.outerHtmlHead#96",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (out.prettyPrint() \u0026\u0026 ((siblingIndex() \u003d\u003d 0 \u0026\u0026 parentNode instanceof Element \u0026\u0026 ((Element) parentNode).tag().formatAsBlock() \u0026\u0026 !isBlank()) || (out.outline() \u0026\u0026 siblingNodes().size()\u003e0 \u0026\u0026 !isBlank()) ))\n            indent(accum, depth, out);\n\n        boolean normaliseWhite \u003d out.prettyPrint() \u0026\u0026 parent() instanceof Element\n                \u0026\u0026 !Element.preserveWhitespace(parent());\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, false);\n    }",
    "begin_line": 96,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.outerHtmlTail#105",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}",
    "begin_line": 105,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.toString#108",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.toString()",
    "snippet": "@Override\n    public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.createFromEncoded#119",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.createFromEncoded(java.lang.String, java.lang.String)",
    "snippet": "public static TextNode createFromEncoded(String encodedText, String baseUri) {\n        String text \u003d Entities.unescape(encodedText);\n        return new TextNode(text);\n    }",
    "begin_line": 119,
    "end_line": 122,
    "comment": "/** \n * Create a new TextNode from HTML encoded (aka escaped) data.\n * @param encodedText Text containing encoded HTML (e.g. \u0026amp;lt;)\n * @param baseUri Base uri\n * @return TextNode containing unencoded data (e.g. \u0026lt;)\n * @deprecated use {@link TextNode#createFromEncoded(String)} instead, as LeafNodes don\u0027t carry base URIs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.createFromEncoded#129",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.createFromEncoded(java.lang.String)",
    "snippet": "public static TextNode createFromEncoded(String encodedText) {\n        String text \u003d Entities.unescape(encodedText);\n        return new TextNode(text);\n    }",
    "begin_line": 129,
    "end_line": 132,
    "comment": "/** \n * Create a new TextNode from HTML encoded (aka escaped) data.\n * @param encodedText Text containing encoded HTML (e.g. \u0026amp;lt;)\n * @return TextNode containing unencoded data (e.g. \u0026lt;)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.normaliseWhitespace#134",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.normaliseWhitespace(java.lang.String)",
    "snippet": "static String normaliseWhitespace(String text) {\n        text \u003d StringUtil.normaliseWhitespace(text);\n        return text;\n    }",
    "begin_line": 134,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.stripLeadingWhitespace#139",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.stripLeadingWhitespace(java.lang.String)",
    "snippet": "static String stripLeadingWhitespace(String text) {\n        return text.replaceFirst(\"^\\\\s+\", \"\");\n    }",
    "begin_line": 139,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextNode.lastCharIsWhitespace#143",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/TextNode.java",
    "class_name": "org.jsoup.nodes.TextNode",
    "signature": "org.jsoup.nodes.TextNode.lastCharIsWhitespace(java.lang.StringBuilder)",
    "snippet": "static boolean lastCharIsWhitespace(StringBuilder sb) {\n        return sb.length() !\u003d 0 \u0026\u0026 sb.charAt(sb.length() - 1) \u003d\u003d \u0027 \u0027;\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.CharacterReader#30",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.CharacterReader(java.io.Reader, int)",
    "snippet": "public CharacterReader(Reader input, int sz) {\n        Validate.notNull(input);\n        Validate.isTrue(input.markSupported());\n        reader \u003d input;\n        charBuf \u003d new char[sz \u003e maxBufferLen ? maxBufferLen : sz];\n        bufferUp();\n    }",
    "begin_line": 30,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.CharacterReader#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.CharacterReader(java.io.Reader)",
    "snippet": "public CharacterReader(Reader input) {\n        this(input, maxBufferLen);\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.CharacterReader#42",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.CharacterReader(java.lang.String)",
    "snippet": "public CharacterReader(String input) {\n        this(new StringReader(input), input.length());\n    }",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.bufferUp#46",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.bufferUp()",
    "snippet": "private void bufferUp() {\n        if (bufPos \u003c bufSplitPoint)\n            return;\n\n        try {\n            readerPos +\u003d bufPos;\n            reader.skip(bufPos);\n            reader.mark(maxBufferLen);\n            bufLength \u003d reader.read(charBuf);\n            reader.reset();\n            bufPos \u003d 0;\n            bufMark \u003d 0;\n            bufSplitPoint \u003d bufLength \u003e readAheadLimit ? readAheadLimit : bufLength;\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }",
    "begin_line": 46,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.pos#68",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.pos()",
    "snippet": "public int pos() {\n        return readerPos + bufPos;\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Gets the current cursor position in the content.\n * @return current position\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.isEmpty#76",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return bufPos \u003e\u003d bufLength;\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Tests if all the content has been read.\n * @return true if nothing left to read.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.current#84",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.current()",
    "snippet": "public char current() {\n        bufferUp();\n        return isEmpty() ? EOF : charBuf[bufPos];\n    }",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Get the char at the current position.\n * @return char\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consume#89",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consume()",
    "snippet": "char consume() {\n        bufferUp();\n        char val \u003d isEmpty() ? EOF : charBuf[bufPos];\n        bufPos++;\n        return val;\n    }",
    "begin_line": 89,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.unconsume#96",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.unconsume()",
    "snippet": "void unconsume() {\n        bufPos--;\n    }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.advance#103",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.advance()",
    "snippet": "public void advance() {\n        bufPos++;\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Moves the current position by one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.mark#107",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.mark()",
    "snippet": "void mark() {\n        bufMark \u003d bufPos;\n    }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.rewindToMark#111",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.rewindToMark()",
    "snippet": "void rewindToMark() {\n        bufPos \u003d bufMark;\n    }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.nextIndexOf#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.nextIndexOf(char)",
    "snippet": "int nextIndexOf(char c) {\n        // doesn\u0027t handle scanning for surrogates\n        bufferUp();\n        for (int i \u003d bufPos; i \u003c bufLength; i++) {\n            if (c \u003d\u003d charBuf[i])\n                return i - bufPos;\n        }\n        return -1;\n    }",
    "begin_line": 120,
    "end_line": 128,
    "comment": "/** \n * Returns the number of characters between the current position and the next instance of the input char\n * @param c scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.nextIndexOf#136",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.nextIndexOf(java.lang.CharSequence)",
    "snippet": "int nextIndexOf(CharSequence seq) {\n        bufferUp();\n        // doesn\u0027t handle scanning for surrogates\n        char startChar \u003d seq.charAt(0);\n        for (int offset \u003d bufPos; offset \u003c bufLength; offset++) {\n            // scan to first instance of startchar:\n            if (startChar !\u003d charBuf[offset])\n                while(++offset \u003c bufLength \u0026\u0026 startChar !\u003d charBuf[offset]) { /* empty */ }\n            int i \u003d offset + 1;\n            int last \u003d i + seq.length()-1;\n            if (offset \u003c bufLength \u0026\u0026 last \u003c\u003d bufLength) {\n                for (int j \u003d 1; i \u003c last \u0026\u0026 seq.charAt(j) \u003d\u003d charBuf[i]; i++, j++) { /* empty */ }\n                if (i \u003d\u003d last) // found full sequence\n                    return offset - bufPos;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 136,
    "end_line": 153,
    "comment": "/** \n * Returns the number of characters between the current position and the next instance of the input sequence\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeTo#160",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeTo(char)",
    "snippet": "public String consumeTo(char c) {\n        int offset \u003d nextIndexOf(c);\n        if (offset !\u003d -1) {\n            String consumed \u003d cacheString(charBuf, stringCache, bufPos, offset);\n            bufPos +\u003d offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }",
    "begin_line": 160,
    "end_line": 169,
    "comment": "/** \n * Reads characters up to the specific char.\n * @param c the delimiter\n * @return the chars read\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeTo#171",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeTo(java.lang.String)",
    "snippet": "String consumeTo(String seq) {\n        int offset \u003d nextIndexOf(seq);\n        if (offset !\u003d -1) {\n            String consumed \u003d cacheString(charBuf, stringCache, bufPos, offset);\n            bufPos +\u003d offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }",
    "begin_line": 171,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeToAny#187",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeToAny(char)",
    "snippet": "public String consumeToAny(final char... chars) {\n        bufferUp();\n        final int start \u003d bufPos;\n        final int remaining \u003d bufLength;\n        final char[] val \u003d charBuf;\n\n        OUTER: while (bufPos \u003c remaining) {\n            for (char c : chars) {\n                if (val[bufPos] \u003d\u003d c)\n                    break OUTER;\n            }\n            bufPos++;\n        }\n\n        return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n    }",
    "begin_line": 187,
    "end_line": 202,
    "comment": "/** \n * Read characters until the first of any delimiters is found.\n * @param chars delimiters to scan for\n * @return characters read up to the matched delimiter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeToAnySorted#204",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeToAnySorted(char)",
    "snippet": "String consumeToAnySorted(final char... chars) {\n        bufferUp();\n        final int start \u003d bufPos;\n        final int remaining \u003d bufLength;\n        final char[] val \u003d charBuf;\n\n        while (bufPos \u003c remaining) {\n            if (Arrays.binarySearch(chars, val[bufPos]) \u003e\u003d 0)\n                break;\n            bufPos++;\n        }\n\n        return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n    }",
    "begin_line": 204,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeData#219",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeData()",
    "snippet": "String consumeData() {\n        // \u0026, \u003c, null\n        bufferUp();\n        final int start \u003d bufPos;\n        final int remaining \u003d bufLength;\n        final char[] val \u003d charBuf;\n\n        while (bufPos \u003c remaining) {\n            final char c \u003d val[bufPos];\n            if (c \u003d\u003d \u0027\u0026\u0027|| c \u003d\u003d  \u0027\u003c\u0027 || c \u003d\u003d  TokeniserState.nullChar)\n                break;\n            bufPos++;\n        }\n\n        return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n    }",
    "begin_line": 219,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeTagName#236",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeTagName()",
    "snippet": "String consumeTagName() {\n        // \u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027, \u0027/\u0027, \u0027\u003e\u0027, nullChar\n        bufferUp();\n        final int start \u003d bufPos;\n        final int remaining \u003d bufLength;\n        final char[] val \u003d charBuf;\n\n        while (bufPos \u003c remaining) {\n            final char c \u003d val[bufPos];\n            if (c \u003d\u003d \u0027\\t\u0027|| c \u003d\u003d  \u0027\\n\u0027|| c \u003d\u003d  \u0027\\r\u0027|| c \u003d\u003d  \u0027\\f\u0027|| c \u003d\u003d  \u0027 \u0027|| c \u003d\u003d  \u0027/\u0027|| c \u003d\u003d  \u0027\u003e\u0027|| c \u003d\u003d  TokeniserState.nullChar)\n                break;\n            bufPos++;\n        }\n\n        return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n    }",
    "begin_line": 236,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeToEnd#253",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeToEnd()",
    "snippet": "String consumeToEnd() {\n        bufferUp();\n        String data \u003d cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);\n        bufPos \u003d bufLength;\n        return data;\n    }",
    "begin_line": 253,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeLetterSequence#260",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeLetterSequence()",
    "snippet": "String consumeLetterSequence() {\n        bufferUp();\n        int start \u003d bufPos;\n        while (bufPos \u003c bufLength) {\n            char c \u003d charBuf[bufPos];\n            if ((c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) || Character.isLetter(c))\n                bufPos++;\n            else\n                break;\n        }\n\n        return cacheString(charBuf, stringCache, start, bufPos - start);\n    }",
    "begin_line": 260,
    "end_line": 272,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeLetterThenDigitSequence#274",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeLetterThenDigitSequence()",
    "snippet": "String consumeLetterThenDigitSequence() {\n        bufferUp();\n        int start \u003d bufPos;\n        while (bufPos \u003c bufLength) {\n            char c \u003d charBuf[bufPos];\n            if ((c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) || Character.isLetter(c))\n                bufPos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c \u003d charBuf[bufPos];\n            if (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027)\n                bufPos++;\n            else\n                break;\n        }\n\n        return cacheString(charBuf, stringCache, start, bufPos - start);\n    }",
    "begin_line": 274,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeHexSequence#295",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeHexSequence()",
    "snippet": "String consumeHexSequence() {\n        bufferUp();\n        int start \u003d bufPos;\n        while (bufPos \u003c bufLength) {\n            char c \u003d charBuf[bufPos];\n            if ((c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027) || (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027F\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027f\u0027))\n                bufPos++;\n            else\n                break;\n        }\n        return cacheString(charBuf, stringCache, start, bufPos - start);\n    }",
    "begin_line": 295,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.consumeDigitSequence#308",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.consumeDigitSequence()",
    "snippet": "String consumeDigitSequence() {\n        bufferUp();\n        int start \u003d bufPos;\n        while (bufPos \u003c bufLength) {\n            char c \u003d charBuf[bufPos];\n            if (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027)\n                bufPos++;\n            else\n                break;\n        }\n        return cacheString(charBuf, stringCache, start, bufPos - start);\n    }",
    "begin_line": 308,
    "end_line": 319,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matches#321",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matches(char)",
    "snippet": "boolean matches(char c) {\n        return !isEmpty() \u0026\u0026 charBuf[bufPos] \u003d\u003d c;\n\n    }",
    "begin_line": 321,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matches#326",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matches(java.lang.String)",
    "snippet": "boolean matches(String seq) {\n        bufferUp();\n        int scanLength \u003d seq.length();\n        if (scanLength \u003e bufLength - bufPos)\n            return false;\n\n        for (int offset \u003d 0; offset \u003c scanLength; offset++)\n            if (seq.charAt(offset) !\u003d charBuf[bufPos +offset])\n                return false;\n        return true;\n    }",
    "begin_line": 326,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesIgnoreCase#338",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesIgnoreCase(java.lang.String)",
    "snippet": "boolean matchesIgnoreCase(String seq) {\n        bufferUp();\n        int scanLength \u003d seq.length();\n        if (scanLength \u003e bufLength - bufPos)\n            return false;\n\n        for (int offset \u003d 0; offset \u003c scanLength; offset++) {\n            char upScan \u003d Character.toUpperCase(seq.charAt(offset));\n            char upTarget \u003d Character.toUpperCase(charBuf[bufPos + offset]);\n            if (upScan !\u003d upTarget)\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 338,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesAny#353",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesAny(char)",
    "snippet": "boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        bufferUp();\n        char c \u003d charBuf[bufPos];\n        for (char seek : seq) {\n            if (seek \u003d\u003d c)\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 353,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesAnySorted#366",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesAnySorted(char[])",
    "snippet": "boolean matchesAnySorted(char[] seq) {\n        bufferUp();\n        return !isEmpty() \u0026\u0026 Arrays.binarySearch(seq, charBuf[bufPos]) \u003e\u003d 0;\n    }",
    "begin_line": 366,
    "end_line": 369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesLetter#371",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesLetter()",
    "snippet": "boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c \u003d charBuf[bufPos];\n        return (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) || Character.isLetter(c);\n    }",
    "begin_line": 371,
    "end_line": 376,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchesDigit#378",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchesDigit()",
    "snippet": "boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c \u003d charBuf[bufPos];\n        return (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);\n    }",
    "begin_line": 378,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchConsume#385",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchConsume(java.lang.String)",
    "snippet": "boolean matchConsume(String seq) {\n        bufferUp();\n        if (matches(seq)) {\n            bufPos +\u003d seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 385,
    "end_line": 393,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.matchConsumeIgnoreCase#395",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.matchConsumeIgnoreCase(java.lang.String)",
    "snippet": "boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            bufPos +\u003d seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 395,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.containsIgnoreCase#404",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.containsIgnoreCase(java.lang.String)",
    "snippet": "boolean containsIgnoreCase(String seq) {\n        // used to check presence of \u003c/title\u003e, \u003c/style\u003e. only finds consistent case.\n        String loScan \u003d seq.toLowerCase(Locale.ENGLISH);\n        String hiScan \u003d seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) \u003e -1) || (nextIndexOf(hiScan) \u003e -1);\n    }",
    "begin_line": 404,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.toString#412",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.toString()",
    "snippet": "@Override\n    public String toString() {\n        return new String(charBuf, bufPos, bufLength - bufPos);\n    }",
    "begin_line": 412,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.cacheString#423",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.cacheString(char[], java.lang.String[], int, int)",
    "snippet": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // limit (no cache):\n        if (count \u003e maxStringCacheLen)\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash \u003d 0;\n        int offset \u003d start;\n        for (int i \u003d 0; i \u003c count; i++) {\n            hash \u003d 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        final int index \u003d hash \u0026 stringCache.length - 1;\n        String cached \u003d stringCache[index];\n\n        if (cached \u003d\u003d null) { // miss, add\n            cached \u003d new String(charBuf, start, count);\n            stringCache[index] \u003d cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached \u003d new String(charBuf, start, count);\n                stringCache[index] \u003d cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }",
    "begin_line": 423,
    "end_line": 451,
    "comment": "/** \n * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks. \u003cp /\u003e Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list. That saves both having to create objects as hash keys, and running through the entry list, at the expense of some more duplicates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.rangeEquals#456",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.rangeEquals(char[], int, int, java.lang.String)",
    "snippet": "static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {\n        if (count \u003d\u003d cached.length()) {\n            int i \u003d start;\n            int j \u003d 0;\n            while (count-- !\u003d 0) {\n                if (charBuf[i++] !\u003d cached.charAt(j++))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 456,
    "end_line": 467,
    "comment": "/** \n * Check if the value of the provided range equals the string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterReader.rangeEquals#470",
    "is_bug": true,
    "src_path": "org/jsoup/parser/CharacterReader.java",
    "class_name": "org.jsoup.parser.CharacterReader",
    "signature": "org.jsoup.parser.CharacterReader.rangeEquals(int, int, java.lang.String)",
    "snippet": "boolean rangeEquals(final int start, final int count, final String cached) {\n        return rangeEquals(charBuf, start, count, cached);\n    }",
    "begin_line": 470,
    "end_line": 472,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.HtmlTreeBuilder#54",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.HtmlTreeBuilder()",
    "snippet": " HtmlTreeBuilder() {}",
    "begin_line": 54,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.defaultSettings#56",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.defaultSettings()",
    "snippet": "ParseSettings defaultSettings() {\n        return ParseSettings.htmlDefault;\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.initialiseParse#61",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.initialiseParse(java.io.Reader, java.lang.String, org.jsoup.parser.ParseErrorList, org.jsoup.parser.ParseSettings)",
    "snippet": "@Override\n    protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        super.initialiseParse(input, baseUri, errors, settings);\n\n        // this is a bit mucky. todo - probably just create new parser objects to ensure all reset.\n        state \u003d HtmlTreeBuilderState.Initial;\n        originalState \u003d null;\n        baseUriSetFromDoc \u003d false;\n        headElement \u003d null;\n        formElement \u003d null;\n        contextElement \u003d null;\n        formattingElements \u003d new ArrayList\u003c\u003e();\n        pendingTableCharacters \u003d new ArrayList\u003c\u003e();\n        emptyEnd \u003d new Token.EndTag();\n        framesetOk \u003d true;\n        fosterInserts \u003d false;\n        fragmentParsing \u003d false;\n    }",
    "begin_line": 61,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.parseFragment#79",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList, org.jsoup.parser.ParseSettings)",
    "snippet": "List\u003cNode\u003e parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        // context may be null\n        state \u003d HtmlTreeBuilderState.Initial;\n        initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);\n        contextElement \u003d context;\n        fragmentParsing \u003d true;\n        Element root \u003d null;\n\n        if (context !\u003d null) {\n            if (context.ownerDocument() !\u003d null) // quirks setup:\n                doc.quirksMode(context.ownerDocument().quirksMode());\n\n            // initialise the tokeniser state:\n            String contextTag \u003d context.tagName();\n            if (StringUtil.in(contextTag, \"title\", \"textarea\"))\n                tokeniser.transition(TokeniserState.Rcdata);\n            else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))\n                tokeniser.transition(TokeniserState.Rawtext);\n            else if (contextTag.equals(\"script\"))\n                tokeniser.transition(TokeniserState.ScriptData);\n            else if (contextTag.equals((\"noscript\")))\n                tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext\n            else if (contextTag.equals(\"plaintext\"))\n                tokeniser.transition(TokeniserState.Data);\n            else\n                tokeniser.transition(TokeniserState.Data); // default\n\n            root \u003d new Element(Tag.valueOf(\"html\", settings), baseUri);\n            doc.appendChild(root);\n            stack.add(root);\n            resetInsertionMode();\n\n            // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated\n            // with form correctly\n            Elements contextChain \u003d context.parents();\n            contextChain.add(0, context);\n            for (Element parent: contextChain) {\n                if (parent instanceof FormElement) {\n                    formElement \u003d (FormElement) parent;\n                    break;\n                }\n            }\n        }\n\n        runParser();\n        if (context !\u003d null)\n            return root.childNodes();\n        else\n            return doc.childNodes();\n    }",
    "begin_line": 79,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.process#131",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.process(org.jsoup.parser.Token)",
    "snippet": "@Override\n    protected boolean process(Token token) {\n        currentToken \u003d token;\n        return this.state.process(token, this);\n    }",
    "begin_line": 131,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.process#136",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "boolean process(Token token, HtmlTreeBuilderState state) {\n        currentToken \u003d token;\n        return state.process(token, this);\n    }",
    "begin_line": 136,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.transition#141",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.transition(org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "void transition(HtmlTreeBuilderState state) {\n        this.state \u003d state;\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.state#145",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.state()",
    "snippet": "HtmlTreeBuilderState state() {\n        return state;\n    }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.markInsertionMode#149",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.markInsertionMode()",
    "snippet": "void markInsertionMode() {\n        originalState \u003d state;\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.originalState#153",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.originalState()",
    "snippet": "HtmlTreeBuilderState originalState() {\n        return originalState;\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.framesetOk#157",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.framesetOk(boolean)",
    "snippet": "void framesetOk(boolean framesetOk) {\n        this.framesetOk \u003d framesetOk;\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.framesetOk#161",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.framesetOk()",
    "snippet": "boolean framesetOk() {\n        return framesetOk;\n    }",
    "begin_line": 161,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getDocument#165",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getDocument()",
    "snippet": "Document getDocument() {\n        return doc;\n    }",
    "begin_line": 165,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getBaseUri#169",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getBaseUri()",
    "snippet": "String getBaseUri() {\n        return baseUri;\n    }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.maybeSetBaseUri#173",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.maybeSetBaseUri(org.jsoup.nodes.Element)",
    "snippet": "void maybeSetBaseUri(Element base) {\n        if (baseUriSetFromDoc) // only listen to the first \u003cbase href\u003e in parse\n            return;\n\n        String href \u003d base.absUrl(\"href\");\n        if (href.length() !\u003d 0) { // ignore \u003cbase target\u003e etc\n            baseUri \u003d href;\n            baseUriSetFromDoc \u003d true;\n            doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants\n        }\n    }",
    "begin_line": 173,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isFragmentParsing#185",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isFragmentParsing()",
    "snippet": "boolean isFragmentParsing() {\n        return fragmentParsing;\n    }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.error#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.error(org.jsoup.parser.HtmlTreeBuilderState)",
    "snippet": "void error(HtmlTreeBuilderState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));\n    }",
    "begin_line": 189,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.StartTag)",
    "snippet": "Element insert(Token.StartTag startTag) {\n        // handle empty unknown tags\n        // when the spec expects an empty tag, will directly hit insertEmpty, so won\u0027t generate this fake end tag.\n        if (startTag.isSelfClosing()) {\n            Element el \u003d insertEmpty(startTag);\n            stack.add(el);\n            tokeniser.transition(TokeniserState.Data); // handles \u003cscript /\u003e, otherwise needs breakout steps from script data\n            tokeniser.emit(emptyEnd.reset().name(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n            return el;\n        }\n        \n        Element el \u003d new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));\n        insert(el);\n        return el;\n    }",
    "begin_line": 194,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertStartTag#210",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertStartTag(java.lang.String)",
    "snippet": "Element insertStartTag(String startTagName) {\n        Element el \u003d new Element(Tag.valueOf(startTagName, settings), baseUri);\n        insert(el);\n        return el;\n    }",
    "begin_line": 210,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#216",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.nodes.Element)",
    "snippet": "void insert(Element el) {\n        insertNode(el);\n        stack.add(el);\n    }",
    "begin_line": 216,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertEmpty#221",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertEmpty(org.jsoup.parser.Token.StartTag)",
    "snippet": "Element insertEmpty(Token.StartTag startTag) {\n        Tag tag \u003d Tag.valueOf(startTag.name(), settings);\n        Element el \u003d new Element(tag, baseUri, startTag.attributes);\n        insertNode(el);\n        if (startTag.isSelfClosing()) {\n            if (tag.isKnownTag()) {\n                if (!tag.isEmpty())\n                    tokeniser.error(\"Tag cannot be self closing; not a void tag\");\n            }\n            else // unknown tag, remember this is self closing for output\n                tag.setSelfClosing();\n        }\n        return el;\n    }",
    "begin_line": 221,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertForm#236",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertForm(org.jsoup.parser.Token.StartTag, boolean)",
    "snippet": "FormElement insertForm(Token.StartTag startTag, boolean onStack) {\n        Tag tag \u003d Tag.valueOf(startTag.name(), settings);\n        FormElement el \u003d new FormElement(tag, baseUri, startTag.attributes);\n        setFormElement(el);\n        insertNode(el);\n        if (onStack)\n            stack.add(el);\n        return el;\n    }",
    "begin_line": 236,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#246",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.Comment)",
    "snippet": "void insert(Token.Comment commentToken) {\n        Comment comment \u003d new Comment(commentToken.getData());\n        insertNode(comment);\n    }",
    "begin_line": 246,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insert#251",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insert(org.jsoup.parser.Token.Character)",
    "snippet": "void insert(Token.Character characterToken) {\n        Node node;\n        // characters in script and style go in as datanodes, not text nodes\n        String tagName \u003d currentElement().tagName();\n        if (tagName.equals(\"script\") || tagName.equals(\"style\"))\n            node \u003d new DataNode(characterToken.getData());\n        else\n            node \u003d new TextNode(characterToken.getData());\n        currentElement().appendChild(node); // doesn\u0027t use insertNode, because we don\u0027t foster these; and will always have a stack.\n    }",
    "begin_line": 251,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertNode#262",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertNode(org.jsoup.nodes.Node)",
    "snippet": "private void insertNode(Node node) {\n        // if the stack hasn\u0027t been set up yet, elements (doctype, comments) go into the doc\n        if (stack.size() \u003d\u003d 0)\n            doc.appendChild(node);\n        else if (isFosterInserts())\n            insertInFosterParent(node);\n        else\n            currentElement().appendChild(node);\n\n        // connect form controls to their form element\n        if (node instanceof Element \u0026\u0026 ((Element) node).tag().isFormListed()) {\n            if (formElement !\u003d null)\n                formElement.addElement((Element) node);\n        }\n    }",
    "begin_line": 262,
    "end_line": 276,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.pop#278",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.pop()",
    "snippet": "Element pop() {\n        int size \u003d stack.size();\n        return stack.remove(size-1);\n    }",
    "begin_line": 278,
    "end_line": 281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.push#283",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.push(org.jsoup.nodes.Element)",
    "snippet": "void push(Element element) {\n        stack.add(element);\n    }",
    "begin_line": 283,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getStack#287",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getStack()",
    "snippet": "ArrayList\u003cElement\u003e getStack() {\n        return stack;\n    }",
    "begin_line": 287,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.onStack#291",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.onStack(org.jsoup.nodes.Element)",
    "snippet": "boolean onStack(Element el) {\n        return isElementInQueue(stack, el);\n    }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isElementInQueue#295",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isElementInQueue(java.util.ArrayList\u003corg.jsoup.nodes.Element\u003e, org.jsoup.nodes.Element)",
    "snippet": "private boolean isElementInQueue(ArrayList\u003cElement\u003e queue, Element element) {\n        for (int pos \u003d queue.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d queue.get(pos);\n            if (next \u003d\u003d element) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 295,
    "end_line": 303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getFromStack#305",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getFromStack(java.lang.String)",
    "snippet": "Element getFromStack(String elName) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                return next;\n            }\n        }\n        return null;\n    }",
    "begin_line": 305,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.removeFromStack#315",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.removeFromStack(org.jsoup.nodes.Element)",
    "snippet": "boolean removeFromStack(Element el) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            if (next \u003d\u003d el) {\n                stack.remove(pos);\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 315,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToClose#326",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToClose(java.lang.String)",
    "snippet": "void popStackToClose(String elName) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            stack.remove(pos);\n            if (next.nodeName().equals(elName))\n                break;\n        }\n    }",
    "begin_line": 326,
    "end_line": 333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToClose#335",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToClose(java.lang.String)",
    "snippet": "void popStackToClose(String... elNames) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            stack.remove(pos);\n            if (StringUtil.in(next.nodeName(), elNames))\n                break;\n        }\n    }",
    "begin_line": 335,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.popStackToBefore#344",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.popStackToBefore(java.lang.String)",
    "snippet": "void popStackToBefore(String elName) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                break;\n            } else {\n                stack.remove(pos);\n            }\n        }\n    }",
    "begin_line": 344,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableContext#355",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableContext()",
    "snippet": "void clearStackToTableContext() {\n        clearStackToContext(\"table\");\n    }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableBodyContext#359",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableBodyContext()",
    "snippet": "void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n    }",
    "begin_line": 359,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToTableRowContext#363",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableRowContext()",
    "snippet": "void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\", \"template\");\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearStackToContext#367",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearStackToContext(java.lang.String)",
    "snippet": "private void clearStackToContext(String... nodeNames) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))\n                break;\n            else\n                stack.remove(pos);\n        }\n    }",
    "begin_line": 367,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.aboveOnStack#377",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.aboveOnStack(org.jsoup.nodes.Element)",
    "snippet": "Element aboveOnStack(Element el) {\n        assert onStack(el);\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d stack.get(pos);\n            if (next \u003d\u003d el) {\n                return stack.get(pos-1);\n            }\n        }\n        return null;\n    }",
    "begin_line": 377,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertOnStackAfter#388",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertOnStackAfter(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void insertOnStackAfter(Element after, Element in) {\n        int i \u003d stack.lastIndexOf(after);\n        Validate.isTrue(i !\u003d -1);\n        stack.add(i+1, in);\n    }",
    "begin_line": 388,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceOnStack#394",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceOnStack(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void replaceOnStack(Element out, Element in) {\n        replaceInQueue(stack, out, in);\n    }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceInQueue#398",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceInQueue(java.util.ArrayList\u003corg.jsoup.nodes.Element\u003e, org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "private void replaceInQueue(ArrayList\u003cElement\u003e queue, Element out, Element in) {\n        int i \u003d queue.lastIndexOf(out);\n        Validate.isTrue(i !\u003d -1);\n        queue.set(i, in);\n    }",
    "begin_line": 398,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.resetInsertionMode#404",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.resetInsertionMode()",
    "snippet": "void resetInsertionMode() {\n        boolean last \u003d false;\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element node \u003d stack.get(pos);\n            if (pos \u003d\u003d 0) {\n                last \u003d true;\n                node \u003d contextElement;\n            }\n            String name \u003d node.nodeName();\n            if (\"select\".equals(name)) {\n                transition(HtmlTreeBuilderState.InSelect);\n                break; // frag\n            } else if ((\"td\".equals(name) || \"th\".equals(name) \u0026\u0026 !last)) {\n                transition(HtmlTreeBuilderState.InCell);\n                break;\n            } else if (\"tr\".equals(name)) {\n                transition(HtmlTreeBuilderState.InRow);\n                break;\n            } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTableBody);\n                break;\n            } else if (\"caption\".equals(name)) {\n                transition(HtmlTreeBuilderState.InCaption);\n                break;\n            } else if (\"colgroup\".equals(name)) {\n                transition(HtmlTreeBuilderState.InColumnGroup);\n                break; // frag\n            } else if (\"table\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTable);\n                break;\n            } else if (\"head\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            } else if (\"body\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            } else if (\"frameset\".equals(name)) {\n                transition(HtmlTreeBuilderState.InFrameset);\n                break; // frag\n            } else if (\"html\".equals(name)) {\n                transition(HtmlTreeBuilderState.BeforeHead);\n                break; // frag\n            } else if (last) {\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            }\n        }\n    }",
    "begin_line": 404,
    "end_line": 451,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSpecificScope#456",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(java.lang.String, java.lang.String[], java.lang.String[])",
    "snippet": "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {\n        specificScopeTarget[0] \u003d targetName;\n        return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);\n    }",
    "begin_line": 456,
    "end_line": 459,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSpecificScope#461",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])",
    "snippet": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element el \u003d stack.get(pos);\n            String elName \u003d el.nodeName();\n            if (StringUtil.in(elName, targetNames))\n                return true;\n            if (StringUtil.in(elName, baseTypes))\n                return false;\n            if (extraTypes !\u003d null \u0026\u0026 StringUtil.in(elName, extraTypes))\n                return false;\n        }\n        Validate.fail(\"Should not be reachable\");\n        return false;\n    }",
    "begin_line": 461,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#476",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String[])",
    "snippet": "boolean inScope(String[] targetNames) {\n        return inSpecificScope(targetNames, TagsSearchInScope, null);\n    }",
    "begin_line": 476,
    "end_line": 478,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#480",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String)",
    "snippet": "boolean inScope(String targetName) {\n        return inScope(targetName, null);\n    }",
    "begin_line": 480,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inScope#484",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inScope(java.lang.String, java.lang.String[])",
    "snippet": "boolean inScope(String targetName, String[] extras) {\n        return inSpecificScope(targetName, TagsSearchInScope, extras);\n        // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml\n        // todo: in svg namespace: forignOjbect, desc, title\n    }",
    "begin_line": 484,
    "end_line": 488,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inListItemScope#490",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inListItemScope(java.lang.String)",
    "snippet": "boolean inListItemScope(String targetName) {\n        return inScope(targetName, TagSearchList);\n    }",
    "begin_line": 490,
    "end_line": 492,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inButtonScope#494",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inButtonScope(java.lang.String)",
    "snippet": "boolean inButtonScope(String targetName) {\n        return inScope(targetName, TagSearchButton);\n    }",
    "begin_line": 494,
    "end_line": 496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inTableScope#498",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inTableScope(java.lang.String)",
    "snippet": "boolean inTableScope(String targetName) {\n        return inSpecificScope(targetName, TagSearchTableScope, null);\n    }",
    "begin_line": 498,
    "end_line": 500,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.inSelectScope#502",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.inSelectScope(java.lang.String)",
    "snippet": "boolean inSelectScope(String targetName) {\n        for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n            Element el \u003d stack.get(pos);\n            String elName \u003d el.nodeName();\n            if (elName.equals(targetName))\n                return true;\n            if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except\n                return false;\n        }\n        Validate.fail(\"Should not be reachable\");\n        return false;\n    }",
    "begin_line": 502,
    "end_line": 513,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setHeadElement#515",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setHeadElement(org.jsoup.nodes.Element)",
    "snippet": "void setHeadElement(Element headElement) {\n        this.headElement \u003d headElement;\n    }",
    "begin_line": 515,
    "end_line": 517,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getHeadElement#519",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getHeadElement()",
    "snippet": "Element getHeadElement() {\n        return headElement;\n    }",
    "begin_line": 519,
    "end_line": 521,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isFosterInserts#523",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isFosterInserts()",
    "snippet": "boolean isFosterInserts() {\n        return fosterInserts;\n    }",
    "begin_line": 523,
    "end_line": 525,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setFosterInserts#527",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setFosterInserts(boolean)",
    "snippet": "void setFosterInserts(boolean fosterInserts) {\n        this.fosterInserts \u003d fosterInserts;\n    }",
    "begin_line": 527,
    "end_line": 529,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getFormElement#531",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getFormElement()",
    "snippet": "FormElement getFormElement() {\n        return formElement;\n    }",
    "begin_line": 531,
    "end_line": 533,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setFormElement#535",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setFormElement(org.jsoup.nodes.FormElement)",
    "snippet": "void setFormElement(FormElement formElement) {\n        this.formElement \u003d formElement;\n    }",
    "begin_line": 535,
    "end_line": 537,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.newPendingTableCharacters#539",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.newPendingTableCharacters()",
    "snippet": "void newPendingTableCharacters() {\n        pendingTableCharacters \u003d new ArrayList\u003c\u003e();\n    }",
    "begin_line": 539,
    "end_line": 541,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getPendingTableCharacters#543",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getPendingTableCharacters()",
    "snippet": "List\u003cString\u003e getPendingTableCharacters() {\n        return pendingTableCharacters;\n    }",
    "begin_line": 543,
    "end_line": 545,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.setPendingTableCharacters#547",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.setPendingTableCharacters(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "void setPendingTableCharacters(List\u003cString\u003e pendingTableCharacters) {\n        this.pendingTableCharacters \u003d pendingTableCharacters;\n    }",
    "begin_line": 547,
    "end_line": 549,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.generateImpliedEndTags#560",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags(java.lang.String)",
    "snippet": "void generateImpliedEndTags(String excludeTag) {\n        while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();\n    }",
    "begin_line": 560,
    "end_line": 564,
    "comment": "/** \n * 11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements.\n * @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from theprocess, then the UA must perform the above steps as if that element was not in the above list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.generateImpliedEndTags#566",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags()",
    "snippet": "void generateImpliedEndTags() {\n        generateImpliedEndTags(null);\n    }",
    "begin_line": 566,
    "end_line": 568,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isSpecial#570",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isSpecial(org.jsoup.nodes.Element)",
    "snippet": "boolean isSpecial(Element el) {\n        // todo: mathml\u0027s mi, mo, mn\n        // todo: svg\u0027s foreigObject, desc, title\n        String name \u003d el.nodeName();\n        return StringUtil.in(name, TagSearchSpecial);\n    }",
    "begin_line": 570,
    "end_line": 575,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.lastFormattingElement#577",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.lastFormattingElement()",
    "snippet": "Element lastFormattingElement() {\n        return formattingElements.size() \u003e 0 ? formattingElements.get(formattingElements.size()-1) : null;\n    }",
    "begin_line": 577,
    "end_line": 579,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.removeLastFormattingElement#581",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.removeLastFormattingElement()",
    "snippet": "Element removeLastFormattingElement() {\n        int size \u003d formattingElements.size();\n        if (size \u003e 0)\n            return formattingElements.remove(size-1);\n        else\n            return null;\n    }",
    "begin_line": 581,
    "end_line": 587,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.pushActiveFormattingElements#590",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.pushActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "void pushActiveFormattingElements(Element in) {\n        int numSeen \u003d 0;\n        for (int pos \u003d formattingElements.size() -1; pos \u003e\u003d 0; pos--) {\n            Element el \u003d formattingElements.get(pos);\n            if (el \u003d\u003d null) // marker\n                break;\n\n            if (isSameFormattingElement(in, el))\n                numSeen++;\n\n            if (numSeen \u003d\u003d 3) {\n                formattingElements.remove(pos);\n                break;\n            }\n        }\n        formattingElements.add(in);\n    }",
    "begin_line": 590,
    "end_line": 606,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isSameFormattingElement#608",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isSameFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "private boolean isSameFormattingElement(Element a, Element b) {\n        // same if: same namespace, tag, and attributes. Element.equals only checks tag, might in future check children\n        return a.nodeName().equals(b.nodeName()) \u0026\u0026\n                // a.namespace().equals(b.namespace()) \u0026\u0026\n                a.attributes().equals(b.attributes());\n        // todo: namespaces\n    }",
    "begin_line": 608,
    "end_line": 614,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.reconstructFormattingElements#616",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.reconstructFormattingElements()",
    "snippet": "void reconstructFormattingElements() {\n        Element last \u003d lastFormattingElement();\n        if (last \u003d\u003d null || onStack(last))\n            return;\n\n        Element entry \u003d last;\n        int size \u003d formattingElements.size();\n        int pos \u003d size - 1;\n        boolean skip \u003d false;\n        while (true) {\n            if (pos \u003d\u003d 0) { // step 4. if none before, skip to 8\n                skip \u003d true;\n                break;\n            }\n            entry \u003d formattingElements.get(--pos); // step 5. one earlier than entry\n            if (entry \u003d\u003d null || onStack(entry)) // step 6 - neither marker nor on stack\n                break; // jump to 8, else continue back to 4\n        }\n        while(true) {\n            if (!skip) // step 7: on later than entry\n                entry \u003d formattingElements.get(++pos);\n            Validate.notNull(entry); // should not occur, as we break at last element\n\n            // 8. create new element from element, 9 insert into current node, onto stack\n            skip \u003d false; // can only skip increment from 4.\n            Element newEl \u003d insertStartTag(entry.nodeName()); // todo: avoid fostering here?\n            // newEl.namespace(entry.namespace()); // todo: namespaces\n            newEl.attributes().addAll(entry.attributes());\n\n            // 10. replace entry with new entry\n            formattingElements.set(pos, newEl);\n\n            // 11\n            if (pos \u003d\u003d size-1) // if not last entry in list, jump to 7\n                break;\n        }\n    }",
    "begin_line": 616,
    "end_line": 652,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.clearFormattingElementsToLastMarker#654",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.clearFormattingElementsToLastMarker()",
    "snippet": "void clearFormattingElementsToLastMarker() {\n        while (!formattingElements.isEmpty()) {\n            Element el \u003d removeLastFormattingElement();\n            if (el \u003d\u003d null)\n                break;\n        }\n    }",
    "begin_line": 654,
    "end_line": 660,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.removeFromActiveFormattingElements#662",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.removeFromActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "void removeFromActiveFormattingElements(Element el) {\n        for (int pos \u003d formattingElements.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d formattingElements.get(pos);\n            if (next \u003d\u003d el) {\n                formattingElements.remove(pos);\n                break;\n            }\n        }\n    }",
    "begin_line": 662,
    "end_line": 670,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.isInActiveFormattingElements#672",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.isInActiveFormattingElements(org.jsoup.nodes.Element)",
    "snippet": "boolean isInActiveFormattingElements(Element el) {\n        return isElementInQueue(formattingElements, el);\n    }",
    "begin_line": 672,
    "end_line": 674,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.getActiveFormattingElement#676",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.getActiveFormattingElement(java.lang.String)",
    "snippet": "Element getActiveFormattingElement(String nodeName) {\n        for (int pos \u003d formattingElements.size() -1; pos \u003e\u003d 0; pos--) {\n            Element next \u003d formattingElements.get(pos);\n            if (next \u003d\u003d null) // scope marker\n                break;\n            else if (next.nodeName().equals(nodeName))\n                return next;\n        }\n        return null;\n    }",
    "begin_line": 676,
    "end_line": 685,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.replaceActiveFormattingElement#687",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.replaceActiveFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
    "snippet": "void replaceActiveFormattingElement(Element out, Element in) {\n        replaceInQueue(formattingElements, out, in);\n    }",
    "begin_line": 687,
    "end_line": 689,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertMarkerToFormattingElements#691",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertMarkerToFormattingElements()",
    "snippet": "void insertMarkerToFormattingElements() {\n        formattingElements.add(null);\n    }",
    "begin_line": 691,
    "end_line": 693,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.insertInFosterParent#695",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.insertInFosterParent(org.jsoup.nodes.Node)",
    "snippet": "void insertInFosterParent(Node in) {\n        Element fosterParent;\n        Element lastTable \u003d getFromStack(\"table\");\n        boolean isLastTableParent \u003d false;\n        if (lastTable !\u003d null) {\n            if (lastTable.parent() !\u003d null) {\n                fosterParent \u003d lastTable.parent();\n                isLastTableParent \u003d true;\n            } else\n                fosterParent \u003d aboveOnStack(lastTable);\n        } else { // no table \u003d\u003d frag\n            fosterParent \u003d stack.get(0);\n        }\n\n        if (isLastTableParent) {\n            Validate.notNull(lastTable); // last table cannot be null by this point.\n            lastTable.before(in);\n        }\n        else\n            fosterParent.appendChild(in);\n    }",
    "begin_line": 695,
    "end_line": 715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HtmlTreeBuilder.toString#718",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilder.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilder",
    "signature": "org.jsoup.parser.HtmlTreeBuilder.toString()",
    "snippet": "@Override\n    public String toString() {\n        return \"TreeBuilder{\" +\n                \"currentToken\u003d\" + currentToken +\n                \", state\u003d\" + state +\n                \", currentElement\u003d\" + currentElement() +\n                \u0027}\u0027;\n    }",
    "begin_line": 718,
    "end_line": 724,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#13",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                // todo: parse error check on expected doctypes\n                // todo: quirk state check on doctype ids\n                Token.Doctype d \u003d t.asDoctype();\n                DocumentType doctype \u003d new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());\n                doctype.setPubSysKey(d.getPubSysKey());\n                tb.getDocument().appendChild(doctype);\n                if (d.isForceQuirks())\n                    tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n                tb.transition(BeforeHtml);\n            } else {\n                // todo: check not iframe srcdoc\n                tb.transition(BeforeHtml);\n                return tb.process(t); // re-process token\n            }\n            return true;\n        }",
    "begin_line": 13,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                tb.insert(t.asStartTag());\n                tb.transition(BeforeHead);\n            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                return anythingElse(t, tb);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 38,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#60",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.insertStartTag(\"html\");\n            tb.transition(BeforeHead);\n            return tb.process(t);\n        }",
    "begin_line": 60,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#67",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                return InBody.process(t, tb); // does not transition\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"head\")) {\n                Element head \u003d tb.insert(t.asStartTag());\n                tb.setHeadElement(head);\n                tb.transition(InHead);\n            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                tb.processStartTag(\"head\");\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.processStartTag(\"head\");\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 67,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start \u003d t.asStartTag();\n                    String name \u003d start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el \u003d tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") \u0026\u0026 el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta \u003d tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript \u0026\u0026 scripting flag \u003d true: rawtext (jsoup doesn\u0027t run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won\u0027t execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end \u003d t.asEndTag();\n                    name \u003d end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 95,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#161",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, TreeBuilder tb) {\n            tb.processEndTag(\"head\");\n            return tb.process(t);\n        }",
    "begin_line": 161,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#167",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"noscript\")) {\n                tb.pop();\n                tb.transition(InHead);\n            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                return tb.process(t, InHead);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"br\")) {\n                return anythingElse(t, tb);\n            } else if ((t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 167,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            tb.insert(new Token.Character().data(t.toString()));\n            return true;\n        }",
    "begin_line": 189,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#196",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.normalName();\n                if (name.equals(\"html\")) {\n                    return tb.process(t, InBody);\n                } else if (name.equals(\"body\")) {\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                    tb.transition(InBody);\n                } else if (name.equals(\"frameset\")) {\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                    tb.error(this);\n                    Element head \u003d tb.getHeadElement();\n                    tb.push(head);\n                    tb.process(t, InHead);\n                    tb.removeFromStack(head);\n                } else if (name.equals(\"head\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {\n                    anythingElse(t, tb);\n                } else {\n                    tb.error(this);\n                    return false;\n                }\n            } else {\n                anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 196,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#240",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.processStartTag(\"body\");\n            tb.framesetOk(true);\n            return tb.process(t);\n        }",
    "begin_line": 240,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#247",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character: {\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() \u0026\u0026 isWhitespace(c)) { // don\u0027t check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name \u003d startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") !\u003d null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA \u003d tb.getFromStack(\"a\");\n                            if (remainingA !\u003d null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                        for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                            Element el \u003d stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html \u003d tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body \u003d stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second \u003d stack.get(1);\n                            if (second.parent() !\u003d null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() \u003e 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() !\u003d null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                        for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                            Element el \u003d stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el \u003d tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() !\u003d Document.QuirksMode.quirks \u0026\u0026 tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el \u003d tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") \u003d\u003d null)\n                            return tb.process(startTag.name(\"img\")); // change \u003cimage\u003e to \u003cimg\u003e, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() !\u003d null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form \u003d tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt \u003d startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs \u003d new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state \u003d tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    name \u003d endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i \u003d 0; i \u003c 8; i++) {\n                            Element formatEl \u003d tb.getActiveFormattingElement(name);\n                            if (formatEl \u003d\u003d null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() !\u003d formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock \u003d null;\n                            Element commonAncestor \u003d null;\n                            boolean seenFormattingElement \u003d false;\n                            ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                            // the spec doesn\u0027t limit to \u003c 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize \u003d stack.size();\n                            for (int si \u003d 0; si \u003c stackSize \u0026\u0026 si \u003c 64; si++) {\n                                Element el \u003d stack.get(si);\n                                if (el \u003d\u003d formatEl) {\n                                    commonAncestor \u003d stack.get(si - 1);\n                                    seenFormattingElement \u003d true;\n                                } else if (seenFormattingElement \u0026\u0026 tb.isSpecial(el)) {\n                                    furthestBlock \u003d el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock \u003d\u003d null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node \u003d furthestBlock;\n                            Element lastNode \u003d furthestBlock;\n                            for (int j \u003d 0; j \u003c 3; j++) {\n                                if (tb.onStack(node))\n                                    node \u003d tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node \u003d\u003d formatEl)\n                                    break;\n\n                                Element replacement \u003d new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node \u003d replacement;\n\n                                if (lastNode \u003d\u003d furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode \u003d node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() !\u003d null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter \u003d new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes \u003d furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored \u003d tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm \u003d tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm \u003d\u003d null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty \u003cp\u003e\u003c/p\u003e\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }\n            return true;\n        }",
    "begin_line": 247,
    "end_line": 760,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anyOtherEndTag#762",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anyOtherEndTag(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n            String name \u003d tb.settings.normalizeTag(t.asEndTag().name()); // matches with case sensitivity if enabled\n            ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n            for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n                Element node \u003d stack.get(pos);\n                if (node.nodeName().equals(name)) {\n                    tb.generateImpliedEndTags(name);\n                    if (!name.equals(tb.currentElement().nodeName()))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    break;\n                } else {\n                    if (tb.isSpecial(node)) {\n                        tb.error(this);\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "begin_line": 762,
    "end_line": 781,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#785",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.insert(t.asCharacter());\n            } else if (t.isEOF()) {\n                tb.error(this);\n                // if current node is script: already started\n                tb.pop();\n                tb.transition(tb.originalState());\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                // if: An end tag whose tag name is \"script\" -- scripting nesting level, if evaluating scripts\n                tb.pop();\n                tb.transition(tb.originalState());\n            }\n            return true;\n        }",
    "begin_line": 785,
    "end_line": 800,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#803",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.newPendingTableCharacters();\n                tb.markInsertionMode();\n                tb.transition(InTableText);\n                return tb.process(t);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n                return true;\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.normalName();\n                if (name.equals(\"caption\")) {\n                    tb.clearStackToTableContext();\n                    tb.insertMarkerToFormattingElements();\n                    tb.insert(startTag);\n                    tb.transition(InCaption);\n                } else if (name.equals(\"colgroup\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InColumnGroup);\n                } else if (name.equals(\"col\")) {\n                    tb.processStartTag(\"colgroup\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InTableBody);\n                } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {\n                    tb.processStartTag(\"tbody\");\n                    return tb.process(t);\n                } else if (name.equals(\"table\")) {\n                    tb.error(this);\n                    boolean processed \u003d tb.processEndTag(\"table\");\n                    if (processed) // only ignored if in fragment\n                        return tb.process(t);\n                } else if (StringUtil.in(name, \"style\", \"script\")) {\n                    return tb.process(t, InHead);\n                } else if (name.equals(\"input\")) {\n                    if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.insertEmpty(startTag);\n                    }\n                } else if (name.equals(\"form\")) {\n                    tb.error(this);\n                    if (tb.getFormElement() !\u003d null)\n                        return false;\n                    else {\n                        tb.insertForm(startTag, false);\n                    }\n                } else {\n                    return anythingElse(t, tb);\n                }\n                return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.normalName();\n\n                if (name.equals(\"table\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.popStackToClose(\"table\");\n                    }\n                    tb.resetInsertionMode();\n                } else if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n                return true; // todo: as above todo\n            } else if (t.isEOF()) {\n                if (tb.currentElement().nodeName().equals(\"html\"))\n                    tb.error(this);\n                return true; // stops parsing\n            }\n            return anythingElse(t, tb);\n        }",
    "begin_line": 803,
    "end_line": 887,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#889",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            boolean processed;\n            if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                tb.setFosterInserts(true);\n                processed \u003d tb.process(t, InBody);\n                tb.setFosterInserts(false);\n            } else {\n                processed \u003d tb.process(t, InBody);\n            }\n            return processed;\n        }",
    "begin_line": 889,
    "end_line": 900,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#903",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don\u0027t really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() \u003e 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 903,
    "end_line": 937,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#940",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"caption\")) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.normalName();\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"caption\"))\n                        tb.error(this);\n                    tb.popStackToClose(\"caption\");\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InTable);\n                }\n            } else if ((\n                    t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"table\"))\n                    ) {\n                tb.error(this);\n                boolean processed \u003d tb.processEndTag(\"caption\");\n                if (processed)\n                    return tb.process(t);\n            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return tb.process(t, InBody);\n            }\n            return true;\n        }",
    "begin_line": 940,
    "end_line": 972,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#975",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 975,
    "end_line": 1021,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1023",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, TreeBuilder tb) {\n            boolean processed \u003d tb.processEndTag(\"colgroup\");\n            if (processed) // only ignored in frag case\n                return tb.process(t);\n            return true;\n        }",
    "begin_line": 1023,
    "end_line": 1028,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1031",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag \u003d t.asStartTag();\n                    String name \u003d startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag \u003d t.asEndTag();\n                    name \u003d endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1031,
    "end_line": 1075,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.exitTableBody#1077",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.exitTableBody(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {\n            if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {\n                // frag case\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableBodyContext();\n            tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead\n            return tb.process(t);\n        }",
    "begin_line": 1077,
    "end_line": 1086,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1088",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }",
    "begin_line": 1088,
    "end_line": 1090,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1093",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag()) {\n                Token.StartTag startTag \u003d t.asStartTag();\n                String name \u003d startTag.normalName();\n\n                if (name.equals(\"template\")) {\n                    tb.insert(startTag);\n                } else if (StringUtil.in(name, \"th\", \"td\")) {\n                    tb.clearStackToTableRowContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                    tb.insertMarkerToFormattingElements();\n                } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    return handleMissingTr(t, tb);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.normalName();\n\n                if (name.equals(\"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this); // frag\n                        return false;\n                    }\n                    tb.clearStackToTableRowContext();\n                    tb.pop(); // tr\n                    tb.transition(InTableBody);\n                } else if (name.equals(\"table\")) {\n                    return handleMissingTr(t, tb);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.processEndTag(\"tr\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1093,
    "end_line": 1141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1143",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }",
    "begin_line": 1143,
    "end_line": 1145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleMissingTr#1147",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleMissingTr(org.jsoup.parser.Token, org.jsoup.parser.TreeBuilder)",
    "snippet": "private boolean handleMissingTr(Token t, TreeBuilder tb) {\n            boolean processed \u003d tb.processEndTag(\"tr\");\n            if (processed)\n                return tb.process(t);\n            else\n                return false;\n        }",
    "begin_line": 1147,
    "end_line": 1153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1156",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag()) {\n                Token.EndTag endTag \u003d t.asEndTag();\n                String name \u003d endTag.normalName();\n\n                if (StringUtil.in(name, \"td\", \"th\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        tb.transition(InRow); // might not be in scope if empty: \u003ctd /\u003e and processing fake end tag\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InRow);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                    tb.error(this);\n                    return false;\n                } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    closeCell(tb);\n                    return tb.process(t);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isStartTag() \u0026\u0026\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n                    tb.error(this);\n                    return false;\n                }\n                closeCell(tb);\n                return tb.process(t);\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1156,
    "end_line": 1199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1201",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InBody);\n        }",
    "begin_line": 1201,
    "end_line": 1203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.closeCell#1205",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.closeCell(org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private void closeCell(HtmlTreeBuilder tb) {\n            if (tb.inTableScope(\"td\"))\n                tb.processEndTag(\"td\");\n            else\n                tb.processEndTag(\"th\"); // only here if th or td in scope\n        }",
    "begin_line": 1205,
    "end_line": 1210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1213",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c \u003d t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start \u003d t.asStartTag();\n                    String name \u003d start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end \u003d t.asEndTag();\n                    name \u003d end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") \u0026\u0026 tb.aboveOnStack(tb.currentElement()) !\u003d null \u0026\u0026 tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }",
    "begin_line": 1213,
    "end_line": 1299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#1301",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.anythingElse(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            return false;\n        }",
    "begin_line": 1301,
    "end_line": 1304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1307",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                tb.processEndTag(\"select\");\n                return tb.process(t);\n            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                if (tb.inTableScope(t.asEndTag().normalName())) {\n                    tb.processEndTag(\"select\");\n                    return (tb.process(t));\n                } else\n                    return false;\n            } else {\n                return tb.process(t, InSelect);\n            }\n        }",
    "begin_line": 1307,
    "end_line": 1322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1325",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return tb.process(t, InBody);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment()); // into html node\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"html\")) {\n                if (tb.isFragmentParsing()) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterAfterBody);\n                }\n            } else if (t.isEOF()) {\n                // chillax! we\u0027re done\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 1325,
    "end_line": 1350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1353",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag start \u003d t.asStartTag();\n                switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"frameset\")) {\n                if (tb.currentElement().nodeName().equals(\"html\")) { // frag\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.pop();\n                    if (!tb.isFragmentParsing() \u0026\u0026 !tb.currentElement().nodeName().equals(\"frameset\")) {\n                        tb.transition(AfterFrameset);\n                    }\n                }\n            } else if (t.isEOF()) {\n                if (!tb.currentElement().nodeName().equals(\"html\")) {\n                    tb.error(this);\n                    return true;\n                }\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1353,
    "end_line": 1398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1401",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"html\")) {\n                tb.transition(AfterAfterFrameset);\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else if (t.isEOF()) {\n                // cool your heels, we\u0027re complete\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1401,
    "end_line": 1422,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1425",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }",
    "begin_line": 1425,
    "end_line": 1438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1441",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }",
    "begin_line": 1441,
    "end_line": 1455,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1458",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "boolean process(Token t, HtmlTreeBuilder tb) {\n            return true;\n            // todo: implement. Also; how do we get here?\n        }",
    "begin_line": 1458,
    "end_line": 1461,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.process#1466",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "abstract boolean process(Token t, HtmlTreeBuilder tb);",
    "begin_line": 1466,
    "end_line": 1466,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.isWhitespace#1468",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(org.jsoup.parser.Token)",
    "snippet": "private static boolean isWhitespace(Token t) {\n        if (t.isCharacter()) {\n            String data \u003d t.asCharacter().getData();\n            return isWhitespace(data);\n        }\n        return false;\n    }",
    "begin_line": 1468,
    "end_line": 1474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.isWhitespace#1476",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(java.lang.String)",
    "snippet": "private static boolean isWhitespace(String data) {\n        // todo: this checks more than spec - \"\\t\", \"\\n\", \"\\f\", \"\\r\", \" \"\n        for (int i \u003d 0; i \u003c data.length(); i++) {\n            char c \u003d data.charAt(i);\n            if (!StringUtil.isWhitespace(c))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1476,
    "end_line": 1484,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleRcData#1486",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleRcData(org.jsoup.parser.Token.StartTag, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.tokeniser.transition(TokeniserState.Rcdata);\n        tb.markInsertionMode();\n        tb.transition(Text);\n        tb.insert(startTag);\n    }",
    "begin_line": 1486,
    "end_line": 1491,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleRawtext#1493",
    "is_bug": true,
    "src_path": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "class_name": "org.jsoup.parser.HtmlTreeBuilderState",
    "signature": "org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(org.jsoup.parser.Token.StartTag, org.jsoup.parser.HtmlTreeBuilder)",
    "snippet": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.tokeniser.transition(TokeniserState.Rawtext);\n        tb.markInsertionMode();\n        tb.transition(Text);\n        tb.insert(startTag);\n    }",
    "begin_line": 1493,
    "end_line": 1498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.ParseErrorList#14",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.ParseErrorList(int, int)",
    "snippet": " ParseErrorList(int initialCapacity, int maxSize) {\n        super(initialCapacity);\n        this.maxSize \u003d maxSize;\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.canAddError#19",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.canAddError()",
    "snippet": "boolean canAddError() {\n        return size() \u003c maxSize;\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.getMaxSize#23",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.getMaxSize()",
    "snippet": "int getMaxSize() {\n        return maxSize;\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.noTracking#27",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.noTracking()",
    "snippet": "public static ParseErrorList noTracking() {\n        return new ParseErrorList(0, 0);\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseErrorList.tracking#31",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseErrorList.java",
    "class_name": "org.jsoup.parser.ParseErrorList",
    "signature": "org.jsoup.parser.ParseErrorList.tracking(int)",
    "snippet": "public static ParseErrorList tracking(int maxSize) {\n        return new ParseErrorList(INITIAL_CAPACITY, maxSize);\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseSettings.ParseSettings#33",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseSettings.java",
    "class_name": "org.jsoup.parser.ParseSettings",
    "signature": "org.jsoup.parser.ParseSettings.ParseSettings(boolean, boolean)",
    "snippet": "public ParseSettings(boolean tag, boolean attribute) {\n        preserveTagCase \u003d tag;\n        preserveAttributeCase \u003d attribute;\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "/** \n * Define parse settings.\n * @param tag preserve tag case?\n * @param attribute preserve attribute name case?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseSettings.normalizeTag#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseSettings.java",
    "class_name": "org.jsoup.parser.ParseSettings",
    "signature": "org.jsoup.parser.ParseSettings.normalizeTag(java.lang.String)",
    "snippet": "String normalizeTag(String name) {\n        name \u003d name.trim();\n        if (!preserveTagCase)\n            name \u003d lowerCase(name);\n        return name;\n    }",
    "begin_line": 38,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseSettings.normalizeAttribute#45",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseSettings.java",
    "class_name": "org.jsoup.parser.ParseSettings",
    "signature": "org.jsoup.parser.ParseSettings.normalizeAttribute(java.lang.String)",
    "snippet": "String normalizeAttribute(String name) {\n        name \u003d name.trim();\n        if (!preserveAttributeCase)\n            name \u003d lowerCase(name);\n        return name;\n    }",
    "begin_line": 45,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseSettings.normalizeAttributes#52",
    "is_bug": true,
    "src_path": "org/jsoup/parser/ParseSettings.java",
    "class_name": "org.jsoup.parser.ParseSettings",
    "signature": "org.jsoup.parser.ParseSettings.normalizeAttributes(org.jsoup.nodes.Attributes)",
    "snippet": "Attributes normalizeAttributes(Attributes attributes) {\n        if (!preserveAttributeCase) {\n            attributes.normalize();\n        }\n        return attributes;\n    }",
    "begin_line": 52,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.Parser#27",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.Parser(org.jsoup.parser.TreeBuilder)",
    "snippet": "public Parser(TreeBuilder treeBuilder) {\n        this.treeBuilder \u003d treeBuilder;\n        settings \u003d treeBuilder.defaultSettings();\n    }",
    "begin_line": 27,
    "end_line": 30,
    "comment": "/** \n * Create a new Parser, using the specified TreeBuilder\n * @param treeBuilder TreeBuilder to use to parse input into Documents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseInput#32",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseInput(java.lang.String, java.lang.String)",
    "snippet": "public Document parseInput(String html, String baseUri) {\n        errors \u003d isTrackErrors() ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\n        return treeBuilder.parse(new StringReader(html), baseUri, errors, settings);\n    }",
    "begin_line": 32,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseInput#37",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseInput(java.io.Reader, java.lang.String)",
    "snippet": "public Document parseInput(Reader inputHtml, String baseUri) {\n        errors \u003d isTrackErrors() ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\n        return treeBuilder.parse(inputHtml, baseUri, errors, settings);\n    }",
    "begin_line": 37,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getTreeBuilder#47",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.getTreeBuilder()",
    "snippet": "public TreeBuilder getTreeBuilder() {\n        return treeBuilder;\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "/** \n * Get the TreeBuilder currently in use.\n * @return current TreeBuilder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.setTreeBuilder#56",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.setTreeBuilder(org.jsoup.parser.TreeBuilder)",
    "snippet": "public Parser setTreeBuilder(TreeBuilder treeBuilder) {\n        this.treeBuilder \u003d treeBuilder;\n        return this;\n    }",
    "begin_line": 56,
    "end_line": 59,
    "comment": "/** \n * Update the TreeBuilder used when parsing content.\n * @param treeBuilder current TreeBuilder\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.isTrackErrors#65",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.isTrackErrors()",
    "snippet": "public boolean isTrackErrors() {\n        return maxErrors \u003e 0;\n    }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "/** \n * Check if parse error tracking is enabled.\n * @return current track error state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.setTrackErrors#74",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.setTrackErrors(int)",
    "snippet": "public Parser setTrackErrors(int maxErrors) {\n        this.maxErrors \u003d maxErrors;\n        return this;\n    }",
    "begin_line": 74,
    "end_line": 77,
    "comment": "/** \n * Enable or disable parse error tracking for the next parse.\n * @param maxErrors the maximum number of errors to track. Set to 0 to disable.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getErrors#83",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.getErrors()",
    "snippet": "public List\u003cParseError\u003e getErrors() {\n        return errors;\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Retrieve the parse errors, if any, from the last parse.\n * @return list of parse errors, up to the size of the maximum errors tracked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.settings#87",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.settings(org.jsoup.parser.ParseSettings)",
    "snippet": "public Parser settings(ParseSettings settings) {\n        this.settings \u003d settings;\n        return this;\n    }",
    "begin_line": 87,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.settings#92",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.settings()",
    "snippet": "public ParseSettings settings() {\n        return settings;\n    }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#105",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        TreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n        return treeBuilder.parse(new StringReader(html), baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n    }",
    "begin_line": 105,
    "end_line": 108,
    "comment": "/** \n * Parse HTML into a Document.\n * @param html HTML to parse\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return parsed Document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseFragment#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String)",
    "snippet": "public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri) {\n        HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n    }",
    "begin_line": 120,
    "end_line": 123,
    "comment": "/** \n * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n * @param fragmentHtml the fragment of HTML to parse\n * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). Thisprovides stack context (for implicit element creation).\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseFragment#136",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList)",
    "snippet": "public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri, ParseErrorList errorList) {\n        HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, errorList, treeBuilder.defaultSettings());\n    }",
    "begin_line": 136,
    "end_line": 139,
    "comment": "/** \n * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n * @param fragmentHtml the fragment of HTML to parse\n * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). Thisprovides stack context (for implicit element creation).\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @param errorList list to add errors to\n * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseXmlFragment#148",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseXmlFragment(java.lang.String, java.lang.String)",
    "snippet": "public static List\u003cNode\u003e parseXmlFragment(String fragmentXml, String baseUri) {\n        XmlTreeBuilder treeBuilder \u003d new XmlTreeBuilder();\n        return treeBuilder.parseFragment(fragmentXml, baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n    }",
    "begin_line": 148,
    "end_line": 151,
    "comment": "/** \n * Parse a fragment of XML into a list of nodes.\n * @param fragmentXml the fragment of XML to parse\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return list of nodes parsed from the input XML.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragment#161",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        Document doc \u003d Document.createShell(baseUri);\n        Element body \u003d doc.body();\n        List\u003cNode\u003e nodeList \u003d parseFragment(bodyHtml, body, baseUri);\n        Node[] nodes \u003d nodeList.toArray(new Node[nodeList.size()]); // the node list gets modified when re-parented\n        for (int i \u003d nodes.length - 1; i \u003e 0; i--) {\n            nodes[i].remove();\n        }\n        for (Node node : nodes) {\n            body.appendChild(node);\n        }\n        return doc;\n    }",
    "begin_line": 161,
    "end_line": 173,
    "comment": "/** \n * Parse a fragment of HTML into the  {@code body} of a Document.\n * @param bodyHtml fragment of HTML\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return Document, with empty head, and HTML parsed into body\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.unescapeEntities#181",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.unescapeEntities(java.lang.String, boolean)",
    "snippet": "public static String unescapeEntities(String string, boolean inAttribute) {\n        Tokeniser tokeniser \u003d new Tokeniser(new CharacterReader(string), ParseErrorList.noTracking());\n        return tokeniser.unescapeEntities(inAttribute);\n    }",
    "begin_line": 181,
    "end_line": 184,
    "comment": "/** \n * Utility method to unescape HTML entities from a string\n * @param string HTML escaped string\n * @param inAttribute if the string is to be escaped in strict mode (as attributes are)\n * @return an unescaped string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragmentRelaxed#193",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n        return parse(bodyHtml, baseUri);\n    }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "/** \n * @param bodyHtml HTML to parse\n * @param baseUri baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return parsed Document\n * @deprecated Use {@link #parseBodyFragment} or {@link #parseFragment} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.htmlParser#204",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.htmlParser()",
    "snippet": "public static Parser htmlParser() {\n        return new Parser(new HtmlTreeBuilder());\n    }",
    "begin_line": 204,
    "end_line": 206,
    "comment": "/** \n * Create a new HTML parser. This parser treats input as HTML5, and enforces the creation of a normalised document, based on a knowledge of the semantics of the incoming tags.\n * @return a new HTML parser.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.xmlParser#213",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.xmlParser()",
    "snippet": "public static Parser xmlParser() {\n        return new Parser(new XmlTreeBuilder());\n    }",
    "begin_line": 213,
    "end_line": 215,
    "comment": "/** \n * Create a new XML parser. This parser assumes no knowledge of the incoming tags and does not treat it as HTML, rather creates a simple tree directly from the input.\n * @return a new simple XML parser.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.Tag#26",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.Tag(java.lang.String)",
    "snippet": "private Tag(String tagName) {\n        this.tagName \u003d tagName;\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getName#35",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.getName()",
    "snippet": "public String getName() {\n        return tagName;\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "/** \n * Get this tag\u0027s name.\n * @return the tag\u0027s name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.valueOf#49",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String, org.jsoup.parser.ParseSettings)",
    "snippet": "public static Tag valueOf(String tagName, ParseSettings settings) {\n        Validate.notNull(tagName);\n        Tag tag \u003d tags.get(tagName);\n\n        if (tag \u003d\u003d null) {\n            tagName \u003d settings.normalizeTag(tagName);\n            Validate.notEmpty(tagName);\n            tag \u003d tags.get(tagName);\n\n            if (tag \u003d\u003d null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a \u003cp\u003e)\n                tag \u003d new Tag(tagName);\n                tag.isBlock \u003d false;\n            }\n        }\n        return tag;\n    }",
    "begin_line": 49,
    "end_line": 65,
    "comment": "/** \n * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything. \u003cp\u003e Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals(). \u003c/p\u003e\n * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n * @param settings used to control tag name sensitivity\n * @return The tag, either defined or new generic.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.valueOf#76",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String)",
    "snippet": "public static Tag valueOf(String tagName) {\n        return valueOf(tagName, ParseSettings.preserveCase);\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything. \u003cp\u003e Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals(). \u003c/p\u003e\n * @param tagName Name of tag, e.g. \"p\". \u003cb\u003eCase sensitive\u003c/b\u003e.\n * @return The tag, either defined or new generic.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isBlock#85",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isBlock()",
    "snippet": "public boolean isBlock() {\n        return isBlock;\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Gets if this is a block tag.\n * @return if block tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.formatAsBlock#94",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.formatAsBlock()",
    "snippet": "public boolean formatAsBlock() {\n        return formatAsBlock;\n    }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "/** \n * Gets if this tag should be formatted as a block (or as inline)\n * @return if should be formatted as block or inline\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.canContainBlock#104",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.canContainBlock()",
    "snippet": "public boolean canContainBlock() {\n        return isBlock;\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Gets if this tag can contain block tags.\n * @return if tag can contain block tags\n * @deprecated No longer used, and no different result than {{@link #isBlock()}}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isInline#113",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isInline()",
    "snippet": "public boolean isInline() {\n        return !isBlock;\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "/** \n * Gets if this tag is an inline tag.\n * @return if this tag is an inline tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isData#122",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isData()",
    "snippet": "public boolean isData() {\n        return !canContainInline \u0026\u0026 !isEmpty();\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "/** \n * Gets if this tag is a data only tag.\n * @return if this tag is a data only tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isEmpty#131",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return empty;\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Get if this is an empty tag\n * @return if this is an empty tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#140",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isSelfClosing()",
    "snippet": "public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Get if this tag is self closing.\n * @return if this tag should be output as self closing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#149",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag()",
    "snippet": "public boolean isKnownTag() {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Get if this is a pre-defined tag, or was auto created on parsing.\n * @return if a known tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#159",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag(java.lang.String)",
    "snippet": "public static boolean isKnownTag(String tagName) {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * Check if this tagname is a known tag.\n * @param tagName name of tag\n * @return if known HTML tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.preserveWhitespace#168",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.preserveWhitespace()",
    "snippet": "public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "/** \n * Get if this tag should preserve whitespace within child text nodes.\n * @return if preserve whitespace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isFormListed#176",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isFormListed()",
    "snippet": "public boolean isFormListed() {\n        return formList;\n    }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Get if this tag represents a control associated with a form. E.g. input, textarea, output\n * @return if associated with a form\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isFormSubmittable#184",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isFormSubmittable()",
    "snippet": "public boolean isFormSubmittable() {\n        return formSubmit;\n    }",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Get if this tag represents an element that should be submitted with a form. E.g. input, option\n * @return if submittable with a form\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setSelfClosing#188",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setSelfClosing()",
    "snippet": "Tag setSelfClosing() {\n        selfClosing \u003d true;\n        return this;\n    }",
    "begin_line": 188,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.equals#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Tag)) return false;\n\n        Tag tag \u003d (Tag) o;\n\n        if (!tagName.equals(tag.tagName)) return false;\n        if (canContainInline !\u003d tag.canContainInline) return false;\n        if (empty !\u003d tag.empty) return false;\n        if (formatAsBlock !\u003d tag.formatAsBlock) return false;\n        if (isBlock !\u003d tag.isBlock) return false;\n        if (preserveWhitespace !\u003d tag.preserveWhitespace) return false;\n        if (selfClosing !\u003d tag.selfClosing) return false;\n        if (formList !\u003d tag.formList) return false;\n        return formSubmit \u003d\u003d tag.formSubmit;\n    }",
    "begin_line": 194,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.hashCode#212",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d tagName.hashCode();\n        result \u003d 31 * result + (isBlock ? 1 : 0);\n        result \u003d 31 * result + (formatAsBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainInline ? 1 : 0);\n        result \u003d 31 * result + (empty ? 1 : 0);\n        result \u003d 31 * result + (selfClosing ? 1 : 0);\n        result \u003d 31 * result + (preserveWhitespace ? 1 : 0);\n        result \u003d 31 * result + (formList ? 1 : 0);\n        result \u003d 31 * result + (formSubmit ? 1 : 0);\n        return result;\n    }",
    "begin_line": 212,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.toString#226",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.toString()",
    "snippet": "@Override\n    public String toString() {\n        return tagName;\n    }",
    "begin_line": 226,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.register#314",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.register(org.jsoup.parser.Tag)",
    "snippet": "private static void register(Tag tag) {\n        tags.put(tag.tagName, tag);\n    }",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.Token#14",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Token()",
    "snippet": "private Token() {\n    }",
    "begin_line": 14,
    "end_line": 15,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.tokenType#17",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.tokenType()",
    "snippet": "String tokenType() {\n        return this.getClass().getSimpleName();\n    }",
    "begin_line": 17,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.reset#25",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "abstract Token reset();",
    "begin_line": 25,
    "end_line": 25,
    "comment": "/** \n * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every piece of data, which immediately get GCed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Token.reset#27",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset(java.lang.StringBuilder)",
    "snippet": "static void reset(StringBuilder sb) {\n        if (sb !\u003d null) {\n            sb.delete(0, sb.length());\n        }\n    }",
    "begin_line": 27,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.Doctype#40",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Doctype()",
    "snippet": " Doctype() {\n            type \u003d TokenType.Doctype;\n        }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.reset#45",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Token reset() {\n            reset(name);\n            pubSysKey \u003d null;\n            reset(publicIdentifier);\n            reset(systemIdentifier);\n            forceQuirks \u003d false;\n            return this;\n        }",
    "begin_line": 45,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getName#54",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getName()",
    "snippet": "String getName() {\n            return name.toString();\n        }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getPubSysKey#58",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getPubSysKey()",
    "snippet": "String getPubSysKey() {\n            return pubSysKey;\n        }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getPublicIdentifier#62",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getPublicIdentifier()",
    "snippet": "String getPublicIdentifier() {\n            return publicIdentifier.toString();\n        }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.getSystemIdentifier#66",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getSystemIdentifier()",
    "snippet": "public String getSystemIdentifier() {\n            return systemIdentifier.toString();\n        }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Doctype.isForceQuirks#70",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isForceQuirks()",
    "snippet": "public boolean isForceQuirks() {\n            return forceQuirks;\n        }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.reset#87",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Tag reset() {\n            tagName \u003d null;\n            normalName \u003d null;\n            pendingAttributeName \u003d null;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS \u003d null;\n            hasEmptyAttributeValue \u003d false;\n            hasPendingAttributeValue \u003d false;\n            selfClosing \u003d false;\n            attributes \u003d null;\n            return this;\n        }",
    "begin_line": 87,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.newAttribute#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.newAttribute()",
    "snippet": "final void newAttribute() {\n            if (attributes \u003d\u003d null)\n                attributes \u003d new Attributes();\n\n            if (pendingAttributeName !\u003d null) {\n                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                pendingAttributeName \u003d pendingAttributeName.trim();\n                if (pendingAttributeName.length() \u003e 0) {\n                    String value;\n                    if (hasPendingAttributeValue)\n                        value \u003d pendingAttributeValue.length() \u003e 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n                    else if (hasEmptyAttributeValue)\n                        value \u003d \"\";\n                    else\n                        value \u003d null;\n                    attributes.put(pendingAttributeName, value);\n                }\n            }\n            pendingAttributeName \u003d null;\n            hasEmptyAttributeValue \u003d false;\n            hasPendingAttributeValue \u003d false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS \u003d null;\n        }",
    "begin_line": 100,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.finaliseTag#125",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.finaliseTag()",
    "snippet": "final void finaliseTag() {\n            // finalises for emit\n            if (pendingAttributeName !\u003d null) {\n                // todo: check if attribute name exists; if so, drop and error\n                newAttribute();\n            }\n        }",
    "begin_line": 125,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.name#133",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.name()",
    "snippet": "final String name() { // preserves case, for input into Tag.valueOf (which may drop case)\n            Validate.isFalse(tagName \u003d\u003d null || tagName.length() \u003d\u003d 0);\n            return tagName;\n        }",
    "begin_line": 133,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.normalName#138",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.normalName()",
    "snippet": "final String normalName() { // loses case, used in tree building for working out where in tree it should go\n            return normalName;\n        }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.name#142",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.name(java.lang.String)",
    "snippet": "final Tag name(String name) {\n            tagName \u003d name;\n            normalName \u003d lowerCase(name);\n            return this;\n        }",
    "begin_line": 142,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#148",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isSelfClosing()",
    "snippet": "final boolean isSelfClosing() {\n            return selfClosing;\n        }",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getAttributes#153",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getAttributes()",
    "snippet": "@SuppressWarnings({\"TypeMayBeWeakened\"})\n        final Attributes getAttributes() {\n            return attributes;\n        }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendTagName#158",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendTagName(java.lang.String)",
    "snippet": "final void appendTagName(String append) {\n            tagName \u003d tagName \u003d\u003d null ? append : tagName.concat(append);\n            normalName \u003d lowerCase(tagName);\n        }",
    "begin_line": 158,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendTagName#163",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendTagName(char)",
    "snippet": "final void appendTagName(char append) {\n            appendTagName(String.valueOf(append));\n        }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeName#167",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeName(java.lang.String)",
    "snippet": "final void appendAttributeName(String append) {\n            pendingAttributeName \u003d pendingAttributeName \u003d\u003d null ? append : pendingAttributeName.concat(append);\n        }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeName#171",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeName(char)",
    "snippet": "final void appendAttributeName(char append) {\n            appendAttributeName(String.valueOf(append));\n        }",
    "begin_line": 171,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#175",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(java.lang.String)",
    "snippet": "final void appendAttributeValue(String append) {\n            ensureAttributeValue();\n            if (pendingAttributeValue.length() \u003d\u003d 0) {\n                pendingAttributeValueS \u003d append;\n            } else {\n                pendingAttributeValue.append(append);\n            }\n        }",
    "begin_line": 175,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#184",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(char)",
    "snippet": "final void appendAttributeValue(char append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }",
    "begin_line": 184,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(char[])",
    "snippet": "final void appendAttributeValue(char[] append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }",
    "begin_line": 189,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.appendAttributeValue#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.appendAttributeValue(int[])",
    "snippet": "final void appendAttributeValue(int[] appendCodepoints) {\n            ensureAttributeValue();\n            for (int codepoint : appendCodepoints) {\n                pendingAttributeValue.appendCodePoint(codepoint);\n            }\n        }",
    "begin_line": 194,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setEmptyAttributeValue#201",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.setEmptyAttributeValue()",
    "snippet": "final void setEmptyAttributeValue() {\n            hasEmptyAttributeValue \u003d true;\n        }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.ensureAttributeValue#205",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.ensureAttributeValue()",
    "snippet": "private void ensureAttributeValue() {\n            hasPendingAttributeValue \u003d true;\n            // if on second hit, we\u0027ll need to move to the builder\n            if (pendingAttributeValueS !\u003d null) {\n                pendingAttributeValue.append(pendingAttributeValueS);\n                pendingAttributeValueS \u003d null;\n            }\n        }",
    "begin_line": 205,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.StartTag#216",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.StartTag()",
    "snippet": " StartTag() {\n            super();\n            attributes \u003d new Attributes();\n            type \u003d TokenType.StartTag;\n        }",
    "begin_line": 216,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.reset#223",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Tag reset() {\n            super.reset();\n            attributes \u003d new Attributes();\n            // todo - would prefer these to be null, but need to check Element assertions\n            return this;\n        }",
    "begin_line": 223,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.nameAttr#230",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.nameAttr(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "StartTag nameAttr(String name, Attributes attributes) {\n            this.tagName \u003d name;\n            this.attributes \u003d attributes;\n            normalName \u003d lowerCase(tagName);\n            return this;\n        }",
    "begin_line": 230,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StartTag.toString#238",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0)\n                return \"\u003c\" + name() + \" \" + attributes.toString() + \"\u003e\";\n            else\n                return \"\u003c\" + name() + \"\u003e\";\n        }",
    "begin_line": 238,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EndTag.EndTag#247",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.EndTag()",
    "snippet": " EndTag() {\n            super();\n            type \u003d TokenType.EndTag;\n        }",
    "begin_line": 247,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EndTag.toString#253",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return \"\u003c/\" + name() + \"\u003e\";\n        }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.reset#263",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Token reset() {\n            reset(data);\n            bogus \u003d false;\n            return this;\n        }",
    "begin_line": 263,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.Comment#269",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Comment()",
    "snippet": " Comment() {\n            type \u003d TokenType.Comment;\n        }",
    "begin_line": 269,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.getData#273",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getData()",
    "snippet": "String getData() {\n            return data.toString();\n        }",
    "begin_line": 273,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Comment.toString#278",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return \"\u003c!--\" + getData() + \"--\u003e\";\n        }",
    "begin_line": 278,
    "end_line": 280,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.Character#286",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.Character()",
    "snippet": " Character() {\n            super();\n            type \u003d TokenType.Character;\n        }",
    "begin_line": 286,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.reset#292",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Token reset() {\n            data \u003d null;\n            return this;\n        }",
    "begin_line": 292,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.data#297",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.data(java.lang.String)",
    "snippet": "Character data(String data) {\n            this.data \u003d data;\n            return this;\n        }",
    "begin_line": 297,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.getData#302",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.getData()",
    "snippet": "String getData() {\n            return data;\n        }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Character.toString#307",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.toString()",
    "snippet": "@Override\n        public String toString() {\n            return getData();\n        }",
    "begin_line": 307,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.EOF#313",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.EOF()",
    "snippet": " EOF() {\n            type \u003d Token.TokenType.EOF;\n        }",
    "begin_line": 313,
    "end_line": 315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.reset#318",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.reset()",
    "snippet": "@Override\n        Token reset() {\n            return this;\n        }",
    "begin_line": 318,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isDoctype#323",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isDoctype()",
    "snippet": "final boolean isDoctype() {\n        return type \u003d\u003d TokenType.Doctype;\n    }",
    "begin_line": 323,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asDoctype#327",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asDoctype()",
    "snippet": "final Doctype asDoctype() {\n        return (Doctype) this;\n    }",
    "begin_line": 327,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isStartTag#331",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isStartTag()",
    "snippet": "final boolean isStartTag() {\n        return type \u003d\u003d TokenType.StartTag;\n    }",
    "begin_line": 331,
    "end_line": 333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asStartTag#335",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asStartTag()",
    "snippet": "final StartTag asStartTag() {\n        return (StartTag) this;\n    }",
    "begin_line": 335,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isEndTag#339",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isEndTag()",
    "snippet": "final boolean isEndTag() {\n        return type \u003d\u003d TokenType.EndTag;\n    }",
    "begin_line": 339,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asEndTag#343",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asEndTag()",
    "snippet": "final EndTag asEndTag() {\n        return (EndTag) this;\n    }",
    "begin_line": 343,
    "end_line": 345,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isComment#347",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isComment()",
    "snippet": "final boolean isComment() {\n        return type \u003d\u003d TokenType.Comment;\n    }",
    "begin_line": 347,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asComment#351",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asComment()",
    "snippet": "final Comment asComment() {\n        return (Comment) this;\n    }",
    "begin_line": 351,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isCharacter#355",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isCharacter()",
    "snippet": "final boolean isCharacter() {\n        return type \u003d\u003d TokenType.Character;\n    }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.asCharacter#359",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.asCharacter()",
    "snippet": "final Character asCharacter() {\n        return (Character) this;\n    }",
    "begin_line": 359,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EOF.isEOF#363",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Token.java",
    "class_name": "org.jsoup.parser.Token",
    "signature": "org.jsoup.parser.Token.isEOF()",
    "snippet": "final boolean isEOF() {\n        return type \u003d\u003d TokenType.EOF;\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.Tokeniser#38",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.Tokeniser(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)",
    "snippet": " Tokeniser(CharacterReader reader, ParseErrorList errors) {\n        this.reader \u003d reader;\n        this.errors \u003d errors;\n    }",
    "begin_line": 38,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.read#43",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.read()",
    "snippet": "Token read() {\n        while (!isEmitPending)\n            state.read(this, reader);\n\n        // if emit is pending, a non-character token was found: return any chars in buffer, and leave token for next read:\n        if (charsBuilder.length() \u003e 0) {\n            String str \u003d charsBuilder.toString();\n            charsBuilder.delete(0, charsBuilder.length());\n            charsString \u003d null;\n            return charPending.data(str);\n        } else if (charsString !\u003d null) {\n            Token token \u003d charPending.data(charsString);\n            charsString \u003d null;\n            return token;\n        } else {\n            isEmitPending \u003d false;\n            return emitPending;\n        }\n    }",
    "begin_line": 43,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#63",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(org.jsoup.parser.Token)",
    "snippet": "void emit(Token token) {\n        Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n\n        emitPending \u003d token;\n        isEmitPending \u003d true;\n\n        if (token.type \u003d\u003d Token.TokenType.StartTag) {\n            Token.StartTag startTag \u003d (Token.StartTag) token;\n            lastStartTag \u003d startTag.tagName;\n        } else if (token.type \u003d\u003d Token.TokenType.EndTag) {\n            Token.EndTag endTag \u003d (Token.EndTag) token;\n            if (endTag.attributes !\u003d null)\n                error(\"Attributes incorrectly present on end tag\");\n        }\n    }",
    "begin_line": 63,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#79",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(java.lang.String)",
    "snippet": "void emit(final String str) {\n        // buffer strings up until last string token found, to emit only one token for a run of character refs etc.\n        // does not set isEmitPending; read checks that\n        if (charsString \u003d\u003d null) {\n            charsString \u003d str;\n        }\n        else {\n            if (charsBuilder.length() \u003d\u003d 0) { // switching to string builder as more than one emit before read\n                charsBuilder.append(charsString);\n            }\n            charsBuilder.append(str);\n        }\n    }",
    "begin_line": 79,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#93",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(char[])",
    "snippet": "void emit(char[] chars) {\n        emit(String.valueOf(chars));\n    }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#97",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(int[])",
    "snippet": "void emit(int[] codepoints) {\n        emit(new String(codepoints, 0, codepoints.length));\n    }",
    "begin_line": 97,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emit#101",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emit(char)",
    "snippet": "void emit(char c) {\n        emit(String.valueOf(c));\n    }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.getState#105",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.getState()",
    "snippet": "TokeniserState getState() {\n        return state;\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.transition#109",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.transition(org.jsoup.parser.TokeniserState)",
    "snippet": "void transition(TokeniserState state) {\n        this.state \u003d state;\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.advanceTransition#113",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.advanceTransition(org.jsoup.parser.TokeniserState)",
    "snippet": "void advanceTransition(TokeniserState state) {\n        reader.advance();\n        this.state \u003d state;\n    }",
    "begin_line": 113,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.consumeCharacterReference#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.consumeCharacterReference(java.lang.Character, boolean)",
    "snippet": "int[] consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty())\n            return null;\n        if (additionalAllowedCharacter !\u003d null \u0026\u0026 additionalAllowedCharacter \u003d\u003d reader.current())\n            return null;\n        if (reader.matchesAnySorted(notCharRefCharsSorted))\n            return null;\n\n        final int[] codeRef \u003d codepointHolder;\n        reader.mark();\n        if (reader.matchConsume(\"#\")) { // numbered\n            boolean isHexMode \u003d reader.matchConsumeIgnoreCase(\"X\");\n            String numRef \u003d isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() \u003d\u003d 0) { // didn\u0027t match anything\n                characterReferenceError(\"numeric reference with no numerals\");\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\"))\n                characterReferenceError(\"missing semicolon\"); // missing semi\n            int charval \u003d -1;\n            try {\n                int base \u003d isHexMode ? 16 : 10;\n                charval \u003d Integer.valueOf(numRef, base);\n            } catch (NumberFormatException ignored) {\n            } // skip\n            if (charval \u003d\u003d -1 || (charval \u003e\u003d 0xD800 \u0026\u0026 charval \u003c\u003d 0xDFFF) || charval \u003e 0x10FFFF) {\n                characterReferenceError(\"character outside of valid range\");\n                codeRef[0] \u003d replacementChar;\n                return codeRef;\n            } else {\n                // todo: implement number replacement table\n                // todo: check for extra illegal unicode points as parse errors\n                codeRef[0] \u003d charval;\n                return codeRef;\n            }\n        } else { // named\n            // get as many letters as possible, and look for matching entities.\n            String nameRef \u003d reader.consumeLetterThenDigitSequence();\n            boolean looksLegit \u003d reader.matches(\u0027;\u0027);\n            // found if a base named entity without a ;, or an extended entity with the ;.\n            boolean found \u003d (Entities.isBaseNamedEntity(nameRef) || (Entities.isNamedEntity(nameRef) \u0026\u0026 looksLegit));\n\n            if (!found) {\n                reader.rewindToMark();\n                if (looksLegit) // named with semicolon\n                    characterReferenceError(String.format(\"invalid named referenece \u0027%s\u0027\", nameRef));\n                return null;\n            }\n            if (inAttribute \u0026\u0026 (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny(\u0027\u003d\u0027, \u0027-\u0027, \u0027_\u0027))) {\n                // don\u0027t want that to match\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\"))\n                characterReferenceError(\"missing semicolon\"); // missing semi\n            int numChars \u003d Entities.codepointsForName(nameRef, multipointHolder);\n            if (numChars \u003d\u003d 1) {\n                codeRef[0] \u003d multipointHolder[0];\n                return codeRef;\n            } else if (numChars \u003d\u003d2) {\n                return multipointHolder;\n            } else {\n                Validate.fail(\"Unexpected characters returned for \" + nameRef);\n                return multipointHolder;\n            }\n        }\n    }",
    "begin_line": 120,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createTagPending#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createTagPending(boolean)",
    "snippet": "Token.Tag createTagPending(boolean start) {\n        tagPending \u003d start ? startPending.reset() : endPending.reset();\n        return tagPending;\n    }",
    "begin_line": 189,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitTagPending#194",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitTagPending()",
    "snippet": "void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }",
    "begin_line": 194,
    "end_line": 197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createCommentPending#199",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createCommentPending()",
    "snippet": "void createCommentPending() {\n        commentPending.reset();\n    }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitCommentPending#203",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitCommentPending()",
    "snippet": "void emitCommentPending() {\n        emit(commentPending);\n    }",
    "begin_line": 203,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createDoctypePending#207",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createDoctypePending()",
    "snippet": "void createDoctypePending() {\n        doctypePending.reset();\n    }",
    "begin_line": 207,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.emitDoctypePending#211",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.emitDoctypePending()",
    "snippet": "void emitDoctypePending() {\n        emit(doctypePending);\n    }",
    "begin_line": 211,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.createTempBuffer#215",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.createTempBuffer()",
    "snippet": "void createTempBuffer() {\n        Token.reset(dataBuffer);\n    }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.isAppropriateEndTagToken#219",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.isAppropriateEndTagToken()",
    "snippet": "boolean isAppropriateEndTagToken() {\n        return lastStartTag !\u003d null \u0026\u0026 tagPending.name().equalsIgnoreCase(lastStartTag);\n    }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.appropriateEndTagName#223",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.appropriateEndTagName()",
    "snippet": "String appropriateEndTagName() {\n        if (lastStartTag \u003d\u003d null)\n            return null;\n        return lastStartTag;\n    }",
    "begin_line": 223,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.error#229",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.error(org.jsoup.parser.TokeniserState)",
    "snippet": "void error(TokeniserState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpected character \u0027%s\u0027 in input state [%s]\", reader.current(), state));\n    }",
    "begin_line": 229,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.eofError#234",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.eofError(org.jsoup.parser.TokeniserState)",
    "snippet": "void eofError(TokeniserState state) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));\n    }",
    "begin_line": 234,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.characterReferenceError#239",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.characterReferenceError(java.lang.String)",
    "snippet": "private void characterReferenceError(String message) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n    }",
    "begin_line": 239,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.error#244",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.error(java.lang.String)",
    "snippet": "void error(String errorMsg) {\n        if (errors.canAddError())\n            errors.add(new ParseError(reader.pos(), errorMsg));\n    }",
    "begin_line": 244,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.currentNodeInHtmlNS#249",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.currentNodeInHtmlNS()",
    "snippet": "boolean currentNodeInHtmlNS() {\n        // todo: implement namespaces correctly\n        return true;\n        // Element currentNode \u003d currentNode();\n        // return currentNode !\u003d null \u0026\u0026 currentNode.namespace().equals(\"HTML\");\n    }",
    "begin_line": 249,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tokeniser.unescapeEntities#261",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tokeniser.java",
    "class_name": "org.jsoup.parser.Tokeniser",
    "signature": "org.jsoup.parser.Tokeniser.unescapeEntities(boolean)",
    "snippet": "String unescapeEntities(boolean inAttribute) {\n        StringBuilder builder \u003d StringUtil.stringBuilder();\n        while (!reader.isEmpty()) {\n            builder.append(reader.consumeTo(\u0027\u0026\u0027));\n            if (reader.matches(\u0027\u0026\u0027)) {\n                reader.consume();\n                int[] c \u003d consumeCharacterReference(null, inAttribute);\n                if (c \u003d\u003d null || c.length\u003d\u003d0)\n                    builder.append(\u0027\u0026\u0027);\n                else {\n                    builder.appendCodePoint(c[0]);\n                    if (c.length \u003d\u003d 2)\n                        builder.appendCodePoint(c[1]);\n                }\n\n            }\n        }\n        return builder.toString();\n    }",
    "begin_line": 261,
    "end_line": 279,
    "comment": "/** \n * Utility method to consume reader and unescape entities found within.\n * @param inAttribute if the text to be unescaped is in an attribute\n * @return unescaped string from reader\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#13",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u0026\u0027:\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeData();\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 13,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#37",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readCharRef(t, Data);\n        }",
    "begin_line": 37,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#43",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027\u0026\u0027:\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027\u0026\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 43,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#67",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readCharRef(t, Rcdata);\n        }",
    "begin_line": 67,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#72",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readData(t, r, this, RawtextLessthanSign);\n        }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#77",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readData(t, r, this, ScriptDataLessthanSign);\n        }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#82",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data \u003d r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }\n        }",
    "begin_line": 82,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#101",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.current()) {\n                case \u0027!\u0027:\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case \u0027/\u0027:\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case \u0027?\u0027:\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit(\u0027\u003c\u0027); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }\n        }",
    "begin_line": 101,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#126",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.emit(\"\u003c/\");\n                t.transition(Data);\n            } else if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.transition(TagName);\n            } else if (r.matches(\u0027\u003e\u0027)) {\n                t.error(this);\n                t.advanceTransition(Data);\n            } else {\n                t.error(this);\n                t.advanceTransition(BogusComment);\n            }\n        }",
    "begin_line": 126,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#145",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            // previous TagOpen state did NOT consume, will have a letter char in current\n            //String tagName \u003d r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n            String tagName \u003d r.consumeTagName();\n            t.tagPending.appendTagName(tagName);\n\n            switch (r.consume()) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }\n        }",
    "begin_line": 145,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#178",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(RCDATAEndTagOpen);\n            } else if (r.matchesLetter() \u0026\u0026 t.appropriateEndTagName() !\u003d null \u0026\u0026 !r.containsIgnoreCase(\"\u003c/\" + t.appropriateEndTagName())) {\n                // diverge from spec: got a start tag, but there\u0027s no appropriate end tag (\u003c/title\u003e), so rather than\n                // consuming to EOF; break out here\n                t.tagPending \u003d t.createTagPending(false).name(t.appropriateEndTagName());\n                t.emitTagPending();\n                r.unconsume(); // undo \"\u003c\"\n                t.transition(Data);\n            } else {\n                t.emit(\"\u003c\");\n                t.transition(Rcdata);\n            }\n        }",
    "begin_line": 178,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#196",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.tagPending.appendTagName(r.current());\n                t.dataBuffer.append(r.current());\n                t.advanceTransition(RCDATAEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(Rcdata);\n            }\n        }",
    "begin_line": 196,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#209",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.tagPending.appendTagName(name);\n                t.dataBuffer.append(name);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case \u0027/\u0027:\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case \u0027\u003e\u0027:\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }\n        }",
    "begin_line": 209,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.anythingElse#248",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.anythingElse(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "private void anythingElse(Tokeniser t, CharacterReader r) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            r.unconsume();\n            t.transition(Rcdata);\n        }",
    "begin_line": 248,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#255",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(RawtextEndTagOpen);\n            } else {\n                t.emit(\u0027\u003c\u0027);\n                t.transition(Rawtext);\n            }\n        }",
    "begin_line": 255,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#266",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readEndTag(t, r, RawtextEndTagName, Rawtext);\n        }",
    "begin_line": 266,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#271",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            handleDataEndTag(t, r, Rawtext);\n        }",
    "begin_line": 271,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#276",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            switch (r.consume()) {\n                case \u0027/\u0027:\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case \u0027!\u0027:\n                    t.emit(\"\u003c!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"\u003c\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }\n        }",
    "begin_line": 276,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#294",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            readEndTag(t, r, ScriptDataEndTagName, ScriptData);\n        }",
    "begin_line": 294,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#299",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            handleDataEndTag(t, r, ScriptData);\n        }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#304",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027-\u0027)) {\n                t.emit(\u0027-\u0027);\n                t.advanceTransition(ScriptDataEscapeStartDash);\n            } else {\n                t.transition(ScriptData);\n            }\n        }",
    "begin_line": 304,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#314",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027-\u0027)) {\n                t.emit(\u0027-\u0027);\n                t.advanceTransition(ScriptDataEscapedDashDash);\n            } else {\n                t.transition(ScriptData);\n            }\n        }",
    "begin_line": 314,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#324",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            switch (r.current()) {\n                case \u0027-\u0027:\n                    t.emit(\u0027-\u0027);\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027-\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n            }\n        }",
    "begin_line": 324,
    "end_line": 348,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#351",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 351,
    "end_line": 376,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#379",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            }\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 379,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#410",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTempBuffer();\n                t.dataBuffer.append(r.current());\n                t.emit(\"\u003c\" + r.current());\n                t.advanceTransition(ScriptDataDoubleEscapeStart);\n            } else if (r.matches(\u0027/\u0027)) {\n                t.createTempBuffer();\n                t.advanceTransition(ScriptDataEscapedEndTagOpen);\n            } else {\n                t.emit(\u0027\u003c\u0027);\n                t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 410,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#426",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createTagPending(false);\n                t.tagPending.appendTagName(r.current());\n                t.dataBuffer.append(r.current());\n                t.advanceTransition(ScriptDataEscapedEndTagName);\n            } else {\n                t.emit(\"\u003c/\");\n                t.transition(ScriptDataEscaped);\n            }\n        }",
    "begin_line": 426,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#439",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            handleDataEndTag(t, r, ScriptDataEscaped);\n        }",
    "begin_line": 439,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#444",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            handleDataDoubleEscapeTag(t, r, ScriptDataDoubleEscaped, ScriptDataEscaped);\n        }",
    "begin_line": 444,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#449",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.current();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data \u003d r.consumeToAny(\u0027-\u0027, \u0027\u003c\u0027, nullChar);\n                    t.emit(data);\n            }\n        }",
    "begin_line": 449,
    "end_line": 473,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#476",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 476,
    "end_line": 500,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#503",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.emit(c);\n                    break;\n                case \u0027\u003c\u0027:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 503,
    "end_line": 530,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#533",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matches(\u0027/\u0027)) {\n                t.emit(\u0027/\u0027);\n                t.createTempBuffer();\n                t.advanceTransition(ScriptDataDoubleEscapeEnd);\n            } else {\n                t.transition(ScriptDataDoubleEscaped);\n            }\n        }",
    "begin_line": 533,
    "end_line": 541,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#544",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            handleDataDoubleEscapeTag(t,r, ScriptDataEscaped, ScriptDataDoubleEscaped);\n        }",
    "begin_line": 544,
    "end_line": 546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#550",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break; // ignore whitespace\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }\n        }",
    "begin_line": 550,
    "end_line": 590,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#594",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String name \u003d r.consumeToAnySorted(attributeNameCharsSorted);\n            t.tagPending.appendAttributeName(name);\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(AfterAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003d\u0027:\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }\n        }",
    "begin_line": 594,
    "end_line": 632,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#635",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    // ignore\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003d\u0027:\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }\n        }",
    "begin_line": 635,
    "end_line": 677,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#680",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    // ignore\n                    break;\n                case \u0027\"\u0027:\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                case \u0027`\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }\n        }",
    "begin_line": 680,
    "end_line": 726,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#729",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAny(attributeDoubleValueCharsSorted);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n            else\n                t.tagPending.setEmptyAttributeValue();\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    int[] ref \u003d t.consumeCharacterReference(\u0027\"\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }\n        }",
    "begin_line": 729,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#761",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAny(attributeSingleValueCharsSorted);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n            else\n                t.tagPending.setEmptyAttributeValue();\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case \u0027\u0026\u0027:\n                    int[] ref \u003d t.consumeCharacterReference(\u0027\\\u0027\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }\n        }",
    "begin_line": 761,
    "end_line": 790,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#793",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String value \u003d r.consumeToAnySorted(attributeValueUnquoted);\n            if (value.length() \u003e 0)\n                t.tagPending.appendAttributeValue(value);\n\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027\u0026\u0027:\n                    int[] ref \u003d t.consumeCharacterReference(\u0027\u003e\u0027, true);\n                    if (ref !\u003d null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue(\u0027\u0026\u0027);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                case \u0027\\\u0027\u0027:\n                case \u0027\u003c\u0027:\n                case \u0027\u003d\u0027:\n                case \u0027`\u0027:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }\n\n        }",
    "begin_line": 793,
    "end_line": 837,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#841",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }\n\n        }",
    "begin_line": 841,
    "end_line": 868,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#871",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.tagPending.selfClosing \u003d true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }\n        }",
    "begin_line": 871,
    "end_line": 888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#891",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            // todo: handle bogus comment starting from eof. when does that trigger?\n            // rewind to capture character that lead us here\n            r.unconsume();\n            Token.Comment comment \u003d new Token.Comment();\n            comment.bogus \u003d true;\n            comment.data.append(r.consumeTo(\u0027\u003e\u0027));\n            // todo: replace nullChar with replaceChar\n            t.emit(comment);\n            t.advanceTransition(Data);\n        }",
    "begin_line": 891,
    "end_line": 901,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#904",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchConsume(\"--\")) {\n                t.createCommentPending();\n                t.transition(CommentStart);\n            } else if (r.matchConsumeIgnoreCase(\"DOCTYPE\")) {\n                t.transition(Doctype);\n            } else if (r.matchConsume(\"[CDATA[\")) {\n                // todo: should actually check current namepspace, and only non-html allows cdata. until namespace\n                // is implemented properly, keep handling as cdata\n                //} else if (!t.currentNodeInHtmlNS() \u0026\u0026 r.matchConsume(\"[CDATA[\")) {\n                t.transition(CdataSection);\n            } else {\n                t.error(this);\n                t.advanceTransition(BogusComment); // advance so this character gets in bogus comment data\u0027s rewind\n            }\n        }",
    "begin_line": 904,
    "end_line": 919,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#922",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 922,
    "end_line": 947,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#950",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 950,
    "end_line": 975,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#978",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.current();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny(\u0027-\u0027, nullChar));\n            }\n        }",
    "begin_line": 978,
    "end_line": 997,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1000",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\u0027-\u0027).append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\u0027-\u0027).append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1000,
    "end_line": 1020,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1023",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case \u0027!\u0027:\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case \u0027-\u0027:\n                    t.error(this);\n                    t.commentPending.data.append(\u0027-\u0027);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1023,
    "end_line": 1053,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1056",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027-\u0027:\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }\n        }",
    "begin_line": 1056,
    "end_line": 1081,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1084",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    // note: fall through to \u003e case\n                case \u0027\u003e\u0027: // catch invalid \u003c!DOCTYPE\u003e\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }\n        }",
    "begin_line": 1084,
    "end_line": 1108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1111",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                t.createDoctypePending();\n                t.transition(DoctypeName);\n                return;\n            }\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }\n        }",
    "begin_line": 1111,
    "end_line": 1143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1146",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name \u003d r.consumeLetterSequence();\n                t.doctypePending.name.append(name);\n                return;\n            }\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }\n        }",
    "begin_line": 1146,
    "end_line": 1178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1181",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            if (r.isEmpty()) {\n                t.eofError(this);\n                t.doctypePending.forceQuirks \u003d true;\n                t.emitDoctypePending();\n                t.transition(Data);\n                return;\n            }\n            if (r.matchesAny(\u0027\\t\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\f\u0027, \u0027 \u0027))\n                r.advance(); // ignore whitespace\n            else if (r.matches(\u0027\u003e\u0027)) {\n                t.emitDoctypePending();\n                t.advanceTransition(Data);\n            } else if (r.matchConsumeIgnoreCase(DocumentType.PUBLIC_KEY)) {\n                t.doctypePending.pubSysKey \u003d DocumentType.PUBLIC_KEY;\n                t.transition(AfterDoctypePublicKeyword);\n            } else if (r.matchConsumeIgnoreCase(DocumentType.SYSTEM_KEY)) {\n                t.doctypePending.pubSysKey \u003d DocumentType.SYSTEM_KEY;\n                t.transition(AfterDoctypeSystemKeyword);\n            } else {\n                t.error(this);\n                t.doctypePending.forceQuirks \u003d true;\n                t.advanceTransition(BogusDoctype);\n            }\n\n        }",
    "begin_line": 1181,
    "end_line": 1206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1209",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1209,
    "end_line": 1246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1249",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\"\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1249,
    "end_line": 1283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1286",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }\n        }",
    "begin_line": 1286,
    "end_line": 1311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1314",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }\n        }",
    "begin_line": 1314,
    "end_line": 1339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1342",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1342,
    "end_line": 1377,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1380",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1380,
    "end_line": 1414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1417",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case \u0027\"\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n            }\n        }",
    "begin_line": 1417,
    "end_line": 1454,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1457",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\"\u0027:\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case \u0027\\\u0027\u0027:\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.transition(BogusDoctype);\n            }\n        }",
    "begin_line": 1457,
    "end_line": 1491,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1494",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\"\u0027:\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }\n        }",
    "begin_line": 1494,
    "end_line": 1519,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1522",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\\u0027\u0027:\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.error(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }\n        }",
    "begin_line": 1522,
    "end_line": 1547,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1550",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks \u003d true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }\n        }",
    "begin_line": 1550,
    "end_line": 1574,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1577",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\u003e\u0027:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }\n        }",
    "begin_line": 1577,
    "end_line": 1592,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1595",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "void read(Tokeniser t, CharacterReader r) {\n            String data \u003d r.consumeTo(\"]]\u003e\");\n            t.emit(data);\n            r.matchConsume(\"]]\u003e\");\n            t.transition(Data);\n        }",
    "begin_line": 1595,
    "end_line": 1600,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.read#1604",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.read(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader)",
    "snippet": "abstract void read(Tokeniser t, CharacterReader r);",
    "begin_line": 1604,
    "end_line": 1604,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleDataEndTag#1627",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.handleDataEndTag(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader, org.jsoup.parser.TokeniserState)",
    "snippet": "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition) {\n        if (r.matchesLetter()) {\n            String name \u003d r.consumeLetterSequence();\n            t.tagPending.appendTagName(name);\n            t.dataBuffer.append(name);\n            return;\n        }\n\n        boolean needsExitTransition \u003d false;\n        if (t.isAppropriateEndTagToken() \u0026\u0026 !r.isEmpty()) {\n            char c \u003d r.consume();\n            switch (c) {\n                case \u0027\\t\u0027:\n                case \u0027\\n\u0027:\n                case \u0027\\r\u0027:\n                case \u0027\\f\u0027:\n                case \u0027 \u0027:\n                    t.transition(BeforeAttributeName);\n                    break;\n                case \u0027/\u0027:\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case \u0027\u003e\u0027:\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    needsExitTransition \u003d true;\n            }\n        } else {\n            needsExitTransition \u003d true;\n        }\n\n        if (needsExitTransition) {\n            t.emit(\"\u003c/\" + t.dataBuffer.toString());\n            t.transition(elseTransition);\n        }\n    }",
    "begin_line": 1627,
    "end_line": 1665,
    "comment": "/** \n * Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName. Same body impl, just different else exit transitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.readData#1667",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.readData(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader, org.jsoup.parser.TokeniserState, org.jsoup.parser.TokeniserState)",
    "snippet": "private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance) {\n        switch (r.current()) {\n            case \u0027\u003c\u0027:\n                t.advanceTransition(advance);\n                break;\n            case nullChar:\n                t.error(current);\n                r.advance();\n                t.emit(replacementChar);\n                break;\n            case eof:\n                t.emit(new Token.EOF());\n                break;\n            default:\n                String data \u003d r.consumeToAny(\u0027\u003c\u0027, nullChar); // todo - why hunt for null here? Just consumeTo\u0027\u003c\u0027?\n                t.emit(data);\n                break;\n        }\n    }",
    "begin_line": 1667,
    "end_line": 1685,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.readCharRef#1687",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.readCharRef(org.jsoup.parser.Tokeniser, org.jsoup.parser.TokeniserState)",
    "snippet": "private static void readCharRef(Tokeniser t, TokeniserState advance) {\n        int[] c \u003d t.consumeCharacterReference(null, false);\n        if (c \u003d\u003d null)\n            t.emit(\u0027\u0026\u0027);\n        else\n            t.emit(c);\n        t.transition(advance);\n    }",
    "begin_line": 1687,
    "end_line": 1694,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.readEndTag#1696",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.readEndTag(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader, org.jsoup.parser.TokeniserState, org.jsoup.parser.TokeniserState)",
    "snippet": "private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b) {\n        if (r.matchesLetter()) {\n            t.createTagPending(false);\n            t.transition(a);\n        } else {\n            t.emit(\"\u003c/\");\n            t.transition(b);\n        }\n    }",
    "begin_line": 1696,
    "end_line": 1704,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.handleDataDoubleEscapeTag#1706",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokeniserState.java",
    "class_name": "org.jsoup.parser.TokeniserState",
    "signature": "org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(org.jsoup.parser.Tokeniser, org.jsoup.parser.CharacterReader, org.jsoup.parser.TokeniserState, org.jsoup.parser.TokeniserState)",
    "snippet": "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback) {\n        if (r.matchesLetter()) {\n            String name \u003d r.consumeLetterSequence();\n            t.dataBuffer.append(name);\n            t.emit(name);\n            return;\n        }\n\n        char c \u003d r.consume();\n        switch (c) {\n            case \u0027\\t\u0027:\n            case \u0027\\n\u0027:\n            case \u0027\\r\u0027:\n            case \u0027\\f\u0027:\n            case \u0027 \u0027:\n            case \u0027/\u0027:\n            case \u0027\u003e\u0027:\n                if (t.dataBuffer.toString().equals(\"script\"))\n                    t.transition(primary);\n                else\n                    t.transition(fallback);\n                t.emit(c);\n                break;\n            default:\n                r.unconsume();\n                t.transition(fallback);\n        }\n    }",
    "begin_line": 1706,
    "end_line": 1733,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.defaultSettings#27",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.defaultSettings()",
    "snippet": "abstract ParseSettings defaultSettings();",
    "begin_line": 27,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.initialiseParse#29",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.initialiseParse(java.io.Reader, java.lang.String, org.jsoup.parser.ParseErrorList, org.jsoup.parser.ParseSettings)",
    "snippet": "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        Validate.notNull(input, \"String input must not be null\");\n        Validate.notNull(baseUri, \"BaseURI must not be null\");\n\n        doc \u003d new Document(baseUri);\n        this.settings \u003d settings;\n        reader \u003d new CharacterReader(input);\n        this.errors \u003d errors;\n        currentToken \u003d null;\n        tokeniser \u003d new Tokeniser(reader, errors);\n        stack \u003d new ArrayList\u003c\u003e(32);\n        this.baseUri \u003d baseUri;\n    }",
    "begin_line": 29,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.parse#43",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.parse(java.io.Reader, java.lang.String, org.jsoup.parser.ParseErrorList, org.jsoup.parser.ParseSettings)",
    "snippet": "Document parse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        initialiseParse(input, baseUri, errors, settings);\n        runParser();\n        return doc;\n    }",
    "begin_line": 43,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.runParser#49",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.runParser()",
    "snippet": "protected void runParser() {\n        while (true) {\n            Token token \u003d tokeniser.read();\n            process(token);\n            token.reset();\n\n            if (token.type \u003d\u003d Token.TokenType.EOF)\n                break;\n        }\n    }",
    "begin_line": 49,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.process#60",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.process(org.jsoup.parser.Token)",
    "snippet": "protected abstract boolean process(Token token);",
    "begin_line": 60,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.processStartTag#62",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.processStartTag(java.lang.String)",
    "snippet": "protected boolean processStartTag(String name) {\n        if (currentToken \u003d\u003d start) { // don\u0027t recycle an in-use token\n            return process(new Token.StartTag().name(name));\n        }\n        return process(start.reset().name(name));\n    }",
    "begin_line": 62,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.processStartTag#69",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.processStartTag(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "public boolean processStartTag(String name, Attributes attrs) {\n        if (currentToken \u003d\u003d start) { // don\u0027t recycle an in-use token\n            return process(new Token.StartTag().nameAttr(name, attrs));\n        }\n        start.reset();\n        start.nameAttr(name, attrs);\n        return process(start);\n    }",
    "begin_line": 69,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.processEndTag#78",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.processEndTag(java.lang.String)",
    "snippet": "protected boolean processEndTag(String name) {\n        if (currentToken \u003d\u003d end) { // don\u0027t recycle an in-use token\n            return process(new Token.EndTag().name(name));\n        }\n        return process(end.reset().name(name));\n    }",
    "begin_line": 78,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TreeBuilder.currentElement#86",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TreeBuilder.java",
    "class_name": "org.jsoup.parser.TreeBuilder",
    "signature": "org.jsoup.parser.TreeBuilder.currentElement()",
    "snippet": "protected Element currentElement() {\n        int size \u003d stack.size();\n        return size \u003e 0 ? stack.get(size-1) : null;\n    }",
    "begin_line": 86,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#23",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements()",
    "snippet": "public Elements() {\n    }",
    "begin_line": 23,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#26",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(int)",
    "snippet": "public Elements(int initialCapacity) {\n        super(initialCapacity);\n    }",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#30",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "public Elements(Collection\u003cElement\u003e elements) {\n        super(elements);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#34",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(java.util.List\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "public Elements(List\u003cElement\u003e elements) {\n        super(elements);\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#38",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(org.jsoup.nodes.Element)",
    "snippet": "public Elements(Element... elements) {\n    \tsuper(Arrays.asList(elements));\n    }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.clone#47",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.clone()",
    "snippet": "@Override\n\tpublic Elements clone() {\n        Elements clone \u003d new Elements(size());\n\n        for(Element e : this)\n    \t\tclone.add(e.clone());\n    \t\n    \treturn clone;\n\t}",
    "begin_line": 47,
    "end_line": 54,
    "comment": "/** \n * Creates a deep copy of these elements.\n * @return a deep copy\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.attr#64",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        for (Element element : this) {\n            if (element.hasAttr(attributeKey))\n                return element.attr(attributeKey);\n        }\n        return \"\";\n    }",
    "begin_line": 64,
    "end_line": 70,
    "comment": "/** \n * Get an attribute value from the first matched element that has the attribute.\n * @param attributeKey The attribute key.\n * @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() \u003d\u003d true),or if the no elements have the attribute, returns empty string.\n * @see #hasAttr(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasAttr#77",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        for (Element element : this) {\n            if (element.hasAttr(attributeKey))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 77,
    "end_line": 83,
    "comment": "/** \n * Checks if any of the matched elements have this attribute defined.\n * @param attributeKey attribute key\n * @return true if any of the elements have the attribute; false if none do.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.eachAttr#92",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.eachAttr(java.lang.String)",
    "snippet": "public List\u003cString\u003e eachAttr(String attributeKey) {\n        List\u003cString\u003e attrs \u003d new ArrayList\u003c\u003e(size());\n        for (Element element : this) {\n            if (element.hasAttr(attributeKey))\n                attrs.add(element.attr(attributeKey));\n        }\n        return attrs;\n    }",
    "begin_line": 92,
    "end_line": 99,
    "comment": "/** \n * Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element.\n * @param attributeKey the attribute name to return values for. You can add the {@code abs:} prefix to the key toget absolute URLs from relative URLs, e.g.:  {@code doc.select(\"a\").eachAttr(\"abs:href\")} .\n * @return a list of each element\u0027s attribute value for the attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.attr#107",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.attr(java.lang.String, java.lang.String)",
    "snippet": "public Elements attr(String attributeKey, String attributeValue) {\n        for (Element element : this) {\n            element.attr(attributeKey, attributeValue);\n        }\n        return this;\n    }",
    "begin_line": 107,
    "end_line": 112,
    "comment": "/** \n * Set an attribute on all matched elements.\n * @param attributeKey attribute key\n * @param attributeValue attribute value\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.removeAttr#119",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.removeAttr(java.lang.String)",
    "snippet": "public Elements removeAttr(String attributeKey) {\n        for (Element element : this) {\n            element.removeAttr(attributeKey);\n        }\n        return this;\n    }",
    "begin_line": 119,
    "end_line": 124,
    "comment": "/** \n * Remove an attribute from every matched element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.addClass#131",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.addClass(java.lang.String)",
    "snippet": "public Elements addClass(String className) {\n        for (Element element : this) {\n            element.addClass(className);\n        }\n        return this;\n    }",
    "begin_line": 131,
    "end_line": 136,
    "comment": "/** \n * Add the class name to every matched element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.removeClass#143",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.removeClass(java.lang.String)",
    "snippet": "public Elements removeClass(String className) {\n        for (Element element : this) {\n            element.removeClass(className);\n        }\n        return this;\n    }",
    "begin_line": 143,
    "end_line": 148,
    "comment": "/** \n * Remove the class name from every matched element\u0027s  {@code class} attribute, if present.\n * @param className class name to remove\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toggleClass#155",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toggleClass(java.lang.String)",
    "snippet": "public Elements toggleClass(String className) {\n        for (Element element : this) {\n            element.toggleClass(className);\n        }\n        return this;\n    }",
    "begin_line": 155,
    "end_line": 160,
    "comment": "/** \n * Toggle the class name on every matched element\u0027s  {@code class} attribute.\n * @param className class name to add if missing, or remove if present, from every element.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasClass#167",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasClass(java.lang.String)",
    "snippet": "public boolean hasClass(String className) {\n        for (Element element : this) {\n            if (element.hasClass(className))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 167,
    "end_line": 173,
    "comment": "/** \n * Determine if any of the matched elements have this class name set in their  {@code class} attribute.\n * @param className class name to check for\n * @return true if any do, false if none do\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.val#180",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.val()",
    "snippet": "public String val() {\n        if (size() \u003e 0)\n            return first().val();\n        else\n            return \"\";\n    }",
    "begin_line": 180,
    "end_line": 185,
    "comment": "/** \n * Get the form element\u0027s value of the first matched element.\n * @return The form element\u0027s value, or empty if not set.\n * @see Element#val()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.val#192",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.val(java.lang.String)",
    "snippet": "public Elements val(String value) {\n        for (Element element : this)\n            element.val(value);\n        return this;\n    }",
    "begin_line": 192,
    "end_line": 196,
    "comment": "/** \n * Set the form element\u0027s value in each of the matched elements.\n * @param value The value to set into each matched element\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.text#207",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.text()",
    "snippet": "public String text() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : this) {\n            if (sb.length() !\u003d 0)\n                sb.append(\" \");\n            sb.append(element.text());\n        }\n        return sb.toString();\n    }",
    "begin_line": 207,
    "end_line": 215,
    "comment": "/** \n * Get the combined text of all the matched elements. \u003cp\u003e Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children.\n * @return string of all text: unescaped and no HTML.\n * @see Element#text()\n * @see #eachText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasText#222",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasText()",
    "snippet": "public boolean hasText() {\n        for (Element element: this) {\n            if (element.hasText())\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 222,
    "end_line": 228,
    "comment": "/** \n * Test if any matched Element has any text content, that is not just whitespace.\n * @return true if any element has non-blank text content.\n * @see Element#hasText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.eachText#238",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.eachText()",
    "snippet": "public List\u003cString\u003e eachText() {\n        ArrayList\u003cString\u003e texts \u003d new ArrayList\u003c\u003e(size());\n        for (Element el: this) {\n            if (el.hasText())\n                texts.add(el.text());\n        }\n        return texts;\n    }",
    "begin_line": 238,
    "end_line": 245,
    "comment": "/** \n * Get the text content of each of the matched elements. If an element has no text, then it is not included in the result.\n * @return A list of each matched element\u0027s text content.\n * @see Element#text()\n * @see Element#hasText()\n * @see #text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.html#253",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.html()",
    "snippet": "public String html() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : this) {\n            if (sb.length() !\u003d 0)\n                sb.append(\"\\n\");\n            sb.append(element.html());\n        }\n        return sb.toString();\n    }",
    "begin_line": 253,
    "end_line": 261,
    "comment": "/** \n * Get the combined inner HTML of all matched elements.\n * @return string of all element\u0027s inner HTML.\n * @see #text()\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.outerHtml#269",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : this) {\n            if (sb.length() !\u003d 0)\n                sb.append(\"\\n\");\n            sb.append(element.outerHtml());\n        }\n        return sb.toString();\n    }",
    "begin_line": 269,
    "end_line": 277,
    "comment": "/** \n * Get the combined outer HTML of all matched elements.\n * @return string of all element\u0027s outer HTML.\n * @see #text()\n * @see #html()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toString#286",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toString()",
    "snippet": "@Override\n    public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 286,
    "end_line": 288,
    "comment": "/** \n * Get the combined outer HTML of all matched elements. Alias of  {@link #outerHtml()}.\n * @return string of all element\u0027s outer HTML.\n * @see #text()\n * @see #html()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.tagName#297",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.tagName(java.lang.String)",
    "snippet": "public Elements tagName(String tagName) {\n        for (Element element : this) {\n            element.tagName(tagName);\n        }\n        return this;\n    }",
    "begin_line": 297,
    "end_line": 302,
    "comment": "/** \n * Update the tag name of each matched element. For example, to change each  {@code \u003ci\u003e} to a {@code \u003cem\u003e}, do {@code doc.select(\"i\").tagName(\"em\");}\n * @param tagName the new tag name\n * @return this, for chaining\n * @see Element#tagName(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.html#310",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.html(java.lang.String)",
    "snippet": "public Elements html(String html) {\n        for (Element element : this) {\n            element.html(html);\n        }\n        return this;\n    }",
    "begin_line": 310,
    "end_line": 315,
    "comment": "/** \n * Set the inner HTML of each matched element.\n * @param html HTML to parse and set into each matched element.\n * @return this, for chaining\n * @see Element#html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prepend#323",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prepend(java.lang.String)",
    "snippet": "public Elements prepend(String html) {\n        for (Element element : this) {\n            element.prepend(html);\n        }\n        return this;\n    }",
    "begin_line": 323,
    "end_line": 328,
    "comment": "/** \n * Add the supplied HTML to the start of each matched element\u0027s inner HTML.\n * @param html HTML to add inside each element, before the existing HTML\n * @return this, for chaining\n * @see Element#prepend(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.append#336",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.append(java.lang.String)",
    "snippet": "public Elements append(String html) {\n        for (Element element : this) {\n            element.append(html);\n        }\n        return this;\n    }",
    "begin_line": 336,
    "end_line": 341,
    "comment": "/** \n * Add the supplied HTML to the end of each matched element\u0027s inner HTML.\n * @param html HTML to add inside each element, after the existing HTML\n * @return this, for chaining\n * @see Element#append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.before#349",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.before(java.lang.String)",
    "snippet": "public Elements before(String html) {\n        for (Element element : this) {\n            element.before(html);\n        }\n        return this;\n    }",
    "begin_line": 349,
    "end_line": 354,
    "comment": "/** \n * Insert the supplied HTML before each matched element\u0027s outer HTML.\n * @param html HTML to insert before each element\n * @return this, for chaining\n * @see Element#before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.after#362",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.after(java.lang.String)",
    "snippet": "public Elements after(String html) {\n        for (Element element : this) {\n            element.after(html);\n        }\n        return this;\n    }",
    "begin_line": 362,
    "end_line": 367,
    "comment": "/** \n * Insert the supplied HTML after each matched element\u0027s outer HTML.\n * @param html HTML to insert after each element\n * @return this, for chaining\n * @see Element#after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.wrap#378",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.wrap(java.lang.String)",
    "snippet": "public Elements wrap(String html) {\n        Validate.notEmpty(html);\n        for (Element element : this) {\n            element.wrap(html);\n        }\n        return this;\n    }",
    "begin_line": 378,
    "end_line": 384,
    "comment": "/** \n * Wrap the supplied HTML around each matched elements. For example, with HTML {@code \u003cp\u003e\u003cb\u003eThis\u003c/b\u003e is \u003cb\u003eJsoup\u003c/b\u003e\u003c/p\u003e}, \u003ccode\u003edoc.select(\"b\").wrap(\"\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\");\u003c/code\u003e becomes  {@code \u003cp\u003e\u003ci\u003e\u003cb\u003eThis\u003c/b\u003e\u003c/i\u003e is \u003ci\u003e\u003cb\u003ejsoup\u003c/b\u003e\u003c/i\u003e\u003c/p\u003e}\n * @param html HTML to wrap around each element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this (for chaining)\n * @see Element#wrap\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.unwrap#400",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.unwrap()",
    "snippet": "public Elements unwrap() {\n        for (Element element : this) {\n            element.unwrap();\n        }\n        return this;\n    }",
    "begin_line": 400,
    "end_line": 405,
    "comment": "/** \n * Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. \u003cp\u003e This is useful for e.g removing unwanted formatting elements but keeping their contents. \u003c/p\u003e E.g. with HTML: \u003cp\u003e {@code \u003cdiv\u003e\u003cfont\u003eOne\u003c/font\u003e \u003cfont\u003e\u003ca href\u003d\"/\"\u003eTwo\u003c/a\u003e\u003c/font\u003e\u003c/div\u003e}\u003c/p\u003e \u003cp\u003e {@code doc.select(\"font\").unwrap();}\u003c/p\u003e \u003cp\u003eHTML \u003d  {@code \u003cdiv\u003eOne \u003ca href\u003d\"/\"\u003eTwo\u003c/a\u003e\u003c/div\u003e}\u003c/p\u003e\n * @return this (for chaining)\n * @see Node#unwrap\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.empty#418",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.empty()",
    "snippet": "public Elements empty() {\n        for (Element element : this) {\n            element.empty();\n        }\n        return this;\n    }",
    "begin_line": 418,
    "end_line": 423,
    "comment": "/** \n * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. \u003cp\u003e E.g. HTML:  {@code \u003cdiv\u003e\u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e\u003c/p\u003e \u003cp\u003enow\u003c/p\u003e\u003c/div\u003e}\u003cbr\u003e \u003ccode\u003edoc.select(\"p\").empty();\u003c/code\u003e\u003cbr\u003e HTML \u003d  {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e \u003cp\u003e\u003c/p\u003e\u003c/div\u003e}\n * @return this, for chaining\n * @see Element#empty()\n * @see #remove()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.remove#437",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.remove()",
    "snippet": "public Elements remove() {\n        for (Element element : this) {\n            element.remove();\n        }\n        return this;\n    }",
    "begin_line": 437,
    "end_line": 442,
    "comment": "/** \n * Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. \u003cp\u003e E.g. HTML:  {@code \u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e \u003cp\u003ethere\u003c/p\u003e \u003cimg /\u003e\u003c/div\u003e}\u003cbr\u003e \u003ccode\u003edoc.select(\"p\").remove();\u003c/code\u003e\u003cbr\u003e HTML \u003d  {@code \u003cdiv\u003e \u003cimg /\u003e\u003c/div\u003e}\u003cp\u003e Note that this method should not be used to clean user-submitted HTML; rather, use  {@link org.jsoup.safety.Cleaner} to clean HTML.\n * @return this, for chaining\n * @see Element#empty()\n * @see #empty()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.select#451",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.select(java.lang.String)",
    "snippet": "public Elements select(String query) {\n        return Selector.select(query, this);\n    }",
    "begin_line": 451,
    "end_line": 453,
    "comment": "/** \n * Find matching elements within this element list.\n * @param query A {@link Selector} query\n * @return the filtered list of elements, or an empty list if none match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.not#465",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.not(java.lang.String)",
    "snippet": "public Elements not(String query) {\n        Elements out \u003d Selector.select(query, this);\n        return Selector.filterOut(this, out);\n    }",
    "begin_line": 465,
    "end_line": 468,
    "comment": "/** \n * Remove elements from this list that match the  {@link Selector} query.\u003cp\u003e E.g. HTML:  {@code \u003cdiv class\u003dlogo\u003eOne\u003c/div\u003e \u003cdiv\u003eTwo\u003c/div\u003e}\u003cbr\u003e \u003ccode\u003eElements divs \u003d doc.select(\"div\").not(\".logo\");\u003c/code\u003e\u003cbr\u003e Result:  {@code divs: [\u003cdiv\u003eTwo\u003c/div\u003e]}\u003cp\u003e\n * @param query the selector query whose results should be removed from these elements\n * @return a new elements list that contains only the filtered results\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.eq#477",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.eq(int)",
    "snippet": "public Elements eq(int index) {\n        return size() \u003e index ? new Elements(get(index)) : new Elements();\n    }",
    "begin_line": 477,
    "end_line": 479,
    "comment": "/** \n * Get the \u003ci\u003enth\u003c/i\u003e matched element as an Elements object. \u003cp\u003e See also  {@link #get(int)} to retrieve an Element.\n * @param index the (zero-based) index of the element in the list to retain\n * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.is#486",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.is(java.lang.String)",
    "snippet": "public boolean is(String query) {\n        Evaluator eval \u003d QueryParser.parse(query);\n        for (Element e : this) {\n            if (e.is(eval))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 486,
    "end_line": 493,
    "comment": "/** \n * Test if any of the matched elements match the supplied query.\n * @param query A selector\n * @return true if at least one element in the list matches the query.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.next#499",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.next()",
    "snippet": "public Elements next() {\n        return siblings(null, true, false);\n    }",
    "begin_line": 499,
    "end_line": 501,
    "comment": "/** \n * Get the immediate next element sibling of each element in this list.\n * @return next element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.next#508",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.next(java.lang.String)",
    "snippet": "public Elements next(String query) {\n        return siblings(query, true, false);\n    }",
    "begin_line": 508,
    "end_line": 510,
    "comment": "/** \n * Get the immediate next element sibling of each element in this list, filtered by the query.\n * @param query CSS query to match siblings against\n * @return next element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.nextAll#516",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.nextAll()",
    "snippet": "public Elements nextAll() {\n        return siblings(null, true, true);\n    }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Get all of the following element siblings of each element in this list.\n * @return all following element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.nextAll#525",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.nextAll(java.lang.String)",
    "snippet": "public Elements nextAll(String query) {\n        return siblings(query, true, true);\n    }",
    "begin_line": 525,
    "end_line": 527,
    "comment": "/** \n * Get all of the following element siblings of each element in this list, filtered by the query.\n * @param query CSS query to match siblings against\n * @return all following element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prev#533",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prev()",
    "snippet": "public Elements prev() {\n        return siblings(null, false, false);\n    }",
    "begin_line": 533,
    "end_line": 535,
    "comment": "/** \n * Get the immediate previous element sibling of each element in this list.\n * @return previous element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prev#542",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prev(java.lang.String)",
    "snippet": "public Elements prev(String query) {\n        return siblings(query, false, false);\n    }",
    "begin_line": 542,
    "end_line": 544,
    "comment": "/** \n * Get the immediate previous element sibling of each element in this list, filtered by the query.\n * @param query CSS query to match siblings against\n * @return previous element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prevAll#550",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prevAll()",
    "snippet": "public Elements prevAll() {\n        return siblings(null, false, true);\n    }",
    "begin_line": 550,
    "end_line": 552,
    "comment": "/** \n * Get all of the previous element siblings of each element in this list.\n * @return all previous element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prevAll#559",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prevAll(java.lang.String)",
    "snippet": "public Elements prevAll(String query) {\n        return siblings(query, false, true);\n    }",
    "begin_line": 559,
    "end_line": 561,
    "comment": "/** \n * Get all of the previous element siblings of each element in this list, filtered by the query.\n * @param query CSS query to match siblings against\n * @return all previous element siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.siblings#563",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.siblings(java.lang.String, boolean, boolean)",
    "snippet": "private Elements siblings(String query, boolean next, boolean all) {\n        Elements els \u003d new Elements();\n        Evaluator eval \u003d query !\u003d null? QueryParser.parse(query) : null;\n        for (Element e : this) {\n            do {\n                Element sib \u003d next ? e.nextElementSibling() : e.previousElementSibling();\n                if (sib \u003d\u003d null) break;\n                if (eval \u003d\u003d null)\n                    els.add(sib);\n                else if (sib.is(eval))\n                    els.add(sib);\n                e \u003d sib;\n            } while (all);\n        }\n        return els;\n    }",
    "begin_line": 563,
    "end_line": 578,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.parents#584",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.parents()",
    "snippet": "public Elements parents() {\n        HashSet\u003cElement\u003e combo \u003d new LinkedHashSet\u003c\u003e();\n        for (Element e: this) {\n            combo.addAll(e.parents());\n        }\n        return new Elements(combo);\n    }",
    "begin_line": 584,
    "end_line": 590,
    "comment": "/** \n * Get all of the parents and ancestor elements of the matched elements.\n * @return all of the parents and ancestor elements of the matched elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.first#597",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.first()",
    "snippet": "public Element first() {\n        return isEmpty() ? null : get(0);\n    }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "/** \n * Get the first matched element.\n * @return The first matched element, or \u003ccode\u003enull\u003c/code\u003e if contents is empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.last#605",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.last()",
    "snippet": "public Element last() {\n        return isEmpty() ? null : get(size() - 1);\n    }",
    "begin_line": 605,
    "end_line": 607,
    "comment": "/** \n * Get the last matched element.\n * @return The last matched element, or \u003ccode\u003enull\u003c/code\u003e if contents is empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.traverse#614",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.traverse(org.jsoup.select.NodeVisitor)",
    "snippet": "public Elements traverse(NodeVisitor nodeVisitor) {\n        NodeTraversor.traverse(nodeVisitor, this);\n        return this;\n    }",
    "begin_line": 614,
    "end_line": 617,
    "comment": "/** \n * Perform a depth-first traversal on each of the selected elements.\n * @param nodeVisitor the visitor callbacks to perform on each node\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.filter#624",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.filter(org.jsoup.select.NodeFilter)",
    "snippet": "public Elements filter(NodeFilter nodeFilter) {\n        NodeTraversor.filter(nodeFilter, this);\n        return this;\n    }",
    "begin_line": 624,
    "end_line": 627,
    "comment": "/** \n * Perform a depth-first filtering on each of the selected elements.\n * @param nodeFilter the filter callbacks to perform on each node\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.forms#634",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.forms()",
    "snippet": "public List\u003cFormElement\u003e forms() {\n        ArrayList\u003cFormElement\u003e forms \u003d new ArrayList\u003c\u003e();\n        for (Element el: this)\n            if (el instanceof FormElement)\n                forms.add((FormElement) el);\n        return forms;\n    }",
    "begin_line": 634,
    "end_line": 640,
    "comment": "/** \n * Get the  {@link FormElement} forms from the selected elements, if any.\n * @return a list of {@link FormElement}s pulled from the matched elements. The list will be empty if the elements contain no forms.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.NodeTraversor#22",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.NodeTraversor(org.jsoup.select.NodeVisitor)",
    "snippet": "public NodeTraversor(NodeVisitor visitor) {\n        this.visitor \u003d visitor;\n    }",
    "begin_line": 22,
    "end_line": 24,
    "comment": "/** \n * Create a new traversor.\n * @param visitor a class implementing the {@link NodeVisitor} interface, to be called when visiting each node.\n * @deprecated Just use the static {@link NodeTraversor#filter(NodeFilter,Node)} method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.traverse#31",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.traverse(org.jsoup.nodes.Node)",
    "snippet": "public void traverse(Node root) {\n        traverse(visitor, root);\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "/** \n * Start a depth-first traverse of the root and all of its descendants.\n * @param root the root node point to traverse.\n * @deprecated Just use the static {@link NodeTraversor#filter(NodeFilter,Node)} method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.traverse#40",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.traverse(org.jsoup.select.NodeVisitor, org.jsoup.nodes.Node)",
    "snippet": "public static void traverse(NodeVisitor visitor, Node root) {\n        Node node \u003d root;\n        int depth \u003d 0;\n        \n        while (node !\u003d null) {\n            visitor.head(node, depth);\n            if (node.childNodeSize() \u003e 0) {\n                node \u003d node.childNode(0);\n                depth++;\n            } else {\n                while (node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0) {\n                    visitor.tail(node, depth);\n                    node \u003d node.parentNode();\n                    depth--;\n                }\n                visitor.tail(node, depth);\n                if (node \u003d\u003d root)\n                    break;\n                node \u003d node.nextSibling();\n            }\n        }\n    }",
    "begin_line": 40,
    "end_line": 61,
    "comment": "/** \n * Start a depth-first traverse of the root and all of its descendants.\n * @param visitor Node visitor.\n * @param root the root node point to traverse.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.traverse#68",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.traverse(org.jsoup.select.NodeVisitor, org.jsoup.select.Elements)",
    "snippet": "public static void traverse(NodeVisitor visitor, Elements elements) {\n        Validate.notNull(visitor);\n        Validate.notNull(elements);\n        for (Element el : elements)\n            traverse(visitor, el);\n    }",
    "begin_line": 68,
    "end_line": 73,
    "comment": "/** \n * Start a depth-first traverse of all elements.\n * @param visitor Node visitor.\n * @param elements Elements to filter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.filter#81",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
    "snippet": "public static FilterResult filter(NodeFilter filter, Node root) {\n        Node node \u003d root;\n        int depth \u003d 0;\n\n        while (node !\u003d null) {\n            FilterResult result \u003d filter.head(node, depth);\n            if (result \u003d\u003d FilterResult.STOP)\n                return result;\n            // Descend into child nodes:\n            if (result \u003d\u003d FilterResult.CONTINUE \u0026\u0026 node.childNodeSize() \u003e 0) {\n                node \u003d node.childNode(0);\n                ++depth;\n                continue;\n            }\n            // No siblings, move upwards:\n            while (node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0) {\n                // \u0027tail\u0027 current node:\n                if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\n                    result \u003d filter.tail(node, depth);\n                    if (result \u003d\u003d FilterResult.STOP)\n                        return result;\n                }\n                Node prev \u003d node; // In case we need to remove it below.\n                node \u003d node.parentNode();\n                depth--;\n                if (result \u003d\u003d FilterResult.REMOVE)\n                    prev.remove(); // Remove AFTER finding parent.\n                result \u003d FilterResult.CONTINUE; // Parent was not pruned.\n            }\n            // \u0027tail\u0027 current node, then proceed with siblings:\n            if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\n                result \u003d filter.tail(node, depth);\n                if (result \u003d\u003d FilterResult.STOP)\n                    return result;\n            }\n            if (node \u003d\u003d root)\n                return result;\n            Node prev \u003d node; // In case we need to remove it below.\n            node \u003d node.nextSibling();\n            if (result \u003d\u003d FilterResult.REMOVE)\n                prev.remove(); // Remove AFTER finding sibling.\n        }\n        // root \u003d\u003d null?\n        return FilterResult.CONTINUE;\n    }",
    "begin_line": 81,
    "end_line": 125,
    "comment": "/** \n * Start a depth-first filtering of the root and all of its descendants.\n * @param filter Node visitor.\n * @param root the root node point to traverse.\n * @return The filter result of the root node, or {@link FilterResult#STOP}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.filter#132",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
    "snippet": "public static void filter(NodeFilter filter, Elements elements) {\n        Validate.notNull(filter);\n        Validate.notNull(elements);\n        for (Element el : elements)\n            if (filter(filter, el) \u003d\u003d FilterResult.STOP)\n                break;\n    }",
    "begin_line": 132,
    "end_line": 138,
    "comment": "/** \n * Start a depth-first filtering of all elements.\n * @param filter Node filter.\n * @param elements Elements to filter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]