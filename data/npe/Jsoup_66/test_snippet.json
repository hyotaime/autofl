[
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.getElementsByTagName()",
    "snippet": "@Test public void getElementsByTagName() {\n        Document doc \u003d Jsoup.parse(reference);\n        List\u003cElement\u003e divs \u003d doc.getElementsByTag(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"div1\", divs.get(0).id());\n        assertEquals(\"div2\", divs.get(1).id());\n\n        List\u003cElement\u003e ps \u003d doc.getElementsByTag(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n        assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n        List\u003cElement\u003e ps2 \u003d doc.getElementsByTag(\"P\");\n        assertEquals(ps, ps2);\n\n        List\u003cElement\u003e imgs \u003d doc.getElementsByTag(\"img\");\n        assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n\n        List\u003cElement\u003e empty \u003d doc.getElementsByTag(\"wtf\");\n        assertEquals(0, empty.size());\n    }",
    "begin_line": 32,
    "end_line": 51,
    "comment": "",
    "child_ranges": [
      "(line 33,col 9)-(line 33,col 46)",
      "(line 34,col 9)-(line 34,col 57)",
      "(line 35,col 9)-(line 35,col 37)",
      "(line 36,col 9)-(line 36,col 47)",
      "(line 37,col 9)-(line 37,col 47)",
      "(line 39,col 9)-(line 39,col 53)",
      "(line 40,col 9)-(line 40,col 35)",
      "(line 41,col 9)-(line 41,col 82)",
      "(line 42,col 9)-(line 42,col 85)",
      "(line 43,col 9)-(line 43,col 54)",
      "(line 44,col 9)-(line 44,col 30)",
      "(line 46,col 9)-(line 46,col 57)",
      "(line 47,col 9)-(line 47,col 57)",
      "(line 49,col 9)-(line 49,col 58)",
      "(line 50,col 9)-(line 50,col 38)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.getNamespacedElementsByTag()",
    "snippet": "@Test public void getNamespacedElementsByTag() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cabc:def id\u003d1\u003eHello\u003c/abc:def\u003e\u003c/div\u003e\");\n        Elements els \u003d doc.getElementsByTag(\"abc:def\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.first().id());\n        assertEquals(\"abc:def\", els.first().tagName());\n    }",
    "begin_line": 53,
    "end_line": 59,
    "comment": "",
    "child_ranges": [
      "(line 54,col 9)-(line 54,col 79)",
      "(line 55,col 9)-(line 55,col 55)",
      "(line 56,col 9)-(line 56,col 36)",
      "(line 57,col 9)-(line 57,col 44)",
      "(line 58,col 9)-(line 58,col 55)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementById()",
    "snippet": "@Test public void testGetElementById() {\n        Document doc \u003d Jsoup.parse(reference);\n        Element div \u003d doc.getElementById(\"div1\");\n        assertEquals(\"div1\", div.id());\n        assertNull(doc.getElementById(\"none\"));\n\n        Document doc2 \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cdiv id\u003d2\u003e\u003cp\u003eHello \u003cspan id\u003d2\u003eworld!\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\");\n        Element div2 \u003d doc2.getElementById(\"2\");\n        assertEquals(\"div\", div2.tagName()); // not the span\n        Element span \u003d div2.child(0).getElementById(\"2\"); // called from \u003cp\u003e context should be span\n        assertEquals(\"span\", span.tagName());\n    }",
    "begin_line": 61,
    "end_line": 72,
    "comment": "",
    "child_ranges": [
      "(line 62,col 9)-(line 62,col 46)",
      "(line 63,col 9)-(line 63,col 49)",
      "(line 64,col 9)-(line 64,col 39)",
      "(line 65,col 9)-(line 65,col 47)",
      "(line 67,col 9)-(line 67,col 109)",
      "(line 68,col 9)-(line 68,col 48)",
      "(line 69,col 9)-(line 69,col 44)",
      "(line 70,col 9)-(line 70,col 57)",
      "(line 71,col 9)-(line 71,col 45)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetText()",
    "snippet": "@Test public void testGetText() {\n        Document doc \u003d Jsoup.parse(reference);\n        assertEquals(\"Hello Another element\", doc.text());\n        assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n    }",
    "begin_line": 74,
    "end_line": 78,
    "comment": "",
    "child_ranges": [
      "(line 75,col 9)-(line 75,col 46)",
      "(line 76,col 9)-(line 76,col 58)",
      "(line 77,col 9)-(line 77,col 81)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetChildText()",
    "snippet": "@Test public void testGetChildText() {\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now\");\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(\"Hello there now\", p.text());\n        assertEquals(\"Hello now\", p.ownText());\n    }",
    "begin_line": 80,
    "end_line": 85,
    "comment": "",
    "child_ranges": [
      "(line 81,col 9)-(line 81,col 64)",
      "(line 82,col 9)-(line 82,col 44)",
      "(line 83,col 9)-(line 83,col 50)",
      "(line 84,col 9)-(line 84,col 47)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNormalisesText()",
    "snippet": "@Test public void testNormalisesText() {\n        String h \u003d \"\u003cp\u003eHello\u003cp\u003eThere.\u003c/p\u003e \\n \u003cp\u003eHere \u003cb\u003eis\u003c/b\u003e \\n s\u003cb\u003eom\u003c/b\u003ee text.\";\n        Document doc \u003d Jsoup.parse(h);\n        String text \u003d doc.text();\n        assertEquals(\"Hello There. Here is some text.\", text);\n    }",
    "begin_line": 87,
    "end_line": 92,
    "comment": "",
    "child_ranges": [
      "(line 88,col 9)-(line 88,col 85)",
      "(line 89,col 9)-(line 89,col 38)",
      "(line 90,col 9)-(line 90,col 33)",
      "(line 91,col 9)-(line 91,col 62)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testKeepsPreText()",
    "snippet": "@Test public void testKeepsPreText() {\n        String h \u003d \"\u003cp\u003eHello \\n \\n there.\u003c/p\u003e \u003cdiv\u003e\u003cpre\u003e  What\u0027s \\n\\n  that?\u003c/pre\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"Hello there.   What\u0027s \\n\\n  that?\", doc.text());\n    }",
    "begin_line": 94,
    "end_line": 98,
    "comment": "",
    "child_ranges": [
      "(line 95,col 9)-(line 95,col 84)",
      "(line 96,col 9)-(line 96,col 38)",
      "(line 97,col 9)-(line 97,col 70)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testKeepsPreTextInCode()",
    "snippet": "@Test public void testKeepsPreTextInCode() {\n        String h \u003d \"\u003cpre\u003e\u003ccode\u003ecode\\n\\ncode\u003c/code\u003e\u003c/pre\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"\u003cpre\u003e\u003ccode\u003ecode\\n\\ncode\u003c/code\u003e\u003c/pre\u003e\", doc.body().html());\n    }",
    "begin_line": 100,
    "end_line": 105,
    "comment": "",
    "child_ranges": [
      "(line 101,col 9)-(line 101,col 58)",
      "(line 102,col 9)-(line 102,col 38)",
      "(line 103,col 9)-(line 103,col 49)",
      "(line 104,col 9)-(line 104,col 80)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testBrHasSpace()",
    "snippet": "@Test public void testBrHasSpace() {\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003eHello\u003cbr\u003ethere\u003c/p\u003e\");\n        assertEquals(\"Hello there\", doc.text());\n        assertEquals(\"Hello there\", doc.select(\"p\").first().ownText());\n\n        doc \u003d Jsoup.parse(\"\u003cp\u003eHello \u003cbr\u003e there\u003c/p\u003e\");\n        assertEquals(\"Hello there\", doc.text());\n    }",
    "begin_line": 107,
    "end_line": 114,
    "comment": "",
    "child_ranges": [
      "(line 108,col 9)-(line 108,col 60)",
      "(line 109,col 9)-(line 109,col 48)",
      "(line 110,col 9)-(line 110,col 71)",
      "(line 112,col 9)-(line 112,col 53)",
      "(line 113,col 9)-(line 113,col 48)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetSiblings()",
    "snippet": "@Test public void testGetSiblings() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003cp id\u003d1\u003ethere\u003cp\u003ethis\u003cp\u003eis\u003cp\u003ean\u003cp id\u003dlast\u003eelement\u003c/div\u003e\");\n        Element p \u003d doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
    "begin_line": 116,
    "end_line": 124,
    "comment": "",
    "child_ranges": [
      "(line 117,col 9)-(line 117,col 106)",
      "(line 118,col 9)-(line 118,col 44)",
      "(line 119,col 9)-(line 119,col 40)",
      "(line 120,col 9)-(line 120,col 65)",
      "(line 121,col 9)-(line 121,col 60)",
      "(line 122,col 9)-(line 122,col 62)",
      "(line 123,col 9)-(line 123,col 63)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetSiblingsWithDuplicateContent()",
    "snippet": "@Test public void testGetSiblingsWithDuplicateContent() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003cp id\u003d1\u003ethere\u003cp\u003ethis\u003cp\u003ethis\u003cp\u003eis\u003cp\u003ean\u003cp id\u003dlast\u003eelement\u003c/div\u003e\");\n        Element p \u003d doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().nextElementSibling().text());\n        assertEquals(\"is\", p.nextElementSibling().nextElementSibling().nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
    "begin_line": 126,
    "end_line": 136,
    "comment": "",
    "child_ranges": [
      "(line 127,col 9)-(line 127,col 113)",
      "(line 128,col 9)-(line 128,col 44)",
      "(line 129,col 9)-(line 129,col 40)",
      "(line 130,col 9)-(line 130,col 65)",
      "(line 131,col 9)-(line 131,col 60)",
      "(line 132,col 9)-(line 132,col 81)",
      "(line 133,col 9)-(line 133,col 100)",
      "(line 134,col 9)-(line 134,col 62)",
      "(line 135,col 9)-(line 135,col 63)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetParents()",
    "snippet": "@Test public void testGetParents() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello \u003cspan\u003ethere\u003c/span\u003e\u003c/div\u003e\");\n        Element span \u003d doc.select(\"span\").first();\n        Elements parents \u003d span.parents();\n\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"body\", parents.get(2).tagName());\n        assertEquals(\"html\", parents.get(3).tagName());\n    }",
    "begin_line": 138,
    "end_line": 148,
    "comment": "",
    "child_ranges": [
      "(line 139,col 9)-(line 139,col 77)",
      "(line 140,col 9)-(line 140,col 50)",
      "(line 141,col 9)-(line 141,col 42)",
      "(line 143,col 9)-(line 143,col 40)",
      "(line 144,col 9)-(line 144,col 52)",
      "(line 145,col 9)-(line 145,col 54)",
      "(line 146,col 9)-(line 146,col 55)",
      "(line 147,col 9)-(line 147,col 55)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndex()",
    "snippet": "@Test public void testElementSiblingIndex() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e...\u003cp\u003eTwo\u003c/p\u003e...\u003cp\u003eThree\u003c/p\u003e\");\n        Elements ps \u003d doc.select(\"p\");\n        assertTrue(0 \u003d\u003d ps.get(0).elementSiblingIndex());\n        assertTrue(1 \u003d\u003d ps.get(1).elementSiblingIndex());\n        assertTrue(2 \u003d\u003d ps.get(2).elementSiblingIndex());\n    }",
    "begin_line": 150,
    "end_line": 156,
    "comment": "",
    "child_ranges": [
      "(line 151,col 9)-(line 151,col 82)",
      "(line 152,col 9)-(line 152,col 38)",
      "(line 153,col 9)-(line 153,col 57)",
      "(line 154,col 9)-(line 154,col 57)",
      "(line 155,col 9)-(line 155,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndexSameContent()",
    "snippet": "@Test public void testElementSiblingIndexSameContent() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e...\u003cp\u003eOne\u003c/p\u003e...\u003cp\u003eOne\u003c/p\u003e\");\n        Elements ps \u003d doc.select(\"p\");\n        assertTrue(0 \u003d\u003d ps.get(0).elementSiblingIndex());\n        assertTrue(1 \u003d\u003d ps.get(1).elementSiblingIndex());\n        assertTrue(2 \u003d\u003d ps.get(2).elementSiblingIndex());\n    }",
    "begin_line": 158,
    "end_line": 164,
    "comment": "",
    "child_ranges": [
      "(line 159,col 9)-(line 159,col 80)",
      "(line 160,col 9)-(line 160,col 38)",
      "(line 161,col 9)-(line 161,col 57)",
      "(line 162,col 9)-(line 162,col 57)",
      "(line 163,col 9)-(line 163,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithClass()",
    "snippet": "@Test public void testGetElementsWithClass() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\u0027mellow yellow\u0027\u003e\u003cspan class\u003dmellow\u003eHello \u003cb class\u003d\u0027yellow\u0027\u003eYellow!\u003c/b\u003e\u003c/span\u003e\u003cp\u003eEmpty\u003c/p\u003e\u003c/div\u003e\");\n\n        List\u003cElement\u003e els \u003d doc.getElementsByClass(\"mellow\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"span\", els.get(1).tagName());\n\n        List\u003cElement\u003e els2 \u003d doc.getElementsByClass(\"yellow\");\n        assertEquals(2, els2.size());\n        assertEquals(\"div\", els2.get(0).tagName());\n        assertEquals(\"b\", els2.get(1).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByClass(\"solo\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 166,
    "end_line": 181,
    "comment": "",
    "child_ranges": [
      "(line 167,col 9)-(line 167,col 145)",
      "(line 169,col 9)-(line 169,col 61)",
      "(line 170,col 9)-(line 170,col 36)",
      "(line 171,col 9)-(line 171,col 50)",
      "(line 172,col 9)-(line 172,col 51)",
      "(line 174,col 9)-(line 174,col 62)",
      "(line 175,col 9)-(line 175,col 37)",
      "(line 176,col 9)-(line 176,col 51)",
      "(line 177,col 9)-(line 177,col 49)",
      "(line 179,col 9)-(line 179,col 60)",
      "(line 180,col 9)-(line 180,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttribute()",
    "snippet": "@Test public void testGetElementsWithAttribute() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv style\u003d\u0027bold\u0027\u003e\u003cp title\u003dqux\u003e\u003cp\u003e\u003cb style\u003e\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttribute(\"style\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"b\", els.get(1).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByAttribute(\"class\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 183,
    "end_line": 192,
    "comment": "",
    "child_ranges": [
      "(line 184,col 9)-(line 184,col 96)",
      "(line 185,col 9)-(line 185,col 64)",
      "(line 186,col 9)-(line 186,col 36)",
      "(line 187,col 9)-(line 187,col 50)",
      "(line 188,col 9)-(line 188,col 48)",
      "(line 190,col 9)-(line 190,col 65)",
      "(line 191,col 9)-(line 191,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeDash()",
    "snippet": "@Test public void testGetElementsWithAttributeDash() {\n        Document doc \u003d Jsoup.parse(\"\u003cmeta http-equiv\u003dcontent-type value\u003dutf8 id\u003d1\u003e \u003cmeta name\u003dfoo content\u003dbar id\u003d2\u003e \u003cdiv http-equiv\u003dcontent-type value\u003dutf8 id\u003d3\u003e\");\n        Elements meta \u003d doc.select(\"meta[http-equiv\u003dcontent-type], meta[charset]\");\n        assertEquals(1, meta.size());\n        assertEquals(\"1\", meta.first().id());\n    }",
    "begin_line": 194,
    "end_line": 199,
    "comment": "",
    "child_ranges": [
      "(line 195,col 9)-(line 195,col 164)",
      "(line 196,col 9)-(line 196,col 83)",
      "(line 197,col 9)-(line 197,col 37)",
      "(line 198,col 9)-(line 198,col 45)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeValue()",
    "snippet": "@Test public void testGetElementsWithAttributeValue() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv style\u003d\u0027bold\u0027\u003e\u003cp\u003e\u003cp\u003e\u003cb style\u003e\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttributeValue(\"style\", \"bold\");\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByAttributeValue(\"style\", \"none\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 201,
    "end_line": 209,
    "comment": "",
    "child_ranges": [
      "(line 202,col 9)-(line 202,col 86)",
      "(line 203,col 9)-(line 203,col 77)",
      "(line 204,col 9)-(line 204,col 36)",
      "(line 205,col 9)-(line 205,col 50)",
      "(line 207,col 9)-(line 207,col 78)",
      "(line 208,col 9)-(line 208,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClassDomMethods()",
    "snippet": "@Test public void testClassDomMethods() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cspan class\u003d\u0027 mellow yellow \u0027\u003eHello \u003cb\u003eYellow\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttribute(\"class\");\n        Element span \u003d els.get(0);\n        assertEquals(\"mellow yellow\", span.className());\n        assertTrue(span.hasClass(\"mellow\"));\n        assertTrue(span.hasClass(\"yellow\"));\n        Set\u003cString\u003e classes \u003d span.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"mellow\"));\n        assertTrue(classes.contains(\"yellow\"));\n\n        assertEquals(\"\", doc.className());\n        classes \u003d doc.classNames();\n        assertEquals(0, classes.size());\n        assertFalse(doc.hasClass(\"mellow\"));\n    }",
    "begin_line": 211,
    "end_line": 227,
    "comment": "",
    "child_ranges": [
      "(line 212,col 9)-(line 212,col 106)",
      "(line 213,col 9)-(line 213,col 64)",
      "(line 214,col 9)-(line 214,col 34)",
      "(line 215,col 9)-(line 215,col 56)",
      "(line 216,col 9)-(line 216,col 44)",
      "(line 217,col 9)-(line 217,col 44)",
      "(line 218,col 9)-(line 218,col 48)",
      "(line 219,col 9)-(line 219,col 40)",
      "(line 220,col 9)-(line 220,col 47)",
      "(line 221,col 9)-(line 221,col 47)",
      "(line 223,col 9)-(line 223,col 42)",
      "(line 224,col 9)-(line 224,col 35)",
      "(line 225,col 9)-(line 225,col 40)",
      "(line 226,col 9)-(line 226,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHasClassDomMethods()",
    "snippet": "@Test public void testHasClassDomMethods() {\n        Tag tag \u003d Tag.valueOf(\"a\");\n        Attributes attribs \u003d new Attributes();\n        Element el \u003d new Element(tag, \"\", attribs);\n        \n        attribs.put(\"class\", \"toto\");\n        boolean hasClass \u003d el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" toto\");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"toto \");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"\\ttoto \");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"  toto \");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"ab\");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"     \");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"tototo\");\n        hasClass \u003d el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"raulpismuth  \");\n        hasClass \u003d el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd  raulpismuth efgh \");\n        hasClass \u003d el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd efgh raulpismuth\");\n        hasClass \u003d el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd efgh raulpismuth \");\n        hasClass \u003d el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n    }",
    "begin_line": 229,
    "end_line": 281,
    "comment": "",
    "child_ranges": [
      "(line 230,col 9)-(line 230,col 35)",
      "(line 231,col 9)-(line 231,col 46)",
      "(line 232,col 9)-(line 232,col 51)",
      "(line 234,col 9)-(line 234,col 37)",
      "(line 235,col 9)-(line 235,col 47)",
      "(line 236,col 9)-(line 236,col 29)",
      "(line 238,col 9)-(line 238,col 38)",
      "(line 239,col 9)-(line 239,col 39)",
      "(line 240,col 9)-(line 240,col 29)",
      "(line 242,col 9)-(line 242,col 38)",
      "(line 243,col 9)-(line 243,col 39)",
      "(line 244,col 9)-(line 244,col 29)",
      "(line 246,col 9)-(line 246,col 40)",
      "(line 247,col 9)-(line 247,col 39)",
      "(line 248,col 9)-(line 248,col 29)",
      "(line 250,col 9)-(line 250,col 40)",
      "(line 251,col 9)-(line 251,col 39)",
      "(line 252,col 9)-(line 252,col 29)",
      "(line 254,col 9)-(line 254,col 35)",
      "(line 255,col 9)-(line 255,col 39)",
      "(line 256,col 9)-(line 256,col 30)",
      "(line 258,col 9)-(line 258,col 38)",
      "(line 259,col 9)-(line 259,col 39)",
      "(line 260,col 9)-(line 260,col 30)",
      "(line 262,col 9)-(line 262,col 39)",
      "(line 263,col 9)-(line 263,col 39)",
      "(line 264,col 9)-(line 264,col 30)",
      "(line 266,col 9)-(line 266,col 46)",
      "(line 267,col 9)-(line 267,col 46)",
      "(line 268,col 9)-(line 268,col 29)",
      "(line 270,col 9)-(line 270,col 57)",
      "(line 271,col 9)-(line 271,col 46)",
      "(line 272,col 9)-(line 272,col 29)",
      "(line 274,col 9)-(line 274,col 55)",
      "(line 275,col 9)-(line 275,col 46)",
      "(line 276,col 9)-(line 276,col 29)",
      "(line 278,col 9)-(line 278,col 56)",
      "(line 279,col 9)-(line 279,col 46)",
      "(line 280,col 9)-(line 280,col 29)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClassUpdates()",
    "snippet": "@Test public void testClassUpdates() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\u0027mellow yellow\u0027\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n\n        div.addClass(\"green\");\n        assertEquals(\"mellow yellow green\", div.className());\n        div.removeClass(\"red\"); // noop\n        div.removeClass(\"yellow\");\n        assertEquals(\"mellow green\", div.className());\n        div.toggleClass(\"green\").toggleClass(\"red\");\n        assertEquals(\"mellow red\", div.className());\n    }",
    "begin_line": 284,
    "end_line": 295,
    "comment": "",
    "child_ranges": [
      "(line 285,col 9)-(line 285,col 72)",
      "(line 286,col 9)-(line 286,col 48)",
      "(line 288,col 9)-(line 288,col 30)",
      "(line 289,col 9)-(line 289,col 61)",
      "(line 290,col 9)-(line 290,col 31)",
      "(line 291,col 9)-(line 291,col 34)",
      "(line 292,col 9)-(line 292,col 54)",
      "(line 293,col 9)-(line 293,col 52)",
      "(line 294,col 9)-(line 294,col 52)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testOuterHtml()",
    "snippet": "@Test public void testOuterHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv title\u003d\u0027Tags \u0026amp;c.\u0027\u003e\u003cimg src\u003dfoo.png\u003e\u003cp\u003e\u003c!-- comment --\u003eHello\u003cp\u003ethere\");\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv title\u003d\\\"Tags \u0026amp;c.\\\"\u003e\u003cimg src\u003d\\\"foo.png\\\"\u003e\u003cp\u003e\u003c!-- comment --\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n                TextUtil.stripNewlines(doc.outerHtml()));\n    }",
    "begin_line": 297,
    "end_line": 301,
    "comment": "",
    "child_ranges": [
      "(line 298,col 9)-(line 298,col 114)",
      "(line 299,col 9)-(line 300,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testInnerHtml()",
    "snippet": "@Test public void testInnerHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\\n \u003cp\u003eHello\u003c/p\u003e \u003c/div\u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e\", doc.getElementsByTag(\"div\").get(0).html());\n    }",
    "begin_line": 303,
    "end_line": 306,
    "comment": "",
    "child_ranges": [
      "(line 304,col 9)-(line 304,col 66)",
      "(line 305,col 9)-(line 305,col 80)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testFormatHtml()",
    "snippet": "@Test public void testFormatHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003ctitle\u003eFormat test\u003c/title\u003e\u003cdiv\u003e\u003cp\u003eHello \u003cspan\u003ejsoup \u003cspan\u003eusers\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eGood.\u003c/p\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003chtml\u003e\\n \u003chead\u003e\\n  \u003ctitle\u003eFormat test\u003c/title\u003e\\n \u003c/head\u003e\\n \u003cbody\u003e\\n  \u003cdiv\u003e\\n   \u003cp\u003eHello \u003cspan\u003ejsoup \u003cspan\u003eusers\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\\n   \u003cp\u003eGood.\u003c/p\u003e\\n  \u003c/div\u003e\\n \u003c/body\u003e\\n\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 308,
    "end_line": 311,
    "comment": "",
    "child_ranges": [
      "(line 309,col 9)-(line 309,col 138)",
      "(line 310,col 9)-(line 310,col 211)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testFormatOutline()",
    "snippet": "@Test public void testFormatOutline() {\n        Document doc \u003d Jsoup.parse(\"\u003ctitle\u003eFormat test\u003c/title\u003e\u003cdiv\u003e\u003cp\u003eHello \u003cspan\u003ejsoup \u003cspan\u003eusers\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eGood.\u003c/p\u003e\u003c/div\u003e\");\n        doc.outputSettings().outline(true);\n        assertEquals(\"\u003chtml\u003e\\n \u003chead\u003e\\n  \u003ctitle\u003eFormat test\u003c/title\u003e\\n \u003c/head\u003e\\n \u003cbody\u003e\\n  \u003cdiv\u003e\\n   \u003cp\u003e\\n    Hello \\n    \u003cspan\u003e\\n     jsoup \\n     \u003cspan\u003eusers\u003c/span\u003e\\n    \u003c/span\u003e\\n   \u003c/p\u003e\\n   \u003cp\u003eGood.\u003c/p\u003e\\n  \u003c/div\u003e\\n \u003c/body\u003e\\n\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 313,
    "end_line": 317,
    "comment": "",
    "child_ranges": [
      "(line 314,col 9)-(line 314,col 138)",
      "(line 315,col 9)-(line 315,col 43)",
      "(line 316,col 9)-(line 316,col 248)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetIndent()",
    "snippet": "@Test public void testSetIndent() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\\nthere\u003c/p\u003e\u003c/div\u003e\");\n        doc.outputSettings().indentAmount(0);\n        assertEquals(\"\u003chtml\u003e\\n\u003chead\u003e\u003c/head\u003e\\n\u003cbody\u003e\\n\u003cdiv\u003e\\n\u003cp\u003eHello there\u003c/p\u003e\\n\u003c/div\u003e\\n\u003c/body\u003e\\n\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 319,
    "end_line": 323,
    "comment": "",
    "child_ranges": [
      "(line 320,col 9)-(line 320,col 69)",
      "(line 321,col 9)-(line 321,col 45)",
      "(line 322,col 9)-(line 322,col 119)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNotPretty()",
    "snippet": "@Test public void testNotPretty() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e   \\n\u003cp\u003eHello\\n there\\n\u003c/p\u003e\u003c/div\u003e\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv\u003e   \\n\u003cp\u003eHello\\n there\\n\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\", doc.html());\n\n        Element div \u003d doc.select(\"div\").first();\n        assertEquals(\"   \\n\u003cp\u003eHello\\n there\\n\u003c/p\u003e\", div.html());\n    }",
    "begin_line": 325,
    "end_line": 332,
    "comment": "",
    "child_ranges": [
      "(line 326,col 9)-(line 326,col 77)",
      "(line 327,col 9)-(line 327,col 48)",
      "(line 328,col 9)-(line 328,col 114)",
      "(line 330,col 9)-(line 330,col 48)",
      "(line 331,col 9)-(line 331,col 64)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testEmptyElementFormatHtml()",
    "snippet": "@Test public void testEmptyElementFormatHtml() {\n        // don\u0027t put newlines into empty blocks\n        Document doc \u003d Jsoup.parse(\"\u003csection\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/section\u003e\");\n        assertEquals(\"\u003csection\u003e\\n \u003cdiv\u003e\u003c/div\u003e\\n\u003c/section\u003e\", doc.select(\"section\").first().outerHtml());\n    }",
    "begin_line": 334,
    "end_line": 338,
    "comment": "",
    "child_ranges": [
      "(line 336,col 9)-(line 336,col 69)",
      "(line 337,col 9)-(line 337,col 103)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNoIndentOnScriptAndStyle()",
    "snippet": "@Test public void testNoIndentOnScriptAndStyle() {\n        // don\u0027t newline+indent closing \u003c/script\u003e and \u003c/style\u003e tags\n        Document doc \u003d Jsoup.parse(\"\u003cscript\u003eone\\ntwo\u003c/script\u003e\\n\u003cstyle\u003ethree\\nfour\u003c/style\u003e\");\n        assertEquals(\"\u003cscript\u003eone\\ntwo\u003c/script\u003e \\n\u003cstyle\u003ethree\\nfour\u003c/style\u003e\", doc.head().html());\n    }",
    "begin_line": 340,
    "end_line": 344,
    "comment": "",
    "child_ranges": [
      "(line 342,col 9)-(line 342,col 92)",
      "(line 343,col 9)-(line 343,col 98)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testContainerOutput()",
    "snippet": "@Test public void testContainerOutput() {\n        Document doc \u003d Jsoup.parse(\"\u003ctitle\u003eHello there\u003c/title\u003e \u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003c/div\u003e \u003cdiv\u003eAnother\u003c/div\u003e\");\n        assertEquals(\"\u003ctitle\u003eHello there\u003c/title\u003e\", doc.select(\"title\").first().outerHtml());\n        assertEquals(\"\u003cdiv\u003e\\n \u003cp\u003eHello\u003c/p\u003e\\n \u003cp\u003ethere\u003c/p\u003e\\n\u003c/div\u003e\", doc.select(\"div\").first().outerHtml());\n        assertEquals(\"\u003cdiv\u003e\\n \u003cp\u003eHello\u003c/p\u003e\\n \u003cp\u003ethere\u003c/p\u003e\\n\u003c/div\u003e \\n\u003cdiv\u003e\\n Another\\n\u003c/div\u003e\", doc.select(\"body\").first().html());\n    }",
    "begin_line": 346,
    "end_line": 351,
    "comment": "",
    "child_ranges": [
      "(line 347,col 9)-(line 347,col 120)",
      "(line 348,col 9)-(line 348,col 92)",
      "(line 349,col 9)-(line 349,col 107)",
      "(line 350,col 9)-(line 350,col 129)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetText()",
    "snippet": "@Test public void testSetText() {\n        String h \u003d \"\u003cdiv id\u003d1\u003eHello \u003cp\u003ethere \u003cb\u003enow\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n        assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n\n        Element div \u003d doc.getElementById(\"1\").text(\"Gone\");\n        assertEquals(\"Gone\", div.text());\n        assertEquals(0, doc.select(\"p\").size());\n    }",
    "begin_line": 353,
    "end_line": 362,
    "comment": "",
    "child_ranges": [
      "(line 354,col 9)-(line 354,col 67)",
      "(line 355,col 9)-(line 355,col 38)",
      "(line 356,col 9)-(line 356,col 52)",
      "(line 357,col 9)-(line 357,col 65)",
      "(line 359,col 9)-(line 359,col 59)",
      "(line 360,col 9)-(line 360,col 41)",
      "(line 361,col 9)-(line 361,col 48)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewElement()",
    "snippet": "@Test public void testAddNewElement() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.appendElement(\"p\").text(\"there\");\n        div.appendElement(\"P\").attr(\"CLASS\", \"second\").text(\"now\");\n        // manually specifying tag and attributes should now preserve case, regardless of parse mode\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv id\u003d\\\"1\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003cP CLASS\u003d\\\"second\\\"\u003enow\u003c/P\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n                TextUtil.stripNewlines(doc.html()));\n\n        // check sibling index (with short circuit on reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 364,
    "end_line": 378,
    "comment": "",
    "child_ranges": [
      "(line 365,col 9)-(line 365,col 67)",
      "(line 366,col 9)-(line 366,col 46)",
      "(line 367,col 9)-(line 367,col 45)",
      "(line 368,col 9)-(line 368,col 67)",
      "(line 370,col 9)-(line 371,col 52)",
      "(line 374,col 9)-(line 374,col 38)",
      "(line 375,col 9)-(line 377,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddBooleanAttribute()",
    "snippet": "@Test public void testAddBooleanAttribute() {\n        Element div \u003d new Element(Tag.valueOf(\"div\"), \"\");\n        \n        div.attr(\"true\", true);\n        \n        div.attr(\"false\", \"value\");\n        div.attr(\"false\", false);\n        \n        assertTrue(div.hasAttr(\"true\"));\n        assertEquals(\"\", div.attr(\"true\"));\n        \n        List\u003cAttribute\u003e attributes \u003d div.attributes().asList();\n        assertEquals(\"There should be one attribute\", 1, attributes.size());\n\t\tassertTrue(\"Attribute should be boolean\", attributes.get(0) instanceof BooleanAttribute);\n        \n        assertFalse(div.hasAttr(\"false\"));\n \n        assertEquals(\"\u003cdiv true\u003e\u003c/div\u003e\", div.outerHtml());\n    }",
    "begin_line": 380,
    "end_line": 398,
    "comment": "",
    "child_ranges": [
      "(line 381,col 9)-(line 381,col 58)",
      "(line 383,col 9)-(line 383,col 31)",
      "(line 385,col 9)-(line 385,col 35)",
      "(line 386,col 9)-(line 386,col 33)",
      "(line 388,col 9)-(line 388,col 40)",
      "(line 389,col 9)-(line 389,col 43)",
      "(line 391,col 9)-(line 391,col 63)",
      "(line 392,col 9)-(line 392,col 76)",
      "(line 393,col 3)-(line 393,col 91)",
      "(line 395,col 9)-(line 395,col 42)",
      "(line 397,col 9)-(line 397,col 58)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAppendRowToTable()",
    "snippet": "@Test public void testAppendRowToTable() {\n        Document doc \u003d Jsoup.parse(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\");\n        Element table \u003d doc.select(\"tbody\").first();\n        table.append(\"\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\");\n\n        assertEquals(\"\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 400,
    "end_line": 406,
    "comment": "",
    "child_ranges": [
      "(line 401,col 9)-(line 401,col 73)",
      "(line 402,col 9)-(line 402,col 52)",
      "(line 403,col 9)-(line 403,col 44)",
      "(line 405,col 9)-(line 405,col 136)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependRowToTable()",
    "snippet": "@Test public void testPrependRowToTable() {\n        Document doc \u003d Jsoup.parse(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\");\n        Element table \u003d doc.select(\"tbody\").first();\n        table.prepend(\"\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\");\n\n        assertEquals(\"\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\", TextUtil.stripNewlines(doc.body().html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps \u003d doc.select(\"tr\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 408,
    "end_line": 420,
    "comment": "",
    "child_ranges": [
      "(line 409,col 9)-(line 409,col 73)",
      "(line 410,col 9)-(line 410,col 52)",
      "(line 411,col 9)-(line 411,col 45)",
      "(line 413,col 9)-(line 413,col 136)",
      "(line 416,col 9)-(line 416,col 39)",
      "(line 417,col 9)-(line 419,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependElement()",
    "snippet": "@Test public void testPrependElement() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prependElement(\"p\").text(\"Before\");\n        assertEquals(\"Before\", div.child(0).text());\n        assertEquals(\"Hello\", div.child(1).text());\n    }",
    "begin_line": 422,
    "end_line": 428,
    "comment": "",
    "child_ranges": [
      "(line 423,col 9)-(line 423,col 67)",
      "(line 424,col 9)-(line 424,col 46)",
      "(line 425,col 9)-(line 425,col 47)",
      "(line 426,col 9)-(line 426,col 52)",
      "(line 427,col 9)-(line 427,col 51)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewText()",
    "snippet": "@Test public void testAddNewText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.appendText(\" there \u0026 now \u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e there \u0026amp; now \u0026gt;\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 430,
    "end_line": 435,
    "comment": "",
    "child_ranges": [
      "(line 431,col 9)-(line 431,col 67)",
      "(line 432,col 9)-(line 432,col 46)",
      "(line 433,col 9)-(line 433,col 41)",
      "(line 434,col 9)-(line 434,col 94)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependText()",
    "snippet": "@Test public void testPrependText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prependText(\"there \u0026 now \u003e \");\n        assertEquals(\"there \u0026 now \u003e Hello\", div.text());\n        assertEquals(\"there \u0026amp; now \u0026gt; \u003cp\u003eHello\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 437,
    "end_line": 443,
    "comment": "",
    "child_ranges": [
      "(line 438,col 9)-(line 438,col 67)",
      "(line 439,col 9)-(line 439,col 46)",
      "(line 440,col 9)-(line 440,col 42)",
      "(line 441,col 9)-(line 441,col 56)",
      "(line 442,col 9)-(line 442,col 94)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testThrowsOnAddNullText()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class) public void testThrowsOnAddNullText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.appendText(null);\n    }",
    "begin_line": 445,
    "end_line": 449,
    "comment": "",
    "child_ranges": [
      "(line 446,col 9)-(line 446,col 67)",
      "(line 447,col 9)-(line 447,col 46)",
      "(line 448,col 9)-(line 448,col 29)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testThrowsOnPrependNullText()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)  public void testThrowsOnPrependNullText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prependText(null);\n    }",
    "begin_line": 451,
    "end_line": 455,
    "comment": "",
    "child_ranges": [
      "(line 452,col 9)-(line 452,col 67)",
      "(line 453,col 9)-(line 453,col 46)",
      "(line 454,col 9)-(line 454,col 30)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewHtml()",
    "snippet": "@Test public void testAddNewHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.append(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (no reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 457,
    "end_line": 468,
    "comment": "",
    "child_ranges": [
      "(line 458,col 9)-(line 458,col 67)",
      "(line 459,col 9)-(line 459,col 46)",
      "(line 460,col 9)-(line 460,col 45)",
      "(line 461,col 9)-(line 461,col 95)",
      "(line 464,col 9)-(line 464,col 38)",
      "(line 465,col 9)-(line 467,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependNewHtml()",
    "snippet": "@Test public void testPrependNewHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prepend(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\u003cp\u003eHello\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 470,
    "end_line": 481,
    "comment": "",
    "child_ranges": [
      "(line 471,col 9)-(line 471,col 67)",
      "(line 472,col 9)-(line 472,col 46)",
      "(line 473,col 9)-(line 473,col 46)",
      "(line 474,col 9)-(line 474,col 95)",
      "(line 477,col 9)-(line 477,col 38)",
      "(line 478,col 9)-(line 480,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetHtml()",
    "snippet": "@Test public void testSetHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.html(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 483,
    "end_line": 488,
    "comment": "",
    "child_ranges": [
      "(line 484,col 9)-(line 484,col 67)",
      "(line 485,col 9)-(line 485,col 46)",
      "(line 486,col 9)-(line 486,col 43)",
      "(line 487,col 9)-(line 487,col 83)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetHtmlTitle()",
    "snippet": "@Test public void testSetHtmlTitle() {\n        Document doc \u003d Jsoup.parse(\"\u003chtml\u003e\u003chead id\u003d2\u003e\u003ctitle id\u003d1\u003e\u003c/title\u003e\u003c/head\u003e\u003c/html\u003e\");\n\n        Element title \u003d doc.getElementById(\"1\");\n        title.html(\"good\");\n        assertEquals(\"good\", title.html());\n        title.html(\"\u003ci\u003ebad\u003c/i\u003e\");\n        assertEquals(\"\u0026lt;i\u0026gt;bad\u0026lt;/i\u0026gt;\", title.html());\n\n        Element head \u003d doc.getElementById(\"2\");\n        head.html(\"\u003ctitle\u003e\u003ci\u003ebad\u003c/i\u003e\u003c/title\u003e\");\n        assertEquals(\"\u003ctitle\u003e\u0026lt;i\u0026gt;bad\u0026lt;/i\u0026gt;\u003c/title\u003e\", head.html());\n    }",
    "begin_line": 490,
    "end_line": 502,
    "comment": "",
    "child_ranges": [
      "(line 491,col 9)-(line 491,col 90)",
      "(line 493,col 9)-(line 493,col 48)",
      "(line 494,col 9)-(line 494,col 27)",
      "(line 495,col 9)-(line 495,col 43)",
      "(line 496,col 9)-(line 496,col 33)",
      "(line 497,col 9)-(line 497,col 61)",
      "(line 499,col 9)-(line 499,col 47)",
      "(line 500,col 9)-(line 500,col 47)",
      "(line 501,col 9)-(line 501,col 75)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testWrap()",
    "snippet": "@Test public void testWrap() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p \u003d doc.select(\"p\").first();\n        p.wrap(\"\u003cdiv class\u003d\u0027head\u0027\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n\n        Element ret \u003d p.wrap(\"\u003cdiv\u003e\u003cdiv class\u003dfoo\u003e\u003c/div\u003e\u003cp\u003eWhat?\u003c/p\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\\\"foo\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\u003cp\u003eWhat?\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\",\n                TextUtil.stripNewlines(doc.body().html()));\n\n        assertEquals(ret, p);\n    }",
    "begin_line": 504,
    "end_line": 515,
    "comment": "",
    "child_ranges": [
      "(line 505,col 9)-(line 505,col 74)",
      "(line 506,col 9)-(line 506,col 44)",
      "(line 507,col 9)-(line 507,col 43)",
      "(line 508,col 9)-(line 508,col 129)",
      "(line 510,col 9)-(line 510,col 77)",
      "(line 511,col 9)-(line 512,col 59)",
      "(line 514,col 9)-(line 514,col 29)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.before()",
    "snippet": "@Test public void before() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p1 \u003d doc.select(\"p\").first();\n        p1.before(\"\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().before(\"\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 517,
    "end_line": 525,
    "comment": "",
    "child_ranges": [
      "(line 518,col 9)-(line 518,col 74)",
      "(line 519,col 9)-(line 519,col 45)",
      "(line 520,col 9)-(line 520,col 50)",
      "(line 521,col 9)-(line 521,col 131)",
      "(line 523,col 9)-(line 523,col 67)",
      "(line 524,col 9)-(line 524,col 156)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.after()",
    "snippet": "@Test public void after() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p1 \u003d doc.select(\"p\").first();\n        p1.after(\"\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().after(\"\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 527,
    "end_line": 535,
    "comment": "",
    "child_ranges": [
      "(line 528,col 9)-(line 528,col 74)",
      "(line 529,col 9)-(line 529,col 45)",
      "(line 530,col 9)-(line 530,col 49)",
      "(line 531,col 9)-(line 531,col 131)",
      "(line 533,col 9)-(line 533,col 66)",
      "(line 534,col 9)-(line 534,col 156)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testWrapWithRemainder()",
    "snippet": "@Test public void testWrapWithRemainder() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element p \u003d doc.select(\"p\").first();\n        p.wrap(\"\u003cdiv class\u003d\u0027head\u0027\u003e\u003c/div\u003e\u003cp\u003eThere!\u003c/p\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 537,
    "end_line": 542,
    "comment": "",
    "child_ranges": [
      "(line 538,col 9)-(line 538,col 62)",
      "(line 539,col 9)-(line 539,col 44)",
      "(line 540,col 9)-(line 540,col 56)",
      "(line 541,col 9)-(line 541,col 130)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHasText()",
    "snippet": "@Test public void testHasText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n        Elements ps \u003d doc.select(\"p\");\n\n        assertTrue(div.hasText());\n        assertTrue(ps.first().hasText());\n        assertFalse(ps.last().hasText());\n    }",
    "begin_line": 544,
    "end_line": 552,
    "comment": "",
    "child_ranges": [
      "(line 545,col 9)-(line 545,col 69)",
      "(line 546,col 9)-(line 546,col 48)",
      "(line 547,col 9)-(line 547,col 38)",
      "(line 549,col 9)-(line 549,col 34)",
      "(line 550,col 9)-(line 550,col 41)",
      "(line 551,col 9)-(line 551,col 41)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.dataset()",
    "snippet": "@Test public void dataset() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1 data-name\u003djsoup class\u003dnew data-package\u003djar\u003eHello\u003c/div\u003e\u003cp id\u003d2\u003eHello\u003c/p\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n        Map\u003cString, String\u003e dataset \u003d div.dataset();\n        Attributes attributes \u003d div.attributes();\n\n        // size, get, set, add, remove\n        assertEquals(2, dataset.size());\n        assertEquals(\"jsoup\", dataset.get(\"name\"));\n        assertEquals(\"jar\", dataset.get(\"package\"));\n\n        dataset.put(\"name\", \"jsoup updated\");\n        dataset.put(\"language\", \"java\");\n        dataset.remove(\"package\");\n\n        assertEquals(2, dataset.size());\n        assertEquals(4, attributes.size());\n        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n        assertEquals(\"java\", attributes.get(\"data-language\"));\n        assertEquals(\"java\", dataset.get(\"language\"));\n\n        attributes.put(\"data-food\", \"bacon\");\n        assertEquals(3, dataset.size());\n        assertEquals(\"bacon\", dataset.get(\"food\"));\n\n        attributes.put(\"data-\", \"empty\");\n        assertEquals(null, dataset.get(\"\")); // data- is not a data attribute\n\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(0, p.dataset().size());\n\n    }",
    "begin_line": 554,
    "end_line": 586,
    "comment": "",
    "child_ranges": [
      "(line 555,col 9)-(line 555,col 120)",
      "(line 556,col 9)-(line 556,col 48)",
      "(line 557,col 9)-(line 557,col 52)",
      "(line 558,col 9)-(line 558,col 49)",
      "(line 561,col 9)-(line 561,col 40)",
      "(line 562,col 9)-(line 562,col 51)",
      "(line 563,col 9)-(line 563,col 52)",
      "(line 565,col 9)-(line 565,col 45)",
      "(line 566,col 9)-(line 566,col 40)",
      "(line 567,col 9)-(line 567,col 34)",
      "(line 569,col 9)-(line 569,col 40)",
      "(line 570,col 9)-(line 570,col 43)",
      "(line 571,col 9)-(line 571,col 67)",
      "(line 572,col 9)-(line 572,col 59)",
      "(line 573,col 9)-(line 573,col 62)",
      "(line 574,col 9)-(line 574,col 54)",
      "(line 576,col 9)-(line 576,col 45)",
      "(line 577,col 9)-(line 577,col 40)",
      "(line 578,col 9)-(line 578,col 51)",
      "(line 580,col 9)-(line 580,col 41)",
      "(line 581,col 9)-(line 581,col 44)",
      "(line 583,col 9)-(line 583,col 44)",
      "(line 584,col 9)-(line 584,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.parentlessToString()",
    "snippet": "@Test public void parentlessToString() {\n        Document doc \u003d Jsoup.parse(\"\u003cimg src\u003d\u0027foo\u0027\u003e\");\n        Element img \u003d doc.select(\"img\").first();\n        assertEquals(\"\u003cimg src\u003d\\\"foo\\\"\u003e\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"\u003cimg src\u003d\\\"foo\\\"\u003e\", img.toString());\n    }",
    "begin_line": 588,
    "end_line": 595,
    "comment": "",
    "child_ranges": [
      "(line 589,col 9)-(line 589,col 54)",
      "(line 590,col 9)-(line 590,col 48)",
      "(line 591,col 9)-(line 591,col 58)",
      "(line 593,col 9)-(line 593,col 21)",
      "(line 594,col 9)-(line 594,col 58)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClone()",
    "snippet": "@Test public void testClone() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003cp\u003e\u003cspan\u003eTwo\u003c/div\u003e\");\n\n        Element p \u003d doc.select(\"p\").get(1);\n        Element clone \u003d p.clone();\n\n        assertNull(clone.parent()); // should be orphaned\n        assertEquals(0, clone.siblingIndex);\n        assertEquals(1, p.siblingIndex);\n        assertNotNull(p.parent());\n\n        clone.append(\"\u003cspan\u003eThree\");\n        assertEquals(\"\u003cp\u003e\u003cspan\u003eTwo\u003c/span\u003e\u003cspan\u003eThree\u003c/span\u003e\u003c/p\u003e\", TextUtil.stripNewlines(clone.outerHtml()));\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e\u003cp\u003e\u003cspan\u003eTwo\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html())); // not modified\n\n        doc.body().appendChild(clone); // adopt\n        assertNotNull(clone.parent());\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e\u003cp\u003e\u003cspan\u003eTwo\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eTwo\u003c/span\u003e\u003cspan\u003eThree\u003c/span\u003e\u003c/p\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 597,
    "end_line": 615,
    "comment": "",
    "child_ranges": [
      "(line 598,col 9)-(line 598,col 68)",
      "(line 600,col 9)-(line 600,col 43)",
      "(line 601,col 9)-(line 601,col 34)",
      "(line 603,col 9)-(line 603,col 35)",
      "(line 604,col 9)-(line 604,col 44)",
      "(line 605,col 9)-(line 605,col 40)",
      "(line 606,col 9)-(line 606,col 34)",
      "(line 608,col 9)-(line 608,col 36)",
      "(line 609,col 9)-(line 609,col 109)",
      "(line 610,col 9)-(line 610,col 112)",
      "(line 612,col 9)-(line 612,col 38)",
      "(line 613,col 9)-(line 613,col 38)",
      "(line 614,col 9)-(line 614,col 153)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClonesClassnames()",
    "snippet": "@Test public void testClonesClassnames() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\u0027one two\u0027\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n        Set\u003cString\u003e classes \u003d div.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"one\"));\n        assertTrue(classes.contains(\"two\"));\n\n        Element copy \u003d div.clone();\n        Set\u003cString\u003e copyClasses \u003d copy.classNames();\n        assertEquals(2, copyClasses.size());\n        assertTrue(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"two\"));\n        copyClasses.add(\"three\");\n        copyClasses.remove(\"one\");\n\n        assertTrue(classes.contains(\"one\"));\n        assertFalse(classes.contains(\"three\"));\n        assertFalse(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"three\"));\n\n        assertEquals(\"\", div.html());\n        assertEquals(\"\", copy.html());\n    }",
    "begin_line": 617,
    "end_line": 640,
    "comment": "",
    "child_ranges": [
      "(line 618,col 9)-(line 618,col 66)",
      "(line 619,col 9)-(line 619,col 48)",
      "(line 620,col 9)-(line 620,col 47)",
      "(line 621,col 9)-(line 621,col 40)",
      "(line 622,col 9)-(line 622,col 44)",
      "(line 623,col 9)-(line 623,col 44)",
      "(line 625,col 9)-(line 625,col 35)",
      "(line 626,col 9)-(line 626,col 52)",
      "(line 627,col 9)-(line 627,col 44)",
      "(line 628,col 9)-(line 628,col 48)",
      "(line 629,col 9)-(line 629,col 48)",
      "(line 630,col 9)-(line 630,col 33)",
      "(line 631,col 9)-(line 631,col 34)",
      "(line 633,col 9)-(line 633,col 44)",
      "(line 634,col 9)-(line 634,col 47)",
      "(line 635,col 9)-(line 635,col 49)",
      "(line 636,col 9)-(line 636,col 50)",
      "(line 638,col 9)-(line 638,col 37)",
      "(line 639,col 9)-(line 639,col 38)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testTagNameSet()",
    "snippet": "@Test public void testTagNameSet() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003ci\u003eHello\u003c/i\u003e\");\n        doc.select(\"i\").first().tagName(\"em\");\n        assertEquals(0, doc.select(\"i\").size());\n        assertEquals(1, doc.select(\"em\").size());\n        assertEquals(\"\u003cem\u003eHello\u003c/em\u003e\", doc.select(\"div\").first().html());\n    }",
    "begin_line": 642,
    "end_line": 648,
    "comment": "",
    "child_ranges": [
      "(line 643,col 9)-(line 643,col 56)",
      "(line 644,col 9)-(line 644,col 46)",
      "(line 645,col 9)-(line 645,col 48)",
      "(line 646,col 9)-(line 646,col 49)",
      "(line 647,col 9)-(line 647,col 73)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHtmlContainsOuter()",
    "snippet": "@Test public void testHtmlContainsOuter() {\n        Document doc \u003d Jsoup.parse(\"\u003ctitle\u003eCheck\u003c/title\u003e \u003cdiv\u003eHello there\u003c/div\u003e\");\n        doc.outputSettings().indentAmount(0);\n        assertTrue(doc.html().contains(doc.select(\"title\").outerHtml()));\n        assertTrue(doc.html().contains(doc.select(\"div\").outerHtml()));\n    }",
    "begin_line": 650,
    "end_line": 655,
    "comment": "",
    "child_ranges": [
      "(line 651,col 9)-(line 651,col 82)",
      "(line 652,col 9)-(line 652,col 45)",
      "(line 653,col 9)-(line 653,col 73)",
      "(line 654,col 9)-(line 654,col 71)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetTextNodes()",
    "snippet": "@Test public void testGetTextNodes() {\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003eOne \u003cspan\u003eTwo\u003c/span\u003e Three \u003cbr\u003e Four\u003c/p\u003e\");\n        List\u003cTextNode\u003e textNodes \u003d doc.select(\"p\").first().textNodes();\n\n        assertEquals(3, textNodes.size());\n        assertEquals(\"One \", textNodes.get(0).text());\n        assertEquals(\" Three \", textNodes.get(1).text());\n        assertEquals(\" Four\", textNodes.get(2).text());\n\n        assertEquals(0, doc.select(\"br\").first().textNodes().size());\n    }",
    "begin_line": 657,
    "end_line": 667,
    "comment": "",
    "child_ranges": [
      "(line 658,col 9)-(line 658,col 82)",
      "(line 659,col 9)-(line 659,col 71)",
      "(line 661,col 9)-(line 661,col 42)",
      "(line 662,col 9)-(line 662,col 54)",
      "(line 663,col 9)-(line 663,col 57)",
      "(line 664,col 9)-(line 664,col 55)",
      "(line 666,col 9)-(line 666,col 69)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testManipulateTextNodes()",
    "snippet": "@Test public void testManipulateTextNodes() {\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003eOne \u003cspan\u003eTwo\u003c/span\u003e Three \u003cbr\u003e Four\u003c/p\u003e\");\n        Element p \u003d doc.select(\"p\").first();\n        List\u003cTextNode\u003e textNodes \u003d p.textNodes();\n\n        textNodes.get(1).text(\" three-more \");\n        textNodes.get(2).splitText(3).text(\"-ur\");\n\n        assertEquals(\"One Two three-more Fo-ur\", p.text());\n        assertEquals(\"One three-more Fo-ur\", p.ownText());\n        assertEquals(4, p.textNodes().size()); // grew because of split\n    }",
    "begin_line": 669,
    "end_line": 680,
    "comment": "",
    "child_ranges": [
      "(line 670,col 9)-(line 670,col 82)",
      "(line 671,col 9)-(line 671,col 44)",
      "(line 672,col 9)-(line 672,col 49)",
      "(line 674,col 9)-(line 674,col 46)",
      "(line 675,col 9)-(line 675,col 50)",
      "(line 677,col 9)-(line 677,col 59)",
      "(line 678,col 9)-(line 678,col 58)",
      "(line 679,col 9)-(line 679,col 46)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetDataNodes()",
    "snippet": "@Test public void testGetDataNodes() {\n        Document doc \u003d Jsoup.parse(\"\u003cscript\u003eOne Two\u003c/script\u003e \u003cstyle\u003eThree Four\u003c/style\u003e \u003cp\u003eFix Six\u003c/p\u003e\");\n        Element script \u003d doc.select(\"script\").first();\n        Element style \u003d doc.select(\"style\").first();\n        Element p \u003d doc.select(\"p\").first();\n\n        List\u003cDataNode\u003e scriptData \u003d script.dataNodes();\n        assertEquals(1, scriptData.size());\n        assertEquals(\"One Two\", scriptData.get(0).getWholeData());\n\n        List\u003cDataNode\u003e styleData \u003d style.dataNodes();\n        assertEquals(1, styleData.size());\n        assertEquals(\"Three Four\", styleData.get(0).getWholeData());\n\n        List\u003cDataNode\u003e pData \u003d p.dataNodes();\n        assertEquals(0, pData.size());\n    }",
    "begin_line": 682,
    "end_line": 698,
    "comment": "",
    "child_ranges": [
      "(line 683,col 9)-(line 683,col 104)",
      "(line 684,col 9)-(line 684,col 54)",
      "(line 685,col 9)-(line 685,col 52)",
      "(line 686,col 9)-(line 686,col 44)",
      "(line 688,col 9)-(line 688,col 55)",
      "(line 689,col 9)-(line 689,col 43)",
      "(line 690,col 9)-(line 690,col 66)",
      "(line 692,col 9)-(line 692,col 53)",
      "(line 693,col 9)-(line 693,col 42)",
      "(line 694,col 9)-(line 694,col 68)",
      "(line 696,col 9)-(line 696,col 45)",
      "(line 697,col 9)-(line 697,col 38)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.elementIsNotASiblingOfItself()",
    "snippet": "@Test public void elementIsNotASiblingOfItself() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003cp\u003eTwo\u003cp\u003eThree\u003c/div\u003e\");\n        Element p2 \u003d doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        Elements els \u003d p2.siblingElements();\n        assertEquals(2, els.size());\n        assertEquals(\"\u003cp\u003eOne\u003c/p\u003e\", els.get(0).outerHtml());\n        assertEquals(\"\u003cp\u003eThree\u003c/p\u003e\", els.get(1).outerHtml());\n    }",
    "begin_line": 700,
    "end_line": 709,
    "comment": "",
    "child_ranges": [
      "(line 701,col 9)-(line 701,col 70)",
      "(line 702,col 9)-(line 702,col 44)",
      "(line 704,col 9)-(line 704,col 39)",
      "(line 705,col 9)-(line 705,col 44)",
      "(line 706,col 9)-(line 706,col 36)",
      "(line 707,col 9)-(line 707,col 59)",
      "(line 708,col 9)-(line 708,col 61)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testChildThrowsIndexOutOfBoundsOnMissing()",
    "snippet": "@Test public void testChildThrowsIndexOutOfBoundsOnMissing() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e\u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n\n        assertEquals(2, div.children().size());\n        assertEquals(\"One\", div.child(0).text());\n\n        try {\n            div.child(3);\n            fail(\"Should throw index out of bounds\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
    "begin_line": 711,
    "end_line": 722,
    "comment": "",
    "child_ranges": [
      "(line 712,col 9)-(line 712,col 70)",
      "(line 713,col 9)-(line 713,col 48)",
      "(line 715,col 9)-(line 715,col 47)",
      "(line 716,col 9)-(line 716,col 49)",
      "(line 718,col 9)-(line 721,col 48)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.moveByAppend()",
    "snippet": "@Test\n    public void moveByAppend() {\n        // test for https://github.com/jhy/jsoup/issues/239\n        // can empty an element and append its children to another element\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003eText \u003cp\u003eOne\u003c/p\u003e Text \u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\u003cdiv id\u003d2\u003e\u003c/div\u003e\");\n        Element div1 \u003d doc.select(\"div\").get(0);\n        Element div2 \u003d doc.select(\"div\").get(1);\n\n        assertEquals(4, div1.childNodeSize());\n        List\u003cNode\u003e children \u003d div1.childNodes();\n        assertEquals(4, children.size());\n\n        div2.insertChildren(0, children);\n\n        assertEquals(0, children.size()); // children is backed by div1.childNodes, moved, so should be 0 now\n        assertEquals(0, div1.childNodeSize());\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(\"\u003cdiv id\u003d\\\"1\\\"\u003e\u003c/div\u003e\\n\u003cdiv id\u003d\\\"2\\\"\u003e\\n Text \\n \u003cp\u003eOne\u003c/p\u003e Text \\n \u003cp\u003eTwo\u003c/p\u003e\\n\u003c/div\u003e\",\n            doc.body().html());\n    }",
    "begin_line": 725,
    "end_line": 743,
    "comment": "",
    "child_ranges": [
      "(line 728,col 9)-(line 728,col 102)",
      "(line 729,col 9)-(line 729,col 48)",
      "(line 730,col 9)-(line 730,col 48)",
      "(line 732,col 9)-(line 732,col 46)",
      "(line 733,col 9)-(line 733,col 48)",
      "(line 734,col 9)-(line 734,col 41)",
      "(line 736,col 9)-(line 736,col 41)",
      "(line 738,col 9)-(line 738,col 41)",
      "(line 739,col 9)-(line 739,col 46)",
      "(line 740,col 9)-(line 740,col 46)",
      "(line 741,col 9)-(line 742,col 31)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.insertChildrenArgumentValidation()",
    "snippet": "@Test\n    public void insertChildrenArgumentValidation() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003eText \u003cp\u003eOne\u003c/p\u003e Text \u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\u003cdiv id\u003d2\u003e\u003c/div\u003e\");\n        Element div1 \u003d doc.select(\"div\").get(0);\n        Element div2 \u003d doc.select(\"div\").get(1);\n        List\u003cNode\u003e children \u003d div1.childNodes();\n\n        try {\n            div2.insertChildren(6, children);\n            fail();\n        } catch (IllegalArgumentException e) {}\n\n        try {\n            div2.insertChildren(-5, children);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n\n        try {\n            div2.insertChildren(0, (Collection\u003c? extends Node\u003e) null);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }",
    "begin_line": 746,
    "end_line": 768,
    "comment": "",
    "child_ranges": [
      "(line 747,col 9)-(line 747,col 102)",
      "(line 748,col 9)-(line 748,col 48)",
      "(line 749,col 9)-(line 749,col 48)",
      "(line 750,col 9)-(line 750,col 48)",
      "(line 752,col 9)-(line 755,col 47)",
      "(line 757,col 9)-(line 761,col 9)",
      "(line 763,col 9)-(line 767,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.insertChildrenAtPosition()",
    "snippet": "@Test\n    public void insertChildrenAtPosition() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003eText1 \u003cp\u003eOne\u003c/p\u003e Text2 \u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\u003cdiv id\u003d2\u003eText3 \u003cp\u003eThree\u003c/p\u003e\u003c/div\u003e\");\n        Element div1 \u003d doc.select(\"div\").get(0);\n        Elements p1s \u003d div1.select(\"p\");\n        Element div2 \u003d doc.select(\"div\").get(1);\n\n        assertEquals(2, div2.childNodeSize());\n        div2.insertChildren(-1, p1s);\n        assertEquals(2, div1.childNodeSize()); // moved two out\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(3, p1s.get(1).siblingIndex()); // should be last\n\n        List\u003cNode\u003e els \u003d new ArrayList\u003c\u003e();\n        Element el1 \u003d new Element(Tag.valueOf(\"span\"), \"\").text(\"Span1\");\n        Element el2 \u003d new Element(Tag.valueOf(\"span\"), \"\").text(\"Span2\");\n        TextNode tn1 \u003d new TextNode(\"Text4\");\n        els.add(el1);\n        els.add(el2);\n        els.add(tn1);\n\n        assertNull(el1.parent());\n        div2.insertChildren(-2, els);\n        assertEquals(div2, el1.parent());\n        assertEquals(7, div2.childNodeSize());\n        assertEquals(3, el1.siblingIndex());\n        assertEquals(4, el2.siblingIndex());\n        assertEquals(5, tn1.siblingIndex());\n    }",
    "begin_line": 771,
    "end_line": 798,
    "comment": "",
    "child_ranges": [
      "(line 772,col 9)-(line 772,col 122)",
      "(line 773,col 9)-(line 773,col 48)",
      "(line 774,col 9)-(line 774,col 40)",
      "(line 775,col 9)-(line 775,col 48)",
      "(line 777,col 9)-(line 777,col 46)",
      "(line 778,col 9)-(line 778,col 37)",
      "(line 779,col 9)-(line 779,col 46)",
      "(line 780,col 9)-(line 780,col 46)",
      "(line 781,col 9)-(line 781,col 51)",
      "(line 783,col 9)-(line 783,col 43)",
      "(line 784,col 9)-(line 784,col 73)",
      "(line 785,col 9)-(line 785,col 73)",
      "(line 786,col 9)-(line 786,col 45)",
      "(line 787,col 9)-(line 787,col 21)",
      "(line 788,col 9)-(line 788,col 21)",
      "(line 789,col 9)-(line 789,col 21)",
      "(line 791,col 9)-(line 791,col 33)",
      "(line 792,col 9)-(line 792,col 37)",
      "(line 793,col 9)-(line 793,col 41)",
      "(line 794,col 9)-(line 794,col 46)",
      "(line 795,col 9)-(line 795,col 44)",
      "(line 796,col 9)-(line 796,col 44)",
      "(line 797,col 9)-(line 797,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.insertChildrenAsCopy()",
    "snippet": "@Test\n    public void insertChildrenAsCopy() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003eText \u003cp\u003eOne\u003c/p\u003e Text \u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\u003cdiv id\u003d2\u003e\u003c/div\u003e\");\n        Element div1 \u003d doc.select(\"div\").get(0);\n        Element div2 \u003d doc.select(\"div\").get(1);\n        Elements ps \u003d doc.select(\"p\").clone();\n        ps.first().text(\"One cloned\");\n        div2.insertChildren(-1, ps);\n\n        assertEquals(4, div1.childNodeSize()); // not moved -- cloned\n        assertEquals(2, div2.childNodeSize());\n        assertEquals(\"\u003cdiv id\u003d\\\"1\\\"\u003eText \u003cp\u003eOne\u003c/p\u003e Text \u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\u003cdiv id\u003d\\\"2\\\"\u003e\u003cp\u003eOne cloned\u003c/p\u003e\u003cp\u003eTwo\u003c/p\u003e\u003c/div\u003e\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 801,
    "end_line": 813,
    "comment": "",
    "child_ranges": [
      "(line 802,col 9)-(line 802,col 102)",
      "(line 803,col 9)-(line 803,col 48)",
      "(line 804,col 9)-(line 804,col 48)",
      "(line 805,col 9)-(line 805,col 46)",
      "(line 806,col 9)-(line 806,col 38)",
      "(line 807,col 9)-(line 807,col 36)",
      "(line 809,col 9)-(line 809,col 46)",
      "(line 810,col 9)-(line 810,col 46)",
      "(line 811,col 9)-(line 812,col 55)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testCssPath()",
    "snippet": "@Test\n    public void testCssPath() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d\\\"id1\\\"\u003eA\u003c/div\u003e\u003cdiv\u003eB\u003c/div\u003e\u003cdiv class\u003d\\\"c1 c2\\\"\u003eC\u003c/div\u003e\");\n        Element divA \u003d doc.select(\"div\").get(0);\n        Element divB \u003d doc.select(\"div\").get(1);\n        Element divC \u003d doc.select(\"div\").get(2);\n        assertEquals(divA.cssSelector(), \"#id1\");\n        assertEquals(divB.cssSelector(), \"html \u003e body \u003e div:nth-child(2)\");\n        assertEquals(divC.cssSelector(), \"html \u003e body \u003e div.c1.c2\");\n\n        assertTrue(divA \u003d\u003d doc.select(divA.cssSelector()).first());\n        assertTrue(divB \u003d\u003d doc.select(divB.cssSelector()).first());\n        assertTrue(divC \u003d\u003d doc.select(divC.cssSelector()).first());\n    }",
    "begin_line": 816,
    "end_line": 828,
    "comment": "",
    "child_ranges": [
      "(line 817,col 9)-(line 817,col 102)",
      "(line 818,col 9)-(line 818,col 48)",
      "(line 819,col 9)-(line 819,col 48)",
      "(line 820,col 9)-(line 820,col 48)",
      "(line 821,col 9)-(line 821,col 49)",
      "(line 822,col 9)-(line 822,col 75)",
      "(line 823,col 9)-(line 823,col 68)",
      "(line 825,col 9)-(line 825,col 67)",
      "(line 826,col 9)-(line 826,col 67)",
      "(line 827,col 9)-(line 827,col 67)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClassNames()",
    "snippet": "@Test\n    public void testClassNames() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\\\"c1 c2\\\"\u003eC\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").get(0);\n\n        assertEquals(\"c1 c2\", div.className());\n\n        final Set\u003cString\u003e set1 \u003d div.classNames();\n        final Object[] arr1 \u003d set1.toArray();\n        assertTrue(arr1.length\u003d\u003d2);\n        assertEquals(\"c1\", arr1[0]);\n        assertEquals(\"c2\", arr1[1]);\n\n        // Changes to the set should not be reflected in the Elements getters\n       \tset1.add(\"c3\");\n        assertTrue(2\u003d\u003ddiv.classNames().size());\n        assertEquals(\"c1 c2\", div.className());\n\n        // Update the class names to a fresh set\n        final Set\u003cString\u003e newSet \u003d new LinkedHashSet\u003c\u003e(3);\n        newSet.addAll(set1);\n        newSet.add(\"c3\");\n        \n        div.classNames(newSet);\n\n        \n        assertEquals(\"c1 c2 c3\", div.className());\n\n        final Set\u003cString\u003e set2 \u003d div.classNames();\n        final Object[] arr2 \u003d set2.toArray();\n        assertTrue(arr2.length\u003d\u003d3);\n        assertEquals(\"c1\", arr2[0]);\n        assertEquals(\"c2\", arr2[1]);\n        assertEquals(\"c3\", arr2[2]);\n    }",
    "begin_line": 832,
    "end_line": 865,
    "comment": "",
    "child_ranges": [
      "(line 833,col 9)-(line 833,col 67)",
      "(line 834,col 9)-(line 834,col 47)",
      "(line 836,col 9)-(line 836,col 47)",
      "(line 838,col 9)-(line 838,col 50)",
      "(line 839,col 9)-(line 839,col 45)",
      "(line 840,col 9)-(line 840,col 35)",
      "(line 841,col 9)-(line 841,col 36)",
      "(line 842,col 9)-(line 842,col 36)",
      "(line 845,col 9)-(line 845,col 23)",
      "(line 846,col 9)-(line 846,col 47)",
      "(line 847,col 9)-(line 847,col 47)",
      "(line 850,col 9)-(line 850,col 58)",
      "(line 851,col 9)-(line 851,col 28)",
      "(line 852,col 9)-(line 852,col 25)",
      "(line 854,col 9)-(line 854,col 31)",
      "(line 857,col 9)-(line 857,col 50)",
      "(line 859,col 9)-(line 859,col 50)",
      "(line 860,col 9)-(line 860,col 45)",
      "(line 861,col 9)-(line 861,col 35)",
      "(line 862,col 9)-(line 862,col 36)",
      "(line 863,col 9)-(line 863,col 36)",
      "(line 864,col 9)-(line 864,col 36)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHashAndEqualsAndValue()",
    "snippet": "@Test\n    public void testHashAndEqualsAndValue() {\n        // .equals and hashcode are identity. value is content.\n\n        String doc1 \u003d \"\u003cdiv id\u003d1\u003e\u003cp class\u003done\u003eOne\u003c/p\u003e\u003cp class\u003done\u003eOne\u003c/p\u003e\u003cp class\u003done\u003eTwo\u003c/p\u003e\u003cp class\u003dtwo\u003eOne\u003c/p\u003e\u003c/div\u003e\" +\n                \"\u003cdiv id\u003d2\u003e\u003cp class\u003done\u003eOne\u003c/p\u003e\u003cp class\u003done\u003eOne\u003c/p\u003e\u003cp class\u003done\u003eTwo\u003c/p\u003e\u003cp class\u003dtwo\u003eOne\u003c/p\u003e\u003c/div\u003e\";\n\n        Document doc \u003d Jsoup.parse(doc1);\n        Elements els \u003d doc.select(\"p\");\n\n        /*\n        for (Element el : els) {\n            System.out.println(el.hashCode() + \" - \" + el.outerHtml());\n        }\n\n        0 1534787905 - \u003cp class\u003d\"one\"\u003eOne\u003c/p\u003e\n        1 1534787905 - \u003cp class\u003d\"one\"\u003eOne\u003c/p\u003e\n        2 1539683239 - \u003cp class\u003d\"one\"\u003eTwo\u003c/p\u003e\n        3 1535455211 - \u003cp class\u003d\"two\"\u003eOne\u003c/p\u003e\n        4 1534787905 - \u003cp class\u003d\"one\"\u003eOne\u003c/p\u003e\n        5 1534787905 - \u003cp class\u003d\"one\"\u003eOne\u003c/p\u003e\n        6 1539683239 - \u003cp class\u003d\"one\"\u003eTwo\u003c/p\u003e\n        7 1535455211 - \u003cp class\u003d\"two\"\u003eOne\u003c/p\u003e\n        */\n        assertEquals(8, els.size());\n        Element e0 \u003d els.get(0);\n        Element e1 \u003d els.get(1);\n        Element e2 \u003d els.get(2);\n        Element e3 \u003d els.get(3);\n        Element e4 \u003d els.get(4);\n        Element e5 \u003d els.get(5);\n        Element e6 \u003d els.get(6);\n        Element e7 \u003d els.get(7);\n\n        assertEquals(e0, e0);\n        assertTrue(e0.hasSameValue(e1));\n        assertTrue(e0.hasSameValue(e4));\n        assertTrue(e0.hasSameValue(e5));\n        assertFalse(e0.equals(e2));\n        assertFalse(e0.hasSameValue(e2));\n        assertFalse(e0.hasSameValue(e3));\n        assertFalse(e0.hasSameValue(e6));\n        assertFalse(e0.hasSameValue(e7));\n\n        assertEquals(e0.hashCode(), e0.hashCode());\n        assertFalse(e0.hashCode() \u003d\u003d (e2.hashCode()));\n        assertFalse(e0.hashCode() \u003d\u003d (e3).hashCode());\n        assertFalse(e0.hashCode() \u003d\u003d (e6).hashCode());\n        assertFalse(e0.hashCode() \u003d\u003d (e7).hashCode());\n    }",
    "begin_line": 868,
    "end_line": 916,
    "comment": "",
    "child_ranges": [
      "(line 871,col 9)-(line 872,col 115)",
      "(line 874,col 9)-(line 874,col 41)",
      "(line 875,col 9)-(line 875,col 39)",
      "(line 891,col 9)-(line 891,col 36)",
      "(line 892,col 9)-(line 892,col 32)",
      "(line 893,col 9)-(line 893,col 32)",
      "(line 894,col 9)-(line 894,col 32)",
      "(line 895,col 9)-(line 895,col 32)",
      "(line 896,col 9)-(line 896,col 32)",
      "(line 897,col 9)-(line 897,col 32)",
      "(line 898,col 9)-(line 898,col 32)",
      "(line 899,col 9)-(line 899,col 32)",
      "(line 901,col 9)-(line 901,col 29)",
      "(line 902,col 9)-(line 902,col 40)",
      "(line 903,col 9)-(line 903,col 40)",
      "(line 904,col 9)-(line 904,col 40)",
      "(line 905,col 9)-(line 905,col 35)",
      "(line 906,col 9)-(line 906,col 41)",
      "(line 907,col 9)-(line 907,col 41)",
      "(line 908,col 9)-(line 908,col 41)",
      "(line 909,col 9)-(line 909,col 41)",
      "(line 911,col 9)-(line 911,col 51)",
      "(line 912,col 9)-(line 912,col 54)",
      "(line 913,col 9)-(line 913,col 54)",
      "(line 914,col 9)-(line 914,col 54)",
      "(line 915,col 9)-(line 915,col 54)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testRelativeUrls()",
    "snippet": "@Test public void testRelativeUrls() {\n        String html \u003d \"\u003cbody\u003e\u003ca href\u003d\u0027./one.html\u0027\u003eOne\u003c/a\u003e \u003ca href\u003d\u0027two.html\u0027\u003etwo\u003c/a\u003e \u003ca href\u003d\u0027../three.html\u0027\u003eThree\u003c/a\u003e \u003ca href\u003d\u0027//example2.com/four/\u0027\u003eFour\u003c/a\u003e \u003ca href\u003d\u0027https://example2.com/five/\u0027\u003eFive\u003c/a\u003e\";\n        Document doc \u003d Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els \u003d doc.select(\"a\");\n\n        assertEquals(\"http://example.com/bar/one.html\", els.get(0).absUrl(\"href\"));\n        assertEquals(\"http://example.com/bar/two.html\", els.get(1).absUrl(\"href\"));\n        assertEquals(\"http://example.com/three.html\", els.get(2).absUrl(\"href\"));\n        assertEquals(\"http://example2.com/four/\", els.get(3).absUrl(\"href\"));\n        assertEquals(\"https://example2.com/five/\", els.get(4).absUrl(\"href\"));\n    }",
    "begin_line": 918,
    "end_line": 928,
    "comment": "",
    "child_ranges": [
      "(line 919,col 9)-(line 919,col 206)",
      "(line 920,col 9)-(line 920,col 68)",
      "(line 921,col 9)-(line 921,col 39)",
      "(line 923,col 9)-(line 923,col 83)",
      "(line 924,col 9)-(line 924,col 83)",
      "(line 925,col 9)-(line 925,col 81)",
      "(line 926,col 9)-(line 926,col 77)",
      "(line 927,col 9)-(line 927,col 78)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.appendMustCorrectlyMoveChildrenInsideOneParentElement()",
    "snippet": "@Test\n    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {\n        Document doc \u003d new Document(\"\");\n        Element body \u003d doc.appendElement(\"body\");\n        body.appendElement(\"div1\");\n        body.appendElement(\"div2\");\n        final Element div3 \u003d body.appendElement(\"div3\");\n        div3.text(\"Check\");\n        final Element div4 \u003d body.appendElement(\"div4\");\n\n        ArrayList\u003cElement\u003e toMove \u003d new ArrayList\u003c\u003e();\n        toMove.add(div3);\n        toMove.add(div4);\n\n        body.insertChildren(0, toMove);\n\n        String result \u003d doc.toString().replaceAll(\"\\\\s+\", \"\");\n        assertEquals(\"\u003cbody\u003e\u003cdiv3\u003eCheck\u003c/div3\u003e\u003cdiv4\u003e\u003c/div4\u003e\u003cdiv1\u003e\u003c/div1\u003e\u003cdiv2\u003e\u003c/div2\u003e\u003c/body\u003e\", result);\n    }",
    "begin_line": 931,
    "end_line": 948,
    "comment": "",
    "child_ranges": [
      "(line 932,col 9)-(line 932,col 40)",
      "(line 933,col 9)-(line 933,col 49)",
      "(line 934,col 9)-(line 934,col 35)",
      "(line 935,col 9)-(line 935,col 35)",
      "(line 936,col 9)-(line 936,col 56)",
      "(line 937,col 9)-(line 937,col 27)",
      "(line 938,col 9)-(line 938,col 56)",
      "(line 940,col 9)-(line 940,col 54)",
      "(line 941,col 9)-(line 941,col 25)",
      "(line 942,col 9)-(line 942,col 25)",
      "(line 944,col 9)-(line 944,col 39)",
      "(line 946,col 9)-(line 946,col 62)",
      "(line 947,col 9)-(line 947,col 103)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHashcodeIsStableWithContentChanges()",
    "snippet": "@Test\n    public void testHashcodeIsStableWithContentChanges() {\n        Element root \u003d new Element(Tag.valueOf(\"root\"), \"\");\n\n        HashSet\u003cElement\u003e set \u003d new HashSet\u003c\u003e();\n        // Add root node:\n        set.add(root);\n\n        root.appendChild(new Element(Tag.valueOf(\"a\"), \"\"));\n        assertTrue(set.contains(root));\n    }",
    "begin_line": 951,
    "end_line": 960,
    "comment": "",
    "child_ranges": [
      "(line 952,col 9)-(line 952,col 60)",
      "(line 954,col 9)-(line 954,col 47)",
      "(line 956,col 9)-(line 956,col 22)",
      "(line 958,col 9)-(line 958,col 60)",
      "(line 959,col 9)-(line 959,col 39)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNamespacedElements()",
    "snippet": "@Test\n    public void testNamespacedElements() {\n        // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.\n        String html \u003d \"\u003chtml\u003e\u003cbody\u003e\u003cfb:comments /\u003e\u003c/body\u003e\u003c/html\u003e\";\n        Document doc \u003d Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els \u003d doc.select(\"fb|comments\");\n        assertEquals(1, els.size());\n        assertEquals(\"html \u003e body \u003e fb|comments\", els.get(0).cssSelector());\n    }",
    "begin_line": 963,
    "end_line": 970,
    "comment": "",
    "child_ranges": [
      "(line 965,col 9)-(line 965,col 66)",
      "(line 966,col 9)-(line 966,col 68)",
      "(line 967,col 9)-(line 967,col 49)",
      "(line 968,col 9)-(line 968,col 36)",
      "(line 969,col 9)-(line 969,col 76)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testChainedRemoveAttributes()",
    "snippet": "@Test\n    public void testChainedRemoveAttributes() {\n        String html \u003d \"\u003ca one two three four\u003eText\u003c/a\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        Element a \u003d doc.select(\"a\").first();\n        a\n            .removeAttr(\"zero\")\n            .removeAttr(\"one\")\n            .removeAttr(\"two\")\n            .removeAttr(\"three\")\n            .removeAttr(\"four\")\n            .removeAttr(\"five\");\n        assertEquals(\"\u003ca\u003eText\u003c/a\u003e\", a.outerHtml());\n    }",
    "begin_line": 973,
    "end_line": 985,
    "comment": "",
    "child_ranges": [
      "(line 974,col 9)-(line 974,col 55)",
      "(line 975,col 9)-(line 975,col 41)",
      "(line 976,col 9)-(line 976,col 44)",
      "(line 977,col 9)-(line 983,col 32)",
      "(line 984,col 9)-(line 984,col 51)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testLoopedRemoveAttributes()",
    "snippet": "@Test\n    public void testLoopedRemoveAttributes() {\n        String html \u003d \"\u003ca one two three four\u003eText\u003c/a\u003e\u003cp foo\u003eTwo\u003c/p\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        for (Element el : doc.getAllElements()) {\n            el.clearAttributes();\n        }\n\n        assertEquals(\"\u003ca\u003eText\u003c/a\u003e\\n\u003cp\u003eTwo\u003c/p\u003e\", doc.body().html());\n    }",
    "begin_line": 988,
    "end_line": 996,
    "comment": "",
    "child_ranges": [
      "(line 989,col 9)-(line 989,col 69)",
      "(line 990,col 9)-(line 990,col 41)",
      "(line 991,col 9)-(line 993,col 9)",
      "(line 995,col 9)-(line 995,col 67)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testIs()",
    "snippet": "@Test\n    public void testIs() {\n        String html \u003d \"\u003cdiv\u003e\u003cp\u003eOne \u003ca class\u003dbig\u003eTwo\u003c/a\u003e Three\u003c/p\u003e\u003cp\u003eAnother\u003c/p\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        Element p \u003d doc.select(\"p\").first();\n\n        assertTrue(p.is(\"p\"));\n        assertFalse(p.is(\"div\"));\n        assertTrue(p.is(\"p:has(a)\"));\n        assertTrue(p.is(\"p:first-child\"));\n        assertFalse(p.is(\"p:last-child\"));\n        assertTrue(p.is(\"*\"));\n        assertTrue(p.is(\"div p\"));\n\n        Element q \u003d doc.select(\"p\").last();\n        assertTrue(q.is(\"p\"));\n        assertTrue(q.is(\"p ~ p\"));\n        assertTrue(q.is(\"p + p\"));\n        assertTrue(q.is(\"p:last-child\"));\n        assertFalse(q.is(\"p a\"));\n        assertFalse(q.is(\"a\"));\n    }",
    "begin_line": 999,
    "end_line": 1019,
    "comment": "",
    "child_ranges": [
      "(line 1000,col 9)-(line 1000,col 81)",
      "(line 1001,col 9)-(line 1001,col 41)",
      "(line 1002,col 9)-(line 1002,col 44)",
      "(line 1004,col 9)-(line 1004,col 30)",
      "(line 1005,col 9)-(line 1005,col 33)",
      "(line 1006,col 9)-(line 1006,col 37)",
      "(line 1007,col 9)-(line 1007,col 42)",
      "(line 1008,col 9)-(line 1008,col 42)",
      "(line 1009,col 9)-(line 1009,col 30)",
      "(line 1010,col 9)-(line 1010,col 34)",
      "(line 1012,col 9)-(line 1012,col 43)",
      "(line 1013,col 9)-(line 1013,col 30)",
      "(line 1014,col 9)-(line 1014,col 34)",
      "(line 1015,col 9)-(line 1015,col 34)",
      "(line 1016,col 9)-(line 1016,col 41)",
      "(line 1017,col 9)-(line 1017,col 33)",
      "(line 1018,col 9)-(line 1018,col 31)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.elementByTagName()",
    "snippet": "@Test public void elementByTagName() {\n        Element a \u003d new Element(\"P\");\n        assertTrue(a.tagName().equals(\"P\"));\n    }",
    "begin_line": 1022,
    "end_line": 1025,
    "comment": "",
    "child_ranges": [
      "(line 1023,col 9)-(line 1023,col 37)",
      "(line 1024,col 9)-(line 1024,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testChildrenElements()",
    "snippet": "@Test public void testChildrenElements() {\n        String html \u003d \"\u003cdiv\u003e\u003cp\u003e\u003ca\u003eOne\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca\u003eTwo\u003c/a\u003e\u003c/p\u003eThree\u003c/div\u003e\u003cspan\u003eFour\u003c/span\u003e\u003cfoo\u003e\u003c/foo\u003e\u003cimg\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        Element div \u003d doc.select(\"div\").first();\n        Element p \u003d doc.select(\"p\").first();\n        Element span \u003d doc.select(\"span\").first();\n        Element foo \u003d doc.select(\"foo\").first();\n        Element img \u003d doc.select(\"img\").first();\n\n        Elements docChildren \u003d div.children();\n        assertEquals(2, docChildren.size());\n        assertEquals(\"\u003cp\u003e\u003ca\u003eOne\u003c/a\u003e\u003c/p\u003e\", docChildren.get(0).outerHtml());\n        assertEquals(\"\u003cp\u003e\u003ca\u003eTwo\u003c/a\u003e\u003c/p\u003e\", docChildren.get(1).outerHtml());\n        assertEquals(3, div.childNodes().size());\n        assertEquals(\"Three\", div.childNodes().get(2).outerHtml());\n\n        assertEquals(1, p.children().size());\n        assertEquals(\"One\", p.children().text());\n\n        assertEquals(0, span.children().size());\n        assertEquals(1, span.childNodes().size());\n        assertEquals(\"Four\", span.childNodes().get(0).outerHtml());\n\n        assertEquals(0, foo.children().size());\n        assertEquals(0, foo.childNodes().size());\n        assertEquals(0, img.children().size());\n        assertEquals(0, img.childNodes().size());\n    }",
    "begin_line": 1027,
    "end_line": 1054,
    "comment": "",
    "child_ranges": [
      "(line 1028,col 9)-(line 1028,col 108)",
      "(line 1029,col 9)-(line 1029,col 41)",
      "(line 1030,col 9)-(line 1030,col 48)",
      "(line 1031,col 9)-(line 1031,col 44)",
      "(line 1032,col 9)-(line 1032,col 50)",
      "(line 1033,col 9)-(line 1033,col 48)",
      "(line 1034,col 9)-(line 1034,col 48)",
      "(line 1036,col 9)-(line 1036,col 46)",
      "(line 1037,col 9)-(line 1037,col 44)",
      "(line 1038,col 9)-(line 1038,col 74)",
      "(line 1039,col 9)-(line 1039,col 74)",
      "(line 1040,col 9)-(line 1040,col 49)",
      "(line 1041,col 9)-(line 1041,col 67)",
      "(line 1043,col 9)-(line 1043,col 45)",
      "(line 1044,col 9)-(line 1044,col 49)",
      "(line 1046,col 9)-(line 1046,col 48)",
      "(line 1047,col 9)-(line 1047,col 50)",
      "(line 1048,col 9)-(line 1048,col 67)",
      "(line 1050,col 9)-(line 1050,col 47)",
      "(line 1051,col 9)-(line 1051,col 49)",
      "(line 1052,col 9)-(line 1052,col 47)",
      "(line 1053,col 9)-(line 1053,col 49)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testShadowElementsAreUpdated()",
    "snippet": "@Test public void testShadowElementsAreUpdated() {\n        String html \u003d \"\u003cdiv\u003e\u003cp\u003e\u003ca\u003eOne\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca\u003eTwo\u003c/a\u003e\u003c/p\u003eThree\u003c/div\u003e\u003cspan\u003eFour\u003c/span\u003e\u003cfoo\u003e\u003c/foo\u003e\u003cimg\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        Element div \u003d doc.select(\"div\").first();\n        Elements els \u003d div.children();\n        List\u003cNode\u003e nodes \u003d div.childNodes();\n\n        assertEquals(2, els.size()); // the two Ps\n        assertEquals(3, nodes.size()); // the \"Three\" textnode\n\n        Element p3 \u003d new Element(\"p\").text(\"P3\");\n        Element p4 \u003d new Element(\"p\").text(\"P4\");\n        div.insertChildren(1, p3);\n        div.insertChildren(3, p4);\n        Elements els2 \u003d div.children();\n\n        // first els should not have changed\n        assertEquals(2, els.size());\n        assertEquals(4, els2.size());\n\n        assertEquals(\"\u003cp\u003e\u003ca\u003eOne\u003c/a\u003e\u003c/p\u003e\\n\" +\n            \"\u003cp\u003eP3\u003c/p\u003e\\n\" +\n            \"\u003cp\u003e\u003ca\u003eTwo\u003c/a\u003e\u003c/p\u003e\\n\" +\n            \"\u003cp\u003eP4\u003c/p\u003eThree\", div.html());\n        assertEquals(\"P3\", els2.get(1).text());\n        assertEquals(\"P4\", els2.get(3).text());\n\n        p3.after(\"\u003cspan\u003eAnother\u003c/span\");\n\n        Elements els3 \u003d div.children();\n        assertEquals(5, els3.size());\n        assertEquals(\"span\", els3.get(2).tagName());\n        assertEquals(\"Another\", els3.get(2).text());\n\n        assertEquals(\"\u003cp\u003e\u003ca\u003eOne\u003c/a\u003e\u003c/p\u003e\\n\" +\n            \"\u003cp\u003eP3\u003c/p\u003e\\n\" +\n            \"\u003cspan\u003eAnother\u003c/span\u003e\\n\" +\n            \"\u003cp\u003e\u003ca\u003eTwo\u003c/a\u003e\u003c/p\u003e\\n\" +\n            \"\u003cp\u003eP4\u003c/p\u003eThree\", div.html());\n    }",
    "begin_line": 1056,
    "end_line": 1095,
    "comment": "",
    "child_ranges": [
      "(line 1057,col 9)-(line 1057,col 108)",
      "(line 1058,col 9)-(line 1058,col 41)",
      "(line 1059,col 9)-(line 1059,col 48)",
      "(line 1060,col 9)-(line 1060,col 38)",
      "(line 1061,col 9)-(line 1061,col 44)",
      "(line 1063,col 9)-(line 1063,col 36)",
      "(line 1064,col 9)-(line 1064,col 38)",
      "(line 1066,col 9)-(line 1066,col 49)",
      "(line 1067,col 9)-(line 1067,col 49)",
      "(line 1068,col 9)-(line 1068,col 34)",
      "(line 1069,col 9)-(line 1069,col 34)",
      "(line 1070,col 9)-(line 1070,col 39)",
      "(line 1073,col 9)-(line 1073,col 36)",
      "(line 1074,col 9)-(line 1074,col 37)",
      "(line 1076,col 9)-(line 1079,col 42)",
      "(line 1080,col 9)-(line 1080,col 47)",
      "(line 1081,col 9)-(line 1081,col 47)",
      "(line 1083,col 9)-(line 1083,col 40)",
      "(line 1085,col 9)-(line 1085,col 39)",
      "(line 1086,col 9)-(line 1086,col 37)",
      "(line 1087,col 9)-(line 1087,col 52)",
      "(line 1088,col 9)-(line 1088,col 52)",
      "(line 1090,col 9)-(line 1094,col 42)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.classNamesAndAttributeNameIsCaseInsensitive()",
    "snippet": "@Test public void classNamesAndAttributeNameIsCaseInsensitive() {\n        String html \u003d \"\u003cp Class\u003d\u0027SomeText AnotherText\u0027\u003eOne\u003c/p\u003e\";\n        Document doc \u003d Jsoup.parse(html);\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(\"SomeText AnotherText\", p.className());\n        assertTrue(p.classNames().contains(\"SomeText\"));\n        assertTrue(p.classNames().contains(\"AnotherText\"));\n        assertTrue(p.hasClass(\"SomeText\"));\n        assertTrue(p.hasClass(\"sometext\"));\n        assertTrue(p.hasClass(\"AnotherText\"));\n        assertTrue(p.hasClass(\"anothertext\"));\n\n        Element p1 \u003d doc.select(\".SomeText\").first();\n        Element p2 \u003d doc.select(\".sometext\").first();\n        Element p3 \u003d doc.select(\"[class\u003dSomeText AnotherText]\").first();\n        Element p4 \u003d doc.select(\"[Class\u003dSomeText AnotherText]\").first();\n        Element p5 \u003d doc.select(\"[class\u003dsometext anothertext]\").first();\n        Element p6 \u003d doc.select(\"[class\u003dSomeText AnotherText]\").first();\n        Element p7 \u003d doc.select(\"[class^\u003dsometext]\").first();\n        Element p8 \u003d doc.select(\"[class$\u003dnothertext]\").first();\n        Element p9 \u003d doc.select(\"[class^\u003dsometext]\").first();\n        Element p10 \u003d doc.select(\"[class$\u003dAnotherText]\").first();\n\n        assertEquals(\"One\", p1.text());\n        assertEquals(p1, p2);\n        assertEquals(p1, p3);\n        assertEquals(p1, p4);\n        assertEquals(p1, p5);\n        assertEquals(p1, p6);\n        assertEquals(p1, p7);\n        assertEquals(p1, p8);\n        assertEquals(p1, p9);\n        assertEquals(p1, p10);\n    }",
    "begin_line": 1097,
    "end_line": 1130,
    "comment": "",
    "child_ranges": [
      "(line 1098,col 9)-(line 1098,col 64)",
      "(line 1099,col 9)-(line 1099,col 41)",
      "(line 1100,col 9)-(line 1100,col 44)",
      "(line 1101,col 9)-(line 1101,col 60)",
      "(line 1102,col 9)-(line 1102,col 56)",
      "(line 1103,col 9)-(line 1103,col 59)",
      "(line 1104,col 9)-(line 1104,col 43)",
      "(line 1105,col 9)-(line 1105,col 43)",
      "(line 1106,col 9)-(line 1106,col 46)",
      "(line 1107,col 9)-(line 1107,col 46)",
      "(line 1109,col 9)-(line 1109,col 53)",
      "(line 1110,col 9)-(line 1110,col 53)",
      "(line 1111,col 9)-(line 1111,col 72)",
      "(line 1112,col 9)-(line 1112,col 72)",
      "(line 1113,col 9)-(line 1113,col 72)",
      "(line 1114,col 9)-(line 1114,col 72)",
      "(line 1115,col 9)-(line 1115,col 61)",
      "(line 1116,col 9)-(line 1116,col 63)",
      "(line 1117,col 9)-(line 1117,col 61)",
      "(line 1118,col 9)-(line 1118,col 65)",
      "(line 1120,col 9)-(line 1120,col 39)",
      "(line 1121,col 9)-(line 1121,col 29)",
      "(line 1122,col 9)-(line 1122,col 29)",
      "(line 1123,col 9)-(line 1123,col 29)",
      "(line 1124,col 9)-(line 1124,col 29)",
      "(line 1125,col 9)-(line 1125,col 29)",
      "(line 1126,col 9)-(line 1126,col 29)",
      "(line 1127,col 9)-(line 1127,col 29)",
      "(line 1128,col 9)-(line 1128,col 29)",
      "(line 1129,col 9)-(line 1129,col 30)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAppendTo()",
    "snippet": "@Test\n\tpublic void testAppendTo() {\n\t\tString parentHtml \u003d \"\u003cdiv class\u003d\u0027a\u0027\u003e\u003c/div\u003e\";\n\t\tString childHtml \u003d \"\u003cdiv class\u003d\u0027b\u0027\u003e\u003c/div\u003e\u003cp\u003eTwo\u003c/p\u003e\";\n\n\t\tDocument parentDoc \u003d Jsoup.parse(parentHtml);\n\t\tElement parent \u003d parentDoc.body();\n        Document childDoc \u003d Jsoup.parse(childHtml);\n\n        Element div \u003d childDoc.select(\"div\").first();\n        Element p \u003d childDoc.select(\"p\").first();\n        Element appendTo1 \u003d div.appendTo(parent);\n        assertEquals(div, appendTo1);\n\n        Element appendTo2 \u003d p.appendTo(div);\n        assertEquals(p, appendTo2);\n\n        assertEquals(\"\u003cdiv class\u003d\\\"a\\\"\u003e\u003c/div\u003e\\n\u003cdiv class\u003d\\\"b\\\"\u003e\\n \u003cp\u003eTwo\u003c/p\u003e\\n\u003c/div\u003e\", parentDoc.body().html());\n        assertEquals(\"\", childDoc.body().html()); // got moved out\n\t}",
    "begin_line": 1133,
    "end_line": 1151,
    "comment": "",
    "child_ranges": [
      "(line 1134,col 3)-(line 1134,col 46)",
      "(line 1135,col 3)-(line 1135,col 55)",
      "(line 1137,col 3)-(line 1137,col 47)",
      "(line 1138,col 3)-(line 1138,col 36)",
      "(line 1139,col 9)-(line 1139,col 51)",
      "(line 1141,col 9)-(line 1141,col 53)",
      "(line 1142,col 9)-(line 1142,col 49)",
      "(line 1143,col 9)-(line 1143,col 49)",
      "(line 1144,col 9)-(line 1144,col 37)",
      "(line 1146,col 9)-(line 1146,col 44)",
      "(line 1147,col 9)-(line 1147,col 35)",
      "(line 1149,col 9)-(line 1149,col 113)",
      "(line 1150,col 9)-(line 1150,col 49)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNormalizesNbspInText()",
    "snippet": "@Test public void testNormalizesNbspInText() {\n        String escaped \u003d \"You can\u0027t always get what you\u0026nbsp;want.\";\n        String withNbsp \u003d \"You can\u0027t always get what you want.\"; // there is an nbsp char in there\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003e\" + escaped);\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(\"You can\u0027t always get what you want.\", p.text()); // text is normalized\n\n        assertEquals(\"\u003cp\u003e\" + escaped + \"\u003c/p\u003e\", p.outerHtml()); // html / whole text keeps \u0026nbsp;\n        assertEquals(withNbsp, p.textNodes().get(0).getWholeText());\n        assertEquals(160, withNbsp.charAt(29));\n\n        Element matched \u003d doc.select(\"p:contains(get what you want)\").first();\n        assertEquals(\"p\", matched.nodeName());\n        assertTrue(matched.is(\":containsOwn(get what you want)\"));\n    }",
    "begin_line": 1153,
    "end_line": 1167,
    "comment": "",
    "child_ranges": [
      "(line 1154,col 9)-(line 1154,col 68)",
      "(line 1155,col 9)-(line 1155,col 64)",
      "(line 1156,col 9)-(line 1156,col 52)",
      "(line 1157,col 9)-(line 1157,col 44)",
      "(line 1158,col 9)-(line 1158,col 70)",
      "(line 1160,col 9)-(line 1160,col 62)",
      "(line 1161,col 9)-(line 1161,col 68)",
      "(line 1162,col 9)-(line 1162,col 47)",
      "(line 1164,col 9)-(line 1164,col 78)",
      "(line 1165,col 9)-(line 1165,col 46)",
      "(line 1166,col 9)-(line 1166,col 66)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testRemoveBeforeIndex()",
    "snippet": "@Test\n\tpublic void testRemoveBeforeIndex() {\n\t\tDocument doc \u003d Jsoup.parse(\n\t            \"\u003chtml\u003e\u003cbody\u003e\u003cdiv\u003e\u003cp\u003ebefore1\u003c/p\u003e\u003cp\u003ebefore2\u003c/p\u003e\u003cp\u003eXXX\u003c/p\u003e\u003cp\u003eafter1\u003c/p\u003e\u003cp\u003eafter2\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n\t            \"\");\n\t    Element body \u003d doc.select(\"body\").first();\n\t    Elements elems \u003d body.select(\"p:matchesOwn(XXX)\");\n\t    Element xElem \u003d elems.first();\n\t    Elements beforeX \u003d xElem.parent().getElementsByIndexLessThan(xElem.elementSiblingIndex());\n\n\t    for(Element p : beforeX) {\n\t        p.remove();\n\t    }\n\n\t    assertEquals(\"\u003cbody\u003e\u003cdiv\u003e\u003cp\u003eXXX\u003c/p\u003e\u003cp\u003eafter1\u003c/p\u003e\u003cp\u003eafter2\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\", TextUtil.stripNewlines(body.outerHtml()));\n\t}",
    "begin_line": 1170,
    "end_line": 1184,
    "comment": "",
    "child_ranges": [
      "(line 1171,col 3)-(line 1173,col 17)",
      "(line 1174,col 6)-(line 1174,col 47)",
      "(line 1175,col 6)-(line 1175,col 55)",
      "(line 1176,col 6)-(line 1176,col 35)",
      "(line 1177,col 6)-(line 1177,col 95)",
      "(line 1179,col 6)-(line 1181,col 6)",
      "(line 1183,col 6)-(line 1183,col 124)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testRemoveAfterIndex()",
    "snippet": "@Test\n\tpublic void testRemoveAfterIndex() {\n\t\t Document doc2 \u003d Jsoup.parse(\n\t\t            \"\u003chtml\u003e\u003cbody\u003e\u003cdiv\u003e\u003cp\u003ebefore1\u003c/p\u003e\u003cp\u003ebefore2\u003c/p\u003e\u003cp\u003eXXX\u003c/p\u003e\u003cp\u003eafter1\u003c/p\u003e\u003cp\u003eafter2\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n\t\t            \"\");\n\t    Element body \u003d doc2.select(\"body\").first();\n\t    Elements elems \u003d body.select(\"p:matchesOwn(XXX)\");\n\t    Element xElem \u003d elems.first();\n\t    Elements afterX \u003d xElem.parent().getElementsByIndexGreaterThan(xElem.elementSiblingIndex());\n\n\t    for(Element p : afterX) {\n\t        p.remove();\n\t    }\n\n\t    assertEquals(\"\u003cbody\u003e\u003cdiv\u003e\u003cp\u003ebefore1\u003c/p\u003e\u003cp\u003ebefore2\u003c/p\u003e\u003cp\u003eXXX\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\", TextUtil.stripNewlines(body.outerHtml()));\n\t}",
    "begin_line": 1187,
    "end_line": 1201,
    "comment": "",
    "child_ranges": [
      "(line 1188,col 4)-(line 1190,col 18)",
      "(line 1191,col 6)-(line 1191,col 48)",
      "(line 1192,col 6)-(line 1192,col 55)",
      "(line 1193,col 6)-(line 1193,col 35)",
      "(line 1194,col 6)-(line 1194,col 97)",
      "(line 1196,col 6)-(line 1198,col 6)",
      "(line 1200,col 6)-(line 1200,col 126)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.whiteSpaceClassElement()",
    "snippet": "@Test \n    public void whiteSpaceClassElement(){\n\t    Tag tag \u003d Tag.valueOf(\"a\");\n\t    Attributes attribs \u003d new Attributes();\n\t    Element el \u003d new Element(tag, \"\", attribs);\n\t    \n\t    attribs.put(\"class\", \"abc \");\n\t    boolean hasClass \u003d el.hasClass(\"ab\");\n\t    assertFalse(hasClass);\n\t}",
    "begin_line": 1204,
    "end_line": 1212,
    "comment": "",
    "child_ranges": [
      "(line 1205,col 6)-(line 1205,col 32)",
      "(line 1206,col 6)-(line 1206,col 43)",
      "(line 1207,col 6)-(line 1207,col 48)",
      "(line 1209,col 6)-(line 1209,col 34)",
      "(line 1210,col 6)-(line 1210,col 42)",
      "(line 1211,col 6)-(line 1211,col 27)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone()",
    "snippet": "@Test\n    public void testNextElementSiblingAfterClone() {\n        // via https://github.com/jhy/jsoup/issues/951\n        String html \u003d \"\u003c!DOCTYPE html\u003e\u003chtml lang\u003d\\\"en\\\"\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv\u003eInitial element\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\";\n        String expectedText \u003d \"New element\";\n        String cloneExpect \u003d \"New element in clone\";\n\n        Document original \u003d Jsoup.parse(html);\n        Document clone \u003d original.clone();\n\n        Element originalElement \u003d original.body().child(0);\n        originalElement.after(\"\u003cdiv\u003e\" + expectedText + \"\u003c/div\u003e\");\n        Element originalNextElementSibling \u003d originalElement.nextElementSibling();\n        Element originalNextSibling \u003d (Element) originalElement.nextSibling();\n        assertEquals(expectedText, originalNextElementSibling.text());\n        assertEquals(expectedText, originalNextSibling.text());\n\n        Element cloneElement \u003d clone.body().child(0);\n        cloneElement.after(\"\u003cdiv\u003e\" + cloneExpect + \"\u003c/div\u003e\");\n        Element cloneNextElementSibling \u003d cloneElement.nextElementSibling();\n        Element cloneNextSibling \u003d (Element) cloneElement.nextSibling();\n        assertEquals(cloneExpect, cloneNextElementSibling.text());\n        assertEquals(cloneExpect, cloneNextSibling.text());\n    }",
    "begin_line": 1215,
    "end_line": 1237,
    "comment": "",
    "child_ranges": [
      "(line 1217,col 9)-(line 1217,col 117)",
      "(line 1218,col 9)-(line 1218,col 44)",
      "(line 1219,col 9)-(line 1219,col 52)",
      "(line 1221,col 9)-(line 1221,col 46)",
      "(line 1222,col 9)-(line 1222,col 42)",
      "(line 1224,col 9)-(line 1224,col 59)",
      "(line 1225,col 9)-(line 1225,col 65)",
      "(line 1226,col 9)-(line 1226,col 82)",
      "(line 1227,col 9)-(line 1227,col 78)",
      "(line 1228,col 9)-(line 1228,col 70)",
      "(line 1229,col 9)-(line 1229,col 63)",
      "(line 1231,col 9)-(line 1231,col 53)",
      "(line 1232,col 9)-(line 1232,col 61)",
      "(line 1233,col 9)-(line 1233,col 76)",
      "(line 1234,col 9)-(line 1234,col 72)",
      "(line 1235,col 9)-(line 1235,col 66)",
      "(line 1236,col 9)-(line 1236,col 59)"
    ]
  }
]