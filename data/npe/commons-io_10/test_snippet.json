[
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail(java.io.InputStream, int)",
    "snippet": "private int checkAvail(final InputStream is, final int min) throws Exception {\n        final int available \u003d is.available();\n        assertTrue(available \u003e\u003d min, \"avail should be \u003e\u003d \" + min + \", but was \" + available);\n        return available;\n    }",
    "begin_line": 54,
    "end_line": 58,
    "comment": "",
    "child_ranges": [
      "(line 55,col 9)-(line 55,col 45)",
      "(line 56,col 9)-(line 56,col 93)",
      "(line 57,col 9)-(line 57,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.getRequiredCharsetNames()",
    "snippet": "private Set\u003cString\u003e getRequiredCharsetNames() {\n        return Charsets.requiredCharsets().keySet();\n    }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "child_ranges": [
      "(line 61,col 9)-(line 61,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.isAvailabilityTestableForCharset(java.lang.String)",
    "snippet": "private boolean isAvailabilityTestableForCharset(final String csName) {\n        return Charset.forName(csName).canEncode()\n                \u0026\u0026 !\"COMPOUND_TEXT\".equalsIgnoreCase(csName) \u0026\u0026 !\"x-COMPOUND_TEXT\".equalsIgnoreCase(csName)\n                \u0026\u0026 !isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(csName);\n    }",
    "begin_line": 64,
    "end_line": 68,
    "comment": "",
    "child_ranges": [
      "(line 65,col 9)-(line 67,col 85)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(java.lang.String)",
    "snippet": "private boolean isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(final String csName) {\n        return \"x-IBM1388\".equalsIgnoreCase(csName) ||\n                \"ISO-2022-CN\".equalsIgnoreCase(csName) ||\n                \"ISO-2022-JP\".equalsIgnoreCase(csName) ||\n                \"Shift_JIS\".equalsIgnoreCase(csName);\n    }",
    "begin_line": 70,
    "end_line": 75,
    "comment": "",
    "child_ranges": [
      "(line 71,col 9)-(line 74,col 53)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testNullCharset()",
    "snippet": "@Test\n    public void testNullCharset() throws IOException {\n        try (CharSequenceInputStream in \u003d new CharSequenceInputStream(\"A\", (Charset) null)) {\n            IOUtils.toByteArray(in);\n            assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());\n        }\n    }",
    "begin_line": 78,
    "end_line": 83,
    "comment": "",
    "child_ranges": [
      "(line 79,col 9)-(line 82,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testNullCharsetName()",
    "snippet": "@Test\n    public void testNullCharsetName() throws IOException {\n        try (CharSequenceInputStream in \u003d new CharSequenceInputStream(\"A\", (String) null)) {\n            IOUtils.toByteArray(in);\n            assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());\n        }\n    }",
    "begin_line": 86,
    "end_line": 91,
    "comment": "",
    "child_ranges": [
      "(line 87,col 9)-(line 90,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()",
    "snippet": "@Test\n    public void testAvailable() throws Exception {\n        for (final String csName : Charset.availableCharsets().keySet()) {\n            // prevent java.lang.UnsupportedOperationException at sun.nio.cs.ext.ISO2022_CN.newEncoder.\n            // also try and avoid the following Effor on Continuum\n//            java.lang.UnsupportedOperationException: null\n//            at java.nio.CharBuffer.array(CharBuffer.java:940)\n//            at sun.nio.cs.ext.COMPOUND_TEXT_Encoder.encodeLoop(COMPOUND_TEXT_Encoder.java:75)\n//            at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:544)\n//            at org.apache.commons.io.input.CharSequenceInputStream.fillBuffer(CharSequenceInputStream.java:120)\n//            at org.apache.commons.io.input.CharSequenceInputStream.read(CharSequenceInputStream.java:151)\n//            at org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(CharSequenceInputStreamTest.java:412)\n//            at org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable(CharSequenceInputStreamTest.java:424)\n\n            try {\n                if (isAvailabilityTestableForCharset(csName)) {\n                    testAvailableSkip(csName);\n                    testAvailableRead(csName);\n                }\n            } catch (final UnsupportedOperationException e){\n                fail(\"Operation not supported for \" + csName);\n            }\n        }\n    }",
    "begin_line": 94,
    "end_line": 116,
    "comment": "",
    "child_ranges": [
      "(line 95,col 9)-(line 115,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead(java.lang.String)",
    "snippet": "private void testAvailableRead(final String csName) throws Exception {\n        final String input \u003d \"test\";\n        try (InputStream r \u003d new CharSequenceInputStream(input, csName)) {\n            int available \u003d checkAvail(r, input.length());\n            assertEquals(available - 1, r.skip(available - 1)); // skip all but one\n            available \u003d checkAvail(r, 1);\n            final byte[] buff \u003d new byte[available];\n            assertEquals(available, r.read(buff, 0, available));\n        }\n    }",
    "begin_line": 118,
    "end_line": 127,
    "comment": "",
    "child_ranges": [
      "(line 119,col 9)-(line 119,col 36)",
      "(line 120,col 9)-(line 126,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip(java.lang.String)",
    "snippet": "private void testAvailableSkip(final String csName) throws Exception {\n        final String input \u003d \"test\";\n        try (InputStream r \u003d new CharSequenceInputStream(input, csName)) {\n            int available \u003d checkAvail(r, input.length());\n            assertEquals(available - 1, r.skip(available - 1)); // skip all but one\n            available \u003d checkAvail(r, 1);\n            assertEquals(1, r.skip(1));\n            available \u003d checkAvail(r, 0);\n        }\n    }",
    "begin_line": 129,
    "end_line": 138,
    "comment": "",
    "child_ranges": [
      "(line 130,col 9)-(line 130,col 36)",
      "(line 131,col 9)-(line 137,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead(java.lang.String, java.lang.String)",
    "snippet": "private void testBufferedRead(final String testString, final String charsetName) throws IOException {\n        final byte[] expected \u003d testString.getBytes(charsetName);\n        try (InputStream in \u003d new CharSequenceInputStream(testString, charsetName, 512)) {\n            final byte[] buffer \u003d new byte[128];\n            int offset \u003d 0;            while (true) {\n                int bufferOffset \u003d random.nextInt(64);\n                final int bufferLength \u003d random.nextInt(64);\n                int read \u003d in.read(buffer, bufferOffset, bufferLength);\n                if (read \u003d\u003d -1) {\n                    assertEquals(expected.length, offset, \"EOF: offset should equal length for charset \" + charsetName);\n                    break;\n                }\n                assertTrue(read \u003c\u003d bufferLength, \"Read \" + read + \" \u003c\u003d \" + bufferLength);\n                while (read \u003e 0) {\n                    assertTrue(offset \u003c expected.length,\n                            \"offset for \" + charsetName + \" \" + offset + \" \u003c \" + expected.length);\n                    assertEquals(expected[offset], buffer[bufferOffset], \"bytes should agree for \" + charsetName);\n                    offset++;\n                    bufferOffset++;\n                    read--;\n                }\n            }\n        }\n    }",
    "begin_line": 140,
    "end_line": 163,
    "comment": "",
    "child_ranges": [
      "(line 141,col 9)-(line 141,col 65)",
      "(line 142,col 9)-(line 162,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()",
    "snippet": "@Test\n    public void testBufferedRead_AvailableCharset() throws IOException {\n        for (final String csName : Charset.availableCharsets().keySet()) {\n            // prevent java.lang.UnsupportedOperationException at sun.nio.cs.ext.ISO2022_CN.newEncoder.\n            if (isAvailabilityTestableForCharset(csName)) {\n                testBufferedRead(TEST_STRING, csName);\n            }\n        }\n    }",
    "begin_line": 173,
    "end_line": 180,
    "comment": "",
    "child_ranges": [
      "(line 174,col 9)-(line 179,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()",
    "snippet": "@Test\n    public void testBufferedRead_RequiredCharset() throws IOException {\n        for (final String csName : getRequiredCharsetNames()) {\n            testBufferedRead(TEST_STRING, csName);\n        }\n    }",
    "begin_line": 183,
    "end_line": 187,
    "comment": "",
    "child_ranges": [
      "(line 184,col 9)-(line 186,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()",
    "snippet": "@Test\n    public void testBufferedRead_UTF8() throws IOException {\n        testBufferedRead(TEST_STRING, \"UTF-8\");\n    }",
    "begin_line": 190,
    "end_line": 192,
    "comment": "",
    "child_ranges": [
      "(line 191,col 9)-(line 191,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop(java.lang.String)",
    "snippet": "private void testCharsetMismatchInfiniteLoop(final String csName) throws IOException {\n        // Input is UTF-8 bytes: 0xE0 0xB2 0xA0\n        final char[] inputChars \u003d { (char) 0xE0, (char) 0xB2, (char) 0xA0 };\n        final Charset charset \u003d Charset.forName(csName); // infinite loop for US-ASCII, UTF-8 OK\n        try (InputStream stream \u003d new CharSequenceInputStream(new String(inputChars), charset, 512)) {\n            IOUtils.toCharArray(stream, charset);\n        }\n    }",
    "begin_line": 194,
    "end_line": 201,
    "comment": "",
    "child_ranges": [
      "(line 196,col 9)-(line 196,col 76)",
      "(line 197,col 9)-(line 197,col 56)",
      "(line 198,col 9)-(line 200,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()",
    "snippet": "@Test\n    public void testCharsetMismatchInfiniteLoop_RequiredCharsets() throws IOException {\n        for (final String csName : getRequiredCharsetNames()) {\n            testCharsetMismatchInfiniteLoop(csName);\n        }\n    }",
    "begin_line": 204,
    "end_line": 208,
    "comment": "",
    "child_ranges": [
      "(line 205,col 9)-(line 207,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356(int, int, int, java.lang.String)",
    "snippet": "private void testIO_356(final int bufferSize, final int dataSize, final int readFirst, final String csName) throws Exception {\n        final byte[] data1;\n        final byte[] data2;\n        try (final CharSequenceInputStream is \u003d new CharSequenceInputStream(ALPHABET, csName, bufferSize)) {\n            for (int i \u003d 0; i \u003c readFirst; i++) {\n                final int ch \u003d is.read();\n                assertNotEquals(-1, ch);\n            }\n\n            is.mark(dataSize);\n\n            data1 \u003d new byte[dataSize];\n            final int readCount1 \u003d is.read(data1);\n            assertEquals(dataSize, readCount1);\n\n            is.reset(); // should allow data to be re-read\n\n            data2 \u003d new byte[dataSize];\n            final int readCount2 \u003d is.read(data2);\n            assertEquals(dataSize, readCount2);\n        }\n\n        // data buffers should be identical\n        assertArrayEquals(data1, data2, \"bufferSize\u003d\" + bufferSize + \" dataSize\u003d\" + dataSize);\n    }",
    "begin_line": 213,
    "end_line": 237,
    "comment": "",
    "child_ranges": [
      "(line 214,col 9)-(line 214,col 27)",
      "(line 215,col 9)-(line 215,col 27)",
      "(line 216,col 9)-(line 233,col 9)",
      "(line 236,col 9)-(line 236,col 94)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16()",
    "snippet": "@Test\n    public void testIO_356_B10_D10_S0_UTF16() throws Exception {\n        testIO_356(10, 10, 0, \"UTF-16\");\n    }",
    "begin_line": 240,
    "end_line": 242,
    "comment": "",
    "child_ranges": [
      "(line 241,col 9)-(line 241,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D10_S0_UTF8() throws Exception {\n        testIO_356(10, 10, 0, \"UTF-8\");\n    }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "child_ranges": [
      "(line 246,col 9)-(line 246,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D10_S1_UTF8() throws Exception {\n        testIO_356(10, 10, 1, \"UTF-8\");\n    }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "",
    "child_ranges": [
      "(line 251,col 9)-(line 251,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D10_S2_UTF8() throws Exception {\n        testIO_356(10, 10, 2, \"UTF-8\");\n    }",
    "begin_line": 255,
    "end_line": 257,
    "comment": "",
    "child_ranges": [
      "(line 256,col 9)-(line 256,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D13_S0_UTF8() throws Exception {\n        testIO_356(10, 13, 0, \"UTF-8\");\n    }",
    "begin_line": 260,
    "end_line": 262,
    "comment": "",
    "child_ranges": [
      "(line 261,col 9)-(line 261,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D13_S1_UTF8() throws Exception {\n        testIO_356(10, 13, 1, \"UTF-8\");\n    }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "child_ranges": [
      "(line 266,col 9)-(line 266,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8()",
    "snippet": "@Test\n    public void testIO_356_B10_D20_S0_UTF8() throws Exception {\n        testIO_356(10, 20, 0, \"UTF-8\");\n    }",
    "begin_line": 270,
    "end_line": 272,
    "comment": "",
    "child_ranges": [
      "(line 271,col 9)-(line 271,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop(java.lang.String, int)",
    "snippet": "private void testIO_356_Loop(final String csName, final int maxBytesPerChar) throws Exception {\n        for (int bufferSize \u003d maxBytesPerChar; bufferSize \u003c\u003d 10; bufferSize++) {\n            for (int dataSize \u003d 1; dataSize \u003c\u003d 20; dataSize++) {\n                testIO_356(bufferSize, dataSize, 0, csName);\n            }\n        }\n    }",
    "begin_line": 274,
    "end_line": 280,
    "comment": "",
    "child_ranges": [
      "(line 275,col 9)-(line 279,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16()",
    "snippet": "@Test\n    public void testIO_356_Loop_UTF16() throws Exception {\n        final Charset charset \u003d StandardCharsets.UTF_16;\n        testIO_356_Loop(charset.displayName(), (int) ReaderInputStream.minBufferSize(charset.newEncoder()));\n    }",
    "begin_line": 283,
    "end_line": 286,
    "comment": "",
    "child_ranges": [
      "(line 284,col 9)-(line 284,col 56)",
      "(line 285,col 9)-(line 285,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8()",
    "snippet": "@Test\n    public void testIO_356_Loop_UTF8() throws Exception {\n        final Charset charset \u003d StandardCharsets.UTF_8;\n        testIO_356_Loop(charset.displayName(), (int) ReaderInputStream.minBufferSize(charset.newEncoder()));\n    }",
    "begin_line": 289,
    "end_line": 292,
    "comment": "",
    "child_ranges": [
      "(line 290,col 9)-(line 290,col 55)",
      "(line 291,col 9)-(line 291,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()",
    "snippet": "@Test\n    public void testLargeBufferedRead_RequiredCharsets() throws IOException {\n        for (final String csName : getRequiredCharsetNames()) {\n            testBufferedRead(LARGE_TEST_STRING, csName);\n        }\n    }",
    "begin_line": 295,
    "end_line": 299,
    "comment": "",
    "child_ranges": [
      "(line 296,col 9)-(line 298,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()",
    "snippet": "@Test\n    public void testLargeBufferedRead_UTF8() throws IOException {\n        testBufferedRead(LARGE_TEST_STRING, \"UTF-8\");\n    }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "child_ranges": [
      "(line 303,col 9)-(line 303,col 53)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()",
    "snippet": "@Test\n    public void testLargeSingleByteRead_RequiredCharsets() throws IOException {\n        for (final String csName : getRequiredCharsetNames()) {\n            testSingleByteRead(LARGE_TEST_STRING, csName);\n        }\n    }",
    "begin_line": 307,
    "end_line": 311,
    "comment": "",
    "child_ranges": [
      "(line 308,col 9)-(line 310,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()",
    "snippet": "@Test\n    public void testLargeSingleByteRead_UTF8() throws IOException {\n        testSingleByteRead(LARGE_TEST_STRING, \"UTF-8\");\n    }",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "child_ranges": [
      "(line 315,col 9)-(line 315,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset(java.lang.String)",
    "snippet": "private void testMarkReset(final String csName) throws Exception {\n        try (InputStream r \u003d new CharSequenceInputStream(\"test\", csName)) {\n            assertEquals(2, r.skip(2));\n            r.mark(0);\n            assertEquals(\u0027s\u0027, r.read(), csName);\n            assertEquals(\u0027t\u0027, r.read(), csName);\n            assertEquals(-1, r.read(), csName);\n            r.reset();\n            assertEquals(\u0027s\u0027, r.read(), csName);\n            assertEquals(\u0027t\u0027, r.read(), csName);\n            assertEquals(-1, r.read(), csName);\n            r.reset();\n            r.reset();\n        }\n    }",
    "begin_line": 319,
    "end_line": 333,
    "comment": "",
    "child_ranges": [
      "(line 320,col 9)-(line 332,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()",
    "snippet": "@Test\n    @Disabled testMarkReset_RequiredCharsets() throws Exception {\n        for (final String csName : getRequiredCharsetNames()) {\n            testMarkReset(csName);\n        }\n    }",
    "begin_line": 337,
    "end_line": 341,
    "comment": "",
    "child_ranges": [
      "(line 338,col 9)-(line 340,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_USASCII()",
    "snippet": "@Test\n    public void testMarkReset_USASCII() throws Exception {\n        testMarkReset(\"US-ASCII\");\n    }",
    "begin_line": 344,
    "end_line": 346,
    "comment": "",
    "child_ranges": [
      "(line 345,col 9)-(line 345,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_UTF8()",
    "snippet": "@Test\n    public void testMarkReset_UTF8() throws Exception {\n        testMarkReset(\"UTF-8\");\n    }",
    "begin_line": 349,
    "end_line": 351,
    "comment": "",
    "child_ranges": [
      "(line 350,col 9)-(line 350,col 31)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()",
    "snippet": "@Test\n    public void testMarkSupported() throws Exception {\n        try (InputStream r \u003d new CharSequenceInputStream(\"test\", \"UTF-8\")) {\n            assertTrue(r.markSupported());\n        }\n    }",
    "begin_line": 354,
    "end_line": 358,
    "comment": "",
    "child_ranges": [
      "(line 355,col 9)-(line 357,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero(java.lang.String)",
    "snippet": "private void testReadZero(final String csName) throws Exception {\n        try (InputStream r \u003d new CharSequenceInputStream(\"test\", csName)) {\n            final byte[] bytes \u003d new byte[30];\n            assertEquals(0, r.read(bytes, 0, 0));\n        }\n    }",
    "begin_line": 360,
    "end_line": 365,
    "comment": "",
    "child_ranges": [
      "(line 361,col 9)-(line 364,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()",
    "snippet": "@Test\n    public void testReadZero_EmptyString() throws Exception {\n        try (InputStream r \u003d new CharSequenceInputStream(\"\", \"UTF-8\")) {\n            final byte[] bytes \u003d new byte[30];\n            assertEquals(0, r.read(bytes, 0, 0));\n        }\n    }",
    "begin_line": 368,
    "end_line": 373,
    "comment": "",
    "child_ranges": [
      "(line 369,col 9)-(line 372,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()",
    "snippet": "@Test\n    public void testReadZero_RequiredCharsets() throws Exception {\n        for (final String csName : getRequiredCharsetNames()) {\n            testReadZero(csName);\n        }\n    }",
    "begin_line": 376,
    "end_line": 380,
    "comment": "",
    "child_ranges": [
      "(line 377,col 9)-(line 379,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead(java.lang.String, java.lang.String)",
    "snippet": "private void testSingleByteRead(final String testString, final String charsetName) throws IOException {\n        final byte[] bytes \u003d testString.getBytes(charsetName);\n        try (InputStream in \u003d new CharSequenceInputStream(testString, charsetName, 512)) {\n            for (final byte b : bytes) {\n                final int read \u003d in.read();\n                assertTrue(read \u003e\u003d 0, \"read \" + read + \" \u003e\u003d0 \");\n                assertTrue(read \u003c\u003d 255, \"read \" + read + \" \u003c\u003d 255\");\n                assertEquals(b, (byte) read, \"Should agree with input\");\n            }\n            assertEquals(-1, in.read());\n        }\n    }",
    "begin_line": 382,
    "end_line": 393,
    "comment": "",
    "child_ranges": [
      "(line 383,col 9)-(line 383,col 62)",
      "(line 384,col 9)-(line 392,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()",
    "snippet": "@Test\n    public void testSingleByteRead_RequiredCharsets() throws IOException {\n        for (final String csName : getRequiredCharsetNames()) {\n            testSingleByteRead(TEST_STRING, csName);\n        }\n    }",
    "begin_line": 396,
    "end_line": 400,
    "comment": "",
    "child_ranges": [
      "(line 397,col 9)-(line 399,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()",
    "snippet": "@Test\n    public void testSingleByteRead_UTF16() throws IOException {\n        testSingleByteRead(TEST_STRING, \"UTF-16\");\n    }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "child_ranges": [
      "(line 404,col 9)-(line 404,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()",
    "snippet": "@Test\n    public void testSingleByteRead_UTF8() throws IOException {\n        testSingleByteRead(TEST_STRING, \"UTF-8\");\n    }",
    "begin_line": 408,
    "end_line": 410,
    "comment": "",
    "child_ranges": [
      "(line 409,col 9)-(line 409,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip(java.lang.String)",
    "snippet": "private void testSkip(final String csName) throws Exception {\n        try (InputStream r \u003d new CharSequenceInputStream(\"test\", csName)) {\n            assertEquals(1, r.skip(1));\n            assertEquals(2, r.skip(2));\n            assertEquals(\u0027t\u0027, r.read(), csName);\n            r.skip(100);\n            assertEquals(-1, r.read(), csName);\n        }\n    }",
    "begin_line": 413,
    "end_line": 421,
    "comment": "",
    "child_ranges": [
      "(line 414,col 9)-(line 420,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()",
    "snippet": "@Test\n    @Disabled testSkip_RequiredCharsets() throws Exception {\n        for (final String csName : getRequiredCharsetNames()) {\n            testSkip(csName);\n        }\n    }",
    "begin_line": 425,
    "end_line": 429,
    "comment": "",
    "child_ranges": [
      "(line 426,col 9)-(line 428,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_USASCII()",
    "snippet": "@Test\n    public void testSkip_USASCII() throws Exception {\n        testSkip(\"US-ASCII\");\n    }",
    "begin_line": 432,
    "end_line": 434,
    "comment": "",
    "child_ranges": [
      "(line 433,col 9)-(line 433,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.input.CharSequenceInputStreamTest",
    "child_classes": [],
    "src_path": "org/apache/commons/io/input/CharSequenceInputStreamTest.java",
    "signature": "org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_UTF8()",
    "snippet": "@Test\n    public void testSkip_UTF8() throws Exception {\n        testSkip(\"UTF-8\");\n    }",
    "begin_line": 437,
    "end_line": 439,
    "comment": "",
    "child_ranges": [
      "(line 438,col 9)-(line 438,col 26)"
    ]
  }
]