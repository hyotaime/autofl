[
  {
    "name": "Charsets.toCharset#73",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/Charsets.java",
    "class_name": "org.apache.commons.codec.Charsets",
    "signature": "org.apache.commons.codec.Charsets.toCharset(java.nio.charset.Charset)",
    "snippet": "public static Charset toCharset(final Charset charset) {\n        return charset \u003d\u003d null ? Charset.defaultCharset() : charset;\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Returns the given Charset or the default Charset if the given Charset is null.\n * @param charset A charset or null.\n * @return the given Charset or the default Charset if the given Charset is null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Charsets.toCharset#86",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/Charsets.java",
    "class_name": "org.apache.commons.codec.Charsets",
    "signature": "org.apache.commons.codec.Charsets.toCharset(java.lang.String)",
    "snippet": "public static Charset toCharset(final String charset) {\n        return charset \u003d\u003d null ? Charset.defaultCharset() : Charset.forName(charset);\n    }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "/** \n * Returns a Charset for the named charset. If the name is null, return the default Charset.\n * @param charset The name of the requested charset, may be null.\n * @return a Charset for the named charset\n * @throws java.nio.charset.UnsupportedCharsetException If the named charset is unavailable\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.equals#71",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 \u003d\u003d cs2) {\n            return true;\n        }\n        if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\n            return false;\n        }\n        if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }",
    "begin_line": 71,
    "end_line": 82,
    "comment": "/** \n * \u003cp\u003e Compares two CharSequences, returning \u003ccode\u003etrue\u003c/code\u003e if they represent equal sequences of characters. \u003c/p\u003e \u003cp\u003e \u003ccode\u003enull\u003c/code\u003es are handled without exceptions. Two \u003ccode\u003enull\u003c/code\u003e references are considered to be equal. The comparison is case sensitive. \u003c/p\u003e \u003cpre\u003e StringUtils.equals(null, null)   \u003d true StringUtils.equals(null, \"abc\")  \u003d false StringUtils.equals(\"abc\", null)  \u003d false StringUtils.equals(\"abc\", \"abc\") \u003d true StringUtils.equals(\"abc\", \"ABC\") \u003d false \u003c/pre\u003e \u003cp\u003e Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release). \u003c/p\u003e\n * @see Object#equals(Object)\n * @param cs1 the first CharSequence, may be \u003ccode\u003enull\u003c/code\u003e\n * @param cs2 the second CharSequence, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequences are equal (case-sensitive), or both \u003ccode\u003enull\u003c/code\u003e\n * @since 1.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytes#93",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, java.nio.charset.Charset)",
    "snippet": "private static byte[] getBytes(final String string, final Charset charset) {\n        if (string \u003d\u003d null) {\n            return null;\n        }\n        return string.getBytes(charset);\n    }",
    "begin_line": 93,
    "end_line": 98,
    "comment": "/** \n * Calls  {@link String#getBytes(Charset)}\n * @param string The string to encode (if null, return null).\n * @param charset The  {@link Charset} to encode the \u003ccode\u003eString\u003c/code\u003e\n * @return the encoded bytes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getByteBuffer#110",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getByteBuffer(java.lang.String, java.nio.charset.Charset)",
    "snippet": "private static ByteBuffer getByteBuffer(final String string, final Charset charset) {\n        if (string \u003d\u003d null) {\n            return null;\n        }\n        return ByteBuffer.wrap(string.getBytes(charset));\n    }",
    "begin_line": 110,
    "end_line": 115,
    "comment": "/** \n * Calls  {@link String#getBytes(Charset)}\n * @param string The string to encode (if null, return null).\n * @param charset The  {@link Charset} to encode the \u003ccode\u003eString\u003c/code\u003e\n * @return the encoded bytes\n * @since 1.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getByteBufferUtf8#131",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)",
    "snippet": "public static ByteBuffer getByteBufferUtf8(final String string) {\n        return getByteBuffer(string, Charsets.UTF_8);\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Encodes the given string into a byte buffer using the UTF-8 charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_8} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n * @since 1.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesIso8859_1#149",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)",
    "snippet": "public static byte[] getBytesIso8859_1(final String string) {\n        return getBytes(string, Charsets.ISO_8859_1);\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUnchecked#173",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String, java.lang.String)",
    "snippet": "public static byte[] getBytesUnchecked(final String string, final String charsetName) {\n        if (string \u003d\u003d null) {\n            return null;\n        }\n        try {\n            return string.getBytes(charsetName);\n        } catch (final UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }",
    "begin_line": 173,
    "end_line": 182,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte array. \u003cp\u003e This method catches  {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which should never happen for a required charset name. Use this method when the encoding is required to be in the JRE. \u003c/p\u003e\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @param charsetName The name of a required  {@link java.nio.charset.Charset}\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws IllegalStateException Thrown when a  {@link UnsupportedEncodingException} is caught, which should never happen for arequired charset name.\n * @see CharEncoding\n * @see String#getBytes(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUsAscii#198",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)",
    "snippet": "public static byte[] getBytesUsAscii(final String string) {\n        return getBytes(string, Charsets.US_ASCII);\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#US_ASCII} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUtf16#216",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)",
    "snippet": "public static byte[] getBytesUtf16(final String string) {\n        return getBytes(string, Charsets.UTF_16);\n    }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUtf16Be#234",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)",
    "snippet": "public static byte[] getBytesUtf16Be(final String string) {\n        return getBytes(string, Charsets.UTF_16BE);\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16BE} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUtf16Le#252",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)",
    "snippet": "public static byte[] getBytesUtf16Le(final String string) {\n        return getBytes(string, Charsets.UTF_16LE);\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16LE} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getBytesUtf8#270",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)",
    "snippet": "public static byte[] getBytesUtf8(final String string) {\n        return getBytes(string, Charsets.UTF_8);\n    }",
    "begin_line": 270,
    "end_line": 272,
    "comment": "/** \n * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte array.\n * @param string the String to encode, may be \u003ccode\u003enull\u003c/code\u003e\n * @return encoded bytes, or \u003ccode\u003enull\u003c/code\u003e if the input string was \u003ccode\u003enull\u003c/code\u003e\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_8} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n * @see \u003ca href\u003d\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\"\u003eStandard charsets\u003c/a\u003e\n * @see #getBytesUnchecked(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newIllegalStateException#274",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newIllegalStateException(java.lang.String, java.io.UnsupportedEncodingException)",
    "snippet": "private static IllegalStateException newIllegalStateException(final String charsetName,\n                                                                  final UnsupportedEncodingException e) {\n        return new IllegalStateException(charsetName + \": \" + e);\n    }",
    "begin_line": 274,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newString#292",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newString(byte[], java.nio.charset.Charset)",
    "snippet": "private static String newString(final byte[] bytes, final Charset charset) {\n        return bytes \u003d\u003d null ? null : new String(bytes, charset);\n    }",
    "begin_line": 292,
    "end_line": 294,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the given charset.\n * @param bytes The bytes to be decoded into characters\n * @param charset The  {@link Charset} to encode the \u003ccode\u003eString\u003c/code\u003e\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the given charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_8} is not initialized, which should never happen since it isrequired by the Java platform specification.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newString#315",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newString(byte[], java.lang.String)",
    "snippet": "public static String newString(final byte[] bytes, final String charsetName) {\n        if (bytes \u003d\u003d null) {\n            return null;\n        }\n        try {\n            return new String(bytes, charsetName);\n        } catch (final UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }",
    "begin_line": 315,
    "end_line": 324,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the given charset. \u003cp\u003e This method catches  {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which should never happen for a required charset name. Use this method when the encoding is required to be in the JRE. \u003c/p\u003e\n * @param bytes The bytes to be decoded into characters, may be \u003ccode\u003enull\u003c/code\u003e\n * @param charsetName The name of a required  {@link java.nio.charset.Charset}\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the given charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalStateException Thrown when a  {@link UnsupportedEncodingException} is caught, which should never happen for arequired charset name.\n * @see CharEncoding\n * @see String#String(byte[],String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringIso8859_1#338",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[])",
    "snippet": "public static String newStringIso8859_1(final byte[] bytes) {\n        return new String(bytes, Charsets.ISO_8859_1);\n    }",
    "begin_line": 338,
    "end_line": 340,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the ISO-8859-1 charset.\n * @param bytes The bytes to be decoded into characters, may be \u003ccode\u003enull\u003c/code\u003e\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the ISO-8859-1 charset, or\u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringUsAscii#354",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[])",
    "snippet": "public static String newStringUsAscii(final byte[] bytes) {\n        return newString(bytes, Charsets.US_ASCII);\n    }",
    "begin_line": 354,
    "end_line": 356,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the US-ASCII charset.\n * @param bytes The bytes to be decoded into characters\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the US-ASCII charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#US_ASCII} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringUtf16#370",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[])",
    "snippet": "public static String newStringUtf16(final byte[] bytes) {\n        return newString(bytes, Charsets.UTF_16);\n    }",
    "begin_line": 370,
    "end_line": 372,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the UTF-16 charset.\n * @param bytes The bytes to be decoded into characters\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the UTF-16 charsetor \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringUtf16Be#386",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[])",
    "snippet": "public static String newStringUtf16Be(final byte[] bytes) {\n        return newString(bytes, Charsets.UTF_16BE);\n    }",
    "begin_line": 386,
    "end_line": 388,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the UTF-16BE charset.\n * @param bytes The bytes to be decoded into characters\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the UTF-16BE charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16BE} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringUtf16Le#402",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[])",
    "snippet": "public static String newStringUtf16Le(final byte[] bytes) {\n        return newString(bytes, Charsets.UTF_16LE);\n    }",
    "begin_line": 402,
    "end_line": 404,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the UTF-16LE charset.\n * @param bytes The bytes to be decoded into characters\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the UTF-16LE charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_16LE} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.newStringUtf8#418",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/binary/StringUtils.java",
    "class_name": "org.apache.commons.codec.binary.StringUtils",
    "signature": "org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])",
    "snippet": "public static String newStringUtf8(final byte[] bytes) {\n        return newString(bytes, Charsets.UTF_8);\n    }",
    "begin_line": 418,
    "end_line": 420,
    "comment": "/** \n * Constructs a new \u003ccode\u003eString\u003c/code\u003e by decoding the specified array of bytes using the UTF-8 charset.\n * @param bytes The bytes to be decoded into characters\n * @return A new \u003ccode\u003eString\u003c/code\u003e decoded from the specified array of bytes using the UTF-8 charset,or \u003ccode\u003enull\u003c/code\u003e if the input byte array was \u003ccode\u003enull\u003c/code\u003e.\n * @throws NullPointerException Thrown if  {@link Charsets#UTF_8} is not initialized, which should never happen since it isrequired by the Java platform specification.\n * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]