[
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.setUp()",
    "snippet": "@BeforeEach\n    public void setUp() throws Exception {\n        testFile1 \u003d new File(temporaryFolder, \"file1-test.txt\");\n        testFile2 \u003d new File(temporaryFolder, \"file1a-test.txt\");\n\n        testFile1Size \u003d (int) testFile1.length();\n        testFile2Size \u003d (int) testFile2.length();\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        try (final BufferedOutputStream output3 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1))) {\n            TestUtils.generateTestData(output3, testFile1Size);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        try (final BufferedOutputStream output2 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2))) {\n            TestUtils.generateTestData(output2, testFile2Size);\n        }\n        FileUtils.deleteDirectory(temporaryFolder);\n        temporaryFolder.mkdirs();\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        try (final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1))) {\n            TestUtils.generateTestData(output1, testFile1Size);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        try (final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2))) {\n            TestUtils.generateTestData(output, testFile2Size);\n        }\n    }",
    "begin_line": 106,
    "end_line": 146,
    "comment": "",
    "child_ranges": [
      "(line 107,col 9)-(line 107,col 64)",
      "(line 108,col 9)-(line 108,col 65)",
      "(line 110,col 9)-(line 110,col 49)",
      "(line 111,col 9)-(line 111,col 49)",
      "(line 112,col 9)-(line 115,col 9)",
      "(line 116,col 9)-(line 119,col 9)",
      "(line 120,col 9)-(line 123,col 9)",
      "(line 124,col 9)-(line 127,col 9)",
      "(line 128,col 9)-(line 128,col 51)",
      "(line 129,col 9)-(line 129,col 33)",
      "(line 130,col 9)-(line 133,col 9)",
      "(line 134,col 9)-(line 137,col 9)",
      "(line 138,col 9)-(line 141,col 9)",
      "(line 142,col 9)-(line 145,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.getName()",
    "snippet": "private String getName() {\n        return this.getClass().getSimpleName();\n    }",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "child_ranges": [
      "(line 149,col 9)-(line 149,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetFile()",
    "snippet": "@Test\n    public void testGetFile() {\n        final File expected_A \u003d new File(\"src\");\n        final File expected_B \u003d new File(expected_A, \"main\");\n        final File expected_C \u003d new File(expected_B, \"java\");\n        assertEquals(expected_A, FileUtils.getFile(\"src\"), \"A\");\n        assertEquals(expected_B, FileUtils.getFile(\"src\", \"main\"), \"B\");\n        assertEquals(expected_C, FileUtils.getFile(\"src\", \"main\", \"java\"), \"C\");\n        try {\n            FileUtils.getFile((String[]) null);\n            fail(\"Expected NullPointerException\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n    }",
    "begin_line": 154,
    "end_line": 167,
    "comment": "",
    "child_ranges": [
      "(line 155,col 9)-(line 155,col 48)",
      "(line 156,col 9)-(line 156,col 61)",
      "(line 157,col 9)-(line 157,col 61)",
      "(line 158,col 9)-(line 158,col 64)",
      "(line 159,col 9)-(line 159,col 72)",
      "(line 160,col 9)-(line 160,col 80)",
      "(line 161,col 9)-(line 166,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent()",
    "snippet": "@Test\n    public void testGetFile_Parent() {\n        final File parent \u003d new File(\"parent\");\n        final File expected_A \u003d new File(parent, \"src\");\n        final File expected_B \u003d new File(expected_A, \"main\");\n        final File expected_C \u003d new File(expected_B, \"java\");\n        assertEquals(expected_A, FileUtils.getFile(parent, \"src\"), \"A\");\n        assertEquals(expected_B, FileUtils.getFile(parent, \"src\", \"main\"), \"B\");\n        assertEquals(expected_C, FileUtils.getFile(parent, \"src\", \"main\", \"java\"), \"C\");\n        try {\n            FileUtils.getFile(parent, (String[]) null);\n            fail(\"Expected NullPointerException\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.getFile((File) null, \"src\");\n            fail(\"Expected NullPointerException\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n    }",
    "begin_line": 170,
    "end_line": 190,
    "comment": "",
    "child_ranges": [
      "(line 171,col 9)-(line 171,col 47)",
      "(line 172,col 9)-(line 172,col 56)",
      "(line 173,col 9)-(line 173,col 61)",
      "(line 174,col 9)-(line 174,col 61)",
      "(line 175,col 9)-(line 175,col 72)",
      "(line 176,col 9)-(line 176,col 80)",
      "(line 177,col 9)-(line 177,col 88)",
      "(line 178,col 9)-(line 183,col 9)",
      "(line 184,col 9)-(line 189,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath()",
    "snippet": "@Test\n    public void testGetTempDirectoryPath() {\n        assertEquals(System.getProperty(\"java.io.tmpdir\"),\n                FileUtils.getTempDirectoryPath());\n    }",
    "begin_line": 193,
    "end_line": 196,
    "comment": "",
    "child_ranges": [
      "(line 194,col 9)-(line 195,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory()",
    "snippet": "@Test\n    public void testGetTempDirectory() {\n        final File tempDirectory \u003d new File(System.getProperty(\"java.io.tmpdir\"));\n        assertEquals(tempDirectory, FileUtils.getTempDirectory());\n    }",
    "begin_line": 199,
    "end_line": 202,
    "comment": "",
    "child_ranges": [
      "(line 200,col 9)-(line 200,col 82)",
      "(line 201,col 9)-(line 201,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath()",
    "snippet": "@Test\n    public void testGetUserDirectoryPath() {\n        assertEquals(System.getProperty(\"user.home\"),\n                FileUtils.getUserDirectoryPath());\n    }",
    "begin_line": 205,
    "end_line": 208,
    "comment": "",
    "child_ranges": [
      "(line 206,col 9)-(line 207,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory()",
    "snippet": "@Test\n    public void testGetUserDirectory() {\n        final File userDirectory \u003d new File(System.getProperty(\"user.home\"));\n        assertEquals(userDirectory, FileUtils.getUserDirectory());\n    }",
    "begin_line": 211,
    "end_line": 214,
    "comment": "",
    "child_ranges": [
      "(line 212,col 9)-(line 212,col 77)",
      "(line 213,col 9)-(line 213,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()",
    "snippet": "@Test\n    public void test_openInputStream_exists() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"test.txt\");\n        TestUtils.createLineBasedFile(file, new String[]{\"Hello\"});\n        try (FileInputStream in \u003d FileUtils.openInputStream(file)) {\n            assertEquals(\u0027H\u0027, in.read());\n        }\n    }",
    "begin_line": 218,
    "end_line": 224,
    "comment": "",
    "child_ranges": [
      "(line 219,col 9)-(line 219,col 64)",
      "(line 220,col 9)-(line 220,col 67)",
      "(line 221,col 9)-(line 223,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()",
    "snippet": "@Test\n    public void test_openInputStream_existsButIsDirectory() throws Exception {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        directory.mkdirs();\n        try (FileInputStream in \u003d FileUtils.openInputStream(directory)) {\n            fail();\n        } catch (final IOException ioe) {\n            // expected\n        }\n    }",
    "begin_line": 227,
    "end_line": 235,
    "comment": "",
    "child_ranges": [
      "(line 228,col 9)-(line 228,col 67)",
      "(line 229,col 9)-(line 229,col 27)",
      "(line 230,col 9)-(line 234,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()",
    "snippet": "@Test\n    public void test_openInputStream_notExists() throws Exception {\n        final File directory \u003d new File(temporaryFolder, \"test.txt\");\n        try (FileInputStream in \u003d FileUtils.openInputStream(directory)) {\n            fail();\n        } catch (final IOException ioe) {\n            // expected\n        }\n    }",
    "begin_line": 238,
    "end_line": 245,
    "comment": "",
    "child_ranges": [
      "(line 239,col 9)-(line 239,col 69)",
      "(line 240,col 9)-(line 244,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)",
    "snippet": "void openOutputStream_noParent(final boolean createFile) throws Exception {\n        final File file \u003d new File(\"test.txt\");\n        assertNull(file.getParentFile());\n        try {\n            if (createFile) {\n                TestUtils.createLineBasedFile(file, new String[]{\"Hello\"});\n            }\n            try (FileOutputStream out \u003d FileUtils.openOutputStream(file)) {\n                out.write(0);\n            }\n            assertTrue(file.exists());\n        } finally {\n            if (!file.delete()) {\n                file.deleteOnExit();\n            }\n        }\n    }",
    "begin_line": 248,
    "end_line": 264,
    "comment": "",
    "child_ranges": [
      "(line 249,col 9)-(line 249,col 47)",
      "(line 250,col 9)-(line 250,col 41)",
      "(line 251,col 9)-(line 263,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile()",
    "snippet": "@Test\n    public void test_openOutputStream_noParentCreateFile() throws Exception {\n        openOutputStream_noParent(true);\n    }",
    "begin_line": 267,
    "end_line": 269,
    "comment": "",
    "child_ranges": [
      "(line 268,col 9)-(line 268,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile()",
    "snippet": "@Test\n    public void test_openOutputStream_noParentNoFile() throws Exception {\n        openOutputStream_noParent(false);\n    }",
    "begin_line": 272,
    "end_line": 274,
    "comment": "",
    "child_ranges": [
      "(line 273,col 9)-(line 273,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()",
    "snippet": "@Test\n    public void test_openOutputStream_exists() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"test.txt\");\n        TestUtils.createLineBasedFile(file, new String[]{\"Hello\"});\n        try (FileOutputStream out \u003d FileUtils.openOutputStream(file)) {\n            out.write(0);\n        }\n        assertTrue(file.exists());\n    }",
    "begin_line": 277,
    "end_line": 284,
    "comment": "",
    "child_ranges": [
      "(line 278,col 9)-(line 278,col 64)",
      "(line 279,col 9)-(line 279,col 67)",
      "(line 280,col 9)-(line 282,col 9)",
      "(line 283,col 9)-(line 283,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()",
    "snippet": "@Test\n    public void test_openOutputStream_existsButIsDirectory() throws Exception {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        directory.mkdirs();\n        try (FileOutputStream out \u003d FileUtils.openOutputStream(directory)) {\n            fail();\n        } catch (final IOException ioe) {\n            // expected\n        }\n    }",
    "begin_line": 287,
    "end_line": 295,
    "comment": "",
    "child_ranges": [
      "(line 288,col 9)-(line 288,col 67)",
      "(line 289,col 9)-(line 289,col 27)",
      "(line 290,col 9)-(line 294,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()",
    "snippet": "@Test\n    public void test_openOutputStream_notExists() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"a/test.txt\");\n        try (FileOutputStream out \u003d FileUtils.openOutputStream(file)) {\n            out.write(0);\n        }\n        assertTrue(file.exists());\n    }",
    "begin_line": 298,
    "end_line": 304,
    "comment": "",
    "child_ranges": [
      "(line 299,col 9)-(line 299,col 66)",
      "(line 300,col 9)-(line 302,col 9)",
      "(line 303,col 9)-(line 303,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()",
    "snippet": "@Test\n    public void test_openOutputStream_notExistsCannotCreate() throws Exception {\n        // according to Wikipedia, most filing systems have a 256 limit on filename\n        final String longStr \u003d\n                \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\" +\n                        \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\" +\n                        \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\" +\n                        \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\" +\n                        \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\" +\n                        \"abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz\";  // 300 chars\n        final File file \u003d new File(temporaryFolder, \"a/\" + longStr + \"/test.txt\");\n        try (FileOutputStream out \u003d FileUtils.openOutputStream(file)) {\n            fail();\n        } catch (final IOException ioe) {\n            // expected\n        }\n    }",
    "begin_line": 307,
    "end_line": 322,
    "comment": "",
    "child_ranges": [
      "(line 309,col 9)-(line 315,col 77)",
      "(line 316,col 9)-(line 316,col 82)",
      "(line 317,col 9)-(line 321,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()",
    "snippet": "@Test\n    public void testByteCountToDisplaySizeBigInteger() {\n        final BigInteger b1023 \u003d BigInteger.valueOf(1023);\n        final BigInteger b1025 \u003d BigInteger.valueOf(1025);\n        final BigInteger KB1 \u003d BigInteger.valueOf(1024);\n        final BigInteger MB1 \u003d KB1.multiply(KB1);\n        final BigInteger GB1 \u003d MB1.multiply(KB1);\n        final BigInteger GB2 \u003d GB1.add(GB1);\n        final BigInteger TB1 \u003d GB1.multiply(KB1);\n        final BigInteger PB1 \u003d TB1.multiply(KB1);\n        final BigInteger EB1 \u003d PB1.multiply(KB1);\n        assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.ZERO), \"0 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.ONE), \"1 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(b1023), \"1023 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(KB1), \"1 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(b1025), \"1 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(MB1.subtract(BigInteger.ONE)), \"1023 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(MB1), \"1 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(MB1.add(BigInteger.ONE)), \"1 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(GB1.subtract(BigInteger.ONE)), \"1023 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(GB1), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(GB1.add(BigInteger.ONE)), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(GB2), \"2 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(GB2.subtract(BigInteger.ONE)), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(TB1), \"1 TB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(PB1), \"1 PB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(EB1), \"1 EB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(Long.MAX_VALUE), \"7 EB\");\n        // Other MAX_VALUEs\n        assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Character.MAX_VALUE)), \"63 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Short.MAX_VALUE)), \"31 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Integer.MAX_VALUE)), \"1 GB\");\n    }",
    "begin_line": 327,
    "end_line": 358,
    "comment": "",
    "child_ranges": [
      "(line 328,col 9)-(line 328,col 58)",
      "(line 329,col 9)-(line 329,col 58)",
      "(line 330,col 9)-(line 330,col 56)",
      "(line 331,col 9)-(line 331,col 49)",
      "(line 332,col 9)-(line 332,col 49)",
      "(line 333,col 9)-(line 333,col 44)",
      "(line 334,col 9)-(line 334,col 49)",
      "(line 335,col 9)-(line 335,col 49)",
      "(line 336,col 9)-(line 336,col 49)",
      "(line 337,col 9)-(line 337,col 83)",
      "(line 338,col 9)-(line 338,col 82)",
      "(line 339,col 9)-(line 339,col 76)",
      "(line 340,col 9)-(line 340,col 68)",
      "(line 341,col 9)-(line 341,col 70)",
      "(line 342,col 9)-(line 342,col 96)",
      "(line 343,col 9)-(line 343,col 68)",
      "(line 344,col 9)-(line 344,col 88)",
      "(line 345,col 9)-(line 345,col 96)",
      "(line 346,col 9)-(line 346,col 68)",
      "(line 347,col 9)-(line 347,col 88)",
      "(line 348,col 9)-(line 348,col 68)",
      "(line 349,col 9)-(line 349,col 93)",
      "(line 350,col 9)-(line 350,col 68)",
      "(line 351,col 9)-(line 351,col 68)",
      "(line 352,col 9)-(line 352,col 68)",
      "(line 353,col 9)-(line 353,col 79)",
      "(line 355,col 9)-(line 355,col 105)",
      "(line 356,col 9)-(line 356,col 101)",
      "(line 357,col 9)-(line 357,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()",
    "snippet": "@SuppressWarnings(\"NumericOverflow\")\n    @Test\n    public void testByteCountToDisplaySizeLong() {\n        assertEquals(FileUtils.byteCountToDisplaySize(0), \"0 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1), \"1 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1023), \"1023 bytes\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024), \"1 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1025), \"1 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1023), \"1023 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024), \"1 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1025), \"1 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1023), \"1023 MB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1025), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 2), \"2 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024 * 2 - 1), \"1 GB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024), \"1 TB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024), \"1 PB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024 * 1024), \"1 EB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(Long.MAX_VALUE), \"7 EB\");\n        // Other MAX_VALUEs\n        assertEquals(FileUtils.byteCountToDisplaySize(Character.MAX_VALUE), \"63 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(Short.MAX_VALUE), \"31 KB\");\n        assertEquals(FileUtils.byteCountToDisplaySize(Integer.MAX_VALUE), \"1 GB\");\n    }",
    "begin_line": 362,
    "end_line": 384,
    "comment": "",
    "child_ranges": [
      "(line 363,col 9)-(line 363,col 69)",
      "(line 364,col 9)-(line 364,col 69)",
      "(line 365,col 9)-(line 365,col 75)",
      "(line 366,col 9)-(line 366,col 69)",
      "(line 367,col 9)-(line 367,col 69)",
      "(line 368,col 9)-(line 368,col 79)",
      "(line 369,col 9)-(line 369,col 76)",
      "(line 370,col 9)-(line 370,col 76)",
      "(line 371,col 9)-(line 371,col 86)",
      "(line 372,col 9)-(line 372,col 83)",
      "(line 373,col 9)-(line 373,col 83)",
      "(line 374,col 9)-(line 374,col 88)",
      "(line 375,col 9)-(line 375,col 91)",
      "(line 376,col 9)-(line 376,col 91)",
      "(line 377,col 9)-(line 377,col 98)",
      "(line 378,col 9)-(line 378,col 105)",
      "(line 379,col 9)-(line 379,col 79)",
      "(line 381,col 9)-(line 381,col 85)",
      "(line 382,col 9)-(line 382,col 81)",
      "(line 383,col 9)-(line 383,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFile1()",
    "snippet": "@Test\n    public void testToFile1() throws Exception {\n        final URL url \u003d new URL(\"file\", null, \"a/b/c/file.txt\");\n        final File file \u003d FileUtils.toFile(url);\n        assertTrue(file.toString().contains(\"file.txt\"));\n    }",
    "begin_line": 388,
    "end_line": 392,
    "comment": "",
    "child_ranges": [
      "(line 389,col 9)-(line 389,col 64)",
      "(line 390,col 9)-(line 390,col 48)",
      "(line 391,col 9)-(line 391,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFile2()",
    "snippet": "@Test\n    public void testToFile2() throws Exception {\n        final URL url \u003d new URL(\"file\", null, \"a/b/c/file%20n%61me%2520.tx%74\");\n        final File file \u003d FileUtils.toFile(url);\n        assertTrue(file.toString().contains(\"file name%20.txt\"));\n    }",
    "begin_line": 395,
    "end_line": 399,
    "comment": "",
    "child_ranges": [
      "(line 396,col 9)-(line 396,col 80)",
      "(line 397,col 9)-(line 397,col 48)",
      "(line 398,col 9)-(line 398,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFile3()",
    "snippet": "@Test\n    public void testToFile3() throws Exception {\n        assertEquals(null, FileUtils.toFile(null));\n        assertEquals(null, FileUtils.toFile(new URL(\"http://jakarta.apache.org\")));\n    }",
    "begin_line": 402,
    "end_line": 405,
    "comment": "",
    "child_ranges": [
      "(line 403,col 9)-(line 403,col 51)",
      "(line 404,col 9)-(line 404,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFile4()",
    "snippet": "@Test\n    public void testToFile4() throws Exception {\n        final URL url \u003d new URL(\"file\", null, \"a/b/c/file%%20%me.txt%\");\n        final File file \u003d FileUtils.toFile(url);\n        assertTrue(file.toString().contains(\"file% %me.txt%\"));\n    }",
    "begin_line": 408,
    "end_line": 412,
    "comment": "",
    "child_ranges": [
      "(line 409,col 9)-(line 409,col 72)",
      "(line 410,col 9)-(line 410,col 48)",
      "(line 411,col 9)-(line 411,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFile5()",
    "snippet": "@Test\n    public void testToFile5() throws Exception {\n        final URL url \u003d new URL(\"file\", null, \"both%20are%20100%20%25%20true\");\n        final File file \u003d FileUtils.toFile(url);\n        assertEquals(\"both are 100 % true\", file.toString());\n    }",
    "begin_line": 416,
    "end_line": 420,
    "comment": "",
    "child_ranges": [
      "(line 417,col 9)-(line 417,col 79)",
      "(line 418,col 9)-(line 418,col 48)",
      "(line 419,col 9)-(line 419,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()",
    "snippet": "@Test\n    public void testToFileUtf8() throws Exception {\n        final URL url \u003d new URL(\"file\", null, \"/home/%C3%A4%C3%B6%C3%BC%C3%9F\");\n        final File file \u003d FileUtils.toFile(url);\n        assertTrue(file.toString().contains(\"\\u00E4\\u00F6\\u00FC\\u00DF\"));\n    }",
    "begin_line": 423,
    "end_line": 427,
    "comment": "",
    "child_ranges": [
      "(line 424,col 9)-(line 424,col 80)",
      "(line 425,col 9)-(line 425,col 48)",
      "(line 426,col 9)-(line 426,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()",
    "snippet": "@Test\n    public void testDecodeUrl() {\n        assertEquals(\"\", FileUtils.decodeUrl(\"\"));\n        assertEquals(\"foo\", FileUtils.decodeUrl(\"foo\"));\n        assertEquals(\"+\", FileUtils.decodeUrl(\"+\"));\n        assertEquals(\"% \", FileUtils.decodeUrl(\"%25%20\"));\n        assertEquals(\"%20\", FileUtils.decodeUrl(\"%2520\"));\n        assertEquals(\"jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class\", FileUtils\n                .decodeUrl(\"jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class\"));\n    }",
    "begin_line": 430,
    "end_line": 438,
    "comment": "",
    "child_ranges": [
      "(line 431,col 9)-(line 431,col 50)",
      "(line 432,col 9)-(line 432,col 56)",
      "(line 433,col 9)-(line 433,col 52)",
      "(line 434,col 9)-(line 434,col 58)",
      "(line 435,col 9)-(line 435,col 58)",
      "(line 436,col 9)-(line 437,col 89)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()",
    "snippet": "@Test\n    public void testDecodeUrlLenient() {\n        assertEquals(\" \", FileUtils.decodeUrl(\" \"));\n        assertEquals(\"\\u00E4\\u00F6\\u00FC\\u00DF\", FileUtils.decodeUrl(\"\\u00E4\\u00F6\\u00FC\\u00DF\"));\n        assertEquals(\"%\", FileUtils.decodeUrl(\"%\"));\n        assertEquals(\"% \", FileUtils.decodeUrl(\"%%20\"));\n        assertEquals(\"%2\", FileUtils.decodeUrl(\"%2\"));\n        assertEquals(\"%2G\", FileUtils.decodeUrl(\"%2G\"));\n    }",
    "begin_line": 441,
    "end_line": 448,
    "comment": "",
    "child_ranges": [
      "(line 442,col 9)-(line 442,col 52)",
      "(line 443,col 9)-(line 443,col 98)",
      "(line 444,col 9)-(line 444,col 52)",
      "(line 445,col 9)-(line 445,col 56)",
      "(line 446,col 9)-(line 446,col 54)",
      "(line 447,col 9)-(line 447,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()",
    "snippet": "@Test\n    public void testDecodeUrlNullSafe() {\n        assertNull(FileUtils.decodeUrl(null));\n    }",
    "begin_line": 451,
    "end_line": 453,
    "comment": "",
    "child_ranges": [
      "(line 452,col 9)-(line 452,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()",
    "snippet": "@Test\n    public void testDecodeUrlEncodingUtf8() {\n        assertEquals(\"\\u00E4\\u00F6\\u00FC\\u00DF\", FileUtils.decodeUrl(\"%C3%A4%C3%B6%C3%BC%C3%9F\"));\n    }",
    "begin_line": 456,
    "end_line": 458,
    "comment": "",
    "child_ranges": [
      "(line 457,col 9)-(line 457,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()",
    "snippet": "@Test\n    public void testToFiles1() throws Exception {\n        final URL[] urls \u003d new URL[]{\n                new URL(\"file\", null, \"file1.txt\"),\n                new URL(\"file\", null, \"file2.txt\"),\n        };\n        final File[] files \u003d FileUtils.toFiles(urls);\n\n        assertEquals(urls.length, files.length);\n        assertEquals(true, files[0].toString().contains(\"file1.txt\"), \"File: \" + files[0]);\n        assertEquals(true, files[1].toString().contains(\"file2.txt\"), \"File: \" + files[1]);\n    }",
    "begin_line": 463,
    "end_line": 473,
    "comment": "",
    "child_ranges": [
      "(line 464,col 9)-(line 467,col 10)",
      "(line 468,col 9)-(line 468,col 53)",
      "(line 470,col 9)-(line 470,col 48)",
      "(line 471,col 9)-(line 471,col 91)",
      "(line 472,col 9)-(line 472,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()",
    "snippet": "@Test\n    public void testToFiles2() throws Exception {\n        final URL[] urls \u003d new URL[]{\n                new URL(\"file\", null, \"file1.txt\"),\n                null,\n        };\n        final File[] files \u003d FileUtils.toFiles(urls);\n\n        assertEquals(urls.length, files.length);\n        assertEquals(true, files[0].toString().contains(\"file1.txt\"), \"File: \" + files[0]);\n        assertEquals(null, files[1], \"File: \" + files[1]);\n    }",
    "begin_line": 476,
    "end_line": 486,
    "comment": "",
    "child_ranges": [
      "(line 477,col 9)-(line 480,col 10)",
      "(line 481,col 9)-(line 481,col 53)",
      "(line 483,col 9)-(line 483,col 48)",
      "(line 484,col 9)-(line 484,col 91)",
      "(line 485,col 9)-(line 485,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()",
    "snippet": "@Test\n    public void testToFiles3() throws Exception {\n        final URL[] urls \u003d null;\n        final File[] files \u003d FileUtils.toFiles(urls);\n\n        assertEquals(0, files.length);\n    }",
    "begin_line": 489,
    "end_line": 494,
    "comment": "",
    "child_ranges": [
      "(line 490,col 9)-(line 490,col 32)",
      "(line 491,col 9)-(line 491,col 53)",
      "(line 493,col 9)-(line 493,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFiles3a()",
    "snippet": "@Test\n    public void testToFiles3a() throws Exception {\n        final URL[] urls \u003d new URL[0]; // empty array\n        final File[] files \u003d FileUtils.toFiles(urls);\n\n        assertEquals(0, files.length);\n    }",
    "begin_line": 497,
    "end_line": 502,
    "comment": "",
    "child_ranges": [
      "(line 498,col 9)-(line 498,col 38)",
      "(line 499,col 9)-(line 499,col 53)",
      "(line 501,col 9)-(line 501,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()",
    "snippet": "@Test\n    public void testToFiles4() throws Exception {\n        final URL[] urls \u003d new URL[]{\n                new URL(\"file\", null, \"file1.txt\"),\n                new URL(\"http\", \"jakarta.apache.org\", \"file1.txt\"),\n        };\n        try {\n            FileUtils.toFiles(urls);\n            fail();\n        } catch (final IllegalArgumentException ignore) {\n        }\n    }",
    "begin_line": 505,
    "end_line": 515,
    "comment": "",
    "child_ranges": [
      "(line 506,col 9)-(line 509,col 10)",
      "(line 510,col 9)-(line 514,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()",
    "snippet": "@Test\n    public void testToURLs1() throws Exception {\n        final File[] files \u003d new File[]{\n                new File(temporaryFolder, \"file1.txt\"),\n                new File(temporaryFolder, \"file2.txt\"),\n                new File(temporaryFolder, \"test file.txt\"),\n        };\n        final URL[] urls \u003d FileUtils.toURLs(files);\n\n        assertEquals(files.length, urls.length);\n        assertTrue(urls[0].toExternalForm().startsWith(\"file:\"));\n        assertTrue(urls[0].toExternalForm().contains(\"file1.txt\"));\n        assertTrue(urls[1].toExternalForm().startsWith(\"file:\"));\n        assertTrue(urls[1].toExternalForm().contains(\"file2.txt\"));\n\n        // Test escaped char\n        assertTrue(urls[2].toExternalForm().startsWith(\"file:\"));\n        assertTrue(urls[2].toExternalForm().contains(\"test%20file.txt\"));\n    }",
    "begin_line": 520,
    "end_line": 537,
    "comment": "",
    "child_ranges": [
      "(line 521,col 9)-(line 525,col 10)",
      "(line 526,col 9)-(line 526,col 51)",
      "(line 528,col 9)-(line 528,col 48)",
      "(line 529,col 9)-(line 529,col 65)",
      "(line 530,col 9)-(line 530,col 67)",
      "(line 531,col 9)-(line 531,col 65)",
      "(line 532,col 9)-(line 532,col 67)",
      "(line 535,col 9)-(line 535,col 65)",
      "(line 536,col 9)-(line 536,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testToURLs3a()",
    "snippet": "@Test\n    public void testToURLs3a() throws Exception {\n        final File[] files \u003d new File[0]; // empty array\n        final URL[] urls \u003d FileUtils.toURLs(files);\n\n        assertEquals(0, urls.length);\n    }",
    "begin_line": 560,
    "end_line": 565,
    "comment": "",
    "child_ranges": [
      "(line 561,col 9)-(line 561,col 41)",
      "(line 562,col 9)-(line 562,col 51)",
      "(line 564,col 9)-(line 564,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()",
    "snippet": "@Test\n    public void testContentEquals() throws Exception {\n        // Non-existent files\n        final File file \u003d new File(temporaryFolder, getName());\n        final File file2 \u003d new File(temporaryFolder, getName() + \"2\");\n        assertTrue(FileUtils.contentEquals(null, null));\n        assertFalse(FileUtils.contentEquals(null, file));\n        assertFalse(FileUtils.contentEquals(file, null));\n        // both don\u0027t  exist\n        assertTrue(FileUtils.contentEquals(file, file));\n        assertTrue(FileUtils.contentEquals(file, file2));\n        assertTrue(FileUtils.contentEquals(file2, file2));\n        assertTrue(FileUtils.contentEquals(file2, file));\n\n        // Directories\n        try {\n            FileUtils.contentEquals(temporaryFolder, temporaryFolder);\n            fail(\"Comparing directories should fail with an IOException\");\n        } catch (final IOException ioe) {\n            //expected\n        }\n\n        // Different files\n        final File objFile1 \u003d\n                new File(temporaryFolder, getName() + \".object\");\n        objFile1.deleteOnExit();\n        FileUtils.copyURLToFile(\n                getClass().getResource(\"/java/lang/Object.class\"),\n                objFile1);\n\n        final File objFile1b \u003d\n                new File(temporaryFolder, getName() + \".object2\");\n        objFile1.deleteOnExit();\n        FileUtils.copyURLToFile(\n                getClass().getResource(\"/java/lang/Object.class\"),\n                objFile1b);\n\n        final File objFile2 \u003d\n                new File(temporaryFolder, getName() + \".collection\");\n        objFile2.deleteOnExit();\n        FileUtils.copyURLToFile(\n                getClass().getResource(\"/java/util/Collection.class\"),\n                objFile2);\n\n        assertFalse(FileUtils.contentEquals(objFile1, objFile2));\n        assertFalse(FileUtils.contentEquals(objFile1b, objFile2));\n        assertTrue(FileUtils.contentEquals(objFile1, objFile1b));\n\n        assertTrue(FileUtils.contentEquals(objFile1, objFile1));\n        assertTrue(FileUtils.contentEquals(objFile1b, objFile1b));\n        assertTrue(FileUtils.contentEquals(objFile2, objFile2));\n\n        // Equal files\n        file.createNewFile();\n        file2.createNewFile();\n        assertTrue(FileUtils.contentEquals(file, file));\n        assertTrue(FileUtils.contentEquals(file, file2));\n    }",
    "begin_line": 570,
    "end_line": 626,
    "comment": "",
    "child_ranges": [
      "(line 572,col 9)-(line 572,col 63)",
      "(line 573,col 9)-(line 573,col 70)",
      "(line 574,col 9)-(line 574,col 56)",
      "(line 575,col 9)-(line 575,col 57)",
      "(line 576,col 9)-(line 576,col 57)",
      "(line 578,col 9)-(line 578,col 56)",
      "(line 579,col 9)-(line 579,col 57)",
      "(line 580,col 9)-(line 580,col 58)",
      "(line 581,col 9)-(line 581,col 57)",
      "(line 584,col 9)-(line 589,col 9)",
      "(line 592,col 9)-(line 593,col 65)",
      "(line 594,col 9)-(line 594,col 32)",
      "(line 595,col 9)-(line 597,col 26)",
      "(line 599,col 9)-(line 600,col 66)",
      "(line 601,col 9)-(line 601,col 32)",
      "(line 602,col 9)-(line 604,col 27)",
      "(line 606,col 9)-(line 607,col 69)",
      "(line 608,col 9)-(line 608,col 32)",
      "(line 609,col 9)-(line 611,col 26)",
      "(line 613,col 9)-(line 613,col 65)",
      "(line 614,col 9)-(line 614,col 66)",
      "(line 615,col 9)-(line 615,col 65)",
      "(line 617,col 9)-(line 617,col 64)",
      "(line 618,col 9)-(line 618,col 66)",
      "(line 619,col 9)-(line 619,col 64)",
      "(line 622,col 9)-(line 622,col 29)",
      "(line 623,col 9)-(line 623,col 30)",
      "(line 624,col 9)-(line 624,col 56)",
      "(line 625,col 9)-(line 625,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()",
    "snippet": "@Test\n    public void testContentEqualsIgnoreEOL() throws Exception {\n        // Non-existent files\n        final File file1 \u003d new File(temporaryFolder, getName());\n        final File file2 \u003d new File(temporaryFolder, getName() + \"2\");\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(null, null, null));\n        assertFalse(FileUtils.contentEqualsIgnoreEOL(null, file1, null));\n        assertFalse(FileUtils.contentEqualsIgnoreEOL(file1, null, null));\n        // both don\u0027t  exist\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null));\n\n        // Directories\n        try {\n            FileUtils.contentEqualsIgnoreEOL(temporaryFolder, temporaryFolder, null);\n            fail(\"Comparing directories should fail with an IOException\");\n        } catch (final IOException ioe) {\n            //expected\n        }\n\n        // Different files\n        final File tfile1 \u003d new File(temporaryFolder, getName() + \".txt1\");\n        tfile1.deleteOnExit();\n        FileUtils.write(tfile1, \"123\\r\");\n\n        final File tfile2 \u003d new File(temporaryFolder, getName() + \".txt2\");\n        tfile1.deleteOnExit();\n        FileUtils.write(tfile2, \"123\\n\");\n\n        final File tfile3 \u003d new File(temporaryFolder, getName() + \".collection\");\n        tfile3.deleteOnExit();\n        FileUtils.write(tfile3, \"123\\r\\n2\");\n\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));\n\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));\n        assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));\n        assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));\n\n        final URL urlCR \u003d getClass().getResource(\"FileUtilsTestDataCR.dat\");\n        assertNotNull(urlCR);\n        final File cr \u003d new File(urlCR.toURI());\n        assertTrue(cr.exists());\n\n        final URL urlCRLF \u003d getClass().getResource(\"FileUtilsTestDataCRLF.dat\");\n        assertNotNull(urlCRLF);\n        final File crlf \u003d new File(urlCRLF.toURI());\n        assertTrue(crlf.exists());\n\n        final URL urlLF \u003d getClass().getResource(\"FileUtilsTestDataLF.dat\");\n        assertNotNull(urlLF);\n        final File lf \u003d new File(urlLF.toURI());\n        assertTrue(lf.exists());\n\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null));\n\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));\n\n        // Check the files behave OK when EOL is not ignored\n        assertTrue(FileUtils.contentEquals(cr, cr));\n        assertTrue(FileUtils.contentEquals(crlf, crlf));\n        assertTrue(FileUtils.contentEquals(lf, lf));\n\n        assertFalse(FileUtils.contentEquals(cr, crlf));\n        assertFalse(FileUtils.contentEquals(cr, lf));\n        assertFalse(FileUtils.contentEquals(crlf, lf));\n\n        // Equal files\n        file1.createNewFile();\n        file2.createNewFile();\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));\n        assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));\n    }",
    "begin_line": 629,
    "end_line": 708,
    "comment": "",
    "child_ranges": [
      "(line 631,col 9)-(line 631,col 64)",
      "(line 632,col 9)-(line 632,col 70)",
      "(line 633,col 9)-(line 633,col 71)",
      "(line 634,col 9)-(line 634,col 73)",
      "(line 635,col 9)-(line 635,col 73)",
      "(line 637,col 9)-(line 637,col 73)",
      "(line 638,col 9)-(line 638,col 73)",
      "(line 639,col 9)-(line 639,col 73)",
      "(line 640,col 9)-(line 640,col 73)",
      "(line 643,col 9)-(line 648,col 9)",
      "(line 651,col 9)-(line 651,col 75)",
      "(line 652,col 9)-(line 652,col 30)",
      "(line 653,col 9)-(line 653,col 41)",
      "(line 655,col 9)-(line 655,col 75)",
      "(line 656,col 9)-(line 656,col 30)",
      "(line 657,col 9)-(line 657,col 41)",
      "(line 659,col 9)-(line 659,col 81)",
      "(line 660,col 9)-(line 660,col 30)",
      "(line 661,col 9)-(line 661,col 44)",
      "(line 663,col 9)-(line 663,col 75)",
      "(line 664,col 9)-(line 664,col 75)",
      "(line 665,col 9)-(line 665,col 75)",
      "(line 667,col 9)-(line 667,col 75)",
      "(line 668,col 9)-(line 668,col 76)",
      "(line 669,col 9)-(line 669,col 76)",
      "(line 671,col 9)-(line 671,col 76)",
      "(line 672,col 9)-(line 672,col 29)",
      "(line 673,col 9)-(line 673,col 48)",
      "(line 674,col 9)-(line 674,col 32)",
      "(line 676,col 9)-(line 676,col 80)",
      "(line 677,col 9)-(line 677,col 31)",
      "(line 678,col 9)-(line 678,col 52)",
      "(line 679,col 9)-(line 679,col 34)",
      "(line 681,col 9)-(line 681,col 76)",
      "(line 682,col 9)-(line 682,col 29)",
      "(line 683,col 9)-(line 683,col 48)",
      "(line 684,col 9)-(line 684,col 32)",
      "(line 686,col 9)-(line 686,col 67)",
      "(line 687,col 9)-(line 687,col 71)",
      "(line 688,col 9)-(line 688,col 67)",
      "(line 690,col 9)-(line 690,col 69)",
      "(line 691,col 9)-(line 691,col 67)",
      "(line 692,col 9)-(line 692,col 69)",
      "(line 695,col 9)-(line 695,col 52)",
      "(line 696,col 9)-(line 696,col 56)",
      "(line 697,col 9)-(line 697,col 52)",
      "(line 699,col 9)-(line 699,col 55)",
      "(line 700,col 9)-(line 700,col 53)",
      "(line 701,col 9)-(line 701,col 55)",
      "(line 704,col 9)-(line 704,col 30)",
      "(line 705,col 9)-(line 705,col 30)",
      "(line 706,col 9)-(line 706,col 73)",
      "(line 707,col 9)-(line 707,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()",
    "snippet": "@Test\n    public void testCopyURLToFile() throws Exception {\n        // Creates file\n        final File file \u003d new File(temporaryFolder, getName());\n        file.deleteOnExit();\n\n        // Loads resource\n        final String resourceName \u003d \"/java/lang/Object.class\";\n        FileUtils.copyURLToFile(getClass().getResource(resourceName), file);\n\n        // Tests that resuorce was copied correctly\n        try (FileInputStream fis \u003d new FileInputStream(file)) {\n            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),\n                    \"Content is not equal.\");\n        }\n        //TODO Maybe test copy to itself like for copyFile()\n    }",
    "begin_line": 713,
    "end_line": 728,
    "comment": "",
    "child_ranges": [
      "(line 715,col 9)-(line 715,col 63)",
      "(line 716,col 9)-(line 716,col 28)",
      "(line 719,col 9)-(line 719,col 62)",
      "(line 720,col 9)-(line 720,col 76)",
      "(line 723,col 9)-(line 726,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()",
    "snippet": "@Test\n    public void testCopyURLToFileWithTimeout() throws Exception {\n        // Creates file\n        final File file \u003d new File(temporaryFolder, \"testCopyURLToFileWithTimeout\");\n        file.deleteOnExit();\n\n        // Loads resource\n        final String resourceName \u003d \"/java/lang/Object.class\";\n        FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);\n\n        // Tests that resuorce was copied correctly\n        try (FileInputStream fis \u003d new FileInputStream(file)) {\n            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),\n                    \"Content is not equal.\");\n        }\n        //TODO Maybe test copy to itself like for copyFile()\n    }",
    "begin_line": 731,
    "end_line": 746,
    "comment": "",
    "child_ranges": [
      "(line 733,col 9)-(line 733,col 84)",
      "(line 734,col 9)-(line 734,col 28)",
      "(line 737,col 9)-(line 737,col 62)",
      "(line 738,col 9)-(line 738,col 86)",
      "(line 741,col 9)-(line 744,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()",
    "snippet": "@Test\n    public void testForceMkdir() throws Exception {\n        // Tests with existing directory\n        FileUtils.forceMkdir(temporaryFolder);\n\n        // Creates test file\n        final File testFile \u003d new File(temporaryFolder, getName());\n        testFile.deleteOnExit();\n        testFile.createNewFile();\n        assertTrue(testFile.exists(), \"Test file does not exist.\");\n\n        // Tests with existing file\n        try {\n            FileUtils.forceMkdir(testFile);\n            fail(\"Exception expected.\");\n        } catch (final IOException ignore) {\n        }\n\n        testFile.delete();\n\n        // Tests with non-existent directory\n        FileUtils.forceMkdir(testFile);\n        assertTrue(testFile.exists(), \"Directory was not created.\");\n    }",
    "begin_line": 751,
    "end_line": 773,
    "comment": "",
    "child_ranges": [
      "(line 753,col 9)-(line 753,col 46)",
      "(line 756,col 9)-(line 756,col 67)",
      "(line 757,col 9)-(line 757,col 32)",
      "(line 758,col 9)-(line 758,col 33)",
      "(line 759,col 9)-(line 759,col 67)",
      "(line 762,col 9)-(line 766,col 9)",
      "(line 768,col 9)-(line 768,col 26)",
      "(line 771,col 9)-(line 771,col 39)",
      "(line 772,col 9)-(line 772,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()",
    "snippet": "@Test\n    public void testForceMkdirParent() throws Exception {\n        // Tests with existing directory\n        assertTrue(temporaryFolder.exists());\n        final File testParentDir \u003d new File(temporaryFolder, \"testForceMkdirParent\");\n        testParentDir.delete();\n        assertFalse(testParentDir.exists());\n        final File testFile \u003d new File(testParentDir, \"test.txt\");\n        assertFalse(testParentDir.exists());\n        assertFalse(testFile.exists());\n        // Create\n        FileUtils.forceMkdirParent(testFile);\n        assertTrue(testParentDir.exists());\n        assertFalse(testFile.exists());\n        // Again\n        FileUtils.forceMkdirParent(testFile);\n        assertTrue(testParentDir.exists());\n        assertFalse(testFile.exists());\n    }",
    "begin_line": 776,
    "end_line": 793,
    "comment": "",
    "child_ranges": [
      "(line 778,col 9)-(line 778,col 45)",
      "(line 779,col 9)-(line 779,col 85)",
      "(line 780,col 9)-(line 780,col 31)",
      "(line 781,col 9)-(line 781,col 44)",
      "(line 782,col 9)-(line 782,col 66)",
      "(line 783,col 9)-(line 783,col 44)",
      "(line 784,col 9)-(line 784,col 39)",
      "(line 786,col 9)-(line 786,col 45)",
      "(line 787,col 9)-(line 787,col 43)",
      "(line 788,col 9)-(line 788,col 39)",
      "(line 790,col 9)-(line 790,col 45)",
      "(line 791,col 9)-(line 791,col 43)",
      "(line 792,col 9)-(line 792,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()",
    "snippet": "@Test\n    public void testSizeOfDirectory() throws Exception {\n        final File file \u003d new File(temporaryFolder, getName());\n\n        // Non-existent file\n        try {\n            FileUtils.sizeOfDirectory(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Creates file\n        file.createNewFile();\n\n        // Existing file\n        try {\n            FileUtils.sizeOfDirectory(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Existing directory\n        file.delete();\n        file.mkdir();\n\n        // Create a cyclic symlink\n        this.createCircularSymLink(file);\n\n        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file), \"Unexpected directory size\");\n    }",
    "begin_line": 798,
    "end_line": 826,
    "comment": "",
    "child_ranges": [
      "(line 799,col 9)-(line 799,col 63)",
      "(line 802,col 9)-(line 806,col 9)",
      "(line 809,col 9)-(line 809,col 29)",
      "(line 812,col 9)-(line 816,col 9)",
      "(line 819,col 9)-(line 819,col 22)",
      "(line 820,col 9)-(line 820,col 21)",
      "(line 823,col 9)-(line 823,col 41)",
      "(line 825,col 9)-(line 825,col 104)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(java.io.File)",
    "snippet": "private void createCircularSymLink(final File file) throws IOException {\n        if (!FilenameUtils.isSystemWindows()) {\n            Runtime.getRuntime()\n                    .exec(\"ln -s \" + file + \"/.. \" + file + \"/cycle\");\n        } else {\n            try {\n                Runtime.getRuntime()\n                        .exec(\"mklink /D \" + file + \"/cycle\" + file + \"/.. \");\n            } catch (final IOException ioe) { // So that tests run in FAT filesystems\n                //don\u0027t fail\n            }\n        }\n    }",
    "begin_line": 828,
    "end_line": 840,
    "comment": "",
    "child_ranges": [
      "(line 829,col 9)-(line 839,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()",
    "snippet": "@Test\n    public void testSizeOfDirectoryAsBigInteger() throws Exception {\n        final File file \u003d new File(temporaryFolder, getName());\n\n        // Non-existent file\n        try {\n            FileUtils.sizeOfDirectoryAsBigInteger(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Creates file\n        file.createNewFile();\n        file.deleteOnExit();\n\n        // Existing file\n        try {\n            FileUtils.sizeOfDirectoryAsBigInteger(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Existing directory\n        file.delete();\n        file.mkdir();\n\n        this.createCircularSymLink(file);\n\n        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), \"Unexpected directory size\");\n\n        // Existing directory which size is greater than zero\n        file.delete();\n        file.mkdir();\n\n        final File nonEmptyFile \u003d new File(file, \"nonEmptyFile\" + System.nanoTime());\n        if (!nonEmptyFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + nonEmptyFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(nonEmptyFile));\n        try {\n            TestUtils.generateTestData(output, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        nonEmptyFile.deleteOnExit();\n\n        assertEquals(TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file),\n                \"Unexpected directory size\");\n\n        nonEmptyFile.delete();\n        file.delete();\n    }",
    "begin_line": 843,
    "end_line": 895,
    "comment": "",
    "child_ranges": [
      "(line 844,col 9)-(line 844,col 63)",
      "(line 847,col 9)-(line 851,col 9)",
      "(line 854,col 9)-(line 854,col 29)",
      "(line 855,col 9)-(line 855,col 28)",
      "(line 858,col 9)-(line 862,col 9)",
      "(line 865,col 9)-(line 865,col 22)",
      "(line 866,col 9)-(line 866,col 21)",
      "(line 868,col 9)-(line 868,col 41)",
      "(line 870,col 9)-(line 870,col 119)",
      "(line 873,col 9)-(line 873,col 22)",
      "(line 874,col 9)-(line 874,col 21)",
      "(line 876,col 9)-(line 876,col 85)",
      "(line 877,col 9)-(line 880,col 9)",
      "(line 881,col 9)-(line 882,col 77)",
      "(line 883,col 9)-(line 887,col 9)",
      "(line 888,col 9)-(line 888,col 36)",
      "(line 890,col 9)-(line 891,col 45)",
      "(line 893,col 9)-(line 893,col 30)",
      "(line 894,col 9)-(line 894,col 22)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()",
    "snippet": "@Test\n    public void testCompareSizeOf() {\n        final File start \u003d new File(\"src/test/java\");\n        final long sizeLong1 \u003d FileUtils.sizeOf(start);\n        final BigInteger sizeBig \u003d FileUtils.sizeOfAsBigInteger(start);\n        final long sizeLong2 \u003d FileUtils.sizeOf(start);\n        assertEquals(sizeLong1, sizeLong2, \"Size should not change\");\n        assertEquals(sizeLong1, sizeBig.longValue(), \"longSize should equal BigSize\");\n    }",
    "begin_line": 899,
    "end_line": 906,
    "comment": "",
    "child_ranges": [
      "(line 900,col 9)-(line 900,col 53)",
      "(line 901,col 9)-(line 901,col 55)",
      "(line 902,col 9)-(line 902,col 71)",
      "(line 903,col 9)-(line 903,col 55)",
      "(line 904,col 9)-(line 904,col 69)",
      "(line 905,col 9)-(line 905,col 86)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testSizeOf()",
    "snippet": "@Test\n    public void testSizeOf() throws Exception {\n        final File file \u003d new File(temporaryFolder, getName());\n\n        // Null argument\n        try {\n            FileUtils.sizeOf(null);\n            fail(\"Exception expected.\");\n        } catch (final NullPointerException ignore) {\n        }\n\n        // Non-existent file\n        try {\n            FileUtils.sizeOf(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Creates file\n        file.createNewFile();\n        file.deleteOnExit();\n\n        // New file\n        assertEquals(0, FileUtils.sizeOf(file));\n        file.delete();\n\n        // Existing file\n        assertEquals(testFile1Size, FileUtils.sizeOf(testFile1), \"Unexpected files size\");\n\n        // Existing directory\n        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(temporaryFolder), \"Unexpected directory size\");\n    }",
    "begin_line": 909,
    "end_line": 939,
    "comment": "",
    "child_ranges": [
      "(line 910,col 9)-(line 910,col 63)",
      "(line 913,col 9)-(line 917,col 9)",
      "(line 920,col 9)-(line 924,col 9)",
      "(line 927,col 9)-(line 927,col 29)",
      "(line 928,col 9)-(line 928,col 28)",
      "(line 931,col 9)-(line 931,col 48)",
      "(line 932,col 9)-(line 932,col 22)",
      "(line 935,col 9)-(line 935,col 90)",
      "(line 938,col 9)-(line 938,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()",
    "snippet": "@Test\n    public void testSizeOfAsBigInteger() throws Exception {\n        final File file \u003d new File(temporaryFolder, getName());\n\n        // Null argument\n        try {\n            FileUtils.sizeOfAsBigInteger(null);\n            fail(\"Exception expected.\");\n        } catch (final NullPointerException ignore) {\n        }\n\n        // Non-existent file\n        try {\n            FileUtils.sizeOfAsBigInteger(file);\n            fail(\"Exception expected.\");\n        } catch (final IllegalArgumentException ignore) {\n        }\n\n        // Creates file\n        file.createNewFile();\n        file.deleteOnExit();\n\n        // New file\n        assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file));\n        file.delete();\n\n        // Existing file\n        assertEquals(BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1),\n                \"Unexpected files size\");\n\n        // Existing directory\n        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(temporaryFolder),\n                \"Unexpected directory size\");\n    }",
    "begin_line": 942,
    "end_line": 974,
    "comment": "",
    "child_ranges": [
      "(line 943,col 9)-(line 943,col 63)",
      "(line 946,col 9)-(line 950,col 9)",
      "(line 953,col 9)-(line 957,col 9)",
      "(line 960,col 9)-(line 960,col 29)",
      "(line 961,col 9)-(line 961,col 28)",
      "(line 964,col 9)-(line 964,col 74)",
      "(line 965,col 9)-(line 965,col 22)",
      "(line 968,col 9)-(line 969,col 41)",
      "(line 972,col 9)-(line 973,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()",
    "snippet": "@Test\n    public void testIsFileNewerOlder() throws Exception {\n        final File reference \u003d new File(temporaryFolder, \"FileUtils-reference.txt\");\n        final File oldFile \u003d new File(temporaryFolder, \"FileUtils-old.txt\");\n        final File newFile \u003d new File(temporaryFolder, \"FileUtils-new.txt\");\n        final File invalidFile \u003d new File(temporaryFolder, \"FileUtils-invalid-file.txt\");\n\n        // Create Files\n        if (!oldFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + oldFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(oldFile));\n        try {\n            TestUtils.generateTestData(output1, 0);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n\n        do {\n            try {\n                TestUtils.sleep(1000);\n            } catch (final InterruptedException ie) {\n                // ignore\n            }\n            if (!reference.getParentFile().exists()) {\n                throw new IOException(\"Cannot create file \" + reference\n                        + \" as the parent directory does not exist\");\n            }\n            final BufferedOutputStream output \u003d\n                    new BufferedOutputStream(new FileOutputStream(reference));\n            try {\n                TestUtils.generateTestData(output, 0);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        } while (oldFile.lastModified() \u003d\u003d reference.lastModified());\n\n        final Date date \u003d new Date();\n        final long now \u003d date.getTime();\n\n        do {\n            try {\n                TestUtils.sleep(1000);\n            } catch (final InterruptedException ie) {\n                // ignore\n            }\n            if (!newFile.getParentFile().exists()) {\n                throw new IOException(\"Cannot create file \" + newFile\n                        + \" as the parent directory does not exist\");\n            }\n            final BufferedOutputStream output \u003d\n                    new BufferedOutputStream(new FileOutputStream(newFile));\n            try {\n                TestUtils.generateTestData(output, 0);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        } while (reference.lastModified() \u003d\u003d newFile.lastModified());\n\n        // Test isFileNewer()\n        assertFalse(FileUtils.isFileNewer(oldFile, reference), \"Old File - Newer - File\");\n        assertFalse(FileUtils.isFileNewer(oldFile, date), \"Old File - Newer - Date\");\n        assertFalse(FileUtils.isFileNewer(oldFile, now), \"Old File - Newer - Mili\");\n        assertTrue(FileUtils.isFileNewer(newFile, reference), \"New File - Newer - File\");\n        assertTrue(FileUtils.isFileNewer(newFile, date), \"New File - Newer - Date\");\n        assertTrue(FileUtils.isFileNewer(newFile, now), \"New File - Newer - Mili\");\n        assertFalse(FileUtils.isFileNewer(invalidFile, reference), \"Invalid - Newer - File\");\n        final String invalidFileName \u003d invalidFile.getName();\n        try {\n            FileUtils.isFileNewer(newFile, invalidFile);\n            fail(\"Should have cause IllegalArgumentException\");\n        } catch (final IllegalArgumentException iae) {\n            final String message \u003d iae.getMessage();\n            assertTrue(message.contains(invalidFileName), \"Message should contain: \" + invalidFileName + \" but was: \" + message);\n        }\n\n        // Test isFileOlder()\n        assertTrue(FileUtils.isFileOlder(oldFile, reference), \"Old File - Older - File\");\n        assertTrue(FileUtils.isFileOlder(oldFile, date), \"Old File - Older - Date\");\n        assertTrue(FileUtils.isFileOlder(oldFile, now), \"Old File - Older - Mili\");\n        assertFalse(FileUtils.isFileOlder(newFile, reference), \"New File - Older - File\");\n        assertFalse(FileUtils.isFileOlder(newFile, date), \"New File - Older - Date\");\n        assertFalse(FileUtils.isFileOlder(newFile, now), \"New File - Older - Mili\");\n        assertFalse(FileUtils.isFileOlder(invalidFile, reference), \"Invalid - Older - File\");\n        try {\n            FileUtils.isFileOlder(newFile, invalidFile);\n            fail(\"Should have cause IllegalArgumentException\");\n        } catch (final IllegalArgumentException iae) {\n            final String message \u003d iae.getMessage();\n            assertTrue(message.contains(invalidFileName), \"Message should contain: \" + invalidFileName + \" but was: \" + message);\n        }\n\n\n        // ----- Test isFileNewer() exceptions -----\n        // Null File\n        try {\n            FileUtils.isFileNewer(null, now);\n            fail(\"Newer Null, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException expected) {\n            // expected result\n        }\n\n        // Null reference File\n        try {\n            FileUtils.isFileNewer(oldFile, (File) null);\n            fail(\"Newer Null reference, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n        // Invalid reference File\n        try {\n            FileUtils.isFileNewer(oldFile, invalidFile);\n            fail(\"Newer invalid reference, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n        // Null reference Date\n        try {\n            FileUtils.isFileNewer(oldFile, (Date) null);\n            fail(\"Newer Null date, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n\n        // ----- Test isFileOlder() exceptions -----\n        // Null File\n        try {\n            FileUtils.isFileOlder(null, now);\n            fail(\"Older Null, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n        // Null reference File\n        try {\n            FileUtils.isFileOlder(oldFile, (File) null);\n            fail(\"Older Null reference, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n        // Invalid reference File\n        try {\n            FileUtils.isFileOlder(oldFile, invalidFile);\n            fail(\"Older invalid reference, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n        // Null reference Date\n        try {\n            FileUtils.isFileOlder(oldFile, (Date) null);\n            fail(\"Older Null date, expected IllegalArgumentExcepion\");\n        } catch (final IllegalArgumentException ignore) {\n            // expected result\n        }\n\n    }",
    "begin_line": 978,
    "end_line": 1139,
    "comment": "",
    "child_ranges": [
      "(line 979,col 9)-(line 979,col 84)",
      "(line 980,col 9)-(line 980,col 76)",
      "(line 981,col 9)-(line 981,col 76)",
      "(line 982,col 9)-(line 982,col 89)",
      "(line 985,col 9)-(line 988,col 9)",
      "(line 989,col 9)-(line 990,col 72)",
      "(line 991,col 9)-(line 995,col 9)",
      "(line 997,col 9)-(line 1014,col 69)",
      "(line 1016,col 9)-(line 1016,col 37)",
      "(line 1017,col 9)-(line 1017,col 40)",
      "(line 1019,col 9)-(line 1036,col 69)",
      "(line 1039,col 9)-(line 1039,col 90)",
      "(line 1040,col 9)-(line 1040,col 85)",
      "(line 1041,col 9)-(line 1041,col 84)",
      "(line 1042,col 9)-(line 1042,col 89)",
      "(line 1043,col 9)-(line 1043,col 84)",
      "(line 1044,col 9)-(line 1044,col 83)",
      "(line 1045,col 9)-(line 1045,col 93)",
      "(line 1046,col 9)-(line 1046,col 61)",
      "(line 1047,col 9)-(line 1053,col 9)",
      "(line 1056,col 9)-(line 1056,col 89)",
      "(line 1057,col 9)-(line 1057,col 84)",
      "(line 1058,col 9)-(line 1058,col 83)",
      "(line 1059,col 9)-(line 1059,col 90)",
      "(line 1060,col 9)-(line 1060,col 85)",
      "(line 1061,col 9)-(line 1061,col 84)",
      "(line 1062,col 9)-(line 1062,col 93)",
      "(line 1063,col 9)-(line 1069,col 9)",
      "(line 1074,col 9)-(line 1079,col 9)",
      "(line 1082,col 9)-(line 1087,col 9)",
      "(line 1090,col 9)-(line 1095,col 9)",
      "(line 1098,col 9)-(line 1103,col 9)",
      "(line 1108,col 9)-(line 1113,col 9)",
      "(line 1116,col 9)-(line 1121,col 9)",
      "(line 1124,col 9)-(line 1129,col 9)",
      "(line 1132,col 9)-(line 1137,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()",
    "snippet": "@Test\n    public void testCopyFile1() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy1.txt\");\n\n        //Thread.sleep(LAST_MODIFIED_DELAY);\n        //This is to slow things down so we can catch if\n        //the lastModified date is not ok\n\n        FileUtils.copyFile(testFile1, destination);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(testFile1Size, destination.length(), \"Check Full copy\");\n        /* disabled: Thread.sleep doesn\u0027t work reliantly for this case\n        assertTrue(\"Check last modified date preserved\",\n            testFile1.lastModified() \u003d\u003d destination.lastModified());*/\n    }",
    "begin_line": 1144,
    "end_line": 1157,
    "comment": "",
    "child_ranges": [
      "(line 1145,col 9)-(line 1145,col 72)",
      "(line 1151,col 9)-(line 1151,col 51)",
      "(line 1152,col 9)-(line 1152,col 56)",
      "(line 1153,col 9)-(line 1153,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()",
    "snippet": "@Test\n    public void testCopyFileToOutputStream() throws Exception {\n        final ByteArrayOutputStream destination \u003d new ByteArrayOutputStream();\n        FileUtils.copyFile(testFile1, destination);\n        assertEquals(testFile1Size, destination.size(), \"Check Full copy size\");\n        final byte[] expected \u003d FileUtils.readFileToByteArray(testFile1);\n        assertArrayEquals(expected, destination.toByteArray(), \"Check Full copy\");\n    }",
    "begin_line": 1160,
    "end_line": 1166,
    "comment": "",
    "child_ranges": [
      "(line 1161,col 9)-(line 1161,col 78)",
      "(line 1162,col 9)-(line 1162,col 51)",
      "(line 1163,col 9)-(line 1163,col 80)",
      "(line 1164,col 9)-(line 1164,col 73)",
      "(line 1165,col 9)-(line 1165,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFileLarge()",
    "snippet": "@Test\n    @Disabled\n    public void testCopyFileLarge() throws Exception {\n\n        final File largeFile \u003d new File(temporaryFolder, \"large.txt\");\n        final File destination \u003d new File(temporaryFolder, \"copylarge.txt\");\n\n        System.out.println(\"START:   \" + new java.util.Date());\n        if (!largeFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + largeFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(largeFile));\n        try {\n            TestUtils.generateTestData(output, FileUtils.ONE_GB);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        System.out.println(\"CREATED: \" + new java.util.Date());\n        FileUtils.copyFile(largeFile, destination);\n        System.out.println(\"COPIED:  \" + new java.util.Date());\n\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(largeFile.length(), destination.length(), \"Check Full copy\");\n    }",
    "begin_line": 1170,
    "end_line": 1193,
    "comment": "",
    "child_ranges": [
      "(line 1172,col 9)-(line 1172,col 70)",
      "(line 1173,col 9)-(line 1173,col 76)",
      "(line 1175,col 9)-(line 1175,col 63)",
      "(line 1176,col 9)-(line 1179,col 9)",
      "(line 1180,col 9)-(line 1181,col 74)",
      "(line 1182,col 9)-(line 1186,col 9)",
      "(line 1187,col 9)-(line 1187,col 63)",
      "(line 1188,col 9)-(line 1188,col 51)",
      "(line 1189,col 9)-(line 1189,col 63)",
      "(line 1191,col 9)-(line 1191,col 56)",
      "(line 1192,col 9)-(line 1192,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()",
    "snippet": "@Test\n    public void testCopyFile2() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy2.txt\");\n\n        //Thread.sleep(LAST_MODIFIED_DELAY);\n        //This is to slow things down so we can catch if\n        //the lastModified date is not ok\n\n        FileUtils.copyFile(testFile1, destination);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(testFile2Size, destination.length(), \"Check Full copy\");\n        /* disabled: Thread.sleep doesn\u0027t work reliably for this case\n        assertTrue(testFile1.lastModified() \u003d\u003d destination.lastModified(), \"Check last modified date preserved\");*/\n    }",
    "begin_line": 1196,
    "end_line": 1208,
    "comment": "",
    "child_ranges": [
      "(line 1197,col 9)-(line 1197,col 72)",
      "(line 1203,col 9)-(line 1203,col 51)",
      "(line 1204,col 9)-(line 1204,col 56)",
      "(line 1205,col 9)-(line 1205,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()",
    "snippet": "@Test\n    public void testCopyToSelf() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy3.txt\");\n        //Prepare a test file\n        FileUtils.copyFile(testFile1, destination);\n\n        try {\n            FileUtils.copyFile(destination, destination);\n            fail(\"file copy to self should not be possible\");\n        } catch (final IOException ioe) {\n            //we want the exception, copy to self should be illegal\n        }\n    }",
    "begin_line": 1211,
    "end_line": 1222,
    "comment": "",
    "child_ranges": [
      "(line 1212,col 9)-(line 1212,col 72)",
      "(line 1214,col 9)-(line 1214,col 51)",
      "(line 1216,col 9)-(line 1221,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()",
    "snippet": "@Test\n    public void testCopyFile2WithoutFileDatePreservation() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy2.txt\");\n\n        //Thread.sleep(LAST_MODIFIED_DELAY);\n        //This is to slow things down so we can catch if\n        //the lastModified date is not ok\n\n        FileUtils.copyFile(testFile1, destination, false);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(testFile2Size, destination.length(), \"Check Full copy\");\n        /* disabled: Thread.sleep doesn\u0027t work reliantly for this case\n        assertTrue(\"Check last modified date modified\",\n            testFile1.lastModified() !\u003d destination.lastModified());*/\n    }",
    "begin_line": 1225,
    "end_line": 1238,
    "comment": "",
    "child_ranges": [
      "(line 1226,col 9)-(line 1226,col 72)",
      "(line 1232,col 9)-(line 1232,col 58)",
      "(line 1233,col 9)-(line 1233,col 56)",
      "(line 1234,col 9)-(line 1234,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()",
    "snippet": "@Test\n    public void testCopyDirectoryToDirectory_NonExistingDest() throws Exception {\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1));\n        try {\n            TestUtils.generateTestData(output1, 1234);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2));\n        try {\n            TestUtils.generateTestData(output, 4321);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File srcDir \u003d temporaryFolder;\n        final File subDir \u003d new File(srcDir, \"sub\");\n        subDir.mkdir();\n        final File subFile \u003d new File(subDir, \"A.txt\");\n        FileUtils.writeStringToFile(subFile, \"HELLO WORLD\", \"UTF8\");\n        final File destDir \u003d new File(System.getProperty(\"java.io.tmpdir\"), \"tmp-FileUtilsTestCase\");\n        FileUtils.deleteDirectory(destDir);\n        final File actualDestDir \u003d new File(destDir, srcDir.getName());\n\n        FileUtils.copyDirectoryToDirectory(srcDir, destDir);\n\n        assertTrue(destDir.exists(), \"Check exists\");\n        assertTrue(actualDestDir.exists(), \"Check exists\");\n        final long srcSize \u003d FileUtils.sizeOfDirectory(srcDir);\n        assertTrue(srcSize \u003e 0, \"Size \u003e 0\");\n        assertEquals(srcSize, FileUtils.sizeOfDirectory(actualDestDir), \"Check size\");\n        assertTrue(new File(actualDestDir, \"sub/A.txt\").exists());\n        FileUtils.deleteDirectory(destDir);\n    }",
    "begin_line": 1241,
    "end_line": 1282,
    "comment": "",
    "child_ranges": [
      "(line 1242,col 9)-(line 1245,col 9)",
      "(line 1246,col 9)-(line 1247,col 74)",
      "(line 1248,col 9)-(line 1252,col 9)",
      "(line 1253,col 9)-(line 1256,col 9)",
      "(line 1257,col 9)-(line 1258,col 74)",
      "(line 1259,col 9)-(line 1263,col 9)",
      "(line 1264,col 9)-(line 1264,col 44)",
      "(line 1265,col 9)-(line 1265,col 52)",
      "(line 1266,col 9)-(line 1266,col 23)",
      "(line 1267,col 9)-(line 1267,col 55)",
      "(line 1268,col 9)-(line 1268,col 68)",
      "(line 1269,col 9)-(line 1269,col 101)",
      "(line 1270,col 9)-(line 1270,col 43)",
      "(line 1271,col 9)-(line 1271,col 71)",
      "(line 1273,col 9)-(line 1273,col 60)",
      "(line 1275,col 9)-(line 1275,col 53)",
      "(line 1276,col 9)-(line 1276,col 59)",
      "(line 1277,col 9)-(line 1277,col 63)",
      "(line 1278,col 9)-(line 1278,col 44)",
      "(line 1279,col 9)-(line 1279,col 86)",
      "(line 1280,col 9)-(line 1280,col 66)",
      "(line 1281,col 9)-(line 1281,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()",
    "snippet": "@Test\n    public void testCopyDirectoryToNonExistingDest() throws Exception {\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1));\n        try {\n            TestUtils.generateTestData(output1, 1234);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2));\n        try {\n            TestUtils.generateTestData(output, 4321);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File srcDir \u003d temporaryFolder;\n        final File subDir \u003d new File(srcDir, \"sub\");\n        subDir.mkdir();\n        final File subFile \u003d new File(subDir, \"A.txt\");\n        FileUtils.writeStringToFile(subFile, \"HELLO WORLD\", \"UTF8\");\n        final File destDir \u003d new File(System.getProperty(\"java.io.tmpdir\"), \"tmp-FileUtilsTestCase\");\n        FileUtils.deleteDirectory(destDir);\n\n        FileUtils.copyDirectory(srcDir, destDir);\n\n        assertTrue(destDir.exists(), \"Check exists\");\n        final long sizeOfSrcDirectory \u003d FileUtils.sizeOfDirectory(srcDir);\n        assertTrue(sizeOfSrcDirectory \u003e 0, \"Size \u003e 0\");\n        assertEquals(sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir), \"Check size\");\n        assertTrue(new File(destDir, \"sub/A.txt\").exists());\n        FileUtils.deleteDirectory(destDir);\n    }",
    "begin_line": 1285,
    "end_line": 1324,
    "comment": "",
    "child_ranges": [
      "(line 1286,col 9)-(line 1289,col 9)",
      "(line 1290,col 9)-(line 1291,col 74)",
      "(line 1292,col 9)-(line 1296,col 9)",
      "(line 1297,col 9)-(line 1300,col 9)",
      "(line 1301,col 9)-(line 1302,col 74)",
      "(line 1303,col 9)-(line 1307,col 9)",
      "(line 1308,col 9)-(line 1308,col 44)",
      "(line 1309,col 9)-(line 1309,col 52)",
      "(line 1310,col 9)-(line 1310,col 23)",
      "(line 1311,col 9)-(line 1311,col 55)",
      "(line 1312,col 9)-(line 1312,col 68)",
      "(line 1313,col 9)-(line 1313,col 101)",
      "(line 1314,col 9)-(line 1314,col 43)",
      "(line 1316,col 9)-(line 1316,col 49)",
      "(line 1318,col 9)-(line 1318,col 53)",
      "(line 1319,col 9)-(line 1319,col 74)",
      "(line 1320,col 9)-(line 1320,col 55)",
      "(line 1321,col 9)-(line 1321,col 91)",
      "(line 1322,col 9)-(line 1322,col 60)",
      "(line 1323,col 9)-(line 1323,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()",
    "snippet": "@Test\n    public void testCopyDirectoryToExistingDest() throws Exception {\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1));\n        try {\n            TestUtils.generateTestData(output1, 1234);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2));\n        try {\n            TestUtils.generateTestData(output, 4321);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File srcDir \u003d temporaryFolder;\n        final File subDir \u003d new File(srcDir, \"sub\");\n        subDir.mkdir();\n        final File subFile \u003d new File(subDir, \"A.txt\");\n        FileUtils.writeStringToFile(subFile, \"HELLO WORLD\", \"UTF8\");\n        final File destDir \u003d new File(System.getProperty(\"java.io.tmpdir\"), \"tmp-FileUtilsTestCase\");\n        FileUtils.deleteDirectory(destDir);\n        destDir.mkdirs();\n\n        FileUtils.copyDirectory(srcDir, destDir);\n\n        final long srcSize \u003d FileUtils.sizeOfDirectory(srcDir);\n        assertTrue(srcSize \u003e 0, \"Size \u003e 0\");\n        assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir));\n        assertTrue(new File(destDir, \"sub/A.txt\").exists());\n    }",
    "begin_line": 1327,
    "end_line": 1365,
    "comment": "",
    "child_ranges": [
      "(line 1328,col 9)-(line 1331,col 9)",
      "(line 1332,col 9)-(line 1333,col 74)",
      "(line 1334,col 9)-(line 1338,col 9)",
      "(line 1339,col 9)-(line 1342,col 9)",
      "(line 1343,col 9)-(line 1344,col 74)",
      "(line 1345,col 9)-(line 1349,col 9)",
      "(line 1350,col 9)-(line 1350,col 44)",
      "(line 1351,col 9)-(line 1351,col 52)",
      "(line 1352,col 9)-(line 1352,col 23)",
      "(line 1353,col 9)-(line 1353,col 55)",
      "(line 1354,col 9)-(line 1354,col 68)",
      "(line 1355,col 9)-(line 1355,col 101)",
      "(line 1356,col 9)-(line 1356,col 43)",
      "(line 1357,col 9)-(line 1357,col 25)",
      "(line 1359,col 9)-(line 1359,col 49)",
      "(line 1361,col 9)-(line 1361,col 63)",
      "(line 1362,col 9)-(line 1362,col 44)",
      "(line 1363,col 9)-(line 1363,col 66)",
      "(line 1364,col 9)-(line 1364,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()",
    "snippet": "@Test\n    public void testCopyDirectoryFiltered() throws Exception {\n        final File grandParentDir \u003d new File(temporaryFolder, \"grandparent\");\n        final File parentDir \u003d new File(grandParentDir, \"parent\");\n        final File childDir \u003d new File(parentDir, \"child\");\n        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);\n\n        final NameFileFilter filter \u003d new NameFileFilter(new String[]{\"parent\", \"child\", \"file3.txt\"});\n        final File destDir \u003d new File(temporaryFolder, \"copydest\");\n\n        FileUtils.copyDirectory(grandParentDir, destDir, filter);\n        final List\u003cFile\u003e files \u003d LIST_WALKER.list(destDir);\n        assertEquals(3, files.size());\n        assertEquals(\"parent\", files.get(0).getName());\n        assertEquals(\"child\", files.get(1).getName());\n        assertEquals(\"file3.txt\", files.get(2).getName());\n    }",
    "begin_line": 1368,
    "end_line": 1383,
    "comment": "",
    "child_ranges": [
      "(line 1369,col 9)-(line 1369,col 77)",
      "(line 1370,col 9)-(line 1370,col 66)",
      "(line 1371,col 9)-(line 1371,col 59)",
      "(line 1372,col 9)-(line 1372,col 77)",
      "(line 1374,col 9)-(line 1374,col 103)",
      "(line 1375,col 9)-(line 1375,col 67)",
      "(line 1377,col 9)-(line 1377,col 65)",
      "(line 1378,col 9)-(line 1378,col 59)",
      "(line 1379,col 9)-(line 1379,col 38)",
      "(line 1380,col 9)-(line 1380,col 55)",
      "(line 1381,col 9)-(line 1381,col 54)",
      "(line 1382,col 9)-(line 1382,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()",
    "snippet": "@Test\n    public void testCopyDirectoryPreserveDates() throws Exception {\n        final File source \u003d new File(temporaryFolder, \"source\");\n        final File sourceDirectory \u003d new File(source, \"directory\");\n        final File sourceFile \u003d new File(sourceDirectory, \"hello.txt\");\n\n        // Prepare source data\n        source.mkdirs();\n        sourceDirectory.mkdir();\n        FileUtils.writeStringToFile(sourceFile, \"HELLO WORLD\", \"UTF8\");\n        // Set dates in reverse order to avoid overwriting previous values\n        // Also, use full seconds (arguments are in ms) close to today\n        // but still highly unlikely to occur in the real world\n        sourceFile.setLastModified(1000000002000L);\n        sourceDirectory.setLastModified(1000000001000L);\n        source.setLastModified(1000000000000L);\n\n        final File target \u003d new File(temporaryFolder, \"target\");\n        final File targetDirectory \u003d new File(target, \"directory\");\n        final File targetFile \u003d new File(targetDirectory, \"hello.txt\");\n\n        // Test with preserveFileDate disabled\n        FileUtils.copyDirectory(source, target, false);\n        assertTrue(1000000000000L !\u003d target.lastModified());\n        assertTrue(1000000001000L !\u003d targetDirectory.lastModified());\n        assertTrue(1000000002000L !\u003d targetFile.lastModified());\n        FileUtils.deleteDirectory(target);\n\n        // Test with preserveFileDate enabled\n        FileUtils.copyDirectory(source, target, true);\n        assertEquals(1000000000000L, target.lastModified());\n        assertEquals(1000000001000L, targetDirectory.lastModified());\n        assertEquals(1000000002000L, targetFile.lastModified());\n        FileUtils.deleteDirectory(target);\n\n        // also if the target directory already exists (IO-190)\n        target.mkdirs();\n        FileUtils.copyDirectory(source, target, true);\n        assertEquals(1000000000000L, target.lastModified());\n        assertEquals(1000000001000L, targetDirectory.lastModified());\n        assertEquals(1000000002000L, targetFile.lastModified());\n        FileUtils.deleteDirectory(target);\n\n        // also if the target subdirectory already exists (IO-190)\n        targetDirectory.mkdirs();\n        FileUtils.copyDirectory(source, target, true);\n        assertEquals(1000000000000L, target.lastModified());\n        assertEquals(1000000001000L, targetDirectory.lastModified());\n        assertEquals(1000000002000L, targetFile.lastModified());\n        FileUtils.deleteDirectory(target);\n    }",
    "begin_line": 1386,
    "end_line": 1435,
    "comment": "",
    "child_ranges": [
      "(line 1387,col 9)-(line 1387,col 64)",
      "(line 1388,col 9)-(line 1388,col 67)",
      "(line 1389,col 9)-(line 1389,col 71)",
      "(line 1392,col 9)-(line 1392,col 24)",
      "(line 1393,col 9)-(line 1393,col 32)",
      "(line 1394,col 9)-(line 1394,col 71)",
      "(line 1398,col 9)-(line 1398,col 51)",
      "(line 1399,col 9)-(line 1399,col 56)",
      "(line 1400,col 9)-(line 1400,col 47)",
      "(line 1402,col 9)-(line 1402,col 64)",
      "(line 1403,col 9)-(line 1403,col 67)",
      "(line 1404,col 9)-(line 1404,col 71)",
      "(line 1407,col 9)-(line 1407,col 55)",
      "(line 1408,col 9)-(line 1408,col 60)",
      "(line 1409,col 9)-(line 1409,col 69)",
      "(line 1410,col 9)-(line 1410,col 64)",
      "(line 1411,col 9)-(line 1411,col 42)",
      "(line 1414,col 9)-(line 1414,col 54)",
      "(line 1415,col 9)-(line 1415,col 60)",
      "(line 1416,col 9)-(line 1416,col 69)",
      "(line 1417,col 9)-(line 1417,col 64)",
      "(line 1418,col 9)-(line 1418,col 42)",
      "(line 1421,col 9)-(line 1421,col 24)",
      "(line 1422,col 9)-(line 1422,col 54)",
      "(line 1423,col 9)-(line 1423,col 60)",
      "(line 1424,col 9)-(line 1424,col 69)",
      "(line 1425,col 9)-(line 1425,col 64)",
      "(line 1426,col 9)-(line 1426,col 42)",
      "(line 1429,col 9)-(line 1429,col 33)",
      "(line 1430,col 9)-(line 1430,col 54)",
      "(line 1431,col 9)-(line 1431,col 60)",
      "(line 1432,col 9)-(line 1432,col 69)",
      "(line 1433,col 9)-(line 1433,col 64)",
      "(line 1434,col 9)-(line 1434,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()",
    "snippet": "@Test\n    public void testCopyDirectoryToChild() throws Exception {\n        final File grandParentDir \u003d new File(temporaryFolder, \"grandparent\");\n        final File parentDir \u003d new File(grandParentDir, \"parent\");\n        final File childDir \u003d new File(parentDir, \"child\");\n        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);\n\n        final long expectedCount \u003d LIST_WALKER.list(grandParentDir).size() +\n                LIST_WALKER.list(parentDir).size();\n        final long expectedSize \u003d FileUtils.sizeOfDirectory(grandParentDir) +\n                FileUtils.sizeOfDirectory(parentDir);\n        FileUtils.copyDirectory(parentDir, childDir);\n        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());\n        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));\n        assertTrue(expectedCount \u003e 0, \"Count \u003e 0\");\n        assertTrue(expectedSize \u003e 0, \"Size \u003e 0\");\n    }",
    "begin_line": 1439,
    "end_line": 1454,
    "comment": "",
    "child_ranges": [
      "(line 1440,col 9)-(line 1440,col 77)",
      "(line 1441,col 9)-(line 1441,col 66)",
      "(line 1442,col 9)-(line 1442,col 59)",
      "(line 1443,col 9)-(line 1443,col 77)",
      "(line 1445,col 9)-(line 1446,col 51)",
      "(line 1447,col 9)-(line 1448,col 53)",
      "(line 1449,col 9)-(line 1449,col 53)",
      "(line 1450,col 9)-(line 1450,col 77)",
      "(line 1451,col 9)-(line 1451,col 78)",
      "(line 1452,col 9)-(line 1452,col 51)",
      "(line 1453,col 9)-(line 1453,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()",
    "snippet": "@Test\n    public void testCopyDirectoryToGrandChild() throws Exception {\n        final File grandParentDir \u003d new File(temporaryFolder, \"grandparent\");\n        final File parentDir \u003d new File(grandParentDir, \"parent\");\n        final File childDir \u003d new File(parentDir, \"child\");\n        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);\n\n        final long expectedCount \u003d LIST_WALKER.list(grandParentDir).size() * 2;\n        final long expectedSize \u003d FileUtils.sizeOfDirectory(grandParentDir) * 2;\n        FileUtils.copyDirectory(grandParentDir, childDir);\n        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());\n        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));\n        assertTrue(expectedSize \u003e 0, \"Size \u003e 0\");\n    }",
    "begin_line": 1458,
    "end_line": 1470,
    "comment": "",
    "child_ranges": [
      "(line 1459,col 9)-(line 1459,col 77)",
      "(line 1460,col 9)-(line 1460,col 66)",
      "(line 1461,col 9)-(line 1461,col 59)",
      "(line 1462,col 9)-(line 1462,col 77)",
      "(line 1464,col 9)-(line 1464,col 79)",
      "(line 1465,col 9)-(line 1465,col 80)",
      "(line 1466,col 9)-(line 1466,col 58)",
      "(line 1467,col 9)-(line 1467,col 77)",
      "(line 1468,col 9)-(line 1468,col 78)",
      "(line 1469,col 9)-(line 1469,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()",
    "snippet": "@Test\n    public void testCopyDirectoryToItself() throws Exception {\n        final File dir \u003d new File(temporaryFolder, \"itself\");\n        dir.mkdirs();\n        FileUtils.copyDirectoryToDirectory(dir, dir);\n        assertEquals(1, LIST_WALKER.list(dir).size());\n    }",
    "begin_line": 1474,
    "end_line": 1479,
    "comment": "",
    "child_ranges": [
      "(line 1475,col 9)-(line 1475,col 61)",
      "(line 1476,col 9)-(line 1476,col 21)",
      "(line 1477,col 9)-(line 1477,col 53)",
      "(line 1478,col 9)-(line 1478,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File, java.io.File, java.io.File)",
    "snippet": "private void createFilesForTestCopyDirectory(final File grandParentDir, final File parentDir, final File childDir) throws Exception {\n        final File childDir2 \u003d new File(parentDir, \"child2\");\n        final File grandChildDir \u003d new File(childDir, \"grandChild\");\n        final File grandChild2Dir \u003d new File(childDir2, \"grandChild2\");\n        final File file1 \u003d new File(grandParentDir, \"file1.txt\");\n        final File file2 \u003d new File(parentDir, \"file2.txt\");\n        final File file3 \u003d new File(childDir, \"file3.txt\");\n        final File file4 \u003d new File(childDir2, \"file4.txt\");\n        final File file5 \u003d new File(grandChildDir, \"file5.txt\");\n        final File file6 \u003d new File(grandChild2Dir, \"file6.txt\");\n        FileUtils.deleteDirectory(grandParentDir);\n        grandChildDir.mkdirs();\n        grandChild2Dir.mkdirs();\n        FileUtils.writeStringToFile(file1, \"File 1 in grandparent\", \"UTF8\");\n        FileUtils.writeStringToFile(file2, \"File 2 in parent\", \"UTF8\");\n        FileUtils.writeStringToFile(file3, \"File 3 in child\", \"UTF8\");\n        FileUtils.writeStringToFile(file4, \"File 4 in child2\", \"UTF8\");\n        FileUtils.writeStringToFile(file5, \"File 5 in grandChild\", \"UTF8\");\n        FileUtils.writeStringToFile(file6, \"File 6 in grandChild2\", \"UTF8\");\n    }",
    "begin_line": 1481,
    "end_line": 1500,
    "comment": "",
    "child_ranges": [
      "(line 1482,col 9)-(line 1482,col 61)",
      "(line 1483,col 9)-(line 1483,col 68)",
      "(line 1484,col 9)-(line 1484,col 71)",
      "(line 1485,col 9)-(line 1485,col 65)",
      "(line 1486,col 9)-(line 1486,col 60)",
      "(line 1487,col 9)-(line 1487,col 59)",
      "(line 1488,col 9)-(line 1488,col 60)",
      "(line 1489,col 9)-(line 1489,col 64)",
      "(line 1490,col 9)-(line 1490,col 65)",
      "(line 1491,col 9)-(line 1491,col 50)",
      "(line 1492,col 9)-(line 1492,col 31)",
      "(line 1493,col 9)-(line 1493,col 32)",
      "(line 1494,col 9)-(line 1494,col 76)",
      "(line 1495,col 9)-(line 1495,col 71)",
      "(line 1496,col 9)-(line 1496,col 70)",
      "(line 1497,col 9)-(line 1497,col 71)",
      "(line 1498,col 9)-(line 1498,col 75)",
      "(line 1499,col 9)-(line 1499,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()",
    "snippet": "@Test\n    public void testCopyDirectoryErrors() throws Exception {\n        try {\n            FileUtils.copyDirectory(null, null);\n            fail();\n        } catch (final NullPointerException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(new File(\"a\"), null);\n            fail();\n        } catch (final NullPointerException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(null, new File(\"a\"));\n            fail();\n        } catch (final NullPointerException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(new File(\"doesnt-exist\"), new File(\"a\"));\n            fail();\n        } catch (final IOException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(testFile1, new File(\"a\"));\n            fail();\n        } catch (final IOException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(temporaryFolder, testFile1);\n            fail();\n        } catch (final IOException ignore) {\n        }\n        try {\n            FileUtils.copyDirectory(temporaryFolder, temporaryFolder);\n            fail();\n        } catch (final IOException ignore) {\n        }\n    }",
    "begin_line": 1503,
    "end_line": 1539,
    "comment": "",
    "child_ranges": [
      "(line 1504,col 9)-(line 1508,col 9)",
      "(line 1509,col 9)-(line 1513,col 9)",
      "(line 1514,col 9)-(line 1518,col 9)",
      "(line 1519,col 9)-(line 1523,col 9)",
      "(line 1524,col 9)-(line 1528,col 9)",
      "(line 1529,col 9)-(line 1533,col 9)",
      "(line 1534,col 9)-(line 1538,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFile()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithFile() throws IOException {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        if (!directory.exists()) {\n            directory.mkdirs();\n        }\n        final File destination \u003d new File(directory, testFile1.getName());\n\n        FileUtils.copyToDirectory(testFile1, directory);\n        assertTrue(destination.exists(), \"Check Exists\");\n        assertEquals(testFile1Size, destination.length(), \"Check Full Copy\");\n    }",
    "begin_line": 1544,
    "end_line": 1554,
    "comment": "",
    "child_ranges": [
      "(line 1545,col 9)-(line 1545,col 67)",
      "(line 1546,col 9)-(line 1548,col 9)",
      "(line 1549,col 9)-(line 1549,col 74)",
      "(line 1551,col 9)-(line 1551,col 56)",
      "(line 1552,col 9)-(line 1552,col 57)",
      "(line 1553,col 9)-(line 1553,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceIsNull()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithFileSourceIsNull() {\n        assertThrows(NullPointerException.class, () -\u003e FileUtils.copyToDirectory((File) null, temporaryFolder));\n    }",
    "begin_line": 1557,
    "end_line": 1559,
    "comment": "",
    "child_ranges": [
      "(line 1558,col 9)-(line 1558,col 112)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceDoesNotExist()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithFileSourceDoesNotExist() {\n        assertThrows(IOException.class,\n                () -\u003e FileUtils.copyToDirectory(new File(temporaryFolder, \"doesNotExists\"), temporaryFolder));\n    }",
    "begin_line": 1562,
    "end_line": 1565,
    "comment": "",
    "child_ranges": [
      "(line 1563,col 9)-(line 1564,col 110)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithDirectory()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithDirectory() throws IOException {\n        final File destDirectory \u003d new File(temporaryFolder, \"destination\");\n        if (!destDirectory.exists()) {\n            destDirectory.mkdirs();\n        }\n\n        // Create a test directory\n        final File inputDirectory \u003d new File(temporaryFolder, \"input\");\n        if (!inputDirectory.exists()) {\n            inputDirectory.mkdirs();\n        }\n        final File outputDirDestination \u003d new File(destDirectory, inputDirectory.getName());\n        FileUtils.copyToDirectory(testFile1, inputDirectory);\n        final File destFile1 \u003d new File(outputDirDestination, testFile1.getName());\n        FileUtils.copyToDirectory(testFile2, inputDirectory);\n        final File destFile2 \u003d new File(outputDirDestination, testFile2.getName());\n\n        FileUtils.copyToDirectory(inputDirectory, destDirectory);\n\n        // Check the directory was created\n        assertTrue(outputDirDestination.exists(), \"Check Exists\");\n        assertTrue(outputDirDestination.isDirectory(), \"Check Directory\");\n\n        // Check each file\n        assertTrue(destFile1.exists(), \"Check Exists\");\n        assertEquals(testFile1Size, destFile1.length(), \"Check Full Copy\");\n        assertTrue(destFile2.exists(), \"Check Exists\");\n        assertEquals(testFile2Size, destFile2.length(), \"Check Full Copy\");\n    }",
    "begin_line": 1568,
    "end_line": 1596,
    "comment": "",
    "child_ranges": [
      "(line 1569,col 9)-(line 1569,col 76)",
      "(line 1570,col 9)-(line 1572,col 9)",
      "(line 1575,col 9)-(line 1575,col 71)",
      "(line 1576,col 9)-(line 1578,col 9)",
      "(line 1579,col 9)-(line 1579,col 92)",
      "(line 1580,col 9)-(line 1580,col 61)",
      "(line 1581,col 9)-(line 1581,col 83)",
      "(line 1582,col 9)-(line 1582,col 61)",
      "(line 1583,col 9)-(line 1583,col 83)",
      "(line 1585,col 9)-(line 1585,col 65)",
      "(line 1588,col 9)-(line 1588,col 66)",
      "(line 1589,col 9)-(line 1589,col 74)",
      "(line 1592,col 9)-(line 1592,col 55)",
      "(line 1593,col 9)-(line 1593,col 75)",
      "(line 1594,col 9)-(line 1594,col 55)",
      "(line 1595,col 9)-(line 1595,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterable()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithIterable() throws IOException {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        if (!directory.exists()) {\n            directory.mkdirs();\n        }\n\n        final List\u003cFile\u003e input \u003d new ArrayList\u003c\u003e();\n        input.add(testFile1);\n        input.add(testFile2);\n\n        final File destFile1 \u003d new File(directory, testFile1.getName());\n        final File destFile2 \u003d new File(directory, testFile2.getName());\n\n        FileUtils.copyToDirectory(input, directory);\n        // Check each file\n        assertTrue(destFile1.exists(), \"Check Exists\");\n        assertEquals(testFile1Size, destFile1.length(), \"Check Full Copy\");\n        assertTrue(destFile2.exists(), \"Check Exists\");\n        assertEquals(testFile2Size, destFile2.length(), \"Check Full Copy\");\n    }",
    "begin_line": 1599,
    "end_line": 1618,
    "comment": "",
    "child_ranges": [
      "(line 1600,col 9)-(line 1600,col 67)",
      "(line 1601,col 9)-(line 1603,col 9)",
      "(line 1605,col 9)-(line 1605,col 51)",
      "(line 1606,col 9)-(line 1606,col 29)",
      "(line 1607,col 9)-(line 1607,col 29)",
      "(line 1609,col 9)-(line 1609,col 72)",
      "(line 1610,col 9)-(line 1610,col 72)",
      "(line 1612,col 9)-(line 1612,col 52)",
      "(line 1614,col 9)-(line 1614,col 55)",
      "(line 1615,col 9)-(line 1615,col 75)",
      "(line 1616,col 9)-(line 1616,col 55)",
      "(line 1617,col 9)-(line 1617,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceIsNull()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithIterableSourceIsNull() {\n        assertThrows(NullPointerException.class, () -\u003e FileUtils.copyToDirectory((List\u003cFile\u003e) null, temporaryFolder));\n    }",
    "begin_line": 1621,
    "end_line": 1623,
    "comment": "",
    "child_ranges": [
      "(line 1622,col 9)-(line 1622,col 118)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceDoesNotExist()",
    "snippet": "@Test\n    public void testCopyToDirectoryWithIterableSourceDoesNotExist() {\n        assertThrows(IOException.class,\n                () -\u003e FileUtils.copyToDirectory(Collections.singleton(new File(temporaryFolder, \"doesNotExists\")),\n                        temporaryFolder));\n    }",
    "begin_line": 1626,
    "end_line": 1630,
    "comment": "",
    "child_ranges": [
      "(line 1627,col 9)-(line 1629,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()",
    "snippet": "@Test\n    public void testForceDeleteAFile1() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy1.txt\");\n        destination.createNewFile();\n        assertTrue(destination.exists(), \"Copy1.txt doesn\u0027t exist to delete\");\n        FileUtils.forceDelete(destination);\n        assertTrue(!destination.exists(), \"Check No Exist\");\n    }",
    "begin_line": 1635,
    "end_line": 1641,
    "comment": "",
    "child_ranges": [
      "(line 1636,col 9)-(line 1636,col 72)",
      "(line 1637,col 9)-(line 1637,col 36)",
      "(line 1638,col 9)-(line 1638,col 78)",
      "(line 1639,col 9)-(line 1639,col 43)",
      "(line 1640,col 9)-(line 1640,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()",
    "snippet": "@Test\n    public void testForceDeleteAFile2() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"copy2.txt\");\n        destination.createNewFile();\n        assertTrue(destination.exists(), \"Copy2.txt doesn\u0027t exist to delete\");\n        FileUtils.forceDelete(destination);\n        assertTrue(!destination.exists(), \"Check No Exist\");\n    }",
    "begin_line": 1644,
    "end_line": 1650,
    "comment": "",
    "child_ranges": [
      "(line 1645,col 9)-(line 1645,col 72)",
      "(line 1646,col 9)-(line 1646,col 36)",
      "(line 1647,col 9)-(line 1647,col 78)",
      "(line 1648,col 9)-(line 1648,col 43)",
      "(line 1649,col 9)-(line 1649,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()",
    "snippet": "@Test\n    public void testForceDeleteAFile3() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"no_such_file\");\n        assertTrue(!destination.exists(), \"Check No Exist\");\n        try {\n            FileUtils.forceDelete(destination);\n            fail(\"Should generate FileNotFoundException\");\n        } catch (final FileNotFoundException ignored) {\n        }\n    }",
    "begin_line": 1653,
    "end_line": 1661,
    "comment": "",
    "child_ranges": [
      "(line 1654,col 9)-(line 1654,col 75)",
      "(line 1655,col 9)-(line 1655,col 60)",
      "(line 1656,col 9)-(line 1660,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()",
    "snippet": "@Test\n    public void testCopyFile1ToDir() throws Exception {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        if (!directory.exists()) {\n            directory.mkdirs();\n        }\n        final File destination \u003d new File(directory, testFile1.getName());\n\n        //Thread.sleep(LAST_MODIFIED_DELAY);\n        //This is to slow things down so we can catch if\n        //the lastModified date is not ok\n\n        FileUtils.copyFileToDirectory(testFile1, directory);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(testFile1Size, destination.length(), \"Check Full copy\");\n        /* disabled: Thread.sleep doesn\u0027t work reliantly for this case\n        assertTrue(\"Check last modified date preserved\",\n            testFile1.lastModified() \u003d\u003d destination.lastModified());*/\n\n        try {\n            FileUtils.copyFileToDirectory(destination, directory);\n            fail(\"Should not be able to copy a file into the same directory as itself\");\n        } catch (final IOException ioe) {\n            //we want that, cannot copy to the same directory as the original file\n        }\n    }",
    "begin_line": 1666,
    "end_line": 1690,
    "comment": "",
    "child_ranges": [
      "(line 1667,col 9)-(line 1667,col 67)",
      "(line 1668,col 9)-(line 1670,col 9)",
      "(line 1671,col 9)-(line 1671,col 74)",
      "(line 1677,col 9)-(line 1677,col 60)",
      "(line 1678,col 9)-(line 1678,col 56)",
      "(line 1679,col 9)-(line 1679,col 77)",
      "(line 1684,col 9)-(line 1689,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()",
    "snippet": "@Test\n    public void testCopyFile2ToDir() throws Exception {\n        final File directory \u003d new File(temporaryFolder, \"subdir\");\n        if (!directory.exists()) {\n            directory.mkdirs();\n        }\n        final File destination \u003d new File(directory, testFile1.getName());\n\n        //Thread.sleep(LAST_MODIFIED_DELAY);\n        //This is to slow things down so we can catch if\n        //the lastModified date is not ok\n\n        FileUtils.copyFileToDirectory(testFile1, directory);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertEquals(testFile2Size, destination.length(), \"Check Full copy\");\n        /* disabled: Thread.sleep doesn\u0027t work reliantly for this case\n        assertTrue(\"Check last modified date preserved\",\n            testFile1.lastModified() \u003d\u003d destination.lastModified());*/\n    }",
    "begin_line": 1693,
    "end_line": 1710,
    "comment": "",
    "child_ranges": [
      "(line 1694,col 9)-(line 1694,col 67)",
      "(line 1695,col 9)-(line 1697,col 9)",
      "(line 1698,col 9)-(line 1698,col 74)",
      "(line 1704,col 9)-(line 1704,col 60)",
      "(line 1705,col 9)-(line 1705,col 56)",
      "(line 1706,col 9)-(line 1706,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()",
    "snippet": "@Test\n    public void testForceDeleteDir() throws Exception {\n        final File testDirectory \u003d temporaryFolder;\n        assertTrue(testDirectory.exists(), \"TestDirectory must exist\");\n        FileUtils.forceDelete(testDirectory);\n        assertFalse(testDirectory.exists(), \"TestDirectory must not exist\");\n    }",
    "begin_line": 1715,
    "end_line": 1720,
    "comment": "",
    "child_ranges": [
      "(line 1716,col 9)-(line 1716,col 51)",
      "(line 1717,col 9)-(line 1717,col 71)",
      "(line 1718,col 9)-(line 1718,col 45)",
      "(line 1719,col 9)-(line 1719,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()",
    "snippet": "@Test\n    public void testFileUtils() throws Exception {\n        // Loads file from classpath\n        final File file1 \u003d new File(temporaryFolder, \"test.txt\");\n        final String filename \u003d file1.getAbsolutePath();\n\n        //Create test file on-the-fly (used to be in CVS)\n        try (OutputStream out \u003d new FileOutputStream(file1)) {\n            out.write(\"This is a test\".getBytes(\"UTF-8\"));\n        }\n\n        final File file2 \u003d new File(temporaryFolder, \"test2.txt\");\n\n        FileUtils.writeStringToFile(file2, filename, \"UTF-8\");\n        assertTrue(file2.exists());\n        assertTrue(file2.length() \u003e 0);\n\n        final String file2contents \u003d FileUtils.readFileToString(file2, \"UTF-8\");\n        assertTrue(filename.equals(file2contents), \"Second file\u0027s contents correct\");\n\n        assertTrue(file2.delete());\n\n        final String contents \u003d FileUtils.readFileToString(new File(filename), \"UTF-8\");\n        assertEquals(\"This is a test\", contents, \"FileUtils.fileRead()\");\n\n    }",
    "begin_line": 1726,
    "end_line": 1750,
    "comment": "",
    "child_ranges": [
      "(line 1728,col 9)-(line 1728,col 65)",
      "(line 1729,col 9)-(line 1729,col 56)",
      "(line 1732,col 9)-(line 1734,col 9)",
      "(line 1736,col 9)-(line 1736,col 66)",
      "(line 1738,col 9)-(line 1738,col 62)",
      "(line 1739,col 9)-(line 1739,col 35)",
      "(line 1740,col 9)-(line 1740,col 39)",
      "(line 1742,col 9)-(line 1742,col 80)",
      "(line 1743,col 9)-(line 1743,col 85)",
      "(line 1745,col 9)-(line 1745,col 35)",
      "(line 1747,col 9)-(line 1747,col 88)",
      "(line 1748,col 9)-(line 1748,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testTouch()",
    "snippet": "@Test\n    public void testTouch() throws IOException {\n        final File file \u003d new File(temporaryFolder, \"touch.txt\");\n        if (file.exists()) {\n            file.delete();\n        }\n        assertTrue(!file.exists(), \"Bad test: test file still exists\");\n        FileUtils.touch(file);\n        assertTrue(file.exists(), \"FileUtils.touch() created file\");\n        final FileOutputStream out \u003d new FileOutputStream(file);\n        assertEquals(0, file.length(), \"Created empty file.\");\n        out.write(0);\n        out.close();\n        assertEquals(1, file.length(), \"Wrote one byte to file\");\n        final long y2k \u003d new GregorianCalendar(2000, 0, 1).getTime().getTime();\n        final boolean res \u003d file.setLastModified(y2k);  // 0L fails on Win98\n        assertEquals(true, res, \"Bad test: set lastModified failed\");\n        assertEquals(y2k, file.lastModified(), \"Bad test: set lastModified set incorrect value\");\n        final long now \u003d System.currentTimeMillis();\n        FileUtils.touch(file);\n        assertEquals(1, file.length(), \"FileUtils.touch() didn\u0027t empty the file.\");\n        assertEquals(false, y2k \u003d\u003d file.lastModified(), \"FileUtils.touch() changed lastModified\");\n        assertEquals(true, file.lastModified() \u003e\u003d now - 3000, \"FileUtils.touch() changed lastModified to more than now-3s\");\n        assertEquals(true, file.lastModified() \u003c\u003d now + 3000, \"FileUtils.touch() changed lastModified to less than now+3s\");\n    }",
    "begin_line": 1753,
    "end_line": 1776,
    "comment": "",
    "child_ranges": [
      "(line 1754,col 9)-(line 1754,col 65)",
      "(line 1755,col 9)-(line 1757,col 9)",
      "(line 1758,col 9)-(line 1758,col 71)",
      "(line 1759,col 9)-(line 1759,col 30)",
      "(line 1760,col 9)-(line 1760,col 68)",
      "(line 1761,col 9)-(line 1761,col 64)",
      "(line 1762,col 9)-(line 1762,col 62)",
      "(line 1763,col 9)-(line 1763,col 21)",
      "(line 1764,col 9)-(line 1764,col 20)",
      "(line 1765,col 9)-(line 1765,col 65)",
      "(line 1766,col 9)-(line 1766,col 79)",
      "(line 1767,col 9)-(line 1767,col 54)",
      "(line 1768,col 9)-(line 1768,col 69)",
      "(line 1769,col 9)-(line 1769,col 97)",
      "(line 1770,col 9)-(line 1770,col 52)",
      "(line 1771,col 9)-(line 1771,col 30)",
      "(line 1772,col 9)-(line 1772,col 83)",
      "(line 1773,col 9)-(line 1773,col 98)",
      "(line 1774,col 9)-(line 1774,col 124)",
      "(line 1775,col 9)-(line 1775,col 124)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testListFiles()",
    "snippet": "@Test\n    public void testListFiles() throws Exception {\n        final File srcDir \u003d temporaryFolder;\n        final File subDir \u003d new File(srcDir, \"list_test\");\n        subDir.mkdir();\n\n        final File subDir2 \u003d new File(subDir, \"subdir\");\n        subDir2.mkdir();\n\n        final String[] fileNames \u003d {\"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\"};\n        final int[] fileSizes \u003d {123, 234, 345, 456, 678, 789};\n\n        for (int i \u003d 0; i \u003c fileNames.length; ++i) {\n            final File theFile \u003d new File(subDir, fileNames[i]);\n            if (!theFile.getParentFile().exists()) {\n                throw new IOException(\"Cannot create file \" + theFile\n                        + \" as the parent directory does not exist\");\n            }\n            final BufferedOutputStream output \u003d\n                    new BufferedOutputStream(new FileOutputStream(theFile));\n            try {\n                TestUtils.generateTestData(output, fileSizes[i]);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        }\n\n        final Collection\u003cFile\u003e files \u003d FileUtils.listFiles(subDir,\n                new WildcardFileFilter(\"*.*\"),\n                new WildcardFileFilter(\"*\"));\n\n        final int count \u003d files.size();\n        final Object[] fileObjs \u003d files.toArray();\n\n        assertEquals(fileNames.length, files.size());\n\n        final Map\u003cString, String\u003e foundFileNames \u003d new HashMap\u003c\u003e();\n\n        for (int i \u003d 0; i \u003c count; ++i) {\n            boolean found \u003d false;\n            for (int j \u003d 0; !found \u0026\u0026 j \u003c fileNames.length; ++j) {\n                if (fileNames[j].equals(((File) fileObjs[i]).getName())) {\n                    foundFileNames.put(fileNames[j], fileNames[j]);\n                    found \u003d true;\n                }\n            }\n        }\n\n        assertEquals(foundFileNames.size(), fileNames.length);\n\n        subDir.delete();\n    }",
    "begin_line": 1779,
    "end_line": 1829,
    "comment": "",
    "child_ranges": [
      "(line 1780,col 9)-(line 1780,col 44)",
      "(line 1781,col 9)-(line 1781,col 58)",
      "(line 1782,col 9)-(line 1782,col 23)",
      "(line 1784,col 9)-(line 1784,col 56)",
      "(line 1785,col 9)-(line 1785,col 24)",
      "(line 1787,col 9)-(line 1787,col 90)",
      "(line 1788,col 9)-(line 1788,col 63)",
      "(line 1790,col 9)-(line 1803,col 9)",
      "(line 1805,col 9)-(line 1807,col 45)",
      "(line 1809,col 9)-(line 1809,col 39)",
      "(line 1810,col 9)-(line 1810,col 50)",
      "(line 1812,col 9)-(line 1812,col 53)",
      "(line 1814,col 9)-(line 1814,col 67)",
      "(line 1816,col 9)-(line 1824,col 9)",
      "(line 1826,col 9)-(line 1826,col 62)",
      "(line 1828,col 9)-(line 1828,col 24)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()",
    "snippet": "@Test\n    public void testListFilesWithDirs() throws IOException {\n        final File srcDir \u003d temporaryFolder;\n\n        final File subDir1 \u003d new File(srcDir, \"subdir\");\n        subDir1.mkdir();\n\n        final File subDir2 \u003d new File(subDir1, \"subdir2\");\n        subDir2.mkdir();\n\n        final File someFile \u003d new File(subDir2, \"a.txt\");\n        if (!someFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + someFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(someFile));\n        try {\n            TestUtils.generateTestData(output, 100);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n\n        final File subDir3 \u003d new File(subDir2, \"subdir3\");\n        subDir3.mkdir();\n\n        final Collection\u003cFile\u003e files \u003d FileUtils.listFilesAndDirs(subDir1,\n                new WildcardFileFilter(\"*.*\"), new WildcardFileFilter(\"*\"));\n\n        assertEquals(4, files.size());\n        assertTrue(files.contains(subDir1), \"Should contain the directory.\");\n        assertTrue(files.contains(subDir2), \"Should contain the directory.\");\n        assertTrue(files.contains(someFile), \"Should contain the file.\");\n        assertTrue(files.contains(subDir3), \"Should contain the directory.\");\n\n        subDir1.delete();\n    }",
    "begin_line": 1832,
    "end_line": 1867,
    "comment": "",
    "child_ranges": [
      "(line 1833,col 9)-(line 1833,col 44)",
      "(line 1835,col 9)-(line 1835,col 56)",
      "(line 1836,col 9)-(line 1836,col 24)",
      "(line 1838,col 9)-(line 1838,col 58)",
      "(line 1839,col 9)-(line 1839,col 24)",
      "(line 1841,col 9)-(line 1841,col 57)",
      "(line 1842,col 9)-(line 1845,col 9)",
      "(line 1846,col 9)-(line 1847,col 73)",
      "(line 1848,col 9)-(line 1852,col 9)",
      "(line 1854,col 9)-(line 1854,col 58)",
      "(line 1855,col 9)-(line 1855,col 24)",
      "(line 1857,col 9)-(line 1858,col 76)",
      "(line 1860,col 9)-(line 1860,col 38)",
      "(line 1861,col 9)-(line 1861,col 77)",
      "(line 1862,col 9)-(line 1862,col 77)",
      "(line 1863,col 9)-(line 1863,col 73)",
      "(line 1864,col 9)-(line 1864,col 77)",
      "(line 1866,col 9)-(line 1866,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIterateFiles()",
    "snippet": "@Test\n    public void testIterateFiles() throws Exception {\n        final File srcDir \u003d temporaryFolder;\n        final File subDir \u003d new File(srcDir, \"list_test\");\n        subDir.mkdir();\n\n        final String[] fileNames \u003d {\"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\"};\n        final int[] fileSizes \u003d {123, 234, 345, 456, 678, 789};\n\n        for (int i \u003d 0; i \u003c fileNames.length; ++i) {\n            final File theFile \u003d new File(subDir, fileNames[i]);\n            if (!theFile.getParentFile().exists()) {\n                throw new IOException(\"Cannot create file \" + theFile\n                        + \" as the parent directory does not exist\");\n            }\n            final BufferedOutputStream output \u003d\n                    new BufferedOutputStream(new FileOutputStream(theFile));\n            try {\n                TestUtils.generateTestData(output, fileSizes[i]);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        }\n\n        final Iterator\u003cFile\u003e files \u003d FileUtils.iterateFiles(subDir,\n                new WildcardFileFilter(\"*.*\"),\n                new WildcardFileFilter(\"*\"));\n\n        final Map\u003cString, String\u003e foundFileNames \u003d new HashMap\u003c\u003e();\n\n        while (files.hasNext()) {\n            boolean found \u003d false;\n            final String fileName \u003d files.next().getName();\n\n            for (int j \u003d 0; !found \u0026\u0026 j \u003c fileNames.length; ++j) {\n                if (fileNames[j].equals(fileName)) {\n                    foundFileNames.put(fileNames[j], fileNames[j]);\n                    found \u003d true;\n                }\n            }\n        }\n\n        assertEquals(foundFileNames.size(), fileNames.length);\n\n        subDir.delete();\n    }",
    "begin_line": 1870,
    "end_line": 1914,
    "comment": "",
    "child_ranges": [
      "(line 1871,col 9)-(line 1871,col 44)",
      "(line 1872,col 9)-(line 1872,col 58)",
      "(line 1873,col 9)-(line 1873,col 23)",
      "(line 1875,col 9)-(line 1875,col 90)",
      "(line 1876,col 9)-(line 1876,col 63)",
      "(line 1878,col 9)-(line 1891,col 9)",
      "(line 1893,col 9)-(line 1895,col 45)",
      "(line 1897,col 9)-(line 1897,col 67)",
      "(line 1899,col 9)-(line 1909,col 9)",
      "(line 1911,col 9)-(line 1911,col 62)",
      "(line 1913,col 9)-(line 1913,col 24)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()",
    "snippet": "@Test\n    public void testIterateFilesAndDirs() throws IOException {\n        final File srcDir \u003d temporaryFolder;\n\n        final File subDir1 \u003d new File(srcDir, \"subdir\");\n        subDir1.mkdir();\n\n        final File subDir2 \u003d new File(subDir1, \"subdir2\");\n        subDir2.mkdir();\n\n        final File someFile \u003d new File(subDir2, \"a.txt\");\n        if (!someFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + someFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(someFile));\n        try {\n            TestUtils.generateTestData(output, 100);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n\n        final File subDir3 \u003d new File(subDir2, \"subdir3\");\n        subDir3.mkdir();\n\n        final Collection\u003cFile\u003e filesAndDirs \u003d Arrays.asList(subDir1, subDir2, someFile, subDir3);\n\n        int filesCount \u003d 0;\n        final Iterator\u003cFile\u003e files \u003d FileUtils.iterateFilesAndDirs(subDir1,\n                new WildcardFileFilter(\"*.*\"),\n                new WildcardFileFilter(\"*\"));\n        while (files.hasNext()) {\n            filesCount++;\n            final File file \u003d files.next();\n            assertTrue(filesAndDirs.contains(file), \"Should contain the directory/file\");\n        }\n\n        assertEquals(filesCount, filesAndDirs.size());\n    }",
    "begin_line": 1917,
    "end_line": 1955,
    "comment": "",
    "child_ranges": [
      "(line 1918,col 9)-(line 1918,col 44)",
      "(line 1920,col 9)-(line 1920,col 56)",
      "(line 1921,col 9)-(line 1921,col 24)",
      "(line 1923,col 9)-(line 1923,col 58)",
      "(line 1924,col 9)-(line 1924,col 24)",
      "(line 1926,col 9)-(line 1926,col 57)",
      "(line 1927,col 9)-(line 1930,col 9)",
      "(line 1931,col 9)-(line 1932,col 73)",
      "(line 1933,col 9)-(line 1937,col 9)",
      "(line 1939,col 9)-(line 1939,col 58)",
      "(line 1940,col 9)-(line 1940,col 24)",
      "(line 1942,col 9)-(line 1942,col 97)",
      "(line 1944,col 9)-(line 1944,col 27)",
      "(line 1945,col 9)-(line 1947,col 45)",
      "(line 1948,col 9)-(line 1952,col 9)",
      "(line 1954,col 9)-(line 1954,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()",
    "snippet": "@Test\n    public void testReadFileToStringWithDefaultEncoding() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"read.obj\");\n        final FileOutputStream out \u003d new FileOutputStream(file);\n        final byte[] text \u003d \"Hello /u1234\".getBytes();\n        out.write(text);\n        out.close();\n\n        final String data \u003d FileUtils.readFileToString(file);\n        assertEquals(\"Hello /u1234\", data);\n    }",
    "begin_line": 1958,
    "end_line": 1967,
    "comment": "",
    "child_ranges": [
      "(line 1959,col 9)-(line 1959,col 64)",
      "(line 1960,col 9)-(line 1960,col 64)",
      "(line 1961,col 9)-(line 1961,col 54)",
      "(line 1962,col 9)-(line 1962,col 24)",
      "(line 1963,col 9)-(line 1963,col 20)",
      "(line 1965,col 9)-(line 1965,col 61)",
      "(line 1966,col 9)-(line 1966,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()",
    "snippet": "@Test\n    public void testReadFileToStringWithEncoding() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"read.obj\");\n        final FileOutputStream out \u003d new FileOutputStream(file);\n        final byte[] text \u003d \"Hello /u1234\".getBytes(\"UTF8\");\n        out.write(text);\n        out.close();\n\n        final String data \u003d FileUtils.readFileToString(file, \"UTF8\");\n        assertEquals(\"Hello /u1234\", data);\n    }",
    "begin_line": 1970,
    "end_line": 1979,
    "comment": "",
    "child_ranges": [
      "(line 1971,col 9)-(line 1971,col 64)",
      "(line 1972,col 9)-(line 1972,col 64)",
      "(line 1973,col 9)-(line 1973,col 60)",
      "(line 1974,col 9)-(line 1974,col 24)",
      "(line 1975,col 9)-(line 1975,col 20)",
      "(line 1977,col 9)-(line 1977,col 69)",
      "(line 1978,col 9)-(line 1978,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()",
    "snippet": "@Test\n    public void testReadFileToByteArray() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"read.txt\");\n        final FileOutputStream out \u003d new FileOutputStream(file);\n        out.write(11);\n        out.write(21);\n        out.write(31);\n        out.close();\n\n        final byte[] data \u003d FileUtils.readFileToByteArray(file);\n        assertEquals(3, data.length);\n        assertEquals(11, data[0]);\n        assertEquals(21, data[1]);\n        assertEquals(31, data[2]);\n    }",
    "begin_line": 1982,
    "end_line": 1995,
    "comment": "",
    "child_ranges": [
      "(line 1983,col 9)-(line 1983,col 64)",
      "(line 1984,col 9)-(line 1984,col 64)",
      "(line 1985,col 9)-(line 1985,col 22)",
      "(line 1986,col 9)-(line 1986,col 22)",
      "(line 1987,col 9)-(line 1987,col 22)",
      "(line 1988,col 9)-(line 1988,col 20)",
      "(line 1990,col 9)-(line 1990,col 64)",
      "(line 1991,col 9)-(line 1991,col 37)",
      "(line 1992,col 9)-(line 1992,col 34)",
      "(line 1993,col 9)-(line 1993,col 34)",
      "(line 1994,col 9)-(line 1994,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testReadLines()",
    "snippet": "@Test\n    public void testReadLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        try {\n            final String[] data \u003d new String[]{\"hello\", \"/u1234\", \"\", \"this is\", \"some text\"};\n            TestUtils.createLineBasedFile(file, data);\n\n            final List\u003cString\u003e lines \u003d FileUtils.readLines(file, \"UTF-8\");\n            assertEquals(Arrays.asList(data), lines);\n        } finally {\n            TestUtils.deleteFile(file);\n        }\n    }",
    "begin_line": 1998,
    "end_line": 2009,
    "comment": "",
    "child_ranges": [
      "(line 1999,col 9)-(line 1999,col 74)",
      "(line 2000,col 9)-(line 2008,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()",
    "snippet": "@Test\n    public void testWriteStringToFile1() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.txt\");\n        FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");\n        final byte[] text \u003d \"Hello /u1234\".getBytes(\"UTF8\");\n        TestUtils.assertEqualContent(text, file);\n    }",
    "begin_line": 2012,
    "end_line": 2017,
    "comment": "",
    "child_ranges": [
      "(line 2013,col 9)-(line 2013,col 65)",
      "(line 2014,col 9)-(line 2014,col 66)",
      "(line 2015,col 9)-(line 2015,col 60)",
      "(line 2016,col 9)-(line 2016,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()",
    "snippet": "@Test\n    public void testWriteStringToFile2() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.txt\");\n        FileUtils.writeStringToFile(file, \"Hello /u1234\", (String) null);\n        final byte[] text \u003d \"Hello /u1234\".getBytes();\n        TestUtils.assertEqualContent(text, file);\n    }",
    "begin_line": 2020,
    "end_line": 2025,
    "comment": "",
    "child_ranges": [
      "(line 2021,col 9)-(line 2021,col 65)",
      "(line 2022,col 9)-(line 2022,col 73)",
      "(line 2023,col 9)-(line 2023,col 54)",
      "(line 2024,col 9)-(line 2024,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()",
    "snippet": "@Test\n    public void testWriteStringToFile3() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.txt\");\n        FileUtils.writeStringToFile(file, \"Hello /u1234\", (Charset) null);\n        final byte[] text \u003d \"Hello /u1234\".getBytes();\n        TestUtils.assertEqualContent(text, file);\n    }",
    "begin_line": 2028,
    "end_line": 2033,
    "comment": "",
    "child_ranges": [
      "(line 2029,col 9)-(line 2029,col 65)",
      "(line 2030,col 9)-(line 2030,col 74)",
      "(line 2031,col 9)-(line 2031,col 54)",
      "(line 2032,col 9)-(line 2032,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()",
    "snippet": "@Test\n    public void testWriteCharSequence1() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.txt\");\n        FileUtils.write(file, \"Hello /u1234\", \"UTF8\");\n        final byte[] text \u003d \"Hello /u1234\".getBytes(\"UTF8\");\n        TestUtils.assertEqualContent(text, file);\n    }",
    "begin_line": 2036,
    "end_line": 2041,
    "comment": "",
    "child_ranges": [
      "(line 2037,col 9)-(line 2037,col 65)",
      "(line 2038,col 9)-(line 2038,col 54)",
      "(line 2039,col 9)-(line 2039,col 60)",
      "(line 2040,col 9)-(line 2040,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()",
    "snippet": "@Test\n    public void testWriteCharSequence2() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.txt\");\n        FileUtils.write(file, \"Hello /u1234\", (String) null);\n        final byte[] text \u003d \"Hello /u1234\".getBytes();\n        TestUtils.assertEqualContent(text, file);\n    }",
    "begin_line": 2044,
    "end_line": 2049,
    "comment": "",
    "child_ranges": [
      "(line 2045,col 9)-(line 2045,col 65)",
      "(line 2046,col 9)-(line 2046,col 61)",
      "(line 2047,col 9)-(line 2047,col 54)",
      "(line 2048,col 9)-(line 2048,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.obj\");\n        final byte[] data \u003d new byte[]{11, 21, 31};\n        FileUtils.writeByteArrayToFile(file, data);\n        TestUtils.assertEqualContent(data, file);\n    }",
    "begin_line": 2052,
    "end_line": 2057,
    "comment": "",
    "child_ranges": [
      "(line 2053,col 9)-(line 2053,col 65)",
      "(line 2054,col 9)-(line 2054,col 51)",
      "(line 2055,col 9)-(line 2055,col 51)",
      "(line 2056,col 9)-(line 2056,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile_WithOffsetAndLength() throws Exception {\n        final File file \u003d new File(temporaryFolder, \"write.obj\");\n        final byte[] data \u003d new byte[]{11, 21, 32, 41, 51};\n        final byte[] writtenData \u003d new byte[3];\n        System.arraycopy(data, 1, writtenData, 0, 3);\n        FileUtils.writeByteArrayToFile(file, data, 1, 3);\n        TestUtils.assertEqualContent(writtenData, file);\n    }",
    "begin_line": 2060,
    "end_line": 2067,
    "comment": "",
    "child_ranges": [
      "(line 2061,col 9)-(line 2061,col 65)",
      "(line 2062,col 9)-(line 2062,col 59)",
      "(line 2063,col 9)-(line 2063,col 47)",
      "(line 2064,col 9)-(line 2064,col 53)",
      "(line 2065,col 9)-(line 2065,col 57)",
      "(line 2066,col 9)-(line 2066,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()",
    "snippet": "@Test\n    public void testWriteLines_4arg() throws Exception {\n        final Object[] data \u003d new Object[]{\n                \"hello\", new StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\"};\n        final List\u003cObject\u003e list \u003d Arrays.asList(data);\n\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeLines(file, \"US-ASCII\", list, \"*\");\n\n        final String expected \u003d \"hello*world**this is**some text*\";\n        final String actual \u003d FileUtils.readFileToString(file, \"US-ASCII\");\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2070,
    "end_line": 2081,
    "comment": "",
    "child_ranges": [
      "(line 2071,col 9)-(line 2072,col 86)",
      "(line 2073,col 9)-(line 2073,col 54)",
      "(line 2075,col 9)-(line 2075,col 74)",
      "(line 2076,col 9)-(line 2076,col 58)",
      "(line 2078,col 9)-(line 2078,col 67)",
      "(line 2079,col 9)-(line 2079,col 75)",
      "(line 2080,col 9)-(line 2080,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()",
    "snippet": "@Test\n    public void testWriteLines_4arg_Writer_nullData() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeLines(file, \"US-ASCII\", null, \"*\");\n\n        assertEquals(0, file.length(), \"Sizes differ\");\n    }",
    "begin_line": 2084,
    "end_line": 2089,
    "comment": "",
    "child_ranges": [
      "(line 2085,col 9)-(line 2085,col 74)",
      "(line 2086,col 9)-(line 2086,col 58)",
      "(line 2088,col 9)-(line 2088,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()",
    "snippet": "@Test\n    public void testWriteLines_4arg_nullSeparator() throws Exception {\n        final Object[] data \u003d new Object[]{\n                \"hello\", new StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\"};\n        final List\u003cObject\u003e list \u003d Arrays.asList(data);\n\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeLines(file, \"US-ASCII\", list, null);\n\n        final String expected \u003d \"hello\" + IOUtils.LINE_SEPARATOR + \"world\" + IOUtils.LINE_SEPARATOR +\n                IOUtils.LINE_SEPARATOR + \"this is\" + IOUtils.LINE_SEPARATOR +\n                IOUtils.LINE_SEPARATOR + \"some text\" + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file, \"US-ASCII\");\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2092,
    "end_line": 2105,
    "comment": "",
    "child_ranges": [
      "(line 2093,col 9)-(line 2094,col 86)",
      "(line 2095,col 9)-(line 2095,col 54)",
      "(line 2097,col 9)-(line 2097,col 74)",
      "(line 2098,col 9)-(line 2098,col 59)",
      "(line 2100,col 9)-(line 2102,col 78)",
      "(line 2103,col 9)-(line 2103,col 75)",
      "(line 2104,col 9)-(line 2104,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()",
    "snippet": "@Test\n    public void testWriteLines_3arg_nullSeparator() throws Exception {\n        final Object[] data \u003d new Object[]{\n                \"hello\", new StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\"};\n        final List\u003cObject\u003e list \u003d Arrays.asList(data);\n\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeLines(file, \"US-ASCII\", list);\n\n        final String expected \u003d \"hello\" + IOUtils.LINE_SEPARATOR + \"world\" + IOUtils.LINE_SEPARATOR +\n                IOUtils.LINE_SEPARATOR + \"this is\" + IOUtils.LINE_SEPARATOR +\n                IOUtils.LINE_SEPARATOR + \"some text\" + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file, \"US-ASCII\");\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2108,
    "end_line": 2121,
    "comment": "",
    "child_ranges": [
      "(line 2109,col 9)-(line 2110,col 86)",
      "(line 2111,col 9)-(line 2111,col 54)",
      "(line 2113,col 9)-(line 2113,col 74)",
      "(line 2114,col 9)-(line 2114,col 53)",
      "(line 2116,col 9)-(line 2118,col 78)",
      "(line 2119,col 9)-(line 2119,col 75)",
      "(line 2120,col 9)-(line 2120,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, null, linesToAppend, null, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2124,
    "end_line": 2137,
    "comment": "",
    "child_ranges": [
      "(line 2125,col 9)-(line 2125,col 74)",
      "(line 2126,col 9)-(line 2126,col 79)",
      "(line 2128,col 9)-(line 2128,col 93)",
      "(line 2129,col 9)-(line 2129,col 68)",
      "(line 2131,col 9)-(line 2134,col 41)",
      "(line 2135,col 9)-(line 2135,col 63)",
      "(line 2136,col 9)-(line 2136,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, null, linesToAppend, null, false);\n\n        final String expected \u003d \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2140,
    "end_line": 2152,
    "comment": "",
    "child_ranges": [
      "(line 2141,col 9)-(line 2141,col 74)",
      "(line 2142,col 9)-(line 2142,col 79)",
      "(line 2144,col 9)-(line 2144,col 93)",
      "(line 2145,col 9)-(line 2145,col 69)",
      "(line 2147,col 9)-(line 2149,col 41)",
      "(line 2150,col 9)-(line 2150,col 63)",
      "(line 2151,col 9)-(line 2151,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, linesToAppend, null, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2155,
    "end_line": 2168,
    "comment": "",
    "child_ranges": [
      "(line 2156,col 9)-(line 2156,col 74)",
      "(line 2157,col 9)-(line 2157,col 79)",
      "(line 2159,col 9)-(line 2159,col 93)",
      "(line 2160,col 9)-(line 2160,col 62)",
      "(line 2162,col 9)-(line 2165,col 41)",
      "(line 2166,col 9)-(line 2166,col 63)",
      "(line 2167,col 9)-(line 2167,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, linesToAppend, null, false);\n\n        final String expected \u003d \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2171,
    "end_line": 2183,
    "comment": "",
    "child_ranges": [
      "(line 2172,col 9)-(line 2172,col 74)",
      "(line 2173,col 9)-(line 2173,col 79)",
      "(line 2175,col 9)-(line 2175,col 93)",
      "(line 2176,col 9)-(line 2176,col 63)",
      "(line 2178,col 9)-(line 2180,col 41)",
      "(line 2181,col 9)-(line 2181,col 63)",
      "(line 2182,col 9)-(line 2182,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, null, linesToAppend, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2187,
    "end_line": 2200,
    "comment": "",
    "child_ranges": [
      "(line 2188,col 9)-(line 2188,col 74)",
      "(line 2189,col 9)-(line 2189,col 79)",
      "(line 2191,col 9)-(line 2191,col 93)",
      "(line 2192,col 9)-(line 2192,col 62)",
      "(line 2194,col 9)-(line 2197,col 41)",
      "(line 2198,col 9)-(line 2198,col 63)",
      "(line 2199,col 9)-(line 2199,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, null, linesToAppend, false);\n\n        final String expected \u003d \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2203,
    "end_line": 2215,
    "comment": "",
    "child_ranges": [
      "(line 2204,col 9)-(line 2204,col 74)",
      "(line 2205,col 9)-(line 2205,col 79)",
      "(line 2207,col 9)-(line 2207,col 93)",
      "(line 2208,col 9)-(line 2208,col 63)",
      "(line 2210,col 9)-(line 2212,col 41)",
      "(line 2213,col 9)-(line 2213,col 63)",
      "(line 2214,col 9)-(line 2214,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, linesToAppend, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2218,
    "end_line": 2231,
    "comment": "",
    "child_ranges": [
      "(line 2219,col 9)-(line 2219,col 74)",
      "(line 2220,col 9)-(line 2220,col 79)",
      "(line 2222,col 9)-(line 2222,col 93)",
      "(line 2223,col 9)-(line 2223,col 56)",
      "(line 2225,col 9)-(line 2228,col 41)",
      "(line 2229,col 9)-(line 2229,col 63)",
      "(line 2230,col 9)-(line 2230,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final List\u003cString\u003e linesToAppend \u003d Arrays.asList(\"my first line\", \"The second Line\");\n        FileUtils.writeLines(file, linesToAppend, false);\n\n        final String expected \u003d \"my first line\"\n                + IOUtils.LINE_SEPARATOR + \"The second Line\"\n                + IOUtils.LINE_SEPARATOR;\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2234,
    "end_line": 2246,
    "comment": "",
    "child_ranges": [
      "(line 2235,col 9)-(line 2235,col 74)",
      "(line 2236,col 9)-(line 2236,col 79)",
      "(line 2238,col 9)-(line 2238,col 93)",
      "(line 2239,col 9)-(line 2239,col 57)",
      "(line 2241,col 9)-(line 2243,col 41)",
      "(line 2244,col 9)-(line 2244,col 63)",
      "(line 2245,col 9)-(line 2245,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeStringToFile(file, \"this is brand new data\", (String) null, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2249,
    "end_line": 2259,
    "comment": "",
    "child_ranges": [
      "(line 2250,col 9)-(line 2250,col 74)",
      "(line 2251,col 9)-(line 2251,col 79)",
      "(line 2253,col 9)-(line 2253,col 89)",
      "(line 2255,col 9)-(line 2256,col 43)",
      "(line 2257,col 9)-(line 2257,col 63)",
      "(line 2258,col 9)-(line 2258,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeStringToFile(file, \"this is brand new data\", (String) null, false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2262,
    "end_line": 2271,
    "comment": "",
    "child_ranges": [
      "(line 2263,col 9)-(line 2263,col 74)",
      "(line 2264,col 9)-(line 2264,col 79)",
      "(line 2266,col 9)-(line 2266,col 90)",
      "(line 2268,col 9)-(line 2268,col 57)",
      "(line 2269,col 9)-(line 2269,col 63)",
      "(line 2270,col 9)-(line 2270,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeStringToFile(file, \"this is brand new data\", true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2274,
    "end_line": 2284,
    "comment": "",
    "child_ranges": [
      "(line 2275,col 9)-(line 2275,col 74)",
      "(line 2276,col 9)-(line 2276,col 79)",
      "(line 2278,col 9)-(line 2278,col 74)",
      "(line 2280,col 9)-(line 2281,col 43)",
      "(line 2282,col 9)-(line 2282,col 63)",
      "(line 2283,col 9)-(line 2283,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeStringToFile(file, \"this is brand new data\", false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2287,
    "end_line": 2296,
    "comment": "",
    "child_ranges": [
      "(line 2288,col 9)-(line 2288,col 74)",
      "(line 2289,col 9)-(line 2289,col 79)",
      "(line 2291,col 9)-(line 2291,col 75)",
      "(line 2293,col 9)-(line 2293,col 57)",
      "(line 2294,col 9)-(line 2294,col 63)",
      "(line 2295,col 9)-(line 2295,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.write(file, \"this is brand new data\", (String) null, true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2299,
    "end_line": 2309,
    "comment": "",
    "child_ranges": [
      "(line 2300,col 9)-(line 2300,col 74)",
      "(line 2301,col 9)-(line 2301,col 79)",
      "(line 2303,col 9)-(line 2303,col 77)",
      "(line 2305,col 9)-(line 2306,col 43)",
      "(line 2307,col 9)-(line 2307,col 63)",
      "(line 2308,col 9)-(line 2308,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.write(file, \"this is brand new data\", (String) null, false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2312,
    "end_line": 2321,
    "comment": "",
    "child_ranges": [
      "(line 2313,col 9)-(line 2313,col 74)",
      "(line 2314,col 9)-(line 2314,col 79)",
      "(line 2316,col 9)-(line 2316,col 78)",
      "(line 2318,col 9)-(line 2318,col 57)",
      "(line 2319,col 9)-(line 2319,col 63)",
      "(line 2320,col 9)-(line 2320,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.write(file, \"this is brand new data\", true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2324,
    "end_line": 2334,
    "comment": "",
    "child_ranges": [
      "(line 2325,col 9)-(line 2325,col 74)",
      "(line 2326,col 9)-(line 2326,col 79)",
      "(line 2328,col 9)-(line 2328,col 62)",
      "(line 2330,col 9)-(line 2331,col 43)",
      "(line 2332,col 9)-(line 2332,col 63)",
      "(line 2333,col 9)-(line 2333,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.write(file, \"this is brand new data\", false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2337,
    "end_line": 2346,
    "comment": "",
    "child_ranges": [
      "(line 2338,col 9)-(line 2338,col 74)",
      "(line 2339,col 9)-(line 2339,col 79)",
      "(line 2341,col 9)-(line 2341,col 63)",
      "(line 2343,col 9)-(line 2343,col 57)",
      "(line 2344,col 9)-(line 2344,col 63)",
      "(line 2345,col 9)-(line 2345,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeByteArrayToFile(file, \"this is brand new data\".getBytes(), true);\n\n        final String expected \u003d \"This line was there before you...\"\n                + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2349,
    "end_line": 2359,
    "comment": "",
    "child_ranges": [
      "(line 2350,col 9)-(line 2350,col 74)",
      "(line 2351,col 9)-(line 2351,col 79)",
      "(line 2353,col 9)-(line 2353,col 88)",
      "(line 2355,col 9)-(line 2356,col 43)",
      "(line 2357,col 9)-(line 2357,col 63)",
      "(line 2358,col 9)-(line 2358,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        FileUtils.writeByteArrayToFile(file, \"this is brand new data\".getBytes(), false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2362,
    "end_line": 2371,
    "comment": "",
    "child_ranges": [
      "(line 2363,col 9)-(line 2363,col 74)",
      "(line 2364,col 9)-(line 2364,col 79)",
      "(line 2366,col 9)-(line 2366,col 89)",
      "(line 2368,col 9)-(line 2368,col 57)",
      "(line 2369,col 9)-(line 2369,col 63)",
      "(line 2370,col 9)-(line 2370,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final byte[] data \u003d \"SKIP_THIS_this is brand new data_AND_SKIP_THIS\".getBytes(Charsets.UTF_8);\n        FileUtils.writeByteArrayToFile(file, data, 10, 22, true);\n\n        final String expected \u003d \"This line was there before you...\" + \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file, Charsets.UTF_8);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2374,
    "end_line": 2384,
    "comment": "",
    "child_ranges": [
      "(line 2375,col 9)-(line 2375,col 74)",
      "(line 2376,col 9)-(line 2376,col 79)",
      "(line 2378,col 9)-(line 2378,col 102)",
      "(line 2379,col 9)-(line 2379,col 65)",
      "(line 2381,col 9)-(line 2381,col 95)",
      "(line 2382,col 9)-(line 2382,col 79)",
      "(line 2383,col 9)-(line 2383,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()",
    "snippet": "@Test\n    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines() throws Exception {\n        final File file \u003d TestUtils.newFile(temporaryFolder, \"lines.txt\");\n        FileUtils.writeStringToFile(file, \"This line was there before you...\");\n\n        final byte[] data \u003d \"SKIP_THIS_this is brand new data_AND_SKIP_THIS\".getBytes(Charsets.UTF_8);\n        FileUtils.writeByteArrayToFile(file, data, 10, 22, false);\n\n        final String expected \u003d \"this is brand new data\";\n        final String actual \u003d FileUtils.readFileToString(file, Charsets.UTF_8);\n        assertEquals(expected, actual);\n    }",
    "begin_line": 2387,
    "end_line": 2397,
    "comment": "",
    "child_ranges": [
      "(line 2388,col 9)-(line 2388,col 74)",
      "(line 2389,col 9)-(line 2389,col 79)",
      "(line 2391,col 9)-(line 2391,col 102)",
      "(line 2392,col 9)-(line 2392,col 66)",
      "(line 2394,col 9)-(line 2394,col 57)",
      "(line 2395,col 9)-(line 2395,col 79)",
      "(line 2396,col 9)-(line 2396,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()",
    "snippet": "@Test\n    public void testChecksumCRC32() throws Exception {\n        // create a test file\n        final String text \u003d \"Imagination is more important than knowledge - Einstein\";\n        final File file \u003d new File(temporaryFolder, \"checksum-test.txt\");\n        FileUtils.writeStringToFile(file, text, \"US-ASCII\");\n\n        // compute the expected checksum\n        final Checksum expectedChecksum \u003d new CRC32();\n        expectedChecksum.update(text.getBytes(\"US-ASCII\"), 0, text.length());\n        final long expectedValue \u003d expectedChecksum.getValue();\n\n        // compute the checksum of the file\n        final long resultValue \u003d FileUtils.checksumCRC32(file);\n\n        assertEquals(expectedValue, resultValue);\n    }",
    "begin_line": 2401,
    "end_line": 2416,
    "comment": "",
    "child_ranges": [
      "(line 2403,col 9)-(line 2403,col 86)",
      "(line 2404,col 9)-(line 2404,col 73)",
      "(line 2405,col 9)-(line 2405,col 60)",
      "(line 2408,col 9)-(line 2408,col 54)",
      "(line 2409,col 9)-(line 2409,col 77)",
      "(line 2410,col 9)-(line 2410,col 63)",
      "(line 2413,col 9)-(line 2413,col 63)",
      "(line 2415,col 9)-(line 2415,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksum()",
    "snippet": "@Test\n    public void testChecksum() throws Exception {\n        // create a test file\n        final String text \u003d \"Imagination is more important than knowledge - Einstein\";\n        final File file \u003d new File(temporaryFolder, \"checksum-test.txt\");\n        FileUtils.writeStringToFile(file, text, \"US-ASCII\");\n\n        // compute the expected checksum\n        final Checksum expectedChecksum \u003d new CRC32();\n        expectedChecksum.update(text.getBytes(\"US-ASCII\"), 0, text.length());\n        final long expectedValue \u003d expectedChecksum.getValue();\n\n        // compute the checksum of the file\n        final Checksum testChecksum \u003d new CRC32();\n        final Checksum resultChecksum \u003d FileUtils.checksum(file, testChecksum);\n        final long resultValue \u003d resultChecksum.getValue();\n\n        assertSame(testChecksum, resultChecksum);\n        assertEquals(expectedValue, resultValue);\n    }",
    "begin_line": 2419,
    "end_line": 2437,
    "comment": "",
    "child_ranges": [
      "(line 2421,col 9)-(line 2421,col 86)",
      "(line 2422,col 9)-(line 2422,col 73)",
      "(line 2423,col 9)-(line 2423,col 60)",
      "(line 2426,col 9)-(line 2426,col 54)",
      "(line 2427,col 9)-(line 2427,col 77)",
      "(line 2428,col 9)-(line 2428,col 63)",
      "(line 2431,col 9)-(line 2431,col 50)",
      "(line 2432,col 9)-(line 2432,col 79)",
      "(line 2433,col 9)-(line 2433,col 59)",
      "(line 2435,col 9)-(line 2435,col 49)",
      "(line 2436,col 9)-(line 2436,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()",
    "snippet": "@Test\n    public void testChecksumOnNullFile() throws Exception {\n        try {\n            FileUtils.checksum(null, new CRC32());\n            fail();\n        } catch (final NullPointerException ex) {\n            // expected\n        }\n    }",
    "begin_line": 2440,
    "end_line": 2447,
    "comment": "",
    "child_ranges": [
      "(line 2441,col 9)-(line 2446,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()",
    "snippet": "@Test\n    public void testChecksumOnNullChecksum() throws Exception {\n        // create a test file\n        final String text \u003d \"Imagination is more important than knowledge - Einstein\";\n        final File file \u003d new File(temporaryFolder, \"checksum-test.txt\");\n        FileUtils.writeStringToFile(file, text, \"US-ASCII\");\n        try {\n            FileUtils.checksum(file, null);\n            fail();\n        } catch (final NullPointerException ex) {\n            // expected\n        }\n    }",
    "begin_line": 2450,
    "end_line": 2461,
    "comment": "",
    "child_ranges": [
      "(line 2452,col 9)-(line 2452,col 86)",
      "(line 2453,col 9)-(line 2453,col 73)",
      "(line 2454,col 9)-(line 2454,col 60)",
      "(line 2455,col 9)-(line 2460,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()",
    "snippet": "@Test\n    public void testChecksumOnDirectory() throws Exception {\n        try {\n            FileUtils.checksum(new File(\".\"), new CRC32());\n            fail();\n        } catch (final IllegalArgumentException ex) {\n            // expected\n        }\n    }",
    "begin_line": 2464,
    "end_line": 2471,
    "comment": "",
    "child_ranges": [
      "(line 2465,col 9)-(line 2470,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()",
    "snippet": "@Test\n    public void testChecksumDouble() throws Exception {\n        // create a test file\n        final String text1 \u003d \"Imagination is more important than knowledge - Einstein\";\n        final File file1 \u003d new File(temporaryFolder, \"checksum-test.txt\");\n        FileUtils.writeStringToFile(file1, text1, \"US-ASCII\");\n\n        // create a second test file\n        final String text2 \u003d \"To be or not to be - Shakespeare\";\n        final File file2 \u003d new File(temporaryFolder, \"checksum-test2.txt\");\n        FileUtils.writeStringToFile(file2, text2, \"US-ASCII\");\n\n        // compute the expected checksum\n        final Checksum expectedChecksum \u003d new CRC32();\n        expectedChecksum.update(text1.getBytes(\"US-ASCII\"), 0, text1.length());\n        expectedChecksum.update(text2.getBytes(\"US-ASCII\"), 0, text2.length());\n        final long expectedValue \u003d expectedChecksum.getValue();\n\n        // compute the checksum of the file\n        final Checksum testChecksum \u003d new CRC32();\n        FileUtils.checksum(file1, testChecksum);\n        FileUtils.checksum(file2, testChecksum);\n        final long resultValue \u003d testChecksum.getValue();\n\n        assertEquals(expectedValue, resultValue);\n    }",
    "begin_line": 2474,
    "end_line": 2498,
    "comment": "",
    "child_ranges": [
      "(line 2476,col 9)-(line 2476,col 87)",
      "(line 2477,col 9)-(line 2477,col 74)",
      "(line 2478,col 9)-(line 2478,col 62)",
      "(line 2481,col 9)-(line 2481,col 64)",
      "(line 2482,col 9)-(line 2482,col 75)",
      "(line 2483,col 9)-(line 2483,col 62)",
      "(line 2486,col 9)-(line 2486,col 54)",
      "(line 2487,col 9)-(line 2487,col 79)",
      "(line 2488,col 9)-(line 2488,col 79)",
      "(line 2489,col 9)-(line 2489,col 63)",
      "(line 2492,col 9)-(line 2492,col 50)",
      "(line 2493,col 9)-(line 2493,col 48)",
      "(line 2494,col 9)-(line 2494,col 48)",
      "(line 2495,col 9)-(line 2495,col 57)",
      "(line 2497,col 9)-(line 2497,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()",
    "snippet": "@Test\n    public void testDeleteDirectoryWithNonDirectory() throws Exception {\n        try {\n            FileUtils.deleteDirectory(testFile1);\n            fail();\n        } catch (final IllegalArgumentException ex) {\n            // expected\n        }\n    }",
    "begin_line": 2501,
    "end_line": 2508,
    "comment": "",
    "child_ranges": [
      "(line 2502,col 9)-(line 2507,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()",
    "snippet": "@Test\n    public void testDeleteQuietlyForNull() {\n        try {\n            FileUtils.deleteQuietly(null);\n        } catch (final Exception ex) {\n            fail(ex.getMessage());\n        }\n    }",
    "begin_line": 2511,
    "end_line": 2517,
    "comment": "",
    "child_ranges": [
      "(line 2512,col 9)-(line 2516,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()",
    "snippet": "@Test\n    public void testDeleteQuietlyDir() throws IOException {\n        final File testDirectory \u003d new File(temporaryFolder, \"testDeleteQuietlyDir\");\n        final File testFile \u003d new File(testDirectory, \"testDeleteQuietlyFile\");\n        testDirectory.mkdirs();\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n\n        assertTrue(testDirectory.exists());\n        assertTrue(testFile.exists());\n        FileUtils.deleteQuietly(testDirectory);\n        assertFalse(testDirectory.exists(), \"Check No Exist\");\n        assertFalse(testFile.exists(), \"Check No Exist\");\n    }",
    "begin_line": 2520,
    "end_line": 2541,
    "comment": "",
    "child_ranges": [
      "(line 2521,col 9)-(line 2521,col 85)",
      "(line 2522,col 9)-(line 2522,col 79)",
      "(line 2523,col 9)-(line 2523,col 31)",
      "(line 2524,col 9)-(line 2527,col 9)",
      "(line 2528,col 9)-(line 2529,col 73)",
      "(line 2530,col 9)-(line 2534,col 9)",
      "(line 2536,col 9)-(line 2536,col 43)",
      "(line 2537,col 9)-(line 2537,col 38)",
      "(line 2538,col 9)-(line 2538,col 47)",
      "(line 2539,col 9)-(line 2539,col 62)",
      "(line 2540,col 9)-(line 2540,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()",
    "snippet": "@Test\n    public void testDeleteQuietlyFile() throws IOException {\n        final File testFile \u003d new File(temporaryFolder, \"testDeleteQuietlyFile\");\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n\n        assertTrue(testFile.exists());\n        FileUtils.deleteQuietly(testFile);\n        assertFalse(testFile.exists(), \"Check No Exist\");\n    }",
    "begin_line": 2544,
    "end_line": 2561,
    "comment": "",
    "child_ranges": [
      "(line 2545,col 9)-(line 2545,col 81)",
      "(line 2546,col 9)-(line 2549,col 9)",
      "(line 2550,col 9)-(line 2551,col 73)",
      "(line 2552,col 9)-(line 2556,col 9)",
      "(line 2558,col 9)-(line 2558,col 38)",
      "(line 2559,col 9)-(line 2559,col 42)",
      "(line 2560,col 9)-(line 2560,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()",
    "snippet": "@Test\n    public void testDeleteQuietlyNonExistent() {\n        final File testFile \u003d new File(\"testDeleteQuietlyNonExistent\");\n        assertFalse(testFile.exists());\n\n        try {\n            FileUtils.deleteQuietly(testFile);\n        } catch (final Exception ex) {\n            fail(ex.getMessage());\n        }\n    }",
    "begin_line": 2564,
    "end_line": 2573,
    "comment": "",
    "child_ranges": [
      "(line 2565,col 9)-(line 2565,col 71)",
      "(line 2566,col 9)-(line 2566,col 39)",
      "(line 2568,col 9)-(line 2572,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()",
    "snippet": "@Test\n    public void testMoveFile_Rename() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"move1.txt\");\n\n        FileUtils.moveFile(testFile1, destination);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertTrue(!testFile1.exists(), \"Original deleted\");\n    }",
    "begin_line": 2576,
    "end_line": 2582,
    "comment": "",
    "child_ranges": [
      "(line 2577,col 9)-(line 2577,col 72)",
      "(line 2579,col 9)-(line 2579,col 51)",
      "(line 2580,col 9)-(line 2580,col 56)",
      "(line 2581,col 9)-(line 2581,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()",
    "snippet": "@Test\n    public void testMoveFile_CopyDelete() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"move2.txt\");\n        final File src \u003d new File(testFile1.getAbsolutePath()) {\n            private static final long serialVersionUID \u003d 1L;\n\n            // Force renameTo to fail, as if destination is on another\n            // filesystem\n            @Override\n            public boolean renameTo(final File f) {\n                return false;\n            }\n        };\n        FileUtils.moveFile(src, destination);\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertTrue(!src.exists(), \"Original deleted\");\n    }",
    "begin_line": 2585,
    "end_line": 2600,
    "comment": "",
    "child_ranges": [
      "(line 2586,col 9)-(line 2586,col 72)",
      "(line 2587,col 9)-(line 2596,col 10)",
      "(line 2597,col 9)-(line 2597,col 45)",
      "(line 2598,col 9)-(line 2598,col 56)",
      "(line 2599,col 9)-(line 2599,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.renameTo(java.io.File)",
    "snippet": "@Override\n            public boolean renameTo(final File f) {\n                return false;\n            }",
    "begin_line": 2593,
    "end_line": 2595,
    "comment": "",
    "child_ranges": [
      "(line 2594,col 17)-(line 2594,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()",
    "snippet": "@Test\n    public void testMoveFile_CopyDelete_Failed() throws Exception {\n        final File destination \u003d new File(temporaryFolder, \"move3.txt\");\n        final File src \u003d new File(testFile1.getAbsolutePath()) {\n            private static final long serialVersionUID \u003d 1L;\n\n            // Force renameTo to fail, as if destination is on another\n            // filesystem\n            @Override\n            public boolean renameTo(final File f) {\n                return false;\n            }\n\n            // Force delete failure\n            @Override\n            public boolean delete() {\n                return false;\n            }\n\n        };\n        try {\n            FileUtils.moveFile(src, destination);\n            fail(\"move should have failed as src has not been deleted\");\n        } catch (final IOException e) {\n            // exepected\n            assertTrue(!destination.exists(), \"Check Rollback\");\n            assertTrue(src.exists(), \"Original exists\");\n        }\n    }",
    "begin_line": 2603,
    "end_line": 2630,
    "comment": "",
    "child_ranges": [
      "(line 2604,col 9)-(line 2604,col 72)",
      "(line 2605,col 9)-(line 2621,col 10)",
      "(line 2622,col 9)-(line 2629,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.renameTo(java.io.File)",
    "snippet": "@Override\n            public boolean renameTo(final File f) {\n                return false;\n            }",
    "begin_line": 2611,
    "end_line": 2613,
    "comment": "",
    "child_ranges": [
      "(line 2612,col 17)-(line 2612,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.delete()",
    "snippet": "@Override\n            public boolean delete() {\n                return false;\n            }",
    "begin_line": 2617,
    "end_line": 2619,
    "comment": "",
    "child_ranges": [
      "(line 2618,col 17)-(line 2618,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()",
    "snippet": "@Test\n    public void testMoveFile_Errors() throws Exception {\n        try {\n            FileUtils.moveFile(null, new File(\"foo\"));\n            fail(\"Expected NullPointerException when source is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveFile(new File(\"foo\"), null);\n            fail(\"Expected NullPointerException when destination is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveFile(new File(\"nonexistant\"), new File(\"foo\"));\n            fail(\"Expected FileNotFoundException for source\");\n        } catch (final FileNotFoundException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveFile(temporaryFolder, new File(\"foo\"));\n            fail(\"Expected IOException when source is a directory\");\n        } catch (final IOException e) {\n            // expected\n        }\n        final File testSourceFile \u003d new File(temporaryFolder, \"testMoveFileSource\");\n        final File testDestFile \u003d new File(temporaryFolder, \"testMoveFileSource\");\n        if (!testSourceFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testSourceFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testSourceFile));\n        try {\n            TestUtils.generateTestData(output1, 0);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testDestFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testDestFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testDestFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        try {\n            FileUtils.moveFile(testSourceFile, testDestFile);\n            fail(\"Expected FileExistsException when dest already exists\");\n        } catch (final FileExistsException e) {\n            // expected\n        }\n    }",
    "begin_line": 2633,
    "end_line": 2688,
    "comment": "",
    "child_ranges": [
      "(line 2634,col 9)-(line 2639,col 9)",
      "(line 2640,col 9)-(line 2645,col 9)",
      "(line 2646,col 9)-(line 2651,col 9)",
      "(line 2652,col 9)-(line 2657,col 9)",
      "(line 2658,col 9)-(line 2658,col 84)",
      "(line 2659,col 9)-(line 2659,col 82)",
      "(line 2660,col 9)-(line 2663,col 9)",
      "(line 2664,col 9)-(line 2665,col 79)",
      "(line 2666,col 9)-(line 2670,col 9)",
      "(line 2671,col 9)-(line 2674,col 9)",
      "(line 2675,col 9)-(line 2676,col 77)",
      "(line 2677,col 9)-(line 2681,col 9)",
      "(line 2682,col 9)-(line 2687,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()",
    "snippet": "@Test\n    public void testMoveFileToDirectory() throws Exception {\n        final File destDir \u003d new File(temporaryFolder, \"moveFileDestDir\");\n        final File movedFile \u003d new File(destDir, testFile1.getName());\n        assertFalse(destDir.exists(), \"Check Exist before\");\n        assertFalse(movedFile.exists(), \"Check Exist before\");\n\n        FileUtils.moveFileToDirectory(testFile1, destDir, true);\n        assertTrue(movedFile.exists(), \"Check Exist after\");\n        assertTrue(!testFile1.exists(), \"Original deleted\");\n    }",
    "begin_line": 2691,
    "end_line": 2700,
    "comment": "",
    "child_ranges": [
      "(line 2692,col 9)-(line 2692,col 74)",
      "(line 2693,col 9)-(line 2693,col 70)",
      "(line 2694,col 9)-(line 2694,col 60)",
      "(line 2695,col 9)-(line 2695,col 62)",
      "(line 2697,col 9)-(line 2697,col 64)",
      "(line 2698,col 9)-(line 2698,col 60)",
      "(line 2699,col 9)-(line 2699,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()",
    "snippet": "@Test\n    public void testMoveFileToDirectory_Errors() throws Exception {\n        try {\n            FileUtils.moveFileToDirectory(null, new File(\"foo\"), true);\n            fail(\"Expected NullPointerException when source is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveFileToDirectory(new File(\"foo\"), null, true);\n            fail(\"Expected NullPointerException when destination is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        final File testFile1 \u003d new File(temporaryFolder, \"testMoveFileFile1\");\n        final File testFile2 \u003d new File(temporaryFolder, \"testMoveFileFile2\");\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1));\n        try {\n            TestUtils.generateTestData(output1, 0);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        try {\n            FileUtils.moveFileToDirectory(testFile1, testFile2, true);\n            fail(\"Expected IOException when dest not a directory\");\n        } catch (final IOException e) {\n            // expected\n        }\n\n        final File nonexistant \u003d new File(temporaryFolder, \"testMoveFileNonExistant\");\n        try {\n            FileUtils.moveFileToDirectory(testFile1, nonexistant, false);\n            fail(\"Expected IOException when dest does not exist and create\u003dfalse\");\n        } catch (final IOException e) {\n            // expected\n        }\n    }",
    "begin_line": 2703,
    "end_line": 2754,
    "comment": "",
    "child_ranges": [
      "(line 2704,col 9)-(line 2709,col 9)",
      "(line 2710,col 9)-(line 2715,col 9)",
      "(line 2716,col 9)-(line 2716,col 78)",
      "(line 2717,col 9)-(line 2717,col 78)",
      "(line 2718,col 9)-(line 2721,col 9)",
      "(line 2722,col 9)-(line 2723,col 74)",
      "(line 2724,col 9)-(line 2728,col 9)",
      "(line 2729,col 9)-(line 2732,col 9)",
      "(line 2733,col 9)-(line 2734,col 74)",
      "(line 2735,col 9)-(line 2739,col 9)",
      "(line 2740,col 9)-(line 2745,col 9)",
      "(line 2747,col 9)-(line 2747,col 86)",
      "(line 2748,col 9)-(line 2753,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()",
    "snippet": "@Test\n    public void testMoveDirectory_Rename() throws Exception {\n        final File dir \u003d temporaryFolder;\n        final File src \u003d new File(dir, \"testMoveDirectory1Source\");\n        final File testDir \u003d new File(src, \"foo\");\n        final File testFile \u003d new File(testDir, \"bar\");\n        testDir.mkdirs();\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File destination \u003d new File(dir, \"testMoveDirectory1Dest\");\n        FileUtils.deleteDirectory(destination);\n\n        // Move the directory\n        FileUtils.moveDirectory(src, destination);\n\n        // Check results\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertTrue(!src.exists(), \"Original deleted\");\n        final File movedDir \u003d new File(destination, testDir.getName());\n        final File movedFile \u003d new File(movedDir, testFile.getName());\n        assertTrue(movedDir.exists(), \"Check dir moved\");\n        assertTrue(movedFile.exists(), \"Check file moved\");\n    }",
    "begin_line": 2758,
    "end_line": 2788,
    "comment": "",
    "child_ranges": [
      "(line 2759,col 9)-(line 2759,col 41)",
      "(line 2760,col 9)-(line 2760,col 67)",
      "(line 2761,col 9)-(line 2761,col 50)",
      "(line 2762,col 9)-(line 2762,col 55)",
      "(line 2763,col 9)-(line 2763,col 25)",
      "(line 2764,col 9)-(line 2767,col 9)",
      "(line 2768,col 9)-(line 2769,col 73)",
      "(line 2770,col 9)-(line 2774,col 9)",
      "(line 2775,col 9)-(line 2775,col 73)",
      "(line 2776,col 9)-(line 2776,col 47)",
      "(line 2779,col 9)-(line 2779,col 50)",
      "(line 2782,col 9)-(line 2782,col 56)",
      "(line 2783,col 9)-(line 2783,col 54)",
      "(line 2784,col 9)-(line 2784,col 71)",
      "(line 2785,col 9)-(line 2785,col 70)",
      "(line 2786,col 9)-(line 2786,col 57)",
      "(line 2787,col 9)-(line 2787,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()",
    "snippet": "@Test\n    public void testMoveDirectory_CopyDelete() throws Exception {\n\n        final File dir \u003d temporaryFolder;\n        final File src \u003d new File(dir, \"testMoveDirectory2Source\") {\n            private static final long serialVersionUID \u003d 1L;\n\n            // Force renameTo to fail\n            @Override\n            public boolean renameTo(final File dest) {\n                return false;\n            }\n        };\n        final File testDir \u003d new File(src, \"foo\");\n        final File testFile \u003d new File(testDir, \"bar\");\n        testDir.mkdirs();\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File destination \u003d new File(dir, \"testMoveDirectory1Dest\");\n        FileUtils.deleteDirectory(destination);\n\n        // Move the directory\n        FileUtils.moveDirectory(src, destination);\n\n        // Check results\n        assertTrue(destination.exists(), \"Check Exist\");\n        assertTrue(!src.exists(), \"Original deleted\");\n        final File movedDir \u003d new File(destination, testDir.getName());\n        final File movedFile \u003d new File(movedDir, testFile.getName());\n        assertTrue(movedDir.exists(), \"Check dir moved\");\n        assertTrue(movedFile.exists(), \"Check file moved\");\n    }",
    "begin_line": 2791,
    "end_line": 2830,
    "comment": "",
    "child_ranges": [
      "(line 2793,col 9)-(line 2793,col 41)",
      "(line 2794,col 9)-(line 2802,col 10)",
      "(line 2803,col 9)-(line 2803,col 50)",
      "(line 2804,col 9)-(line 2804,col 55)",
      "(line 2805,col 9)-(line 2805,col 25)",
      "(line 2806,col 9)-(line 2809,col 9)",
      "(line 2810,col 9)-(line 2811,col 73)",
      "(line 2812,col 9)-(line 2816,col 9)",
      "(line 2817,col 9)-(line 2817,col 73)",
      "(line 2818,col 9)-(line 2818,col 47)",
      "(line 2821,col 9)-(line 2821,col 50)",
      "(line 2824,col 9)-(line 2824,col 56)",
      "(line 2825,col 9)-(line 2825,col 54)",
      "(line 2826,col 9)-(line 2826,col 71)",
      "(line 2827,col 9)-(line 2827,col 70)",
      "(line 2828,col 9)-(line 2828,col 57)",
      "(line 2829,col 9)-(line 2829,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.renameTo(java.io.File)",
    "snippet": "@Override\n            public boolean renameTo(final File dest) {\n                return false;\n            }",
    "begin_line": 2799,
    "end_line": 2801,
    "comment": "",
    "child_ranges": [
      "(line 2800,col 17)-(line 2800,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()",
    "snippet": "@Test\n    public void testMoveDirectory_Errors() throws Exception {\n        try {\n            FileUtils.moveDirectory(null, new File(\"foo\"));\n            fail(\"Expected NullPointerException when source is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveDirectory(new File(\"foo\"), null);\n            fail(\"Expected NullPointerException when destination is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveDirectory(new File(\"nonexistant\"), new File(\"foo\"));\n            fail(\"Expected FileNotFoundException for source\");\n        } catch (final FileNotFoundException e) {\n            // expected\n        }\n        final File testFile \u003d new File(temporaryFolder, \"testMoveDirectoryFile\");\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        try {\n            FileUtils.moveDirectory(testFile, new File(\"foo\"));\n            fail(\"Expected IOException when source is not a directory\");\n        } catch (final IOException e) {\n            // expected\n        }\n        final File testSrcFile \u003d new File(temporaryFolder, \"testMoveDirectorySource\");\n        final File testDestFile \u003d new File(temporaryFolder, \"testMoveDirectoryDest\");\n        testSrcFile.mkdir();\n        testDestFile.mkdir();\n        try {\n            FileUtils.moveDirectory(testSrcFile, testDestFile);\n            fail(\"Expected FileExistsException when dest already exists\");\n        } catch (final FileExistsException e) {\n            // expected\n        }\n    }",
    "begin_line": 2833,
    "end_line": 2880,
    "comment": "",
    "child_ranges": [
      "(line 2834,col 9)-(line 2839,col 9)",
      "(line 2840,col 9)-(line 2845,col 9)",
      "(line 2846,col 9)-(line 2851,col 9)",
      "(line 2852,col 9)-(line 2852,col 81)",
      "(line 2853,col 9)-(line 2856,col 9)",
      "(line 2857,col 9)-(line 2858,col 73)",
      "(line 2859,col 9)-(line 2863,col 9)",
      "(line 2864,col 9)-(line 2869,col 9)",
      "(line 2870,col 9)-(line 2870,col 86)",
      "(line 2871,col 9)-(line 2871,col 85)",
      "(line 2872,col 9)-(line 2872,col 28)",
      "(line 2873,col 9)-(line 2873,col 29)",
      "(line 2874,col 9)-(line 2879,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()",
    "snippet": "@Test\n    public void testMoveDirectoryToDirectory() throws Exception {\n        final File dir \u003d temporaryFolder;\n        final File src \u003d new File(dir, \"testMoveDirectory1Source\");\n        final File testChildDir \u003d new File(src, \"foo\");\n        final File testFile \u003d new File(testChildDir, \"bar\");\n        testChildDir.mkdirs();\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File destDir \u003d new File(dir, \"testMoveDirectory1Dest\");\n        FileUtils.deleteDirectory(destDir);\n        assertFalse(destDir.exists(), \"Check Exist before\");\n\n        // Move the directory\n        FileUtils.moveDirectoryToDirectory(src, destDir, true);\n\n        // Check results\n        assertTrue(destDir.exists(), \"Check Exist after\");\n        assertTrue(!src.exists(), \"Original deleted\");\n        final File movedDir \u003d new File(destDir, src.getName());\n        final File movedChildDir \u003d new File(movedDir, testChildDir.getName());\n        final File movedFile \u003d new File(movedChildDir, testFile.getName());\n        assertTrue(movedDir.exists(), \"Check dir moved\");\n        assertTrue(movedChildDir.exists(), \"Check child dir moved\");\n        assertTrue(movedFile.exists(), \"Check file moved\");\n    }",
    "begin_line": 2883,
    "end_line": 2916,
    "comment": "",
    "child_ranges": [
      "(line 2884,col 9)-(line 2884,col 41)",
      "(line 2885,col 9)-(line 2885,col 67)",
      "(line 2886,col 9)-(line 2886,col 55)",
      "(line 2887,col 9)-(line 2887,col 60)",
      "(line 2888,col 9)-(line 2888,col 30)",
      "(line 2889,col 9)-(line 2892,col 9)",
      "(line 2893,col 9)-(line 2894,col 73)",
      "(line 2895,col 9)-(line 2899,col 9)",
      "(line 2900,col 9)-(line 2900,col 69)",
      "(line 2901,col 9)-(line 2901,col 43)",
      "(line 2902,col 9)-(line 2902,col 60)",
      "(line 2905,col 9)-(line 2905,col 63)",
      "(line 2908,col 9)-(line 2908,col 58)",
      "(line 2909,col 9)-(line 2909,col 54)",
      "(line 2910,col 9)-(line 2910,col 63)",
      "(line 2911,col 9)-(line 2911,col 78)",
      "(line 2912,col 9)-(line 2912,col 75)",
      "(line 2913,col 9)-(line 2913,col 57)",
      "(line 2914,col 9)-(line 2914,col 68)",
      "(line 2915,col 9)-(line 2915,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()",
    "snippet": "@Test\n    public void testMoveDirectoryToDirectory_Errors() throws Exception {\n        try {\n            FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n            fail(\"Expected NullPointerException when source is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n            fail(\"Expected NullPointerException when destination is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        final File testFile1 \u003d new File(temporaryFolder, \"testMoveFileFile1\");\n        final File testFile2 \u003d new File(temporaryFolder, \"testMoveFileFile2\");\n        if (!testFile1.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile1\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output1 \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile1));\n        try {\n            TestUtils.generateTestData(output1, 0);\n        } finally {\n            IOUtils.closeQuietly(output1);\n        }\n        if (!testFile2.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile2\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile2));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        try {\n            FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);\n            fail(\"Expected IOException when dest not a directory\");\n        } catch (final IOException e) {\n            // expected\n        }\n\n        final File nonexistant \u003d new File(temporaryFolder, \"testMoveFileNonExistant\");\n        try {\n            FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);\n            fail(\"Expected IOException when dest does not exist and create\u003dfalse\");\n        } catch (final IOException e) {\n            // expected\n        }\n    }",
    "begin_line": 2919,
    "end_line": 2970,
    "comment": "",
    "child_ranges": [
      "(line 2920,col 9)-(line 2925,col 9)",
      "(line 2926,col 9)-(line 2931,col 9)",
      "(line 2932,col 9)-(line 2932,col 78)",
      "(line 2933,col 9)-(line 2933,col 78)",
      "(line 2934,col 9)-(line 2937,col 9)",
      "(line 2938,col 9)-(line 2939,col 74)",
      "(line 2940,col 9)-(line 2944,col 9)",
      "(line 2945,col 9)-(line 2948,col 9)",
      "(line 2949,col 9)-(line 2950,col 74)",
      "(line 2951,col 9)-(line 2955,col 9)",
      "(line 2956,col 9)-(line 2961,col 9)",
      "(line 2963,col 9)-(line 2963,col 86)",
      "(line 2964,col 9)-(line 2969,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()",
    "snippet": "@Test\n    public void testMoveToDirectory() throws Exception {\n        final File destDir \u003d new File(temporaryFolder, \"testMoveToDirectoryDestDir\");\n        final File testDir \u003d new File(temporaryFolder, \"testMoveToDirectoryTestDir\");\n        final File testFile \u003d new File(temporaryFolder, \"testMoveToDirectoryTestFile\");\n        testDir.mkdirs();\n        if (!testFile.getParentFile().exists()) {\n            throw new IOException(\"Cannot create file \" + testFile\n                    + \" as the parent directory does not exist\");\n        }\n        final BufferedOutputStream output \u003d\n                new BufferedOutputStream(new FileOutputStream(testFile));\n        try {\n            TestUtils.generateTestData(output, 0);\n        } finally {\n            IOUtils.closeQuietly(output);\n        }\n        final File movedFile \u003d new File(destDir, testFile.getName());\n        final File movedDir \u003d new File(destDir, testFile.getName());\n\n        assertFalse(movedFile.exists(), \"Check File Doesnt exist\");\n        assertFalse(movedDir.exists(), \"Check Dir Doesnt exist\");\n\n        // Test moving a file\n        FileUtils.moveToDirectory(testFile, destDir, true);\n        assertTrue(movedFile.exists(), \"Check File exists\");\n        assertFalse(testFile.exists(), \"Check Original File doesn\u0027t exist\");\n\n        // Test moving a directory\n        FileUtils.moveToDirectory(testDir, destDir, true);\n        assertTrue(movedDir.exists(), \"Check Dir exists\");\n        assertFalse(testDir.exists(), \"Check Original Dir doesn\u0027t exist\");\n    }",
    "begin_line": 2973,
    "end_line": 3004,
    "comment": "",
    "child_ranges": [
      "(line 2974,col 9)-(line 2974,col 85)",
      "(line 2975,col 9)-(line 2975,col 85)",
      "(line 2976,col 9)-(line 2976,col 87)",
      "(line 2977,col 9)-(line 2977,col 25)",
      "(line 2978,col 9)-(line 2981,col 9)",
      "(line 2982,col 9)-(line 2983,col 73)",
      "(line 2984,col 9)-(line 2988,col 9)",
      "(line 2989,col 9)-(line 2989,col 69)",
      "(line 2990,col 9)-(line 2990,col 68)",
      "(line 2992,col 9)-(line 2992,col 67)",
      "(line 2993,col 9)-(line 2993,col 65)",
      "(line 2996,col 9)-(line 2996,col 59)",
      "(line 2997,col 9)-(line 2997,col 60)",
      "(line 2998,col 9)-(line 2998,col 76)",
      "(line 3001,col 9)-(line 3001,col 58)",
      "(line 3002,col 9)-(line 3002,col 58)",
      "(line 3003,col 9)-(line 3003,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()",
    "snippet": "@Test\n    public void testMoveToDirectory_Errors() throws Exception {\n        try {\n            FileUtils.moveDirectoryToDirectory(null, new File(\"foo\"), true);\n            fail(\"Expected NullPointerException when source is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        try {\n            FileUtils.moveDirectoryToDirectory(new File(\"foo\"), null, true);\n            fail(\"Expected NullPointerException when destination is null\");\n        } catch (final NullPointerException e) {\n            // expected\n        }\n        final File nonexistant \u003d new File(temporaryFolder, \"nonexistant\");\n        final File destDir \u003d new File(temporaryFolder, \"MoveToDirectoryDestDir\");\n        try {\n            FileUtils.moveToDirectory(nonexistant, destDir, true);\n            fail(\"Expected IOException when source does not exist\");\n        } catch (final IOException e) {\n            // expected\n        }\n    }",
    "begin_line": 3007,
    "end_line": 3028,
    "comment": "",
    "child_ranges": [
      "(line 3008,col 9)-(line 3013,col 9)",
      "(line 3014,col 9)-(line 3019,col 9)",
      "(line 3020,col 9)-(line 3020,col 74)",
      "(line 3021,col 9)-(line 3021,col 81)",
      "(line 3022,col 9)-(line 3027,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIO300()",
    "snippet": "@Test\n    public void testIO300() throws Exception {\n        final File testDirectory \u003d temporaryFolder;\n        final File src \u003d new File(testDirectory, \"dir1\");\n        final File dest \u003d new File(src, \"dir2\");\n        assertTrue(dest.mkdirs());\n        assertTrue(src.exists());\n        try {\n            FileUtils.moveDirectoryToDirectory(src, dest, false);\n            fail(\"expected IOException\");\n        } catch (final IOException ioe) {\n            // expected\n        }\n        assertTrue(src.exists());\n    }",
    "begin_line": 3031,
    "end_line": 3044,
    "comment": "",
    "child_ranges": [
      "(line 3032,col 9)-(line 3032,col 51)",
      "(line 3033,col 9)-(line 3033,col 57)",
      "(line 3034,col 9)-(line 3034,col 48)",
      "(line 3035,col 9)-(line 3035,col 34)",
      "(line 3036,col 9)-(line 3036,col 33)",
      "(line 3037,col 9)-(line 3042,col 9)",
      "(line 3043,col 9)-(line 3043,col 33)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIO276()",
    "snippet": "@Test\n    public void testIO276() throws Exception {\n        final File dir \u003d new File(\"target\", \"IO276\");\n        assertTrue(dir.mkdirs(), dir + \" should not be present\");\n        final File file \u003d new File(dir, \"IO276.txt\");\n        assertTrue(file.createNewFile(), file + \" should not be present\");\n        FileUtils.forceDeleteOnExit(dir);\n        // If this does not work, test will fail next time (assuming target is not cleaned)\n    }",
    "begin_line": 3047,
    "end_line": 3054,
    "comment": "",
    "child_ranges": [
      "(line 3048,col 9)-(line 3048,col 53)",
      "(line 3049,col 9)-(line 3049,col 65)",
      "(line 3050,col 9)-(line 3050,col 53)",
      "(line 3051,col 9)-(line 3051,col 74)",
      "(line 3052,col 9)-(line 3052,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.ShorterFile(java.lang.String)",
    "snippet": "public ShorterFile(final String pathname) {\n            super(pathname);\n        }",
    "begin_line": 3060,
    "end_line": 3062,
    "comment": "",
    "child_ranges": [
      "(line 3061,col 13)-(line 3061,col 28)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.length()",
    "snippet": "@Override\n        public long length() {\n            return super.length() - 1;\n        }",
    "begin_line": 3065,
    "end_line": 3067,
    "comment": "",
    "child_ranges": [
      "(line 3066,col 13)-(line 3066,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize()",
    "snippet": "@Test\n    public void testIncorrectOutputSize() throws Exception {\n        final File inFile \u003d new File(\"pom.xml\");\n        final File outFile \u003d new ShorterFile(\"target/pom.tmp\"); // it will report a shorter file\n        try {\n            FileUtils.copyFile(inFile, outFile);\n            fail(\"Expected IOException\");\n        } catch (final Exception e) {\n            final String msg \u003d e.toString();\n            assertTrue(msg.contains(\"Failed to copy full contents\"), msg);\n        } finally {\n            outFile.delete(); // tidy up\n        }\n    }",
    "begin_line": 3072,
    "end_line": 3084,
    "comment": "",
    "child_ranges": [
      "(line 3073,col 9)-(line 3073,col 48)",
      "(line 3074,col 9)-(line 3074,col 63)",
      "(line 3075,col 9)-(line 3083,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker()",
    "snippet": " ListDirectoryWalker() {\n            super();\n        }",
    "begin_line": 3090,
    "end_line": 3092,
    "comment": "",
    "child_ranges": [
      "(line 3091,col 13)-(line 3091,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.list(java.io.File)",
    "snippet": "List\u003cFile\u003e list(final File startDirectory) throws IOException {\n            final ArrayList\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n            walk(startDirectory, files);\n            return files;\n        }",
    "begin_line": 3094,
    "end_line": 3098,
    "comment": "",
    "child_ranges": [
      "(line 3095,col 13)-(line 3095,col 60)",
      "(line 3096,col 13)-(line 3096,col 40)",
      "(line 3097,col 13)-(line 3097,col 25)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.handleDirectoryStart(java.io.File, int, java.util.Collection\u003cjava.io.File\u003e)",
    "snippet": "@Override\n        protected void handleDirectoryStart(final File directory, final int depth, final Collection\u003cFile\u003e results) throws IOException {\n            // Add all directories except the starting directory\n            if (depth \u003e 0) {\n                results.add(directory);\n            }\n        }",
    "begin_line": 3101,
    "end_line": 3106,
    "comment": "",
    "child_ranges": [
      "(line 3103,col 13)-(line 3105,col 13)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.FileUtilsTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/FileUtilsTestCase.java",
    "signature": "org.apache.commons.io.FileUtilsTestCase.handleFile(java.io.File, int, java.util.Collection\u003cjava.io.File\u003e)",
    "snippet": "@Override\n        protected void handleFile(final File file, final int depth, final Collection\u003cFile\u003e results) throws IOException {\n            results.add(file);\n        }",
    "begin_line": 3109,
    "end_line": 3111,
    "comment": "",
    "child_ranges": [
      "(line 3110,col 13)-(line 3110,col 30)"
    ]
  }
]