[
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.dummyMethod(java.util.List, java.util.List\u003cjava.lang.Object\u003e, java.util.List\u003c?\u003e, java.util.List\u003c? super java.lang.Object\u003e, java.util.List\u003cjava.lang.String\u003e, java.util.List\u003c? extends java.lang.String\u003e, java.util.List\u003c? super java.lang.String\u003e, java.util.List[], java.util.List\u003cjava.lang.Object\u003e[], java.util.List\u003c?\u003e[], java.util.List\u003c? super java.lang.Object\u003e[], java.util.List\u003cjava.lang.String\u003e[], java.util.List\u003c? extends java.lang.String\u003e[], java.util.List\u003c? super java.lang.String\u003e[])",
    "snippet": "public void dummyMethod(final List list0, final List\u003cObject\u003e list1, final List\u003c?\u003e list2,\n            final List\u003c? super Object\u003e list3, final List\u003cString\u003e list4, final List\u003c? extends String\u003e list5,\n            final List\u003c? super String\u003e list6, final List[] list7, final List\u003cObject\u003e[] list8, final List\u003c?\u003e[] list9,\n            final List\u003c? super Object\u003e[] list10, final List\u003cString\u003e[] list11, final List\u003c? extends String\u003e[] list12,\n            final List\u003c? super String\u003e[] list13) {\n    }",
    "begin_line": 104,
    "end_line": 109,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable()",
    "snippet": "@SuppressWarnings(\"boxing\") testIsAssignable() throws SecurityException, NoSuchMethodException,\n            NoSuchFieldException {\n        List list0 \u003d null;\n        List\u003cObject\u003e list1 \u003d null;\n        List\u003c?\u003e list2 \u003d null;\n        List\u003c? super Object\u003e list3 \u003d null;\n        List\u003cString\u003e list4 \u003d null;\n        List\u003c? extends String\u003e list5 \u003d null;\n        List\u003c? super String\u003e list6 \u003d null;\n        List[] list7 \u003d null;\n        List\u003cObject\u003e[] list8 \u003d null;\n        List\u003c?\u003e[] list9 \u003d null;\n        List\u003c? super Object\u003e[] list10 \u003d null;\n        List\u003cString\u003e[] list11 \u003d null;\n        List\u003c? extends String\u003e[] list12 \u003d null;\n        List\u003c? super String\u003e[] list13;\n        final Class\u003c?\u003e clazz \u003d getClass();\n        final Method method \u003d clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n        final Type[] types \u003d method.getGenericParameterTypes();\n//        list0 \u003d list0;\n        delegateBooleanAssertion(types, 0, 0, true);\n        list1 \u003d list0;\n        delegateBooleanAssertion(types, 0, 1, true);\n        list0 \u003d list1;\n        delegateBooleanAssertion(types, 1, 0, true);\n        list2 \u003d list0;\n        delegateBooleanAssertion(types, 0, 2, true);\n        list0 \u003d list2;\n        delegateBooleanAssertion(types, 2, 0, true);\n        list3 \u003d list0;\n        delegateBooleanAssertion(types, 0, 3, true);\n        list0 \u003d list3;\n        delegateBooleanAssertion(types, 3, 0, true);\n        list4 \u003d list0;\n        delegateBooleanAssertion(types, 0, 4, true);\n        list0 \u003d list4;\n        delegateBooleanAssertion(types, 4, 0, true);\n        list5 \u003d list0;\n        delegateBooleanAssertion(types, 0, 5, true);\n        list0 \u003d list5;\n        delegateBooleanAssertion(types, 5, 0, true);\n        list6 \u003d list0;\n        delegateBooleanAssertion(types, 0, 6, true);\n        list0 \u003d list6;\n        delegateBooleanAssertion(types, 6, 0, true);\n//        list1 \u003d list1;\n        delegateBooleanAssertion(types, 1, 1, true);\n        list2 \u003d list1;\n        delegateBooleanAssertion(types, 1, 2, true);\n        list1 \u003d (List\u003cObject\u003e) list2;\n        delegateBooleanAssertion(types, 2, 1, false);\n        list3 \u003d list1;\n        delegateBooleanAssertion(types, 1, 3, true);\n        list1 \u003d (List\u003cObject\u003e) list3;\n        delegateBooleanAssertion(types, 3, 1, false);\n        // list4 \u003d list1;\n        delegateBooleanAssertion(types, 1, 4, false);\n        // list1 \u003d list4;\n        delegateBooleanAssertion(types, 4, 1, false);\n        // list5 \u003d list1;\n        delegateBooleanAssertion(types, 1, 5, false);\n        // list1 \u003d list5;\n        delegateBooleanAssertion(types, 5, 1, false);\n        list6 \u003d list1;\n        delegateBooleanAssertion(types, 1, 6, true);\n        list1 \u003d (List\u003cObject\u003e) list6;\n        delegateBooleanAssertion(types, 6, 1, false);\n//        list2 \u003d list2;\n        delegateBooleanAssertion(types, 2, 2, true);\n        list2 \u003d list3;\n        delegateBooleanAssertion(types, 2, 3, false);\n        list2 \u003d list4;\n        delegateBooleanAssertion(types, 3, 2, true);\n        list3 \u003d (List\u003c? super Object\u003e) list2;\n        delegateBooleanAssertion(types, 2, 4, false);\n        list2 \u003d list5;\n        delegateBooleanAssertion(types, 4, 2, true);\n        list4 \u003d (List\u003cString\u003e) list2;\n        delegateBooleanAssertion(types, 2, 5, false);\n        list2 \u003d list6;\n        delegateBooleanAssertion(types, 5, 2, true);\n        list5 \u003d (List\u003c? extends String\u003e) list2;\n        delegateBooleanAssertion(types, 2, 6, false);\n//        list3 \u003d list3;\n        delegateBooleanAssertion(types, 6, 2, true);\n        list6 \u003d (List\u003c? super String\u003e) list2;\n        delegateBooleanAssertion(types, 3, 3, true);\n        // list4 \u003d list3;\n        delegateBooleanAssertion(types, 3, 4, false);\n        // list3 \u003d list4;\n        delegateBooleanAssertion(types, 4, 3, false);\n        // list5 \u003d list3;\n        delegateBooleanAssertion(types, 3, 5, false);\n        // list3 \u003d list5;\n        delegateBooleanAssertion(types, 5, 3, false);\n        list6 \u003d list3;\n        delegateBooleanAssertion(types, 3, 6, true);\n        list3 \u003d (List\u003c? super Object\u003e) list6;\n        delegateBooleanAssertion(types, 6, 3, false);\n//        list4 \u003d list4;\n        delegateBooleanAssertion(types, 4, 4, true);\n        list5 \u003d list4;\n        delegateBooleanAssertion(types, 4, 5, true);\n        list4 \u003d (List\u003cString\u003e) list5;\n        delegateBooleanAssertion(types, 5, 4, false);\n        list6 \u003d list4;\n        delegateBooleanAssertion(types, 4, 6, true);\n        list4 \u003d (List\u003cString\u003e) list6;\n        delegateBooleanAssertion(types, 6, 4, false);\n//        list5 \u003d list5;\n        delegateBooleanAssertion(types, 5, 5, true);\n        list6 \u003d (List\u003c? super String\u003e) list5;\n        delegateBooleanAssertion(types, 5, 6, false);\n        list5 \u003d (List\u003c? extends String\u003e) list6;\n        delegateBooleanAssertion(types, 6, 5, false);\n//        list6 \u003d list6;\n        delegateBooleanAssertion(types, 6, 6, true);\n\n//        list7 \u003d list7;\n        delegateBooleanAssertion(types, 7, 7, true);\n        list8 \u003d list7;\n        delegateBooleanAssertion(types, 7, 8, true);\n        list7 \u003d list8;\n        delegateBooleanAssertion(types, 8, 7, true);\n        list9 \u003d list7;\n        delegateBooleanAssertion(types, 7, 9, true);\n        list7 \u003d list9;\n        delegateBooleanAssertion(types, 9, 7, true);\n        list10 \u003d list7;\n        delegateBooleanAssertion(types, 7, 10, true);\n        list7 \u003d list10;\n        delegateBooleanAssertion(types, 10, 7, true);\n        list11 \u003d list7;\n        delegateBooleanAssertion(types, 7, 11, true);\n        list7 \u003d list11;\n        delegateBooleanAssertion(types, 11, 7, true);\n        list12 \u003d list7;\n        delegateBooleanAssertion(types, 7, 12, true);\n        list7 \u003d list12;\n        delegateBooleanAssertion(types, 12, 7, true);\n        list13 \u003d list7;\n        delegateBooleanAssertion(types, 7, 13, true);\n        list7 \u003d list13;\n        delegateBooleanAssertion(types, 13, 7, true);\n//        list8 \u003d list8;\n        delegateBooleanAssertion(types, 8, 8, true);\n        list9 \u003d list8;\n        delegateBooleanAssertion(types, 8, 9, true);\n        list8 \u003d (List\u003cObject\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 8, false);\n        list10 \u003d list8;\n        delegateBooleanAssertion(types, 8, 10, true);\n        list8 \u003d (List\u003cObject\u003e[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n        delegateBooleanAssertion(types, 10, 8, false);\n        // list11 \u003d list8;\n        delegateBooleanAssertion(types, 8, 11, false);\n        // list8 \u003d list11;\n        delegateBooleanAssertion(types, 11, 8, false);\n        // list12 \u003d list8;\n        delegateBooleanAssertion(types, 8, 12, false);\n        // list8 \u003d list12;\n        delegateBooleanAssertion(types, 12, 8, false);\n        list13 \u003d list8;\n        delegateBooleanAssertion(types, 8, 13, true);\n        list8 \u003d (List\u003cObject\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 8, false);\n//        list9 \u003d list9;\n        delegateBooleanAssertion(types, 9, 9, true);\n        list10 \u003d (List\u003c? super Object\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 10, false);\n        list9 \u003d list10;\n        delegateBooleanAssertion(types, 10, 9, true);\n        list11 \u003d (List\u003cString\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 11, false);\n        list9 \u003d list11;\n        delegateBooleanAssertion(types, 11, 9, true);\n        list12 \u003d (List\u003c? extends String\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 12, false);\n        list9 \u003d list12;\n        delegateBooleanAssertion(types, 12, 9, true);\n        list13 \u003d (List\u003c? super String\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 13, false);\n        list9 \u003d list13;\n        delegateBooleanAssertion(types, 13, 9, true);\n//        list10 \u003d list10;\n        delegateBooleanAssertion(types, 10, 10, true);\n        // list11 \u003d list10;\n        delegateBooleanAssertion(types, 10, 11, false);\n        // list10 \u003d list11;\n        delegateBooleanAssertion(types, 11, 10, false);\n        // list12 \u003d list10;\n        delegateBooleanAssertion(types, 10, 12, false);\n        // list10 \u003d list12;\n        delegateBooleanAssertion(types, 12, 10, false);\n        list13 \u003d list10;\n        delegateBooleanAssertion(types, 10, 13, true);\n        list10 \u003d (List\u003c? super Object\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 10, false);\n//        list11 \u003d list11;\n        delegateBooleanAssertion(types, 11, 11, true);\n        list12 \u003d list11;\n        delegateBooleanAssertion(types, 11, 12, true);\n        list11 \u003d (List\u003cString\u003e[]) list12;\n        delegateBooleanAssertion(types, 12, 11, false);\n        list13 \u003d list11;\n        delegateBooleanAssertion(types, 11, 13, true);\n        list11 \u003d (List\u003cString\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 11, false);\n//        list12 \u003d list12;\n        delegateBooleanAssertion(types, 12, 12, true);\n        list13 \u003d (List\u003c? super String\u003e[]) list12;\n        delegateBooleanAssertion(types, 12, 13, false);\n        list12 \u003d (List\u003c? extends String\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 12, false);\n//        list13 \u003d list13;\n        delegateBooleanAssertion(types, 13, 13, true);\n        final Type disType \u003d getClass().getField(\"dis\").getGenericType();\n        // Reporter.log( ( ( ParameterizedType ) disType\n        // ).getOwnerType().getClass().toString() );\n        final Type datType \u003d getClass().getField(\"dat\").getGenericType();\n        final Type daType \u003d getClass().getField(\"da\").getGenericType();\n        final Type uhderType \u003d getClass().getField(\"uhder\").getGenericType();\n        final Type dingType \u003d getClass().getField(\"ding\").getGenericType();\n        final Type testerType \u003d getClass().getField(\"tester\").getGenericType();\n        final Type tester2Type \u003d getClass().getField(\"tester2\").getGenericType();\n        final Type dat2Type \u003d getClass().getField(\"dat2\").getGenericType();\n        final Type dat3Type \u003d getClass().getField(\"dat3\").getGenericType();\n        dis \u003d dat;\n        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));\n        // dis \u003d da;\n        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));\n        dis \u003d uhder;\n        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\n        dis \u003d ding;\n        Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\n                TypeUtils.isAssignable(dingType, disType));\n        dis \u003d tester;\n        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));\n        // dis \u003d tester2;\n        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n        // dat \u003d dat2;\n        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n        // dat2 \u003d dat;\n        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n        // dat \u003d dat3;\n        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n        final char ch \u003d 0;\n        final boolean bo \u003d false;\n        final byte by \u003d 0;\n        final short sh \u003d 0;\n        int in \u003d 0;\n        long lo \u003d 0;\n        final float fl \u003d 0;\n        double du \u003d 0;\n        du \u003d ch;\n        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));\n        du \u003d by;\n        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n        du \u003d sh;\n        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));\n        du \u003d in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));\n        du \u003d lo;\n        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n        du \u003d fl;\n        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n        lo \u003d in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n        lo \u003d Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n        // Long lngW \u003d 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n        // lngW \u003d Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n        in \u003d Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n        final Integer inte \u003d in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n        final Type intComparableType \u003d getClass().getField(\"intComparable\").getGenericType();\n        intComparable \u003d 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n        final Serializable ser \u003d 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n        final Type longComparableType \u003d getClass().getField(\"longComparable\").getGenericType();\n        // longComparable \u003d 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n        // longComparable \u003d Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n        // int[] ia;\n        // long[] la \u003d ia;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n        final Integer[] ia \u003d null;\n        final Type caType \u003d getClass().getField(\"intWildcardComparable\").getGenericType();\n        intWildcardComparable \u003d ia;\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n        // int[] ina \u003d ia;\n        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n        final int[] ina \u003d null;\n        Object[] oa;\n        // oa \u003d ina;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n        oa \u003d new Integer[0];\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n        final Type bClassType \u003d AClass.class.getField(\"bClass\").getGenericType();\n        final Type cClassType \u003d AClass.class.getField(\"cClass\").getGenericType();\n        final Type dClassType \u003d AClass.class.getField(\"dClass\").getGenericType();\n        final Type eClassType \u003d AClass.class.getField(\"eClass\").getGenericType();\n        final Type fClassType \u003d AClass.class.getField(\"fClass\").getGenericType();\n        final AClass aClass \u003d new AClass(new AAClass\u003cString\u003e());\n        aClass.bClass \u003d aClass.cClass;\n        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n        aClass.bClass \u003d aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n        aClass.bClass \u003d aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n        aClass.bClass \u003d aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n        aClass.cClass \u003d aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n        aClass.cClass \u003d aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n        aClass.cClass \u003d aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n        aClass.dClass \u003d aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n        aClass.dClass \u003d aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n        aClass.eClass \u003d aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n    }",
    "begin_line": 113,
    "end_line": 447,
    "comment": "",
    "child_ranges": [
      "(line 115,col 9)-(line 115,col 26)",
      "(line 116,col 9)-(line 116,col 34)",
      "(line 117,col 9)-(line 117,col 29)",
      "(line 118,col 9)-(line 118,col 42)",
      "(line 119,col 9)-(line 119,col 34)",
      "(line 120,col 9)-(line 120,col 44)",
      "(line 121,col 9)-(line 121,col 42)",
      "(line 122,col 9)-(line 122,col 28)",
      "(line 123,col 9)-(line 123,col 36)",
      "(line 124,col 9)-(line 124,col 31)",
      "(line 125,col 9)-(line 125,col 45)",
      "(line 126,col 9)-(line 126,col 37)",
      "(line 127,col 9)-(line 127,col 47)",
      "(line 128,col 9)-(line 128,col 38)",
      "(line 129,col 9)-(line 129,col 42)",
      "(line 130,col 9)-(line 132,col 86)",
      "(line 133,col 9)-(line 133,col 63)",
      "(line 135,col 9)-(line 135,col 52)",
      "(line 136,col 9)-(line 136,col 22)",
      "(line 137,col 9)-(line 137,col 52)",
      "(line 138,col 9)-(line 138,col 22)",
      "(line 139,col 9)-(line 139,col 52)",
      "(line 140,col 9)-(line 140,col 22)",
      "(line 141,col 9)-(line 141,col 52)",
      "(line 142,col 9)-(line 142,col 22)",
      "(line 143,col 9)-(line 143,col 52)",
      "(line 144,col 9)-(line 144,col 22)",
      "(line 145,col 9)-(line 145,col 52)",
      "(line 146,col 9)-(line 146,col 22)",
      "(line 147,col 9)-(line 147,col 52)",
      "(line 148,col 9)-(line 148,col 22)",
      "(line 149,col 9)-(line 149,col 52)",
      "(line 150,col 9)-(line 150,col 22)",
      "(line 151,col 9)-(line 151,col 52)",
      "(line 152,col 9)-(line 152,col 22)",
      "(line 153,col 9)-(line 153,col 52)",
      "(line 154,col 9)-(line 154,col 22)",
      "(line 155,col 9)-(line 155,col 52)",
      "(line 156,col 9)-(line 156,col 22)",
      "(line 157,col 9)-(line 157,col 52)",
      "(line 158,col 9)-(line 158,col 22)",
      "(line 159,col 9)-(line 159,col 52)",
      "(line 161,col 9)-(line 161,col 52)",
      "(line 162,col 9)-(line 162,col 22)",
      "(line 163,col 9)-(line 163,col 52)",
      "(line 164,col 9)-(line 164,col 37)",
      "(line 165,col 9)-(line 165,col 53)",
      "(line 166,col 9)-(line 166,col 22)",
      "(line 167,col 9)-(line 167,col 52)",
      "(line 168,col 9)-(line 168,col 37)",
      "(line 169,col 9)-(line 169,col 53)",
      "(line 171,col 9)-(line 171,col 53)",
      "(line 173,col 9)-(line 173,col 53)",
      "(line 175,col 9)-(line 175,col 53)",
      "(line 177,col 9)-(line 177,col 53)",
      "(line 178,col 9)-(line 178,col 22)",
      "(line 179,col 9)-(line 179,col 52)",
      "(line 180,col 9)-(line 180,col 37)",
      "(line 181,col 9)-(line 181,col 53)",
      "(line 183,col 9)-(line 183,col 52)",
      "(line 184,col 9)-(line 184,col 22)",
      "(line 185,col 9)-(line 185,col 53)",
      "(line 186,col 9)-(line 186,col 22)",
      "(line 187,col 9)-(line 187,col 52)",
      "(line 188,col 9)-(line 188,col 45)",
      "(line 189,col 9)-(line 189,col 53)",
      "(line 190,col 9)-(line 190,col 22)",
      "(line 191,col 9)-(line 191,col 52)",
      "(line 192,col 9)-(line 192,col 37)",
      "(line 193,col 9)-(line 193,col 53)",
      "(line 194,col 9)-(line 194,col 22)",
      "(line 195,col 9)-(line 195,col 52)",
      "(line 196,col 9)-(line 196,col 47)",
      "(line 197,col 9)-(line 197,col 53)",
      "(line 199,col 9)-(line 199,col 52)",
      "(line 200,col 9)-(line 200,col 45)",
      "(line 201,col 9)-(line 201,col 52)",
      "(line 203,col 9)-(line 203,col 53)",
      "(line 205,col 9)-(line 205,col 53)",
      "(line 207,col 9)-(line 207,col 53)",
      "(line 209,col 9)-(line 209,col 53)",
      "(line 210,col 9)-(line 210,col 22)",
      "(line 211,col 9)-(line 211,col 52)",
      "(line 212,col 9)-(line 212,col 45)",
      "(line 213,col 9)-(line 213,col 53)",
      "(line 215,col 9)-(line 215,col 52)",
      "(line 216,col 9)-(line 216,col 22)",
      "(line 217,col 9)-(line 217,col 52)",
      "(line 218,col 9)-(line 218,col 37)",
      "(line 219,col 9)-(line 219,col 53)",
      "(line 220,col 9)-(line 220,col 22)",
      "(line 221,col 9)-(line 221,col 52)",
      "(line 222,col 9)-(line 222,col 37)",
      "(line 223,col 9)-(line 223,col 53)",
      "(line 225,col 9)-(line 225,col 52)",
      "(line 226,col 9)-(line 226,col 45)",
      "(line 227,col 9)-(line 227,col 53)",
      "(line 228,col 9)-(line 228,col 47)",
      "(line 229,col 9)-(line 229,col 53)",
      "(line 231,col 9)-(line 231,col 52)",
      "(line 234,col 9)-(line 234,col 52)",
      "(line 235,col 9)-(line 235,col 22)",
      "(line 236,col 9)-(line 236,col 52)",
      "(line 237,col 9)-(line 237,col 22)",
      "(line 238,col 9)-(line 238,col 52)",
      "(line 239,col 9)-(line 239,col 22)",
      "(line 240,col 9)-(line 240,col 52)",
      "(line 241,col 9)-(line 241,col 22)",
      "(line 242,col 9)-(line 242,col 52)",
      "(line 243,col 9)-(line 243,col 23)",
      "(line 244,col 9)-(line 244,col 53)",
      "(line 245,col 9)-(line 245,col 23)",
      "(line 246,col 9)-(line 246,col 53)",
      "(line 247,col 9)-(line 247,col 23)",
      "(line 248,col 9)-(line 248,col 53)",
      "(line 249,col 9)-(line 249,col 23)",
      "(line 250,col 9)-(line 250,col 53)",
      "(line 251,col 9)-(line 251,col 23)",
      "(line 252,col 9)-(line 252,col 53)",
      "(line 253,col 9)-(line 253,col 23)",
      "(line 254,col 9)-(line 254,col 53)",
      "(line 255,col 9)-(line 255,col 23)",
      "(line 256,col 9)-(line 256,col 53)",
      "(line 257,col 9)-(line 257,col 23)",
      "(line 258,col 9)-(line 258,col 53)",
      "(line 260,col 9)-(line 260,col 52)",
      "(line 261,col 9)-(line 261,col 22)",
      "(line 262,col 9)-(line 262,col 52)",
      "(line 263,col 9)-(line 263,col 39)",
      "(line 264,col 9)-(line 264,col 53)",
      "(line 265,col 9)-(line 265,col 23)",
      "(line 266,col 9)-(line 266,col 53)",
      "(line 267,col 9)-(line 267,col 40)",
      "(line 268,col 9)-(line 268,col 54)",
      "(line 270,col 9)-(line 270,col 54)",
      "(line 272,col 9)-(line 272,col 54)",
      "(line 274,col 9)-(line 274,col 54)",
      "(line 276,col 9)-(line 276,col 54)",
      "(line 277,col 9)-(line 277,col 23)",
      "(line 278,col 9)-(line 278,col 53)",
      "(line 279,col 9)-(line 279,col 40)",
      "(line 280,col 9)-(line 280,col 54)",
      "(line 282,col 9)-(line 282,col 52)",
      "(line 283,col 9)-(line 283,col 48)",
      "(line 284,col 9)-(line 284,col 54)",
      "(line 285,col 9)-(line 285,col 23)",
      "(line 286,col 9)-(line 286,col 53)",
      "(line 287,col 9)-(line 287,col 40)",
      "(line 288,col 9)-(line 288,col 54)",
      "(line 289,col 9)-(line 289,col 23)",
      "(line 290,col 9)-(line 290,col 53)",
      "(line 291,col 9)-(line 291,col 50)",
      "(line 292,col 9)-(line 292,col 54)",
      "(line 293,col 9)-(line 293,col 23)",
      "(line 294,col 9)-(line 294,col 53)",
      "(line 295,col 9)-(line 295,col 48)",
      "(line 296,col 9)-(line 296,col 54)",
      "(line 297,col 9)-(line 297,col 23)",
      "(line 298,col 9)-(line 298,col 53)",
      "(line 300,col 9)-(line 300,col 54)",
      "(line 302,col 9)-(line 302,col 55)",
      "(line 304,col 9)-(line 304,col 55)",
      "(line 306,col 9)-(line 306,col 55)",
      "(line 308,col 9)-(line 308,col 55)",
      "(line 309,col 9)-(line 309,col 24)",
      "(line 310,col 9)-(line 310,col 54)",
      "(line 311,col 9)-(line 311,col 49)",
      "(line 312,col 9)-(line 312,col 55)",
      "(line 314,col 9)-(line 314,col 54)",
      "(line 315,col 9)-(line 315,col 24)",
      "(line 316,col 9)-(line 316,col 54)",
      "(line 317,col 9)-(line 317,col 41)",
      "(line 318,col 9)-(line 318,col 55)",
      "(line 319,col 9)-(line 319,col 24)",
      "(line 320,col 9)-(line 320,col 54)",
      "(line 321,col 9)-(line 321,col 41)",
      "(line 322,col 9)-(line 322,col 55)",
      "(line 324,col 9)-(line 324,col 54)",
      "(line 325,col 9)-(line 325,col 49)",
      "(line 326,col 9)-(line 326,col 55)",
      "(line 327,col 9)-(line 327,col 51)",
      "(line 328,col 9)-(line 328,col 55)",
      "(line 330,col 9)-(line 330,col 54)",
      "(line 331,col 9)-(line 331,col 73)",
      "(line 334,col 9)-(line 334,col 73)",
      "(line 335,col 9)-(line 335,col 71)",
      "(line 336,col 9)-(line 336,col 77)",
      "(line 337,col 9)-(line 337,col 75)",
      "(line 338,col 9)-(line 338,col 79)",
      "(line 339,col 9)-(line 339,col 81)",
      "(line 340,col 9)-(line 340,col 75)",
      "(line 341,col 9)-(line 341,col 75)",
      "(line 342,col 9)-(line 342,col 18)",
      "(line 343,col 9)-(line 343,col 68)",
      "(line 345,col 9)-(line 345,col 68)",
      "(line 346,col 9)-(line 346,col 20)",
      "(line 347,col 9)-(line 347,col 70)",
      "(line 348,col 9)-(line 348,col 19)",
      "(line 349,col 9)-(line 350,col 59)",
      "(line 351,col 9)-(line 351,col 21)",
      "(line 352,col 9)-(line 352,col 71)",
      "(line 354,col 9)-(line 354,col 73)",
      "(line 356,col 9)-(line 356,col 70)",
      "(line 358,col 9)-(line 358,col 70)",
      "(line 360,col 9)-(line 360,col 70)",
      "(line 361,col 9)-(line 361,col 26)",
      "(line 362,col 9)-(line 362,col 33)",
      "(line 363,col 9)-(line 363,col 26)",
      "(line 364,col 9)-(line 364,col 27)",
      "(line 365,col 9)-(line 365,col 19)",
      "(line 366,col 9)-(line 366,col 20)",
      "(line 367,col 9)-(line 367,col 27)",
      "(line 368,col 9)-(line 368,col 22)",
      "(line 369,col 9)-(line 369,col 16)",
      "(line 370,col 9)-(line 370,col 76)",
      "(line 371,col 9)-(line 371,col 16)",
      "(line 372,col 9)-(line 372,col 76)",
      "(line 373,col 9)-(line 373,col 16)",
      "(line 374,col 9)-(line 374,col 77)",
      "(line 375,col 9)-(line 375,col 16)",
      "(line 376,col 9)-(line 376,col 75)",
      "(line 377,col 9)-(line 377,col 16)",
      "(line 378,col 9)-(line 378,col 76)",
      "(line 379,col 9)-(line 379,col 16)",
      "(line 380,col 9)-(line 380,col 77)",
      "(line 381,col 9)-(line 381,col 16)",
      "(line 382,col 9)-(line 382,col 73)",
      "(line 383,col 9)-(line 383,col 32)",
      "(line 384,col 9)-(line 384,col 77)",
      "(line 386,col 9)-(line 386,col 74)",
      "(line 388,col 9)-(line 388,col 78)",
      "(line 389,col 9)-(line 389,col 32)",
      "(line 390,col 9)-(line 390,col 76)",
      "(line 391,col 9)-(line 391,col 32)",
      "(line 392,col 9)-(line 392,col 76)",
      "(line 393,col 9)-(line 393,col 75)",
      "(line 394,col 9)-(line 394,col 75)",
      "(line 395,col 9)-(line 395,col 93)",
      "(line 396,col 9)-(line 396,col 26)",
      "(line 397,col 9)-(line 397,col 80)",
      "(line 398,col 9)-(line 398,col 79)",
      "(line 399,col 9)-(line 399,col 35)",
      "(line 400,col 9)-(line 400,col 81)",
      "(line 401,col 9)-(line 401,col 95)",
      "(line 403,col 9)-(line 403,col 82)",
      "(line 405,col 9)-(line 405,col 86)",
      "(line 408,col 9)-(line 408,col 78)",
      "(line 409,col 9)-(line 409,col 34)",
      "(line 410,col 9)-(line 410,col 90)",
      "(line 411,col 9)-(line 411,col 35)",
      "(line 412,col 9)-(line 412,col 75)",
      "(line 414,col 9)-(line 414,col 81)",
      "(line 415,col 9)-(line 415,col 31)",
      "(line 416,col 9)-(line 416,col 20)",
      "(line 418,col 9)-(line 418,col 80)",
      "(line 419,col 9)-(line 419,col 28)",
      "(line 420,col 9)-(line 420,col 83)",
      "(line 421,col 9)-(line 421,col 81)",
      "(line 422,col 9)-(line 422,col 81)",
      "(line 423,col 9)-(line 423,col 81)",
      "(line 424,col 9)-(line 424,col 81)",
      "(line 425,col 9)-(line 425,col 81)",
      "(line 426,col 9)-(line 426,col 64)",
      "(line 427,col 9)-(line 427,col 38)",
      "(line 428,col 9)-(line 428,col 74)",
      "(line 429,col 9)-(line 429,col 38)",
      "(line 430,col 9)-(line 430,col 74)",
      "(line 431,col 9)-(line 431,col 38)",
      "(line 432,col 9)-(line 432,col 74)",
      "(line 433,col 9)-(line 433,col 38)",
      "(line 434,col 9)-(line 434,col 74)",
      "(line 435,col 9)-(line 435,col 38)",
      "(line 436,col 9)-(line 436,col 74)",
      "(line 437,col 9)-(line 437,col 38)",
      "(line 438,col 9)-(line 438,col 74)",
      "(line 439,col 9)-(line 439,col 38)",
      "(line 440,col 9)-(line 440,col 74)",
      "(line 441,col 9)-(line 441,col 38)",
      "(line 442,col 9)-(line 442,col 74)",
      "(line 443,col 9)-(line 443,col 38)",
      "(line 444,col 9)-(line 444,col 74)",
      "(line 445,col 9)-(line 445,col 38)",
      "(line 446,col 9)-(line 446,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean)",
    "snippet": "public void delegateBooleanAssertion(final Type[] types, final int i2, final int i1, final boolean expected) {\n        final Type type1 \u003d types[i1];\n        final Type type2 \u003d types[i2];\n        final boolean isAssignable \u003d TypeUtils.isAssignable(type2, type1);\n\n        if (expected) {\n            Assert.assertTrue(\"[\" + i1 + \", \" + i2 + \"]: From \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n        } else {\n            Assert.assertFalse(\"[\" + i1 + \", \" + i2 + \"]: From \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n        }\n    }",
    "begin_line": 449,
    "end_line": 463,
    "comment": "",
    "child_ranges": [
      "(line 450,col 9)-(line 450,col 37)",
      "(line 451,col 9)-(line 451,col 37)",
      "(line 452,col 9)-(line 452,col 74)",
      "(line 454,col 9)-(line 462,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance()",
    "snippet": "@SuppressWarnings(\"boxing\") testIsInstance() throws SecurityException, NoSuchFieldException {\n        final Type intComparableType \u003d getClass().getField(\"intComparable\").getGenericType();\n        final Type uriComparableType \u003d getClass().getField(\"uriComparable\").getGenericType();\n        intComparable \u003d 1;\n        Assert.assertTrue(TypeUtils.isInstance(1, intComparableType));\n        // uriComparable \u003d 1;\n        Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType));\n    }",
    "begin_line": 467,
    "end_line": 474,
    "comment": "",
    "child_ranges": [
      "(line 468,col 9)-(line 468,col 93)",
      "(line 469,col 9)-(line 469,col 93)",
      "(line 470,col 9)-(line 470,col 26)",
      "(line 471,col 9)-(line 471,col 70)",
      "(line 473,col 9)-(line 473,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments()",
    "snippet": "@Test\n    public void testGetTypeArguments() {\n        Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns;\n        TypeVariable\u003c?\u003e treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg \u003d typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg \u003d typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        final Collection\u003cInteger\u003e col \u003d Arrays.asList(new Integer[0]);\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        Assert.assertTrue(typeVarAssigns.size() \u003d\u003d 2);\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Other.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(And.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Thing.class, Other.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0]));\n        Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0]));\n    }",
    "begin_line": 477,
    "end_line": 523,
    "comment": "",
    "child_ranges": [
      "(line 478,col 9)-(line 478,col 50)",
      "(line 479,col 9)-(line 479,col 39)",
      "(line 480,col 9)-(line 480,col 21)",
      "(line 482,col 9)-(line 482,col 85)",
      "(line 483,col 9)-(line 483,col 65)",
      "(line 484,col 9)-(line 485,col 60)",
      "(line 486,col 9)-(line 486,col 53)",
      "(line 487,col 9)-(line 488,col 52)",
      "(line 490,col 9)-(line 490,col 81)",
      "(line 491,col 9)-(line 491,col 65)",
      "(line 492,col 9)-(line 493,col 60)",
      "(line 494,col 9)-(line 494,col 53)",
      "(line 495,col 9)-(line 496,col 52)",
      "(line 498,col 9)-(line 498,col 70)",
      "(line 499,col 9)-(line 499,col 82)",
      "(line 500,col 9)-(line 500,col 65)",
      "(line 501,col 9)-(line 502,col 60)",
      "(line 504,col 9)-(line 504,col 100)",
      "(line 505,col 9)-(line 505,col 54)",
      "(line 506,col 9)-(line 506,col 100)",
      "(line 507,col 9)-(line 507,col 108)",
      "(line 509,col 9)-(line 509,col 77)",
      "(line 510,col 9)-(line 510,col 54)",
      "(line 511,col 9)-(line 511,col 97)",
      "(line 512,col 9)-(line 512,col 119)",
      "(line 514,col 9)-(line 514,col 75)",
      "(line 515,col 9)-(line 515,col 54)",
      "(line 516,col 9)-(line 516,col 97)",
      "(line 517,col 9)-(line 517,col 97)",
      "(line 519,col 9)-(line 519,col 78)",
      "(line 520,col 9)-(line 520,col 54)",
      "(line 521,col 9)-(line 521,col 118)",
      "(line 522,col 9)-(line 522,col 119)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables()",
    "snippet": "@Test\n    public void testTypesSatisfyVariables() throws SecurityException, NoSuchFieldException,\n            NoSuchMethodException {\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d new HashMap\u003cTypeVariable\u003c?\u003e, Type\u003e();\n        final Integer max \u003d TypeUtilsTest.\u003cInteger\u003e stub();\n        typeVarAssigns.put(getClass().getMethod(\"stub\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub2\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub3\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n    }",
    "begin_line": 526,
    "end_line": 538,
    "comment": "",
    "child_ranges": [
      "(line 528,col 9)-(line 528,col 95)",
      "(line 529,col 9)-(line 529,col 59)",
      "(line 530,col 9)-(line 530,col 95)",
      "(line 531,col 9)-(line 531,col 75)",
      "(line 532,col 9)-(line 532,col 31)",
      "(line 533,col 9)-(line 533,col 96)",
      "(line 534,col 9)-(line 534,col 75)",
      "(line 535,col 9)-(line 535,col 31)",
      "(line 536,col 9)-(line 536,col 96)",
      "(line 537,col 9)-(line 537,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments()",
    "snippet": "@Test\n    public void testDetermineTypeVariableAssignments() throws SecurityException,\n            NoSuchFieldException, NoSuchMethodException {\n        final ParameterizedType iterableType \u003d (ParameterizedType) getClass().getField(\"iterable\")\n                .getGenericType();\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d TypeUtils.determineTypeArguments(TreeSet.class,\n                iterableType);\n        final TypeVariable\u003c?\u003e treeSetTypeVar \u003d TreeSet.class.getTypeParameters()[0];\n        Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));\n        Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns\n                .get(treeSetTypeVar));\n    }",
    "begin_line": 541,
    "end_line": 551,
    "comment": "",
    "child_ranges": [
      "(line 543,col 9)-(line 544,col 34)",
      "(line 545,col 9)-(line 546,col 30)",
      "(line 547,col 9)-(line 547,col 84)",
      "(line 548,col 9)-(line 548,col 70)",
      "(line 549,col 9)-(line 550,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType()",
    "snippet": "@Test\n    public void testGetRawType() throws SecurityException, NoSuchFieldException {\n        final Type stringParentFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"stringParent\")\n                .getGenericType();\n        final Type integerParentFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"integerParent\")\n                .getGenericType();\n        final Type foosFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"foos\").getGenericType();\n        final Type genericParentT \u003d GenericParent.class.getTypeParameters()[0];\n        Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));\n        Assert\n                .assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,\n                        null));\n        Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));\n        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n                StringParameterizedChild.class));\n        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n                stringParentFieldType));\n        Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],\n                foosFieldType));\n        Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],\n                foosFieldType));\n        Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));\n        Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class\n                .getDeclaredField(\"barParents\").getGenericType(), null));\n    }",
    "begin_line": 554,
    "end_line": 577,
    "comment": "",
    "child_ranges": [
      "(line 555,col 9)-(line 556,col 34)",
      "(line 557,col 9)-(line 558,col 34)",
      "(line 559,col 9)-(line 559,col 101)",
      "(line 560,col 9)-(line 560,col 79)",
      "(line 561,col 9)-(line 561,col 100)",
      "(line 562,col 9)-(line 564,col 31)",
      "(line 565,col 9)-(line 565,col 83)",
      "(line 566,col 9)-(line 567,col 49)",
      "(line 568,col 9)-(line 569,col 40)",
      "(line 570,col 9)-(line 571,col 32)",
      "(line 572,col 9)-(line 573,col 32)",
      "(line 574,col 9)-(line 574,col 85)",
      "(line 575,col 9)-(line 576,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayTypeClasses()",
    "snippet": "@Test\n    public void testIsArrayTypeClasses() {\n        Assert.assertTrue(TypeUtils.isArrayType(boolean[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(byte[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(short[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(int[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(char[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(long[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(float[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(double[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(Object[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(String[].class));\n\n        Assert.assertFalse(TypeUtils.isArrayType(boolean.class));\n        Assert.assertFalse(TypeUtils.isArrayType(byte.class));\n        Assert.assertFalse(TypeUtils.isArrayType(short.class));\n        Assert.assertFalse(TypeUtils.isArrayType(int.class));\n        Assert.assertFalse(TypeUtils.isArrayType(char.class));\n        Assert.assertFalse(TypeUtils.isArrayType(long.class));\n        Assert.assertFalse(TypeUtils.isArrayType(float.class));\n        Assert.assertFalse(TypeUtils.isArrayType(double.class));\n        Assert.assertFalse(TypeUtils.isArrayType(Object.class));\n        Assert.assertFalse(TypeUtils.isArrayType(String.class));\n    }",
    "begin_line": 580,
    "end_line": 602,
    "comment": "",
    "child_ranges": [
      "(line 581,col 9)-(line 581,col 66)",
      "(line 582,col 9)-(line 582,col 63)",
      "(line 583,col 9)-(line 583,col 64)",
      "(line 584,col 9)-(line 584,col 62)",
      "(line 585,col 9)-(line 585,col 63)",
      "(line 586,col 9)-(line 586,col 63)",
      "(line 587,col 9)-(line 587,col 64)",
      "(line 588,col 9)-(line 588,col 65)",
      "(line 589,col 9)-(line 589,col 65)",
      "(line 590,col 9)-(line 590,col 65)",
      "(line 592,col 9)-(line 592,col 65)",
      "(line 593,col 9)-(line 593,col 62)",
      "(line 594,col 9)-(line 594,col 63)",
      "(line 595,col 9)-(line 595,col 61)",
      "(line 596,col 9)-(line 596,col 62)",
      "(line 597,col 9)-(line 597,col 62)",
      "(line 598,col 9)-(line 598,col 63)",
      "(line 599,col 9)-(line 599,col 64)",
      "(line 600,col 9)-(line 600,col 64)",
      "(line 601,col 9)-(line 601,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes()",
    "snippet": "@Test\n    public void testIsArrayGenericTypes() throws Exception {\n        final Method method \u003d getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        final Type[] types \u003d method.getGenericParameterTypes();\n\n        Assert.assertFalse(TypeUtils.isArrayType(types[0]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[1]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[2]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[3]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[4]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[5]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[6]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[7]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[8]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[9]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[10]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[11]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[12]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[13]));\n    }",
    "begin_line": 605,
    "end_line": 626,
    "comment": "",
    "child_ranges": [
      "(line 606,col 9)-(line 608,col 86)",
      "(line 610,col 9)-(line 610,col 63)",
      "(line 612,col 9)-(line 612,col 60)",
      "(line 613,col 9)-(line 613,col 60)",
      "(line 614,col 9)-(line 614,col 60)",
      "(line 615,col 9)-(line 615,col 60)",
      "(line 616,col 9)-(line 616,col 60)",
      "(line 617,col 9)-(line 617,col 60)",
      "(line 618,col 9)-(line 618,col 60)",
      "(line 619,col 9)-(line 619,col 59)",
      "(line 620,col 9)-(line 620,col 59)",
      "(line 621,col 9)-(line 621,col 59)",
      "(line 622,col 9)-(line 622,col 60)",
      "(line 623,col 9)-(line 623,col 60)",
      "(line 624,col 9)-(line 624,col 60)",
      "(line 625,col 9)-(line 625,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetPrimitiveArrayComponentType()",
    "snippet": "@Test\n    public void testGetPrimitiveArrayComponentType() throws Exception {\n        Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));\n        Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));\n        Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));\n        Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));\n        Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));\n        Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));\n        Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));\n        Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));\n\n        Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(byte.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(short.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(int.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(char.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(long.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(float.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(double.class));\n    }",
    "begin_line": 629,
    "end_line": 647,
    "comment": "",
    "child_ranges": [
      "(line 630,col 9)-(line 630,col 93)",
      "(line 631,col 9)-(line 631,col 87)",
      "(line 632,col 9)-(line 632,col 89)",
      "(line 633,col 9)-(line 633,col 85)",
      "(line 634,col 9)-(line 634,col 87)",
      "(line 635,col 9)-(line 635,col 87)",
      "(line 636,col 9)-(line 636,col 89)",
      "(line 637,col 9)-(line 637,col 91)",
      "(line 639,col 9)-(line 639,col 74)",
      "(line 640,col 9)-(line 640,col 71)",
      "(line 641,col 9)-(line 641,col 72)",
      "(line 642,col 9)-(line 642,col 70)",
      "(line 643,col 9)-(line 643,col 71)",
      "(line 644,col 9)-(line 644,col 71)",
      "(line 645,col 9)-(line 645,col 72)",
      "(line 646,col 9)-(line 646,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetArrayComponentType()",
    "snippet": "@Test\n    public void testGetArrayComponentType() throws Exception {\n        final Method method \u003d getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        final Type[] types \u003d method.getGenericParameterTypes();\n\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[0]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[1]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[2]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[3]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[4]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[5]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[6]));\n        Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));\n        Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));\n        Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));\n        Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));\n        Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));\n        Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));\n        Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));\n    }",
    "begin_line": 650,
    "end_line": 671,
    "comment": "",
    "child_ranges": [
      "(line 651,col 9)-(line 653,col 86)",
      "(line 655,col 9)-(line 655,col 63)",
      "(line 657,col 9)-(line 657,col 69)",
      "(line 658,col 9)-(line 658,col 69)",
      "(line 659,col 9)-(line 659,col 69)",
      "(line 660,col 9)-(line 660,col 69)",
      "(line 661,col 9)-(line 661,col 69)",
      "(line 662,col 9)-(line 662,col 69)",
      "(line 663,col 9)-(line 663,col 69)",
      "(line 664,col 9)-(line 664,col 81)",
      "(line 665,col 9)-(line 665,col 81)",
      "(line 666,col 9)-(line 666,col 81)",
      "(line 667,col 9)-(line 667,col 82)",
      "(line 668,col 9)-(line 668,col 82)",
      "(line 669,col 9)-(line 669,col 82)",
      "(line 670,col 9)-(line 670,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLang820()",
    "snippet": "@Test\n    public void testLang820() throws Exception {\n        final Type[] typeArray \u003d {String.class, String.class};\n        final Type[] expectedArray \u003d {String.class};\n        Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));\n    }",
    "begin_line": 674,
    "end_line": 678,
    "comment": "",
    "child_ranges": [
      "(line 675,col 9)-(line 675,col 62)",
      "(line 676,col 9)-(line 676,col 52)",
      "(line 677,col 9)-(line 677,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize()",
    "snippet": "@Test\n    public void testParameterize() throws Exception {\n        final ParameterizedType stringComparableType \u003d TypeUtils.parameterize(Comparable.class, String.class);\n        Assert.assertTrue(TypeUtils.equals(getClass().getField(\"stringComparable\").getGenericType(),\n            stringComparableType));\n        Assert.assertEquals(\"java.lang.Comparable\u003cjava.lang.String\u003e\", stringComparableType.toString());\n    }",
    "begin_line": 681,
    "end_line": 686,
    "comment": "",
    "child_ranges": [
      "(line 682,col 9)-(line 682,col 110)",
      "(line 683,col 9)-(line 684,col 35)",
      "(line 685,col 9)-(line 685,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner()",
    "snippet": "@Test\n    public void testParameterizeWithOwner() throws Exception {\n        final Type owner \u003d TypeUtils.parameterize(TypeUtilsTest.class, String.class);\n        final ParameterizedType dat2Type \u003d TypeUtils.parameterizeWithOwner(owner, That.class, String.class, String.class);\n        Assert.assertTrue(TypeUtils.equals(getClass().getField(\"dat2\").getGenericType(), dat2Type));\n    }",
    "begin_line": 689,
    "end_line": 693,
    "comment": "",
    "child_ranges": [
      "(line 690,col 9)-(line 690,col 85)",
      "(line 691,col 9)-(line 691,col 122)",
      "(line 692,col 9)-(line 692,col 100)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testWildcardType()",
    "snippet": "@Test\n    public void testWildcardType() throws Exception {\n        final WildcardType simpleWildcard \u003d TypeUtils.wildcardType().withUpperBounds(String.class).build();\n        final Field cClass \u003d AClass.class.getField(\"cClass\");\n        Assert.assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0],\n            simpleWildcard));\n        Assert.assertEquals(String.format(\"? extends %s\", String.class.getName()), TypeUtils.toString(simpleWildcard));\n        Assert.assertEquals(String.format(\"? extends %s\", String.class.getName()), simpleWildcard.toString());\n    }",
    "begin_line": 696,
    "end_line": 703,
    "comment": "",
    "child_ranges": [
      "(line 697,col 9)-(line 697,col 107)",
      "(line 698,col 9)-(line 698,col 61)",
      "(line 699,col 9)-(line 700,col 29)",
      "(line 701,col 9)-(line 701,col 119)",
      "(line 702,col 9)-(line 702,col 110)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testUnboundedWildcardType()",
    "snippet": "@Test\n    public void testUnboundedWildcardType() {\n        final WildcardType unbounded \u003d TypeUtils.wildcardType().withLowerBounds((Type) null).withUpperBounds().build();\n        Assert.assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded));\n        Assert.assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded));\n        Assert.assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded));\n        Assert.assertEquals(\"?\", TypeUtils.toString(unbounded));\n        Assert.assertEquals(\"?\", unbounded.toString());\n    }",
    "begin_line": 706,
    "end_line": 713,
    "comment": "",
    "child_ranges": [
      "(line 707,col 9)-(line 707,col 119)",
      "(line 708,col 9)-(line 708,col 79)",
      "(line 709,col 9)-(line 709,col 107)",
      "(line 710,col 9)-(line 710,col 99)",
      "(line 711,col 9)-(line 711,col 64)",
      "(line 712,col 9)-(line 712,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLowerBoundedWildcardType()",
    "snippet": "@Test\n    public void testLowerBoundedWildcardType() {\n       final WildcardType lowerBounded \u003d TypeUtils.wildcardType().withLowerBounds(java.sql.Date.class).build();\n       Assert.assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));\n       Assert.assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), lowerBounded.toString());\n\n       final TypeVariable\u003cClass\u003cIterable\u003e\u003e iterableT0 \u003d Iterable.class.getTypeParameters()[0];\n       final WildcardType lowerTypeVariable \u003d TypeUtils.wildcardType().withLowerBounds(iterableT0).build();\n       Assert.assertEquals(String.format(\"? super %s\", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable));\n       Assert.assertEquals(String.format(\"? super %s\", iterableT0.getName()), lowerTypeVariable.toString());\n    }",
    "begin_line": 716,
    "end_line": 725,
    "comment": "",
    "child_ranges": [
      "(line 717,col 8)-(line 717,col 111)",
      "(line 718,col 8)-(line 718,col 121)",
      "(line 719,col 8)-(line 719,col 112)",
      "(line 721,col 8)-(line 721,col 94)",
      "(line 722,col 8)-(line 722,col 107)",
      "(line 723,col 8)-(line 723,col 117)",
      "(line 724,col 8)-(line 724,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLang1114()",
    "snippet": "@Test\n    public void testLang1114() throws Exception {\n        final Type nonWildcardType \u003d getClass().getDeclaredField(\"wildcardComparable\").getGenericType();\n        final Type wildcardType \u003d ((ParameterizedType)nonWildcardType).getActualTypeArguments()[0];\n\n        Assert.assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));\n        Assert.assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));\n    }",
    "begin_line": 728,
    "end_line": 734,
    "comment": "",
    "child_ranges": [
      "(line 729,col 9)-(line 729,col 104)",
      "(line 730,col 9)-(line 730,col 99)",
      "(line 732,col 9)-(line 732,col 76)",
      "(line 733,col 9)-(line 733,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType()",
    "snippet": "@Test\n    public void testGenericArrayType() throws Exception {\n        final Type expected \u003d getClass().getField(\"intWildcardComparable\").getGenericType();\n        final GenericArrayType actual \u003d\n            TypeUtils.genericArrayType(TypeUtils.parameterize(Comparable.class, TypeUtils.wildcardType()\n                .withUpperBounds(Integer.class).build()));\n        Assert.assertTrue(TypeUtils.equals(expected, actual));\n        Assert.assertEquals(\"java.lang.Comparable\u003c? extends java.lang.Integer\u003e[]\", actual.toString());\n    }",
    "begin_line": 737,
    "end_line": 744,
    "comment": "",
    "child_ranges": [
      "(line 738,col 9)-(line 738,col 92)",
      "(line 739,col 9)-(line 741,col 58)",
      "(line 742,col 9)-(line 742,col 62)",
      "(line 743,col 9)-(line 743,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testToLongString()",
    "snippet": "@Test\n    public void testToLongString() {\n        Assert.assertEquals(getClass().getName() + \":B\", TypeUtils.toLongString(getClass().getTypeParameters()[0]));\n    }",
    "begin_line": 747,
    "end_line": 749,
    "comment": "",
    "child_ranges": [
      "(line 748,col 9)-(line 748,col 116)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testWrap()",
    "snippet": "@Test\n    public void testWrap() {\n        final Type t \u003d getClass().getTypeParameters()[0];\n        Assert.assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType()));\n\n        Assert.assertEquals(String.class, TypeUtils.wrap(String.class).getType());\n    }",
    "begin_line": 752,
    "end_line": 757,
    "comment": "",
    "child_ranges": [
      "(line 753,col 9)-(line 753,col 57)",
      "(line 754,col 9)-(line 754,col 76)",
      "(line 756,col 9)-(line 756,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.methodWithGenericReturnType()",
    "snippet": "public static \u003cU\u003e Iterable\u003cU\u003e methodWithGenericReturnType() {\n            return null;\n        }",
    "begin_line": 762,
    "end_line": 764,
    "comment": "",
    "child_ranges": [
      "(line 763,col 13)-(line 763,col 24)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLANG1190()",
    "snippet": "@Test\n    public void testLANG1190() throws Exception {\n        Type fromType \u003d ClassWithSuperClassWithGenericType.class.getDeclaredMethod(\"methodWithGenericReturnType\").getGenericReturnType();\n        Type failingToType \u003d TypeUtils.wildcardType().withLowerBounds(ClassWithSuperClassWithGenericType.class).build();\n\n        Assert.assertTrue(TypeUtils.isAssignable(fromType, failingToType));\n    }",
    "begin_line": 768,
    "end_line": 773,
    "comment": "",
    "child_ranges": [
      "(line 769,col 9)-(line 769,col 137)",
      "(line 770,col 9)-(line 770,col 120)",
      "(line 772,col 9)-(line 772,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub()",
    "snippet": "public static \u003cG extends Comparable\u003cG\u003e\u003e G stub() {\n        return null;\n    }",
    "begin_line": 777,
    "end_line": 779,
    "comment": "",
    "child_ranges": [
      "(line 778,col 9)-(line 778,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub2()",
    "snippet": "public static \u003cG extends Comparable\u003c? super G\u003e\u003e G stub2() {\n        return null;\n    }",
    "begin_line": 781,
    "end_line": 783,
    "comment": "",
    "child_ranges": [
      "(line 782,col 9)-(line 782,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub3()",
    "snippet": "public static \u003cT extends Comparable\u003c? extends T\u003e\u003e T stub3() {\n        return null;\n    }",
    "begin_line": 785,
    "end_line": 787,
    "comment": "",
    "child_ranges": [
      "(line 786,col 9)-(line 786,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.AClass(org.apache.commons.lang3.reflect.AAClass\u003cjava.lang.String\u003e)",
    "snippet": "public AClass(final AAClass\u003cString\u003e enclosingInstance) {\n        enclosingInstance.super();\n    }",
    "begin_line": 805,
    "end_line": 807,
    "comment": "",
    "child_ranges": [
      "(line 806,col 9)-(line 806,col 34)"
    ]
  }
]