[
  {
    "name": "BufferRecycler.BufferRecycler#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.BufferRecycler()",
    "snippet": "public BufferRecycler() {\n        this(4, 4);\n    }",
    "begin_line": 61,
    "end_line": 63,
    "comment": "/** \n * Default constructor used for creating instances of this default implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.BufferRecycler#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.BufferRecycler(int, int)",
    "snippet": "protected BufferRecycler(int bbCount, int cbCount) {\n        _byteBuffers \u003d new byte[bbCount][];\n        _charBuffers \u003d new char[cbCount][];\n    }",
    "begin_line": 71,
    "end_line": 74,
    "comment": "/** \n * Alternate constructor to be used by sub-classes, to allow customization of number of low-level buffers in use.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.allocByteBuffer#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int)",
    "snippet": "public final byte[] allocByteBuffer(int ix) {\n        return allocByteBuffer(ix, 0);\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * @param ix One of \u003ccode\u003eREAD_IO_BUFFER\u003c/code\u003e constants.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.allocByteBuffer#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int, int)",
    "snippet": "public byte[] allocByteBuffer(int ix, int minSize) {\n        final int DEF_SIZE \u003d byteBufferLength(ix);\n        if (minSize \u003c DEF_SIZE) {\n            minSize \u003d DEF_SIZE;\n        }\n        byte[] buffer \u003d _byteBuffers[ix];\n        if (buffer \u003d\u003d null || buffer.length \u003c minSize) {\n            buffer \u003d balloc(minSize);\n        } else {\n            _byteBuffers[ix] \u003d null;\n        }\n        return buffer;\n    }",
    "begin_line": 89,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.releaseByteBuffer#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int, byte[])",
    "snippet": "public final void releaseByteBuffer(int ix, byte[] buffer) {\n        _byteBuffers[ix] \u003d buffer;\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.allocCharBuffer#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int)",
    "snippet": "public final char[] allocCharBuffer(int ix) {\n        return allocCharBuffer(ix, 0);\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.allocCharBuffer#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int, int)",
    "snippet": "public char[] allocCharBuffer(int ix, int minSize) {\n        final int DEF_SIZE \u003d charBufferLength(ix);\n        if (minSize \u003c DEF_SIZE) {\n            minSize \u003d DEF_SIZE;\n        }\n        char[] buffer \u003d _charBuffers[ix];\n        if (buffer \u003d\u003d null || buffer.length \u003c minSize) {\n            buffer \u003d calloc(minSize);\n        } else {\n            _charBuffers[ix] \u003d null;\n        }\n        return buffer;\n    }",
    "begin_line": 117,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.releaseCharBuffer#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int, char[])",
    "snippet": "public void releaseCharBuffer(int ix, char[] buffer) {\n        _charBuffers[ix] \u003d buffer;\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.byteBufferLength#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.byteBufferLength(int)",
    "snippet": "protected int byteBufferLength(int ix) {\n        return BYTE_BUFFER_LENGTHS[ix];\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.charBufferLength#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.charBufferLength(int)",
    "snippet": "protected int charBufferLength(int ix) {\n        return CHAR_BUFFER_LENGTHS[ix];\n    }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.balloc#155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.balloc(int)",
    "snippet": "protected byte[] balloc(int size) { return new byte[size]; }",
    "begin_line": 155,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BufferRecycler.calloc#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/BufferRecycler.java",
    "class_name": "com.fasterxml.jackson.core.util.BufferRecycler",
    "signature": "com.fasterxml.jackson.core.util.BufferRecycler.calloc(int)",
    "snippet": "protected char[] calloc(int size) { return new char[size]; }",
    "begin_line": 156,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.TextBuffer#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.TextBuffer(com.fasterxml.jackson.core.util.BufferRecycler)",
    "snippet": "public TextBuffer(BufferRecycler allocator) {\n        _allocator \u003d allocator;\n    }",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.releaseBuffers#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.releaseBuffers()",
    "snippet": "public void releaseBuffers()\n    {\n        if (_allocator \u003d\u003d null) {\n            resetWithEmpty();\n        } else {\n            if (_currentSegment !\u003d null) {\n                // First, let\u0027s get rid of all but the largest char array\n                resetWithEmpty();\n                // And then return that array\n                char[] buf \u003d _currentSegment;\n                _currentSegment \u003d null;\n                _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);\n            }\n        }\n    }",
    "begin_line": 134,
    "end_line": 148,
    "comment": "/** \n * Method called to indicate that the underlying buffers should now be recycled if they haven\u0027t yet been recycled. Although caller can still use this text buffer, it is not advisable to call this method if that is likely, since next time a buffer is needed, buffers need to reallocated. Note: calling this method automatically also clears contents of the buffer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.resetWithEmpty#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.resetWithEmpty()",
    "snippet": "public void resetWithEmpty()\n    {\n        _inputStart \u003d -1; // indicates shared buffer not used\n        _currentSize \u003d 0;\n        _inputLen \u003d 0;\n\n        _inputBuffer \u003d null;\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n    }",
    "begin_line": 154,
    "end_line": 168,
    "comment": "/** \n * Method called to clear out any content text buffer may have, and initializes buffer to use non-shared data.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.resetWithShared#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[], int, int)",
    "snippet": "public void resetWithShared(char[] buf, int start, int len)\n    {\n        // First, let\u0027s clear intermediate values, if any:\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // Then let\u0027s mark things we need about input buffer\n        _inputBuffer \u003d buf;\n        _inputStart \u003d start;\n        _inputLen \u003d len;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n    }",
    "begin_line": 176,
    "end_line": 191,
    "comment": "/** \n * Method called to initialize the buffer with a shared copy of data; this means that buffer will just have pointers to actual data. It also means that if anything is to be appended to the buffer, it will first have to unshare it (make a local copy).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.resetWithCopy#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[], int, int)",
    "snippet": "public void resetWithCopy(char[] buf, int start, int len)\n    {\n        _inputBuffer \u003d null;\n        _inputStart \u003d -1; // indicates shared buffer not used\n        _inputLen \u003d 0;\n\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        } else if (_currentSegment \u003d\u003d null) {\n            _currentSegment \u003d buf(len);\n        }\n        _currentSize \u003d _segmentSize \u003d 0;\n        append(buf, start, len);\n    }",
    "begin_line": 193,
    "end_line": 210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.resetWithString#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.resetWithString(java.lang.String)",
    "snippet": "public void resetWithString(String value)\n    {\n        _inputBuffer \u003d null;\n        _inputStart \u003d -1;\n        _inputLen \u003d 0;\n\n        _resultString \u003d value;\n        _resultArray \u003d null;\n\n        if (_hasSegments) {\n            clearSegments();\n        }\n        _currentSize \u003d 0;\n        \n    }",
    "begin_line": 212,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.buf#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.buf(int)",
    "snippet": "private char[] buf(int needed)\n    {\n        if (_allocator !\u003d null) {\n            return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);\n        }\n        return new char[Math.max(needed, MIN_SEGMENT_LEN)];\n    }",
    "begin_line": 232,
    "end_line": 238,
    "comment": "/** \n * Helper method used to find a buffer to use, ideally one recycled earlier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.clearSegments#240",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.clearSegments()",
    "snippet": "private void clearSegments()\n    {\n        _hasSegments \u003d false;\n        /* Let\u0027s start using _last_ segment from list; for one, it\u0027s\n         * the biggest one, and it\u0027s also most likely to be cached\n         */\n        /* 28-Aug-2009, tatu: Actually, the current segment should\n         *   be the biggest one, already\n         */\n        //_currentSegment \u003d _segments.get(_segments.size() - 1);\n        _segments.clear();\n        _currentSize \u003d _segmentSize \u003d 0;\n    }",
    "begin_line": 240,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.size#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.size()",
    "snippet": "public int size() {\n        if (_inputStart \u003e\u003d 0) { // shared copy from input buf\n            return _inputLen;\n        }\n        if (_resultArray !\u003d null) {\n            return _resultArray.length;\n        }\n        if (_resultString !\u003d null) {\n            return _resultString.length();\n        }\n        // local segmented buffers\n        return _segmentSize + _currentSize;\n    }",
    "begin_line": 263,
    "end_line": 275,
    "comment": "/** \n * @return Number of characters currently stored by this collector\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.getTextOffset#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.getTextOffset()",
    "snippet": "public int getTextOffset() {\n        /* Only shared input buffer can have non-zero offset; buffer\n         * segments start at 0, and if we have to create a combo buffer,\n         * that too will start from beginning of the buffer\n         */\n        return (_inputStart \u003e\u003d 0) ? _inputStart : 0;\n    }",
    "begin_line": 277,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.hasTextAsCharacters#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.hasTextAsCharacters()",
    "snippet": "public boolean hasTextAsCharacters()\n    {\n        // if we have array in some form, sure\n        if (_inputStart \u003e\u003d 0 || _resultArray !\u003d null)  return true;\n        // not if we have String as value\n        if (_resultString !\u003d null) return false;\n        return true;\n    }",
    "begin_line": 289,
    "end_line": 296,
    "comment": "/** \n * Method that can be used to check whether textual contents can be efficiently accessed using  {@link #getTextBuffer}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.getTextBuffer#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.getTextBuffer()",
    "snippet": "public char[] getTextBuffer()\n    {\n        // Are we just using shared input buffer?\n        if (_inputStart \u003e\u003d 0) return _inputBuffer;\n        if (_resultArray !\u003d null)  return _resultArray;\n        if (_resultString !\u003d null) {\n            return (_resultArray \u003d _resultString.toCharArray());\n        }\n        // Nope; but does it fit in just one segment?\n        if (!_hasSegments)  return _currentSegment;\n        // Nope, need to have/create a non-segmented array and return it\n        return contentsAsArray();\n    }",
    "begin_line": 298,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.contentsAsString#318",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.contentsAsString()",
    "snippet": "public String contentsAsString()\n    {\n        if (_resultString \u003d\u003d null) {\n            // Has array been requested? Can make a shortcut, if so:\n            if (_resultArray !\u003d null) {\n                _resultString \u003d new String(_resultArray);\n            } else {\n                // Do we use shared array?\n                if (_inputStart \u003e\u003d 0) {\n                    if (_inputLen \u003c 1) {\n                        return (_resultString \u003d \"\");\n                    }\n                    _resultString \u003d new String(_inputBuffer, _inputStart, _inputLen);\n                } else { // nope... need to copy\n                    // But first, let\u0027s see if we have just one buffer\n                    int segLen \u003d _segmentSize;\n                    int currLen \u003d _currentSize;\n                    \n                    if (segLen \u003d\u003d 0) { // yup\n                        _resultString \u003d (currLen \u003d\u003d 0) ? \"\" : new String(_currentSegment, 0, currLen);\n                    } else { // no, need to combine\n                        StringBuilder sb \u003d new StringBuilder(segLen + currLen);\n                        // First stored segments\n                        if (_segments !\u003d null) {\n                            for (int i \u003d 0, len \u003d _segments.size(); i \u003c len; ++i) {\n                                char[] curr \u003d _segments.get(i);\n                                sb.append(curr, 0, curr.length);\n                            }\n                        }\n                        // And finally, current segment:\n                        sb.append(_currentSegment, 0, _currentSize);\n                        _resultString \u003d sb.toString();\n                    }\n                }\n            }\n        }\n        return _resultString;\n    }",
    "begin_line": 318,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.contentsAsArray#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.contentsAsArray()",
    "snippet": "public char[] contentsAsArray() {\n        char[] result \u003d _resultArray;\n        if (result \u003d\u003d null) {\n            _resultArray \u003d result \u003d resultArray();\n        }\n        return result;\n    }",
    "begin_line": 357,
    "end_line": 363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.contentsAsDecimal#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal()",
    "snippet": "public BigDecimal contentsAsDecimal() throws NumberFormatException\n    {\n        // Already got a pre-cut array?\n        if (_resultArray !\u003d null) {\n            return NumberInput.parseBigDecimal(_resultArray);\n        }\n        // Or a shared buffer?\n        if ((_inputStart \u003e\u003d 0) \u0026\u0026 (_inputBuffer !\u003d null)) {\n            return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen);\n        }\n        // Or if not, just a single buffer (the usual case)\n        if ((_segmentSize \u003d\u003d 0) \u0026\u0026 (_currentSegment !\u003d null)) {\n            return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize);\n        }\n        // If not, let\u0027s just get it aggregated...\n        return NumberInput.parseBigDecimal(contentsAsArray());\n    }",
    "begin_line": 369,
    "end_line": 385,
    "comment": "/** \n * Convenience method for converting contents of the buffer into a  {@link BigDecimal}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.contentsAsDouble#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble()",
    "snippet": "public double contentsAsDouble() throws NumberFormatException {\n        return NumberInput.parseDouble(contentsAsString());\n    }",
    "begin_line": 391,
    "end_line": 393,
    "comment": "/** \n * Convenience method for converting contents of the buffer into a Double value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.ensureNotShared#405",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.ensureNotShared()",
    "snippet": "public void ensureNotShared() {\n        if (_inputStart \u003e\u003d 0) {\n            unshare(16);\n        }\n    }",
    "begin_line": 405,
    "end_line": 409,
    "comment": "/** \n * Method called to make sure that buffer is not using shared input buffer; if it is, it will copy such contents to private buffer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.append#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.append(char)",
    "snippet": "public void append(char c) {\n        // Using shared buffer so far?\n        if (_inputStart \u003e\u003d 0) {\n            unshare(16);\n        }\n        _resultString \u003d null;\n        _resultArray \u003d null;\n        // Room in current segment?\n        char[] curr \u003d _currentSegment;\n        if (_currentSize \u003e\u003d curr.length) {\n            expand(1);\n            curr \u003d _currentSegment;\n        }\n        curr[_currentSize++] \u003d c;\n    }",
    "begin_line": 411,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.append#427",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.append(char[], int, int)",
    "snippet": "public void append(char[] c, int start, int len)\n    {\n        // Can\u0027t append to shared buf (sanity check)\n        if (_inputStart \u003e\u003d 0) {\n            unshare(len);\n        }\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // Room in current segment?\n        char[] curr \u003d _currentSegment;\n        int max \u003d curr.length - _currentSize;\n            \n        if (max \u003e\u003d len) {\n            System.arraycopy(c, start, curr, _currentSize, len);\n            _currentSize +\u003d len;\n            return;\n        }\n        // No room for all, need to copy part(s):\n        if (max \u003e 0) {\n            System.arraycopy(c, start, curr, _currentSize, max);\n            start +\u003d max;\n            len -\u003d max;\n        }\n        /* And then allocate new segment; we are guaranteed to now\n         * have enough room in segment.\n         */\n        // Except, as per [Issue-24], not for HUGE appends... so:\n        do {\n            expand(len);\n            int amount \u003d Math.min(_currentSegment.length, len);\n            System.arraycopy(c, start, _currentSegment, 0, amount);\n            _currentSize +\u003d amount;\n            start +\u003d amount;\n            len -\u003d amount;\n        } while (len \u003e 0);\n    }",
    "begin_line": 427,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.append#465",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.append(java.lang.String, int, int)",
    "snippet": "public void append(String str, int offset, int len)\n    {\n        // Can\u0027t append to shared buf (sanity check)\n        if (_inputStart \u003e\u003d 0) {\n            unshare(len);\n        }\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // Room in current segment?\n        char[] curr \u003d _currentSegment;\n        int max \u003d curr.length - _currentSize;\n        if (max \u003e\u003d len) {\n            str.getChars(offset, offset+len, curr, _currentSize);\n            _currentSize +\u003d len;\n            return;\n        }\n        // No room for all, need to copy part(s):\n        if (max \u003e 0) {\n            str.getChars(offset, offset+max, curr, _currentSize);\n            len -\u003d max;\n            offset +\u003d max;\n        }\n        /* And then allocate new segment; we are guaranteed to now\n         * have enough room in segment.\n         */\n        // Except, as per [Issue-24], not for HUGE appends... so:\n        do {\n            expand(len);\n            int amount \u003d Math.min(_currentSegment.length, len);\n            str.getChars(offset, offset+amount, _currentSegment, 0);\n            _currentSize +\u003d amount;\n            offset +\u003d amount;\n            len -\u003d amount;\n        } while (len \u003e 0);\n    }",
    "begin_line": 465,
    "end_line": 500,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.getCurrentSegment#508",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegment()",
    "snippet": "public char[] getCurrentSegment()\n    {\n        /* Since the intention of the caller is to directly add stuff into\n         * buffers, we should NOT have anything in shared buffer... ie. may\n         * need to unshare contents.\n         */\n        if (_inputStart \u003e\u003d 0) {\n            unshare(1);\n        } else {\n            char[] curr \u003d _currentSegment;\n            if (curr \u003d\u003d null) {\n                _currentSegment \u003d buf(0);\n            } else if (_currentSize \u003e\u003d curr.length) {\n                // Plus, we better have room for at least one more char\n                expand(1);\n            }\n        }\n        return _currentSegment;\n    }",
    "begin_line": 508,
    "end_line": 526,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.emptyAndGetCurrentSegment#528",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.emptyAndGetCurrentSegment()",
    "snippet": "public char[] emptyAndGetCurrentSegment()\n    {\n        // inlined \u0027resetWithEmpty()\u0027\n        _inputStart \u003d -1; // indicates shared buffer not used\n        _currentSize \u003d 0;\n        _inputLen \u003d 0;\n\n        _inputBuffer \u003d null;\n        _resultString \u003d null;\n        _resultArray \u003d null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n        char[] curr \u003d _currentSegment;\n        if (curr \u003d\u003d null) {\n            _currentSegment \u003d curr \u003d buf(0);\n        }\n        return curr;\n    }",
    "begin_line": 528,
    "end_line": 548,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.getCurrentSegmentSize#550",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegmentSize()",
    "snippet": "public int getCurrentSegmentSize() { return _currentSize; }",
    "begin_line": 550,
    "end_line": 550,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.setCurrentLength#551",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength(int)",
    "snippet": "public void setCurrentLength(int len) { _currentSize \u003d len; }",
    "begin_line": 551,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.setCurrentAndReturn#556",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn(int)",
    "snippet": "public String setCurrentAndReturn(int len) {\n        _currentSize \u003d len;\n        // We can simplify handling here compared to full `contentsAsString()`:\n        if (_segmentSize \u003e 0) { // longer text; call main method\n            return contentsAsString();\n        }\n        // more common case: single segment\n        int currLen \u003d _currentSize;\n        String str \u003d (currLen \u003d\u003d 0) ? \"\" : new String(_currentSegment, 0, currLen);\n        _resultString \u003d str;\n        return str;\n    }",
    "begin_line": 556,
    "end_line": 567,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.finishCurrentSegment#569",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.finishCurrentSegment()",
    "snippet": "public char[] finishCurrentSegment() {\n        if (_segments \u003d\u003d null) {\n            _segments \u003d new ArrayList\u003cchar[]\u003e();\n        }\n        _hasSegments \u003d true;\n        _segments.add(_currentSegment);\n        int oldLen \u003d _currentSegment.length;\n        _segmentSize +\u003d oldLen;\n        _currentSize \u003d 0;\n\n        // Let\u0027s grow segments by 50%\n        int newLen \u003d oldLen + (oldLen \u003e\u003e 1);\n        if (newLen \u003c MIN_SEGMENT_LEN) {\n            newLen \u003d MIN_SEGMENT_LEN;\n        } else if (newLen \u003e MAX_SEGMENT_LEN) {\n            newLen \u003d MAX_SEGMENT_LEN;\n        }\n        char[] curr \u003d carr(newLen);\n        _currentSegment \u003d curr;\n        return curr;\n    }",
    "begin_line": 569,
    "end_line": 589,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.expandCurrentSegment#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment()",
    "snippet": "public char[] expandCurrentSegment()\n    {\n        final char[] curr \u003d _currentSegment;\n        // Let\u0027s grow by 50% by default\n        final int len \u003d curr.length;\n        int newLen \u003d len + (len \u003e\u003e 1);\n        // but above intended maximum, slow to increase by 25%\n        if (newLen \u003e MAX_SEGMENT_LEN) {\n            newLen \u003d len + (len \u003e\u003e 2);\n        }\n        return (_currentSegment \u003d Arrays.copyOf(curr, newLen));\n    }",
    "begin_line": 596,
    "end_line": 607,
    "comment": "/** \n * Method called to expand size of the current segment, to accommodate for more contiguous content. Usually only used when parsing tokens like names if even then.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.expandCurrentSegment#618",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(int)",
    "snippet": "public char[] expandCurrentSegment(int minSize) {\n        char[] curr \u003d _currentSegment;\n        if (curr.length \u003e\u003d minSize) return curr;\n        _currentSegment \u003d curr \u003d Arrays.copyOf(curr, minSize);\n        return curr;\n    }",
    "begin_line": 618,
    "end_line": 623,
    "comment": "/** \n * Method called to expand size of the current segment, to accommodate for more contiguous content. Usually only used when parsing tokens like names if even then.\n * @param minSize Required minimum strength of the current segment\n * @since 2.4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.toString#636",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.toString()",
    "snippet": "@Override public String toString() { return contentsAsString(); }",
    "begin_line": 636,
    "end_line": 636,
    "comment": "/** \n * Note: calling this method may not be as efficient as calling {@link #contentsAsString}, since it\u0027s not guaranteed that resulting String is cached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.unshare#648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.unshare(int)",
    "snippet": "private void unshare(int needExtra)\n    {\n        int sharedLen \u003d _inputLen;\n        _inputLen \u003d 0;\n        char[] inputBuf \u003d _inputBuffer;\n        _inputBuffer \u003d null;\n        int start \u003d _inputStart;\n        _inputStart \u003d -1;\n\n        // Is buffer big enough, or do we need to reallocate?\n        int needed \u003d sharedLen+needExtra;\n        if (_currentSegment \u003d\u003d null || needed \u003e _currentSegment.length) {\n            _currentSegment \u003d buf(needed);\n        }\n        if (sharedLen \u003e 0) {\n            System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);\n        }\n        _segmentSize \u003d 0;\n        _currentSize \u003d sharedLen;\n    }",
    "begin_line": 648,
    "end_line": 667,
    "comment": "/** \n * Method called if/when we need to append content when we have been initialized to use shared buffer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.expand#673",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.expand(int)",
    "snippet": "private void expand(int minNewSegmentSize)\n    {\n        // First, let\u0027s move current segment to segment list:\n        if (_segments \u003d\u003d null) {\n            _segments \u003d new ArrayList\u003cchar[]\u003e();\n        }\n        char[] curr \u003d _currentSegment;\n        _hasSegments \u003d true;\n        _segments.add(curr);\n        _segmentSize +\u003d curr.length;\n        _currentSize \u003d 0;\n        int oldLen \u003d curr.length;\n        \n        // Let\u0027s grow segments by 50% minimum\n        int newLen \u003d oldLen + (oldLen \u003e\u003e 1);\n        if (newLen \u003c MIN_SEGMENT_LEN) {\n            newLen \u003d MIN_SEGMENT_LEN;\n        } else if (newLen \u003e MAX_SEGMENT_LEN) {\n            newLen \u003d MAX_SEGMENT_LEN;\n        }\n        _currentSegment \u003d carr(newLen);\n    }",
    "begin_line": 673,
    "end_line": 694,
    "comment": "/** \n * Method called when current segment is full, to allocate new segment.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.resultArray#696",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.resultArray()",
    "snippet": "private char[] resultArray()\n    {\n        if (_resultString !\u003d null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart \u003e\u003d 0) {\n            final int len \u003d _inputLen;\n            if (len \u003c 1) {\n                return NO_CHARS;\n            }\n            final int start \u003d _inputStart;\n            if (start \u003d\u003d 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size \u003d size();\n        if (size \u003c 1) {\n            return NO_CHARS;\n        }\n        int offset \u003d 0;\n        final char[] result \u003d carr(size);\n        if (_segments !\u003d null) {\n            for (int i \u003d 0, len \u003d _segments.size(); i \u003c len; ++i) {\n                char[] curr \u003d _segments.get(i);\n                int currLen \u003d curr.length;\n                System.arraycopy(curr, 0, result, offset, currLen);\n                offset +\u003d currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
    "begin_line": 696,
    "end_line": 730,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextBuffer.carr#732",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/core/util/TextBuffer.java",
    "class_name": "com.fasterxml.jackson.core.util.TextBuffer",
    "signature": "com.fasterxml.jackson.core.util.TextBuffer.carr(int)",
    "snippet": "private char[] carr(int len) { return new char[len]; }",
    "begin_line": 732,
    "end_line": 732,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]