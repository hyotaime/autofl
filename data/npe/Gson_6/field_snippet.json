[
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE",
    "snippet": "static final boolean DEFAULT_JSON_NON_EXECUTABLE \u003d false;",
    "begin_line": 103,
    "end_line": 103,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_LENIENT",
    "snippet": "static final boolean DEFAULT_LENIENT \u003d false;",
    "begin_line": 104,
    "end_line": 104,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_PRETTY_PRINT",
    "snippet": "static final boolean DEFAULT_PRETTY_PRINT \u003d false;",
    "begin_line": 105,
    "end_line": 105,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_ESCAPE_HTML",
    "snippet": "static final boolean DEFAULT_ESCAPE_HTML \u003d true;",
    "begin_line": 106,
    "end_line": 106,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS",
    "snippet": "static final boolean DEFAULT_SERIALIZE_NULLS \u003d false;",
    "begin_line": 107,
    "end_line": 107,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS",
    "snippet": "static final boolean DEFAULT_COMPLEX_MAP_KEYS \u003d false;",
    "begin_line": 108,
    "end_line": 108,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES",
    "snippet": "static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES \u003d false;",
    "begin_line": 109,
    "end_line": 109,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX",
    "snippet": "private static final String JSON_NON_EXECUTABLE_PREFIX \u003d \")]}\u0027\\n\";",
    "begin_line": 111,
    "end_line": 111,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.calls",
    "snippet": "private final ThreadLocal\u003cMap\u003cTypeToken\u003c?\u003e, FutureTypeAdapter\u003c?\u003e\u003e\u003e calls\n      \u003d new ThreadLocal\u003cMap\u003cTypeToken\u003c?\u003e, FutureTypeAdapter\u003c?\u003e\u003e\u003e();",
    "begin_line": 120,
    "end_line": 121,
    "comment": "/** \n * This thread local guards against reentrant calls to getAdapter(). In certain object graphs, creating an adapter for a type may recursively require an adapter for the same type! Without intervention, the recursive lookup would stack overflow. We cheat by returning a proxy type adapter. The proxy is wired up once the initial adapter has been created.\n */\n"
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.typeTokenCache",
    "snippet": "private final Map\u003cTypeToken\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e typeTokenCache\n      \u003d Collections.synchronizedMap(new HashMap\u003cTypeToken\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e());",
    "begin_line": 123,
    "end_line": 124,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.factories",
    "snippet": "private final List\u003cTypeAdapterFactory\u003e factories;",
    "begin_line": 126,
    "end_line": 126,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.constructorConstructor",
    "snippet": "private final ConstructorConstructor constructorConstructor;",
    "begin_line": 127,
    "end_line": 127,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.serializeNulls",
    "snippet": "private final boolean serializeNulls;",
    "begin_line": 129,
    "end_line": 129,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.htmlSafe",
    "snippet": "private final boolean htmlSafe;",
    "begin_line": 130,
    "end_line": 130,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.generateNonExecutableJson",
    "snippet": "private final boolean generateNonExecutableJson;",
    "begin_line": 131,
    "end_line": 131,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.prettyPrinting",
    "snippet": "private final boolean prettyPrinting;",
    "begin_line": 132,
    "end_line": 132,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.lenient",
    "snippet": "private final boolean lenient;",
    "begin_line": 133,
    "end_line": 133,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.deserializationContext",
    "snippet": "final JsonDeserializationContext deserializationContext \u003d new JsonDeserializationContext() {\n    @SuppressWarnings(\"unchecked\")\n    @Override public \u003cT\u003e T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n      return (T) fromJson(json, typeOfT);\n    }\n  };",
    "begin_line": 135,
    "end_line": 140,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.serializationContext",
    "snippet": "final JsonSerializationContext serializationContext \u003d new JsonSerializationContext() {\n    @Override public JsonElement serialize(Object src) {\n      return toJsonTree(src);\n    }\n    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n      return toJsonTree(src, typeOfSrc);\n    }\n  };",
    "begin_line": 142,
    "end_line": 149,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.Gson",
    "src_path": "com/google/gson/Gson.java",
    "signature": "com.google.gson.Gson.delegate",
    "snippet": "private TypeAdapter\u003cT\u003e delegate;",
    "begin_line": 948,
    "end_line": 948,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.ConstructorConstructor",
    "src_path": "com/google/gson/internal/ConstructorConstructor.java",
    "signature": "com.google.gson.internal.ConstructorConstructor.instanceCreators",
    "snippet": "private final Map\u003cType, InstanceCreator\u003c?\u003e\u003e instanceCreators;",
    "begin_line": 49,
    "end_line": 49,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.ConstructorConstructor",
    "src_path": "com/google/gson/internal/ConstructorConstructor.java",
    "signature": "com.google.gson.internal.ConstructorConstructor.unsafeAllocator",
    "snippet": "private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();",
    "begin_line": 219,
    "end_line": 219,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.IGNORE_VERSIONS",
    "snippet": "private static final double IGNORE_VERSIONS \u003d -1.0d;",
    "begin_line": 51,
    "end_line": 51,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.DEFAULT",
    "snippet": "public static final Excluder DEFAULT \u003d new Excluder();",
    "begin_line": 52,
    "end_line": 52,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.version",
    "snippet": "private double version \u003d IGNORE_VERSIONS;",
    "begin_line": 54,
    "end_line": 54,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.modifiers",
    "snippet": "private int modifiers \u003d Modifier.TRANSIENT | Modifier.STATIC;",
    "begin_line": 55,
    "end_line": 55,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.serializeInnerClasses",
    "snippet": "private boolean serializeInnerClasses \u003d true;",
    "begin_line": 56,
    "end_line": 56,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.requireExpose",
    "snippet": "private boolean requireExpose;",
    "begin_line": 57,
    "end_line": 57,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.serializationStrategies",
    "snippet": "private List\u003cExclusionStrategy\u003e serializationStrategies \u003d Collections.emptyList();",
    "begin_line": 58,
    "end_line": 58,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.deserializationStrategies",
    "snippet": "private List\u003cExclusionStrategy\u003e deserializationStrategies \u003d Collections.emptyList();",
    "begin_line": 59,
    "end_line": 59,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Excluder",
    "src_path": "com/google/gson/internal/Excluder.java",
    "signature": "com.google.gson.internal.Excluder.delegate",
    "snippet": "private TypeAdapter\u003cT\u003e delegate;",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * The delegate is lazily created because it may not be needed, and creating it may fail. \n */\n"
  },
  {
    "class_name": "com.google.gson.internal.JsonReaderInternalAccess",
    "src_path": "com/google/gson/internal/JsonReaderInternalAccess.java",
    "signature": "com.google.gson.internal.JsonReaderInternalAccess.INSTANCE",
    "snippet": "public static JsonReaderInternalAccess INSTANCE;",
    "begin_line": 26,
    "end_line": 26,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Streams",
    "src_path": "com/google/gson/internal/Streams.java",
    "signature": "com.google.gson.internal.Streams.appendable",
    "snippet": "private final Appendable appendable;",
    "begin_line": 85,
    "end_line": 85,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Streams",
    "src_path": "com/google/gson/internal/Streams.java",
    "signature": "com.google.gson.internal.Streams.currentWrite",
    "snippet": "private final CurrentWrite currentWrite \u003d new CurrentWrite();",
    "begin_line": 86,
    "end_line": 86,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.Streams",
    "src_path": "com/google/gson/internal/Streams.java",
    "signature": "com.google.gson.internal.Streams.chars",
    "snippet": " char[] chars;",
    "begin_line": 108,
    "end_line": 108,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ArrayTypeAdapter",
    "src_path": "com/google/gson/internal/bind/ArrayTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.ArrayTypeAdapter.FACTORY",
    "snippet": "public static final TypeAdapterFactory FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      Type type \u003d typeToken.getType();\n      if (!(type instanceof GenericArrayType || type instanceof Class \u0026\u0026 ((Class\u003c?\u003e) type).isArray())) {\n        return null;\n      }\n\n      Type componentType \u003d $Gson$Types.getArrayComponentType(type);\n      TypeAdapter\u003c?\u003e componentTypeAdapter \u003d gson.getAdapter(TypeToken.get(componentType));\n      return new ArrayTypeAdapter(\n              gson, componentTypeAdapter, $Gson$Types.getRawType(componentType));\n    }\n  };",
    "begin_line": 39,
    "end_line": 52,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ArrayTypeAdapter",
    "src_path": "com/google/gson/internal/bind/ArrayTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.ArrayTypeAdapter.componentType",
    "snippet": "private final Class\u003cE\u003e componentType;",
    "begin_line": 54,
    "end_line": 54,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ArrayTypeAdapter",
    "src_path": "com/google/gson/internal/bind/ArrayTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.ArrayTypeAdapter.componentTypeAdapter",
    "snippet": "private final TypeAdapter\u003cE\u003e componentTypeAdapter;",
    "begin_line": 55,
    "end_line": 55,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/CollectionTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory.constructorConstructor",
    "snippet": "private final ConstructorConstructor constructorConstructor;",
    "begin_line": 37,
    "end_line": 37,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/CollectionTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory.elementTypeAdapter",
    "snippet": "private final TypeAdapter\u003cE\u003e elementTypeAdapter;",
    "begin_line": 62,
    "end_line": 62,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/CollectionTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory.constructor",
    "snippet": "private final ObjectConstructor\u003c? extends Collection\u003cE\u003e\u003e constructor;",
    "begin_line": 63,
    "end_line": 63,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.DateTypeAdapter",
    "src_path": "com/google/gson/internal/bind/DateTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.DateTypeAdapter.FACTORY",
    "snippet": "public static final TypeAdapterFactory FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the \u0027T\u0027s equal\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      return typeToken.getRawType() \u003d\u003d Date.class ? (TypeAdapter\u003cT\u003e) new DateTypeAdapter() : null;\n    }\n  };",
    "begin_line": 42,
    "end_line": 47,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.DateTypeAdapter",
    "src_path": "com/google/gson/internal/bind/DateTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.DateTypeAdapter.enUsFormat",
    "snippet": "private final DateFormat enUsFormat\n      \u003d DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);",
    "begin_line": 49,
    "end_line": 50,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.DateTypeAdapter",
    "src_path": "com/google/gson/internal/bind/DateTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.DateTypeAdapter.localFormat",
    "snippet": "private final DateFormat localFormat\n      \u003d DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);",
    "begin_line": 51,
    "end_line": 52,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.constructorConstructor",
    "snippet": "private final ConstructorConstructor constructorConstructor;",
    "begin_line": 34,
    "end_line": 34,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.MapTypeAdapterFactory.constructorConstructor",
    "snippet": "private final ConstructorConstructor constructorConstructor;",
    "begin_line": 106,
    "end_line": 106,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.MapTypeAdapterFactory.complexMapKeySerialization",
    "snippet": "final boolean complexMapKeySerialization;",
    "begin_line": 107,
    "end_line": 107,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.MapTypeAdapterFactory.keyTypeAdapter",
    "snippet": "private final TypeAdapter\u003cK\u003e keyTypeAdapter;",
    "begin_line": 146,
    "end_line": 146,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.MapTypeAdapterFactory.valueTypeAdapter",
    "snippet": "private final TypeAdapter\u003cV\u003e valueTypeAdapter;",
    "begin_line": 147,
    "end_line": 147,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.MapTypeAdapterFactory.constructor",
    "snippet": "private final ObjectConstructor\u003c? extends Map\u003cK, V\u003e\u003e constructor;",
    "begin_line": 148,
    "end_line": 148,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ObjectTypeAdapter",
    "src_path": "com/google/gson/internal/bind/ObjectTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.ObjectTypeAdapter.FACTORY",
    "snippet": "public static final TypeAdapterFactory FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\")\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e type) {\n      if (type.getRawType() \u003d\u003d Object.class) {\n        return (TypeAdapter\u003cT\u003e) new ObjectTypeAdapter(gson);\n      }\n      return null;\n    }\n  };",
    "begin_line": 38,
    "end_line": 46,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ObjectTypeAdapter",
    "src_path": "com/google/gson/internal/bind/ObjectTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.ObjectTypeAdapter.gson",
    "snippet": "private final Gson gson;",
    "begin_line": 48,
    "end_line": 48,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.constructorConstructor",
    "snippet": "private final ConstructorConstructor constructorConstructor;",
    "begin_line": 49,
    "end_line": 49,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.fieldNamingPolicy",
    "snippet": "private final FieldNamingStrategy fieldNamingPolicy;",
    "begin_line": 50,
    "end_line": 50,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excluder",
    "snippet": "private final Excluder excluder;",
    "begin_line": 51,
    "end_line": 51,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.typeAdapter",
    "snippet": "final TypeAdapter\u003c?\u003e typeAdapter \u003d getFieldAdapter(context, field, fieldType);",
    "begin_line": 105,
    "end_line": 105,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.name",
    "snippet": "final String name;",
    "begin_line": 177,
    "end_line": 177,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.serialized",
    "snippet": "final boolean serialized;",
    "begin_line": 178,
    "end_line": 178,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.deserialized",
    "snippet": "final boolean deserialized;",
    "begin_line": 179,
    "end_line": 179,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.constructor",
    "snippet": "private final ObjectConstructor\u003cT\u003e constructor;",
    "begin_line": 192,
    "end_line": 192,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "src_path": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.boundFields",
    "snippet": "private final Map\u003cString, BoundField\u003e boundFields;",
    "begin_line": 193,
    "end_line": 193,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.SqlDateTypeAdapter",
    "src_path": "com/google/gson/internal/bind/SqlDateTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.SqlDateTypeAdapter.FACTORY",
    "snippet": "public static final TypeAdapterFactory FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the \u0027T\u0027s equal\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      return typeToken.getRawType() \u003d\u003d java.sql.Date.class\n          ? (TypeAdapter\u003cT\u003e) new SqlDateTypeAdapter() : null;\n    }\n  };",
    "begin_line": 39,
    "end_line": 45,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.SqlDateTypeAdapter",
    "src_path": "com/google/gson/internal/bind/SqlDateTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.SqlDateTypeAdapter.format",
    "snippet": "private final DateFormat format \u003d new SimpleDateFormat(\"MMM d, yyyy\");",
    "begin_line": 47,
    "end_line": 47,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TimeTypeAdapter",
    "src_path": "com/google/gson/internal/bind/TimeTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.TimeTypeAdapter.FACTORY",
    "snippet": "public static final TypeAdapterFactory FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the \u0027T\u0027s equal\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      return typeToken.getRawType() \u003d\u003d Time.class ? (TypeAdapter\u003cT\u003e) new TimeTypeAdapter() : null;\n    }\n  };",
    "begin_line": 41,
    "end_line": 46,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TimeTypeAdapter",
    "src_path": "com/google/gson/internal/bind/TimeTypeAdapter.java",
    "signature": "com.google.gson.internal.bind.TimeTypeAdapter.format",
    "snippet": "private final DateFormat format \u003d new SimpleDateFormat(\"hh:mm:ss a\");",
    "begin_line": 48,
    "end_line": 48,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CLASS",
    "snippet": "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter\u003cClass\u003e CLASS \u003d new TypeAdapter\u003cClass\u003e() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value \u003d\u003d null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
    "begin_line": 69,
    "end_line": 89,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CLASS_FACTORY",
    "snippet": "public static final TypeAdapterFactory CLASS_FACTORY \u003d newFactory(Class.class, CLASS);",
    "begin_line": 90,
    "end_line": 90,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BIT_SET",
    "snippet": "public static final TypeAdapter\u003cBitSet\u003e BIT_SET \u003d new TypeAdapter\u003cBitSet\u003e() {\n    @Override public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset \u003d new BitSet();\n      in.beginArray();\n      int i \u003d 0;\n      JsonToken tokenType \u003d in.peek();\n      while (tokenType !\u003d JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set \u003d in.nextInt() !\u003d 0;\n          break;\n        case BOOLEAN:\n          set \u003d in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue \u003d in.nextString();\n          try {\n            set \u003d Integer.parseInt(stringValue) !\u003d 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType \u003d in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src \u003d\u003d null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i \u003d 0; i \u003c src.length(); i++) {\n        int value \u003d (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
    "begin_line": 92,
    "end_line": 147,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BIT_SET_FACTORY",
    "snippet": "public static final TypeAdapterFactory BIT_SET_FACTORY \u003d newFactory(BitSet.class, BIT_SET);",
    "begin_line": 149,
    "end_line": 149,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BOOLEAN",
    "snippet": "public static final TypeAdapter\u003cBoolean\u003e BOOLEAN \u003d new TypeAdapter\u003cBoolean\u003e() {\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else if (in.peek() \u003d\u003d JsonToken.STRING) {\n        // support strings for compatibility with GSON 1.7\n        return Boolean.parseBoolean(in.nextString());\n      }\n      return in.nextBoolean();\n    }\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n      if (value \u003d\u003d null) {\n        out.nullValue();\n        return;\n      }\n      out.value(value);\n    }\n  };",
    "begin_line": 151,
    "end_line": 171,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BOOLEAN_AS_STRING",
    "snippet": "public static final TypeAdapter\u003cBoolean\u003e BOOLEAN_AS_STRING \u003d new TypeAdapter\u003cBoolean\u003e() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value \u003d\u003d null ? \"null\" : value.toString());\n    }\n  };",
    "begin_line": 177,
    "end_line": 189,
    "comment": "/** \n * Writes a boolean as a string. Useful for map keys, where booleans aren\u0027t otherwise permitted.\n */\n"
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BOOLEAN_FACTORY",
    "snippet": "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      \u003d newFactory(boolean.class, Boolean.class, BOOLEAN);",
    "begin_line": 191,
    "end_line": 192,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BYTE",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e BYTE \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue \u003d in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 194,
    "end_line": 212,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BYTE_FACTORY",
    "snippet": "public static final TypeAdapterFactory BYTE_FACTORY\n      \u003d newFactory(byte.class, Byte.class, BYTE);",
    "begin_line": 214,
    "end_line": 215,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.SHORT",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e SHORT \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 217,
    "end_line": 234,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.SHORT_FACTORY",
    "snippet": "public static final TypeAdapterFactory SHORT_FACTORY\n      \u003d newFactory(short.class, Short.class, SHORT);",
    "begin_line": 236,
    "end_line": 237,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.INTEGER",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e INTEGER \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 239,
    "end_line": 256,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.INTEGER_FACTORY",
    "snippet": "public static final TypeAdapterFactory INTEGER_FACTORY\n      \u003d newFactory(int.class, Integer.class, INTEGER);",
    "begin_line": 257,
    "end_line": 258,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_INTEGER",
    "snippet": "public static final TypeAdapter\u003cAtomicInteger\u003e ATOMIC_INTEGER \u003d new TypeAdapter\u003cAtomicInteger\u003e() {\n    @Override public AtomicInteger read(JsonReader in) throws IOException {\n      try {\n        return new AtomicInteger(in.nextInt());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
    "begin_line": 260,
    "end_line": 271,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_INTEGER_FACTORY",
    "snippet": "public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY \u003d\n      newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);",
    "begin_line": 272,
    "end_line": 273,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_BOOLEAN",
    "snippet": "public static final TypeAdapter\u003cAtomicBoolean\u003e ATOMIC_BOOLEAN \u003d new TypeAdapter\u003cAtomicBoolean\u003e() {\n    @Override public AtomicBoolean read(JsonReader in) throws IOException {\n      return new AtomicBoolean(in.nextBoolean());\n    }\n    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
    "begin_line": 275,
    "end_line": 282,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_BOOLEAN_FACTORY",
    "snippet": "public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY \u003d\n      newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);",
    "begin_line": 283,
    "end_line": 284,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_INTEGER_ARRAY",
    "snippet": "public static final TypeAdapter\u003cAtomicIntegerArray\u003e ATOMIC_INTEGER_ARRAY \u003d new TypeAdapter\u003cAtomicIntegerArray\u003e() {\n    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {\n        List\u003cInteger\u003e list \u003d new ArrayList\u003cInteger\u003e();\n        in.beginArray();\n        while (in.hasNext()) {\n          try {\n            int integer \u003d in.nextInt();\n            list.add(integer);\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n          }\n        }\n        in.endArray();\n        int length \u003d list.size();\n        AtomicIntegerArray array \u003d new AtomicIntegerArray(length);\n        for (int i \u003d 0; i \u003c length; ++i) {\n          array.set(i, list.get(i));\n        }\n        return array;\n    }\n    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {\n      out.beginArray();\n      for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        out.value(value.get(i));\n      }\n      out.endArray();\n    }\n  }.nullSafe();",
    "begin_line": 286,
    "end_line": 313,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY",
    "snippet": "public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY \u003d\n      newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);",
    "begin_line": 314,
    "end_line": 315,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.LONG",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e LONG \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 317,
    "end_line": 334,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.FLOAT",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e FLOAT \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 336,
    "end_line": 349,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.DOUBLE",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e DOUBLE \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 351,
    "end_line": 364,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.NUMBER",
    "snippet": "public static final TypeAdapter\u003cNumber\u003e NUMBER \u003d new TypeAdapter\u003cNumber\u003e() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken \u003d in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 366,
    "end_line": 384,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.NUMBER_FACTORY",
    "snippet": "public static final TypeAdapterFactory NUMBER_FACTORY \u003d newFactory(Number.class, NUMBER);",
    "begin_line": 386,
    "end_line": 386,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CHARACTER",
    "snippet": "public static final TypeAdapter\u003cCharacter\u003e CHARACTER \u003d new TypeAdapter\u003cCharacter\u003e() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str \u003d in.nextString();\n      if (str.length() !\u003d 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value \u003d\u003d null ? null : String.valueOf(value));\n    }\n  };",
    "begin_line": 388,
    "end_line": 405,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CHARACTER_FACTORY",
    "snippet": "public static final TypeAdapterFactory CHARACTER_FACTORY\n      \u003d newFactory(char.class, Character.class, CHARACTER);",
    "begin_line": 407,
    "end_line": 408,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING",
    "snippet": "public static final TypeAdapter\u003cString\u003e STRING \u003d new TypeAdapter\u003cString\u003e() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek \u003d in.peek();\n      if (peek \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      /* coerce booleans to strings for backwards compatibility */\n      if (peek \u003d\u003d JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 410,
    "end_line": 428,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BIG_DECIMAL",
    "snippet": "public static final TypeAdapter\u003cBigDecimal\u003e BIG_DECIMAL \u003d new TypeAdapter\u003cBigDecimal\u003e() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 430,
    "end_line": 446,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.BIG_INTEGER",
    "snippet": "public static final TypeAdapter\u003cBigInteger\u003e BIG_INTEGER \u003d new TypeAdapter\u003cBigInteger\u003e() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
    "begin_line": 448,
    "end_line": 464,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING_FACTORY",
    "snippet": "public static final TypeAdapterFactory STRING_FACTORY \u003d newFactory(String.class, STRING);",
    "begin_line": 466,
    "end_line": 466,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING_BUILDER",
    "snippet": "public static final TypeAdapter\u003cStringBuilder\u003e STRING_BUILDER \u003d new TypeAdapter\u003cStringBuilder\u003e() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toString());\n    }\n  };",
    "begin_line": 468,
    "end_line": 481,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING_BUILDER_FACTORY",
    "snippet": "public static final TypeAdapterFactory STRING_BUILDER_FACTORY \u003d\n    newFactory(StringBuilder.class, STRING_BUILDER);",
    "begin_line": 483,
    "end_line": 484,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING_BUFFER",
    "snippet": "public static final TypeAdapter\u003cStringBuffer\u003e STRING_BUFFER \u003d new TypeAdapter\u003cStringBuffer\u003e() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toString());\n    }\n  };",
    "begin_line": 486,
    "end_line": 499,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.STRING_BUFFER_FACTORY",
    "snippet": "public static final TypeAdapterFactory STRING_BUFFER_FACTORY \u003d\n    newFactory(StringBuffer.class, STRING_BUFFER);",
    "begin_line": 501,
    "end_line": 502,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.URL",
    "snippet": "public static final TypeAdapter\u003cURL\u003e URL \u003d new TypeAdapter\u003cURL\u003e() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString \u003d in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toExternalForm());\n    }\n  };",
    "begin_line": 504,
    "end_line": 518,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.URL_FACTORY",
    "snippet": "public static final TypeAdapterFactory URL_FACTORY \u003d newFactory(URL.class, URL);",
    "begin_line": 520,
    "end_line": 520,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.URI",
    "snippet": "public static final TypeAdapter\u003cURI\u003e URI \u003d new TypeAdapter\u003cURI\u003e() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString \u003d in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toASCIIString());\n    }\n  };",
    "begin_line": 522,
    "end_line": 540,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.URI_FACTORY",
    "snippet": "public static final TypeAdapterFactory URI_FACTORY \u003d newFactory(URI.class, URI);",
    "begin_line": 542,
    "end_line": 542,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.INET_ADDRESS",
    "snippet": "public static final TypeAdapter\u003cInetAddress\u003e INET_ADDRESS \u003d new TypeAdapter\u003cInetAddress\u003e() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.getHostAddress());\n    }\n  };",
    "begin_line": 544,
    "end_line": 558,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.INET_ADDRESS_FACTORY",
    "snippet": "public static final TypeAdapterFactory INET_ADDRESS_FACTORY \u003d\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
    "begin_line": 560,
    "end_line": 561,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.UUID",
    "snippet": "public static final TypeAdapter\u003cUUID\u003e UUID \u003d new TypeAdapter\u003cUUID\u003e() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toString());\n    }\n  };",
    "begin_line": 563,
    "end_line": 576,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.UUID_FACTORY",
    "snippet": "public static final TypeAdapterFactory UUID_FACTORY \u003d newFactory(UUID.class, UUID);",
    "begin_line": 578,
    "end_line": 578,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CURRENCY",
    "snippet": "public static final TypeAdapter\u003cCurrency\u003e CURRENCY \u003d new TypeAdapter\u003cCurrency\u003e() {\n    @Override\n    public Currency read(JsonReader in) throws IOException {\n      return Currency.getInstance(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, Currency value) throws IOException {\n      out.value(value.getCurrencyCode());\n    }\n  }.nullSafe();",
    "begin_line": 580,
    "end_line": 589,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CURRENCY_FACTORY",
    "snippet": "public static final TypeAdapterFactory CURRENCY_FACTORY \u003d newFactory(Currency.class, CURRENCY);",
    "begin_line": 590,
    "end_line": 590,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.TIMESTAMP_FACTORY",
    "snippet": "public static final TypeAdapterFactory TIMESTAMP_FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the \u0027T\u0027s equal\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      if (typeToken.getRawType() !\u003d Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter\u003cDate\u003e dateTypeAdapter \u003d gson.getAdapter(Date.class);\n      return (TypeAdapter\u003cT\u003e) new TypeAdapter\u003cTimestamp\u003e() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date \u003d dateTypeAdapter.read(in);\n          return date !\u003d null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
    "begin_line": 592,
    "end_line": 611,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CALENDAR",
    "snippet": "public static final TypeAdapter\u003cCalendar\u003e CALENDAR \u003d new TypeAdapter\u003cCalendar\u003e() {\n    private static final String YEAR \u003d \"year\";\n    private static final String MONTH \u003d \"month\";\n    private static final String DAY_OF_MONTH \u003d \"dayOfMonth\";\n    private static final String HOUR_OF_DAY \u003d \"hourOfDay\";\n    private static final String MINUTE \u003d \"minute\";\n    private static final String SECOND \u003d \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year \u003d 0;\n      int month \u003d 0;\n      int dayOfMonth \u003d 0;\n      int hourOfDay \u003d 0;\n      int minute \u003d 0;\n      int second \u003d 0;\n      while (in.peek() !\u003d JsonToken.END_OBJECT) {\n        String name \u003d in.nextName();\n        int value \u003d in.nextInt();\n        if (YEAR.equals(name)) {\n          year \u003d value;\n        } else if (MONTH.equals(name)) {\n          month \u003d value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth \u003d value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay \u003d value;\n        } else if (MINUTE.equals(name)) {\n          minute \u003d value;\n        } else if (SECOND.equals(name)) {\n          second \u003d value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value \u003d\u003d null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
    "begin_line": 613,
    "end_line": 676,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.YEAR",
    "snippet": "private static final String YEAR \u003d \"year\";",
    "begin_line": 614,
    "end_line": 614,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.MONTH",
    "snippet": "private static final String MONTH \u003d \"month\";",
    "begin_line": 615,
    "end_line": 615,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.DAY_OF_MONTH",
    "snippet": "private static final String DAY_OF_MONTH \u003d \"dayOfMonth\";",
    "begin_line": 616,
    "end_line": 616,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.HOUR_OF_DAY",
    "snippet": "private static final String HOUR_OF_DAY \u003d \"hourOfDay\";",
    "begin_line": 617,
    "end_line": 617,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.MINUTE",
    "snippet": "private static final String MINUTE \u003d \"minute\";",
    "begin_line": 618,
    "end_line": 618,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.SECOND",
    "snippet": "private static final String SECOND \u003d \"second\";",
    "begin_line": 619,
    "end_line": 619,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.CALENDAR_FACTORY",
    "snippet": "public static final TypeAdapterFactory CALENDAR_FACTORY \u003d\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
    "begin_line": 678,
    "end_line": 679,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.LOCALE",
    "snippet": "public static final TypeAdapter\u003cLocale\u003e LOCALE \u003d new TypeAdapter\u003cLocale\u003e() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() \u003d\u003d JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale \u003d in.nextString();\n      StringTokenizer tokenizer \u003d new StringTokenizer(locale, \"_\");\n      String language \u003d null;\n      String country \u003d null;\n      String variant \u003d null;\n      if (tokenizer.hasMoreElements()) {\n        language \u003d tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country \u003d tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant \u003d tokenizer.nextToken();\n      }\n      if (country \u003d\u003d null \u0026\u0026 variant \u003d\u003d null) {\n        return new Locale(language);\n      } else if (variant \u003d\u003d null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value \u003d\u003d null ? null : value.toString());\n    }\n  };",
    "begin_line": 681,
    "end_line": 714,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.LOCALE_FACTORY",
    "snippet": "public static final TypeAdapterFactory LOCALE_FACTORY \u003d newFactory(Locale.class, LOCALE);",
    "begin_line": 716,
    "end_line": 716,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.JSON_ELEMENT",
    "snippet": "public static final TypeAdapter\u003cJsonElement\u003e JSON_ELEMENT \u003d new TypeAdapter\u003cJsonElement\u003e() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number \u003d in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array \u003d new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object \u003d new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value \u003d\u003d null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive \u003d value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry\u003cString, JsonElement\u003e e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn\u0027t write \" + value.getClass());\n      }\n    }\n  };",
    "begin_line": 718,
    "end_line": 788,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.JSON_ELEMENT_FACTORY",
    "snippet": "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      \u003d newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
    "begin_line": 790,
    "end_line": 791,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.nameToConstant",
    "snippet": "private final Map\u003cString, T\u003e nameToConstant \u003d new HashMap\u003cString, T\u003e();",
    "begin_line": 794,
    "end_line": 794,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.constantToName",
    "snippet": "private final Map\u003cT, String\u003e constantToName \u003d new HashMap\u003cT, String\u003e();",
    "begin_line": 795,
    "end_line": 795,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.internal.bind.TypeAdapters",
    "src_path": "com/google/gson/internal/bind/TypeAdapters.java",
    "signature": "com.google.gson.internal.bind.TypeAdapters.ENUM_FACTORY",
    "snippet": "public static final TypeAdapterFactory ENUM_FACTORY \u003d new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n      Class\u003c? super T\u003e rawType \u003d typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType \u003d\u003d Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType \u003d rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter\u003cT\u003e) new EnumTypeAdapter(rawType);\n    }\n  };",
    "begin_line": 828,
    "end_line": 840,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.reflect.TypeToken",
    "src_path": "com/google/gson/reflect/TypeToken.java",
    "signature": "com.google.gson.reflect.TypeToken.rawType",
    "snippet": "final Class\u003c? super T\u003e rawType;",
    "begin_line": 48,
    "end_line": 48,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.reflect.TypeToken",
    "src_path": "com/google/gson/reflect/TypeToken.java",
    "signature": "com.google.gson.reflect.TypeToken.type",
    "snippet": "final Type type;",
    "begin_line": 49,
    "end_line": 49,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.reflect.TypeToken",
    "src_path": "com/google/gson/reflect/TypeToken.java",
    "signature": "com.google.gson.reflect.TypeToken.hashCode",
    "snippet": "final int hashCode;",
    "begin_line": 50,
    "end_line": 50,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX",
    "snippet": "private static final char[] NON_EXECUTE_PREFIX \u003d \")]}\u0027\\n\".toCharArray();",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * The only non-execute prefix this parser permits \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.MIN_INCOMPLETE_INTEGER",
    "snippet": "private static final long MIN_INCOMPLETE_INTEGER \u003d Long.MIN_VALUE / 10;",
    "begin_line": 193,
    "end_line": 193,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_NONE",
    "snippet": "private static final int PEEKED_NONE \u003d 0;",
    "begin_line": 195,
    "end_line": 195,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT",
    "snippet": "private static final int PEEKED_BEGIN_OBJECT \u003d 1;",
    "begin_line": 196,
    "end_line": 196,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_END_OBJECT",
    "snippet": "private static final int PEEKED_END_OBJECT \u003d 2;",
    "begin_line": 197,
    "end_line": 197,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY",
    "snippet": "private static final int PEEKED_BEGIN_ARRAY \u003d 3;",
    "begin_line": 198,
    "end_line": 198,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_END_ARRAY",
    "snippet": "private static final int PEEKED_END_ARRAY \u003d 4;",
    "begin_line": 199,
    "end_line": 199,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_TRUE",
    "snippet": "private static final int PEEKED_TRUE \u003d 5;",
    "begin_line": 200,
    "end_line": 200,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_FALSE",
    "snippet": "private static final int PEEKED_FALSE \u003d 6;",
    "begin_line": 201,
    "end_line": 201,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_NULL",
    "snippet": "private static final int PEEKED_NULL \u003d 7;",
    "begin_line": 202,
    "end_line": 202,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED",
    "snippet": "private static final int PEEKED_SINGLE_QUOTED \u003d 8;",
    "begin_line": 203,
    "end_line": 203,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED",
    "snippet": "private static final int PEEKED_DOUBLE_QUOTED \u003d 9;",
    "begin_line": 204,
    "end_line": 204,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_UNQUOTED",
    "snippet": "private static final int PEEKED_UNQUOTED \u003d 10;",
    "begin_line": 205,
    "end_line": 205,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_BUFFERED",
    "snippet": "private static final int PEEKED_BUFFERED \u003d 11;",
    "begin_line": 207,
    "end_line": 207,
    "comment": "/** \n * When this is returned, the string value is stored in peekedString. \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME",
    "snippet": "private static final int PEEKED_SINGLE_QUOTED_NAME \u003d 12;",
    "begin_line": 208,
    "end_line": 208,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME",
    "snippet": "private static final int PEEKED_DOUBLE_QUOTED_NAME \u003d 13;",
    "begin_line": 209,
    "end_line": 209,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME",
    "snippet": "private static final int PEEKED_UNQUOTED_NAME \u003d 14;",
    "begin_line": 210,
    "end_line": 210,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_LONG",
    "snippet": "private static final int PEEKED_LONG \u003d 15;",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * When this is returned, the integer value is stored in peekedLong. \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_NUMBER",
    "snippet": "private static final int PEEKED_NUMBER \u003d 16;",
    "begin_line": 213,
    "end_line": 213,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.PEEKED_EOF",
    "snippet": "private static final int PEEKED_EOF \u003d 17;",
    "begin_line": 214,
    "end_line": 214,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE",
    "snippet": "private static final int NUMBER_CHAR_NONE \u003d 0;",
    "begin_line": 217,
    "end_line": 217,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN",
    "snippet": "private static final int NUMBER_CHAR_SIGN \u003d 1;",
    "begin_line": 218,
    "end_line": 218,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT",
    "snippet": "private static final int NUMBER_CHAR_DIGIT \u003d 2;",
    "begin_line": 219,
    "end_line": 219,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_DECIMAL",
    "snippet": "private static final int NUMBER_CHAR_DECIMAL \u003d 3;",
    "begin_line": 220,
    "end_line": 220,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT",
    "snippet": "private static final int NUMBER_CHAR_FRACTION_DIGIT \u003d 4;",
    "begin_line": 221,
    "end_line": 221,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E",
    "snippet": "private static final int NUMBER_CHAR_EXP_E \u003d 5;",
    "begin_line": 222,
    "end_line": 222,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN",
    "snippet": "private static final int NUMBER_CHAR_EXP_SIGN \u003d 6;",
    "begin_line": 223,
    "end_line": 223,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT",
    "snippet": "private static final int NUMBER_CHAR_EXP_DIGIT \u003d 7;",
    "begin_line": 224,
    "end_line": 224,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.in",
    "snippet": "private final Reader in;",
    "begin_line": 227,
    "end_line": 227,
    "comment": "/** \n * The input JSON. \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.lenient",
    "snippet": "private boolean lenient \u003d false;",
    "begin_line": 230,
    "end_line": 230,
    "comment": "/** \n * True to accept non-spec compliant JSON \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.buffer",
    "snippet": "private final char[] buffer \u003d new char[1024];",
    "begin_line": 238,
    "end_line": 238,
    "comment": "/** \n * Use a manual buffer to easily read and unread upcoming characters, and also so we can create strings without an intermediate StringBuilder. We decode literals directly out of this buffer, so it must be at least as long as the longest token that can be reported as a number.\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.pos",
    "snippet": "private int pos \u003d 0;",
    "begin_line": 239,
    "end_line": 239,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.limit",
    "snippet": "private int limit \u003d 0;",
    "begin_line": 240,
    "end_line": 240,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.lineNumber",
    "snippet": "private int lineNumber \u003d 0;",
    "begin_line": 242,
    "end_line": 242,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.lineStart",
    "snippet": "private int lineStart \u003d 0;",
    "begin_line": 243,
    "end_line": 243,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.peeked",
    "snippet": " int peeked \u003d PEEKED_NONE;",
    "begin_line": 245,
    "end_line": 245,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.peekedLong",
    "snippet": "private long peekedLong;",
    "begin_line": 251,
    "end_line": 251,
    "comment": "/** \n * A peeked value that was composed entirely of digits with an optional leading dash. Positive values may not have a leading 0.\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.peekedNumberLength",
    "snippet": "private int peekedNumberLength;",
    "begin_line": 257,
    "end_line": 257,
    "comment": "/** \n * The number of characters in a peeked number literal. Increment \u0027pos\u0027 by this after reading a number.\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.peekedString",
    "snippet": "private String peekedString;",
    "begin_line": 264,
    "end_line": 264,
    "comment": "/** \n * A peeked string that should be parsed on the next double, long or string. This is populated before a numeric value is parsed and used if that parsing fails.\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.stack",
    "snippet": "private int[] stack \u003d new int[32];",
    "begin_line": 269,
    "end_line": 269,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.stackSize",
    "snippet": "private int stackSize \u003d 0;",
    "begin_line": 270,
    "end_line": 270,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.pathNames",
    "snippet": "private String[] pathNames \u003d new String[32];",
    "begin_line": 283,
    "end_line": 283,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonReader",
    "src_path": "com/google/gson/stream/JsonReader.java",
    "signature": "com.google.gson.stream.JsonReader.pathIndices",
    "snippet": "private int[] pathIndices \u003d new int[32];",
    "begin_line": 284,
    "end_line": 284,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.REPLACEMENT_CHARS",
    "snippet": "private static final String[] REPLACEMENT_CHARS;",
    "begin_line": 142,
    "end_line": 142,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.HTML_SAFE_REPLACEMENT_CHARS",
    "snippet": "private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
    "begin_line": 143,
    "end_line": 143,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.out",
    "snippet": "private final Writer out;",
    "begin_line": 165,
    "end_line": 165,
    "comment": "/** \n * The output data, containing at most one top-level array or object. \n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.stack",
    "snippet": "private int[] stack \u003d new int[32];",
    "begin_line": 167,
    "end_line": 167,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.stackSize",
    "snippet": "private int stackSize \u003d 0;",
    "begin_line": 168,
    "end_line": 168,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.indent",
    "snippet": "private String indent;",
    "begin_line": 177,
    "end_line": 177,
    "comment": "/** \n * A string containing a full set of spaces for a single level of indentation, or null for no pretty printing.\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.separator",
    "snippet": "private String separator \u003d \":\";",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * The name/value separator; either \":\" or \": \".\n */\n"
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.lenient",
    "snippet": "private boolean lenient;",
    "begin_line": 184,
    "end_line": 184,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.htmlSafe",
    "snippet": "private boolean htmlSafe;",
    "begin_line": 186,
    "end_line": 186,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.deferredName",
    "snippet": "private String deferredName;",
    "begin_line": 188,
    "end_line": 188,
    "comment": ""
  },
  {
    "class_name": "com.google.gson.stream.JsonWriter",
    "src_path": "com/google/gson/stream/JsonWriter.java",
    "signature": "com.google.gson.stream.JsonWriter.serializeNulls",
    "snippet": "private boolean serializeNulls \u003d true;",
    "begin_line": 190,
    "end_line": 190,
    "comment": ""
  }
]