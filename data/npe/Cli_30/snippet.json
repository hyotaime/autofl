[
  {
    "name": "BasicParser.flatten#43",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/BasicParser.java",
    "class_name": "org.apache.commons.cli.BasicParser",
    "signature": "org.apache.commons.cli.BasicParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        // just echo the arguments\n        return arguments;\n    }",
    "begin_line": 43,
    "end_line": 47,
    "comment": "/** \n * \u003cp\u003eA simple implementation of  {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e \u003ccode\u003eoptions\u003c/code\u003e and \u003ccode\u003estopAtNonOption\u003c/code\u003e are not used in this \u003ccode\u003eflatten\u003c/code\u003e method.\u003c/p\u003e\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flatteningwhen an non option is found.\n * @return The \u003ccode\u003earguments\u003c/code\u003e String array.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.CommandLine#57",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.CommandLine()",
    "snippet": " CommandLine()\n    {\n        // nothing to do\n    }",
    "begin_line": 57,
    "end_line": 60,
    "comment": "/** \n * Creates a command line.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.hasOption#68",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.hasOption(java.lang.String)",
    "snippet": "public boolean hasOption(String opt)\n    {\n        return options.contains(resolveOption(opt));\n    }",
    "begin_line": 68,
    "end_line": 71,
    "comment": "/** \n * Query to see if an option has been set.\n * @param opt Short name of the option\n * @return true if set, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.hasOption#79",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.hasOption(char)",
    "snippet": "public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }",
    "begin_line": 79,
    "end_line": 82,
    "comment": "/** \n * Query to see if an option has been set.\n * @param opt character name of the option\n * @return true if set, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionObject#91",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionObject(java.lang.String)",
    "snippet": "public Object getOptionObject(String opt)\n    {\n        try\n        {\n            return getParsedOptionValue(opt);\n        }\n        catch (ParseException pe)\n        {\n            System.err.println(\"Exception found converting \" + opt + \" to desired type: \" + pe.getMessage());\n            return null;\n        }\n    }",
    "begin_line": 91,
    "end_line": 102,
    "comment": "/** \n * Return the \u003ccode\u003eObject\u003c/code\u003e type of this \u003ccode\u003eOption\u003c/code\u003e.\n * @param opt the name of the option\n * @return the type of this \u003ccode\u003eOption\u003c/code\u003e\n * @deprecated due to System.err message. Instead use getParsedOptionValue(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getParsedOptionValue#113",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getParsedOptionValue(java.lang.String)",
    "snippet": "public Object getParsedOptionValue(String opt) throws ParseException\n    {\n        String res \u003d getOptionValue(opt);\n\n        Option option \u003d resolveOption(opt);\n        if (option \u003d\u003d null)\n        {\n            return null;\n        }\n\n        Object type \u003d option.getType();\n\n        return (res \u003d\u003d null) ? null : TypeHandler.createValue(res, type);\n    }",
    "begin_line": 113,
    "end_line": 126,
    "comment": "/** \n * Return a version of this \u003ccode\u003eOption\u003c/code\u003e converted to a particular type. \n * @param opt the name of the option\n * @return the value parsed into a particular object\n * @throws ParseException if there are problems turning the option value into the desired type\n * @see PatternOptionBuilder\n * @since 1.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionObject#134",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionObject(char)",
    "snippet": "public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }",
    "begin_line": 134,
    "end_line": 137,
    "comment": "/** \n * Return the \u003ccode\u003eObject\u003c/code\u003e type of this \u003ccode\u003eOption\u003c/code\u003e.\n * @param opt the name of the option\n * @return the type of opt\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#146",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String)",
    "snippet": "public String getOptionValue(String opt)\n    {\n        String[] values \u003d getOptionValues(opt);\n\n        return (values \u003d\u003d null) ? null : values[0];\n    }",
    "begin_line": 146,
    "end_line": 151,
    "comment": "/** \n * Retrieve the argument, if any, of this option.\n * @param opt the name of the option\n * @return Value of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#160",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char)",
    "snippet": "public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }",
    "begin_line": 160,
    "end_line": 163,
    "comment": "/** \n * Retrieve the argument, if any, of this option.\n * @param opt the character name of the option\n * @return Value of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValues#172",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValues(java.lang.String)",
    "snippet": "public String[] getOptionValues(String opt)\n    {\n        List values \u003d new ArrayList();\n\n        for (Iterator it \u003d options.iterator(); it.hasNext();)\n        {\n            Option option \u003d (Option) it.next();\n            if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\n            {\n                values.addAll(option.getValuesList());\n            }\n        }\n\n        return values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\n    }",
    "begin_line": 172,
    "end_line": 186,
    "comment": "/** \n * Retrieves the array of values, if any, of an option.\n * @param opt string name of the option\n * @return Values of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.resolveOption#194",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.resolveOption(java.lang.String)",
    "snippet": "private Option resolveOption(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n        for (Iterator it \u003d options.iterator(); it.hasNext();)\n        {\n            Option option \u003d (Option) it.next();\n            if (opt.equals(option.getOpt()))\n            {\n                return option;\n            }\n\n            if (opt.equals(option.getLongOpt()))\n            {\n                return option;\n            }\n\n        }\n        return null;\n    }",
    "begin_line": 194,
    "end_line": 212,
    "comment": "/** \n * Retrieves the option object given the long or short option as a String\n * @param opt short or long name of the option\n * @return Canonicalized option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValues#221",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValues(char)",
    "snippet": "public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }",
    "begin_line": 221,
    "end_line": 224,
    "comment": "/** \n * Retrieves the array of values, if any, of an option.\n * @param opt character name of the option\n * @return Values of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#235",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String, java.lang.String)",
    "snippet": "public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer \u003d getOptionValue(opt);\n\n        return (answer !\u003d null) ? answer : defaultValue;\n    }",
    "begin_line": 235,
    "end_line": 240,
    "comment": "/** \n * Retrieve the argument, if any, of an option.\n * @param opt name of the option\n * @param defaultValue is the default value to be returned if the optionis not specified\n * @return Value of the argument if option is set, and has an argument,otherwise \u003ccode\u003edefaultValue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#251",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char, java.lang.String)",
    "snippet": "public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }",
    "begin_line": 251,
    "end_line": 254,
    "comment": "/** \n * Retrieve the argument, if any, of an option.\n * @param opt character name of the option\n * @param defaultValue is the default value to be returned if the optionis not specified\n * @return Value of the argument if option is set, and has an argument,otherwise \u003ccode\u003edefaultValue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionProperties#269",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionProperties(java.lang.String)",
    "snippet": "public Properties getOptionProperties(String opt)\n    {\n        Properties props \u003d new Properties();\n\n        for (Iterator it \u003d options.iterator(); it.hasNext();)\n        {\n            Option option \u003d (Option) it.next();\n\n            if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\n            {\n                List values \u003d option.getValuesList();\n                if (values.size() \u003e\u003d 2)\n                {\n                    // use the first 2 arguments as the key/value pair\n                    props.put(values.get(0), values.get(1));\n                }\n                else if (values.size() \u003d\u003d 1)\n                {\n                    // no explicit value, handle it as a boolean\n                    props.put(values.get(0), \"true\");\n                }\n            }\n        }\n\n        return props;\n    }",
    "begin_line": 269,
    "end_line": 294,
    "comment": "/** \n * Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1 -Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option has only one argument (\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is \u003ctt\u003e\"true\"\u003c/tt\u003e.\n * @param opt name of the option\n * @return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003eeven if the option doesn\u0027t exists\n * @since 1.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getArgs#301",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getArgs()",
    "snippet": "public String[] getArgs()\n    {\n        String[] answer \u003d new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }",
    "begin_line": 301,
    "end_line": 308,
    "comment": "/** \n * Retrieve any left-over non-recognized options and arguments\n * @return remaining items passed in but not parsed as an array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getArgList#315",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getArgList()",
    "snippet": "public List getArgList()\n    {\n        return args;\n    }",
    "begin_line": 315,
    "end_line": 318,
    "comment": "/** \n * Retrieve any left-over non-recognized options and arguments\n * @return remaining items passed in but not parsed as a \u003ccode\u003eList\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.addArg#347",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.addArg(java.lang.String)",
    "snippet": "void addArg(String arg)\n    {\n        args.add(arg);\n    }",
    "begin_line": 347,
    "end_line": 350,
    "comment": "/** \n * Add left-over unrecognized option/argument.\n * @param arg the unrecognised option/argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.addOption#357",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.addOption(org.apache.commons.cli.Option)",
    "snippet": "void addOption(Option opt)\n    {\n        options.add(opt);\n    }",
    "begin_line": 357,
    "end_line": 360,
    "comment": "/** \n * Add an option to the command line.  The values of the option are stored.\n * @param opt the processed option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.iterator#368",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.iterator()",
    "snippet": "public Iterator iterator()\n    {\n        return options.iterator();\n    }",
    "begin_line": 368,
    "end_line": 371,
    "comment": "/** \n * Returns an iterator over the Option members of CommandLine.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e over the processed {@link Option}members of this  {@link CommandLine}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptions#378",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptions()",
    "snippet": "public Option[] getOptions()\n    {\n        Collection processed \u003d options;\n\n        // reinitialise array\n        Option[] optionsArray \u003d new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }",
    "begin_line": 378,
    "end_line": 387,
    "comment": "/** \n * Returns an array of the processed  {@link Option}s.\n * @return an array of the processed {@link Option}s.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.parse#57",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options, java.lang.String[])",
    "snippet": "public CommandLine parse(Options options, String[] arguments) throws ParseException\n    {\n        return parse(options, arguments, null);\n    }",
    "begin_line": 57,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.parse#73",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n    {\n        return parse(options, arguments, properties, false);\n    }",
    "begin_line": 73,
    "end_line": 76,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options    the specified Options\n * @param arguments  the command line arguments\n * @param properties command line option name-value pairs\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.parse#78",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n    {\n        return parse(options, arguments, null, stopAtNonOption);\n    }",
    "begin_line": 78,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.parse#98",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException\n    {\n        this.options \u003d options;\n        this.stopAtNonOption \u003d stopAtNonOption;\n        skipParsing \u003d false;\n        currentOption \u003d null;\n        expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n        \n        // clear the data from the groups\n        for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext();)\n        {\n            OptionGroup group \u003d (OptionGroup) it.next();\n            group.setSelected(null);\n        }\n        \n        cmd \u003d new CommandLine();\n\n        if (arguments !\u003d null)\n        {\n            for (int i \u003d 0; i \u003c arguments.length; i++)\n            {\n                handleToken(arguments[i]);\n            }\n        }\n        \n        // check the arguments of the last option\n        checkRequiredArgs();\n        \n        // add the default options\n        handleProperties(properties);\n        \n        checkRequiredOptions();\n        \n        return cmd;\n    }",
    "begin_line": 98,
    "end_line": 132,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options         the specified Options\n * @param arguments       the command line arguments\n * @param properties      command line option name-value pairs\n * @param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stopsthe parsing and the remaining arguments are added to the  {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized argument triggers a ParseException.\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleProperties#139",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleProperties(java.util.Properties)",
    "snippet": "private void handleProperties(Properties properties) throws ParseException\n    {\n        if (properties \u003d\u003d null)\n        {\n            return;\n        }\n        \n        for (Enumeration e \u003d properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option \u003d e.nextElement().toString();\n            \n            if (!cmd.hasOption(option))\n            {\n                Option opt \u003d options.getOption(option);\n            \n            // if the option is part of a group, check if another option of the group has been selected\n            \n                // get the value from the properties\n                String value \u003d properties.getProperty(option);\n                \n                if (opt.hasArg())\n                {\n                    if (opt.getValues() \u003d\u003d null || opt.getValues().length \u003d\u003d 0)\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don\u0027t add the option to the CommandLine\n                    continue;\n                }\n                \n                handleOption(opt);\n                currentOption \u003d null;\n            }\n        }\n    }",
    "begin_line": 139,
    "end_line": 178,
    "comment": "/** \n * Sets the values of Options using the values in \u003ccode\u003eproperties\u003c/code\u003e.\n * @param properties The value properties to be processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.checkRequiredOptions#187",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.checkRequiredOptions()",
    "snippet": "private void checkRequiredOptions() throws MissingOptionException\n    {       \n        // if there are required options that have not been processsed\n        if (!expectedOpts.isEmpty())\n        {\n            throw new MissingOptionException(expectedOpts);\n        }\n    }",
    "begin_line": 187,
    "end_line": 194,
    "comment": "/** \n * Throws a  {@link MissingOptionException} if all of the required optionsare not present.\n * @throws MissingOptionException if any of the required Optionsare not present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.checkRequiredArgs#200",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.checkRequiredArgs()",
    "snippet": "private void checkRequiredArgs() throws ParseException\n    {\n        if (currentOption !\u003d null \u0026\u0026 currentOption.requiresArg())\n        {\n            throw new MissingArgumentException(currentOption);\n        }\n    }",
    "begin_line": 200,
    "end_line": 206,
    "comment": "/** \n * Throw a  {@link MissingArgumentException} if the current optiondidn\u0027t receive the number of arguments expected.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleToken#214",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleToken(java.lang.String)",
    "snippet": "private void handleToken(String token) throws ParseException\n    {\n        currentToken \u003d token;\n        \n        if (skipParsing)\n        {\n            cmd.addArg(token);\n        }\n        else if (\"--\".equals(token))\n        {\n            skipParsing \u003d true;\n        }\n        else if (currentOption !\u003d null \u0026\u0026 currentOption.acceptsArg() \u0026\u0026 isArgument(token))\n        {\n            currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\n        }\n        else if (token.startsWith(\"--\"))\n        {\n            handleLongOption(token);\n        }\n        else if (token.startsWith(\"-\") \u0026\u0026 !\"-\".equals(token))\n        {\n            handleShortAndLongOption(token);\n        }\n        else\n        {\n            handleUnknownToken(token);\n        }\n        \n        if (currentOption !\u003d null \u0026\u0026 !currentOption.acceptsArg())\n        {\n            currentOption \u003d null;\n        }\n    }",
    "begin_line": 214,
    "end_line": 247,
    "comment": "/** \n * Handle any command line token.\n * @param token the command line token to handle\n * @throws ParseException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isArgument#254",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isArgument(java.lang.String)",
    "snippet": "private boolean isArgument(String token)\n    {\n        return !isOption(token) || isNegativeNumber(token);\n    }",
    "begin_line": 254,
    "end_line": 257,
    "comment": "/** \n * Returns true is the token is a valid argument.\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isNegativeNumber#264",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isNegativeNumber(java.lang.String)",
    "snippet": "private boolean isNegativeNumber(String token)\n    {\n        try\n        {\n            Double.parseDouble(token);\n            return true;\n        }\n        catch (NumberFormatException e)\n        {\n            return false;\n        }\n    }",
    "begin_line": 264,
    "end_line": 275,
    "comment": "/** \n * Check if the token is a negative number.\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isOption#282",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isOption(java.lang.String)",
    "snippet": "private boolean isOption(String token)\n    {\n        return isLongOption(token) || isShortOption(token);\n    }",
    "begin_line": 282,
    "end_line": 285,
    "comment": "/** \n * Tells if the token looks like an option.\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isShortOption#292",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isShortOption(java.lang.String)",
    "snippet": "private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S\u003dV, -SV1\u003dV2, -S1S2)\n        return token.startsWith(\"-\") \u0026\u0026 token.length() \u003e\u003d 2 \u0026\u0026 options.hasShortOption(token.substring(1, 2));\n    }",
    "begin_line": 292,
    "end_line": 296,
    "comment": "/** \n * Tells if the token looks like a short option.\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isLongOption#303",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isLongOption(java.lang.String)",
    "snippet": "private boolean isLongOption(String token)\n    {\n        if (!token.startsWith(\"-\") || token.length() \u003d\u003d 1)\n        {\n            return false;\n        }\n\n        int pos \u003d token.indexOf(\"\u003d\");\n        String t \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\n        \n        if (!options.getMatchingOptions(t).isEmpty())\n        {\n            // long or partial long options (--L, -L, --L\u003dV, -L\u003dV, --l, --l\u003dV)\n            return true;\n        }\n        else if (getLongPrefix(token) !\u003d null \u0026\u0026 !token.startsWith(\"--\"))\n        {\n            // -LV\n            return true;\n        }\n\n        return false;\n    }",
    "begin_line": 303,
    "end_line": 325,
    "comment": "/** \n * Tells if the token looks like a long option.\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleUnknownToken#336",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleUnknownToken(java.lang.String)",
    "snippet": "private void handleUnknownToken(String token) throws ParseException\n    {\n        if (token.startsWith(\"-\") \u0026\u0026 token.length() \u003e 1 \u0026\u0026 !stopAtNonOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);\n        }\n        \n        cmd.addArg(token);\n        if (stopAtNonOption)\n        {\n            skipParsing \u003d true;\n        }\n    }",
    "begin_line": 336,
    "end_line": 348,
    "comment": "/** \n * Handles an unknown token. If the token starts with a dash an  UnrecognizedOptionException is thrown. Otherwise the token is added  to the arguments of the command line. If the stopAtNonOption flag  is set, this stops the parsing and the remaining tokens are added  as-is in the arguments of the command line.\n * @param token the command line token to handle\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleLongOption#360",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleLongOption(java.lang.String)",
    "snippet": "private void handleLongOption(String token) throws ParseException\n    {\n        if (token.indexOf(\u0027\u003d\u0027) \u003d\u003d -1)\n        {\n            handleLongOptionWithoutEqual(token);\n        }\n        else\n        {\n            handleLongOptionWithEqual(token);                                   \n        }\n    }",
    "begin_line": 360,
    "end_line": 370,
    "comment": "/** \n * Handles the following tokens: --L --L\u003dV --L V --l\n * @param token the command line token to handle\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleLongOptionWithoutEqual#382",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(java.lang.String)",
    "snippet": "private void handleLongOptionWithoutEqual(String token) throws ParseException\n    {\n        List matchingOpts \u003d options.getMatchingOptions(token);\n        if (matchingOpts.isEmpty())\n        {\n            handleUnknownToken(currentToken);\n        }\n        else if (matchingOpts.size() \u003e 1)\n        {\n            throw new AmbiguousOptionException(token, matchingOpts);\n        }\n        else\n        {\n            handleOption(options.getOption((String) matchingOpts.get(0)));\n        }\n    }",
    "begin_line": 382,
    "end_line": 397,
    "comment": "/** \n * Handles the following tokens: --L -L --l -l\n * @param token the command line token to handle\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleLongOptionWithEqual#409",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleLongOptionWithEqual(java.lang.String)",
    "snippet": "private void handleLongOptionWithEqual(String token) throws ParseException\n    {\n        int pos \u003d token.indexOf(\u0027\u003d\u0027);\n\n        String value \u003d token.substring(pos + 1);\n        \n        String opt \u003d token.substring(0, pos);\n        \n        List matchingOpts \u003d options.getMatchingOptions(opt);\n        if (matchingOpts.isEmpty())\n        {\n            handleUnknownToken(currentToken);\n        }\n        else if (matchingOpts.size() \u003e 1)\n        {\n            throw new AmbiguousOptionException(opt, matchingOpts);\n        }\n        else\n        {\n            Option option \u003d options.getOption((String) matchingOpts.get(0));\n            \n            if (option.acceptsArg())\n            {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            }\n            else\n            {\n                handleUnknownToken(currentToken);\n            }\n        }\n    }",
    "begin_line": 409,
    "end_line": 441,
    "comment": "/** \n * Handles the following tokens: --L\u003dV -L\u003dV --l\u003dV -l\u003dV\n * @param token the command line token to handle\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleShortAndLongOption#462",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleShortAndLongOption(java.lang.String)",
    "snippet": "private void handleShortAndLongOption(String token) throws ParseException\n    {\n        String t \u003d Util.stripLeadingHyphens(token);\n        \n        int pos \u003d t.indexOf(\u0027\u003d\u0027);\n        \n        if (t.length() \u003d\u003d 1)\n        {\n            // -S\n            if (options.hasShortOption(t))\n            {\n                handleOption(options.getOption(t));\n            }\n            else\n            {\n                handleUnknownToken(token);\n            }\n        }\n        else if (pos \u003d\u003d -1)\n        {\n            if (options.hasShortOption(t))\n            {\n                handleOption(options.getOption(t));\n            }\n            else if (!options.getMatchingOptions(t).isEmpty())\n            {\n                // -L or -l\n                handleLongOptionWithoutEqual(token);\n            }\n            else\n            {\n                // look for a long prefix (-Xmx512m)\n                String opt \u003d getLongPrefix(t);\n                \n                if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg())\n                {\n                    handleOption(options.getOption(opt));\n                    currentOption.addValueForProcessing(t.substring(opt.length()));\n                    currentOption \u003d null;\n                }\n                else if (isJavaProperty(t))\n                {\n                    // -SV1 (-Dflag)\n                    handleOption(options.getOption(t.substring(0, 1)));\n                    currentOption.addValueForProcessing(t.substring(1));\n                    currentOption \u003d null;\n                }\n                else\n                {\n                    // -S1S2S3 or -S1S2V\n                    handleConcatenatedOptions(token);\n                }\n            }\n        }\n        else\n        {\n            String opt \u003d t.substring(0, pos);\n            String value \u003d t.substring(pos + 1);\n            \n            if (opt.length() \u003d\u003d 1)\n            {\n                // -S\u003dV\n                Option option \u003d options.getOption(opt);\n                if (option !\u003d null \u0026\u0026 option.acceptsArg())\n                {\n                    handleOption(option);\n                    currentOption.addValueForProcessing(value);\n                    currentOption \u003d null;\n                }\n                else\n                {\n                    handleUnknownToken(token);\n                }\n            }\n            else if (isJavaProperty(opt))\n            {\n                // -SV1\u003dV2 (-Dkey\u003dvalue)\n                handleOption(options.getOption(opt.substring(0, 1)));\n                currentOption.addValueForProcessing(opt.substring(1));\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            }\n            else\n            {\n                // -L\u003dV or -l\u003dV\n                handleLongOptionWithEqual(token);\n            }\n        }\n    }",
    "begin_line": 462,
    "end_line": 550,
    "comment": "/** \n * Handles the following tokens: -S -SV -S V -S\u003dV -S1S2 -S1S2 V -SV1\u003dV2 -L -LV -L V -L\u003dV -l\n * @param token the command line token to handle\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.getLongPrefix#557",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.getLongPrefix(java.lang.String)",
    "snippet": "private String getLongPrefix(String token)\n    {\n        String t \u003d Util.stripLeadingHyphens(token);\n        \n        int i;\n        String opt \u003d null;\n        for (i \u003d t.length() - 2; i \u003e 1; i--)\n        {\n            String prefix \u003d t.substring(0, i);\n            if (options.hasLongOption(prefix))\n            {\n                opt \u003d prefix;\n                break;\n            }\n        }\n        \n        return opt;\n    }",
    "begin_line": 557,
    "end_line": 574,
    "comment": "/** \n * Search for a prefix that is the long name of an option (-Xmx512m)\n * @param token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.isJavaProperty#579",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.isJavaProperty(java.lang.String)",
    "snippet": "private boolean isJavaProperty(String token)\n    {\n        String opt \u003d token.substring(0, 1);\n        Option option \u003d options.getOption(opt);\n        \n        return option !\u003d null \u0026\u0026 (option.getArgs() \u003e\u003d 2 || option.getArgs() \u003d\u003d Option.UNLIMITED_VALUES);\n    }",
    "begin_line": 579,
    "end_line": 585,
    "comment": "/** \n * Check if the specified token is a Java-like property (-Dkey\u003dvalue).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleOption#587",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleOption(org.apache.commons.cli.Option)",
    "snippet": "private void handleOption(Option option) throws ParseException\n    {\n        // check the previous option before handling the next one\n        checkRequiredArgs();\n        \n        option \u003d (Option) option.clone();\n        \n        updateRequiredOptions(option);\n        \n        cmd.addOption(option);\n        \n        if (option.hasArg())\n        {\n            currentOption \u003d option;            \n        }\n        else\n        {\n            currentOption \u003d null;\n        }\n    }",
    "begin_line": 587,
    "end_line": 606,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.updateRequiredOptions#613",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.updateRequiredOptions(org.apache.commons.cli.Option)",
    "snippet": "private void updateRequiredOptions(Option option) throws AlreadySelectedException\n    {\n        if (option.isRequired())\n        {\n            expectedOpts.remove(option.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected option of the group\n        if (options.getOptionGroup(option) !\u003d null)\n        {\n            OptionGroup group \u003d options.getOptionGroup(option);\n\n            if (group.isRequired())\n            {\n                expectedOpts.remove(group);\n            }\n\n            group.setSelected(option);\n        }\n    }",
    "begin_line": 613,
    "end_line": 632,
    "comment": "/** \n * Removes the option or its group from the list of expected elements.\n * @param option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultParser.handleConcatenatedOptions#659",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/DefaultParser.java",
    "class_name": "org.apache.commons.cli.DefaultParser",
    "signature": "org.apache.commons.cli.DefaultParser.handleConcatenatedOptions(java.lang.String)",
    "snippet": "protected void handleConcatenatedOptions(String token) throws ParseException\n    {\n        for (int i \u003d 1; i \u003c token.length(); i++)\n        {\n            String ch \u003d String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                handleOption(options.getOption(ch));\n                \n                if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1)))\n                {\n                    // add the trail as an argument of the option\n                    currentOption.addValueForProcessing(token.substring(i + 1));\n                    break;\n                }\n            }\n            else\n            {                \n                handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\n                break;\n            }\n        }\n    }",
    "begin_line": 659,
    "end_line": 682,
    "comment": "/** \n * Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm. \u003cul\u003e \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e \u003cli\u003eforeach remaining character check if an  {@link Option}exists with that id.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does exist then add that characterprepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif the  {@link Option} can have an argument value and thereare remaining characters in the token then add the remaining characters as a token to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the processed tokens list.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e \u003c/ul\u003e\n * @param token The current token to be \u003cb\u003eburst\u003c/b\u003eat the first non-Option encountered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GnuParser.flatten#50",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/GnuParser.java",
    "class_name": "org.apache.commons.cli.GnuParser",
    "signature": "org.apache.commons.cli.GnuParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens \u003d new ArrayList();\n\n        boolean eatTheRest \u003d false;\n\n        for (int i \u003d 0; i \u003c arguments.length; i++)\n        {\n            String arg \u003d arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest \u003d true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt \u003d Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    if (opt.indexOf(\u0027\u003d\u0027) !\u003d -1 \u0026\u0026 options.hasOption(opt.substring(0, opt.indexOf(\u0027\u003d\u0027))))\n                    {\n                        // the format is --foo\u003dvalue or -foo\u003dvalue\n                        tokens.add(arg.substring(0, arg.indexOf(\u0027\u003d\u0027))); // --foo\n                        tokens.add(arg.substring(arg.indexOf(\u0027\u003d\u0027) + 1)); // value\n                    }\n                    else if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        // the format is a special properties option (-Dproperty\u003dvalue)\n                        tokens.add(arg.substring(0, 2)); // -D\n                        tokens.add(arg.substring(2)); // property\u003dvalue\n                    }\n                    else\n                    {\n                        eatTheRest \u003d stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i \u003c arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "begin_line": 50,
    "end_line": 113,
    "comment": "/** \n * This flatten method does so using the following rules: \u003col\u003e \u003cli\u003eIf an  {@link Option} exists for the first character ofthe \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an  {@link Option}does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then add the first character as an option to the processed tokens list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e \u003cli\u003eOtherwise just add the token to the processed tokens list.\u003c/li\u003e \u003c/ol\u003e\n * @param options         The Options to parse the arguments by.\n * @param arguments       The arguments that have to be flattened.\n * @param stopAtNonOption specifies whether to stop flattening whena non option has been encountered\n * @return a String array of the flattened arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#89",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String)",
    "snippet": "public Option(String opt, String description) throws IllegalArgumentException\n    {\n        this(opt, null, false, description);\n    }",
    "begin_line": 89,
    "end_line": 92,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#104",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, boolean, java.lang.String)",
    "snippet": "public Option(String opt, boolean hasArg, String description) throws IllegalArgumentException\n    {\n        this(opt, null, hasArg, description);\n    }",
    "begin_line": 104,
    "end_line": 107,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param hasArg specifies whether the Option takes an argument or not\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#120",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String, boolean, java.lang.String)",
    "snippet": "public Option(String opt, String longOpt, boolean hasArg, String description)\n           throws IllegalArgumentException\n    {\n        // ensure that the option is valid\n        OptionValidator.validateOption(opt);\n\n        this.opt \u003d opt;\n        this.longOpt \u003d longOpt;\n\n        // if hasArg is set then the number of arguments is 1\n        if (hasArg)\n        {\n            this.numberOfArgs \u003d 1;\n        }\n\n        this.description \u003d description;\n    }",
    "begin_line": 120,
    "end_line": 136,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param longOpt the long representation of the option\n * @param hasArg specifies whether the Option takes an argument or not\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getId#145",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getId()",
    "snippet": "public int getId()\n    {\n        return getKey().charAt(0);\n    }",
    "begin_line": 145,
    "end_line": 148,
    "comment": "/** \n * Returns the id of this Option.  This is only set when the Option shortOpt is a single character.  This is used for switch statements.\n * @return the id of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getKey#155",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getKey()",
    "snippet": "String getKey()\n    {\n        // if \u0027opt\u0027 is null, then it is a \u0027long\u0027 option\n        if (opt \u003d\u003d null)\n        {\n            return longOpt;\n        }\n\n        return opt;\n    }",
    "begin_line": 155,
    "end_line": 164,
    "comment": "/** \n * Returns the \u0027unique\u0027 Option identifier.\n * @return the \u0027unique\u0027 Option identifier\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getOpt#176",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getOpt()",
    "snippet": "public String getOpt()\n    {\n        return opt;\n    }",
    "begin_line": 176,
    "end_line": 179,
    "comment": "/** \n * Retrieve the name of this Option. It is this String which can be used with {@link CommandLine#hasOption(String opt)} and{@link CommandLine#getOptionValue(String opt)} to checkfor existence and argument.\n * @return The name of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getType#186",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getType()",
    "snippet": "public Object getType()\n    {\n        return type;\n    }",
    "begin_line": 186,
    "end_line": 189,
    "comment": "/** \n * Retrieve the type of this Option.\n * @return The type of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setType#196",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setType(java.lang.Object)",
    "snippet": "public void setType(Object type)\n    {\n        this.type \u003d type;\n    }",
    "begin_line": 196,
    "end_line": 199,
    "comment": "/** \n * Sets the type of this Option.\n * @param type the type of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getLongOpt#206",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getLongOpt()",
    "snippet": "public String getLongOpt()\n    {\n        return longOpt;\n    }",
    "begin_line": 206,
    "end_line": 209,
    "comment": "/** \n * Retrieve the long name of this Option.\n * @return Long name of this option, or null, if there is no long name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setLongOpt#216",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setLongOpt(java.lang.String)",
    "snippet": "public void setLongOpt(String longOpt)\n    {\n        this.longOpt \u003d longOpt;\n    }",
    "begin_line": 216,
    "end_line": 219,
    "comment": "/** \n * Sets the long name of this Option.\n * @param longOpt the long name of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setOptionalArg#227",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setOptionalArg(boolean)",
    "snippet": "public void setOptionalArg(boolean optionalArg)\n    {\n        this.optionalArg \u003d optionalArg;\n    }",
    "begin_line": 227,
    "end_line": 230,
    "comment": "/** \n * Sets whether this Option can have an optional argument.\n * @param optionalArg specifies whether the Option can havean optional argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasOptionalArg#235",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasOptionalArg()",
    "snippet": "public boolean hasOptionalArg()\n    {\n        return optionalArg;\n    }",
    "begin_line": 235,
    "end_line": 238,
    "comment": "/** \n * @return whether this Option can have an optional argument\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasLongOpt#245",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasLongOpt()",
    "snippet": "public boolean hasLongOpt()\n    {\n        return longOpt !\u003d null;\n    }",
    "begin_line": 245,
    "end_line": 248,
    "comment": "/** \n * Query to see if this Option has a long name\n * @return boolean flag indicating existence of a long name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArg#255",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArg()",
    "snippet": "public boolean hasArg()\n    {\n        return numberOfArgs \u003e 0 || numberOfArgs \u003d\u003d UNLIMITED_VALUES;\n    }",
    "begin_line": 255,
    "end_line": 258,
    "comment": "/** \n * Query to see if this Option requires an argument\n * @return boolean flag indicating if an argument is required\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getDescription#265",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getDescription()",
    "snippet": "public String getDescription()\n    {\n        return description;\n    }",
    "begin_line": 265,
    "end_line": 268,
    "comment": "/** \n * Retrieve the self-documenting description of this Option\n * @return The string description of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setDescription#276",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setDescription(java.lang.String)",
    "snippet": "public void setDescription(String description)\n    {\n        this.description \u003d description;\n    }",
    "begin_line": 276,
    "end_line": 279,
    "comment": "/** \n * Sets the self-documenting description of this Option\n * @param description The description of this option\n * @since 1.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.isRequired#286",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.isRequired()",
    "snippet": "public boolean isRequired()\n    {\n        return required;\n    }",
    "begin_line": 286,
    "end_line": 289,
    "comment": "/** \n * Query to see if this Option requires an argument\n * @return boolean flag indicating if an argument is required\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setRequired#296",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setRequired(boolean)",
    "snippet": "public void setRequired(boolean required)\n    {\n        this.required \u003d required;\n    }",
    "begin_line": 296,
    "end_line": 299,
    "comment": "/** \n * Sets whether this Option is mandatory.\n * @param required specifies whether this Option is mandatory\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setArgName#306",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setArgName(java.lang.String)",
    "snippet": "public void setArgName(String argName)\n    {\n        this.argName \u003d argName;\n    }",
    "begin_line": 306,
    "end_line": 309,
    "comment": "/** \n * Sets the display name for the argument value.\n * @param argName the display name for the argument value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getArgName#316",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getArgName()",
    "snippet": "public String getArgName()\n    {\n        return argName;\n    }",
    "begin_line": 316,
    "end_line": 319,
    "comment": "/** \n * Gets the display name for the argument value.\n * @return the display name for the argument value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArgName#328",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArgName()",
    "snippet": "public boolean hasArgName()\n    {\n        return argName !\u003d null \u0026\u0026 argName.length() \u003e 0;\n    }",
    "begin_line": 328,
    "end_line": 331,
    "comment": "/** \n * Returns whether the display name for the argument value has been set.\n * @return if the display name for the argument value has beenset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArgs#338",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArgs()",
    "snippet": "public boolean hasArgs()\n    {\n        return numberOfArgs \u003e 1 || numberOfArgs \u003d\u003d UNLIMITED_VALUES;\n    }",
    "begin_line": 338,
    "end_line": 341,
    "comment": "/** \n * Query to see if this Option can take many values.\n * @return boolean flag indicating if multiple values are allowed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setArgs#348",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setArgs(int)",
    "snippet": "public void setArgs(int num)\n    {\n        this.numberOfArgs \u003d num;\n    }",
    "begin_line": 348,
    "end_line": 351,
    "comment": "/** \n * Sets the number of argument values this Option can take.\n * @param num the number of argument values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setValueSeparator#359",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setValueSeparator(char)",
    "snippet": "public void setValueSeparator(char sep)\n    {\n        this.valuesep \u003d sep;\n    }",
    "begin_line": 359,
    "end_line": 362,
    "comment": "/** \n * Sets the value separator.  For example if the argument value was a Java property, the value separator would be \u0027\u003d\u0027.\n * @param sep The value separator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValueSeparator#369",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValueSeparator()",
    "snippet": "public char getValueSeparator()\n    {\n        return valuesep;\n    }",
    "begin_line": 369,
    "end_line": 372,
    "comment": "/** \n * Returns the value separator character.\n * @return the value separator character.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasValueSeparator#380",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasValueSeparator()",
    "snippet": "public boolean hasValueSeparator()\n    {\n        return valuesep \u003e 0;\n    }",
    "begin_line": 380,
    "end_line": 383,
    "comment": "/** \n * Return whether this Option has specified a value separator.\n * @return whether this Option has specified a value separator.\n * @since 1.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getArgs#390",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getArgs()",
    "snippet": "public int getArgs()\n    {\n        return numberOfArgs;\n    }",
    "begin_line": 390,
    "end_line": 393,
    "comment": "/** \n * Returns the number of argument values this Option can take.\n * @return num the number of argument values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.addValueForProcessing#400",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.addValueForProcessing(java.lang.String)",
    "snippet": "void addValueForProcessing(String value)\n    {\n        switch (numberOfArgs)\n        {\n            case UNINITIALIZED:\n                throw new RuntimeException(\"NO_ARGS_ALLOWED\");\n\n            default:\n                processValue(value);\n        }\n    }",
    "begin_line": 400,
    "end_line": 410,
    "comment": "/** \n * Adds the specified value to this Option.\n * @param value is a/the value of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.processValue#423",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.processValue(java.lang.String)",
    "snippet": "private void processValue(String value)\n    {\n        // this Option has a separator character\n        if (hasValueSeparator())\n        {\n            // get the separator character\n            char sep \u003d getValueSeparator();\n\n            // store the index for the value separator\n            int index \u003d value.indexOf(sep);\n\n            // while there are more value separators\n            while (index !\u003d -1)\n            {\n                // next value to be added \n                if (values.size() \u003d\u003d (numberOfArgs - 1))\n                {\n                    break;\n                }\n\n                // store\n                add(value.substring(0, index));\n\n                // parse\n                value \u003d value.substring(index + 1);\n\n                // get new index\n                index \u003d value.indexOf(sep);\n            }\n        }\n\n        // store the actual value or the last value that has been parsed\n        add(value);\n    }",
    "begin_line": 423,
    "end_line": 456,
    "comment": "/** \n * Processes the value.  If this Option has a value separator the value will have to be parsed into individual tokens.  When n-1 tokens have been processed and there are more value separators in the value, parsing is ceased and the remaining characters are added as a single token.\n * @param value The String to be processed.\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.add#467",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.add(java.lang.String)",
    "snippet": "private void add(String value)\n    {\n        if (!acceptsArg())\n        {\n            throw new RuntimeException(\"Cannot add value, list full.\");\n        }\n\n        // store value\n        values.add(value);\n    }",
    "begin_line": 467,
    "end_line": 476,
    "comment": "/** \n * Add the value to this Option.  If the number of arguments is greater than zero and there is enough space in the list then add the value.  Otherwise, throw a runtime exception.\n * @param value The value to be added to this Option\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#485",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue()",
    "snippet": "public String getValue()\n    {\n        return hasNoValues() ? null : (String) values.get(0);\n    }",
    "begin_line": 485,
    "end_line": 488,
    "comment": "/** \n * Returns the specified value of this Option or  \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @return the value/first value of this Option or \u003ccode\u003enull\u003c/code\u003e if there is no value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#502",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue(int)",
    "snippet": "public String getValue(int index) throws IndexOutOfBoundsException\n    {\n        return hasNoValues() ? null : (String) values.get(index);\n    }",
    "begin_line": 502,
    "end_line": 505,
    "comment": "/** \n * Returns the specified value of this Option or  \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @param index The index of the value to be returned.\n * @return the specified value of this Option or \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @throws IndexOutOfBoundsException if index is less than 1or greater than the number of the values for this Option.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#517",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue(java.lang.String)",
    "snippet": "public String getValue(String defaultValue)\n    {\n        String value \u003d getValue();\n\n        return (value !\u003d null) ? value : defaultValue;\n    }",
    "begin_line": 517,
    "end_line": 522,
    "comment": "/** \n * Returns the value/first value of this Option or the  \u003ccode\u003edefaultValue\u003c/code\u003e if there is no value.\n * @param defaultValue The value to be returned if theris no value.\n * @return the value/first value of this Option or the \u003ccode\u003edefaultValue\u003c/code\u003e if there are no values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValues#531",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValues()",
    "snippet": "public String[] getValues()\n    {\n        return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);\n    }",
    "begin_line": 531,
    "end_line": 534,
    "comment": "/** \n * Return the values of this Option as a String array  or null if there are no values\n * @return the values of this Option as a String array or null if there are no values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValuesList#540",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValuesList()",
    "snippet": "public List getValuesList()\n    {\n        return values;\n    }",
    "begin_line": 540,
    "end_line": 543,
    "comment": "/** \n * @return the values of this Option as a Listor null if there are no values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.toString#550",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.toString()",
    "snippet": "public String toString()\n    {\n        StringBuffer buf \u003d new StringBuffer().append(\"[ option: \");\n\n        buf.append(opt);\n\n        if (longOpt !\u003d null)\n        {\n            buf.append(\" \").append(longOpt);\n        }\n\n        buf.append(\" \");\n\n        if (hasArgs())\n        {\n            buf.append(\"[ARG...]\");\n        }\n        else if (hasArg())\n        {\n            buf.append(\" [ARG]\");\n        }\n\n        buf.append(\" :: \").append(description);\n\n        if (type !\u003d null)\n        {\n            buf.append(\" :: \").append(type);\n        }\n\n        buf.append(\" ]\");\n\n        return buf.toString();\n    }",
    "begin_line": 550,
    "end_line": 582,
    "comment": "/** \n * Dump state, suitable for debugging.\n * @return Stringified form of this object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasNoValues#589",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasNoValues()",
    "snippet": "private boolean hasNoValues()\n    {\n        return values.isEmpty();\n    }",
    "begin_line": 589,
    "end_line": 592,
    "comment": "/** \n * Returns whether this Option has any values.\n * @return whether this Option has any values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.equals#594",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object o)\n    {\n        if (this \u003d\u003d o)\n        {\n            return true;\n        }\n        if (o \u003d\u003d null || getClass() !\u003d o.getClass())\n        {\n            return false;\n        }\n\n        Option option \u003d (Option) o;\n\n\n        if (opt !\u003d null ? !opt.equals(option.opt) : option.opt !\u003d null)\n        {\n            return false;\n        }\n        if (longOpt !\u003d null ? !longOpt.equals(option.longOpt) : option.longOpt !\u003d null)\n        {\n            return false;\n        }\n\n        return true;\n    }",
    "begin_line": 594,
    "end_line": 618,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hashCode#620",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hashCode()",
    "snippet": "public int hashCode()\n    {\n        int result;\n        result \u003d opt !\u003d null ? opt.hashCode() : 0;\n        result \u003d 31 * result + (longOpt !\u003d null ? longOpt.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 620,
    "end_line": 626,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.clone#638",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.clone()",
    "snippet": "public Object clone()\n    {\n        try\n        {\n            Option option \u003d (Option) super.clone();\n            option.values \u003d new ArrayList(values);\n            return option;\n        }\n        catch (CloneNotSupportedException cnse)\n        {\n            throw new RuntimeException(\"A CloneNotSupportedException was thrown: \" + cnse.getMessage());\n        }\n    }",
    "begin_line": 638,
    "end_line": 650,
    "comment": "/** \n * A rather odd clone method - due to incorrect code in 1.0 it is public  and in 1.1 rather than throwing a CloneNotSupportedException it throws  a RuntimeException so as to maintain backwards compat at the API level.  After calling this method, it is very likely you will want to call  clearValues(). \n * @throws RuntimeException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.clearValues#658",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.clearValues()",
    "snippet": "void clearValues()\n    {\n        values.clear();\n    }",
    "begin_line": 658,
    "end_line": 661,
    "comment": "/** \n * Clear the Option values. After a parse is complete, these are left with data in them and they need clearing if another parse is done. See: \u003ca href\u003d\"https://issues.apache.org/jira/browse/CLI-71\"\u003eCLI-71\u003c/a\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.addValue#669",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.addValue(java.lang.String)",
    "snippet": "public boolean addValue(String value)\n    {\n        throw new UnsupportedOperationException(\"The addValue method is not intended for client use. \"\n                + \"Subclasses should use the addValueForProcessing method instead. \");\n    }",
    "begin_line": 669,
    "end_line": 673,
    "comment": "/** \n * This method is not intended to be used. It was a piece of internal  API that was made public in 1.0. It currently throws an UnsupportedOperationException. \n * @deprecated\n * @throws UnsupportedOperationException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.acceptsArg#681",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.acceptsArg()",
    "snippet": "boolean acceptsArg()\n    {\n        return (hasArg() || hasArgs() || hasOptionalArg()) \u0026\u0026 (numberOfArgs \u003c\u003d 0 || values.size() \u003c numberOfArgs);\n    }",
    "begin_line": 681,
    "end_line": 684,
    "comment": "/** \n * Tells if the option can accept more arguments.\n * @return false if the maximum number of arguments is reached\n * @since 1.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.requiresArg#692",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.requiresArg()",
    "snippet": "boolean requiresArg()\n    {\n        if (optionalArg)\n        {\n            return false;\n        }\n        if (numberOfArgs \u003d\u003d UNLIMITED_VALUES)\n        {\n            return values.size() \u003c 1;\n        }\n        else\n        {\n            return acceptsArg();\n        }\n    }",
    "begin_line": 692,
    "end_line": 706,
    "comment": "/** \n * Tells if the option requires more arguments to be valid.\n * @return false if the option doesn\u0027t require more arguments\n * @since 1.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.validateOption#45",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.validateOption(java.lang.String)",
    "snippet": "static void validateOption(String opt) throws IllegalArgumentException\n    {\n        // check that opt is not NULL\n        if (opt \u003d\u003d null)\n        {\n            return;\n        }\n        \n        // handle the single character opt\n        if (opt.length() \u003d\u003d 1)\n        {\n            char ch \u003d opt.charAt(0);\n\n            if (!isValidOpt(ch))\n            {\n                throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n            }\n        }\n\n        // handle the multi character opt\n        else\n        {\n            char[] chars \u003d opt.toCharArray();\n\n            for (int i \u003d 0; i \u003c chars.length; i++)\n            {\n                if (!isValidChar(chars[i]))\n                {\n                    throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\n                }\n            }\n        }\n    }",
    "begin_line": 45,
    "end_line": 77,
    "comment": "/** \n * Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option shortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e is valid are: \u003cul\u003e \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e \u003c/ul\u003e\n * @param opt The option string to validate\n * @throws IllegalArgumentException if the Option is not valid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.isValidOpt#85",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.isValidOpt(char)",
    "snippet": "private static boolean isValidOpt(char c)\n    {\n        return isValidChar(c) || c \u003d\u003d \u0027?\u0027 || c \u003d\u003d \u0027@\u0027;\n    }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "/** \n * Returns whether the specified character is a valid Option.\n * @param c the option to validate\n * @return true if \u003ccode\u003ec\u003c/code\u003e is a letter, \u0027?\u0027 or \u0027@\u0027, otherwise false.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.isValidChar#96",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.isValidChar(char)",
    "snippet": "private static boolean isValidChar(char c)\n    {\n        return Character.isJavaIdentifierPart(c);\n    }",
    "begin_line": 96,
    "end_line": 99,
    "comment": "/** \n * Returns whether the specified character is a valid character.\n * @param c the character to validate\n * @return true if \u003ccode\u003ec\u003c/code\u003e is a letter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOptionGroup#69",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOptionGroup(org.apache.commons.cli.OptionGroup)",
    "snippet": "public Options addOptionGroup(OptionGroup group)\n    {\n        Iterator options \u003d group.getOptions().iterator();\n\n        if (group.isRequired())\n        {\n            requiredOpts.add(group);\n        }\n\n        while (options.hasNext())\n        {\n            Option option \u003d (Option) options.next();\n\n            // an Option cannot be required if it is in an\n            // OptionGroup, either the group is required or\n            // nothing is required\n            option.setRequired(false);\n            addOption(option);\n\n            optionGroups.put(option.getKey(), group);\n        }\n\n        return this;\n    }",
    "begin_line": 69,
    "end_line": 92,
    "comment": "/** \n * Add the specified option group.\n * @param group the OptionGroup that is to be added\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptionGroups#99",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptionGroups()",
    "snippet": "Collection getOptionGroups()\n    {\n        return new HashSet(optionGroups.values());\n    }",
    "begin_line": 99,
    "end_line": 102,
    "comment": "/** \n * Lists the OptionGroups that are members of this Options instance.\n * @return a Collection of OptionGroup instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#113",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, boolean, java.lang.String)",
    "snippet": "public Options addOption(String opt, boolean hasArg, String description)\n    {\n        addOption(opt, null, hasArg, description);\n\n        return this;\n    }",
    "begin_line": 113,
    "end_line": 118,
    "comment": "/** \n * Add an option that only contains a short-name. It may be specified as requiring an argument.\n * @param opt Short single-character name of the option.\n * @param hasArg flag signally if an argument is required after this option\n * @param description Self-documenting description\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#130",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, java.lang.String, boolean, java.lang.String)",
    "snippet": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n    {\n        addOption(new Option(opt, longOpt, hasArg, description));\n\n        return this;\n    }",
    "begin_line": 130,
    "end_line": 135,
    "comment": "/** \n * Add an option that contains a short-name and a long-name. It may be specified as requiring an argument.\n * @param opt Short single-character name of the option.\n * @param longOpt Long multi-character name of the option.\n * @param hasArg flag signally if an argument is required after this option\n * @param description Self-documenting description\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#143",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option)",
    "snippet": "public Options addOption(Option opt)\n    {\n        String key \u003d opt.getKey();\n\n        // add it to the long option list\n        if (opt.hasLongOpt())\n        {\n            longOpts.put(opt.getLongOpt(), opt);\n        }\n\n        // if the option is required add it to the required list\n        if (opt.isRequired())\n        {\n            if (requiredOpts.contains(key))\n            {\n                requiredOpts.remove(requiredOpts.indexOf(key));\n            }\n            requiredOpts.add(key);\n        }\n\n        shortOpts.put(key, opt);\n\n        return this;\n    }",
    "begin_line": 143,
    "end_line": 166,
    "comment": "/** \n * Adds an option instance\n * @param opt the option that is to be added\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptions#173",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptions()",
    "snippet": "public Collection getOptions()\n    {\n        return Collections.unmodifiableCollection(helpOptions());\n    }",
    "begin_line": 173,
    "end_line": 176,
    "comment": "/** \n * Retrieve a read-only list of options in this set\n * @return read-only Collection of {@link Option} objects in this descriptor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.helpOptions#183",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.helpOptions()",
    "snippet": "List helpOptions()\n    {\n        return new ArrayList(shortOpts.values());\n    }",
    "begin_line": 183,
    "end_line": 186,
    "comment": "/** \n * Returns the Options for use by the HelpFormatter.\n * @return the List of Options\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getRequiredOptions#193",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getRequiredOptions()",
    "snippet": "public List getRequiredOptions()\n    {\n        return requiredOpts;\n    }",
    "begin_line": 193,
    "end_line": 196,
    "comment": "/** \n * Returns the required options.\n * @return List of required options\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOption#205",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOption(java.lang.String)",
    "snippet": "public Option getOption(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n\n        if (shortOpts.containsKey(opt))\n        {\n            return (Option) shortOpts.get(opt);\n        }\n\n        return (Option) longOpts.get(opt);\n    }",
    "begin_line": 205,
    "end_line": 215,
    "comment": "/** \n * Retrieve the  {@link Option} matching the long or short name specified.The leading hyphens in the name are ignored (up to 2).\n * @param opt short or long name of the {@link Option}\n * @return the option represented by opt\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getMatchingOptions#224",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getMatchingOptions(java.lang.String)",
    "snippet": "public List getMatchingOptions(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n        \n        List matchingOpts \u003d new ArrayList();\n        \n        Iterator it \u003d longOpts.keySet().iterator();\n        while (it.hasNext())\n        {\n            String longOpt \u003d (String) it.next();\n            if (longOpt.startsWith(opt))\n            {\n                matchingOpts.add(longOpt);\n            }\n        }        \n        \n        return matchingOpts;\n    }",
    "begin_line": 224,
    "end_line": 241,
    "comment": "/** \n * Returns the options with a long name starting with the name specified.\n * @param opt the partial name of the option\n * @return the options matching the partial name specified, or an empty list if none matches\n * @since 1.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.hasOption#249",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.hasOption(java.lang.String)",
    "snippet": "public boolean hasOption(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n\n        return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n    }",
    "begin_line": 249,
    "end_line": 254,
    "comment": "/** \n * Returns whether the named  {@link Option} is a member of this {@link Options}.\n * @param opt short or long name of the {@link Option}\n * @return true if the named {@link Option} is a member of this {@link Options}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.hasLongOption#263",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.hasLongOption(java.lang.String)",
    "snippet": "public boolean hasLongOption(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n\n        return longOpts.containsKey(opt);\n    }",
    "begin_line": 263,
    "end_line": 268,
    "comment": "/** \n * Returns whether the named  {@link Option} is a member of this {@link Options}.\n * @param opt long name of the {@link Option}\n * @return true if the named {@link Option} is a member of this {@link Options}\n * @since 1.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.hasShortOption#277",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.hasShortOption(java.lang.String)",
    "snippet": "public boolean hasShortOption(String opt)\n    {\n        opt \u003d Util.stripLeadingHyphens(opt);\n\n        return shortOpts.containsKey(opt);\n    }",
    "begin_line": 277,
    "end_line": 282,
    "comment": "/** \n * Returns whether the named  {@link Option} is a member of this {@link Options}.\n * @param opt short name of the {@link Option}\n * @return true if the named {@link Option} is a member of this {@link Options}\n * @since 1.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptionGroup#291",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptionGroup(org.apache.commons.cli.Option)",
    "snippet": "public OptionGroup getOptionGroup(Option opt)\n    {\n        return (OptionGroup) optionGroups.get(opt.getKey());\n    }",
    "begin_line": 291,
    "end_line": 294,
    "comment": "/** \n * Returns the OptionGroup the \u003ccode\u003eopt\u003c/code\u003e belongs to.\n * @param opt the option whose OptionGroup is being queried.\n * @return the OptionGroup if \u003ccode\u003eopt\u003c/code\u003e is partof an OptionGroup, otherwise return null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.toString#301",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.toString()",
    "snippet": "public String toString()\n    {\n        StringBuffer buf \u003d new StringBuffer();\n\n        buf.append(\"[ Options: [ short \");\n        buf.append(shortOpts.toString());\n        buf.append(\" ] [ long \");\n        buf.append(longOpts);\n        buf.append(\" ]\");\n\n        return buf.toString();\n    }",
    "begin_line": 301,
    "end_line": 312,
    "comment": "/** \n * Dump state, suitable for debugging.\n * @return Stringified form of this object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.setOptions#46",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.setOptions(org.apache.commons.cli.Options)",
    "snippet": "protected void setOptions(final Options options)\n    {\n        this.options \u003d options;\n        this.requiredOptions \u003d new ArrayList(options.getRequiredOptions());\n    }",
    "begin_line": 46,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getOptions#52",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.getOptions()",
    "snippet": "protected Options getOptions()\n    {\n        return options;\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.getRequiredOptions#57",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.getRequiredOptions()",
    "snippet": "protected List getRequiredOptions()\n    {\n        return requiredOptions;\n    }",
    "begin_line": 57,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.flatten#72",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * Subclasses must implement this method to reduce the \u003ccode\u003earguments\u003c/code\u003e that have been passed to the parse method.\n * @param opts The Options to parse the arguments by.\n * @param arguments The arguments that have to be flattened.\n * @param stopAtNonOption specifies whether to stopflattening when a non option has been encountered\n * @return a String array of the flattened arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#84",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[])",
    "snippet": "public CommandLine parse(Options options, String[] arguments) throws ParseException\n    {\n        return parse(options, arguments, null, false);\n    }",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Parses the specified \u003ccode\u003earguments\u003c/code\u003e based on the specifed  {@link Options}.\n * @param options the \u003ccode\u003eOptions\u003c/code\u003e\n * @param arguments the \u003ccode\u003earguments\u003c/code\u003e\n * @return the \u003ccode\u003eCommandLine\u003c/code\u003e\n * @throws ParseException if an error occurs when parsing thearguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#101",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n    {\n        return parse(options, arguments, properties, false);\n    }",
    "begin_line": 101,
    "end_line": 104,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options    the specified Options\n * @param arguments  the command line arguments\n * @param properties command line option name-value pairs\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n * @since 1.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#119",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n    {\n        return parse(options, arguments, null, stopAtNonOption);\n    }",
    "begin_line": 119,
    "end_line": 122,
    "comment": "/** \n * Parses the specified \u003ccode\u003earguments\u003c/code\u003e based on the specifed  {@link Options}.\n * @param options         the \u003ccode\u003eOptions\u003c/code\u003e\n * @param arguments       the \u003ccode\u003earguments\u003c/code\u003e\n * @param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stopsthe parsing and the remaining arguments are added to the  {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized argument triggers a ParseException.\n * @return the \u003ccode\u003eCommandLine\u003c/code\u003e\n * @throws ParseException if an error occurs when parsing the arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#143",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean)",
    "snippet": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException\n    {\n        // clear out the data in options in case it\u0027s been used before (CLI-71)\n        for (Iterator it \u003d options.helpOptions().iterator(); it.hasNext();)\n        {\n            Option opt \u003d (Option) it.next();\n            opt.clearValues();\n        }\n        \n        // clear the data from the groups\n        for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext();)\n        {\n            OptionGroup group \u003d (OptionGroup) it.next();\n            group.setSelected(null);\n        }        \n\n        // initialise members\n        setOptions(options);\n\n        cmd \u003d new CommandLine();\n\n        boolean eatTheRest \u003d false;\n\n        if (arguments \u003d\u003d null)\n        {\n            arguments \u003d new String[0];\n        }\n\n        List tokenList \u003d Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n\n        ListIterator iterator \u003d tokenList.listIterator();\n\n        // process each flattened token\n        while (iterator.hasNext())\n        {\n            String t \u003d (String) iterator.next();\n\n            // the value is the double-dash\n            if (\"--\".equals(t))\n            {\n                eatTheRest \u003d true;\n            }\n\n            // the value is a single dash\n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest \u003d true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            // the value is an option\n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption \u0026\u0026 !getOptions().hasOption(t))\n                {\n                    eatTheRest \u003d true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            // the value is an argument\n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest \u003d true;\n                }\n            }\n\n            // eat the remaining tokens\n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str \u003d (String) iterator.next();\n\n                    // ensure only one double-dash is added\n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }",
    "begin_line": 143,
    "end_line": 245,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options the specified Options\n * @param arguments the command line arguments\n * @param properties command line option name-value pairs\n * @param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stopsthe parsing and the remaining arguments are added to the  {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized argument triggers a ParseException.\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n * @since 1.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processProperties#252",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processProperties(java.util.Properties)",
    "snippet": "protected void processProperties(Properties properties) throws ParseException\n    {\n        if (properties \u003d\u003d null)\n        {\n            return;\n        }\n\n        for (Enumeration e \u003d properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option \u003d e.nextElement().toString();\n            \n            if (!cmd.hasOption(option))\n            {\n                Option opt \u003d getOptions().getOption(option);\n            \n            // if the option is part of a group, check if another option of the group has been selected\n            \n                // get the value from the properties instance\n                String value \u003d properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if (opt.getValues() \u003d\u003d null || opt.getValues().length \u003d\u003d 0)\n                    {\n                        try\n                        {\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            // if we cannot add the value don\u0027t worry about it\n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don\u0027t add the\n                    // option to the CommandLine\n                    continue;\n                }\n\n                cmd.addOption(opt);\n                updateRequiredOptions(opt);\n            }\n        }\n    }",
    "begin_line": 252,
    "end_line": 299,
    "comment": "/** \n * Sets the values of Options using the values in \u003ccode\u003eproperties\u003c/code\u003e.\n * @param properties The value properties to be processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.checkRequiredOptions#308",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.checkRequiredOptions()",
    "snippet": "protected void checkRequiredOptions() throws MissingOptionException\n    {\n        // if there are required options that have not been processsed\n        if (!getRequiredOptions().isEmpty())\n        {\n            throw new MissingOptionException(getRequiredOptions());\n        }\n    }",
    "begin_line": 308,
    "end_line": 315,
    "comment": "/** \n * Throws a  {@link MissingOptionException} if all of the required optionsare not present.\n * @throws MissingOptionException if any of the required Optionsare not present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processArgs#329",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processArgs(org.apache.commons.cli.Option, java.util.ListIterator)",
    "snippet": "public void processArgs(Option opt, ListIterator iter) throws ParseException\n    {\n        // loop until an option is found\n        while (iter.hasNext())\n        {\n            String str \u003d (String) iter.next();\n\n            // found an Option, not an argument\n            if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            // found a value\n            try\n            {\n                opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(opt);\n        }\n    }",
    "begin_line": 329,
    "end_line": 359,
    "comment": "/** \n * \u003cp\u003eProcess the argument values for the specified Option \u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\n * @param opt The current Option\n * @param iter The iterator over the flattened command lineOptions.\n * @throws ParseException if an argument value is requiredand it is has not been found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processOption#370",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processOption(java.lang.String, java.util.ListIterator)",
    "snippet": "protected void processOption(String arg, ListIterator iter) throws ParseException\n    {\n        boolean hasOption \u003d getOptions().hasOption(arg);\n\n        // if there is no option throw an UnrecognisedOptionException\n        if (!hasOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n        }\n\n        // get the option represented by arg\n        Option opt \u003d (Option) getOptions().getOption(arg).clone();\n        \n        // update the required options and groups\n        updateRequiredOptions(opt);\n        \n        // if the option takes an argument value\n        if (opt.hasArg())\n        {\n            processArgs(opt, iter);\n        }\n        \n        // set the option on the command line\n        cmd.addOption(opt);\n    }",
    "begin_line": 370,
    "end_line": 394,
    "comment": "/** \n * Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\n * @param arg The String value representing an Option\n * @param iter The iterator over the flattened command line arguments.\n * @throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.updateRequiredOptions#401",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.updateRequiredOptions(org.apache.commons.cli.Option)",
    "snippet": "private void updateRequiredOptions(Option opt) throws ParseException\n    {\n        // if the option is a required option remove the option from\n        // the requiredOptions list\n        if (opt.isRequired())\n        {\n            getRequiredOptions().remove(opt.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected\n        // option of the group\n        if (getOptions().getOptionGroup(opt) !\u003d null)\n        {\n            OptionGroup group \u003d getOptions().getOptionGroup(opt);\n\n            if (group.isRequired())\n            {\n                getRequiredOptions().remove(group);\n            }\n\n            group.setSelected(opt);\n        }\n    }",
    "begin_line": 401,
    "end_line": 423,
    "comment": "/** \n * Removes the option or its group from the list of expected elements.\n * @param opt\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.init#52",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.init()",
    "snippet": "private void init()\n    {\n        eatTheRest \u003d false;\n        tokens.clear();\n    }",
    "begin_line": 52,
    "end_line": 56,
    "comment": "/** \n * Resets the members to their original state i.e. remove all of \u003ccode\u003etokens\u003c/code\u003e entries and set \u003ccode\u003eeatTheRest\u003c/code\u003e to false.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.flatten#96",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n    {\n        init();\n        this.options \u003d options;\n\n        // an iterator for the command line tokens\n        Iterator iter \u003d Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token \u003d (String) iter.next();\n\n            // single or double hyphen\n            if (\"-\".equals(token) || \"--\".equals(token))\n            {\n                tokens.add(token);\n            }\n            \n            // handle long option --foo or --foo\u003dbar\n            else if (token.startsWith(\"--\"))\n            {\n                int pos \u003d token.indexOf(\u0027\u003d\u0027);\n                String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos); // --foo\n                \n                List matchingOpts \u003d options.getMatchingOptions(opt);\n\n                if (matchingOpts.isEmpty())\n                {\n                    processNonOptionToken(token, stopAtNonOption);\n                }\n                else if (matchingOpts.size() \u003e 1)\n                {\n                    throw new AmbiguousOptionException(opt, matchingOpts);\n                }\n                else\n                {\n                    currentOption \u003d options.getOption((String) matchingOpts.get(0));\n                    \n                    tokens.add(\"--\" + currentOption.getLongOpt());\n                    if (pos !\u003d -1)\n                    {\n                        tokens.add(token.substring(pos + 1));\n                    }\n                }\n            }\n\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() \u003d\u003d 2 || options.hasOption(token))\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (!options.getMatchingOptions(token).isEmpty())\n                {\n                    List matchingOpts \u003d options.getMatchingOptions(token);\n                    if (matchingOpts.size() \u003e 1)\n                    {\n                        throw new AmbiguousOptionException(token, matchingOpts);\n                    }\n                    else\n                    {\n                        Option opt \u003d options.getOption((String) matchingOpts.get(0));\n                        processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\n                    }\n                }\n                // requires bursting\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                processNonOptionToken(token, stopAtNonOption);\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "begin_line": 96,
    "end_line": 178,
    "comment": "/** \n * \u003cp\u003eAn implementation of  {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\u003cp\u003eThe following are the rules used by this flatten method. \u003col\u003e \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each successive entry without further processing.  Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this is a valid  {@link Option} id.  If it is a valid id, then add theentry to the list of processed tokens and set the current  {@link Option}member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true, then the remaining entries are copied to the list of processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents.  For more information on the bursting algorithm see {@link PosixParser#burstToken(String,boolean) burstToken}.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled by any of the previous rules, then the entry is added to the list of processed tokens.\u003c/li\u003e \u003c/ol\u003e \u003c/p\u003e\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flatteningwhen an non option is found.\n * @return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.gobble#185",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.gobble(java.util.Iterator)",
    "snippet": "private void gobble(Iterator iter)\n    {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }",
    "begin_line": 185,
    "end_line": 194,
    "comment": "/** \n * Adds the remaining tokens to the processed tokens list.\n * @param iter An iterator over the remaining tokens\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.processNonOptionToken#203",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.processNonOptionToken(java.lang.String, boolean)",
    "snippet": "private void processNonOptionToken(String value, boolean stopAtNonOption)\n    {\n        if (stopAtNonOption \u0026\u0026 (currentOption \u003d\u003d null || !currentOption.hasArg()))\n        {\n            eatTheRest \u003d true;\n            tokens.add(\"--\");\n        }\n\n        tokens.add(value);\n    }",
    "begin_line": 203,
    "end_line": 212,
    "comment": "/** \n * Add the special token \"\u003cb\u003e--\u003c/b\u003e\" and the current \u003ccode\u003evalue\u003c/code\u003e to the processed tokens list. Then add all the remaining \u003ccode\u003eargument\u003c/code\u003e values to the processed tokens list.\n * @param value The current token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.processOptionToken#226",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.processOptionToken(java.lang.String, boolean)",
    "snippet": "private void processOptionToken(String token, boolean stopAtNonOption)\n    {\n        if (stopAtNonOption \u0026\u0026 !options.hasOption(token))\n        {\n            eatTheRest \u003d true;\n        }\n\n        if (options.hasOption(token))\n        {\n            currentOption \u003d options.getOption(token);\n        }\n\n        tokens.add(token);\n    }",
    "begin_line": 226,
    "end_line": 239,
    "comment": "/** \n * \u003cp\u003eIf an  {@link Option} exists for \u003ccode\u003etoken\u003c/code\u003e thenadd the token to the processed list.\u003c/p\u003e \u003cp\u003eIf an  {@link Option} does not exist and \u003ccode\u003estopAtNonOption\u003c/code\u003eis set then add the remaining tokens to the processed tokens list directly.\u003c/p\u003e\n * @param token The current option token\n * @param stopAtNonOption Specifies whether flattening should haltat the first non option.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.burstToken#267",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.burstToken(java.lang.String, boolean)",
    "snippet": "protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        for (int i \u003d 1; i \u003c token.length(); i++)\n        {\n            String ch \u003d String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                currentOption \u003d options.getOption(ch);\n\n                if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                processNonOptionToken(token.substring(i), true);\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n                break;\n            }\n        }\n    }",
    "begin_line": 267,
    "end_line": 296,
    "comment": "/** \n * Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm. \u003cul\u003e \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e \u003cli\u003eforeach remaining character check if an  {@link Option}exists with that id.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does exist then add that characterprepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif the  {@link Option} can have an argument value and thereare remaining characters in the token then add the remaining characters as a token to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the processed tokens list.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e \u003c/ul\u003e\n * @param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n * @param stopAtNonOption Specifies whether to stop processingat the first non-Option encountered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Util.stripLeadingHyphens#36",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Util.java",
    "class_name": "org.apache.commons.cli.Util",
    "signature": "org.apache.commons.cli.Util.stripLeadingHyphens(java.lang.String)",
    "snippet": "static String stripLeadingHyphens(String str)\n    {\n        if (str \u003d\u003d null)\n        {\n            return null;\n        }\n        if (str.startsWith(\"--\"))\n        {\n            return str.substring(2, str.length());\n        }\n        else if (str.startsWith(\"-\"))\n        {\n            return str.substring(1, str.length());\n        }\n\n        return str;\n    }",
    "begin_line": 36,
    "end_line": 52,
    "comment": "/** \n * Remove the hyphens from the begining of \u003ccode\u003estr\u003c/code\u003e and return the new String.\n * @param str The string from which the hyphens should be removed.\n * @return the new String.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Util.stripLeadingAndTrailingQuotes#63",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Util.java",
    "class_name": "org.apache.commons.cli.Util",
    "signature": "org.apache.commons.cli.Util.stripLeadingAndTrailingQuotes(java.lang.String)",
    "snippet": "static String stripLeadingAndTrailingQuotes(String str)\n    {\n        int length \u003d str.length();\n        if (length \u003e 1 \u0026\u0026 str.startsWith(\"\\\"\") \u0026\u0026 str.endsWith(\"\\\"\") \u0026\u0026 str.substring(1, length - 1).indexOf(\u0027\"\u0027) \u003d\u003d -1)\n        {\n            str \u003d str.substring(1, length - 1);\n        }\n        \n        return str;\n    }",
    "begin_line": 63,
    "end_line": 72,
    "comment": "/** \n * Remove the leading and trailing quotes from \u003ccode\u003estr\u003c/code\u003e. E.g. if str is \u0027\"one two\"\u0027, then \u0027one two\u0027 is returned.\n * @param str The string from which the leading and trailing quotesshould be removed.\n * @return The string without the leading and trailing quotes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]