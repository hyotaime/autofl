[
  {
    "name": "StringUtils.StringUtils#157",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.StringUtils()",
    "snippet": "public StringUtils() {\n        super();\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "/** \n * \u003cp\u003e {@code StringUtils} instances should NOT be constructed instandard programming. Instead, the class should be used as {@code StringUtils.trim(\" foo \");}.\u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isEmpty#182",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence)",
    "snippet": "public static boolean isEmpty(CharSequence cs) {\n        return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\n    }",
    "begin_line": 182,
    "end_line": 184,
    "comment": "/** \n * \u003cp\u003eChecks if a CharSequence is empty (\"\") or null.\u003c/p\u003e \u003cpre\u003e StringUtils.isEmpty(null)      \u003d true StringUtils.isEmpty(\"\")        \u003d true StringUtils.isEmpty(\" \")       \u003d false StringUtils.isEmpty(\"bob\")     \u003d false StringUtils.isEmpty(\"  bob  \") \u003d false \u003c/pre\u003e \u003cp\u003eNOTE: This method changed in Lang version 2.0. It no longer trims the CharSequence. That functionality is available in isBlank().\u003c/p\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if the CharSequence is empty or null\n * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isNotEmpty#201",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence)",
    "snippet": "public static boolean isNotEmpty(CharSequence cs) {\n        return !StringUtils.isEmpty(cs);\n    }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * \u003cp\u003eChecks if a CharSequence is not empty (\"\") and not null.\u003c/p\u003e \u003cpre\u003e StringUtils.isNotEmpty(null)      \u003d false StringUtils.isNotEmpty(\"\")        \u003d false StringUtils.isNotEmpty(\" \")       \u003d true StringUtils.isNotEmpty(\"bob\")     \u003d true StringUtils.isNotEmpty(\"  bob  \") \u003d true \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if the CharSequence is not empty and not null\n * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isBlank#221",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence)",
    "snippet": "public static boolean isBlank(CharSequence cs) {\n        int strLen;\n        if (cs \u003d\u003d null || (strLen \u003d cs.length()) \u003d\u003d 0) {\n            return true;\n        }\n        for (int i \u003d 0; i \u003c strLen; i++) {\n            if ((Character.isWhitespace(cs.charAt(i)) \u003d\u003d false)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 221,
    "end_line": 232,
    "comment": "/** \n * \u003cp\u003eChecks if a CharSequence is whitespace, empty (\"\") or null.\u003c/p\u003e \u003cpre\u003e StringUtils.isBlank(null)      \u003d true StringUtils.isBlank(\"\")        \u003d true StringUtils.isBlank(\" \")       \u003d true StringUtils.isBlank(\"bob\")     \u003d false StringUtils.isBlank(\"  bob  \") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if the CharSequence is null, empty or whitespace\n * @since 2.0\n * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isNotBlank#251",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isNotBlank(java.lang.CharSequence)",
    "snippet": "public static boolean isNotBlank(CharSequence cs) {\n        return !StringUtils.isBlank(cs);\n    }",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * \u003cp\u003eChecks if a CharSequence is not empty (\"\"), not null and not whitespace only.\u003c/p\u003e \u003cpre\u003e StringUtils.isNotBlank(null)      \u003d false StringUtils.isNotBlank(\"\")        \u003d false StringUtils.isNotBlank(\" \")       \u003d false StringUtils.isNotBlank(\"bob\")     \u003d true StringUtils.isNotBlank(\"  bob  \") \u003d true \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if the CharSequence isnot empty and not null and not whitespace\n * @since 2.0\n * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.trim#280",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.trim(java.lang.String)",
    "snippet": "public static String trim(String str) {\n        return str \u003d\u003d null ? null : str.trim();\n    }",
    "begin_line": 280,
    "end_line": 282,
    "comment": "/** \n * \u003cp\u003eRemoves control characters (char \u0026lt;\u003d 32) from both ends of this String, handling  {@code null} by returning{@code null}.\u003c/p\u003e \u003cp\u003eThe String is trimmed using  {@link String#trim()}. Trim removes start and end characters \u0026lt;\u003d 32. To strip whitespace use  {@link #strip(String)}.\u003c/p\u003e \u003cp\u003eTo trim your choice of characters, use the {@link #strip(String,String)} methods.\u003c/p\u003e\u003cpre\u003e StringUtils.trim(null)          \u003d null StringUtils.trim(\"\")            \u003d \"\" StringUtils.trim(\"     \")       \u003d \"\" StringUtils.trim(\"abc\")         \u003d \"abc\" StringUtils.trim(\"    abc    \") \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to be trimmed, may be null\n * @return the trimmed string, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.trimToNull#306",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.trimToNull(java.lang.String)",
    "snippet": "public static String trimToNull(String str) {\n        String ts \u003d trim(str);\n        return isEmpty(ts) ? null : ts;\n    }",
    "begin_line": 306,
    "end_line": 309,
    "comment": "/** \n * \u003cp\u003eRemoves control characters (char \u0026lt;\u003d 32) from both ends of this String returning  {@code null} if the String isempty (\"\") after the trim or if it is  {@code null}. \u003cp\u003eThe String is trimmed using  {@link String#trim()}. Trim removes start and end characters \u0026lt;\u003d 32. To strip whitespace use  {@link #stripToNull(String)}.\u003c/p\u003e \u003cpre\u003e StringUtils.trimToNull(null)          \u003d null StringUtils.trimToNull(\"\")            \u003d null StringUtils.trimToNull(\"     \")       \u003d null StringUtils.trimToNull(\"abc\")         \u003d \"abc\" StringUtils.trimToNull(\"    abc    \") \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to be trimmed, may be null\n * @return the trimmed String,{@code null} if only chars \u0026lt;\u003d 32, empty or null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.trimToEmpty#332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.trimToEmpty(java.lang.String)",
    "snippet": "public static String trimToEmpty(String str) {\n        return str \u003d\u003d null ? EMPTY : str.trim();\n    }",
    "begin_line": 332,
    "end_line": 334,
    "comment": "/** \n * \u003cp\u003eRemoves control characters (char \u0026lt;\u003d 32) from both ends of this String returning an empty String (\"\") if the String is empty (\"\") after the trim or if it is  {@code null}. \u003cp\u003eThe String is trimmed using  {@link String#trim()}. Trim removes start and end characters \u0026lt;\u003d 32. To strip whitespace use  {@link #stripToEmpty(String)}.\u003c/p\u003e \u003cpre\u003e StringUtils.trimToEmpty(null)          \u003d \"\" StringUtils.trimToEmpty(\"\")            \u003d \"\" StringUtils.trimToEmpty(\"     \")       \u003d \"\" StringUtils.trimToEmpty(\"abc\")         \u003d \"abc\" StringUtils.trimToEmpty(\"    abc    \") \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to be trimmed, may be null\n * @return the trimmed String, or an empty String if {@code null} input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.strip#360",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.strip(java.lang.String)",
    "snippet": "public static String strip(String str) {\n        return strip(str, null);\n    }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * \u003cp\u003eStrips whitespace from the start and end of a String.\u003c/p\u003e \u003cp\u003eThis is similar to  {@link #trim(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.strip(null)     \u003d null StringUtils.strip(\"\")       \u003d \"\" StringUtils.strip(\"   \")    \u003d \"\" StringUtils.strip(\"abc\")    \u003d \"abc\" StringUtils.strip(\"  abc\")  \u003d \"abc\" StringUtils.strip(\"abc  \")  \u003d \"abc\" StringUtils.strip(\" abc \")  \u003d \"abc\" StringUtils.strip(\" ab c \") \u003d \"ab c\" \u003c/pre\u003e\n * @param str  the String to remove whitespace from, may be null\n * @return the stripped String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripToNull#387",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripToNull(java.lang.String)",
    "snippet": "public static String stripToNull(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        str \u003d strip(str, null);\n        return str.length() \u003d\u003d 0 ? null : str;\n    }",
    "begin_line": 387,
    "end_line": 393,
    "comment": "/** \n * \u003cp\u003eStrips whitespace from the start and end of a String  returning {@code null} if the String is empty (\"\") after the strip.\u003c/p\u003e\u003cp\u003eThis is similar to  {@link #trimToNull(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.stripToNull(null)     \u003d null StringUtils.stripToNull(\"\")       \u003d null StringUtils.stripToNull(\"   \")    \u003d null StringUtils.stripToNull(\"abc\")    \u003d \"abc\" StringUtils.stripToNull(\"  abc\")  \u003d \"abc\" StringUtils.stripToNull(\"abc  \")  \u003d \"abc\" StringUtils.stripToNull(\" abc \")  \u003d \"abc\" StringUtils.stripToNull(\" ab c \") \u003d \"ab c\" \u003c/pre\u003e\n * @param str  the String to be stripped, may be null\n * @return the stripped String,{@code null} if whitespace, empty or null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripToEmpty#417",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripToEmpty(java.lang.String)",
    "snippet": "public static String stripToEmpty(String str) {\n        return str \u003d\u003d null ? EMPTY : strip(str, null);\n    }",
    "begin_line": 417,
    "end_line": 419,
    "comment": "/** \n * \u003cp\u003eStrips whitespace from the start and end of a String  returning an empty String if  {@code null} input.\u003c/p\u003e\u003cp\u003eThis is similar to  {@link #trimToEmpty(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.stripToEmpty(null)     \u003d \"\" StringUtils.stripToEmpty(\"\")       \u003d \"\" StringUtils.stripToEmpty(\"   \")    \u003d \"\" StringUtils.stripToEmpty(\"abc\")    \u003d \"abc\" StringUtils.stripToEmpty(\"  abc\")  \u003d \"abc\" StringUtils.stripToEmpty(\"abc  \")  \u003d \"abc\" StringUtils.stripToEmpty(\" abc \")  \u003d \"abc\" StringUtils.stripToEmpty(\" ab c \") \u003d \"ab c\" \u003c/pre\u003e\n * @param str  the String to be stripped, may be null\n * @return the trimmed String, or an empty String if {@code null} input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.strip#447",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.strip(java.lang.String, java.lang.String)",
    "snippet": "public static String strip(String str, String stripChars) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        str \u003d stripStart(str, stripChars);\n        return stripEnd(str, stripChars);\n    }",
    "begin_line": 447,
    "end_line": 453,
    "comment": "/** \n * \u003cp\u003eStrips any of a set of characters from the start and end of a String. This is similar to  {@link String#trim()} but allows the charactersto be stripped to be controlled.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. An empty string (\"\") input returns the empty string.\u003c/p\u003e \u003cp\u003eIf the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}. Alternatively use  {@link #strip(String)}.\u003c/p\u003e \u003cpre\u003e StringUtils.strip(null, *)          \u003d null StringUtils.strip(\"\", *)            \u003d \"\" StringUtils.strip(\"abc\", null)      \u003d \"abc\" StringUtils.strip(\"  abc\", null)    \u003d \"abc\" StringUtils.strip(\"abc  \", null)    \u003d \"abc\" StringUtils.strip(\" abc \", null)    \u003d \"abc\" StringUtils.strip(\"  abcyx\", \"xyz\") \u003d \"  abc\" \u003c/pre\u003e\n * @param str  the String to remove characters from, may be null\n * @param stripChars  the characters to remove, null treated as whitespace\n * @return the stripped String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripStart#479",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripStart(java.lang.String, java.lang.String)",
    "snippet": "public static String stripStart(String str, String stripChars) {\n        int strLen;\n        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n            return str;\n        }\n        int start \u003d 0;\n        if (stripChars \u003d\u003d null) {\n            while ((start !\u003d strLen) \u0026\u0026 Character.isWhitespace(str.charAt(start))) {\n                start++;\n            }\n        } else if (stripChars.length() \u003d\u003d 0) {\n            return str;\n        } else {\n            while ((start !\u003d strLen) \u0026\u0026 (stripChars.indexOf(str.charAt(start)) !\u003d INDEX_NOT_FOUND)) {\n                start++;\n            }\n        }\n        return str.substring(start);\n    }",
    "begin_line": 479,
    "end_line": 497,
    "comment": "/** \n * \u003cp\u003eStrips any of a set of characters from the start of a String.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. An empty string (\"\") input returns the empty string.\u003c/p\u003e \u003cp\u003eIf the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.stripStart(null, *)          \u003d null StringUtils.stripStart(\"\", *)            \u003d \"\" StringUtils.stripStart(\"abc\", \"\")        \u003d \"abc\" StringUtils.stripStart(\"abc\", null)      \u003d \"abc\" StringUtils.stripStart(\"  abc\", null)    \u003d \"abc\" StringUtils.stripStart(\"abc  \", null)    \u003d \"abc  \" StringUtils.stripStart(\" abc \", null)    \u003d \"abc \" StringUtils.stripStart(\"yxabc  \", \"xyz\") \u003d \"abc  \" \u003c/pre\u003e\n * @param str  the String to remove characters from, may be null\n * @param stripChars  the characters to remove, null treated as whitespace\n * @return the stripped String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripEnd#524",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String)",
    "snippet": "public static String stripEnd(String str, String stripChars) {\n        int end;\n        if (str \u003d\u003d null || (end \u003d str.length()) \u003d\u003d 0) {\n            return str;\n        }\n\n        if (stripChars \u003d\u003d null) {\n            while ((end !\u003d 0) \u0026\u0026 Character.isWhitespace(str.charAt(end - 1))) {\n                end--;\n            }\n        } else if (stripChars.length() \u003d\u003d 0) {\n            return str;\n        } else {\n            while ((end !\u003d 0) \u0026\u0026 (stripChars.indexOf(str.charAt(end - 1)) !\u003d INDEX_NOT_FOUND)) {\n                end--;\n            }\n        }\n        return str.substring(0, end);\n    }",
    "begin_line": 524,
    "end_line": 542,
    "comment": "/** \n * \u003cp\u003eStrips any of a set of characters from the end of a String.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. An empty string (\"\") input returns the empty string.\u003c/p\u003e \u003cp\u003eIf the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.stripEnd(null, *)          \u003d null StringUtils.stripEnd(\"\", *)            \u003d \"\" StringUtils.stripEnd(\"abc\", \"\")        \u003d \"abc\" StringUtils.stripEnd(\"abc\", null)      \u003d \"abc\" StringUtils.stripEnd(\"  abc\", null)    \u003d \"  abc\" StringUtils.stripEnd(\"abc  \", null)    \u003d \"abc\" StringUtils.stripEnd(\" abc \", null)    \u003d \" abc\" StringUtils.stripEnd(\"  abcyx\", \"xyz\") \u003d \"  abc\" StringUtils.stripEnd(\"120.00\", \".0\")   \u003d \"12\" \u003c/pre\u003e\n * @param str  the String to remove characters from, may be null\n * @param stripChars  the set of characters to remove, null treated as whitespace\n * @return the stripped String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripAll#565",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripAll(java.lang.String)",
    "snippet": "public static String[] stripAll(String... strs) {\n        return stripAll(strs, null);\n    }",
    "begin_line": 565,
    "end_line": 567,
    "comment": "/** \n * \u003cp\u003eStrips whitespace from the start and end of every String in an array. Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cp\u003eA new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.\u003c/p\u003e\u003cpre\u003e StringUtils.stripAll(null)             \u003d null StringUtils.stripAll([])               \u003d [] StringUtils.stripAll([\"abc\", \"  abc\"]) \u003d [\"abc\", \"abc\"] StringUtils.stripAll([\"abc  \", null])  \u003d [\"abc\", null] \u003c/pre\u003e\n * @param strs  the array to remove whitespace from, may be null\n * @return the stripped Strings, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripAll#594",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[], java.lang.String)",
    "snippet": "public static String[] stripAll(String[] strs, String stripChars) {\n        int strsLen;\n        if (strs \u003d\u003d null || (strsLen \u003d strs.length) \u003d\u003d 0) {\n            return strs;\n        }\n        String[] newArr \u003d new String[strsLen];\n        for (int i \u003d 0; i \u003c strsLen; i++) {\n            newArr[i] \u003d strip(strs[i], stripChars);\n        }\n        return newArr;\n    }",
    "begin_line": 594,
    "end_line": 604,
    "comment": "/** \n * \u003cp\u003eStrips any of a set of characters from the start and end of every String in an array.\u003c/p\u003e Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cp\u003eA new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.A  {@code null} stripChars will strip whitespace as defined by{@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.stripAll(null, *)                \u003d null StringUtils.stripAll([], *)                  \u003d [] StringUtils.stripAll([\"abc\", \"  abc\"], null) \u003d [\"abc\", \"abc\"] StringUtils.stripAll([\"abc  \", null], null)  \u003d [\"abc\", null] StringUtils.stripAll([\"abc  \", null], \"yz\")  \u003d [\"abc  \", null] StringUtils.stripAll([\"yabcz\", null], \"yz\")  \u003d [\"abc\", null] \u003c/pre\u003e\n * @param strs  the array to remove characters from, may be null\n * @param stripChars  the characters to remove, null treated as whitespace\n * @return the stripped Strings, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.stripAccents#627",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.stripAccents(java.lang.String)",
    "snippet": " stripAccents(String input) {\n        if(input \u003d\u003d null) {\n            return null;\n        }\n        try {\n            String result \u003d null;\n            if (java6Available) {\n                result \u003d removeAccentsJava6(input);\n            } else if (sunAvailable) {\n                result \u003d removeAccentsSUN(input);\n            } else {\n                throw new UnsupportedOperationException(\n                    \"The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM\");\n            }\n            // Note that none of the above methods correctly remove ligatures...\n            return result;\n        } catch(IllegalArgumentException iae) {\n            throw new RuntimeException(\"IllegalArgumentException occurred\", iae);\n        } catch(IllegalAccessException iae) {\n            throw new RuntimeException(\"IllegalAccessException occurred\", iae);\n        } catch(InvocationTargetException ite) {\n            throw new RuntimeException(\"InvocationTargetException occurred\", ite);\n        } catch(SecurityException se) {\n            throw new RuntimeException(\"SecurityException occurred\", se);\n        }\n    }",
    "begin_line": 627,
    "end_line": 652,
    "comment": "/** \n * \u003cp\u003eRemoves diacritics (~\u003d accents) from a string. The case will not be altered.\u003c/p\u003e \u003cp\u003eFor instance, \u0027\u0026agrave;\u0027 will be replaced by \u0027a\u0027.\u003c/p\u003e \u003cp\u003eNote that ligatures will be left as is.\u003c/p\u003e \u003cp\u003eThis method will use the first available implementation of: Java 6\u0027s  {@link java.text.Normalizer}, Java 1.3\u0026ndash;1.5\u0027s  {@code sun.text.Normalizer}\u003c/p\u003e \u003cpre\u003e StringUtils.stripAccents(null)                \u003d null StringUtils.stripAccents(\"\")                  \u003d \"\" StringUtils.stripAccents(\"control\")           \u003d \"control\" StringUtils.stripAccents(\"\u0026ecute;clair\")      \u003d \"eclair\" \u003c/pre\u003e\n * @param input String to be stripped\n * @return input text with diacritics removed\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeAccentsJava6#664",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeAccentsJava6(java.lang.CharSequence)",
    "snippet": "private static String removeAccentsJava6(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException {\n        /*\n        String decomposed \u003d java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n        return java6Pattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n        */\n        if (!java6Available || java6NormalizerFormNFD \u003d\u003d null) {\n            throw new IllegalStateException(\"java.text.Normalizer is not available\");\n        }\n        String result;\n        result \u003d (String) java6NormalizeMethod.invoke(null, new Object[] {text, java6NormalizerFormNFD});\n        result \u003d java6Pattern.matcher(result).replaceAll(\"\");//$NON-NLS-1$\n        return result;\n    }",
    "begin_line": 664,
    "end_line": 677,
    "comment": "/** \n * Use  {@code java.text.Normalizer#normalize(CharSequence, Normalizer.Form)}(but be careful, this classe exists in Java 1.3, with an entirely different meaning!)\n * @param text the text to be processed\n * @return the processed string\n * @throws IllegalAccessException may be thrown by a reflection call\n * @throws InvocationTargetException if a reflection call throws an exception\n * @throws IllegalStateException if the {@code Normalizer} class is not available\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeAccentsSUN#688",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeAccentsSUN(java.lang.CharSequence)",
    "snippet": "private static String removeAccentsSUN(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException {\n        /*\n        String decomposed \u003d sun.text.Normalizer.decompose(text, false, 0);\n        return sunPattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n        */\n        if (! sunAvailable) {\n            throw new IllegalStateException(\"sun.text.Normalizer is not available\");\n        }\n        String result;\n        result \u003d (String) sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});\n        result \u003d sunPattern.matcher(result).replaceAll(\"\");//$NON-NLS-1$\n        return result;\n    }",
    "begin_line": 688,
    "end_line": 701,
    "comment": "/** \n * Use  {@code sun.text.Normalizer#decompose(String, boolean, int)}\n * @param text the text to be processed\n * @return the processed string\n * @throws IllegalAccessException may be thrown by a reflection call\n * @throws InvocationTargetException if a reflection call throws an exception\n * @throws IllegalStateException if the {@code Normalizer} class is not available\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.equals#772",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean equals(CharSequence cs1, CharSequence cs2) {\n        return cs1 \u003d\u003d null ? cs2 \u003d\u003d null : cs1.equals(cs2);\n    }",
    "begin_line": 772,
    "end_line": 774,
    "comment": "/** \n * \u003cp\u003eCompares two CharSequences, returning  {@code true} if they are equal.\u003c/p\u003e\u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.equals(null, null)   \u003d true StringUtils.equals(null, \"abc\")  \u003d false StringUtils.equals(\"abc\", null)  \u003d false StringUtils.equals(\"abc\", \"abc\") \u003d true StringUtils.equals(\"abc\", \"ABC\") \u003d false \u003c/pre\u003e\n * @see java.lang.String#equals(Object)\n * @param cs1  the first CharSequence, may be null\n * @param cs2  the second CharSequence, may be null\n * @return {@code true} if the CharSequences are equal, case sensitive, orboth  {@code null}\n * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.equalsIgnoreCase#797",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2) {\n        if (str1 \u003d\u003d null || str2 \u003d\u003d null) {\n            return str1 \u003d\u003d str2;\n        } else {\n            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));\n        }\n    }",
    "begin_line": 797,
    "end_line": 803,
    "comment": "/** \n * \u003cp\u003eCompares two CharSequences, returning  {@code true} if they are equal ignoringthe case.\u003c/p\u003e \u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered equal. Comparison is case insensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.equalsIgnoreCase(null, null)   \u003d true StringUtils.equalsIgnoreCase(null, \"abc\")  \u003d false StringUtils.equalsIgnoreCase(\"abc\", null)  \u003d false StringUtils.equalsIgnoreCase(\"abc\", \"abc\") \u003d true StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") \u003d true \u003c/pre\u003e\n * @param str1  the first CharSequence, may be null\n * @param str2  the second CharSequence, may be null\n * @return {@code true} if the CharSequence are equal, case insensitive, orboth  {@code null}\n * @since 3.0 Changed signature from equalsIgnoreCase(String, String) to equalsIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOf#827",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int)",
    "snippet": "public static int indexOf(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, 0);\n    }",
    "begin_line": 827,
    "end_line": 832,
    "comment": "/** \n * \u003cp\u003eFinds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} or empty (\"\") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOf(null, *)         \u003d -1 StringUtils.indexOf(\"\", *)           \u003d -1 StringUtils.indexOf(\"aabaabaa\", \u0027a\u0027) \u003d 0 StringUtils.indexOf(\"aabaabaa\", \u0027b\u0027) \u003d 2 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChar  the character to find\n * @return the first index of the search character,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOf#860",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int, int)",
    "snippet": "public static int indexOf(CharSequence seq, int searchChar, int startPos) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, startPos);\n    }",
    "begin_line": 860,
    "end_line": 865,
    "comment": "/** \n * \u003cp\u003eFinds the first index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} or empty (\"\") CharSequence will return {@code (INDEX_NOT_FOUND) -1}. A negative start position is treated as zero. A start position greater than the string length returns  {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOf(null, *, *)          \u003d -1 StringUtils.indexOf(\"\", *, *)            \u003d -1 StringUtils.indexOf(\"aabaabaa\", \u0027b\u0027, 0)  \u003d 2 StringUtils.indexOf(\"aabaabaa\", \u0027b\u0027, 3)  \u003d 5 StringUtils.indexOf(\"aabaabaa\", \u0027b\u0027, 9)  \u003d -1 StringUtils.indexOf(\"aabaabaa\", \u0027b\u0027, -1) \u003d 2 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChar  the character to find\n * @param startPos  the start position, negative treated as zero\n * @return the first index of the search character,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOf#891",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int indexOf(CharSequence seq, CharSequence searchSeq) {\n        if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, 0);\n    }",
    "begin_line": 891,
    "end_line": 896,
    "comment": "/** \n * \u003cp\u003eFinds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOf(null, *)          \u003d -1 StringUtils.indexOf(*, null)          \u003d -1 StringUtils.indexOf(\"\", \"\")           \u003d 0 StringUtils.indexOf(\"\", *)            \u003d -1 (except when * \u003d \"\") StringUtils.indexOf(\"aabaabaa\", \"a\")  \u003d 0 StringUtils.indexOf(\"aabaabaa\", \"b\")  \u003d 2 StringUtils.indexOf(\"aabaabaa\", \"ab\") \u003d 1 StringUtils.indexOf(\"aabaabaa\", \"\")   \u003d 0 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchSeq  the CharSequence to find, may be null\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOf#931",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos) {\n        if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n    }",
    "begin_line": 931,
    "end_line": 936,
    "comment": "/** \n * \u003cp\u003eFinds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty (\"\") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOf(null, *, *)          \u003d -1 StringUtils.indexOf(*, null, *)          \u003d -1 StringUtils.indexOf(\"\", \"\", 0)           \u003d 0 StringUtils.indexOf(\"\", *, 0)            \u003d -1 (except when * \u003d \"\") StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  \u003d 0 StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  \u003d 2 StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) \u003d 1 StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  \u003d 5 StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  \u003d -1 StringUtils.indexOf(\"aabaabaa\", \"b\", -1) \u003d 2 StringUtils.indexOf(\"aabaabaa\", \"\", 2)   \u003d 2 StringUtils.indexOf(\"abc\", \"\", 9)        \u003d 3 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchSeq  the CharSequence to find, may be null\n * @param startPos  the start position, negative treated as zero\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.ordinalIndexOf#972",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal) {\n        return ordinalIndexOf(str, searchStr, ordinal, false);\n    }",
    "begin_line": 972,
    "end_line": 974,
    "comment": "/** \n * \u003cp\u003eFinds the n-th index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.ordinalIndexOf(null, *, *)          \u003d -1 StringUtils.ordinalIndexOf(*, null, *)          \u003d -1 StringUtils.ordinalIndexOf(\"\", \"\", *)           \u003d 0 StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1)  \u003d 0 StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2)  \u003d 1 StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1)  \u003d 2 StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2)  \u003d 5 StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1) \u003d 1 StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2) \u003d 4 StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1)   \u003d 0 StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   \u003d 0 \u003c/pre\u003e \u003cp\u003eNote that \u0027head(CharSequence str, int n)\u0027 may be implemented as: \u003c/p\u003e \u003cpre\u003e str.substring(0, lastOrdinalIndexOf(str, \"\\n\", n)) \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @param ordinal  the n-th {@code searchStr} to find\n * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input\n * @since 2.1\n * @since 3.0 Changed signature from ordinalIndexOf(String, String, int) to ordinalIndexOf(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.ordinalIndexOf#990",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean)",
    "snippet": " ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal, boolean lastIndex) {\n        if (str \u003d\u003d null || searchStr \u003d\u003d null || ordinal \u003c\u003d 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() \u003d\u003d 0) {\n            return lastIndex ? str.length() : 0;\n        }\n        int found \u003d 0;\n        int index \u003d lastIndex ? str.length() : INDEX_NOT_FOUND;\n        do {\n            if (lastIndex) {\n                index \u003d CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);\n            } else {\n                index \u003d CharSequenceUtils.indexOf(str, searchStr, index + 1);\n            }\n            if (index \u003c 0) {\n                return index;\n            }\n            found++;\n        } while (found \u003c ordinal);\n        return index;\n    }",
    "begin_line": 990,
    "end_line": 1011,
    "comment": "/** \n * \u003cp\u003eFinds the n-th index within a String, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}.\u003c/p\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @param ordinal  the n-th {@code searchStr} to find\n * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()\n * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfIgnoreCase#1038",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n        return indexOfIgnoreCase(str, searchStr, 0);\n    }",
    "begin_line": 1038,
    "end_line": 1040,
    "comment": "/** \n * \u003cp\u003eCase in-sensitive find of the first index within a CharSequence.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty (\"\") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfIgnoreCase(null, *)          \u003d -1 StringUtils.indexOfIgnoreCase(*, null)          \u003d -1 StringUtils.indexOfIgnoreCase(\"\", \"\")           \u003d 0 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\")  \u003d 0 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\")  \u003d 2 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\") \u003d 1 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.5\n * @since 3.0 Changed signature from indexOfIgnoreCase(String, String) to indexOfIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfIgnoreCase#1074",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n        if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startPos \u003c 0) {\n            startPos \u003d 0;\n        }\n        int endLimit \u003d (str.length() - searchStr.length()) + 1;\n        if (startPos \u003e endLimit) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() \u003d\u003d 0) {\n            return startPos;\n        }\n        for (int i \u003d startPos; i \u003c endLimit; i++) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1074,
    "end_line": 1094,
    "comment": "/** \n * \u003cp\u003eCase in-sensitive find of the first index within a CharSequence from the specified position.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty (\"\") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfIgnoreCase(null, *, *)          \u003d -1 StringUtils.indexOfIgnoreCase(*, null, *)          \u003d -1 StringUtils.indexOfIgnoreCase(\"\", \"\", 0)           \u003d 0 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  \u003d 0 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  \u003d 2 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0) \u003d 1 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 3)  \u003d 5 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  \u003d -1 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", -1) \u003d 2 StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 2)   \u003d 2 StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9)        \u003d 3 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @param startPos  the start position, negative treated as zero\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.5\n * @since 3.0 Changed signature from indexOfIgnoreCase(String, String, int) to indexOfIgnoreCase(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOf#1118",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int)",
    "snippet": "public static int lastIndexOf(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\n    }",
    "begin_line": 1118,
    "end_line": 1123,
    "comment": "/** \n * \u003cp\u003eFinds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} or empty (\"\") CharSequence will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOf(null, *)         \u003d -1 StringUtils.lastIndexOf(\"\", *)           \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \u0027a\u0027) \u003d 7 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027) \u003d 5 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChar  the character to find\n * @return the last index of the search character,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from lastIndexOf(String, int) to lastIndexOf(CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOf#1153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int, int)",
    "snippet": "public static int lastIndexOf(CharSequence seq, int searchChar, int startPos) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\n    }",
    "begin_line": 1153,
    "end_line": 1158,
    "comment": "/** \n * \u003cp\u003eFinds the last index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#lastIndexOf(int,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} or empty (\"\") CharSequence will return {@code -1}. A negative start position returns  {@code -1}. A start position greater than the string length searches the whole string.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOf(null, *, *)          \u003d -1 StringUtils.lastIndexOf(\"\", *,  *)           \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027, 8)  \u003d 5 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027, 4)  \u003d 2 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027, 0)  \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027, 9)  \u003d 5 StringUtils.lastIndexOf(\"aabaabaa\", \u0027b\u0027, -1) \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \u0027a\u0027, 0)  \u003d 0 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChar  the character to find\n * @param startPos  the start position\n * @return the last index of the search character,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from lastIndexOf(String, int, int) to lastIndexOf(CharSequence, int, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOf#1183",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq) {\n        if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());\n    }",
    "begin_line": 1183,
    "end_line": 1188,
    "comment": "/** \n * \u003cp\u003eFinds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOf(null, *)          \u003d -1 StringUtils.lastIndexOf(*, null)          \u003d -1 StringUtils.lastIndexOf(\"\", \"\")           \u003d 0 StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  \u003d 7 StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  \u003d 5 StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") \u003d 4 StringUtils.lastIndexOf(\"aabaabaa\", \"\")   \u003d 8 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchSeq  the CharSequence to find, may be null\n * @return the last index of the search String,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from lastIndexOf(String, String) to lastIndexOf(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastOrdinalIndexOf#1224",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int lastOrdinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal) {\n        return ordinalIndexOf(str, searchStr, ordinal, true);\n    }",
    "begin_line": 1224,
    "end_line": 1226,
    "comment": "/** \n * \u003cp\u003eFinds the n-th last index within a String, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)}.\u003c/p\u003e \u003cp\u003eA  {@code null} String will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.lastOrdinalIndexOf(null, *, *)          \u003d -1 StringUtils.lastOrdinalIndexOf(*, null, *)          \u003d -1 StringUtils.lastOrdinalIndexOf(\"\", \"\", *)           \u003d 0 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1)  \u003d 7 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2)  \u003d 6 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1)  \u003d 5 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2)  \u003d 2 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) \u003d 4 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) \u003d 1 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1)   \u003d 8 StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2)   \u003d 8 \u003c/pre\u003e \u003cp\u003eNote that \u0027tail(CharSequence str, int n)\u0027 may be implemented as: \u003c/p\u003e \u003cpre\u003e str.substring(lastOrdinalIndexOf(str, \"\\n\", n) + 1) \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @param ordinal  the n-th last {@code searchStr} to find\n * @return the n-th last index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input\n * @since 2.5\n * @since 3.0 Changed signature from lastOrdinalIndexOf(String, String, int) to lastOrdinalIndexOf(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOf#1257",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos) {\n        if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);\n    }",
    "begin_line": 1257,
    "end_line": 1262,
    "comment": "/** \n * \u003cp\u003eFinds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String,int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty (\"\") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOf(null, *, *)          \u003d -1 StringUtils.lastIndexOf(*, null, *)          \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  \u003d 7 StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  \u003d 5 StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) \u003d 4 StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  \u003d 5 StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) \u003d -1 StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  \u003d 0 StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  \u003d -1 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchSeq  the CharSequence to find, may be null\n * @param startPos  the start position, negative treated as zero\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from lastIndexOf(String, String, int) to lastIndexOf(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOfIgnoreCase#1287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n        if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        return lastIndexOfIgnoreCase(str, searchStr, str.length());\n    }",
    "begin_line": 1287,
    "end_line": 1292,
    "comment": "/** \n * \u003cp\u003eCase in-sensitive find of the last index within a CharSequence.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty (\"\") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOfIgnoreCase(null, *)          \u003d -1 StringUtils.lastIndexOfIgnoreCase(*, null)          \u003d -1 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\")  \u003d 7 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\")  \u003d 5 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\") \u003d 4 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input\n * @since 2.5\n * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String) to lastIndexOfIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOfIgnoreCase#1323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n        if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startPos \u003e (str.length() - searchStr.length())) {\n            startPos \u003d str.length() - searchStr.length();\n        }\n        if (startPos \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() \u003d\u003d 0) {\n            return startPos;\n        }\n\n        for (int i \u003d startPos; i \u003e\u003d 0; i--) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1323,
    "end_line": 1343,
    "comment": "/** \n * \u003cp\u003eCase in-sensitive find of the last index within a CharSequence from the specified position.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty (\"\") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string.\u003c/p\u003e \u003cpre\u003e StringUtils.lastIndexOfIgnoreCase(null, *, *)          \u003d -1 StringUtils.lastIndexOfIgnoreCase(*, null, *)          \u003d -1 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8)  \u003d 7 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8)  \u003d 5 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8) \u003d 4 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  \u003d 5 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1) \u003d -1 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  \u003d 0 StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  \u003d -1 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @param startPos  the start position\n * @return the first index of the search CharSequence,-1 if no match or  {@code null} input\n * @since 2.5\n * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String, int) to lastIndexOfIgnoreCase(CharSequence, CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.contains#1367",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int)",
    "snippet": "public static boolean contains(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return false;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, 0) \u003e\u003d 0;\n    }",
    "begin_line": 1367,
    "end_line": 1372,
    "comment": "/** \n * \u003cp\u003eChecks if CharSequence contains a search character, handling  {@code null}. This method uses  {@link String#indexOf(int)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} or empty (\"\") CharSequence will return {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.contains(null, *)    \u003d false StringUtils.contains(\"\", *)      \u003d false StringUtils.contains(\"abc\", \u0027a\u0027) \u003d true StringUtils.contains(\"abc\", \u0027z\u0027) \u003d false \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChar  the character to find\n * @return true if the CharSequence contains the search character,false if not or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from contains(String, int) to contains(CharSequence, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.contains#1396",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean contains(CharSequence seq, CharSequence searchSeq) {\n        if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\n            return false;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, 0) \u003e\u003d 0;\n    }",
    "begin_line": 1396,
    "end_line": 1401,
    "comment": "/** \n * \u003cp\u003eChecks if CharSequence contains a search CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.\u003c/p\u003e\u003cp\u003eA  {@code null} CharSequence will return {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.contains(null, *)     \u003d false StringUtils.contains(*, null)     \u003d false StringUtils.contains(\"\", \"\")      \u003d true StringUtils.contains(\"abc\", \"\")   \u003d true StringUtils.contains(\"abc\", \"a\")  \u003d true StringUtils.contains(\"abc\", \"z\")  \u003d false \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchSeq  the CharSequence to find, may be null\n * @return true if the CharSequence contains the search CharSequence,false if not or  {@code null} string input\n * @since 2.0\n * @since 3.0 Changed signature from contains(String, String) to contains(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsIgnoreCase#1427",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr) {\n        if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n            return false;\n        }\n        int len \u003d searchStr.length();\n        int max \u003d str.length() - len;\n        for (int i \u003d 0; i \u003c\u003d max; i++) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 1427,
    "end_line": 1439,
    "comment": "/** \n * \u003cp\u003eChecks if CharSequence contains a search CharSequence irrespective of case, handling  {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. \u003cp\u003eA  {@code null} CharSequence will return {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.contains(null, *) \u003d false StringUtils.contains(*, null) \u003d false StringUtils.contains(\"\", \"\") \u003d true StringUtils.contains(\"abc\", \"\") \u003d true StringUtils.contains(\"abc\", \"a\") \u003d true StringUtils.contains(\"abc\", \"z\") \u003d false StringUtils.contains(\"abc\", \"A\") \u003d true StringUtils.contains(\"abc\", \"Z\") \u003d false \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStr  the CharSequence to find, may be null\n * @return true if the CharSequence contains the search CharSequence irrespective ofcase or false if not or  {@code null} string input\n * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsWhitespace#1450",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence)",
    "snippet": " containsWhitespace(CharSequence seq) {\n        if (isEmpty(seq)) {\n            return false;\n        }\n        int strLen \u003d seq.length();\n        for (int i \u003d 0; i \u003c strLen; i++) {\n            if (Character.isWhitespace(seq.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 1450,
    "end_line": 1461,
    "comment": "/** \n * Check whether the given CharSequence contains any whitespace characters.\n * @param seq the CharSequence to check (may be {@code null})\n * @return {@code true} if the CharSequence is not empty andcontains at least 1 whitespace character\n * @see java.lang.Character#isWhitespace\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfAny#1488",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char)",
    "snippet": "public static int indexOfAny(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen \u003d cs.length();\n        int csLast \u003d csLen - 1;\n        int searchLen \u003d searchChars.length;\n        int searchLast \u003d searchLen - 1;\n        for (int i \u003d 0; i \u003c csLen; i++) {\n            char ch \u003d cs.charAt(i);\n            for (int j \u003d 0; j \u003c searchLen; j++) {\n                if (searchChars[j] \u003d\u003d ch) {\n                    if (i \u003c csLast \u0026\u0026 j \u003c searchLast \u0026\u0026 Character.isHighSurrogate(ch)) {\n                        // ch is a supplementary character\n                        if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1488,
    "end_line": 1512,
    "comment": "/** \n * \u003cp\u003eSearch a CharSequence to find the first index of any character in the given set of characters.\u003c/p\u003e \u003cp\u003eA  {@code null} String will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfAny(null, *)                \u003d -1 StringUtils.indexOfAny(\"\", *)                  \u003d -1 StringUtils.indexOfAny(*, null)                \u003d -1 StringUtils.indexOfAny(*, [])                  \u003d -1 StringUtils.indexOfAny(\"zzabyycdxx\",[\u0027z\u0027,\u0027a\u0027]) \u003d 0 StringUtils.indexOfAny(\"zzabyycdxx\",[\u0027b\u0027,\u0027y\u0027]) \u003d 3 StringUtils.indexOfAny(\"aba\", [\u0027z\u0027])           \u003d -1 \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n * @since 3.0 Changed signature from indexOfAny(String, char[]) to indexOfAny(CharSequence, char...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfAny#1537",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.String)",
    "snippet": "public static int indexOfAny(CharSequence cs, String searchChars) {\n        if (isEmpty(cs) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        return indexOfAny(cs, searchChars.toCharArray());\n    }",
    "begin_line": 1537,
    "end_line": 1542,
    "comment": "/** \n * \u003cp\u003eSearch a CharSequence to find the first index of any character in the given set of characters.\u003c/p\u003e \u003cp\u003eA  {@code null} String will return {@code -1}. A  {@code null} search string will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfAny(null, *)            \u003d -1 StringUtils.indexOfAny(\"\", *)              \u003d -1 StringUtils.indexOfAny(*, null)            \u003d -1 StringUtils.indexOfAny(*, \"\")              \u003d -1 StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") \u003d 0 StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") \u003d 3 StringUtils.indexOfAny(\"aba\",\"z\")          \u003d -1 \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n * @since 3.0 Changed signature from indexOfAny(String, String) to indexOfAny(CharSequence, String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsAny#1570",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char)",
    "snippet": "public static boolean containsAny(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength \u003d cs.length();\n        int searchLength \u003d searchChars.length;\n        int csLast \u003d csLength - 1;\n        int searchLast \u003d searchLength - 1;\n        for (int i \u003d 0; i \u003c csLength; i++) {\n            char ch \u003d cs.charAt(i);\n            for (int j \u003d 0; j \u003c searchLength; j++) {\n                if (searchChars[j] \u003d\u003d ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j \u003d\u003d searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return true;\n                        }\n                        if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 1570,
    "end_line": 1598,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains any character in the given set of characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code false}. A  {@code null} or zero length search array will return {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.containsAny(null, *)                \u003d false StringUtils.containsAny(\"\", *)                  \u003d false StringUtils.containsAny(*, null)                \u003d false StringUtils.containsAny(*, [])                  \u003d false StringUtils.containsAny(\"zzabyycdxx\",[\u0027z\u0027,\u0027a\u0027]) \u003d true StringUtils.containsAny(\"zzabyycdxx\",[\u0027b\u0027,\u0027y\u0027]) \u003d true StringUtils.containsAny(\"aba\", [\u0027z\u0027])           \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the {@code true} if any of the chars are found,{@code false} if no match or null input\n * @since 2.4\n * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsAny#1628",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean containsAny(CharSequence cs, CharSequence searchChars) {\n        if (searchChars \u003d\u003d null) {\n            return false;\n        }\n        return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));\n    }",
    "begin_line": 1628,
    "end_line": 1633,
    "comment": "/** \n * \u003cp\u003e Checks if the CharSequence contains any character in the given set of characters. \u003c/p\u003e \u003cp\u003e A  {@code null} CharSequence will return {@code false}. A  {@code null} search CharSequence will return{@code false}. \u003c/p\u003e \u003cpre\u003e StringUtils.containsAny(null, *)            \u003d false StringUtils.containsAny(\"\", *)              \u003d false StringUtils.containsAny(*, null)            \u003d false StringUtils.containsAny(*, \"\")              \u003d false StringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true StringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true StringUtils.containsAny(\"aba\",\"z\")          \u003d false \u003c/pre\u003e\n * @param cs the CharSequence to check, may be null\n * @param searchChars the chars to search for, may be null\n * @return the {@code true} if any of the chars are found, {@code false} if no match or null input\n * @since 2.4\n * @since 3.0 Changed signature from containsAny(String, String) to containsAny(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfAnyBut#1661",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char)",
    "snippet": "public static int indexOfAnyBut(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen \u003d cs.length();\n        int csLast \u003d csLen - 1;\n        int searchLen \u003d searchChars.length;\n        int searchLast \u003d searchLen - 1;\n        outer:\n        for (int i \u003d 0; i \u003c csLen; i++) {\n            char ch \u003d cs.charAt(i);\n            for (int j \u003d 0; j \u003c searchLen; j++) {\n                if (searchChars[j] \u003d\u003d ch) {\n                    if (i \u003c csLast \u0026\u0026 j \u003c searchLast \u0026\u0026 Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1661,
    "end_line": 1686,
    "comment": "/** \n * \u003cp\u003eSearches a CharSequence to find the first index of any character not in the given set of characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfAnyBut(null, *)                              \u003d -1 StringUtils.indexOfAnyBut(\"\", *)                                \u003d -1 StringUtils.indexOfAnyBut(*, null)                              \u003d -1 StringUtils.indexOfAnyBut(*, [])                                \u003d -1 StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {\u0027z\u0027, \u0027a\u0027} ) \u003d 3 StringUtils.indexOfAnyBut(\"aba\", new char[] {\u0027z\u0027} )             \u003d 0 StringUtils.indexOfAnyBut(\"aba\", new char[] {\u0027a\u0027, \u0027b\u0027} )        \u003d -1 \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n * @since 3.0 Changed signature from indexOfAnyBut(String, char[]) to indexOfAnyBut(CharSequence, char...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfAnyBut#1711",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars) {\n        if (isEmpty(seq) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen \u003d seq.length();\n        for (int i \u003d 0; i \u003c strLen; i++) {\n            char ch \u003d seq.charAt(i);\n            boolean chFound \u003d CharSequenceUtils.indexOf(searchChars, ch, 0) \u003e\u003d 0;\n            if (i + 1 \u003c strLen \u0026\u0026 Character.isHighSurrogate(ch)) {\n                char ch2 \u003d seq.charAt(i + 1);\n                if (chFound \u0026\u0026 CharSequenceUtils.indexOf(searchChars, ch2, 0) \u003c 0) {\n                    return i;\n                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1711,
    "end_line": 1731,
    "comment": "/** \n * \u003cp\u003eSearch a CharSequence to find the first index of any character not in the given set of characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A  {@code null} or empty search string will return {@code -1}.\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfAnyBut(null, *)            \u003d -1 StringUtils.indexOfAnyBut(\"\", *)              \u003d -1 StringUtils.indexOfAnyBut(*, null)            \u003d -1 StringUtils.indexOfAnyBut(*, \"\")              \u003d -1 StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") \u003d 3 StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   \u003d -1 StringUtils.indexOfAnyBut(\"aba\",\"ab\")         \u003d -1 \u003c/pre\u003e\n * @param seq  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n * @since 3.0 Changed signature from indexOfAnyBut(String, String) to indexOfAnyBut(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsOnly#1757",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char)",
    "snippet": "public static boolean containsOnly(CharSequence cs, char... valid) {\n        // All these pre-checks are to maintain API with an older version\n        if (valid \u003d\u003d null || cs \u003d\u003d null) {\n            return false;\n        }\n        if (cs.length() \u003d\u003d 0) {\n            return true;\n        }\n        if (valid.length \u003d\u003d 0) {\n            return false;\n        }\n        return indexOfAnyBut(cs, valid) \u003d\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1757,
    "end_line": 1769,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only certain characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code false}. A  {@code null} valid character array will return {@code false}. An empty CharSequence (length()\u003d0) always returns  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.containsOnly(null, *)       \u003d false StringUtils.containsOnly(*, null)       \u003d false StringUtils.containsOnly(\"\", *)         \u003d true StringUtils.containsOnly(\"ab\", \u0027\u0027)      \u003d false StringUtils.containsOnly(\"abab\", \u0027abc\u0027) \u003d true StringUtils.containsOnly(\"ab1\", \u0027abc\u0027)  \u003d false StringUtils.containsOnly(\"abz\", \u0027abc\u0027)  \u003d false \u003c/pre\u003e\n * @param cs  the String to check, may be null\n * @param valid  an array of valid chars, may be null\n * @return true if it only contains valid chars and is non-null\n * @since 3.0 Changed signature from containsOnly(String, char[]) to containsOnly(CharSequence, char...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsOnly#1794",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String)",
    "snippet": "public static boolean containsOnly(CharSequence cs, String validChars) {\n        if (cs \u003d\u003d null || validChars \u003d\u003d null) {\n            return false;\n        }\n        return containsOnly(cs, validChars.toCharArray());\n    }",
    "begin_line": 1794,
    "end_line": 1799,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only certain characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code false}. A  {@code null} valid character String will return {@code false}. An empty String (length()\u003d0) always returns  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.containsOnly(null, *)       \u003d false StringUtils.containsOnly(*, null)       \u003d false StringUtils.containsOnly(\"\", *)         \u003d true StringUtils.containsOnly(\"ab\", \"\")      \u003d false StringUtils.containsOnly(\"abab\", \"abc\") \u003d true StringUtils.containsOnly(\"ab1\", \"abc\")  \u003d false StringUtils.containsOnly(\"abz\", \"abc\")  \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param validChars  a String of valid chars, may be null\n * @return true if it only contains valid chars and is non-null\n * @since 2.0\n * @since 3.0 Changed signature from containsOnly(String, String) to containsOnly(CharSequence, String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsNone#1826",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char)",
    "snippet": "public static boolean containsNone(CharSequence cs, char... searchChars) {\n        if (cs \u003d\u003d null || searchChars \u003d\u003d null) {\n            return true;\n        }\n        int csLen \u003d cs.length();\n        int csLast \u003d csLen - 1;\n        int searchLen \u003d searchChars.length;\n        int searchLast \u003d searchLen - 1;\n        for (int i \u003d 0; i \u003c csLen; i++) {\n            char ch \u003d cs.charAt(i);\n            for (int j \u003d 0; j \u003c searchLen; j++) {\n                if (searchChars[j] \u003d\u003d ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j \u003d\u003d searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }",
    "begin_line": 1826,
    "end_line": 1854,
    "comment": "/** \n * \u003cp\u003eChecks that the CharSequence does not contain certain characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty CharSequence (length()\u003d0) always returns true.\u003c/p\u003e \u003cpre\u003e StringUtils.containsNone(null, *)       \u003d true StringUtils.containsNone(*, null)       \u003d true StringUtils.containsNone(\"\", *)         \u003d true StringUtils.containsNone(\"ab\", \u0027\u0027)      \u003d true StringUtils.containsNone(\"abab\", \u0027xyz\u0027) \u003d true StringUtils.containsNone(\"ab1\", \u0027xyz\u0027)  \u003d true StringUtils.containsNone(\"abz\", \u0027xyz\u0027)  \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  an array of invalid chars, may be null\n * @return true if it contains none of the invalid chars, or is null\n * @since 2.0\n * @since 3.0 Changed signature from containsNone(String, char[]) to containsNone(CharSequence, char...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.containsNone#1879",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String)",
    "snippet": "public static boolean containsNone(CharSequence cs, String invalidChars) {\n        if (cs \u003d\u003d null || invalidChars \u003d\u003d null) {\n            return true;\n        }\n        return containsNone(cs, invalidChars.toCharArray());\n    }",
    "begin_line": 1879,
    "end_line": 1884,
    "comment": "/** \n * \u003cp\u003eChecks that the CharSequence does not contain certain characters.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty String (\"\") always returns true.\u003c/p\u003e \u003cpre\u003e StringUtils.containsNone(null, *)       \u003d true StringUtils.containsNone(*, null)       \u003d true StringUtils.containsNone(\"\", *)         \u003d true StringUtils.containsNone(\"ab\", \"\")      \u003d true StringUtils.containsNone(\"abab\", \"xyz\") \u003d true StringUtils.containsNone(\"ab1\", \"xyz\")  \u003d true StringUtils.containsNone(\"abz\", \"xyz\")  \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @param invalidChars  a String of invalid chars, may be null\n * @return true if it contains none of the invalid chars, or is null\n * @since 2.0\n * @since 3.0 Changed signature from containsNone(String, String) to containsNone(CharSequence, String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfAny#1915",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int indexOfAny(CharSequence str, CharSequence... searchStrs) {\n        if (str \u003d\u003d null || searchStrs \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        int sz \u003d searchStrs.length;\n\n        // String\u0027s can\u0027t have a MAX_VALUEth index.\n        int ret \u003d Integer.MAX_VALUE;\n\n        int tmp \u003d 0;\n        for (int i \u003d 0; i \u003c sz; i++) {\n            CharSequence search \u003d searchStrs[i];\n            if (search \u003d\u003d null) {\n                continue;\n            }\n            tmp \u003d CharSequenceUtils.indexOf(str, search, 0);\n            if (tmp \u003d\u003d INDEX_NOT_FOUND) {\n                continue;\n            }\n\n            if (tmp \u003c ret) {\n                ret \u003d tmp;\n            }\n        }\n\n        return (ret \u003d\u003d Integer.MAX_VALUE) ? INDEX_NOT_FOUND : ret;\n    }",
    "begin_line": 1915,
    "end_line": 1941,
    "comment": "/** \n * \u003cp\u003eFind the first index of any of a set of potential substrings.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}. A  {@code null} search array entry will be ignored, but a searcharray containing \"\" will return  {@code 0} if {@code str} is notnull. This method uses  {@link String#indexOf(String)} if possible.\u003c/p\u003e\u003cpre\u003e StringUtils.indexOfAny(null, *)                     \u003d -1 StringUtils.indexOfAny(*, null)                     \u003d -1 StringUtils.indexOfAny(*, [])                       \u003d -1 StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   \u003d 2 StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   \u003d 2 StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   \u003d -1 StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) \u003d 1 StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          \u003d 0 StringUtils.indexOfAny(\"\", [\"\"])                    \u003d 0 StringUtils.indexOfAny(\"\", [\"a\"])                   \u003d -1 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStrs  the CharSequences to search for, may be null\n * @return the first index of any of the searchStrs in str, -1 if no match\n * @since 3.0 Changed signature from indexOfAny(String, String[]) to indexOfAny(CharSequence, CharSequence...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lastIndexOfAny#1969",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int lastIndexOfAny(CharSequence str, CharSequence... searchStrs) {\n        if (str \u003d\u003d null || searchStrs \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        int sz \u003d searchStrs.length;\n        int ret \u003d INDEX_NOT_FOUND;\n        int tmp \u003d 0;\n        for (int i \u003d 0; i \u003c sz; i++) {\n            CharSequence search \u003d searchStrs[i];\n            if (search \u003d\u003d null) {\n                continue;\n            }\n            tmp \u003d CharSequenceUtils.lastIndexOf(str, search, str.length());\n            if (tmp \u003e ret) {\n                ret \u003d tmp;\n            }\n        }\n        return ret;\n    }",
    "begin_line": 1969,
    "end_line": 1987,
    "comment": "/** \n * \u003cp\u003eFind the latest index of any of a set of potential substrings.\u003c/p\u003e \u003cp\u003eA  {@code null} CharSequence will return {@code -1}. A  {@code null} search array will return {@code -1}. A  {@code null} or zero length search array entry will be ignored,but a search array containing \"\" will return the length of  {@code str}if  {@code str} is not null. This method uses {@link String#indexOf(String)} if possible\u003c/p\u003e\u003cpre\u003e StringUtils.lastIndexOfAny(null, *)                   \u003d -1 StringUtils.lastIndexOfAny(*, null)                   \u003d -1 StringUtils.lastIndexOfAny(*, [])                     \u003d -1 StringUtils.lastIndexOfAny(*, [null])                 \u003d -1 StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) \u003d 6 StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) \u003d 6 StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) \u003d -1 StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) \u003d -1 StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   \u003d 10 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param searchStrs  the CharSequences to search for, may be null\n * @return the last index of any of the CharSequences, -1 if no match\n * @since 3.0 Changed signature from lastIndexOfAny(String, String[]) to lastIndexOfAny(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substring#2015",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substring(java.lang.String, int)",
    "snippet": "public static String substring(String str, int start) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n\n        // handle negatives, which means last n characters\n        if (start \u003c 0) {\n            start \u003d str.length() + start; // remember start is negative\n        }\n\n        if (start \u003c 0) {\n            start \u003d 0;\n        }\n        if (start \u003e str.length()) {\n            return EMPTY;\n        }\n\n        return str.substring(start);\n    }",
    "begin_line": 2015,
    "end_line": 2033,
    "comment": "/** \n * \u003cp\u003eGets a substring from the specified String avoiding exceptions.\u003c/p\u003e \u003cp\u003eA negative start position can be used to start  {@code n}characters from the end of the String.\u003c/p\u003e \u003cp\u003eA  {@code null} String will return {@code null}. An empty (\"\") String will return \"\".\u003c/p\u003e \u003cpre\u003e StringUtils.substring(null, *)   \u003d null StringUtils.substring(\"\", *)     \u003d \"\" StringUtils.substring(\"abc\", 0)  \u003d \"abc\" StringUtils.substring(\"abc\", 2)  \u003d \"c\" StringUtils.substring(\"abc\", 4)  \u003d \"\" StringUtils.substring(\"abc\", -2) \u003d \"bc\" StringUtils.substring(\"abc\", -4) \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to get the substring from, may be null\n * @param start  the position to start from, negative meanscount back from the end of the String by this many characters\n * @return substring from start position, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substring#2070",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substring(java.lang.String, int, int)",
    "snippet": "public static String substring(String str, int start, int end) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n\n        // handle negatives\n        if (end \u003c 0) {\n            end \u003d str.length() + end; // remember end is negative\n        }\n        if (start \u003c 0) {\n            start \u003d str.length() + start; // remember start is negative\n        }\n\n        // check length next\n        if (end \u003e str.length()) {\n            end \u003d str.length();\n        }\n\n        // if start is greater than end, return \"\"\n        if (start \u003e end) {\n            return EMPTY;\n        }\n\n        if (start \u003c 0) {\n            start \u003d 0;\n        }\n        if (end \u003c 0) {\n            end \u003d 0;\n        }\n\n        return str.substring(start, end);\n    }",
    "begin_line": 2070,
    "end_line": 2101,
    "comment": "/** \n * \u003cp\u003eGets a substring from the specified String avoiding exceptions.\u003c/p\u003e \u003cp\u003eA negative start position can be used to start/end  {@code n}characters from the end of the String.\u003c/p\u003e \u003cp\u003eThe returned substring starts with the character in the  {@code start}position and ends before the  {@code end} position. All position counting iszero-based -- i.e., to start at the beginning of the string use {@code start \u003d 0}. Negative start and end positions can be used to specify offsets relative to the end of the String.\u003c/p\u003e \u003cp\u003eIf  {@code start} is not strictly to the left of {@code end}, \"\" is returned.\u003c/p\u003e \u003cpre\u003e StringUtils.substring(null, *, *)    \u003d null StringUtils.substring(\"\", * ,  *)    \u003d \"\"; StringUtils.substring(\"abc\", 0, 2)   \u003d \"ab\" StringUtils.substring(\"abc\", 2, 0)   \u003d \"\" StringUtils.substring(\"abc\", 2, 4)   \u003d \"c\" StringUtils.substring(\"abc\", 4, 6)   \u003d \"\" StringUtils.substring(\"abc\", 2, 2)   \u003d \"\" StringUtils.substring(\"abc\", -2, -1) \u003d \"b\" StringUtils.substring(\"abc\", -4, 2)  \u003d \"ab\" \u003c/pre\u003e\n * @param str  the String to get the substring from, may be null\n * @param start  the position to start from, negative meanscount back from the end of the String by this many characters\n * @param end  the position to end at (exclusive), negative meanscount back from the end of the String by this many characters\n * @return substring from start position to end positon,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.left#2125",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.left(java.lang.String, int)",
    "snippet": "public static String left(String str, int len) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (len \u003c 0) {\n            return EMPTY;\n        }\n        if (str.length() \u003c\u003d len) {\n            return str;\n        }\n        return str.substring(0, len);\n    }",
    "begin_line": 2125,
    "end_line": 2136,
    "comment": "/** \n * \u003cp\u003eGets the leftmost  {@code len} characters of a String.\u003c/p\u003e\u003cp\u003eIf  {@code len} characters are not available, or theString is  {@code null}, the String will be returned without an exception. An empty String is returned if len is negative.\u003c/p\u003e \u003cpre\u003e StringUtils.left(null, *)    \u003d null StringUtils.left(*, -ve)     \u003d \"\" StringUtils.left(\"\", *)      \u003d \"\" StringUtils.left(\"abc\", 0)   \u003d \"\" StringUtils.left(\"abc\", 2)   \u003d \"ab\" StringUtils.left(\"abc\", 4)   \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to get the leftmost characters from, may be null\n * @param len  the length of the required String\n * @return the leftmost characters, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.right#2158",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.right(java.lang.String, int)",
    "snippet": "public static String right(String str, int len) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (len \u003c 0) {\n            return EMPTY;\n        }\n        if (str.length() \u003c\u003d len) {\n            return str;\n        }\n        return str.substring(str.length() - len);\n    }",
    "begin_line": 2158,
    "end_line": 2169,
    "comment": "/** \n * \u003cp\u003eGets the rightmost  {@code len} characters of a String.\u003c/p\u003e\u003cp\u003eIf  {@code len} characters are not available, or the Stringis  {@code null}, the String will be returned without an an exception. An empty String is returned if len is negative.\u003c/p\u003e \u003cpre\u003e StringUtils.right(null, *)    \u003d null StringUtils.right(*, -ve)     \u003d \"\" StringUtils.right(\"\", *)      \u003d \"\" StringUtils.right(\"abc\", 0)   \u003d \"\" StringUtils.right(\"abc\", 2)   \u003d \"bc\" StringUtils.right(\"abc\", 4)   \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to get the rightmost characters from, may be null\n * @param len  the length of the required String\n * @return the rightmost characters, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.mid#2196",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int)",
    "snippet": "public static String mid(String str, int pos, int len) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (len \u003c 0 || pos \u003e str.length()) {\n            return EMPTY;\n        }\n        if (pos \u003c 0) {\n            pos \u003d 0;\n        }\n        if (str.length() \u003c\u003d (pos + len)) {\n            return str.substring(pos);\n        }\n        return str.substring(pos, pos + len);\n    }",
    "begin_line": 2196,
    "end_line": 2210,
    "comment": "/** \n * \u003cp\u003eGets  {@code len} characters from the middle of a String.\u003c/p\u003e\u003cp\u003eIf  {@code len} characters are not available, the remainderof the String will be returned without an exception. If the String is  {@code null},  {@code null} will be returned.An empty String is returned if len is negative or exceeds the length of  {@code str}.\u003c/p\u003e \u003cpre\u003e StringUtils.mid(null, *, *)    \u003d null StringUtils.mid(*, *, -ve)     \u003d \"\" StringUtils.mid(\"\", 0, *)      \u003d \"\" StringUtils.mid(\"abc\", 0, 2)   \u003d \"ab\" StringUtils.mid(\"abc\", 0, 4)   \u003d \"abc\" StringUtils.mid(\"abc\", 2, 4)   \u003d \"c\" StringUtils.mid(\"abc\", 4, 2)   \u003d \"\" StringUtils.mid(\"abc\", -2, 2)  \u003d \"ab\" \u003c/pre\u003e\n * @param str  the String to get the characters from, may be null\n * @param pos  the position to start from, negative treated as zero\n * @param len  the length of the required String\n * @return the middle characters, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringBefore#2241",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String)",
    "snippet": "public static String substringBefore(String str, String separator) {\n        if (isEmpty(str) || separator \u003d\u003d null) {\n            return str;\n        }\n        if (separator.length() \u003d\u003d 0) {\n            return EMPTY;\n        }\n        int pos \u003d str.indexOf(separator);\n        if (pos \u003d\u003d INDEX_NOT_FOUND) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }",
    "begin_line": 2241,
    "end_line": 2253,
    "comment": "/** \n * \u003cp\u003eGets the substring before the first occurrence of a separator. The separator is not returned.\u003c/p\u003e \u003cp\u003eA  {@code null} string input will return {@code null}. An empty (\"\") string input will return the empty string. A  {@code null} separator will return the input string.\u003c/p\u003e\u003cp\u003eIf nothing is found, the string input is returned.\u003c/p\u003e \u003cpre\u003e StringUtils.substringBefore(null, *)      \u003d null StringUtils.substringBefore(\"\", *)        \u003d \"\" StringUtils.substringBefore(\"abc\", \"a\")   \u003d \"\" StringUtils.substringBefore(\"abcba\", \"b\") \u003d \"a\" StringUtils.substringBefore(\"abc\", \"c\")   \u003d \"ab\" StringUtils.substringBefore(\"abc\", \"d\")   \u003d \"abc\" StringUtils.substringBefore(\"abc\", \"\")    \u003d \"\" StringUtils.substringBefore(\"abc\", null)  \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to get a substring from, may be null\n * @param separator  the String to search for, may be null\n * @return the substring before the first occurrence of the separator,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringAfter#2283",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String)",
    "snippet": "public static String substringAfter(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (separator \u003d\u003d null) {\n            return EMPTY;\n        }\n        int pos \u003d str.indexOf(separator);\n        if (pos \u003d\u003d INDEX_NOT_FOUND) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }",
    "begin_line": 2283,
    "end_line": 2295,
    "comment": "/** \n * \u003cp\u003eGets the substring after the first occurrence of a separator. The separator is not returned.\u003c/p\u003e \u003cp\u003eA  {@code null} string input will return {@code null}. An empty (\"\") string input will return the empty string. A  {@code null} separator will return the empty string if theinput string is not  {@code null}.\u003c/p\u003e \u003cp\u003eIf nothing is found, the empty string is returned.\u003c/p\u003e \u003cpre\u003e StringUtils.substringAfter(null, *)      \u003d null StringUtils.substringAfter(\"\", *)        \u003d \"\" StringUtils.substringAfter(*, null)      \u003d \"\" StringUtils.substringAfter(\"abc\", \"a\")   \u003d \"bc\" StringUtils.substringAfter(\"abcba\", \"b\") \u003d \"cba\" StringUtils.substringAfter(\"abc\", \"c\")   \u003d \"\" StringUtils.substringAfter(\"abc\", \"d\")   \u003d \"\" StringUtils.substringAfter(\"abc\", \"\")    \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to get a substring from, may be null\n * @param separator  the String to search for, may be null\n * @return the substring after the first occurrence of the separator,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringBeforeLast#2324",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String)",
    "snippet": "public static String substringBeforeLast(String str, String separator) {\n        if (isEmpty(str) || isEmpty(separator)) {\n            return str;\n        }\n        int pos \u003d str.lastIndexOf(separator);\n        if (pos \u003d\u003d INDEX_NOT_FOUND) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }",
    "begin_line": 2324,
    "end_line": 2333,
    "comment": "/** \n * \u003cp\u003eGets the substring before the last occurrence of a separator. The separator is not returned.\u003c/p\u003e \u003cp\u003eA  {@code null} string input will return {@code null}. An empty (\"\") string input will return the empty string. An empty or  {@code null} separator will return the input string.\u003c/p\u003e\u003cp\u003eIf nothing is found, the string input is returned.\u003c/p\u003e \u003cpre\u003e StringUtils.substringBeforeLast(null, *)      \u003d null StringUtils.substringBeforeLast(\"\", *)        \u003d \"\" StringUtils.substringBeforeLast(\"abcba\", \"b\") \u003d \"abc\" StringUtils.substringBeforeLast(\"abc\", \"c\")   \u003d \"ab\" StringUtils.substringBeforeLast(\"a\", \"a\")     \u003d \"\" StringUtils.substringBeforeLast(\"a\", \"z\")     \u003d \"a\" StringUtils.substringBeforeLast(\"a\", null)    \u003d \"a\" StringUtils.substringBeforeLast(\"a\", \"\")      \u003d \"a\" \u003c/pre\u003e\n * @param str  the String to get a substring from, may be null\n * @param separator  the String to search for, may be null\n * @return the substring before the last occurrence of the separator,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringAfterLast#2364",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String)",
    "snippet": "public static String substringAfterLast(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (isEmpty(separator)) {\n            return EMPTY;\n        }\n        int pos \u003d str.lastIndexOf(separator);\n        if (pos \u003d\u003d INDEX_NOT_FOUND || pos \u003d\u003d (str.length() - separator.length())) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }",
    "begin_line": 2364,
    "end_line": 2376,
    "comment": "/** \n * \u003cp\u003eGets the substring after the last occurrence of a separator. The separator is not returned.\u003c/p\u003e \u003cp\u003eA  {@code null} string input will return {@code null}. An empty (\"\") string input will return the empty string. An empty or  {@code null} separator will return the empty string ifthe input string is not  {@code null}.\u003c/p\u003e \u003cp\u003eIf nothing is found, the empty string is returned.\u003c/p\u003e \u003cpre\u003e StringUtils.substringAfterLast(null, *)      \u003d null StringUtils.substringAfterLast(\"\", *)        \u003d \"\" StringUtils.substringAfterLast(*, \"\")        \u003d \"\" StringUtils.substringAfterLast(*, null)      \u003d \"\" StringUtils.substringAfterLast(\"abc\", \"a\")   \u003d \"bc\" StringUtils.substringAfterLast(\"abcba\", \"b\") \u003d \"a\" StringUtils.substringAfterLast(\"abc\", \"c\")   \u003d \"\" StringUtils.substringAfterLast(\"a\", \"a\")     \u003d \"\" StringUtils.substringAfterLast(\"a\", \"z\")     \u003d \"\" \u003c/pre\u003e\n * @param str  the String to get a substring from, may be null\n * @param separator  the String to search for, may be null\n * @return the substring after the last occurrence of the separator,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringBetween#2401",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String)",
    "snippet": "public static String substringBetween(String str, String tag) {\n        return substringBetween(str, tag, tag);\n    }",
    "begin_line": 2401,
    "end_line": 2403,
    "comment": "/** \n * \u003cp\u003eGets the String that is nested in between two instances of the same String.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} tag returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.substringBetween(null, *)            \u003d null StringUtils.substringBetween(\"\", \"\")             \u003d \"\" StringUtils.substringBetween(\"\", \"tag\")          \u003d null StringUtils.substringBetween(\"tagabctag\", null)  \u003d null StringUtils.substringBetween(\"tagabctag\", \"\")    \u003d \"\" StringUtils.substringBetween(\"tagabctag\", \"tag\") \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String containing the substring, may be null\n * @param tag  the String before and after the substring, may be null\n * @return the substring, {@code null} if no match\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringBetween#2432",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static String substringBetween(String str, String open, String close) {\n        if (str \u003d\u003d null || open \u003d\u003d null || close \u003d\u003d null) {\n            return null;\n        }\n        int start \u003d str.indexOf(open);\n        if (start !\u003d INDEX_NOT_FOUND) {\n            int end \u003d str.indexOf(close, start + open.length());\n            if (end !\u003d INDEX_NOT_FOUND) {\n                return str.substring(start + open.length(), end);\n            }\n        }\n        return null;\n    }",
    "begin_line": 2432,
    "end_line": 2444,
    "comment": "/** \n * \u003cp\u003eGets the String that is nested in between two Strings. Only the first match is returned.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty (\"\") open and close returns an empty string.\u003c/p\u003e \u003cpre\u003e StringUtils.substringBetween(\"wx[b]yz\", \"[\", \"]\") \u003d \"b\" StringUtils.substringBetween(null, *, *)          \u003d null StringUtils.substringBetween(*, null, *)          \u003d null StringUtils.substringBetween(*, *, null)          \u003d null StringUtils.substringBetween(\"\", \"\", \"\")          \u003d \"\" StringUtils.substringBetween(\"\", \"\", \"]\")         \u003d null StringUtils.substringBetween(\"\", \"[\", \"]\")        \u003d null StringUtils.substringBetween(\"yabcz\", \"\", \"\")     \u003d \"\" StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   \u003d \"abc\" StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String containing the substring, may be null\n * @param open  the String before the substring, may be null\n * @param close  the String after the substring, may be null\n * @return the substring, {@code null} if no match\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.substringsBetween#2468",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static String[] substringsBetween(String str, String open, String close) {\n        if (str \u003d\u003d null || isEmpty(open) || isEmpty(close)) {\n            return null;\n        }\n        int strLen \u003d str.length();\n        if (strLen \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        int closeLen \u003d close.length();\n        int openLen \u003d open.length();\n        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n        int pos \u003d 0;\n        while (pos \u003c (strLen - closeLen)) {\n            int start \u003d str.indexOf(open, pos);\n            if (start \u003c 0) {\n                break;\n            }\n            start +\u003d openLen;\n            int end \u003d str.indexOf(close, start);\n            if (end \u003c 0) {\n                break;\n            }\n            list.add(str.substring(start, end));\n            pos \u003d end + closeLen;\n        }\n        if (list.isEmpty()) {\n            return null;\n        }\n        return list.toArray(new String [list.size()]);\n    }",
    "begin_line": 2468,
    "end_line": 2497,
    "comment": "/** \n * \u003cp\u003eSearches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty (\"\") open/close returns  {@code null} (no match).\u003c/p\u003e\u003cpre\u003e StringUtils.substringsBetween(\"[a][b][c]\", \"[\", \"]\") \u003d [\"a\",\"b\",\"c\"] StringUtils.substringsBetween(null, *, *)            \u003d null StringUtils.substringsBetween(*, null, *)            \u003d null StringUtils.substringsBetween(*, *, null)            \u003d null StringUtils.substringsBetween(\"\", \"[\", \"]\")          \u003d [] \u003c/pre\u003e\n * @param str  the String containing the substrings, null returns null, empty returns empty\n * @param open  the String identifying the start of the substring, empty returns null\n * @param close  the String identifying the end of the substring, empty returns null\n * @return a String Array of substrings, or {@code null} if no match\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.split#2526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.split(java.lang.String)",
    "snippet": "public static String[] split(String str) {\n        return split(str, null, -1);\n    }",
    "begin_line": 2526,
    "end_line": 2528,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, using whitespace as the separator. Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.split(null)       \u003d null StringUtils.split(\"\")         \u003d [] StringUtils.split(\"abc def\")  \u003d [\"abc\", \"def\"] StringUtils.split(\"abc  def\") \u003d [\"abc\", \"def\"] StringUtils.split(\" abc \")    \u003d [\"abc\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @return an array of parsed Strings, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.split#2554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.split(java.lang.String, char)",
    "snippet": "public static String[] split(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, false);\n    }",
    "begin_line": 2554,
    "end_line": 2556,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator specified. This is an alternative to using StringTokenizer.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.split(null, *)         \u003d null StringUtils.split(\"\", *)           \u003d [] StringUtils.split(\"a.b.c\", \u0027.\u0027)    \u003d [\"a\", \"b\", \"c\"] StringUtils.split(\"a..b.c\", \u0027.\u0027)   \u003d [\"a\", \"b\", \"c\"] StringUtils.split(\"a:b:c\", \u0027.\u0027)    \u003d [\"a:b:c\"] StringUtils.split(\"a b c\", \u0027 \u0027)    \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separatorChar  the character used as the delimiter\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.split#2583",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String)",
    "snippet": "public static String[] split(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, false);\n    }",
    "begin_line": 2583,
    "end_line": 2585,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separators specified. This is an alternative to using StringTokenizer.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.split(null, *)         \u003d null StringUtils.split(\"\", *)           \u003d [] StringUtils.split(\"abc def\", null) \u003d [\"abc\", \"def\"] StringUtils.split(\"abc def\", \" \")  \u003d [\"abc\", \"def\"] StringUtils.split(\"abc  def\", \" \") \u003d [\"abc\", \"def\"] StringUtils.split(\"ab:cd:ef\", \":\") \u003d [\"ab\", \"cd\", \"ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace\n * @return an array of parsed Strings, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.split#2617",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String, int)",
    "snippet": "public static String[] split(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, false);\n    }",
    "begin_line": 2617,
    "end_line": 2619,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array with a maximum length, separators specified.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as one separator.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.\u003c/p\u003e\u003cp\u003eIf more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).\u003c/p\u003e \u003cpre\u003e StringUtils.split(null, *, *)            \u003d null StringUtils.split(\"\", *, *)              \u003d [] StringUtils.split(\"ab de fg\", null, 0)   \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.split(\"ab   de fg\", null, 0) \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.split(\"ab:cd:ef\", \":\", 0)    \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.split(\"ab:cd:ef\", \":\", 2)    \u003d [\"ab\", \"cd:ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace\n * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit\n * @return an array of parsed Strings, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByWholeSeparator#2644",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String)",
    "snippet": "public static String[] splitByWholeSeparator(String str, String separator) {\n        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;\n    }",
    "begin_line": 2644,
    "end_line": 2646,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator string specified.\u003c/p\u003e \u003cp\u003eThe separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.splitByWholeSeparator(null, *)               \u003d null StringUtils.splitByWholeSeparator(\"\", *)                 \u003d [] StringUtils.splitByWholeSeparator(\"ab de fg\", null)      \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparator(\"ab   de fg\", null)    \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\")       \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\") \u003d [\"ab\", \"cd\", \"ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace\n * @return an array of parsed Strings, {@code null} if null String was input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByWholeSeparator#2675",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int)",
    "snippet": "public static String[] splitByWholeSeparator( String str, String separator, int max ) {\n        return splitByWholeSeparatorWorker(str, separator, max, false);\n    }",
    "begin_line": 2675,
    "end_line": 2677,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.\u003c/p\u003e\u003cp\u003eThe separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.splitByWholeSeparator(null, *, *)               \u003d null StringUtils.splitByWholeSeparator(\"\", *, *)                 \u003d [] StringUtils.splitByWholeSeparator(\"ab de fg\", null, 0)      \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparator(\"ab   de fg\", null, 0)    \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\", 2)       \u003d [\"ab\", \"cd:ef\"] StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 5) \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 2) \u003d [\"ab\", \"cd-!-ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace\n * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.\n * @return an array of parsed Strings, {@code null} if null String was input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByWholeSeparatorPreserveAllTokens#2704",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)",
    "snippet": "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator) {\n        return splitByWholeSeparatorWorker(str, separator, -1, true);\n    }",
    "begin_line": 2704,
    "end_line": 2706,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator string specified. \u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               \u003d null StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *)                 \u003d [] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null)      \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null)    \u003d [\"ab\", \"\", \"\", \"de\", \"fg\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\")       \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\") \u003d [\"ab\", \"cd\", \"ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace\n * @return an array of parsed Strings, {@code null} if null String was input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByWholeSeparatorPreserveAllTokens#2737",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)",
    "snippet": "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max) {\n        return splitByWholeSeparatorWorker(str, separator, max, true);\n    }",
    "begin_line": 2737,
    "end_line": 2739,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.\u003c/p\u003e\u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               \u003d null StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *, *)                 \u003d [] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null, 0)      \u003d [\"ab\", \"de\", \"fg\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null, 0)    \u003d [\"ab\", \"\", \"\", \"de\", \"fg\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\", 2)       \u003d [\"ab\", \"cd:ef\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 5) \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 2) \u003d [\"ab\", \"cd-!-ef\"] \u003c/pre\u003e\n * @param str  the String to parse, may be null\n * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace\n * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.\n * @return an array of parsed Strings, {@code null} if null String was input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByWholeSeparatorWorker#2755",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean)",
    "snippet": "private static String[] splitByWholeSeparatorWorker(\n            String str, String separator, int max, boolean preserveAllTokens) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n\n        int len \u003d str.length();\n\n        if (len \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n\n        if ((separator \u003d\u003d null) || (EMPTY.equals(separator))) {\n            // Split on whitespace.\n            return splitWorker(str, null, max, preserveAllTokens);\n        }\n\n        int separatorLength \u003d separator.length();\n\n        ArrayList\u003cString\u003e substrings \u003d new ArrayList\u003cString\u003e();\n        int numberOfSubstrings \u003d 0;\n        int beg \u003d 0;\n        int end \u003d 0;\n        while (end \u003c len) {\n            end \u003d str.indexOf(separator, beg);\n\n            if (end \u003e -1) {\n                if (end \u003e beg) {\n                    numberOfSubstrings +\u003d 1;\n\n                    if (numberOfSubstrings \u003d\u003d max) {\n                        end \u003d len;\n                        substrings.add(str.substring(beg));\n                    } else {\n                        // The following is OK, because String.substring( beg, end ) excludes\n                        // the character at the position \u0027end\u0027.\n                        substrings.add(str.substring(beg, end));\n\n                        // Set the starting point for the next search.\n                        // The following is equivalent to beg \u003d end + (separatorLength - 1) + 1,\n                        // which is the right calculation:\n                        beg \u003d end + separatorLength;\n                    }\n                } else {\n                    // We found a consecutive occurrence of the separator, so skip it.\n                    if (preserveAllTokens) {\n                        numberOfSubstrings +\u003d 1;\n                        if (numberOfSubstrings \u003d\u003d max) {\n                            end \u003d len;\n                            substrings.add(str.substring(beg));\n                        } else {\n                            substrings.add(EMPTY);\n                        }\n                    }\n                    beg \u003d end + separatorLength;\n                }\n            } else {\n                // String.substring( beg ) goes from \u0027beg\u0027 to the end of the String.\n                substrings.add(str.substring(beg));\n                end \u003d len;\n            }\n        }\n\n        return substrings.toArray(new String[substrings.size()]);\n    }",
    "begin_line": 2755,
    "end_line": 2819,
    "comment": "/** \n * Performs the logic for the  {@code splitByWholeSeparatorPreserveAllTokens} methods.\n * @param str  the String to parse, may be {@code null}\n * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace\n * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.\n * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitPreserveAllTokens#2846",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String)",
    "snippet": "public static String[] splitPreserveAllTokens(String str) {\n        return splitWorker(str, null, -1, true);\n    }",
    "begin_line": 2846,
    "end_line": 2848,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer. Whitespace is defined by  {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.splitPreserveAllTokens(null)       \u003d null StringUtils.splitPreserveAllTokens(\"\")         \u003d [] StringUtils.splitPreserveAllTokens(\"abc def\")  \u003d [\"abc\", \"def\"] StringUtils.splitPreserveAllTokens(\"abc  def\") \u003d [\"abc\", \"\", \"def\"] StringUtils.splitPreserveAllTokens(\" abc \")    \u003d [\"\", \"abc\", \"\"] \u003c/pre\u003e\n * @param str  the String to parse, may be {@code null}\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitPreserveAllTokens#2882",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, char)",
    "snippet": "public static String[] splitPreserveAllTokens(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, true);\n    }",
    "begin_line": 2882,
    "end_line": 2884,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.splitPreserveAllTokens(null, *)         \u003d null StringUtils.splitPreserveAllTokens(\"\", *)           \u003d [] StringUtils.splitPreserveAllTokens(\"a.b.c\", \u0027.\u0027)    \u003d [\"a\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\"a..b.c\", \u0027.\u0027)   \u003d [\"a\", \"\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\"a:b:c\", \u0027.\u0027)    \u003d [\"a:b:c\"] StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) \u003d [\"a\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\"a b c\", \u0027 \u0027)    \u003d [\"a\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\"a b c \", \u0027 \u0027)   \u003d [\"a\", \"b\", \"c\", \"\"] StringUtils.splitPreserveAllTokens(\"a b c  \", \u0027 \u0027)   \u003d [\"a\", \"b\", \"c\", \"\", \"\"] StringUtils.splitPreserveAllTokens(\" a b c\", \u0027 \u0027)   \u003d [\"\", a\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\"  a b c\", \u0027 \u0027)  \u003d [\"\", \"\", a\", \"b\", \"c\"] StringUtils.splitPreserveAllTokens(\" a b c \", \u0027 \u0027)  \u003d [\"\", a\", \"b\", \"c\", \"\"] \u003c/pre\u003e\n * @param str  the String to parse, may be {@code null}\n * @param separatorChar  the character used as the delimiter,{@code null} splits on whitespace\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitWorker#2898",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean)",
    "snippet": "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        int len \u003d str.length();\n        if (len \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n        int i \u003d 0, start \u003d 0;\n        boolean match \u003d false;\n        boolean lastMatch \u003d false;\n        while (i \u003c len) {\n            if (str.charAt(i) \u003d\u003d separatorChar) {\n                if (match || preserveAllTokens) {\n                    list.add(str.substring(start, i));\n                    match \u003d false;\n                    lastMatch \u003d true;\n                }\n                start \u003d ++i;\n                continue;\n            }\n            lastMatch \u003d false;\n            match \u003d true;\n            i++;\n        }\n        if (match || (preserveAllTokens \u0026\u0026 lastMatch)) {\n            list.add(str.substring(start, i));\n        }\n        return list.toArray(new String[list.size()]);\n    }",
    "begin_line": 2898,
    "end_line": 2930,
    "comment": "/** \n * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that do not return amaximum array length.\n * @param str  the String to parse, may be {@code null}\n * @param separatorChar the separate character\n * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.\n * @return an array of parsed Strings, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitPreserveAllTokens#2965",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String)",
    "snippet": "public static String[] splitPreserveAllTokens(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, true);\n    }",
    "begin_line": 2965,
    "end_line": 2967,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array, separators specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.\u003c/p\u003e\u003cpre\u003e StringUtils.splitPreserveAllTokens(null, *)           \u003d null StringUtils.splitPreserveAllTokens(\"\", *)             \u003d [] StringUtils.splitPreserveAllTokens(\"abc def\", null)   \u003d [\"abc\", \"def\"] StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    \u003d [\"abc\", \"def\"] StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   \u003d [\"abc\", \"\", def\"] StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  \u003d [\"ab\", \"cd\", \"ef\", \"\"] StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") \u003d [\"ab\", \"cd\", \"ef\", \"\", \"\"] StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  \u003d [\"ab\", \"\", cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     \u003d [\"\", cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    \u003d [\"\", \"\", cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    \u003d [\"\", cd\", \"ef\", \"\"] \u003c/pre\u003e\n * @param str  the String to parse, may be {@code null}\n * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitPreserveAllTokens#3005",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int)",
    "snippet": "public static String[] splitPreserveAllTokens(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, true);\n    }",
    "begin_line": 3005,
    "end_line": 3007,
    "comment": "/** \n * \u003cp\u003eSplits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens created by adjacent separators.\u003c/p\u003e \u003cp\u003eThe separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. Adjacent separators are treated as one separator.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.\u003c/p\u003e\u003cp\u003eIf more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).\u003c/p\u003e \u003cpre\u003e StringUtils.splitPreserveAllTokens(null, *, *)            \u003d null StringUtils.splitPreserveAllTokens(\"\", *, *)              \u003d [] StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    \u003d [\"ab\", \"cd\", \"ef\"] StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    \u003d [\"ab\", \"cd:ef\"] StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) \u003d [\"ab\", \"  de fg\"] StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) \u003d [\"ab\", \"\", \" de fg\"] StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) \u003d [\"ab\", \"\", \"\", \"de fg\"] \u003c/pre\u003e\n * @param str  the String to parse, may be {@code null}\n * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace\n * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitWorker#3023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean)",
    "snippet": "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n        // Direct code is quicker than StringTokenizer.\n        // Also, StringTokenizer uses isSpace() not isWhitespace()\n\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        int len \u003d str.length();\n        if (len \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n        int sizePlus1 \u003d 1;\n        int i \u003d 0, start \u003d 0;\n        boolean match \u003d false;\n        boolean lastMatch \u003d false;\n        if (separatorChars \u003d\u003d null) {\n            // Null separator means use whitespace\n            while (i \u003c len) {\n                if (Character.isWhitespace(str.charAt(i))) {\n                    if (match || preserveAllTokens) {\n                        lastMatch \u003d true;\n                        if (sizePlus1++ \u003d\u003d max) {\n                            i \u003d len;\n                            lastMatch \u003d false;\n                        }\n                        list.add(str.substring(start, i));\n                        match \u003d false;\n                    }\n                    start \u003d ++i;\n                    continue;\n                }\n                lastMatch \u003d false;\n                match \u003d true;\n                i++;\n            }\n        } else if (separatorChars.length() \u003d\u003d 1) {\n            // Optimise 1 character case\n            char sep \u003d separatorChars.charAt(0);\n            while (i \u003c len) {\n                if (str.charAt(i) \u003d\u003d sep) {\n                    if (match || preserveAllTokens) {\n                        lastMatch \u003d true;\n                        if (sizePlus1++ \u003d\u003d max) {\n                            i \u003d len;\n                            lastMatch \u003d false;\n                        }\n                        list.add(str.substring(start, i));\n                        match \u003d false;\n                    }\n                    start \u003d ++i;\n                    continue;\n                }\n                lastMatch \u003d false;\n                match \u003d true;\n                i++;\n            }\n        } else {\n            // standard case\n            while (i \u003c len) {\n                if (separatorChars.indexOf(str.charAt(i)) \u003e\u003d 0) {\n                    if (match || preserveAllTokens) {\n                        lastMatch \u003d true;\n                        if (sizePlus1++ \u003d\u003d max) {\n                            i \u003d len;\n                            lastMatch \u003d false;\n                        }\n                        list.add(str.substring(start, i));\n                        match \u003d false;\n                    }\n                    start \u003d ++i;\n                    continue;\n                }\n                lastMatch \u003d false;\n                match \u003d true;\n                i++;\n            }\n        }\n        if (match || (preserveAllTokens \u0026\u0026 lastMatch)) {\n            list.add(str.substring(start, i));\n        }\n        return list.toArray(new String[list.size()]);\n    }",
    "begin_line": 3023,
    "end_line": 3106,
    "comment": "/** \n * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that return a maximum arraylength.\n * @param str  the String to parse, may be {@code null}\n * @param separatorChars the separate character\n * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit.\n * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.\n * @return an array of parsed Strings, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByCharacterType#3127",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String)",
    "snippet": "public static String[] splitByCharacterType(String str) {\n        return splitByCharacterType(str, false);\n    }",
    "begin_line": 3127,
    "end_line": 3129,
    "comment": "/** \n * \u003cp\u003eSplits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens. \u003cpre\u003e StringUtils.splitByCharacterType(null)         \u003d null StringUtils.splitByCharacterType(\"\")           \u003d [] StringUtils.splitByCharacterType(\"ab de fg\")   \u003d [\"ab\", \" \", \"de\", \" \", \"fg\"] StringUtils.splitByCharacterType(\"ab   de fg\") \u003d [\"ab\", \"   \", \"de\", \" \", \"fg\"] StringUtils.splitByCharacterType(\"ab:cd:ef\")   \u003d [\"ab\", \":\", \"cd\", \":\", \"ef\"] StringUtils.splitByCharacterType(\"number5\")    \u003d [\"number\", \"5\"] StringUtils.splitByCharacterType(\"fooBar\")     \u003d [\"foo\", \"B\", \"ar\"] StringUtils.splitByCharacterType(\"foo200Bar\")  \u003d [\"foo\", \"200\", \"B\", \"ar\"] StringUtils.splitByCharacterType(\"ASFRules\")   \u003d [\"ASFR\", \"ules\"] \u003c/pre\u003e\n * @param str the String to split, may be {@code null}\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByCharacterTypeCamelCase#3155",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(java.lang.String)",
    "snippet": "public static String[] splitByCharacterTypeCamelCase(String str) {\n        return splitByCharacterType(str, true);\n    }",
    "begin_line": 3155,
    "end_line": 3157,
    "comment": "/** \n * \u003cp\u003eSplits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: the character of type {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.\u003cpre\u003e StringUtils.splitByCharacterTypeCamelCase(null)         \u003d null StringUtils.splitByCharacterTypeCamelCase(\"\")           \u003d [] StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")   \u003d [\"ab\", \" \", \"de\", \" \", \"fg\"] StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\") \u003d [\"ab\", \"   \", \"de\", \" \", \"fg\"] StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")   \u003d [\"ab\", \":\", \"cd\", \":\", \"ef\"] StringUtils.splitByCharacterTypeCamelCase(\"number5\")    \u003d [\"number\", \"5\"] StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")     \u003d [\"foo\", \"Bar\"] StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")  \u003d [\"foo\", \"200\", \"Bar\"] StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")   \u003d [\"ASF\", \"Rules\"] \u003c/pre\u003e\n * @param str the String to split, may be {@code null}\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.splitByCharacterType#3173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String, boolean)",
    "snippet": "private static String[] splitByCharacterType(String str, boolean camelCase) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (str.length() \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        char[] c \u003d str.toCharArray();\n        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();\n        int tokenStart \u003d 0;\n        int currentType \u003d Character.getType(c[tokenStart]);\n        for (int pos \u003d tokenStart + 1; pos \u003c c.length; pos++) {\n            int type \u003d Character.getType(c[pos]);\n            if (type \u003d\u003d currentType) {\n                continue;\n            }\n            if (camelCase \u0026\u0026 type \u003d\u003d Character.LOWERCASE_LETTER \u0026\u0026 currentType \u003d\u003d Character.UPPERCASE_LETTER) {\n                int newTokenStart \u003d pos - 1;\n                if (newTokenStart !\u003d tokenStart) {\n                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));\n                    tokenStart \u003d newTokenStart;\n                }\n            } else {\n                list.add(new String(c, tokenStart, pos - tokenStart));\n                tokenStart \u003d pos;\n            }\n            currentType \u003d type;\n        }\n        list.add(new String(c, tokenStart, c.length - tokenStart));\n        return list.toArray(new String[list.size()]);\n    }",
    "begin_line": 3173,
    "end_line": 3203,
    "comment": "/** \n * \u003cp\u003eSplits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: if  {@code camelCase} is {@code true}, the character of type  {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.\n * @param str the String to split, may be {@code null}\n * @param camelCase whether to use so-called \"camel-case\" for letter types\n * @return an array of parsed Strings, {@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3229",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(T)",
    "snippet": "public static \u003cT\u003e String join(T... elements) {\n        return join(elements, null);\n    }",
    "begin_line": 3229,
    "end_line": 3231,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided array into a single String containing the provided list of elements.\u003c/p\u003e \u003cp\u003eNo separator is added to the joined String. Null objects or empty strings within the array are represented by empty strings.\u003c/p\u003e \u003cpre\u003e StringUtils.join(null)            \u003d null StringUtils.join([])              \u003d \"\" StringUtils.join([null])          \u003d \"\" StringUtils.join([\"a\", \"b\", \"c\"]) \u003d \"abc\" StringUtils.join([null, \"\", \"a\"]) \u003d \"a\" \u003c/pre\u003e\n * @param \u003c T \u003e the specific type of values to join together\n * @param elements  the values to join together, may be null\n * @return the joined String, {@code null} if null array input\n * @since 2.0\n * @since 3.0 Changed signature to use varargs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3255",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char)",
    "snippet": "public static String join(Object[] array, char separator) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n\n        return join(array, separator, 0, array.length);\n    }",
    "begin_line": 3255,
    "end_line": 3261,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided array into a single String containing the provided list of elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.\u003c/p\u003e \u003cpre\u003e StringUtils.join(null, *)               \u003d null StringUtils.join([], *)                 \u003d \"\" StringUtils.join([null], *)             \u003d \"\" StringUtils.join([\"a\", \"b\", \"c\"], \u0027;\u0027)  \u003d \"a;b;c\" StringUtils.join([\"a\", \"b\", \"c\"], null) \u003d \"abc\" StringUtils.join([null, \"\", \"a\"], \u0027;\u0027)  \u003d \";;a\" \u003c/pre\u003e\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use\n * @return the joined String, {@code null} if null array input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3289",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int)",
    "snippet": "public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        int noOfItems \u003d (endIndex - startIndex);\n        if (noOfItems \u003c\u003d 0) {\n            return EMPTY;\n        }\n        \n        StringBuilder buf \u003d new StringBuilder((array[startIndex] \u003d\u003d null ? 16 : array[startIndex].toString().length()) + 1);\n\n        for (int i \u003d startIndex; i \u003c endIndex; i++) {\n            if (i \u003e startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] !\u003d null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }",
    "begin_line": 3289,
    "end_line": 3309,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided array into a single String containing the provided list of elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.\u003c/p\u003e \u003cpre\u003e StringUtils.join(null, *)               \u003d null StringUtils.join([], *)                 \u003d \"\" StringUtils.join([null], *)             \u003d \"\" StringUtils.join([\"a\", \"b\", \"c\"], \u0027;\u0027)  \u003d \"a;b;c\" StringUtils.join([\"a\", \"b\", \"c\"], null) \u003d \"abc\" StringUtils.join([null, \"\", \"a\"], \u0027;\u0027)  \u003d \";;a\" \u003c/pre\u003e\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use\n * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array\n * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array\n * @return the joined String, {@code null} if null array input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3334",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String)",
    "snippet": "public static String join(Object[] array, String separator) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return join(array, separator, 0, array.length);\n    }",
    "begin_line": 3334,
    "end_line": 3339,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided array into a single String containing the provided list of elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. A  {@code null} separator is the same as an empty String (\"\").Null objects or empty strings within the array are represented by empty strings.\u003c/p\u003e \u003cpre\u003e StringUtils.join(null, *)                \u003d null StringUtils.join([], *)                  \u003d \"\" StringUtils.join([null], *)              \u003d \"\" StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  \u003d \"a--b--c\" StringUtils.join([\"a\", \"b\", \"c\"], null)  \u003d \"abc\" StringUtils.join([\"a\", \"b\", \"c\"], \"\")    \u003d \"abc\" StringUtils.join([null, \"\", \"a\"], \u0027,\u0027)   \u003d \",,a\" \u003c/pre\u003e\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use, null treated as \"\"\n * @return the joined String, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3368",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int)",
    "snippet": "public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (separator \u003d\u003d null) {\n            separator \u003d EMPTY;\n        }\n\n        // endIndex - startIndex \u003e 0:   Len \u003d NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int noOfItems \u003d (endIndex - startIndex);\n        if (noOfItems \u003c\u003d 0) {\n            return EMPTY;\n        }\n\n        StringBuilder buf \u003d new StringBuilder((array[startIndex] \u003d\u003d null ? 16 : array[startIndex].toString().length()) + separator.length());\n\n        for (int i \u003d startIndex; i \u003c endIndex; i++) {\n            if (i \u003e startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] !\u003d null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }",
    "begin_line": 3368,
    "end_line": 3394,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided array into a single String containing the provided list of elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. A  {@code null} separator is the same as an empty String (\"\").Null objects or empty strings within the array are represented by empty strings.\u003c/p\u003e \u003cpre\u003e StringUtils.join(null, *)                \u003d null StringUtils.join([], *)                  \u003d \"\" StringUtils.join([null], *)              \u003d \"\" StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  \u003d \"a--b--c\" StringUtils.join([\"a\", \"b\", \"c\"], null)  \u003d \"abc\" StringUtils.join([\"a\", \"b\", \"c\"], \"\")    \u003d \"abc\" StringUtils.join([null, \"\", \"a\"], \u0027,\u0027)   \u003d \",,a\" \u003c/pre\u003e\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use, null treated as \"\"\n * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array\n * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array\n * @return the joined String, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3410",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.util.Iterator\u003c?\u003e, char)",
    "snippet": "public static String join(Iterator\u003c?\u003e iterator, char separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator \u003d\u003d null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first \u003d iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuilder buf \u003d new StringBuilder(256); // Java default is 16, probably too small\n        if (first !\u003d null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            buf.append(separator);\n            Object obj \u003d iterator.next();\n            if (obj !\u003d null) {\n                buf.append(obj);\n            }\n        }\n\n        return buf.toString();\n    }",
    "begin_line": 3410,
    "end_line": 3439,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.\u003c/p\u003e \u003cp\u003eSee the examples here:  {@link #join(Object[],char)}. \u003c/p\u003e\n * @param iterator  the {@code Iterator} of values to join together, may be null\n * @param separator  the separator character to use\n * @return the joined String, {@code null} if null iterator input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3454",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.util.Iterator\u003c?\u003e, java.lang.String)",
    "snippet": "public static String join(Iterator\u003c?\u003e iterator, String separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator \u003d\u003d null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first \u003d iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuilder buf \u003d new StringBuilder(256); // Java default is 16, probably too small\n        if (first !\u003d null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            if (separator !\u003d null) {\n                buf.append(separator);\n            }\n            Object obj \u003d iterator.next();\n            if (obj !\u003d null) {\n                buf.append(obj);\n            }\n        }\n        return buf.toString();\n    }",
    "begin_line": 3454,
    "end_line": 3484,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. A  {@code null} separator is the same as an empty String (\"\").\u003c/p\u003e\u003cp\u003eSee the examples here:  {@link #join(Object[],String)}. \u003c/p\u003e\n * @param iterator  the {@code Iterator} of values to join together, may be null\n * @param separator  the separator character to use, null treated as \"\"\n * @return the joined String, {@code null} if null iterator input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3500",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Iterable\u003c?\u003e, char)",
    "snippet": "public static String join(Iterable\u003c?\u003e iterable, char separator) {\n        if (iterable \u003d\u003d null) {\n            return null;\n        }\n        return join(iterable.iterator(), separator);\n    }",
    "begin_line": 3500,
    "end_line": 3505,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.\u003c/p\u003e \u003cp\u003eSee the examples here:  {@link #join(Object[],char)}. \u003c/p\u003e\n * @param iterable  the {@code Iterable} providing the values to join together, may be null\n * @param separator  the separator character to use\n * @return the joined String, {@code null} if null iterator input\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.join#3521",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Iterable\u003c?\u003e, java.lang.String)",
    "snippet": "public static String join(Iterable\u003c?\u003e iterable, String separator) {\n        if (iterable \u003d\u003d null) {\n            return null;\n        }\n        return join(iterable.iterator(), separator);\n    }",
    "begin_line": 3521,
    "end_line": 3526,
    "comment": "/** \n * \u003cp\u003eJoins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.\u003c/p\u003e \u003cp\u003eNo delimiter is added before or after the list. A  {@code null} separator is the same as an empty String (\"\").\u003c/p\u003e\u003cp\u003eSee the examples here:  {@link #join(Object[],String)}. \u003c/p\u003e\n * @param iterable  the {@code Iterable} providing the values to join together, may be null\n * @param separator  the separator character to use, null treated as \"\"\n * @return the joined String, {@code null} if null iterator input\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.deleteWhitespace#3544",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String)",
    "snippet": "public static String deleteWhitespace(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        int sz \u003d str.length();\n        char[] chs \u003d new char[sz];\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                chs[count++] \u003d str.charAt(i);\n            }\n        }\n        if (count \u003d\u003d sz) {\n            return str;\n        }\n        return new String(chs, 0, count);\n    }",
    "begin_line": 3544,
    "end_line": 3560,
    "comment": "/** \n * \u003cp\u003eDeletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.\u003c/p\u003e \u003cpre\u003e StringUtils.deleteWhitespace(null)         \u003d null StringUtils.deleteWhitespace(\"\")           \u003d \"\" StringUtils.deleteWhitespace(\"abc\")        \u003d \"abc\" StringUtils.deleteWhitespace(\"   ab  c  \") \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to delete whitespace from, may be null\n * @return the String without whitespaces, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeStart#3588",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String)",
    "snippet": "public static String removeStart(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.startsWith(remove)){\n            return str.substring(remove.length());\n        }\n        return str;\n    }",
    "begin_line": 3588,
    "end_line": 3596,
    "comment": "/** \n * \u003cp\u003eRemoves a substring only if it is at the begining of a source string, otherwise returns the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string. A  {@code null} search string will return the source string.\u003c/p\u003e\u003cpre\u003e StringUtils.removeStart(null, *)      \u003d null StringUtils.removeStart(\"\", *)        \u003d \"\" StringUtils.removeStart(*, null)      \u003d  StringUtils.removeStart(\"www.domain.com\", \"www.\")   \u003d \"domain.com\" StringUtils.removeStart(\"domain.com\", \"www.\")       \u003d \"domain.com\" StringUtils.removeStart(\"www.domain.com\", \"domain\") \u003d \"www.domain.com\" StringUtils.removeStart(\"abc\", \"\")    \u003d \"abc\" \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the String to search for and remove, may be null\n * @return the substring with the string removed if found,{@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeStartIgnoreCase#3623",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String)",
    "snippet": "public static String removeStartIgnoreCase(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (startsWithIgnoreCase(str, remove)) {\n            return str.substring(remove.length());\n        }\n        return str;\n    }",
    "begin_line": 3623,
    "end_line": 3631,
    "comment": "/** \n * \u003cp\u003eCase insensitive removal of a substring if it is at the begining of a source string, otherwise returns the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string. A  {@code null} search string will return the source string.\u003c/p\u003e\u003cpre\u003e StringUtils.removeStartIgnoreCase(null, *)      \u003d null StringUtils.removeStartIgnoreCase(\"\", *)        \u003d \"\" StringUtils.removeStartIgnoreCase(*, null)      \u003d  StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\")   \u003d \"domain.com\" StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")   \u003d \"domain.com\" StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\")       \u003d \"domain.com\" StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"domain\") \u003d \"www.domain.com\" StringUtils.removeStartIgnoreCase(\"abc\", \"\")    \u003d \"abc\" \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the String to search for (case insensitive) and remove, may be null\n * @return the substring with the string removed if found,{@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeEnd#3657",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String)",
    "snippet": "public static String removeEnd(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.endsWith(remove)) {\n            return str.substring(0, str.length() - remove.length());\n        }\n        return str;\n    }",
    "begin_line": 3657,
    "end_line": 3665,
    "comment": "/** \n * \u003cp\u003eRemoves a substring only if it is at the end of a source string, otherwise returns the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string. A  {@code null} search string will return the source string.\u003c/p\u003e\u003cpre\u003e StringUtils.removeEnd(null, *)      \u003d null StringUtils.removeEnd(\"\", *)        \u003d \"\" StringUtils.removeEnd(*, null)      \u003d  StringUtils.removeEnd(\"www.domain.com\", \".com.\")  \u003d \"www.domain.com\" StringUtils.removeEnd(\"www.domain.com\", \".com\")   \u003d \"www.domain\" StringUtils.removeEnd(\"www.domain.com\", \"domain\") \u003d \"www.domain.com\" StringUtils.removeEnd(\"abc\", \"\")    \u003d \"abc\" \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the String to search for and remove, may be null\n * @return the substring with the string removed if found,{@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.removeEndIgnoreCase#3693",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String)",
    "snippet": "public static String removeEndIgnoreCase(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (endsWithIgnoreCase(str, remove)) {\n            return str.substring(0, str.length() - remove.length());\n        }\n        return str;\n    }",
    "begin_line": 3693,
    "end_line": 3701,
    "comment": "/** \n * \u003cp\u003eCase insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string. A  {@code null} search string will return the source string.\u003c/p\u003e\u003cpre\u003e StringUtils.removeEndIgnoreCase(null, *)      \u003d null StringUtils.removeEndIgnoreCase(\"\", *)        \u003d \"\" StringUtils.removeEndIgnoreCase(*, null)      \u003d  StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com.\")  \u003d \"www.domain.com\" StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\")   \u003d \"www.domain\" StringUtils.removeEndIgnoreCase(\"www.domain.com\", \"domain\") \u003d \"www.domain.com\" StringUtils.removeEndIgnoreCase(\"abc\", \"\")    \u003d \"abc\" StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\") \u003d \"www.domain\") StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\") \u003d \"www.domain\") \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the String to search for (case insensitive) and remove, may be null\n * @return the substring with the string removed if found,{@code null} if null String input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.remove#3726",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.remove(java.lang.String, java.lang.String)",
    "snippet": "public static String remove(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        return replace(str, remove, EMPTY, -1);\n    }",
    "begin_line": 3726,
    "end_line": 3731,
    "comment": "/** \n * \u003cp\u003eRemoves all occurrences of a substring from within the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string. A  {@code null} remove string will return the source string.An empty (\"\") remove string will return the source string.\u003c/p\u003e \u003cpre\u003e StringUtils.remove(null, *)        \u003d null StringUtils.remove(\"\", *)          \u003d \"\" StringUtils.remove(*, null)        \u003d  StringUtils.remove(*, \"\")          \u003d  StringUtils.remove(\"queued\", \"ue\") \u003d \"qd\" StringUtils.remove(\"queued\", \"zz\") \u003d \"queued\" \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the String to search for and remove, may be null\n * @return the substring with the string removed if found,{@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.remove#3752",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.remove(java.lang.String, char)",
    "snippet": "public static String remove(String str, char remove) {\n        if (isEmpty(str) || str.indexOf(remove) \u003d\u003d INDEX_NOT_FOUND) {\n            return str;\n        }\n        char[] chars \u003d str.toCharArray();\n        int pos \u003d 0;\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (chars[i] !\u003d remove) {\n                chars[pos++] \u003d chars[i];\n            }\n        }\n        return new String(chars, 0, pos);\n    }",
    "begin_line": 3752,
    "end_line": 3764,
    "comment": "/** \n * \u003cp\u003eRemoves all occurrences of a character from within the source string.\u003c/p\u003e \u003cp\u003eA  {@code null} source string will return {@code null}. An empty (\"\") source string will return the empty string.\u003c/p\u003e \u003cpre\u003e StringUtils.remove(null, *)       \u003d null StringUtils.remove(\"\", *)         \u003d \"\" StringUtils.remove(\"queued\", \u0027u\u0027) \u003d \"qeed\" StringUtils.remove(\"queued\", \u0027z\u0027) \u003d \"queued\" \u003c/pre\u003e\n * @param str  the source String to search, may be null\n * @param remove  the char to search for and remove, may be null\n * @return the substring with the char removed if found,{@code null} if null String input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceOnce#3791",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static String replaceOnce(String text, String searchString, String replacement) {\n        return replace(text, searchString, replacement, 1);\n    }",
    "begin_line": 3791,
    "end_line": 3793,
    "comment": "/** \n * \u003cp\u003eReplaces a String with another String inside a larger String, once.\u003c/p\u003e \u003cp\u003eA  {@code null} reference passed to this method is a no-op.\u003c/p\u003e\u003cpre\u003e StringUtils.replaceOnce(null, *, *)        \u003d null StringUtils.replaceOnce(\"\", *, *)          \u003d \"\" StringUtils.replaceOnce(\"any\", null, *)    \u003d \"any\" StringUtils.replaceOnce(\"any\", *, null)    \u003d \"any\" StringUtils.replaceOnce(\"any\", \"\", *)      \u003d \"any\" StringUtils.replaceOnce(\"aba\", \"a\", null)  \u003d \"aba\" StringUtils.replaceOnce(\"aba\", \"a\", \"\")    \u003d \"ba\" StringUtils.replaceOnce(\"aba\", \"a\", \"z\")   \u003d \"zba\" \u003c/pre\u003e\n * @see #replace(String text,String searchString,String replacement,int max)\n * @param text  text to search and replace in, may be null\n * @param searchString  the String to search for, may be null\n * @param replacement  the String to replace with, may be null\n * @return the text with any replacements processed,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replace#3818",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static String replace(String text, String searchString, String replacement) {\n        return replace(text, searchString, replacement, -1);\n    }",
    "begin_line": 3818,
    "end_line": 3820,
    "comment": "/** \n * \u003cp\u003eReplaces all occurrences of a String within another String.\u003c/p\u003e \u003cp\u003eA  {@code null} reference passed to this method is a no-op.\u003c/p\u003e\u003cpre\u003e StringUtils.replace(null, *, *)        \u003d null StringUtils.replace(\"\", *, *)          \u003d \"\" StringUtils.replace(\"any\", null, *)    \u003d \"any\" StringUtils.replace(\"any\", *, null)    \u003d \"any\" StringUtils.replace(\"any\", \"\", *)      \u003d \"any\" StringUtils.replace(\"aba\", \"a\", null)  \u003d \"aba\" StringUtils.replace(\"aba\", \"a\", \"\")    \u003d \"b\" StringUtils.replace(\"aba\", \"a\", \"z\")   \u003d \"zbz\" \u003c/pre\u003e\n * @see #replace(String text,String searchString,String replacement,int max)\n * @param text  text to search and replace in, may be null\n * @param searchString  the String to search for, may be null\n * @param replacement  the String to replace it with, may be null\n * @return the text with any replacements processed,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replace#3850",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int)",
    "snippet": "public static String replace(String text, String searchString, String replacement, int max) {\n        if (isEmpty(text) || isEmpty(searchString) || replacement \u003d\u003d null || max \u003d\u003d 0) {\n            return text;\n        }\n        int start \u003d 0;\n        int end \u003d text.indexOf(searchString, start);\n        if (end \u003d\u003d INDEX_NOT_FOUND) {\n            return text;\n        }\n        int replLength \u003d searchString.length();\n        int increase \u003d replacement.length() - replLength;\n        increase \u003d (increase \u003c 0 ? 0 : increase);\n        increase *\u003d (max \u003c 0 ? 16 : (max \u003e 64 ? 64 : max));\n        StringBuilder buf \u003d new StringBuilder(text.length() + increase);\n        while (end !\u003d INDEX_NOT_FOUND) {\n            buf.append(text.substring(start, end)).append(replacement);\n            start \u003d end + replLength;\n            if (--max \u003d\u003d 0) {\n                break;\n            }\n            end \u003d text.indexOf(searchString, start);\n        }\n        buf.append(text.substring(start));\n        return buf.toString();\n    }",
    "begin_line": 3850,
    "end_line": 3874,
    "comment": "/** \n * \u003cp\u003eReplaces a String with another String inside a larger String, for the first  {@code max} values of the search String.\u003c/p\u003e\u003cp\u003eA  {@code null} reference passed to this method is a no-op.\u003c/p\u003e\u003cpre\u003e StringUtils.replace(null, *, *, *)         \u003d null StringUtils.replace(\"\", *, *, *)           \u003d \"\" StringUtils.replace(\"any\", null, *, *)     \u003d \"any\" StringUtils.replace(\"any\", *, null, *)     \u003d \"any\" StringUtils.replace(\"any\", \"\", *, *)       \u003d \"any\" StringUtils.replace(\"any\", *, *, 0)        \u003d \"any\" StringUtils.replace(\"abaa\", \"a\", null, -1) \u003d \"abaa\" StringUtils.replace(\"abaa\", \"a\", \"\", -1)   \u003d \"b\" StringUtils.replace(\"abaa\", \"a\", \"z\", 0)   \u003d \"abaa\" StringUtils.replace(\"abaa\", \"a\", \"z\", 1)   \u003d \"zbaa\" StringUtils.replace(\"abaa\", \"a\", \"z\", 2)   \u003d \"zbza\" StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  \u003d \"zbzz\" \u003c/pre\u003e\n * @param text  text to search and replace in, may be null\n * @param searchString  the String to search for, may be null\n * @param replacement  the String to replace it with, may be null\n * @param max  maximum number of values to replace, or {@code -1} if no maximum\n * @return the text with any replacements processed,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceEach#3915",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[])",
    "snippet": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n        return replaceEach(text, searchList, replacementList, false, 0);\n    }",
    "begin_line": 3915,
    "end_line": 3917,
    "comment": "/** \n * \u003cp\u003e Replaces all occurrences of Strings within another String. \u003c/p\u003e \u003cp\u003e A  {@code null} reference passed to this method is a no-op, or ifany \"search string\" or \"string to replace\" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. \u003c/p\u003e \u003cpre\u003e StringUtils.replaceEach(null, *, *)        \u003d null StringUtils.replaceEach(\"\", *, *)          \u003d \"\" StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\" StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\" StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\" (example of how it does not repeat) StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\" \u003c/pre\u003e\n * @param text text to search and replace in, no-op if null\n * @param searchList the Strings to search for, no-op if null\n * @param replacementList the Strings to replace them with, no-op if null\n * @return the text with any replacements processed, {@code null} ifnull String input\n * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceEachRepeatedly#3964",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])",
    "snippet": "public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList) {\n        // timeToLive should be 0 if not used or nothing to replace, else it\u0027s\n        // the length of the replace array\n        int timeToLive \u003d searchList \u003d\u003d null ? 0 : searchList.length;\n        return replaceEach(text, searchList, replacementList, true, timeToLive);\n    }",
    "begin_line": 3964,
    "end_line": 3969,
    "comment": "/** \n * \u003cp\u003e Replaces all occurrences of Strings within another String. \u003c/p\u003e \u003cp\u003e A  {@code null} reference passed to this method is a no-op, or ifany \"search string\" or \"string to replace\" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. \u003c/p\u003e \u003cpre\u003e StringUtils.replaceEach(null, *, *, *) \u003d null StringUtils.replaceEach(\"\", *, *, *) \u003d \"\" StringUtils.replaceEach(\"aba\", null, null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[0], null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", null, new String[0], *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) \u003d \"b\" StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) \u003d \"aba\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) \u003d \"wcte\" (example of how it repeats) StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) \u003d \"dcte\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) \u003d \"tcte\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, true) \u003d IllegalArgumentException StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, false) \u003d \"dcabe\" \u003c/pre\u003e\n * @param text text to search and replace in, no-op if null\n * @param searchList the Strings to search for, no-op if null\n * @param replacementList the Strings to replace them with, no-op if null\n * @return the text with any replacements processed, {@code null} ifnull String input\n * @throws IllegalArgumentException if the search is repeating and there is an endless loop due to outputs of one being inputs to another\n * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceEach#4019",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int)",
    "snippet": "private static String replaceEach(\n            String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive) {\n\n        // mchyzer Performance note: This creates very few new objects (one major goal)\n        // let me know if there are performance requests, we can create a harness to measure\n\n        if (text \u003d\u003d null || text.length() \u003d\u003d 0 || searchList \u003d\u003d null ||\n                searchList.length \u003d\u003d 0 || replacementList \u003d\u003d null || replacementList.length \u003d\u003d 0) {\n            return text;\n        }\n\n        // if recursing, this shouldnt be less than 0\n        if (timeToLive \u003c 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n\n        int searchLength \u003d searchList.length;\n        int replacementLength \u003d replacementList.length;\n\n        // make sure lengths are ok, these need to be equal\n        if (searchLength !\u003d replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don\u0027t match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n\n        // keep track of which still have matches\n        boolean[] noMoreMatchesForReplIndex \u003d new boolean[searchLength];\n\n        // index on index that the match was found\n        int textIndex \u003d -1;\n        int replaceIndex \u003d -1;\n        int tempIndex \u003d -1;\n\n        // index of replace array that will replace the search string found\n        // NOTE: logic duplicated below START\n        for (int i \u003d 0; i \u003c searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] \u003d\u003d null ||\n                    searchList[i].length() \u003d\u003d 0 || replacementList[i] \u003d\u003d null) {\n                continue;\n            }\n            tempIndex \u003d text.indexOf(searchList[i]);\n\n            // see if we need to keep searching for this\n            if (tempIndex \u003d\u003d -1) {\n                noMoreMatchesForReplIndex[i] \u003d true;\n            } else {\n                if (textIndex \u003d\u003d -1 || tempIndex \u003c textIndex) {\n                    textIndex \u003d tempIndex;\n                    replaceIndex \u003d i;\n                }\n            }\n        }\n        // NOTE: logic mostly below END\n\n        // no search strings found, we are done\n        if (textIndex \u003d\u003d -1) {\n            return text;\n        }\n\n        int start \u003d 0;\n\n        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n        int increase \u003d 0;\n\n        // count the replacement text elements that are larger than their corresponding text being replaced\n        for (int i \u003d 0; i \u003c searchList.length; i++) {\n            if (searchList[i] \u003d\u003d null || replacementList[i] \u003d\u003d null) {\n                continue;\n            }\n            int greater \u003d replacementList[i].length() - searchList[i].length();\n            if (greater \u003e 0) {\n                increase +\u003d 3 * greater; // assume 3 matches\n            }\n        }\n        // have upper-bound at 20% increase, then let Java take over\n        increase \u003d Math.min(increase, text.length() / 5);\n\n        StringBuilder buf \u003d new StringBuilder(text.length() + increase);\n\n        while (textIndex !\u003d -1) {\n\n            for (int i \u003d start; i \u003c textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n\n            start \u003d textIndex + searchList[replaceIndex].length();\n\n            textIndex \u003d -1;\n            replaceIndex \u003d -1;\n            tempIndex \u003d -1;\n            // find the next earliest match\n            // NOTE: logic mostly duplicated above START\n            for (int i \u003d 0; i \u003c searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] \u003d\u003d null ||\n                        searchList[i].length() \u003d\u003d 0 || replacementList[i] \u003d\u003d null) {\n                    continue;\n                }\n                tempIndex \u003d text.indexOf(searchList[i], start);\n\n                // see if we need to keep searching for this\n                if (tempIndex \u003d\u003d -1) {\n                    noMoreMatchesForReplIndex[i] \u003d true;\n                } else {\n                    if (textIndex \u003d\u003d -1 || tempIndex \u003c textIndex) {\n                        textIndex \u003d tempIndex;\n                        replaceIndex \u003d i;\n                    }\n                }\n            }\n            // NOTE: logic duplicated above END\n\n        }\n        int textLength \u003d text.length();\n        for (int i \u003d start; i \u003c textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result \u003d buf.toString();\n        if (!repeat) {\n            return result;\n        }\n\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }",
    "begin_line": 4019,
    "end_line": 4144,
    "comment": "/** \n * \u003cp\u003e Replaces all occurrences of Strings within another String. \u003c/p\u003e \u003cp\u003e A  {@code null} reference passed to this method is a no-op, or ifany \"search string\" or \"string to replace\" is null, that replace will be ignored. \u003c/p\u003e \u003cpre\u003e StringUtils.replaceEach(null, *, *, *) \u003d null StringUtils.replaceEach(\"\", *, *, *) \u003d \"\" StringUtils.replaceEach(\"aba\", null, null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[0], null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", null, new String[0], *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) \u003d \"aba\" StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) \u003d \"b\" StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) \u003d \"aba\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) \u003d \"wcte\" (example of how it repeats) StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) \u003d \"dcte\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) \u003d \"tcte\" StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, *) \u003d IllegalArgumentException \u003c/pre\u003e\n * @param text text to search and replace in, no-op if null\n * @param searchList the Strings to search for, no-op if null\n * @param replacementList the Strings to replace them with, no-op if null\n * @param repeat if true, then replace repeatedlyuntil there are no more possible replacements or timeToLive \u003c 0\n * @param timeToLive if less than 0 then there is a circular reference and endless loop\n * @return the text with any replacements processed, {@code null} ifnull String input\n * @throws IllegalArgumentException if the search is repeating and there is an endless loop due to outputs of one being inputs to another\n * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceChars#4168",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, char, char)",
    "snippet": "public static String replaceChars(String str, char searchChar, char replaceChar) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return str.replace(searchChar, replaceChar);\n    }",
    "begin_line": 4168,
    "end_line": 4173,
    "comment": "/** \n * \u003cp\u003eReplaces all occurrences of a character in a String with another. This is a null-safe version of  {@link String#replace(char,char)}.\u003c/p\u003e \u003cp\u003eA  {@code null} string input returns {@code null}. An empty (\"\") string input returns an empty string.\u003c/p\u003e \u003cpre\u003e StringUtils.replaceChars(null, *, *)        \u003d null StringUtils.replaceChars(\"\", *, *)          \u003d \"\" StringUtils.replaceChars(\"abcba\", \u0027b\u0027, \u0027y\u0027) \u003d \"aycya\" StringUtils.replaceChars(\"abcba\", \u0027z\u0027, \u0027y\u0027) \u003d \"abcba\" \u003c/pre\u003e\n * @param str  String to replace characters in, may be null\n * @param searchChar  the character to search for, may be null\n * @param replaceChar  the character to replace, may be null\n * @return modified String, {@code null} if null string input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.replaceChars#4211",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static String replaceChars(String str, String searchChars, String replaceChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return str;\n        }\n        if (replaceChars \u003d\u003d null) {\n            replaceChars \u003d EMPTY;\n        }\n        boolean modified \u003d false;\n        int replaceCharsLength \u003d replaceChars.length();\n        int strLength \u003d str.length();\n        StringBuilder buf \u003d new StringBuilder(strLength);\n        for (int i \u003d 0; i \u003c strLength; i++) {\n            char ch \u003d str.charAt(i);\n            int index \u003d searchChars.indexOf(ch);\n            if (index \u003e\u003d 0) {\n                modified \u003d true;\n                if (index \u003c replaceCharsLength) {\n                    buf.append(replaceChars.charAt(index));\n                }\n            } else {\n                buf.append(ch);\n            }\n        }\n        if (modified) {\n            return buf.toString();\n        }\n        return str;\n    }",
    "begin_line": 4211,
    "end_line": 4238,
    "comment": "/** \n * \u003cp\u003eReplaces multiple characters in a String in one go. This method can also be used to delete characters.\u003c/p\u003e \u003cp\u003eFor example:\u003cbr /\u003e \u003ccode\u003ereplaceChars(\u0026quot;hello\u0026quot;, \u0026quot;ho\u0026quot;, \u0026quot;jy\u0026quot;) \u003d jelly\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eA  {@code null} string input returns {@code null}. An empty (\"\") string input returns an empty string. A null or empty set of search characters returns the input string.\u003c/p\u003e \u003cp\u003eThe length of the search characters should normally equal the length of the replace characters. If the search characters is longer, then the extra search characters are deleted. If the search characters is shorter, then the extra replace characters are ignored.\u003c/p\u003e \u003cpre\u003e StringUtils.replaceChars(null, *, *)           \u003d null StringUtils.replaceChars(\"\", *, *)             \u003d \"\" StringUtils.replaceChars(\"abc\", null, *)       \u003d \"abc\" StringUtils.replaceChars(\"abc\", \"\", *)         \u003d \"abc\" StringUtils.replaceChars(\"abc\", \"b\", null)     \u003d \"ac\" StringUtils.replaceChars(\"abc\", \"b\", \"\")       \u003d \"ac\" StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\")  \u003d \"ayzya\" StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   \u003d \"ayya\" StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") \u003d \"ayzya\" \u003c/pre\u003e\n * @param str  String to replace characters in, may be null\n * @param searchChars  a set of characters to search for, may be null\n * @param replaceChars  a set of characters to replace, may be null\n * @return modified String, {@code null} if null string input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.overlay#4271",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.overlay(java.lang.String, java.lang.String, int, int)",
    "snippet": "public static String overlay(String str, String overlay, int start, int end) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (overlay \u003d\u003d null) {\n            overlay \u003d EMPTY;\n        }\n        int len \u003d str.length();\n        if (start \u003c 0) {\n            start \u003d 0;\n        }\n        if (start \u003e len) {\n            start \u003d len;\n        }\n        if (end \u003c 0) {\n            end \u003d 0;\n        }\n        if (end \u003e len) {\n            end \u003d len;\n        }\n        if (start \u003e end) {\n            int temp \u003d start;\n            start \u003d end;\n            end \u003d temp;\n        }\n        return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();\n    }",
    "begin_line": 4271,
    "end_line": 4301,
    "comment": "/** \n * \u003cp\u003eOverlays part of a String with another String.\u003c/p\u003e \u003cp\u003eA  {@code null} string input returns {@code null}. A negative index is treated as zero. An index greater than the string length is treated as the string length. The start index is always the smaller of the two indices.\u003c/p\u003e \u003cpre\u003e StringUtils.overlay(null, *, *, *)            \u003d null StringUtils.overlay(\"\", \"abc\", 0, 0)          \u003d \"abc\" StringUtils.overlay(\"abcdef\", null, 2, 4)     \u003d \"abef\" StringUtils.overlay(\"abcdef\", \"\", 2, 4)       \u003d \"abef\" StringUtils.overlay(\"abcdef\", \"\", 4, 2)       \u003d \"abef\" StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4)   \u003d \"abzzzzef\" StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2)   \u003d \"abzzzzef\" StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4)  \u003d \"zzzzef\" StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 8)   \u003d \"abzzzz\" StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) \u003d \"zzzzabcdef\" StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  \u003d \"abcdefzzzz\" \u003c/pre\u003e\n * @param str  the String to do overlaying in, may be null\n * @param overlay  the String to overlay, may be null\n * @param start  the position to start overlaying at\n * @param end  the position to stop overlaying before\n * @return overlayed String, {@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.chomp#4330",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.chomp(java.lang.String)",
    "snippet": "public static String chomp(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n\n        if (str.length() \u003d\u003d 1) {\n            char ch \u003d str.charAt(0);\n            if (ch \u003d\u003d CharUtils.CR || ch \u003d\u003d CharUtils.LF) {\n                return EMPTY;\n            }\n            return str;\n        }\n\n        int lastIdx \u003d str.length() - 1;\n        char last \u003d str.charAt(lastIdx);\n\n        if (last \u003d\u003d CharUtils.LF) {\n            if (str.charAt(lastIdx - 1) \u003d\u003d CharUtils.CR) {\n                lastIdx--;\n            }\n        } else if (last !\u003d CharUtils.CR) {\n            lastIdx++;\n        }\n        return str.substring(0, lastIdx);\n    }",
    "begin_line": 4330,
    "end_line": 4354,
    "comment": "/** \n * \u003cp\u003eRemoves one newline from end of a String if it\u0027s there, otherwise leave it alone.  A newline is \u0026quot; {@code \\n}\u0026quot;, \u0026quot; {@code \\r}\u0026quot;, or \u0026quot; {@code \\r\\n}\u0026quot;.\u003c/p\u003e \u003cp\u003eNOTE: This method changed in 2.0. It now more closely matches Perl chomp.\u003c/p\u003e \u003cpre\u003e StringUtils.chomp(null)          \u003d null StringUtils.chomp(\"\")            \u003d \"\" StringUtils.chomp(\"abc \\r\")      \u003d \"abc \" StringUtils.chomp(\"abc\\n\")       \u003d \"abc\" StringUtils.chomp(\"abc\\r\\n\")     \u003d \"abc\" StringUtils.chomp(\"abc\\r\\n\\r\\n\") \u003d \"abc\\r\\n\" StringUtils.chomp(\"abc\\n\\r\")     \u003d \"abc\\n\" StringUtils.chomp(\"abc\\n\\rabc\")  \u003d \"abc\\n\\rabc\" StringUtils.chomp(\"\\r\")          \u003d \"\" StringUtils.chomp(\"\\n\")          \u003d \"\" StringUtils.chomp(\"\\r\\n\")        \u003d \"\" \u003c/pre\u003e\n * @param str  the String to chomp a newline from, may be null\n * @return String without newline, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.chomp#4382",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.chomp(java.lang.String, java.lang.String)",
    "snippet": "public static String chomp(String str, String separator) {\n        if (isEmpty(str) || separator \u003d\u003d null) {\n            return str;\n        }\n        if (str.endsWith(separator)) {\n            return str.substring(0, str.length() - separator.length());\n        }\n        return str;\n    }",
    "begin_line": 4382,
    "end_line": 4390,
    "comment": "/** \n * \u003cp\u003eRemoves  {@code separator} from the end of{@code str} if it\u0027s there, otherwise leave it alone.\u003c/p\u003e\u003cp\u003eNOTE: This method changed in version 2.0. It now more closely matches Perl chomp. For the previous behavior, use  {@link #substringBeforeLast(String,String)}. This method uses  {@link String#endsWith(String)}.\u003c/p\u003e \u003cpre\u003e StringUtils.chomp(null, *)         \u003d null StringUtils.chomp(\"\", *)           \u003d \"\" StringUtils.chomp(\"foobar\", \"bar\") \u003d \"foo\" StringUtils.chomp(\"foobar\", \"baz\") \u003d \"foobar\" StringUtils.chomp(\"foo\", \"foo\")    \u003d \"\" StringUtils.chomp(\"foo \", \"foo\")   \u003d \"foo \" StringUtils.chomp(\" foo\", \"foo\")   \u003d \" \" StringUtils.chomp(\"foo\", \"foooo\")  \u003d \"foo\" StringUtils.chomp(\"foo\", \"\")       \u003d \"foo\" StringUtils.chomp(\"foo\", null)     \u003d \"foo\" \u003c/pre\u003e\n * @param str  the String to chomp from, may be null\n * @param separator  separator String, may be null\n * @return String without trailing separator, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.chop#4417",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.chop(java.lang.String)",
    "snippet": "public static String chop(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        int strLen \u003d str.length();\n        if (strLen \u003c 2) {\n            return EMPTY;\n        }\n        int lastIdx \u003d strLen - 1;\n        String ret \u003d str.substring(0, lastIdx);\n        char last \u003d str.charAt(lastIdx);\n        if (last \u003d\u003d CharUtils.LF) {\n            if (ret.charAt(lastIdx - 1) \u003d\u003d CharUtils.CR) {\n                return ret.substring(0, lastIdx - 1);\n            }\n        }\n        return ret;\n    }",
    "begin_line": 4417,
    "end_line": 4434,
    "comment": "/** \n * \u003cp\u003eRemove the last character from a String.\u003c/p\u003e \u003cp\u003eIf the String ends in  {@code \\r\\n}, then remove both of them.\u003c/p\u003e \u003cpre\u003e StringUtils.chop(null)          \u003d null StringUtils.chop(\"\")            \u003d \"\" StringUtils.chop(\"abc \\r\")      \u003d \"abc \" StringUtils.chop(\"abc\\n\")       \u003d \"abc\" StringUtils.chop(\"abc\\r\\n\")     \u003d \"abc\" StringUtils.chop(\"abc\")         \u003d \"ab\" StringUtils.chop(\"abc\\nabc\")    \u003d \"abc\\nab\" StringUtils.chop(\"a\")           \u003d \"\" StringUtils.chop(\"\\r\")          \u003d \"\" StringUtils.chop(\"\\n\")          \u003d \"\" StringUtils.chop(\"\\r\\n\")        \u003d \"\" \u003c/pre\u003e\n * @param str  the String to chop last character from, may be null\n * @return String without last character, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.repeat#4459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int)",
    "snippet": "public static String repeat(String str, int repeat) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (repeat \u003c\u003d 0) {\n            return EMPTY;\n        }\n        int inputLength \u003d str.length();\n        if (repeat \u003d\u003d 1 || inputLength \u003d\u003d 0) {\n            return str;\n        }\n        if (inputLength \u003d\u003d 1 \u0026\u0026 repeat \u003c\u003d PAD_LIMIT) {\n            return repeat(str.charAt(0), repeat);\n        }\n\n        int outputLength \u003d inputLength * repeat;\n        switch (inputLength) {\n            case 1 :\n                return repeat(str.charAt(0), repeat);\n            case 2 :\n                char ch0 \u003d str.charAt(0);\n                char ch1 \u003d str.charAt(1);\n                char[] output2 \u003d new char[outputLength];\n                for (int i \u003d repeat * 2 - 2; i \u003e\u003d 0; i--, i--) {\n                    output2[i] \u003d ch0;\n                    output2[i + 1] \u003d ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf \u003d new StringBuilder(outputLength);\n                for (int i \u003d 0; i \u003c repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }\n    }",
    "begin_line": 4459,
    "end_line": 4496,
    "comment": "/** \n * \u003cp\u003eRepeat a String  {@code repeat} times to form anew String.\u003c/p\u003e \u003cpre\u003e StringUtils.repeat(null, 2) \u003d null StringUtils.repeat(\"\", 0)   \u003d \"\" StringUtils.repeat(\"\", 2)   \u003d \"\" StringUtils.repeat(\"a\", 3)  \u003d \"aaa\" StringUtils.repeat(\"ab\", 2) \u003d \"abab\" StringUtils.repeat(\"a\", -2) \u003d \"\" \u003c/pre\u003e\n * @param str  the String to repeat, may be null\n * @param repeat  number of times to repeat str, negative treated as zero\n * @return a new String consisting of the original String repeated,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.repeat#4518",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.repeat(java.lang.String, java.lang.String, int)",
    "snippet": "public static String repeat(String str, String separator, int repeat) {\n        if(str \u003d\u003d null || separator \u003d\u003d null) {\n            return repeat(str, repeat);\n        } else {\n            // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it\n            String result \u003d repeat(str + separator, repeat);\n            return removeEnd(result, separator);\n        }\n    }",
    "begin_line": 4518,
    "end_line": 4526,
    "comment": "/** \n * \u003cp\u003eRepeat a String  {@code repeat} times to form anew String, with a String separator injected each time. \u003c/p\u003e \u003cpre\u003e StringUtils.repeat(null, null, 2) \u003d null StringUtils.repeat(null, \"x\", 2)  \u003d null StringUtils.repeat(\"\", null, 0)   \u003d \"\" StringUtils.repeat(\"\", \"\", 2)     \u003d \"\" StringUtils.repeat(\"\", \"x\", 3)    \u003d \"xxx\" StringUtils.repeat(\"?\", \", \", 3)  \u003d \"?, ?, ?\" \u003c/pre\u003e\n * @param str        the String to repeat, may be null\n * @param separator  the String to inject, may be null\n * @param repeat     number of times to repeat str, negative treated as zero\n * @return a new String consisting of the original String repeated,{@code null} if null String input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.repeat#4550",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.repeat(char, int)",
    "snippet": "public static String repeat(char ch, int repeat) {\n        char[] buf \u003d new char[repeat];\n        for (int i \u003d repeat - 1; i \u003e\u003d 0; i--) {\n            buf[i] \u003d ch;\n        }\n        return new String(buf);\n    }",
    "begin_line": 4550,
    "end_line": 4556,
    "comment": "/** \n * \u003cp\u003eReturns padding using the specified delimiter repeated to a given length.\u003c/p\u003e \u003cpre\u003e StringUtils.repeat(0, \u0027e\u0027)  \u003d \"\" StringUtils.repeat(3, \u0027e\u0027)  \u003d \"eee\" StringUtils.repeat(-2, \u0027e\u0027) \u003d \"\" \u003c/pre\u003e \u003cp\u003eNote: this method doesn\u0027t not support padding with \u003ca href\u003d\"http://www.unicode.org/glossary/#supplementary_character\"\u003eUnicode Supplementary Characters\u003c/a\u003e as they require a pair of  {@code char}s to be represented. If you are needing to support full I18N of your applications consider using  {@link #repeat(String,int)} instead.\u003c/p\u003e\n * @param ch  character to repeat\n * @param repeat  number of times to repeat char, negative treated as zero\n * @return String with repeated character\n * @see #repeat(String,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.rightPad#4577",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int)",
    "snippet": "public static String rightPad(String str, int size) {\n        return rightPad(str, size, \u0027 \u0027);\n    }",
    "begin_line": 4577,
    "end_line": 4579,
    "comment": "/** \n * \u003cp\u003eRight pad a String with spaces (\u0027 \u0027).\u003c/p\u003e \u003cp\u003eThe String is padded to the size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.rightPad(null, *)   \u003d null StringUtils.rightPad(\"\", 3)     \u003d \"   \" StringUtils.rightPad(\"bat\", 3)  \u003d \"bat\" StringUtils.rightPad(\"bat\", 5)  \u003d \"bat  \" StringUtils.rightPad(\"bat\", 1)  \u003d \"bat\" StringUtils.rightPad(\"bat\", -1) \u003d \"bat\" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @return right padded String or original String if no padding is necessary,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.rightPad#4602",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char)",
    "snippet": "public static String rightPad(String str, int size, char padChar) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        int pads \u003d size - str.length();\n        if (pads \u003c\u003d 0) {\n            return str; // returns original String when possible\n        }\n        if (pads \u003e PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
    "begin_line": 4602,
    "end_line": 4614,
    "comment": "/** \n * \u003cp\u003eRight pad a String with a specified character.\u003c/p\u003e \u003cp\u003eThe String is padded to the size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.rightPad(null, *, *)     \u003d null StringUtils.rightPad(\"\", 3, \u0027z\u0027)     \u003d \"zzz\" StringUtils.rightPad(\"bat\", 3, \u0027z\u0027)  \u003d \"bat\" StringUtils.rightPad(\"bat\", 5, \u0027z\u0027)  \u003d \"batzz\" StringUtils.rightPad(\"bat\", 1, \u0027z\u0027)  \u003d \"bat\" StringUtils.rightPad(\"bat\", -1, \u0027z\u0027) \u003d \"bat\" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @param padChar  the character to pad with\n * @return right padded String or original String if no padding is necessary,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.rightPad#4639",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String)",
    "snippet": "public static String rightPad(String str, int size, String padStr) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr \u003d \" \";\n        }\n        int padLen \u003d padStr.length();\n        int strLen \u003d str.length();\n        int pads \u003d size - strLen;\n        if (pads \u003c\u003d 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen \u003d\u003d 1 \u0026\u0026 pads \u003c\u003d PAD_LIMIT) {\n            return rightPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads \u003d\u003d padLen) {\n            return str.concat(padStr);\n        } else if (pads \u003c padLen) {\n            return str.concat(padStr.substring(0, pads));\n        } else {\n            char[] padding \u003d new char[pads];\n            char[] padChars \u003d padStr.toCharArray();\n            for (int i \u003d 0; i \u003c pads; i++) {\n                padding[i] \u003d padChars[i % padLen];\n            }\n            return str.concat(new String(padding));\n        }\n    }",
    "begin_line": 4639,
    "end_line": 4668,
    "comment": "/** \n * \u003cp\u003eRight pad a String with a specified String.\u003c/p\u003e \u003cp\u003eThe String is padded to the size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.rightPad(null, *, *)      \u003d null StringUtils.rightPad(\"\", 3, \"z\")      \u003d \"zzz\" StringUtils.rightPad(\"bat\", 3, \"yz\")  \u003d \"bat\" StringUtils.rightPad(\"bat\", 5, \"yz\")  \u003d \"batyz\" StringUtils.rightPad(\"bat\", 8, \"yz\")  \u003d \"batyzyzy\" StringUtils.rightPad(\"bat\", 1, \"yz\")  \u003d \"bat\" StringUtils.rightPad(\"bat\", -1, \"yz\") \u003d \"bat\" StringUtils.rightPad(\"bat\", 5, null)  \u003d \"bat  \" StringUtils.rightPad(\"bat\", 5, \"\")    \u003d \"bat  \" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @param padStr  the String to pad with, null or empty treated as single space\n * @return right padded String or original String if no padding is necessary,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.leftPad#4689",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int)",
    "snippet": "public static String leftPad(String str, int size) {\n        return leftPad(str, size, \u0027 \u0027);\n    }",
    "begin_line": 4689,
    "end_line": 4691,
    "comment": "/** \n * \u003cp\u003eLeft pad a String with spaces (\u0027 \u0027).\u003c/p\u003e \u003cp\u003eThe String is padded to the size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.leftPad(null, *)   \u003d null StringUtils.leftPad(\"\", 3)     \u003d \"   \" StringUtils.leftPad(\"bat\", 3)  \u003d \"bat\" StringUtils.leftPad(\"bat\", 5)  \u003d \"  bat\" StringUtils.leftPad(\"bat\", 1)  \u003d \"bat\" StringUtils.leftPad(\"bat\", -1) \u003d \"bat\" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @return left padded String or original String if no padding is necessary,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.leftPad#4714",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char)",
    "snippet": "public static String leftPad(String str, int size, char padChar) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        int pads \u003d size - str.length();\n        if (pads \u003c\u003d 0) {\n            return str; // returns original String when possible\n        }\n        if (pads \u003e PAD_LIMIT) {\n            return leftPad(str, size, String.valueOf(padChar));\n        }\n        return repeat(padChar, pads).concat(str);\n    }",
    "begin_line": 4714,
    "end_line": 4726,
    "comment": "/** \n * \u003cp\u003eLeft pad a String with a specified character.\u003c/p\u003e \u003cp\u003ePad to a size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.leftPad(null, *, *)     \u003d null StringUtils.leftPad(\"\", 3, \u0027z\u0027)     \u003d \"zzz\" StringUtils.leftPad(\"bat\", 3, \u0027z\u0027)  \u003d \"bat\" StringUtils.leftPad(\"bat\", 5, \u0027z\u0027)  \u003d \"zzbat\" StringUtils.leftPad(\"bat\", 1, \u0027z\u0027)  \u003d \"bat\" StringUtils.leftPad(\"bat\", -1, \u0027z\u0027) \u003d \"bat\" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @param padChar  the character to pad with\n * @return left padded String or original String if no padding is necessary,{@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.leftPad#4751",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String)",
    "snippet": "public static String leftPad(String str, int size, String padStr) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr \u003d \" \";\n        }\n        int padLen \u003d padStr.length();\n        int strLen \u003d str.length();\n        int pads \u003d size - strLen;\n        if (pads \u003c\u003d 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen \u003d\u003d 1 \u0026\u0026 pads \u003c\u003d PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads \u003d\u003d padLen) {\n            return padStr.concat(str);\n        } else if (pads \u003c padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            char[] padding \u003d new char[pads];\n            char[] padChars \u003d padStr.toCharArray();\n            for (int i \u003d 0; i \u003c pads; i++) {\n                padding[i] \u003d padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
    "begin_line": 4751,
    "end_line": 4780,
    "comment": "/** \n * \u003cp\u003eLeft pad a String with a specified String.\u003c/p\u003e \u003cp\u003ePad to a size of  {@code size}.\u003c/p\u003e \u003cpre\u003e StringUtils.leftPad(null, *, *)      \u003d null StringUtils.leftPad(\"\", 3, \"z\")      \u003d \"zzz\" StringUtils.leftPad(\"bat\", 3, \"yz\")  \u003d \"bat\" StringUtils.leftPad(\"bat\", 5, \"yz\")  \u003d \"yzbat\" StringUtils.leftPad(\"bat\", 8, \"yz\")  \u003d \"yzyzybat\" StringUtils.leftPad(\"bat\", 1, \"yz\")  \u003d \"bat\" StringUtils.leftPad(\"bat\", -1, \"yz\") \u003d \"bat\" StringUtils.leftPad(\"bat\", 5, null)  \u003d \"  bat\" StringUtils.leftPad(\"bat\", 5, \"\")    \u003d \"  bat\" \u003c/pre\u003e\n * @param str  the String to pad out, may be null\n * @param size  the size to pad to\n * @param padStr  the String to pad with, null or empty treated as single space\n * @return left padded String or original String if no padding is necessary,{@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.length#4793",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.length(java.lang.CharSequence)",
    "snippet": "public static int length(CharSequence cs) {\n        return cs \u003d\u003d null ? 0 : cs.length();\n    }",
    "begin_line": 4793,
    "end_line": 4795,
    "comment": "/** \n * Gets a CharSequence length or  {@code 0} if the CharSequence is{@code null}.\n * @param cs a CharSequence or  {@code null}\n * @return CharSequence length or {@code 0} if the CharSequence is{@code null}.\n * @since 2.4\n * @since 3.0 Changed signature from length(String) to length(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.center#4822",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.center(java.lang.String, int)",
    "snippet": "public static String center(String str, int size) {\n        return center(str, size, \u0027 \u0027);\n    }",
    "begin_line": 4822,
    "end_line": 4824,
    "comment": "/** \n * \u003cp\u003eCenters a String in a larger String of size  {@code size}using the space character (\u0027 \u0027).\u003cp\u003e \u003cp\u003eIf the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.\u003c/p\u003e \u003cp\u003eEquivalent to  {@code center(str, size, \" \")}.\u003c/p\u003e \u003cpre\u003e StringUtils.center(null, *)   \u003d null StringUtils.center(\"\", 4)     \u003d \"    \" StringUtils.center(\"ab\", -1)  \u003d \"ab\" StringUtils.center(\"ab\", 4)   \u003d \" ab \" StringUtils.center(\"abcd\", 2) \u003d \"abcd\" StringUtils.center(\"a\", 4)    \u003d \" a  \" \u003c/pre\u003e\n * @param str  the String to center, may be null\n * @param size  the int size of new String, negative treated as zero\n * @return centered String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.center#4850",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char)",
    "snippet": "public static String center(String str, int size, char padChar) {\n        if (str \u003d\u003d null || size \u003c\u003d 0) {\n            return str;\n        }\n        int strLen \u003d str.length();\n        int pads \u003d size - strLen;\n        if (pads \u003c\u003d 0) {\n            return str;\n        }\n        str \u003d leftPad(str, strLen + pads / 2, padChar);\n        str \u003d rightPad(str, size, padChar);\n        return str;\n    }",
    "begin_line": 4850,
    "end_line": 4862,
    "comment": "/** \n * \u003cp\u003eCenters a String in a larger String of size  {@code size}. Uses a supplied character as the value to pad the String with.\u003c/p\u003e \u003cp\u003eIf the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.\u003c/p\u003e \u003cpre\u003e StringUtils.center(null, *, *)     \u003d null StringUtils.center(\"\", 4, \u0027 \u0027)     \u003d \"    \" StringUtils.center(\"ab\", -1, \u0027 \u0027)  \u003d \"ab\" StringUtils.center(\"ab\", 4, \u0027 \u0027)   \u003d \" ab\" StringUtils.center(\"abcd\", 2, \u0027 \u0027) \u003d \"abcd\" StringUtils.center(\"a\", 4, \u0027 \u0027)    \u003d \" a  \" StringUtils.center(\"a\", 4, \u0027y\u0027)    \u003d \"yayy\" \u003c/pre\u003e\n * @param str  the String to center, may be null\n * @param size  the int size of new String, negative treated as zero\n * @param padChar  the character to pad the new String with\n * @return centered String, {@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.center#4890",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.center(java.lang.String, int, java.lang.String)",
    "snippet": "public static String center(String str, int size, String padStr) {\n        if (str \u003d\u003d null || size \u003c\u003d 0) {\n            return str;\n        }\n        if (isEmpty(padStr)) {\n            padStr \u003d \" \";\n        }\n        int strLen \u003d str.length();\n        int pads \u003d size - strLen;\n        if (pads \u003c\u003d 0) {\n            return str;\n        }\n        str \u003d leftPad(str, strLen + pads / 2, padStr);\n        str \u003d rightPad(str, size, padStr);\n        return str;\n    }",
    "begin_line": 4890,
    "end_line": 4905,
    "comment": "/** \n * \u003cp\u003eCenters a String in a larger String of size  {@code size}. Uses a supplied String as the value to pad the String with.\u003c/p\u003e \u003cp\u003eIf the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.\u003c/p\u003e \u003cpre\u003e StringUtils.center(null, *, *)     \u003d null StringUtils.center(\"\", 4, \" \")     \u003d \"    \" StringUtils.center(\"ab\", -1, \" \")  \u003d \"ab\" StringUtils.center(\"ab\", 4, \" \")   \u003d \" ab\" StringUtils.center(\"abcd\", 2, \" \") \u003d \"abcd\" StringUtils.center(\"a\", 4, \" \")    \u003d \" a  \" StringUtils.center(\"a\", 4, \"yz\")   \u003d \"yayz\" StringUtils.center(\"abc\", 7, null) \u003d \"  abc  \" StringUtils.center(\"abc\", 7, \"\")   \u003d \"  abc  \" \u003c/pre\u003e\n * @param str  the String to center, may be null\n * @param size  the int size of new String, negative treated as zero\n * @param padStr  the String to pad the new String with, must not be null or empty\n * @return centered String, {@code null} if null String input\n * @throws IllegalArgumentException if padStr is {@code null} or empty\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.upperCase#4928",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.upperCase(java.lang.String)",
    "snippet": "public static String upperCase(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return str.toUpperCase();\n    }",
    "begin_line": 4928,
    "end_line": 4933,
    "comment": "/** \n * \u003cp\u003eConverts a String to upper case as per  {@link String#toUpperCase()}.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.upperCase(null)  \u003d null StringUtils.upperCase(\"\")    \u003d \"\" StringUtils.upperCase(\"aBc\") \u003d \"ABC\" \u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e As described in the documentation for  {@link String#toUpperCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).\u003c/p\u003e\n * @param str  the String to upper case, may be null\n * @return the upper cased String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.upperCase#4951",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.upperCase(java.lang.String, java.util.Locale)",
    "snippet": "public static String upperCase(String str, Locale locale) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return str.toUpperCase(locale);\n    }",
    "begin_line": 4951,
    "end_line": 4956,
    "comment": "/** \n * \u003cp\u003eConverts a String to upper case as per  {@link String#toUpperCase(Locale)}.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.upperCase(null, Locale.ENGLISH)  \u003d null StringUtils.upperCase(\"\", Locale.ENGLISH)    \u003d \"\" StringUtils.upperCase(\"aBc\", Locale.ENGLISH) \u003d \"ABC\" \u003c/pre\u003e\n * @param str  the String to upper case, may be null\n * @param locale  the locale that defines the case transformation rules, must not be null\n * @return the upper cased String, {@code null} if null String input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lowerCase#4977",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String)",
    "snippet": "public static String lowerCase(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return str.toLowerCase();\n    }",
    "begin_line": 4977,
    "end_line": 4982,
    "comment": "/** \n * \u003cp\u003eConverts a String to lower case as per  {@link String#toLowerCase()}.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.lowerCase(null)  \u003d null StringUtils.lowerCase(\"\")    \u003d \"\" StringUtils.lowerCase(\"aBc\") \u003d \"abc\" \u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e As described in the documentation for  {@link String#toLowerCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).\u003c/p\u003e\n * @param str  the String to lower case, may be null\n * @return the lower cased String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.lowerCase#5000",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String, java.util.Locale)",
    "snippet": "public static String lowerCase(String str, Locale locale) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return str.toLowerCase(locale);\n    }",
    "begin_line": 5000,
    "end_line": 5005,
    "comment": "/** \n * \u003cp\u003eConverts a String to lower case as per  {@link String#toLowerCase(Locale)}.\u003c/p\u003e \u003cp\u003eA  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.lowerCase(null, Locale.ENGLISH)  \u003d null StringUtils.lowerCase(\"\", Locale.ENGLISH)    \u003d \"\" StringUtils.lowerCase(\"aBc\", Locale.ENGLISH) \u003d \"abc\" \u003c/pre\u003e\n * @param str  the String to lower case, may be null\n * @param locale  the locale that defines the case transformation rules, must not be null\n * @return the lower cased String, {@code null} if null String input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.capitalize#5027",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.capitalize(java.lang.String)",
    "snippet": "public static String capitalize(String str) {\n        int strLen;\n        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n            return str;\n        }\n        return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }",
    "begin_line": 5027,
    "end_line": 5036,
    "comment": "/** \n * \u003cp\u003eCapitalizes a String changing the first letter to title case as per  {@link Character#toTitleCase(char)}. No other letters are changed.\u003c/p\u003e \u003cp\u003eFor a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}. A  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.capitalize(null)  \u003d null StringUtils.capitalize(\"\")    \u003d \"\" StringUtils.capitalize(\"cat\") \u003d \"Cat\" StringUtils.capitalize(\"cAt\") \u003d \"CAt\" \u003c/pre\u003e\n * @param str the String to capitalize, may be null\n * @return the capitalized String, {@code null} if null String input\n * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)\n * @see #uncapitalize(String)\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.uncapitalize#5058",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String)",
    "snippet": "public static String uncapitalize(String str) {\n        int strLen;\n        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n            return str;\n        }\n        return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }",
    "begin_line": 5058,
    "end_line": 5067,
    "comment": "/** \n * \u003cp\u003eUncapitalizes a String changing the first letter to title case as per  {@link Character#toLowerCase(char)}. No other letters are changed.\u003c/p\u003e \u003cp\u003eFor a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}. A  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.uncapitalize(null)  \u003d null StringUtils.uncapitalize(\"\")    \u003d \"\" StringUtils.uncapitalize(\"Cat\") \u003d \"cat\" StringUtils.uncapitalize(\"CAT\") \u003d \"cAT\" \u003c/pre\u003e\n * @param str the String to uncapitalize, may be null\n * @return the uncapitalized String, {@code null} if null String input\n * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)\n * @see #capitalize(String)\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.swapCase#5096",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.swapCase(java.lang.String)",
    "snippet": "public static String swapCase(String str) {\n        int strLen;\n        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n            return str;\n        }\n        StringBuilder buffer \u003d new StringBuilder(strLen);\n\n        char ch \u003d 0;\n        for (int i \u003d 0; i \u003c strLen; i++) {\n            ch \u003d str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                ch \u003d Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                ch \u003d Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                ch \u003d Character.toUpperCase(ch);\n            }\n            buffer.append(ch);\n        }\n        return buffer.toString();\n    }",
    "begin_line": 5096,
    "end_line": 5116,
    "comment": "/** \n * \u003cp\u003eSwaps the case of a String changing upper and title case to lower case, and lower case to upper case.\u003c/p\u003e \u003cul\u003e \u003cli\u003eUpper case character converts to Lower case\u003c/li\u003e \u003cli\u003eTitle case character converts to Lower case\u003c/li\u003e \u003cli\u003eLower case character converts to Upper case\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#swapCase(String)}. A  {@code null} input String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.swapCase(null)                 \u003d null StringUtils.swapCase(\"\")                   \u003d \"\" StringUtils.swapCase(\"The dog has a BONE\") \u003d \"tHE DOG HAS A bone\" \u003c/pre\u003e \u003cp\u003eNOTE: This method changed in Lang version 2.0. It no longer performs a word based algorithm. If you only use ASCII, you will notice no change. That functionality is available in org.apache.commons.lang3.text.WordUtils.\u003c/p\u003e\n * @param str  the String to swap case, may be null\n * @return the changed String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.countMatches#5140",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int countMatches(CharSequence str, CharSequence sub) {\n        if (isEmpty(str) || isEmpty(sub)) {\n            return 0;\n        }\n        int count \u003d 0;\n        int idx \u003d 0;\n        while ((idx \u003d CharSequenceUtils.indexOf(str, sub, idx)) !\u003d INDEX_NOT_FOUND) {\n            count++;\n            idx +\u003d sub.length();\n        }\n        return count;\n    }",
    "begin_line": 5140,
    "end_line": 5151,
    "comment": "/** \n * \u003cp\u003eCounts how many times the substring appears in the larger string.\u003c/p\u003e \u003cp\u003eA  {@code null} or empty (\"\") String input returns {@code 0}.\u003c/p\u003e \u003cpre\u003e StringUtils.countMatches(null, *)       \u003d 0 StringUtils.countMatches(\"\", *)         \u003d 0 StringUtils.countMatches(\"abba\", null)  \u003d 0 StringUtils.countMatches(\"abba\", \"\")    \u003d 0 StringUtils.countMatches(\"abba\", \"a\")   \u003d 2 StringUtils.countMatches(\"abba\", \"ab\")  \u003d 1 StringUtils.countMatches(\"abba\", \"xxx\") \u003d 0 \u003c/pre\u003e\n * @param str  the CharSequence to check, may be null\n * @param sub  the substring to count, may be null\n * @return the number of occurrences, 0 if either CharSequence is {@code null}\n * @since 3.0 Changed signature from countMatches(String, String) to countMatches(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAlpha#5175",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence)",
    "snippet": "public static boolean isAlpha(CharSequence cs) {\n        if (cs \u003d\u003d null || cs.length() \u003d\u003d 0) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (Character.isLetter(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5175,
    "end_line": 5186,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode letters.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAlpha(null)   \u003d false StringUtils.isAlpha(\"\")     \u003d false StringUtils.isAlpha(\"  \")   \u003d false StringUtils.isAlpha(\"abc\")  \u003d true StringUtils.isAlpha(\"ab2c\") \u003d false StringUtils.isAlpha(\"ab-c\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains letters, and is non-null\n * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)\n * @since 3.0 Changed \"\" to return false and not true\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAlphaSpace#5210",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence)",
    "snippet": "public static boolean isAlphaSpace(CharSequence cs) {\n        if (cs \u003d\u003d null) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if ((Character.isLetter(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5210,
    "end_line": 5221,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode letters and space (\u0027 \u0027).\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}An empty CharSequence (length()\u003d0) will return  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAlphaSpace(null)   \u003d false StringUtils.isAlphaSpace(\"\")     \u003d true StringUtils.isAlphaSpace(\"  \")   \u003d true StringUtils.isAlphaSpace(\"abc\")  \u003d true StringUtils.isAlphaSpace(\"ab c\") \u003d true StringUtils.isAlphaSpace(\"ab2c\") \u003d false StringUtils.isAlphaSpace(\"ab-c\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains letters and space,and is non-null\n * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAlphanumeric#5245",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence)",
    "snippet": "public static boolean isAlphanumeric(CharSequence cs) {\n        if (cs \u003d\u003d null || cs.length() \u003d\u003d 0) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (Character.isLetterOrDigit(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5245,
    "end_line": 5256,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode letters or digits.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAlphanumeric(null)   \u003d false StringUtils.isAlphanumeric(\"\")     \u003d false StringUtils.isAlphanumeric(\"  \")   \u003d false StringUtils.isAlphanumeric(\"abc\")  \u003d true StringUtils.isAlphanumeric(\"ab c\") \u003d false StringUtils.isAlphanumeric(\"ab2c\") \u003d true StringUtils.isAlphanumeric(\"ab-c\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains letters or digits,and is non-null\n * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)\n * @since 3.0 Changed \"\" to return false and not true\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAlphanumericSpace#5280",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence)",
    "snippet": "public static boolean isAlphanumericSpace(CharSequence cs) {\n        if (cs \u003d\u003d null) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if ((Character.isLetterOrDigit(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5280,
    "end_line": 5291,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode letters, digits or space ( {@code \u0027 \u0027}).\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAlphanumericSpace(null)   \u003d false StringUtils.isAlphanumericSpace(\"\")     \u003d true StringUtils.isAlphanumericSpace(\"  \")   \u003d true StringUtils.isAlphanumericSpace(\"abc\")  \u003d true StringUtils.isAlphanumericSpace(\"ab c\") \u003d true StringUtils.isAlphanumericSpace(\"ab2c\") \u003d true StringUtils.isAlphanumericSpace(\"ab-c\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains letters, digits or space,and is non-null\n * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAsciiPrintable#5319",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence)",
    "snippet": "public static boolean isAsciiPrintable(CharSequence cs) {\n        if (cs \u003d\u003d null) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (CharUtils.isAsciiPrintable(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5319,
    "end_line": 5330,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only ASCII printable characters.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAsciiPrintable(null)     \u003d false StringUtils.isAsciiPrintable(\"\")       \u003d true StringUtils.isAsciiPrintable(\" \")      \u003d true StringUtils.isAsciiPrintable(\"Ceki\")   \u003d true StringUtils.isAsciiPrintable(\"ab2c\")   \u003d true StringUtils.isAsciiPrintable(\"!ab-c~\") \u003d true StringUtils.isAsciiPrintable(\"\\u0020\") \u003d true StringUtils.isAsciiPrintable(\"\\u0021\") \u003d true StringUtils.isAsciiPrintable(\"\\u007e\") \u003d true StringUtils.isAsciiPrintable(\"\\u007f\") \u003d false StringUtils.isAsciiPrintable(\"Ceki G\\u00fclc\\u00fc\") \u003d false \u003c/pre\u003e\n * @param cs the CharSequence to check, may be null\n * @return {@code true} if every character is in the range32 thru 126\n * @since 2.1\n * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isNumeric#5355",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence)",
    "snippet": "public static boolean isNumeric(CharSequence cs) {\n        if (cs \u003d\u003d null || cs.length() \u003d\u003d 0) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (Character.isDigit(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5355,
    "end_line": 5366,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode digits. A decimal point is not a unicode digit and returns false.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.isNumeric(null)   \u003d false StringUtils.isNumeric(\"\")     \u003d false StringUtils.isNumeric(\"  \")   \u003d false StringUtils.isNumeric(\"123\")  \u003d true StringUtils.isNumeric(\"12 3\") \u003d false StringUtils.isNumeric(\"ab2c\") \u003d false StringUtils.isNumeric(\"12-3\") \u003d false StringUtils.isNumeric(\"12.3\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains digits, and is non-null\n * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)\n * @since 3.0 Changed \"\" to return false and not true\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isNumericSpace#5392",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence)",
    "snippet": "public static boolean isNumericSpace(CharSequence cs) {\n        if (cs \u003d\u003d null) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if ((Character.isDigit(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5392,
    "end_line": 5403,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only unicode digits or space ( {@code \u0027 \u0027}). A decimal point is not a unicode digit and returns false.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.isNumericSpace(null)   \u003d false StringUtils.isNumericSpace(\"\")     \u003d true StringUtils.isNumericSpace(\"  \")   \u003d true StringUtils.isNumericSpace(\"123\")  \u003d true StringUtils.isNumericSpace(\"12 3\") \u003d true StringUtils.isNumericSpace(\"ab2c\") \u003d false StringUtils.isNumericSpace(\"12-3\") \u003d false StringUtils.isNumericSpace(\"12.3\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains digits or space,and is non-null\n * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isWhitespace#5425",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence)",
    "snippet": "public static boolean isWhitespace(CharSequence cs) {\n        if (cs \u003d\u003d null) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if ((Character.isWhitespace(cs.charAt(i)) \u003d\u003d false)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5425,
    "end_line": 5436,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only whitespace.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code true}.\u003c/p\u003e \u003cpre\u003e StringUtils.isWhitespace(null)   \u003d false StringUtils.isWhitespace(\"\")     \u003d true StringUtils.isWhitespace(\"  \")   \u003d true StringUtils.isWhitespace(\"abc\")  \u003d false StringUtils.isWhitespace(\"ab2c\") \u003d false StringUtils.isWhitespace(\"ab-c\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains whitespace, and is non-null\n * @since 2.0\n * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAllLowerCase#5457",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence)",
    "snippet": "public static boolean isAllLowerCase(CharSequence cs) {\n        if (cs \u003d\u003d null || isEmpty(cs)) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (Character.isLowerCase(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5457,
    "end_line": 5468,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only lowercase characters.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty CharSequence (length()\u003d0) will return  {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAllLowerCase(null)   \u003d false StringUtils.isAllLowerCase(\"\")     \u003d false StringUtils.isAllLowerCase(\"  \")   \u003d false StringUtils.isAllLowerCase(\"abc\")  \u003d true StringUtils.isAllLowerCase(\"abC\") \u003d false \u003c/pre\u003e\n * @param cs  the CharSequence to check, may be null\n * @return {@code true} if only contains lowercase characters, and is non-null\n * @since 2.5\n * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.isAllUpperCase#5489",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence)",
    "snippet": "public static boolean isAllUpperCase(CharSequence cs) {\n        if (cs \u003d\u003d null || isEmpty(cs)) {\n            return false;\n        }\n        int sz \u003d cs.length();\n        for (int i \u003d 0; i \u003c sz; i++) {\n            if (Character.isUpperCase(cs.charAt(i)) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 5489,
    "end_line": 5500,
    "comment": "/** \n * \u003cp\u003eChecks if the CharSequence contains only uppercase characters.\u003c/p\u003e \u003cp\u003e {@code null} will return {@code false}. An empty String (length()\u003d0) will return  {@code false}.\u003c/p\u003e \u003cpre\u003e StringUtils.isAllUpperCase(null)   \u003d false StringUtils.isAllUpperCase(\"\")     \u003d false StringUtils.isAllUpperCase(\"  \")   \u003d false StringUtils.isAllUpperCase(\"ABC\")  \u003d true StringUtils.isAllUpperCase(\"aBC\") \u003d false \u003c/pre\u003e\n * @param cs the CharSequence to check, may be null\n * @return {@code true} if only contains uppercase characters, and is non-null\n * @since 2.5\n * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.defaultString#5520",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.defaultString(java.lang.String)",
    "snippet": "public static String defaultString(String str) {\n        return str \u003d\u003d null ? EMPTY : str;\n    }",
    "begin_line": 5520,
    "end_line": 5522,
    "comment": "/** \n * \u003cp\u003eReturns either the passed in String, or if the String is  {@code null}, an empty String (\"\").\u003c/p\u003e \u003cpre\u003e StringUtils.defaultString(null)  \u003d \"\" StringUtils.defaultString(\"\")    \u003d \"\" StringUtils.defaultString(\"bat\") \u003d \"bat\" \u003c/pre\u003e\n * @see ObjectUtils#toString(Object)\n * @see String#valueOf(Object)\n * @param str  the String to check, may be null\n * @return the passed in String, or the empty String if itwas  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.defaultString#5541",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.defaultString(java.lang.String, java.lang.String)",
    "snippet": "public static String defaultString(String str, String defaultStr) {\n        return str \u003d\u003d null ? defaultStr : str;\n    }",
    "begin_line": 5541,
    "end_line": 5543,
    "comment": "/** \n * \u003cp\u003eReturns either the passed in String, or if the String is {@code null}, the value of  {@code defaultStr}.\u003c/p\u003e \u003cpre\u003e StringUtils.defaultString(null, \"NULL\")  \u003d \"NULL\" StringUtils.defaultString(\"\", \"NULL\")    \u003d \"\" StringUtils.defaultString(\"bat\", \"NULL\") \u003d \"bat\" \u003c/pre\u003e\n * @see ObjectUtils#toString(Object,String)\n * @see String#valueOf(Object)\n * @param str  the String to check, may be null\n * @param defaultStr  the default String to returnif the input is  {@code null}, may be null\n * @return the passed in String, or the default if it was {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.defaultIfBlank#5563",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.defaultIfBlank(T, T)",
    "snippet": "public static \u003cT extends CharSequence\u003e T defaultIfBlank(T str, T defaultStr) {\n        return StringUtils.isBlank(str) ? defaultStr : str;\n    }",
    "begin_line": 5563,
    "end_line": 5565,
    "comment": "/** \n * \u003cp\u003eReturns either the passed in CharSequence, or if the CharSequence is whitespace, empty (\"\") or  {@code null}, the value of  {@code defaultStr}.\u003c/p\u003e \u003cpre\u003e StringUtils.defaultIfBlank(null, \"NULL\")  \u003d \"NULL\" StringUtils.defaultIfBlank(\"\", \"NULL\")    \u003d \"NULL\" StringUtils.defaultIfBlank(\" \", \"NULL\")   \u003d \"NULL\" StringUtils.defaultIfBlank(\"bat\", \"NULL\") \u003d \"bat\" StringUtils.defaultIfBlank(\"\", null)      \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e the specific kind of CharSequence\n * @param str the CharSequence to check, may be null\n * @param defaultStr  the default CharSequence to returnif the input is whitespace, empty (\"\") or  {@code null}, may be null\n * @return the passed in CharSequence, or the default\n * @see StringUtils#defaultString(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.defaultIfEmpty#5584",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.defaultIfEmpty(T, T)",
    "snippet": "public static \u003cT extends CharSequence\u003e T defaultIfEmpty(T str, T defaultStr) {\n        return StringUtils.isEmpty(str) ? defaultStr : str;\n    }",
    "begin_line": 5584,
    "end_line": 5586,
    "comment": "/** \n * \u003cp\u003eReturns either the passed in CharSequence, or if the CharSequence is empty or  {@code null}, the value of  {@code defaultStr}.\u003c/p\u003e \u003cpre\u003e StringUtils.defaultIfEmpty(null, \"NULL\")  \u003d \"NULL\" StringUtils.defaultIfEmpty(\"\", \"NULL\")    \u003d \"NULL\" StringUtils.defaultIfEmpty(\"bat\", \"NULL\") \u003d \"bat\" StringUtils.defaultIfEmpty(\"\", null)      \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e the specific kind of CharSequence\n * @param str  the CharSequence to check, may be null\n * @param defaultStr  the default CharSequence to returnif the input is empty (\"\") or  {@code null}, may be null\n * @return the passed in CharSequence, or the default\n * @see StringUtils#defaultString(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.reverse#5604",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.reverse(java.lang.String)",
    "snippet": "public static String reverse(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return new StringBuilder(str).reverse().toString();\n    }",
    "begin_line": 5604,
    "end_line": 5609,
    "comment": "/** \n * \u003cp\u003eReverses a String as per  {@link StringBuilder#reverse()}.\u003c/p\u003e \u003cp\u003eA  {@code null} String returns {@code null}.\u003c/p\u003e \u003cpre\u003e StringUtils.reverse(null)  \u003d null StringUtils.reverse(\"\")    \u003d \"\" StringUtils.reverse(\"bat\") \u003d \"tab\" \u003c/pre\u003e\n * @param str  the String to reverse, may be null\n * @return the reversed String, {@code null} if null String input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.reverseDelimited#5630",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.reverseDelimited(java.lang.String, char)",
    "snippet": "public static String reverseDelimited(String str, char separatorChar) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        // could implement manually, but simple way is to reuse other,\n        // probably slower, methods.\n        String[] strs \u003d split(str, separatorChar);\n        ArrayUtils.reverse(strs);\n        return join(strs, separatorChar);\n    }",
    "begin_line": 5630,
    "end_line": 5639,
    "comment": "/** \n * \u003cp\u003eReverses a String that is delimited by a specific character.\u003c/p\u003e \u003cp\u003eThe Strings between the delimiters are not reversed. Thus java.lang.String becomes String.lang.java (if the delimiter is  {@code \u0027.\u0027}).\u003c/p\u003e \u003cpre\u003e StringUtils.reverseDelimited(null, *)      \u003d null StringUtils.reverseDelimited(\"\", *)        \u003d \"\" StringUtils.reverseDelimited(\"a.b.c\", \u0027x\u0027) \u003d \"a.b.c\" StringUtils.reverseDelimited(\"a.b.c\", \".\") \u003d \"c.b.a\" \u003c/pre\u003e\n * @param str  the String to reverse, may be null\n * @param separatorChar  the separator character to use\n * @return the reversed String, {@code null} if null String input\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.abbreviate#5675",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int)",
    "snippet": "public static String abbreviate(String str, int maxWidth) {\n        return abbreviate(str, 0, maxWidth);\n    }",
    "begin_line": 5675,
    "end_line": 5677,
    "comment": "/** \n * \u003cp\u003eAbbreviates a String using ellipses. This will turn \"Now is the time for all good men\" into \"Now is the time for...\"\u003c/p\u003e \u003cp\u003eSpecifically: \u003cul\u003e \u003cli\u003eIf  {@code str} is less than {@code maxWidth} characterslong, return it.\u003c/li\u003e \u003cli\u003eElse abbreviate it to  {@code (substring(str, 0, max-3) + \"...\")}.\u003c/li\u003e \u003cli\u003eIf  {@code maxWidth} is less than {@code 4}, throw an {@code IllegalArgumentException}.\u003c/li\u003e \u003cli\u003eIn no case will it return a String of length greater than {@code maxWidth}.\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e \u003cpre\u003e StringUtils.abbreviate(null, *)      \u003d null StringUtils.abbreviate(\"\", 4)        \u003d \"\" StringUtils.abbreviate(\"abcdefg\", 6) \u003d \"abc...\" StringUtils.abbreviate(\"abcdefg\", 7) \u003d \"abcdefg\" StringUtils.abbreviate(\"abcdefg\", 8) \u003d \"abcdefg\" StringUtils.abbreviate(\"abcdefg\", 4) \u003d \"a...\" StringUtils.abbreviate(\"abcdefg\", 3) \u003d IllegalArgumentException \u003c/pre\u003e\n * @param str  the String to check, may be null\n * @param maxWidth  maximum length of result String, must be at least 4\n * @return abbreviated String, {@code null} if null String input\n * @throws IllegalArgumentException if the width is too small\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.abbreviate#5714",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int)",
    "snippet": "public static String abbreviate(String str, int offset, int maxWidth) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        if (maxWidth \u003c 4) {\n            throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");\n        }\n        if (str.length() \u003c\u003d maxWidth) {\n            return str;\n        }\n        if (offset \u003e str.length()) {\n            offset \u003d str.length();\n        }\n        if ((str.length() - offset) \u003c (maxWidth - 3)) {\n            offset \u003d str.length() - (maxWidth - 3);\n        }\n        final String abrevMarker \u003d \"...\";\n        if (offset \u003c\u003d 4) {\n            return str.substring(0, maxWidth - 3) + abrevMarker;\n        }\n        if (maxWidth \u003c 7) {\n            throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n        }\n        if ((offset + (maxWidth - 3)) \u003c str.length()) {\n            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);\n        }\n        return abrevMarker + str.substring(str.length() - (maxWidth - 3));\n    }",
    "begin_line": 5714,
    "end_line": 5741,
    "comment": "/** \n * \u003cp\u003eAbbreviates a String using ellipses. This will turn \"Now is the time for all good men\" into \"...is the time for...\"\u003c/p\u003e \u003cp\u003eWorks like  {@code abbreviate(String, int)}, but allows you to specify a \"left edge\" offset.  Note that this left edge is not necessarily going to be the leftmost character in the result, or the first character following the ellipses, but it will appear somewhere in the result. \u003cp\u003eIn no case will it return a String of length greater than {@code maxWidth}.\u003c/p\u003e \u003cpre\u003e StringUtils.abbreviate(null, *, *)                \u003d null StringUtils.abbreviate(\"\", 0, 4)                  \u003d \"\" StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) \u003d \"abcdefg...\" StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  \u003d \"abcdefg...\" StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  \u003d \"abcdefg...\" StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  \u003d \"abcdefg...\" StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  \u003d \"...fghi...\" StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  \u003d \"...ghij...\" StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  \u003d \"...ijklmno\" StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) \u003d \"...ijklmno\" StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) \u003d \"...ijklmno\" StringUtils.abbreviate(\"abcdefghij\", 0, 3)        \u003d IllegalArgumentException StringUtils.abbreviate(\"abcdefghij\", 5, 6)        \u003d IllegalArgumentException \u003c/pre\u003e\n * @param str  the String to check, may be null\n * @param offset  left edge of source String\n * @param maxWidth  maximum length of result String, must be at least 4\n * @return abbreviated String, {@code null} if null String input\n * @throws IllegalArgumentException if the width is too small\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.abbreviateMiddle#5772",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int)",
    "snippet": "public static String abbreviateMiddle(String str, String middle, int length) {\n        if (isEmpty(str) || isEmpty(middle)) {\n            return str;\n        }\n\n        if (length \u003e\u003d str.length() || length \u003c (middle.length()+2)) {\n            return str;\n        }\n\n        int targetSting \u003d length-middle.length();\n        int startOffset \u003d targetSting/2+targetSting%2;\n        int endOffset \u003d str.length()-targetSting/2;\n\n        StringBuilder builder \u003d new StringBuilder(length);\n        builder.append(str.substring(0,startOffset));\n        builder.append(middle);\n        builder.append(str.substring(endOffset));\n\n        return builder.toString();\n    }",
    "begin_line": 5772,
    "end_line": 5791,
    "comment": "/** \n * \u003cp\u003eAbbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.\u003c/p\u003e \u003cp\u003eThis abbreviation only occurs if the following criteria is met: \u003cul\u003e \u003cli\u003eNeither the String for abbreviation nor the replacement String are null or empty \u003c/li\u003e \u003cli\u003eThe length to truncate to is less than the length of the supplied String\u003c/li\u003e \u003cli\u003eThe length to truncate to is greater than 0\u003c/li\u003e \u003cli\u003eThe abbreviated String will have enough room for the length supplied replacement String and the first and last characters of the supplied String for abbreviation\u003c/li\u003e \u003c/ul\u003e Otherwise, the returned String will be the same as the supplied String for abbreviation. \u003c/p\u003e \u003cpre\u003e StringUtils.abbreviateMiddle(null, null, 0)      \u003d null StringUtils.abbreviateMiddle(\"abc\", null, 0)      \u003d \"abc\" StringUtils.abbreviateMiddle(\"abc\", \".\", 0)      \u003d \"abc\" StringUtils.abbreviateMiddle(\"abc\", \".\", 3)      \u003d \"abc\" StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4)     \u003d \"ab.f\" \u003c/pre\u003e\n * @param str  the String to abbreviate, may be null\n * @param middle the String to replace the middle characters with, may be null\n * @param length the length to abbreviate {@code str} to.\n * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.difference#5820",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String)",
    "snippet": "public static String difference(String str1, String str2) {\n        if (str1 \u003d\u003d null) {\n            return str2;\n        }\n        if (str2 \u003d\u003d null) {\n            return str1;\n        }\n        int at \u003d indexOfDifference(str1, str2);\n        if (at \u003d\u003d INDEX_NOT_FOUND) {\n            return EMPTY;\n        }\n        return str2.substring(at);\n    }",
    "begin_line": 5820,
    "end_line": 5832,
    "comment": "/** \n * \u003cp\u003eCompares two Strings, and returns the portion where they differ. (More precisely, return the remainder of the second String, starting from where it\u0027s different from the first.)\u003c/p\u003e \u003cp\u003eFor example, {@code difference(\"i am a machine\", \"i am a robot\") -\u003e \"robot\"}.\u003c/p\u003e \u003cpre\u003e StringUtils.difference(null, null) \u003d null StringUtils.difference(\"\", \"\") \u003d \"\" StringUtils.difference(\"\", \"abc\") \u003d \"abc\" StringUtils.difference(\"abc\", \"\") \u003d \"\" StringUtils.difference(\"abc\", \"abc\") \u003d \"\" StringUtils.difference(\"ab\", \"abxyz\") \u003d \"xyz\" StringUtils.difference(\"abcde\", \"abxyz\") \u003d \"xyz\" StringUtils.difference(\"abcde\", \"xyz\") \u003d \"xyz\" \u003c/pre\u003e\n * @param str1  the first String, may be null\n * @param str2  the second String, may be null\n * @return the portion of str2 where it differs from str1; returns theempty String if they are equal\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfDifference#5859",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {\n        if (cs1 \u003d\u003d cs2) {\n            return INDEX_NOT_FOUND;\n        }\n        if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\n            return 0;\n        }\n        int i;\n        for (i \u003d 0; i \u003c cs1.length() \u0026\u0026 i \u003c cs2.length(); ++i) {\n            if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\n                break;\n            }\n        }\n        if (i \u003c cs2.length() || i \u003c cs1.length()) {\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 5859,
    "end_line": 5876,
    "comment": "/** \n * \u003cp\u003eCompares two CharSequences, and returns the index at which the CharSequences begin to differ.\u003c/p\u003e \u003cp\u003eFor example, {@code indexOfDifference(\"i am a machine\", \"i am a robot\") -\u003e 7}\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfDifference(null, null) \u003d -1 StringUtils.indexOfDifference(\"\", \"\") \u003d -1 StringUtils.indexOfDifference(\"\", \"abc\") \u003d 0 StringUtils.indexOfDifference(\"abc\", \"\") \u003d 0 StringUtils.indexOfDifference(\"abc\", \"abc\") \u003d -1 StringUtils.indexOfDifference(\"ab\", \"abxyz\") \u003d 2 StringUtils.indexOfDifference(\"abcde\", \"abxyz\") \u003d 2 StringUtils.indexOfDifference(\"abcde\", \"xyz\") \u003d 0 \u003c/pre\u003e\n * @param cs1  the first CharSequence, may be null\n * @param cs2  the second CharSequence, may be null\n * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n * @since 2.0\n * @since 3.0 Changed signature from indexOfDifference(String, String) toindexOfDifference(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.indexOfDifference#5910",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence)",
    "snippet": "public static int indexOfDifference(CharSequence... css) {\n        if (css \u003d\u003d null || css.length \u003c\u003d 1) {\n            return INDEX_NOT_FOUND;\n        }\n        boolean anyStringNull \u003d false;\n        boolean allStringsNull \u003d true;\n        int arrayLen \u003d css.length;\n        int shortestStrLen \u003d Integer.MAX_VALUE;\n        int longestStrLen \u003d 0;\n\n        // find the min and max string lengths; this avoids checking to make\n        // sure we are not exceeding the length of the string each time through\n        // the bottom loop.\n        for (int i \u003d 0; i \u003c arrayLen; i++) {\n            if (css[i] \u003d\u003d null) {\n                anyStringNull \u003d true;\n                shortestStrLen \u003d 0;\n            } else {\n                allStringsNull \u003d false;\n                shortestStrLen \u003d Math.min(css[i].length(), shortestStrLen);\n                longestStrLen \u003d Math.max(css[i].length(), longestStrLen);\n            }\n        }\n\n        // handle lists containing all nulls or all empty strings\n        if (allStringsNull || (longestStrLen \u003d\u003d 0 \u0026\u0026 !anyStringNull)) {\n            return INDEX_NOT_FOUND;\n        }\n\n        // handle lists containing some nulls or some empty strings\n        if (shortestStrLen \u003d\u003d 0) {\n            return 0;\n        }\n\n        // find the position with the first difference across all strings\n        int firstDiff \u003d -1;\n        for (int stringPos \u003d 0; stringPos \u003c shortestStrLen; stringPos++) {\n            char comparisonChar \u003d css[0].charAt(stringPos);\n            for (int arrayPos \u003d 1; arrayPos \u003c arrayLen; arrayPos++) {\n                if (css[arrayPos].charAt(stringPos) !\u003d comparisonChar) {\n                    firstDiff \u003d stringPos;\n                    break;\n                }\n            }\n            if (firstDiff !\u003d -1) {\n                break;\n            }\n        }\n\n        if (firstDiff \u003d\u003d -1 \u0026\u0026 shortestStrLen !\u003d longestStrLen) {\n            // we compared all of the characters up to the length of the\n            // shortest string and didn\u0027t find a match, but the string lengths\n            // vary, so return the length of the shortest string.\n            return shortestStrLen;\n        }\n        return firstDiff;\n    }",
    "begin_line": 5910,
    "end_line": 5966,
    "comment": "/** \n * \u003cp\u003eCompares all CharSequences in an array and returns the index at which the CharSequences begin to differ.\u003c/p\u003e \u003cp\u003eFor example, \u003ccode\u003eindexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -\u003e 7\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e StringUtils.indexOfDifference(null) \u003d -1 StringUtils.indexOfDifference(new String[] {}) \u003d -1 StringUtils.indexOfDifference(new String[] {\"abc\"}) \u003d -1 StringUtils.indexOfDifference(new String[] {null, null}) \u003d -1 StringUtils.indexOfDifference(new String[] {\"\", \"\"}) \u003d -1 StringUtils.indexOfDifference(new String[] {\"\", null}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"abc\", null, null}) \u003d 0 StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}) \u003d -1 StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}) \u003d 1 StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}) \u003d 2 StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}) \u003d 2 StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}) \u003d 0 StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) \u003d 7 \u003c/pre\u003e\n * @param css  array of CharSequences, entries may be null\n * @return the index where the strings begin to differ; -1 if they are all equal\n * @since 2.4\n * @since 3.0 Changed signature from indexOfDifference(String...) to indexOfDifference(CharSequence...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getCommonPrefix#6001",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String)",
    "snippet": "public static String getCommonPrefix(String... strs) {\n        if (strs \u003d\u003d null || strs.length \u003d\u003d 0) {\n            return EMPTY;\n        }\n        int smallestIndexOfDiff \u003d indexOfDifference(strs);\n        if (smallestIndexOfDiff \u003d\u003d INDEX_NOT_FOUND) {\n            // all strings were identical\n            if (strs[0] \u003d\u003d null) {\n                return EMPTY;\n            }\n            return strs[0];\n        } else if (smallestIndexOfDiff \u003d\u003d 0) {\n            // there were no common initial characters\n            return EMPTY;\n        } else {\n            // we found a common initial character sequence\n            return strs[0].substring(0, smallestIndexOfDiff);\n        }\n    }",
    "begin_line": 6001,
    "end_line": 6019,
    "comment": "/** \n * \u003cp\u003eCompares all Strings in an array and returns the initial sequence of characters that is common to all of them.\u003c/p\u003e \u003cp\u003eFor example, \u003ccode\u003egetCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -\u003e \"i am a \"\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e StringUtils.getCommonPrefix(null) \u003d \"\" StringUtils.getCommonPrefix(new String[] {}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"abc\"}) \u003d \"abc\" StringUtils.getCommonPrefix(new String[] {null, null}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"\", \"\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"\", null}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}) \u003d \"abc\" StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}) \u003d \"a\" StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}) \u003d \"ab\" StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}) \u003d \"ab\" StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}) \u003d \"\" StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) \u003d \"i am a \" \u003c/pre\u003e\n * @param strs  array of String objects, entries may be null\n * @return the initial sequence of characters that are common to all Stringsin the array; empty String if the array is null, the elements are all null or if there is no common prefix.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getLevenshteinDistance#6059",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static int getLevenshteinDistance(CharSequence s, CharSequence t) {\n        if (s \u003d\u003d null || t \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Strings must not be null\");\n        }\n\n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length() + 1 by t.length() + 1,\n           we maintain two single-dimensional arrays of length s.length() + 1.  The first, d,\n           is the \u0027current working\u0027 distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren\u0027t really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        int n \u003d s.length(); // length of s\n        int m \u003d t.length(); // length of t\n\n        if (n \u003d\u003d 0) {\n            return m;\n        } else if (m \u003d\u003d 0) {\n            return n;\n        }\n\n        if (n \u003e m) {\n            // swap the input strings to consume less memory\n            CharSequence tmp \u003d s;\n            s \u003d t;\n            t \u003d tmp;\n            n \u003d m;\n            m \u003d t.length();\n        }\n\n        int p[] \u003d new int[n + 1]; //\u0027previous\u0027 cost array, horizontally\n        int d[] \u003d new int[n + 1]; // cost array, horizontally\n        int _d[]; //placeholder to assist in swapping p and d\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i \u003d 0; i \u003c\u003d n; i++) {\n            p[i] \u003d i;\n        }\n\n        for (j \u003d 1; j \u003c\u003d m; j++) {\n            t_j \u003d t.charAt(j - 1);\n            d[0] \u003d j;\n\n            for (i \u003d 1; i \u003c\u003d n; i++) {\n                cost \u003d s.charAt(i - 1) \u003d\u003d t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] \u003d Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);\n            }\n\n            // copy current distance counts to \u0027previous row\u0027 distance counts\n            _d \u003d p;\n            p \u003d d;\n            d \u003d _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return p[n];\n    }",
    "begin_line": 6059,
    "end_line": 6134,
    "comment": "/** \n * \u003cp\u003eFind the Levenshtein distance between two Strings.\u003c/p\u003e \u003cp\u003eThis is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).\u003c/p\u003e \u003cp\u003eThe previous implementation of the Levenshtein distance algorithm was from \u003ca href\u003d\"http://www.merriampark.com/ld.htm\"\u003ehttp://www.merriampark.com/ld.htm\u003c/a\u003e\u003c/p\u003e \u003cp\u003eChas Emerick has written an implementation in Java, which avoids an OutOfMemoryError which can occur when my Java implementation is used with very large strings.\u003cbr\u003e This implementation of the Levenshtein distance algorithm is from \u003ca href\u003d\"http://www.merriampark.com/ldjava.htm\"\u003ehttp://www.merriampark.com/ldjava.htm\u003c/a\u003e\u003c/p\u003e \u003cpre\u003e StringUtils.getLevenshteinDistance(null, *)             \u003d IllegalArgumentException StringUtils.getLevenshteinDistance(*, null)             \u003d IllegalArgumentException StringUtils.getLevenshteinDistance(\"\",\"\")               \u003d 0 StringUtils.getLevenshteinDistance(\"\",\"a\")              \u003d 1 StringUtils.getLevenshteinDistance(\"aaapppp\", \"\")       \u003d 7 StringUtils.getLevenshteinDistance(\"frog\", \"fog\")       \u003d 1 StringUtils.getLevenshteinDistance(\"fly\", \"ant\")        \u003d 3 StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") \u003d 7 StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") \u003d 7 StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") \u003d 8 StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    \u003d 1 \u003c/pre\u003e\n * @param s  the first String, must not be null\n * @param t  the second String, must not be null\n * @return result distance\n * @throws IllegalArgumentException if either String input {@code null}\n * @since 3.0 Changed signature from getLevenshteinDistance(String, String) togetLevenshteinDistance(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.getLevenshteinDistance#6168",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold) {\n        if (s \u003d\u003d null || t \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Strings must not be null\");\n        }\n        if (threshold \u003c 0) {\n            throw new IllegalArgumentException(\"Threshold must not be negative\");\n        }\n\n        /*\n        This implementation only computes the distance if it\u0027s less than or equal to the\n        threshold value, returning -1 if it\u0027s greater.  The advantage is performance: unbounded\n        distance is O(nm), but a bound of k allows us to reduce it to O(km) time by only \n        computing a diagonal stripe of width 2k + 1 of the cost table.\n        It is also possible to use this to compute the unbounded Levenshtein distance by starting\n        the threshold at 1 and doubling each time until the distance is found; this is O(dm), where\n        d is the distance.\n        \n        One subtlety comes from needing to ignore entries on the border of our stripe\n        eg.\n        p[] \u003d |#|#|#|*\n        d[] \u003d  *|#|#|#|\n        We must ignore the entry to the left of the leftmost member\n        We must ignore the entry above the rightmost member\n        \n        Another subtlety comes from our stripe running off the matrix if the strings aren\u0027t\n        of the same size.  Since string s is always swapped to be the shorter of the two, \n        the stripe will always run off to the upper right instead of the lower left of the matrix.\n        \n        As a concrete example, suppose s is of length 5, t is of length 7, and our threshold is 1.\n        In this case we\u0027re going to walk a stripe of length 3.  The matrix would look like so:\n        \n           1 2 3 4 5\n        1 |#|#| | | |\n        2 |#|#|#| | |\n        3 | |#|#|#| |\n        4 | | |#|#|#|\n        5 | | | |#|#|\n        6 | | | | |#|\n        7 | | | | | |\n\n        Note how the stripe leads off the table as there is no possible way to turn a string of length 5\n        into one of length 7 in edit distance of 1.\n        \n        Additionally, this implementation decreases memory usage by using two \n        single-dimensional arrays and swapping them back and forth instead of allocating\n        an entire n by m matrix.  This requires a few minor changes, such as immediately returning \n        when it\u0027s detected that the stripe has run off the matrix and initially filling the arrays with\n        large values so that entries we don\u0027t compute are ignored.\n\n        See Algorithms on Strings, Trees and Sequences by Dan Gusfield for some discussion.\n         */\n\n        int n \u003d s.length(); // length of s\n        int m \u003d t.length(); // length of t\n\n        // if one string is empty, the edit distance is necessarily the length of the other\n        if (n \u003d\u003d 0) {\n            return m \u003c\u003d threshold ? m : -1;\n        } else if (m \u003d\u003d 0) {\n            return n \u003c\u003d threshold ? n : -1;\n        }\n\n        if (n \u003e m) {\n            // swap the two strings to consume less memory\n            CharSequence tmp \u003d s;\n            s \u003d t;\n            t \u003d tmp;\n            n \u003d m;\n            m \u003d t.length();\n        }\n\n        int p[] \u003d new int[n + 1]; // \u0027previous\u0027 cost array, horizontally\n        int d[] \u003d new int[n + 1]; // cost array, horizontally\n        int _d[]; // placeholder to assist in swapping p and d\n\n        // fill in starting table values\n        int boundary \u003d Math.min(n, threshold) + 1;\n        for (int i \u003d 0; i \u003c boundary; i++) {\n            p[i] \u003d i;\n        }\n        // these fills ensure that the value above the rightmost entry of our \n        // stripe will be ignored in following loop iterations\n        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);\n        Arrays.fill(d, Integer.MAX_VALUE);\n\n        // iterates through t\n        for (int j \u003d 1; j \u003c\u003d m; j++) {\n            char t_j \u003d t.charAt(j - 1); // jth character of t\n            d[0] \u003d j;\n\n            // compute stripe indices, constrain to array size\n            int min \u003d Math.max(1, j - threshold);\n            int max \u003d Math.min(n, j + threshold);\n\n            // the stripe may lead off of the table if s and t are of different sizes\n            if (min \u003e max) {\n                return -1;\n            }\n\n            // ignore entry left of leftmost\n            if (min \u003e 1) {\n                d[min - 1] \u003d Integer.MAX_VALUE;\n            }\n\n            // iterates through [min, max] in s\n            for (int i \u003d min; i \u003c\u003d max; i++) {\n                if (s.charAt(i - 1) \u003d\u003d t_j) {\n                    // diagonally left and up\n                    d[i] \u003d p[i - 1];\n                } else {\n                    // 1 + minimum of cell to the left, to the top, diagonally left and up\n                    d[i] \u003d 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\n                }\n            }\n\n            // copy current distance counts to \u0027previous row\u0027 distance counts\n            _d \u003d p;\n            p \u003d d;\n            d \u003d _d;\n        }\n\n        // if p[n] is greater than the threshold, there\u0027s no guarantee on it being the correct\n        // distance\n        if (p[n] \u003c\u003d threshold) {\n            return p[n];\n        } else {\n            return -1;\n        }\n    }",
    "begin_line": 6168,
    "end_line": 6296,
    "comment": "/** \n * \u003cp\u003eFind the Levenshtein distance between two Strings if it\u0027s less than or equal to a given  threshold.\u003c/p\u003e \u003cp\u003eThis is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).\u003c/p\u003e \u003cp\u003eThis implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield and Chas Emerick\u0027s implementation of the Levenshtein distance algorithm from \u003ca href\u003d\"http://www.merriampark.com/ld.htm\"\u003ehttp://www.merriampark.com/ld.htm\u003c/a\u003e\u003c/p\u003e \u003cpre\u003e StringUtils.getLevenshteinDistance(null, *, *)             \u003d IllegalArgumentException StringUtils.getLevenshteinDistance(*, null, *)             \u003d IllegalArgumentException StringUtils.getLevenshteinDistance(*, *, -1)               \u003d IllegalArgumentException StringUtils.getLevenshteinDistance(\"\",\"\", 0)               \u003d 0 StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 8)       \u003d 7 StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 7)       \u003d 7 StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 6))      \u003d -1 StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 7) \u003d 7 StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 6) \u003d -1 StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 7) \u003d 7 StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 6) \u003d -1 \u003c/pre\u003e\n * @param s  the first String, must not be null\n * @param t  the second String, must not be null\n * @param threshold the target threshold, must not be negative\n * @return result distance, or {@code -1} if the distance would be greater than the threshold\n * @throws IllegalArgumentException if either String input {@code null} or negative threshold\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.startsWith#6323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean startsWith(CharSequence str, CharSequence prefix) {\n        return startsWith(str, prefix, false);\n    }",
    "begin_line": 6323,
    "end_line": 6325,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence starts with a specified prefix.\u003c/p\u003e \u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.startsWith(null, null)      \u003d true StringUtils.startsWith(null, \"abc\")     \u003d false StringUtils.startsWith(\"abcdef\", null)  \u003d false StringUtils.startsWith(\"abcdef\", \"abc\") \u003d true StringUtils.startsWith(\"ABCDEF\", \"abc\") \u003d false \u003c/pre\u003e\n * @see java.lang.String#startsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param prefix the prefix to find, may be null\n * @return {@code true} if the CharSequence starts with the prefix, case sensitive, orboth  {@code null}\n * @since 2.4\n * @since 3.0 Changed signature from startsWith(String, String) to startsWith(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.startsWithIgnoreCase#6349",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix) {\n        return startsWith(str, prefix, true);\n    }",
    "begin_line": 6349,
    "end_line": 6351,
    "comment": "/** \n * \u003cp\u003eCase insensitive check if a CharSequence starts with a specified prefix.\u003c/p\u003e \u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.startsWithIgnoreCase(null, null)      \u003d true StringUtils.startsWithIgnoreCase(null, \"abc\")     \u003d false StringUtils.startsWithIgnoreCase(\"abcdef\", null)  \u003d false StringUtils.startsWithIgnoreCase(\"abcdef\", \"abc\") \u003d true StringUtils.startsWithIgnoreCase(\"ABCDEF\", \"abc\") \u003d true \u003c/pre\u003e\n * @see java.lang.String#startsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param prefix the prefix to find, may be null\n * @return {@code true} if the CharSequence starts with the prefix, case insensitive, orboth  {@code null}\n * @since 2.4\n * @since 3.0 Changed signature from startsWithIgnoreCase(String, String) to startsWithIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.startsWith#6364",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)",
    "snippet": "private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase) {\n        if (str \u003d\u003d null || prefix \u003d\u003d null) {\n            return (str \u003d\u003d null \u0026\u0026 prefix \u003d\u003d null);\n        }\n        if (prefix.length() \u003e str.length()) {\n            return false;\n        }\n        return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());\n    }",
    "begin_line": 6364,
    "end_line": 6372,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence starts with a specified prefix (optionally case insensitive).\u003c/p\u003e\n * @see java.lang.String#startsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.startsWithAny#6393",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings) {\n        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c searchStrings.length; i++) {\n            CharSequence searchString \u003d searchStrings[i];\n            if (StringUtils.startsWith(string, searchString)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 6393,
    "end_line": 6404,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence starts with any of an array of specified strings.\u003c/p\u003e \u003cpre\u003e StringUtils.startsWithAny(null, null)      \u003d false StringUtils.startsWithAny(null, new String[] {\"abc\"})  \u003d false StringUtils.startsWithAny(\"abcxyz\", null)     \u003d false StringUtils.startsWithAny(\"abcxyz\", new String[] {\"\"}) \u003d false StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}) \u003d true StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) \u003d true \u003c/pre\u003e\n * @param string  the CharSequence to check, may be null\n * @param searchStrings the CharSequences to find, may be null or empty\n * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, orboth  {@code null}\n * @since 2.5\n * @since 3.0 Changed signature from startsWithAny(String, String[]) to startsWithAny(CharSequence, CharSequence...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.endsWith#6432",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean endsWith(CharSequence str, CharSequence suffix) {\n        return endsWith(str, suffix, false);\n    }",
    "begin_line": 6432,
    "end_line": 6434,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence ends with a specified suffix.\u003c/p\u003e \u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.endsWith(null, null)      \u003d true StringUtils.endsWith(null, \"def\")     \u003d false StringUtils.endsWith(\"abcdef\", null)  \u003d false StringUtils.endsWith(\"abcdef\", \"def\") \u003d true StringUtils.endsWith(\"ABCDEF\", \"def\") \u003d false StringUtils.endsWith(\"ABCDEF\", \"cde\") \u003d false \u003c/pre\u003e\n * @see java.lang.String#endsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param suffix the suffix to find, may be null\n * @return {@code true} if the CharSequence ends with the suffix, case sensitive, orboth  {@code null}\n * @since 2.4\n * @since 3.0 Changed signature from endsWith(String, String) to endsWith(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.endsWithIgnoreCase#6459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix) {\n        return endsWith(str, suffix, true);\n    }",
    "begin_line": 6459,
    "end_line": 6461,
    "comment": "/** \n * \u003cp\u003eCase insensitive check if a CharSequence ends with a specified suffix.\u003c/p\u003e \u003cp\u003e {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.\u003c/p\u003e \u003cpre\u003e StringUtils.endsWithIgnoreCase(null, null)      \u003d true StringUtils.endsWithIgnoreCase(null, \"def\")     \u003d false StringUtils.endsWithIgnoreCase(\"abcdef\", null)  \u003d false StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\") \u003d true StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\") \u003d true StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\") \u003d false \u003c/pre\u003e\n * @see java.lang.String#endsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param suffix the suffix to find, may be null\n * @return {@code true} if the CharSequence ends with the suffix, case insensitive, orboth  {@code null}\n * @since 2.4\n * @since 3.0 Changed signature from endsWithIgnoreCase(String, String) to endsWithIgnoreCase(CharSequence, CharSequence)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.endsWith#6474",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)",
    "snippet": "private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase) {\n        if (str \u003d\u003d null || suffix \u003d\u003d null) {\n            return str \u003d\u003d null \u0026\u0026 suffix \u003d\u003d null;\n        }\n        if (suffix.length() \u003e str.length()) {\n            return false;\n        }\n        int strOffset \u003d str.length() - suffix.length();\n        return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());\n    }",
    "begin_line": 6474,
    "end_line": 6483,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence ends with a specified suffix (optionally case insensitive).\u003c/p\u003e\n * @see java.lang.String#endsWith(String)\n * @param str  the CharSequence to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.normalizeSpace#6526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String)",
    "snippet": "public static String normalizeSpace(String str) {\n        if (str \u003d\u003d null) {\n            return null;\n        }\n        return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll(\" \");\n    }",
    "begin_line": 6526,
    "end_line": 6531,
    "comment": "/** \n * \u003cp\u003e Similar to \u003ca href\u003d\"http://www.w3.org/TR/xpath/#function-normalize-space\"\u003ehttp://www.w3.org/TR/xpath/#function-normalize -space\u003c/a\u003e \u003c/p\u003e \u003cp\u003e The function returns the argument string with whitespace normalized by using \u003ccode\u003e {@link #trim(String)}\u003c/code\u003e to remove leading and trailing whitespace and then replacing sequences of whitespace characters by a single space. \u003c/p\u003e In XML Whitespace characters are the same as those allowed by the \u003ca href\u003d\"http://www.w3.org/TR/REC-xml/#NT-S\"\u003eS\u003c/a\u003e production, which is S ::\u003d (#x20 | #x9 | #xD | #xA)+ \u003cp\u003e Java\u0027s regexp pattern \\s defines whitespace as [ \\t\\n\\x0B\\f\\r] \u003cp\u003e For reference: \u003cul\u003e \u003cli\u003e\\x0B \u003d vertical tab\u003c/li\u003e \u003cli\u003e\\f \u003d #xC \u003d form feed\u003c/li\u003e \u003cli\u003e#x20 \u003d space\u003c/li\u003e \u003cli\u003e#x9 \u003d \\t\u003c/li\u003e \u003cli\u003e#xA \u003d \\n\u003c/li\u003e \u003cli\u003e#xD \u003d \\r\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e \u003cp\u003e The difference is that Java\u0027s whitespace includes vertical tab and form feed, which this functional will also normalize. Additonally \u003ccode\u003e {@link #trim(String)}\u003c/code\u003e removes control characters (char \u0026lt;\u003d 32) from both ends of this String. \u003c/p\u003e\n * @see Pattern\n * @see #trim(String)\n * @see \u003ca\n     *      href\u003d\"http://www.w3.org/TR/xpath/#function-normalize-space\"\u003ehttp://www.w3.org/TR/xpath/#function-normalize-space\u003c/a\u003e\n * @param str the source String to normalize whitespaces from, may be null\n * @return the modified string with whitespace normalized, {@code null} if null String input\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtils.endsWithAny#6551",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/StringUtils.java",
    "class_name": "org.apache.commons.lang3.StringUtils",
    "signature": "org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence)",
    "snippet": "public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings) {\n        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c searchStrings.length; i++) {\n            CharSequence searchString \u003d searchStrings[i];\n            if (StringUtils.endsWith(string, searchString)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 6551,
    "end_line": 6562,
    "comment": "/** \n * \u003cp\u003eCheck if a CharSequence ends with any of an array of specified strings.\u003c/p\u003e \u003cpre\u003e StringUtils.endsWithAny(null, null)      \u003d false StringUtils.endsWithAny(null, new String[] {\"abc\"})  \u003d false StringUtils.endsWithAny(\"abcxyz\", null)     \u003d false StringUtils.endsWithAny(\"abcxyz\", new String[] {\"\"}) \u003d true StringUtils.endsWithAny(\"abcxyz\", new String[] {\"xyz\"}) \u003d true StringUtils.endsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) \u003d true \u003c/pre\u003e\n * @param string  the CharSequence to check, may be null\n * @param searchStrings the CharSequences to find, may be null or empty\n * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, orboth  {@code null}\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]