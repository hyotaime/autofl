[
  {
    "name": "ArrayUtils.ArrayUtils#143",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.ArrayUtils()",
    "snippet": "public ArrayUtils() {\n      super();\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * \u003cp\u003eArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as \u003ccode\u003eArrayUtils.clone(new int[] {2})\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#160",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object)",
    "snippet": "public static String toString(Object array) {\n        return toString(array, \"{}\");\n    }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String, treating \u003ccode\u003enull\u003c/code\u003e as an empty array.\u003c/p\u003e \u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.\u003c/p\u003e \u003cp\u003eThe format is that of Java source code, for example \u003ccode\u003e{a,b}\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to get a toString for, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a String representation of the array, \u0027{}\u0027 if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#176",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object, java.lang.String)",
    "snippet": "public static String toString(Object array, String stringIfNull) {\n        if (array \u003d\u003d null) {\n            return stringIfNull;\n        }\n        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n    }",
    "begin_line": 176,
    "end_line": 181,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String handling \u003ccode\u003enull\u003c/code\u003es.\u003c/p\u003e \u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.\u003c/p\u003e \u003cp\u003eThe format is that of Java source code, for example \u003ccode\u003e{a,b}\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to get a toString for, may be \u003ccode\u003enull\u003c/code\u003e\n * @param stringIfNull  the String to return if the array is \u003ccode\u003enull\u003c/code\u003e\n * @return a String representation of the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEquals#193",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isEquals(Object array1, Object array2) {\n        return new EqualsBuilder().append(array1, array2).isEquals();\n    }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "/** \n * \u003cp\u003eCompares two arrays, using equals(), handling multi-dimensional arrays correctly.\u003c/p\u003e \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\u003c/p\u003e\n * @param array1  the left hand array to compare, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2  the right hand array to compare, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if the arrays are equal\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toMap#224",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toMap(java.lang.Object[])",
    "snippet": "public static Map\u003cObject, Object\u003e toMap(Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Map\u003cObject, Object\u003e map \u003d new HashMap\u003cObject, Object\u003e((int) (array.length * 1.5));\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Object object \u003d array[i];\n            if (object instanceof Map.Entry\u003c?, ?\u003e) {\n                Map.Entry\u003c?,?\u003e entry \u003d (Map.Entry\u003c?,?\u003e) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                Object[] entry \u003d (Object[]) object;\n                if (entry.length \u003c 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }",
    "begin_line": 224,
    "end_line": 249,
    "comment": "/** \n * \u003cp\u003eConverts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value.\u003c/p\u003e \u003cp\u003eThis method can be used to initialize:\u003c/p\u003e \u003cpre\u003e // Create a Map mapping colors. Map colorMap \u003d MapUtils.toMap(new String[][] {{ {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"}}); \u003c/pre\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003eMap\u003c/code\u003e that was created from the array\n * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements\n * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toArray#291",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toArray(T)",
    "snippet": "public static \u003cT\u003e T[] toArray(final T... items)\n    {\n        return items;\n    }",
    "begin_line": 291,
    "end_line": 294,
    "comment": "/** \n * Create a type-safe generic array. \u003cp\u003eArrays are covariant i.e. they cannot be created from a generic type:\u003c/p\u003e \u003cpre\u003e public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return T[size]; // compiler error here } public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return (T[])Object[size]; // ClassCastException at runtime } \u003c/pre\u003e \u003cp\u003eTherefore new arrays of generic types can be created with this method, e.g. an arrays of Strings:\u003c/p\u003e \u003cpre\u003e String[] array \u003d ArrayUtils.toArray(\"1\", \"2\"); String[] emptyArray \u003d ArrayUtils.\u0026lt;String\u0026gt;toArray(); \u003c/pre\u003e The method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array. Note, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in \u003ccode\u003eNumber[] array \u003d ArrayUtils.\u003cNumber\u003etoArray(new Integer(42), new Double(Math.PI))\u003c/code\u003e, there is no real advantage to \u003ccode\u003enew Number[] {new Integer(42), new Double(Math.PI)}\u003c/code\u003e anymore.\n * @param \u003c T \u003e   the array\u0027s element type\n * @param items the items of the array\n * @return the array\n * @since  3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#310",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
    "snippet": "public static \u003cT\u003e T[] clone(T[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 310,
    "end_line": 315,
    "comment": "/** \n * \u003cp\u003eShallow clones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to shallow clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#326",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(long[])",
    "snippet": "public static long[] clone(long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 326,
    "end_line": 331,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#342",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(int[])",
    "snippet": "public static int[] clone(int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 342,
    "end_line": 347,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(short[])",
    "snippet": "public static short[] clone(short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 358,
    "end_line": 363,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#374",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(char[])",
    "snippet": "public static char[] clone(char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 374,
    "end_line": 379,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#390",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(byte[])",
    "snippet": "public static byte[] clone(byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 390,
    "end_line": 395,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#406",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(double[])",
    "snippet": "public static double[] clone(double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 406,
    "end_line": 411,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#422",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(float[])",
    "snippet": "public static float[] clone(float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 422,
    "end_line": 427,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#438",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(boolean[])",
    "snippet": "public static boolean[] clone(boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 438,
    "end_line": 443,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to clone, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the cloned array, \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])",
    "snippet": "public static Object[] nullToEmpty(Object[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 459,
    "end_line": 466,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#480",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.String[])",
    "snippet": "public static String[] nullToEmpty(String[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_STRING_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 480,
    "end_line": 487,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#501",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(long[])",
    "snippet": "public static long[] nullToEmpty(long[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_LONG_ARRAY;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 501,
    "end_line": 509,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#523",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(int[])",
    "snippet": "public static int[] nullToEmpty(int[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_INT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 523,
    "end_line": 530,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#544",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(short[])",
    "snippet": "public static short[] nullToEmpty(short[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_SHORT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 544,
    "end_line": 551,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#565",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(char[])",
    "snippet": "public static char[] nullToEmpty(char[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_CHAR_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 565,
    "end_line": 572,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#586",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(byte[])",
    "snippet": "public static byte[] nullToEmpty(byte[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_BYTE_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 586,
    "end_line": 593,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#607",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(double[])",
    "snippet": "public static double[] nullToEmpty(double[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_DOUBLE_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 607,
    "end_line": 614,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#628",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(float[])",
    "snippet": "public static float[] nullToEmpty(float[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_FLOAT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 628,
    "end_line": 635,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#649",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(boolean[])",
    "snippet": "public static boolean[] nullToEmpty(boolean[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_BOOLEAN_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 649,
    "end_line": 656,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#670",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Long[])",
    "snippet": "public static Long[] nullToEmpty(Long[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 670,
    "end_line": 677,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#691",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Integer[])",
    "snippet": "public static Integer[] nullToEmpty(Integer[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 691,
    "end_line": 698,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#712",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Short[])",
    "snippet": "public static Short[] nullToEmpty(Short[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 712,
    "end_line": 719,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#733",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Character[])",
    "snippet": "public static Character[] nullToEmpty(Character[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 733,
    "end_line": 740,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#754",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Byte[])",
    "snippet": "public static Byte[] nullToEmpty(Byte[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 754,
    "end_line": 761,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#775",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Double[])",
    "snippet": "public static Double[] nullToEmpty(Double[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 775,
    "end_line": 782,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#796",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Float[])",
    "snippet": "public static Float[] nullToEmpty(Float[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 796,
    "end_line": 803,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#817",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Boolean[])",
    "snippet": "public static Boolean[] nullToEmpty(Boolean[] array) {\n        if (array \u003d\u003d null) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 817,
    "end_line": 824,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a \u003ccode\u003enull\u003c/code\u003e reference to an empty one..\u003c/p\u003e \u003cp\u003eThis method returns an empty array for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with  the empty \u003ccode\u003epublic static\u003c/code\u003e references in this class.\u003c/p\u003e\n * @param array  the array to check for \u003ccode\u003enull\u003c/code\u003e or empty\n * @return the same array, \u003ccode\u003epublic static\u003c/code\u003e empty array if \u003ccode\u003enull\u003c/code\u003e or empty input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#855",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(T[], int, int)",
    "snippet": "public static \u003cT\u003e T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        Class\u003c?\u003e type \u003d array.getClass().getComponentType();\n        if (newSize \u003c\u003d 0) {\n            @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n            final T[] emptyArray \u003d (T[]) Array.newInstance(type, 0);\n            return emptyArray;\n        }\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        T[] subarray \u003d (T[]) Array.newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 855,
    "end_line": 876,
    "comment": "/** \n * \u003cp\u003eProduces a new array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e \u003cp\u003eThe component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type \u003ccode\u003eDate\u003c/code\u003e, the following usage is envisaged:\u003c/p\u003e \u003cpre\u003e Date[] someDates \u003d (Date[])ArrayUtils.subarray(allDates, 2, 5); \u003c/pre\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#897",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(long[], int, int)",
    "snippet": "public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n\n        long[] subarray \u003d new long[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 897,
    "end_line": 915,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003elong\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#936",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(int[], int, int)",
    "snippet": "public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n\n        int[] subarray \u003d new int[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 936,
    "end_line": 954,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003eint\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#975",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(short[], int, int)",
    "snippet": "public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n\n        short[] subarray \u003d new short[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 975,
    "end_line": 993,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003eshort\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#1014",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(char[], int, int)",
    "snippet": "public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n\n        char[] subarray \u003d new char[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 1014,
    "end_line": 1032,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003echar\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#1053",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(byte[], int, int)",
    "snippet": "public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n\n        byte[] subarray \u003d new byte[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 1053,
    "end_line": 1071,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003ebyte\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#1092",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(double[], int, int)",
    "snippet": "public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n\n        double[] subarray \u003d new double[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 1092,
    "end_line": 1110,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003edouble\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#1131",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(float[], int, int)",
    "snippet": "public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n\n        float[] subarray \u003d new float[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 1131,
    "end_line": 1149,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003efloat\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#1170",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(boolean[], int, int)",
    "snippet": "public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n\n        boolean[] subarray \u003d new boolean[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 1170,
    "end_line": 1188,
    "comment": "/** \n * \u003cp\u003eProduces a new \u003ccode\u003eboolean\u003c/code\u003e array containing the elements between the start and end indices.\u003c/p\u003e \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1203",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
    "snippet": "public static boolean isSameLength(Object[] array1, Object[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1203,
    "end_line": 1210,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e. \u003cp\u003eAny multi-dimensional aspects of the arrays are ignored.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1221",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(long[], long[])",
    "snippet": "public static boolean isSameLength(long[] array1, long[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1221,
    "end_line": 1228,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1239",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(int[], int[])",
    "snippet": "public static boolean isSameLength(int[] array1, int[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1239,
    "end_line": 1246,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1257",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(short[], short[])",
    "snippet": "public static boolean isSameLength(short[] array1, short[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1257,
    "end_line": 1264,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1275",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(char[], char[])",
    "snippet": "public static boolean isSameLength(char[] array1, char[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1275,
    "end_line": 1282,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1293",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(byte[], byte[])",
    "snippet": "public static boolean isSameLength(byte[] array1, byte[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1293,
    "end_line": 1300,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1311",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(double[], double[])",
    "snippet": "public static boolean isSameLength(double[] array1, double[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1311,
    "end_line": 1318,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1329",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(float[], float[])",
    "snippet": "public static boolean isSameLength(float[] array1, float[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1329,
    "end_line": 1336,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#1347",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(boolean[], boolean[])",
    "snippet": "public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n        if ((array1 \u003d\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array2.length \u003e 0) ||\n            (array2 \u003d\u003d null \u0026\u0026 array1 !\u003d null \u0026\u0026 array1.length \u003e 0) ||\n            (array1 !\u003d null \u0026\u0026 array2 !\u003d null \u0026\u0026 array1.length !\u003d array2.length)) {\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 1347,
    "end_line": 1354,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating \u003ccode\u003enull\u003c/code\u003e arrays as length \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n * @param array1 the first array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if length of arrays matches, treating\u003ccode\u003enull\u003c/code\u003e as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.getLength#1377",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.getLength(java.lang.Object)",
    "snippet": "public static int getLength(Object array) {\n        if (array \u003d\u003d null) {\n            return 0;\n        }\n        return Array.getLength(array);\n    }",
    "begin_line": 1377,
    "end_line": 1382,
    "comment": "/** \n * \u003cp\u003eReturns the length of the specified array. This method can deal with \u003ccode\u003eObject\u003c/code\u003e arrays and with primitive arrays.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e is returned.\u003c/p\u003e \u003cpre\u003e ArrayUtils.getLength(null)            \u003d 0 ArrayUtils.getLength([])              \u003d 0 ArrayUtils.getLength([null])          \u003d 1 ArrayUtils.getLength([true, false])   \u003d 2 ArrayUtils.getLength([1, 2, 3])       \u003d 3 ArrayUtils.getLength([\"a\", \"b\", \"c\"]) \u003d 3 \u003c/pre\u003e\n * @param array  the array to retrieve the length from, may be null\n * @return The length of the array, or \u003ccode\u003e0\u003c/code\u003e if the array is \u003ccode\u003enull\u003c/code\u003e\n * @throws IllegalArgumentException if the object arguement is not an array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameType#1393",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameType(Object array1, Object array2) {\n        if (array1 \u003d\u003d null || array2 \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        }\n        return array1.getClass().getName().equals(array2.getClass().getName());\n    }",
    "begin_line": 1393,
    "end_line": 1398,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same type taking into account multi-dimensional arrays.\u003c/p\u003e\n * @param array1 the first array, must not be \u003ccode\u003enull\u003c/code\u003e\n * @param array2 the second array, must not be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if type of arrays matches\n * @throws IllegalArgumentException if either array is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1411",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[])",
    "snippet": "public static void reverse(Object[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        Object tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1411,
    "end_line": 1425,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThere is no special handling for multi-dimensional arrays.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1434",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[])",
    "snippet": "public static void reverse(long[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        long tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1434,
    "end_line": 1448,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1457",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[])",
    "snippet": "public static void reverse(int[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        int tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1457,
    "end_line": 1471,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1480",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[])",
    "snippet": "public static void reverse(short[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        short tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1480,
    "end_line": 1494,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1503",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[])",
    "snippet": "public static void reverse(char[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        char tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1503,
    "end_line": 1517,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[])",
    "snippet": "public static void reverse(byte[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        byte tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1526,
    "end_line": 1540,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1549",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[])",
    "snippet": "public static void reverse(double[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        double tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1549,
    "end_line": 1563,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1572",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[])",
    "snippet": "public static void reverse(float[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        float tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1572,
    "end_line": 1586,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#1595",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[])",
    "snippet": "public static void reverse(boolean[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d 0;\n        int j \u003d array.length - 1;\n        boolean tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 1595,
    "end_line": 1609,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e \u003cp\u003eThis method does nothing for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to reverse, may be \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1626",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int indexOf(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }",
    "begin_line": 1626,
    "end_line": 1628,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param objectToFind  the object to find, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1644",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1644,
    "end_line": 1665,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param objectToFind  the object to find, may be \u003ccode\u003enull\u003c/code\u003e\n * @param startIndex  the index to start searching at\n * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1677",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int lastIndexOf(Object[] array, Object objectToFind) {\n        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 1677,
    "end_line": 1679,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param objectToFind  the object to find, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1695",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1695,
    "end_line": 1718,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger thanthe array length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param objectToFind  the object to find, may be \u003ccode\u003enull\u003c/code\u003e\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1729",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
    "snippet": "public static boolean contains(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1729,
    "end_line": 1731,
    "comment": "/** \n * \u003cp\u003eChecks if the object is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param objectToFind  the object to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1745",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long)",
    "snippet": "public static int indexOf(long[] array, long valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 1745,
    "end_line": 1747,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1763",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long, int)",
    "snippet": "public static int indexOf(long[] array, long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1763,
    "end_line": 1776,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1788",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long)",
    "snippet": "public static int lastIndexOf(long[] array, long valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 1788,
    "end_line": 1790,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1806",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, int)",
    "snippet": "public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1806,
    "end_line": 1821,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1832",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(long[], long)",
    "snippet": "public static boolean contains(long[] array, long valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1832,
    "end_line": 1834,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1848",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int)",
    "snippet": "public static int indexOf(int[] array, int valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 1848,
    "end_line": 1850,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1866",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int, int)",
    "snippet": "public static int indexOf(int[] array, int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1866,
    "end_line": 1879,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1891",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
    "snippet": "public static int lastIndexOf(int[] array, int valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 1891,
    "end_line": 1893,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1909",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int, int)",
    "snippet": "public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1909,
    "end_line": 1924,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1935",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(int[], int)",
    "snippet": "public static boolean contains(int[] array, int valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1935,
    "end_line": 1937,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1951",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short)",
    "snippet": "public static int indexOf(short[] array, short valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 1951,
    "end_line": 1953,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#1969",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short, int)",
    "snippet": "public static int indexOf(short[] array, short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 1969,
    "end_line": 1982,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#1994",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short)",
    "snippet": "public static int lastIndexOf(short[] array, short valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 1994,
    "end_line": 1996,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2012",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short, int)",
    "snippet": "public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2012,
    "end_line": 2027,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2038",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(short[], short)",
    "snippet": "public static boolean contains(short[] array, short valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2038,
    "end_line": 2040,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2055",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char)",
    "snippet": "public static int indexOf(char[] array, char valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2055,
    "end_line": 2057,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2074",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char, int)",
    "snippet": "public static int indexOf(char[] array, char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2074,
    "end_line": 2087,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2100",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char)",
    "snippet": "public static int lastIndexOf(char[] array, char valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 2100,
    "end_line": 2102,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2119",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char, int)",
    "snippet": "public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2119,
    "end_line": 2134,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2146",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(char[], char)",
    "snippet": "public static boolean contains(char[] array, char valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2146,
    "end_line": 2148,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2162",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte)",
    "snippet": "public static int indexOf(byte[] array, byte valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2162,
    "end_line": 2164,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2180",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte, int)",
    "snippet": "public static int indexOf(byte[] array, byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2180,
    "end_line": 2193,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2205",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte)",
    "snippet": "public static int lastIndexOf(byte[] array, byte valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 2205,
    "end_line": 2207,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte, int)",
    "snippet": "public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2223,
    "end_line": 2238,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2249",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(byte[], byte)",
    "snippet": "public static boolean contains(byte[] array, byte valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2249,
    "end_line": 2251,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2265",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double)",
    "snippet": "public static int indexOf(double[] array, double valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2265,
    "end_line": 2267,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2282",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, double)",
    "snippet": "public static int indexOf(double[] array, double valueToFind, double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 2282,
    "end_line": 2284,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2300",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int)",
    "snippet": "public static int indexOf(double[] array, double valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2300,
    "end_line": 2313,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int, double)",
    "snippet": "public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        double min \u003d valueToFind - tolerance;\n        double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2332,
    "end_line": 2347,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2359",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double)",
    "snippet": "public static int lastIndexOf(double[] array, double valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 2359,
    "end_line": 2361,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2376",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, double)",
    "snippet": "public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n    }",
    "begin_line": 2376,
    "end_line": 2378,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2394",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int)",
    "snippet": "public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2394,
    "end_line": 2409,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2428",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int, double)",
    "snippet": "public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        double min \u003d valueToFind - tolerance;\n        double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2428,
    "end_line": 2445,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @param tolerance  search for value within plus/minus this amount\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2456",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double)",
    "snippet": "public static boolean contains(double[] array, double valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2456,
    "end_line": 2458,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2473",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double, double)",
    "snippet": "public static boolean contains(double[] array, double valueToFind, double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2473,
    "end_line": 2475,
    "comment": "/** \n * \u003cp\u003eChecks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance).\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search\n * @param valueToFind  the value to find\n * @param tolerance  the array contains the tolerance of the search\n * @return true if value falling within tolerance is in array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2489",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float)",
    "snippet": "public static int indexOf(float[] array, float valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2489,
    "end_line": 2491,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2507",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float, int)",
    "snippet": "public static int indexOf(float[] array, float valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2507,
    "end_line": 2520,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2532",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float)",
    "snippet": "public static int lastIndexOf(float[] array, float valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 2532,
    "end_line": 2534,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2550",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float, int)",
    "snippet": "public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2550,
    "end_line": 2565,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger than thearray length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2576",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(float[], float)",
    "snippet": "public static boolean contains(float[] array, float valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2576,
    "end_line": 2578,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2592",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean)",
    "snippet": "public static int indexOf(boolean[] array, boolean valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2592,
    "end_line": 2594,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2611",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean, int)",
    "snippet": "public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2611,
    "end_line": 2624,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e).\u003c/p\u003e\n * @param array  the array to search through for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003earray input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2637",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean)",
    "snippet": "public static int lastIndexOf(boolean[] array, boolean valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 2637,
    "end_line": 2639,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if\u003ccode\u003enull\u003c/code\u003e array input.\u003c/p\u003e\n * @param array  the array to travers backwords looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#2655",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
    "snippet": "public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2655,
    "end_line": 2670,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e). A startIndex larger thanthe array length will search from the end of the array.\u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueToFind  the value to find\n * @param startIndex  the start index to travers backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (\u003ccode\u003e-1\u003c/code\u003e) if not found or \u003ccode\u003enull\u003c/code\u003e array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#2681",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(boolean[], boolean)",
    "snippet": "public static boolean contains(boolean[] array, boolean valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 2681,
    "end_line": 2683,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e \u003cp\u003eThe method returns \u003ccode\u003efalse\u003c/code\u003e if a \u003ccode\u003enull\u003c/code\u003e array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2699",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[])",
    "snippet": "public static char[] toPrimitive(Character[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].charValue();\n        }\n        return result;\n    }",
    "begin_line": 2699,
    "end_line": 2710,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Characters to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eCharacter\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003echar\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2721",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[], char)",
    "snippet": "public static char[] toPrimitive(Character[] array, char valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Character b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.charValue());\n        }\n        return result;\n    }",
    "begin_line": 2721,
    "end_line": 2733,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Character to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eCharacter\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003echar\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#2743",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(char[])",
    "snippet": "public static Character[] toObject(char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        final Character[] result \u003d new Character[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Character.valueOf(array[i]);\n        }\n        return result;\n     }",
    "begin_line": 2743,
    "end_line": 2754,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive chars to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array a \u003ccode\u003echar\u003c/code\u003e array\n * @return a \u003ccode\u003eCharacter\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2767",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[])",
    "snippet": "public static long[] toPrimitive(Long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].longValue();\n        }\n        return result;\n    }",
    "begin_line": 2767,
    "end_line": 2778,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Longs to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eLong\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003elong\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2789",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[], long)",
    "snippet": "public static long[] toPrimitive(Long[] array, long valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Long b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.longValue());\n        }\n        return result;\n    }",
    "begin_line": 2789,
    "end_line": 2801,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Long to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eLong\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003elong\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#2811",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(long[])",
    "snippet": "public static Long[] toObject(long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        final Long[] result \u003d new Long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Long.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 2811,
    "end_line": 2822,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive longs to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003elong\u003c/code\u003e array\n * @return a \u003ccode\u003eLong\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2835",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[])",
    "snippet": "public static int[] toPrimitive(Integer[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].intValue();\n        }\n        return result;\n    }",
    "begin_line": 2835,
    "end_line": 2846,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integers to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eInteger\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return an \u003ccode\u003eint\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2857",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
    "snippet": "public static int[] toPrimitive(Integer[] array, int valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Integer b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.intValue());\n        }\n        return result;\n    }",
    "begin_line": 2857,
    "end_line": 2869,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integer to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eInteger\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return an \u003ccode\u003eint\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#2879",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(int[])",
    "snippet": "public static Integer[] toObject(int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        final Integer[] result \u003d new Integer[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Integer.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 2879,
    "end_line": 2890,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive ints to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  an \u003ccode\u003eint\u003c/code\u003e array\n * @return an \u003ccode\u003eInteger\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2903",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[])",
    "snippet": "public static short[] toPrimitive(Short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].shortValue();\n        }\n        return result;\n    }",
    "begin_line": 2903,
    "end_line": 2914,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Shorts to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eShort\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003ebyte\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2925",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[], short)",
    "snippet": "public static short[] toPrimitive(Short[] array, short valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Short b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.shortValue());\n        }\n        return result;\n    }",
    "begin_line": 2925,
    "end_line": 2937,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Short to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eShort\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003ebyte\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#2947",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(short[])",
    "snippet": "public static Short[] toObject(short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        final Short[] result \u003d new Short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Short.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 2947,
    "end_line": 2958,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive shorts to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eshort\u003c/code\u003e array\n * @return a \u003ccode\u003eShort\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2971",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[])",
    "snippet": "public static byte[] toPrimitive(Byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].byteValue();\n        }\n        return result;\n    }",
    "begin_line": 2971,
    "end_line": 2982,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eByte\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003ebyte\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#2993",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
    "snippet": "public static byte[] toPrimitive(Byte[] array, byte valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Byte b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.byteValue());\n        }\n        return result;\n    }",
    "begin_line": 2993,
    "end_line": 3005,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eByte\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003ebyte\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#3015",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(byte[])",
    "snippet": "public static Byte[] toObject(byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        final Byte[] result \u003d new Byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Byte.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 3015,
    "end_line": 3026,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive bytes to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003ebyte\u003c/code\u003e array\n * @return a \u003ccode\u003eByte\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3039",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[])",
    "snippet": "public static double[] toPrimitive(Double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].doubleValue();\n        }\n        return result;\n    }",
    "begin_line": 3039,
    "end_line": 3050,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eDouble\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003edouble\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3061",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[], double)",
    "snippet": "public static double[] toPrimitive(Double[] array, double valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Double b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.doubleValue());\n        }\n        return result;\n    }",
    "begin_line": 3061,
    "end_line": 3073,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eDouble\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003edouble\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#3083",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(double[])",
    "snippet": "public static Double[] toObject(double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        final Double[] result \u003d new Double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Double.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 3083,
    "end_line": 3094,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive doubles to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003edouble\u003c/code\u003e array\n * @return a \u003ccode\u003eDouble\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3107",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[])",
    "snippet": "public static float[] toPrimitive(Float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].floatValue();\n        }\n        return result;\n    }",
    "begin_line": 3107,
    "end_line": 3118,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eFloat\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003efloat\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3129",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[], float)",
    "snippet": "public static float[] toPrimitive(Float[] array, float valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Float b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.floatValue());\n        }\n        return result;\n    }",
    "begin_line": 3129,
    "end_line": 3141,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eFloat\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003efloat\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#3151",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(float[])",
    "snippet": "public static Float[] toObject(float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        final Float[] result \u003d new Float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Float.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 3151,
    "end_line": 3162,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive floats to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003efloat\u003c/code\u003e array\n * @return a \u003ccode\u003eFloat\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3175",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])",
    "snippet": "public static boolean[] toPrimitive(Boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].booleanValue();\n        }\n        return result;\n    }",
    "begin_line": 3175,
    "end_line": 3186,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eBoolean\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return a \u003ccode\u003eboolean\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @throws NullPointerException if array content is \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#3197",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
    "snippet": "public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            Boolean b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.booleanValue());\n        }\n        return result;\n    }",
    "begin_line": 3197,
    "end_line": 3209,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives handling \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eBoolean\u003c/code\u003e array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param valueForNull  the value to insert if \u003ccode\u003enull\u003c/code\u003e found\n * @return a \u003ccode\u003eboolean\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#3219",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(boolean[])",
    "snippet": "public static Boolean[] toObject(boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        final Boolean[] result \u003d new Boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d (array[i] ? Boolean.TRUE : Boolean.FALSE);\n        }\n        return result;\n    }",
    "begin_line": 3219,
    "end_line": 3230,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive booleans to objects.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array  a \u003ccode\u003eboolean\u003c/code\u003e array\n * @return a \u003ccode\u003eBoolean\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3240",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(T[])",
    "snippet": "public static \u003cT\u003e boolean isEmpty(T[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3240,
    "end_line": 3245,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3254",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(long[])",
    "snippet": "public static boolean isEmpty(long[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3254,
    "end_line": 3259,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3268",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(int[])",
    "snippet": "public static boolean isEmpty(int[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3268,
    "end_line": 3273,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3282",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(short[])",
    "snippet": "public static boolean isEmpty(short[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3282,
    "end_line": 3287,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3296",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(char[])",
    "snippet": "public static boolean isEmpty(char[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3296,
    "end_line": 3301,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3310",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(byte[])",
    "snippet": "public static boolean isEmpty(byte[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3310,
    "end_line": 3315,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3324",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(double[])",
    "snippet": "public static boolean isEmpty(double[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3324,
    "end_line": 3329,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3338",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(float[])",
    "snippet": "public static boolean isEmpty(float[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3338,
    "end_line": 3343,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3352",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(boolean[])",
    "snippet": "public static boolean isEmpty(boolean[] array) {\n        if (array \u003d\u003d null || array.length \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 3352,
    "end_line": 3357,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is empty or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is empty or \u003ccode\u003enull\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3367",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(T[])",
    "snippet": "public static \u003cT\u003e boolean isNotEmpty(T[] array) {\n         return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n     }",
    "begin_line": 3367,
    "end_line": 3369,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3378",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[])",
    "snippet": "public static boolean isNotEmpty(long[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3378,
    "end_line": 3380,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3389",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[])",
    "snippet": "public static boolean isNotEmpty(int[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3389,
    "end_line": 3391,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3400",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[])",
    "snippet": "public static boolean isNotEmpty(short[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3400,
    "end_line": 3402,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3411",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[])",
    "snippet": "public static boolean isNotEmpty(char[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3411,
    "end_line": 3413,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3422",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[])",
    "snippet": "public static boolean isNotEmpty(byte[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3422,
    "end_line": 3424,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3433",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[])",
    "snippet": "public static boolean isNotEmpty(double[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3433,
    "end_line": 3435,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3444",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[])",
    "snippet": "public static boolean isNotEmpty(float[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3444,
    "end_line": 3446,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3455",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[])",
    "snippet": "public static boolean isNotEmpty(boolean[] array) {\n        return (array !\u003d null \u0026\u0026 array.length !\u003d 0);\n    }",
    "begin_line": 3455,
    "end_line": 3457,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is not empty or \u003ccode\u003enot null\u003c/code\u003e.\u003c/p\u003e\n * @param array  the array to test\n * @return \u003ccode\u003etrue\u003c/code\u003e if the array is not empty or \u003ccode\u003enot null\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3482",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addAll(T[] array1, T... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final Class\u003c?\u003e type1 \u003d array1.getClass().getComponentType();\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        T[] joinedArray \u003d (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException ase) {\n            // Check if problem was due to incompatible types\n            /*\n             * We do this here, rather than before the copy because:\n             * - it would be a wasted check most of the time\n             * - safer, in case check turns out to be too strict\n             */\n            final Class\u003c?\u003e type2 \u003d array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName(), ase);\n            }\n            throw ase; // No, so rethrow original\n        }\n        return joinedArray;\n    }",
    "begin_line": 3482,
    "end_line": 3508,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(null, null)     \u003d null ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] ArrayUtils.addAll([null], [null]) \u003d [null, null] ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) \u003d [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array, may be \u003ccode\u003enull\u003c/code\u003e\n * @param array2  the second array whose elements are added to the new array, may be \u003ccode\u003enull\u003c/code\u003e\n * @return The new array, \u003ccode\u003enull\u003c/code\u003e if both arrays are \u003ccode\u003enull\u003c/code\u003e.The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.\n * @since 2.1\n * @throws IllegalArgumentException if the array types are incompatible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3527",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(boolean[], boolean)",
    "snippet": "public static boolean[] addAll(boolean[] array1, boolean... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        boolean[] joinedArray \u003d new boolean[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3527,
    "end_line": 3537,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new boolean[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3556",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(char[], char)",
    "snippet": "public static char[] addAll(char[] array1, char... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        char[] joinedArray \u003d new char[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3556,
    "end_line": 3566,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new char[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3585",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(byte[], byte)",
    "snippet": "public static byte[] addAll(byte[] array1, byte... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        byte[] joinedArray \u003d new byte[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3585,
    "end_line": 3595,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new byte[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3614",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(short[], short)",
    "snippet": "public static short[] addAll(short[] array1, short... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        short[] joinedArray \u003d new short[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3614,
    "end_line": 3624,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new short[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3643",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(int[], int)",
    "snippet": "public static int[] addAll(int[] array1, int... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        int[] joinedArray \u003d new int[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3643,
    "end_line": 3653,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new int[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3672",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(long[], long)",
    "snippet": "public static long[] addAll(long[] array1, long... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        long[] joinedArray \u003d new long[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3672,
    "end_line": 3682,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new long[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3701",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(float[], float)",
    "snippet": "public static float[] addAll(float[] array1, float... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        float[] joinedArray \u003d new float[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3701,
    "end_line": 3711,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new float[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#3730",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(double[], double)",
    "snippet": "public static double[] addAll(double[] array1, double... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        double[] joinedArray \u003d new double[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 3730,
    "end_line": 3740,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e \u003cp\u003eThe new array contains all of the element of \u003ccode\u003earray1\u003c/code\u003e followed by all of the elements \u003ccode\u003earray2\u003c/code\u003e. When an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new double[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3770",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], T)",
    "snippet": "public static \u003cT\u003e T[] add(T[] array, T element) {\n        Class\u003c?\u003e type;\n        if (array !\u003d null){\n            type \u003d array.getClass();\n        } else if (element !\u003d null) {\n            type \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        T[] newArray \u003d (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3770,
    "end_line": 3783,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[]\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, null)      \u003d [null] ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param array  the array to \"add\" the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add, may be \u003ccode\u003enull\u003c/code\u003e\n * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 2.1\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3806",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], boolean)",
    "snippet": "public static boolean[] add(boolean[] array, boolean element) {\n        boolean[] newArray \u003d (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3806,
    "end_line": 3810,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [true, false] ArrayUtils.add([true, false], true) \u003d [true, false, true] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3833",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], byte)",
    "snippet": "public static byte[] add(byte[] array, byte element) {\n        byte[] newArray \u003d (byte[])copyArrayGrow1(array, Byte.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3833,
    "end_line": 3837,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3860",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], char)",
    "snippet": "public static char[] add(char[] array, char element) {\n        char[] newArray \u003d (char[])copyArrayGrow1(array, Character.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3860,
    "end_line": 3864,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, \u00270\u0027)       \u003d [\u00270\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00271\u0027, \u00270\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00270\u0027, \u00271\u0027] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3887",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], double)",
    "snippet": "public static double[] add(double[] array, double element) {\n        double[] newArray \u003d (double[])copyArrayGrow1(array, Double.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3887,
    "end_line": 3891,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3914",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], float)",
    "snippet": "public static float[] add(float[] array, float element) {\n        float[] newArray \u003d (float[])copyArrayGrow1(array, Float.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3914,
    "end_line": 3918,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3941",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int)",
    "snippet": "public static int[] add(int[] array, int element) {\n        int[] newArray \u003d (int[])copyArrayGrow1(array, Integer.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3941,
    "end_line": 3945,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3968",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], long)",
    "snippet": "public static long[] add(long[] array, long element) {\n        long[] newArray \u003d (long[])copyArrayGrow1(array, Long.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3968,
    "end_line": 3972,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#3995",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], short)",
    "snippet": "public static short[] add(short[] array, short element) {\n        short[] newArray \u003d (short[])copyArrayGrow1(array, Short.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 3995,
    "end_line": 3999,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.copyArrayGrow1#4010",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object copyArrayGrow1(Object array, Class\u003c?\u003e newArrayComponentType) {\n        if (array !\u003d null) {\n            int arrayLength \u003d Array.getLength(array);\n            Object newArray \u003d Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n            System.arraycopy(array, 0, newArray, 0, arrayLength);\n            return newArray;\n        }\n        return Array.newInstance(newArrayComponentType, 1);\n    }",
    "begin_line": 4010,
    "end_line": 4018,
    "comment": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be \u003ccode\u003enull\u003c/code\u003e.\n * @param newArrayComponentType If \u003ccode\u003earray\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4049",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], int, T)",
    "snippet": "public static \u003cT\u003e T[] add(T[] array, int index, T element) {\n        Class\u003c?\u003e clss \u003d null;\n        if (array !\u003d null) {\n            clss \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            clss \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n        }\n        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n        final T[] newArray \u003d (T[]) add(array, index, element, clss);\n        return newArray;\n    }",
    "begin_line": 4049,
    "end_line": 4061,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, null)      \u003d [null] ArrayUtils.add(null, 0, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], 1, null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], 1, \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], 3, \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n * @throws IllegalArgumentException if both array and element are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4090",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], int, boolean)",
    "snippet": "public static boolean[] add(boolean[] array, int index, boolean element) {\n        return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);\n    }",
    "begin_line": 4090,
    "end_line": 4092,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, true)          \u003d [true] ArrayUtils.add([true], 0, false)       \u003d [false, true] ArrayUtils.add([false], 1, true)       \u003d [false, true] ArrayUtils.add([true, false], 1, true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4122",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], int, char)",
    "snippet": "public static char[] add(char[] array, int index, char element) {\n        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);\n    }",
    "begin_line": 4122,
    "end_line": 4124,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, \u0027a\u0027)            \u003d [\u0027a\u0027] ArrayUtils.add([\u0027a\u0027], 0, \u0027b\u0027)           \u003d [\u0027b\u0027, \u0027a\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 0, \u0027c\u0027)      \u003d [\u0027c\u0027, \u0027a\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 1, \u0027k\u0027)      \u003d [\u0027a\u0027, \u0027k\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1, \u0027t\u0027) \u003d [\u0027a\u0027, \u0027t\u0027, \u0027b\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], int, byte)",
    "snippet": "public static byte[] add(byte[] array, int index, byte element) {\n        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n    }",
    "begin_line": 4153,
    "end_line": 4155,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 3)      \u003d [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      \u003d [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4184",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], int, short)",
    "snippet": "public static short[] add(short[] array, int index, short element) {\n        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);\n    }",
    "begin_line": 4184,
    "end_line": 4186,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4215",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int, int)",
    "snippet": "public static int[] add(int[] array, int index, int element) {\n        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);\n    }",
    "begin_line": 4215,
    "end_line": 4217,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4246",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], int, long)",
    "snippet": "public static long[] add(long[] array, int index, long element) {\n        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);\n    }",
    "begin_line": 4246,
    "end_line": 4248,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1L], 0, 2L)           \u003d [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      \u003d [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      \u003d [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   \u003d [2L, 6L, 1L, 3L] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4277",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], int, float)",
    "snippet": "public static float[] add(float[] array, int index, float element) {\n        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);\n    }",
    "begin_line": 4277,
    "end_line": 4279,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1.1f], 0, 2.2f)               \u003d [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        \u003d [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        \u003d [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   \u003d [2.9f, 6.0f, 1.0f, 0.3f] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4308",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], int, double)",
    "snippet": "public static double[] add(double[] array, int index, double element) {\n        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);\n    }",
    "begin_line": 4308,
    "end_line": 4310,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, a new one element array is returned whose component type is the same as the element.\u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1.1], 0, 2.2)              \u003d [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        \u003d [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        \u003d [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    \u003d [2.9, 6.0, 1.0, 0.3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e array.length).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#4323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object add(Object array, int index, Object element, Class\u003c?\u003e clss) {\n        if (array \u003d\u003d null) {\n            if (index !\u003d 0) {\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n            }\n            Object joinedArray \u003d Array.newInstance(clss, 1);\n            Array.set(joinedArray, 0, element);\n            return joinedArray;\n        }\n        int length \u003d Array.getLength(array);\n        if (index \u003e length || index \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        Object result \u003d Array.newInstance(clss, length + 1);\n        System.arraycopy(array, 0, result, 0, index);\n        Array.set(result, index, element);\n        if (index \u003c length) {\n            System.arraycopy(array, index, result, index + 1, length - index);\n        }\n        return result;\n    }",
    "begin_line": 4323,
    "end_line": 4343,
    "comment": "/** \n * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.\n * @param array  the array to add the element to, may be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the new object\n * @param element  the object to add\n * @param clss the type of the element being added\n * @return A new array containing the existing elements and the new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4374",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") remove(T[] array, int index) {\n        return (T[]) remove((Object) array, index);\n    }",
    "begin_line": 4374,
    "end_line": 4376,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([\"a\"], 0)           \u003d [] ArrayUtils.remove([\"a\", \"b\"], 0)      \u003d [\"b\"] ArrayUtils.remove([\"a\", \"b\"], 1)      \u003d [\"a\"] ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) \u003d [\"a\", \"c\"] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4403",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(T[], java.lang.Object)",
    "snippet": "public static \u003cT\u003e T[] removeElement(T[] array, Object element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4403,
    "end_line": 4409,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, \"a\")            \u003d null ArrayUtils.removeElement([], \"a\")              \u003d [] ArrayUtils.removeElement([\"a\"], \"b\")           \u003d [\"a\"] ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      \u003d [\"b\"] ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") \u003d [\"b\", \"a\"] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4439",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(boolean[], int)",
    "snippet": "public static boolean[] remove(boolean[] array, int index) {\n        return (boolean[]) remove((Object) array, index);\n    }",
    "begin_line": 4439,
    "end_line": 4441,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([true], 0)              \u003d [] ArrayUtils.remove([true, false], 0)       \u003d [false] ArrayUtils.remove([true, false], 1)       \u003d [true] ArrayUtils.remove([true, true, false], 1) \u003d [true, false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4468",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(boolean[], boolean)",
    "snippet": "public static boolean[] removeElement(boolean[] array, boolean element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4468,
    "end_line": 4474,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, true)                \u003d null ArrayUtils.removeElement([], true)                  \u003d [] ArrayUtils.removeElement([true], false)             \u003d [true] ArrayUtils.removeElement([true, false], false)      \u003d [true] ArrayUtils.removeElement([true, false, true], true) \u003d [false, true] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4504",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(byte[], int)",
    "snippet": "public static byte[] remove(byte[] array, int index) {\n        return (byte[]) remove((Object) array, index);\n    }",
    "begin_line": 4504,
    "end_line": 4506,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)          \u003d [] ArrayUtils.remove([1, 0], 0)       \u003d [0] ArrayUtils.remove([1, 0], 1)       \u003d [1] ArrayUtils.remove([1, 0, 1], 1)    \u003d [1, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4533",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(byte[], byte)",
    "snippet": "public static byte[] removeElement(byte[] array, byte element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4533,
    "end_line": 4539,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)        \u003d null ArrayUtils.removeElement([], 1)          \u003d [] ArrayUtils.removeElement([1], 0)         \u003d [1] ArrayUtils.removeElement([1, 0], 0)      \u003d [1] ArrayUtils.removeElement([1, 0, 1], 1)   \u003d [0, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4569",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(char[], int)",
    "snippet": "public static char[] remove(char[] array, int index) {\n        return (char[]) remove((Object) array, index);\n    }",
    "begin_line": 4569,
    "end_line": 4571,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([\u0027a\u0027], 0)           \u003d [] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 0)      \u003d [\u0027b\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 1)      \u003d [\u0027a\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1) \u003d [\u0027a\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4598",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(char[], char)",
    "snippet": "public static char[] removeElement(char[] array, char element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4598,
    "end_line": 4604,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, \u0027a\u0027)            \u003d null ArrayUtils.removeElement([], \u0027a\u0027)              \u003d [] ArrayUtils.removeElement([\u0027a\u0027], \u0027b\u0027)           \u003d [\u0027a\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027], \u0027a\u0027)      \u003d [\u0027b\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027, \u0027a\u0027], \u0027a\u0027) \u003d [\u0027b\u0027, \u0027a\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4634",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(double[], int)",
    "snippet": "public static double[] remove(double[] array, int index) {\n        return (double[]) remove((Object) array, index);\n    }",
    "begin_line": 4634,
    "end_line": 4636,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4663",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(double[], double)",
    "snippet": "public static double[] removeElement(double[] array, double element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4663,
    "end_line": 4669,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4699",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(float[], int)",
    "snippet": "public static float[] remove(float[] array, int index) {\n        return (float[]) remove((Object) array, index);\n    }",
    "begin_line": 4699,
    "end_line": 4701,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4728",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(float[], float)",
    "snippet": "public static float[] removeElement(float[] array, float element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4728,
    "end_line": 4734,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4764",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(int[], int)",
    "snippet": "public static int[] remove(int[] array, int index) {\n        return (int[]) remove((Object) array, index);\n    }",
    "begin_line": 4764,
    "end_line": 4766,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4793",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(int[], int)",
    "snippet": "public static int[] removeElement(int[] array, int element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4793,
    "end_line": 4799,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4829",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(long[], int)",
    "snippet": "public static long[] remove(long[] array, int index) {\n        return (long[]) remove((Object) array, index);\n    }",
    "begin_line": 4829,
    "end_line": 4831,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4858",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(long[], long)",
    "snippet": "public static long[] removeElement(long[] array, long element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4858,
    "end_line": 4864,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4894",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(short[], int)",
    "snippet": "public static short[] remove(short[] array, int index) {\n        return (short[]) remove((Object) array, index);\n    }",
    "begin_line": 4894,
    "end_line": 4896,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#4923",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(short[], short)",
    "snippet": "public static short[] removeElement(short[] array, short element) {\n        int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 4923,
    "end_line": 4929,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (substracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array.\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be \u003ccode\u003enull\u003c/code\u003e\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4952",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(java.lang.Object, int)",
    "snippet": "private static Object remove(Object array, int index) {\n        int length \u003d getLength(array);\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n\n        Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - 1);\n        System.arraycopy(array, 0, result, 0, index);\n        if (index \u003c length - 1) {\n            System.arraycopy(array, index + 1, result, index, length - index - 1);\n        }\n\n        return result;\n    }",
    "begin_line": 4952,
    "end_line": 4965,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).\u003c/p\u003e \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.\u003c/p\u003e \u003cp\u003eIf the input array is \u003ccode\u003enull\u003c/code\u003e, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n * @param array  the array to remove the element from, may not be \u003ccode\u003enull\u003c/code\u003e\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u003c 0 || index \u003e\u003d array.length), or if the array is \u003ccode\u003enull\u003c/code\u003e.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.addAbbreviation#115",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String)",
    "snippet": "private static void addAbbreviation(String primitive, String abbreviation) {\n        abbreviationMap.put(primitive, abbreviation);\n        reverseAbbreviationMap.put(abbreviation, primitive);\n    }",
    "begin_line": 115,
    "end_line": 118,
    "comment": "/** \n * Add primitive type abbreviation to maps of abbreviations.\n * @param primitive Canonical name of primitive type\n * @param abbreviation Corresponding abbreviation of primitive type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.ClassUtils#142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.ClassUtils()",
    "snippet": "public ClassUtils() {\n      super();\n    }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * \u003cp\u003eClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as \u003ccode\u003eClassUtils.getShortClassName(cls)\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#155",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getShortClassName(Object object, String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getShortClassName(object.getClass());\n    }",
    "begin_line": 155,
    "end_line": 160,
    "comment": "/** \n * \u003cp\u003eGets the class name minus the package name for an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n * @param object  the class to get the short name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the class name of the object without the package name, or the null value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#168",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getShortClassName(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortClassName(cls.getName());\n    }",
    "begin_line": 168,
    "end_line": 173,
    "comment": "/** \n * \u003cp\u003eGets the class name minus the package name from a \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e\n * @param cls  the class to get the short name for.\n * @return the class name without the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#183",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.String)",
    "snippet": "public static String getShortClassName(String className) {\n        if (className \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        }\n\n        StringBuilder arrayPrefix \u003d new StringBuilder();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\n                className \u003d className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n            // Strip Object type encoding\n            if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\n                className \u003d className.substring(1, className.length() - 1);\n            }\n        }\n\n        if (reverseAbbreviationMap.containsKey(className)) {\n            className \u003d reverseAbbreviationMap.get(className);\n        }\n\n        int lastDotIdx \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx \u003d className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx \u003d\u003d -1 ? 0 : lastDotIdx + 1);\n        String out \u003d className.substring(lastDotIdx + 1);\n        if (innerIdx !\u003d -1) {\n            out \u003d out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out + arrayPrefix;\n    }",
    "begin_line": 183,
    "end_line": 217,
    "comment": "/** \n * \u003cp\u003eGets the class name minus the package name from a String.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e\n * @param className  the className to get the short name for\n * @return the class name of the class without the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#228",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getPackageName(Object object, String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getPackageName(object.getClass());\n    }",
    "begin_line": 228,
    "end_line": 233,
    "comment": "/** \n * \u003cp\u003eGets the package name of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n * @param object  the class to get the package name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the package name of the object, or the null value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#241",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageName(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageName(cls.getName());\n    }",
    "begin_line": 241,
    "end_line": 246,
    "comment": "/** \n * \u003cp\u003eGets the package name of a \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e\n * @param cls  the class to get the package name for, may be \u003ccode\u003enull\u003c/code\u003e.\n * @return the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#257",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.String)",
    "snippet": "public static String getPackageName(String className) {\n        if (className \u003d\u003d null || className.length() \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\n            className \u003d className.substring(1);\n        }\n        // Strip Object type encoding\n        if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\n            className \u003d className.substring(1);\n        }\n\n        int i \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i \u003d\u003d -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }",
    "begin_line": 257,
    "end_line": 276,
    "comment": "/** \n * \u003cp\u003eGets the package name from a \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e \u003cp\u003eIf the class is unpackaged, return an empty string.\u003c/p\u003e\n * @param className  the className to get the package name for, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllSuperclasses#287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllSuperclasses(java.lang.Class\u003c?\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e getAllSuperclasses(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return null;\n        }\n        List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003cClass\u003c?\u003e\u003e();\n        Class\u003c?\u003e superclass \u003d cls.getSuperclass();\n        while (superclass !\u003d null) {\n            classes.add(superclass);\n            superclass \u003d superclass.getSuperclass();\n        }\n        return classes;\n    }",
    "begin_line": 287,
    "end_line": 298,
    "comment": "/** \n * \u003cp\u003eGets a \u003ccode\u003eList\u003c/code\u003e of superclasses for the given class.\u003c/p\u003e\n * @param cls  the class to look up, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the \u003ccode\u003eList\u003c/code\u003e of superclasses in order going up from this one\u003ccode\u003enull\u003c/code\u003e if null input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllInterfaces#313",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e getAllInterfaces(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return null;\n        }\n\n        LinkedHashSet\u003cClass\u003c?\u003e\u003e interfacesFound \u003d new LinkedHashSet\u003cClass\u003c?\u003e\u003e();\n        getAllInterfaces(cls, interfacesFound);\n\n        return new ArrayList\u003cClass\u003c?\u003e\u003e(interfacesFound);\n    }",
    "begin_line": 313,
    "end_line": 322,
    "comment": "/** \n * \u003cp\u003eGets a \u003ccode\u003eList\u003c/code\u003e of all interfaces implemented by the given class and its superclasses.\u003c/p\u003e \u003cp\u003eThe order is determined by looking through each interface in turn as declared in the source file and following its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order is maintained.\u003c/p\u003e\n * @param cls  the class to look up, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the \u003ccode\u003eList\u003c/code\u003e of interfaces in order,\u003ccode\u003enull\u003c/code\u003e if null input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllInterfaces#330",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllInterfaces(java.lang.Class\u003c?\u003e, java.util.HashSet\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "private static void getAllInterfaces(Class\u003c?\u003e cls, HashSet\u003cClass\u003c?\u003e\u003e interfacesFound) {\n        while (cls !\u003d null) {\n            Class\u003c?\u003e[] interfaces \u003d cls.getInterfaces();\n\n            for (Class\u003c?\u003e i : interfaces) {\n                if (interfacesFound.add(i)) {\n                    getAllInterfaces(i, interfacesFound);\n                }\n            }\n\n            cls \u003d cls.getSuperclass();\n         }\n     }",
    "begin_line": 330,
    "end_line": 342,
    "comment": "/** \n * Get the interfaces for the specified class.\n * @param cls  the class to look up, may be \u003ccode\u003enull\u003c/code\u003e\n * @param interfacesFound the \u003ccode\u003eSet\u003c/code\u003e of interfaces for the class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.convertClassNamesToClasses#358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.convertClassNamesToClasses(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e convertClassNamesToClasses(List\u003cString\u003e classNames) {\n        if (classNames \u003d\u003d null) {\n            return null;\n        }\n        List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003cClass\u003c?\u003e\u003e(classNames.size());\n        for (String className : classNames) {\n            try {\n                classes.add(Class.forName(className));\n            } catch (Exception ex) {\n                classes.add(null);\n            }\n        }\n        return classes;\n    }",
    "begin_line": 358,
    "end_line": 371,
    "comment": "/** \n * \u003cp\u003eGiven a \u003ccode\u003eList\u003c/code\u003e of class names, this method converts them into classes.\u003c/p\u003e \u003cp\u003eA new \u003ccode\u003eList\u003c/code\u003e is returned. If the class name cannot be found, \u003ccode\u003enull\u003c/code\u003e is stored in the \u003ccode\u003eList\u003c/code\u003e. If the class name in the \u003ccode\u003eList\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e is stored in the output \u003ccode\u003eList\u003c/code\u003e.\u003c/p\u003e\n * @param classNames  the classNames to change\n * @return a \u003ccode\u003eList\u003c/code\u003e of Class objects corresponding to the class names,\u003ccode\u003enull\u003c/code\u003e if null input\n * @throws ClassCastException if classNames contains a non String entry\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.convertClassesToClassNames#385",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.convertClassesToClassNames(java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public static List\u003cString\u003e convertClassesToClassNames(List\u003cClass\u003c?\u003e\u003e classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n        List\u003cString\u003e classNames \u003d new ArrayList\u003cString\u003e(classes.size());\n        for (Class\u003c?\u003e cls : classes) {\n            if (cls \u003d\u003d null) {\n                classNames.add(null);\n            } else {\n                classNames.add(cls.getName());\n            }\n        }\n        return classNames;\n    }",
    "begin_line": 385,
    "end_line": 398,
    "comment": "/** \n * \u003cp\u003eGiven a \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eClass\u003c/code\u003e objects, this method converts them into class names.\u003c/p\u003e \u003cp\u003eA new \u003ccode\u003eList\u003c/code\u003e is returned. \u003ccode\u003enull\u003c/code\u003e objects will be copied into the returned list as \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param classes  the classes to change\n * @return a \u003ccode\u003eList\u003c/code\u003e of class names corresponding to the Class objects,\u003ccode\u003enull\u003c/code\u003e if null input\n * @throws ClassCastException if \u003ccode\u003eclasses\u003c/code\u003e contains a non-\u003ccode\u003eClass\u003c/code\u003e entry\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#438",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e[] classArray, Class\u003c?\u003e[] toClassArray) {\n        return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(1.5f));\n    }",
    "begin_line": 438,
    "end_line": 440,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Classes can be assigned to another array of Classes.\u003c/p\u003e \u003cp\u003eThis method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and \u003ccode\u003enull\u003c/code\u003es.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a \u003ccode\u003elong\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edouble\u003c/code\u003e. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eNull\u003c/code\u003e may be assigned to any reference type. This method will return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e is passed in and the toClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified \u003ccode\u003eClass\u003c/code\u003e parameter can be converted to the type represented by this \u003ccode\u003eClass\u003c/code\u003e object via an identity conversion widening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://java.sun.com/docs/books/jls/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eSince Lang 3.0,\u003c/strong\u003e this method will default behavior for calculating assignability between primitive and wrapper types \u003cem\u003ecorresponding to the running Java version\u003c/em\u003e; i.e. autoboxing will be the default behavior in VMs running Java versions \u003e\u003d 1.5.\u003c/p\u003e\n * @param classArray  the array of Classes to check, may be \u003ccode\u003enull\u003c/code\u003e\n * @param toClassArray  the array of Classes to try to assign into, may be \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#474",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e[], java.lang.Class\u003c?\u003e[], boolean)",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e[] classArray, Class\u003c?\u003e[] toClassArray, boolean autoboxing) {\n        if (ArrayUtils.isSameLength(classArray, toClassArray) \u003d\u003d false) {\n            return false;\n        }\n        if (classArray \u003d\u003d null) {\n            classArray \u003d ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        if (toClassArray \u003d\u003d null) {\n            toClassArray \u003d ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        for (int i \u003d 0; i \u003c classArray.length; i++) {\n            if (isAssignable(classArray[i], toClassArray[i], autoboxing) \u003d\u003d false) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 474,
    "end_line": 490,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Classes can be assigned to another array of Classes.\u003c/p\u003e \u003cp\u003eThis method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and \u003ccode\u003enull\u003c/code\u003es.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a \u003ccode\u003elong\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edouble\u003c/code\u003e. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eNull\u003c/code\u003e may be assigned to any reference type. This method will return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e is passed in and the toClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified \u003ccode\u003eClass\u003c/code\u003e parameter can be converted to the type represented by this \u003ccode\u003eClass\u003c/code\u003e object via an identity conversion widening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://java.sun.com/docs/books/jls/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e\n * @param classArray  the array of Classes to check, may be \u003ccode\u003enull\u003c/code\u003e\n * @param toClassArray  the array of Classes to try to assign into, may be \u003ccode\u003enull\u003c/code\u003e\n * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n * @return \u003ccode\u003etrue\u003c/code\u003e if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#523",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e cls, Class\u003c?\u003e toClass) {\n        return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(1.5f));\n    }",
    "begin_line": 523,
    "end_line": 525,
    "comment": "/** \n * \u003cp\u003eChecks if one \u003ccode\u003eClass\u003c/code\u003e can be assigned to a variable of another \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and \u003ccode\u003enull\u003c/code\u003es.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eNull\u003c/code\u003e may be assigned to any reference type. This method will return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e is passed in and the toClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified \u003ccode\u003eClass\u003c/code\u003e parameter can be converted to the type represented by this \u003ccode\u003eClass\u003c/code\u003e object via an identity conversion widening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://java.sun.com/docs/books/jls/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eSince Lang 3.0,\u003c/strong\u003e this method will default behavior for calculating assignability between primitive and wrapper types \u003cem\u003ecorresponding to the running Java version\u003c/em\u003e; i.e. autoboxing will be the default behavior in VMs running Java versions \u003e\u003d 1.5.\u003c/p\u003e\n * @param cls  the Class to check, may be null\n * @param toClass  the Class to try to assign into, returns false if null\n * @return \u003ccode\u003etrue\u003c/code\u003e if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e cls, Class\u003c?\u003e toClass, boolean autoboxing) {\n        if (toClass \u003d\u003d null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn\u0027t\n        if (cls \u003d\u003d null) {\n            return !(toClass.isPrimitive());\n        }\n        //autoboxing:\n        if (autoboxing) {\n            if (cls.isPrimitive() \u0026\u0026 !toClass.isPrimitive()) {\n                cls \u003d primitiveToWrapper(cls);\n                if (cls \u003d\u003d null) {\n                    return false;\n                }\n            }\n            if (toClass.isPrimitive() \u0026\u0026 !cls.isPrimitive()) {\n                cls \u003d wrapperToPrimitive(cls);\n                if (cls \u003d\u003d null) {\n                    return false;\n                }\n            }\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() \u003d\u003d false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }",
    "begin_line": 554,
    "end_line": 625,
    "comment": "/** \n * \u003cp\u003eChecks if one \u003ccode\u003eClass\u003c/code\u003e can be assigned to a variable of another \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and \u003ccode\u003enull\u003c/code\u003es.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eNull\u003c/code\u003e may be assigned to any reference type. This method will return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enull\u003c/code\u003e is passed in and the toClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified \u003ccode\u003eClass\u003c/code\u003e parameter can be converted to the type represented by this \u003ccode\u003eClass\u003c/code\u003e object via an identity conversion widening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://java.sun.com/docs/books/jls/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e\n * @param cls  the Class to check, may be null\n * @param toClass  the Class to try to assign into, returns false if null\n * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n * @return \u003ccode\u003etrue\u003c/code\u003e if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.primitiveToWrapper#639",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e primitiveToWrapper(Class\u003c?\u003e cls) {\n        Class\u003c?\u003e convertedClass \u003d cls;\n        if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\n            convertedClass \u003d primitiveWrapperMap.get(cls);\n        }\n        return convertedClass;\n    }",
    "begin_line": 639,
    "end_line": 645,
    "comment": "/** \n * \u003cp\u003eConverts the specified primitive Class object to its corresponding wrapper Class object.\u003c/p\u003e \u003cp\u003eNOTE: From v2.2, this method handles \u003ccode\u003eVoid.TYPE\u003c/code\u003e, returning \u003ccode\u003eVoid.TYPE\u003c/code\u003e.\u003c/p\u003e\n * @param cls  the class to convert, may be null\n * @return the wrapper class for \u003ccode\u003ecls\u003c/code\u003e or \u003ccode\u003ecls\u003c/code\u003e if\u003ccode\u003ecls\u003c/code\u003e is not a primitive. \u003ccode\u003enull\u003c/code\u003e if null input.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.primitivesToWrappers#657",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.primitivesToWrappers(java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Class\u003c?\u003e[] primitivesToWrappers(Class\u003c?\u003e[] classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n\n        if (classes.length \u003d\u003d 0) {\n            return classes;\n        }\n\n        Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\n        for (int i \u003d 0; i \u003c classes.length; i++) {\n            convertedClasses[i] \u003d primitiveToWrapper(classes[i]);\n        }\n        return convertedClasses;\n    }",
    "begin_line": 657,
    "end_line": 671,
    "comment": "/** \n * \u003cp\u003eConverts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.\u003c/p\u003e\n * @param classes  the class array to convert, may be null or empty\n * @return an array which contains for each given class, the wrapper class orthe original class if class is not a primitive. \u003ccode\u003enull\u003c/code\u003e if null input. Empty array if an empty array passed in.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.wrapperToPrimitive#689",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e wrapperToPrimitive(Class\u003c?\u003e cls) {\n        return wrapperPrimitiveMap.get(cls);\n    }",
    "begin_line": 689,
    "end_line": 691,
    "comment": "/** \n * \u003cp\u003eConverts the specified wrapper class to its corresponding primitive class.\u003c/p\u003e \u003cp\u003eThis method is the counter part of \u003ccode\u003eprimitiveToWrapper()\u003c/code\u003e. If the passed in class is a wrapper class for a primitive type, this primitive type will be returned (e.g. \u003ccode\u003eInteger.TYPE\u003c/code\u003e for \u003ccode\u003eInteger.class\u003c/code\u003e). For other classes, or if the parameter is \u003cb\u003enull\u003c/b\u003e, the return value is \u003cb\u003enull\u003c/b\u003e.\u003c/p\u003e\n * @param cls the class to convert, may be \u003cb\u003enull\u003c/b\u003e\n * @return the corresponding primitive type if \u003ccode\u003ecls\u003c/code\u003e is awrapper class, \u003cb\u003enull\u003c/b\u003e otherwise\n * @see #primitiveToWrapper(Class)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.wrappersToPrimitives#707",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.wrappersToPrimitives(java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Class\u003c?\u003e[] wrappersToPrimitives(Class\u003c?\u003e[] classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n\n        if (classes.length \u003d\u003d 0) {\n            return classes;\n        }\n\n        Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\n        for (int i \u003d 0; i \u003c classes.length; i++) {\n            convertedClasses[i] \u003d wrapperToPrimitive(classes[i]);\n        }\n        return convertedClasses;\n    }",
    "begin_line": 707,
    "end_line": 721,
    "comment": "/** \n * \u003cp\u003eConverts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.\u003c/p\u003e \u003cp\u003eThis method invokes \u003ccode\u003ewrapperToPrimitive()\u003c/code\u003e for each element of the passed in array.\u003c/p\u003e\n * @param classes  the class array to convert, may be null or empty\n * @return an array which contains for each given class, the primitive class or\u003cb\u003enull\u003c/b\u003e if the original class is not a wrapper class. \u003ccode\u003enull\u003c/code\u003e if null input. Empty array if an empty array passed in.\n * @see #wrapperToPrimitive(Class)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isInnerClass#732",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isInnerClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isInnerClass(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return false;\n        }\n        return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) \u003e\u003d 0;\n    }",
    "begin_line": 732,
    "end_line": 737,
    "comment": "/** \n * \u003cp\u003eIs the specified class an inner class or static nested class.\u003c/p\u003e\n * @param cls  the class to check, may be null\n * @return \u003ccode\u003etrue\u003c/code\u003e if the class is an inner or static nested class,false if not or \u003ccode\u003enull\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#752",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String, boolean)",
    "snippet": "public static Class\u003c?\u003e getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n        Class\u003c?\u003e clazz;\n        if (abbreviationMap.containsKey(className)) {\n            String clsName \u003d \"[\" + abbreviationMap.get(className);\n            clazz \u003d Class.forName(clsName, initialize, classLoader).getComponentType();\n        } else {\n            clazz \u003d Class.forName(toCanonicalName(className), initialize, classLoader);\n        }\n        return clazz;\n    }",
    "begin_line": 752,
    "end_line": 762,
    "comment": "/** \n * Returns the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e.  This implementation supports names like \"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n * @param classLoader  the class loader to use to load the class\n * @param className  the class name\n * @param initialize  whether the class must be initialized\n * @return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#775",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String)",
    "snippet": "public static Class\u003c?\u003e getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {\n        return getClass(classLoader, className, true);\n    }",
    "begin_line": 775,
    "end_line": 777,
    "comment": "/** \n * Returns the (initialized) class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e.  This implementation supports names like \"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n * @param classLoader  the class loader to use to load the class\n * @param className  the class name\n * @return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#789",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.String)",
    "snippet": "public static Class\u003c?\u003e getClass(String className) throws ClassNotFoundException {\n        return getClass(className, true);\n    }",
    "begin_line": 789,
    "end_line": 791,
    "comment": "/** \n * Returns the (initialized) class represented by \u003ccode\u003eclassName\u003c/code\u003e using the current thread\u0027s context class loader. This implementation supports names like \"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n * @param className  the class name\n * @return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the current thread\u0027s context class loader\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#804",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.String, boolean)",
    "snippet": "public static Class\u003c?\u003e getClass(String className, boolean initialize) throws ClassNotFoundException {\n        ClassLoader contextCL \u003d Thread.currentThread().getContextClassLoader();\n        ClassLoader loader \u003d contextCL \u003d\u003d null ? ClassUtils.class.getClassLoader() : contextCL;\n        return getClass(loader, className, initialize );\n    }",
    "begin_line": 804,
    "end_line": 808,
    "comment": "/** \n * Returns the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the current thread\u0027s context class loader. This implementation supports names like \"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n * @param className  the class name\n * @param initialize  whether the class must be initialized\n * @return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the current thread\u0027s context class loader\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPublicMethod#833",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPublicMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method getPublicMethod(Class\u003c?\u003e cls, String methodName, Class\u003c?\u003e parameterTypes[])\n            throws SecurityException, NoSuchMethodException {\n\n        Method declaredMethod \u003d cls.getMethod(methodName, parameterTypes);\n        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n            return declaredMethod;\n        }\n\n        List\u003cClass\u003c?\u003e\u003e candidateClasses \u003d new ArrayList\u003cClass\u003c?\u003e\u003e();\n        candidateClasses.addAll(getAllInterfaces(cls));\n        candidateClasses.addAll(getAllSuperclasses(cls));\n\n        for (Class\u003c?\u003e candidateClass : candidateClasses) {\n            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                continue;\n            }\n            Method candidateMethod;\n            try {\n                candidateMethod \u003d candidateClass.getMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException ex) {\n                continue;\n            }\n            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                return candidateMethod;\n            }\n        }\n\n        throw new NoSuchMethodException(\"Can\u0027t find a public method for \" +\n                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n    }",
    "begin_line": 833,
    "end_line": 862,
    "comment": "/** \n * \u003cp\u003eReturns the desired Method much like \u003ccode\u003eClass.getMethod\u003c/code\u003e, however it ensures that the returned Method is from a public class or interface and not from an anonymous inner class. This means that the Method is invokable and doesn\u0027t fall foul of Java bug \u003ca href\u003d\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4071957\"\u003e4071957\u003c/a\u003e). \u003ccode\u003e\u003cpre\u003eSet set \u003d Collections.unmodifiableSet(...); Method method \u003d ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]); Object result \u003d method.invoke(set, new Object[]);\u003c/pre\u003e\u003c/code\u003e \u003c/p\u003e\n * @param cls  the class to check, not null\n * @param methodName  the name of the method\n * @param parameterTypes  the list of parameters\n * @return the method\n * @throws NullPointerException if the class is null\n * @throws SecurityException if a a security violation occured\n * @throws NoSuchMethodException if the method is not found in the given classor if the metothod doen\u0027t conform with the requirements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.toCanonicalName#871",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.toCanonicalName(java.lang.String)",
    "snippet": "private static String toCanonicalName(String className) {\n        className \u003d StringUtils.deleteWhitespace(className);\n        if (className \u003d\u003d null) {\n            throw new NullPointerException(\"className must not be null.\");\n        } else if (className.endsWith(\"[]\")) {\n            StringBuilder classNameBuffer \u003d new StringBuilder();\n            while (className.endsWith(\"[]\")) {\n                className \u003d className.substring(0, className.length() - 2);\n                classNameBuffer.append(\"[\");\n            }\n            String abbreviation \u003d abbreviationMap.get(className);\n            if (abbreviation !\u003d null) {\n                classNameBuffer.append(abbreviation);\n            } else {\n                classNameBuffer.append(\"L\").append(className).append(\";\");\n            }\n            className \u003d classNameBuffer.toString();\n        }\n        return className;\n    }",
    "begin_line": 871,
    "end_line": 890,
    "comment": "/** \n * Converts a class name to a JLS style class name.\n * @param className  the class name\n * @return the converted name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.toClass#902",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.toClass(java.lang.Object[])",
    "snippet": "public static Class\u003c?\u003e[] toClass(Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        Class\u003c?\u003e[] classes \u003d new Class[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            classes[i] \u003d array[i].getClass();\n        }\n        return classes;\n    }",
    "begin_line": 902,
    "end_line": 913,
    "comment": "/** \n * \u003cp\u003eConverts an array of \u003ccode\u003eObject\u003c/code\u003e in to an array of \u003ccode\u003eClass\u003c/code\u003e objects. If any of these objects is null, a null element will be inserted into the array.\u003c/p\u003e \u003cp\u003eThis method returns \u003ccode\u003enull\u003c/code\u003e for a \u003ccode\u003enull\u003c/code\u003e input array.\u003c/p\u003e\n * @param array an \u003ccode\u003eObject\u003c/code\u003e array\n * @return a \u003ccode\u003eClass\u003c/code\u003e array, \u003ccode\u003enull\u003c/code\u003e if null array input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#925",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getShortCanonicalName(Object object, String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getShortCanonicalName(object.getClass().getName());\n    }",
    "begin_line": 925,
    "end_line": 930,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name for an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n * @param object  the class to get the short name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the canonical name of the object without the package name, or the null value\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#939",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getShortCanonicalName(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortCanonicalName(cls.getName());\n    }",
    "begin_line": 939,
    "end_line": 944,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name from a \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e\n * @param cls  the class to get the short name for.\n * @return the canonical name without the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#955",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.String)",
    "snippet": "public static String getShortCanonicalName(String canonicalName) {\n        return ClassUtils.getShortClassName(getCanonicalName(canonicalName));\n    }",
    "begin_line": 955,
    "end_line": 957,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name from a String.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a canonical name - it is not checked.\u003c/p\u003e\n * @param canonicalName  the class name to get the short name for\n * @return the canonical name of the class without the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#969",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getPackageCanonicalName(Object object, String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getPackageCanonicalName(object.getClass().getName());\n    }",
    "begin_line": 969,
    "end_line": 974,
    "comment": "/** \n * \u003cp\u003eGets the package name from the canonical name of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n * @param object  the class to get the package name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the package name of the object, or the null value\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#983",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageCanonicalName(Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageCanonicalName(cls.getName());\n    }",
    "begin_line": 983,
    "end_line": 988,
    "comment": "/** \n * \u003cp\u003eGets the package name from the canonical name of a \u003ccode\u003eClass\u003c/code\u003e.\u003c/p\u003e\n * @param cls  the class to get the package name for, may be \u003ccode\u003enull\u003c/code\u003e.\n * @return the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#1000",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.String)",
    "snippet": "public static String getPackageCanonicalName(String canonicalName) {\n        return ClassUtils.getPackageName(getCanonicalName(canonicalName));\n    }",
    "begin_line": 1000,
    "end_line": 1002,
    "comment": "/** \n * \u003cp\u003eGets the package name from the canonical name. \u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a canonical name - it is not checked.\u003c/p\u003e \u003cp\u003eIf the class is unpackaged, return an empty string.\u003c/p\u003e\n * @param canonicalName  the canonical name to get the package name for, may be \u003ccode\u003enull\u003c/code\u003e\n * @return the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1020",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.String)",
    "snippet": "private static String getCanonicalName(String className) {\n        className \u003d StringUtils.deleteWhitespace(className);\n        if (className \u003d\u003d null) {\n            return null;\n        } else {\n            int dim \u003d 0;\n            while (className.startsWith(\"[\")) {\n                dim++;\n                className \u003d className.substring(1);\n            }\n            if (dim \u003c 1) {\n                return className;\n            } else {\n                if (className.startsWith(\"L\")) {\n                    className \u003d className.substring(\n                        1,\n                        className.endsWith(\";\")\n                            ? className.length() - 1\n                            : className.length());\n                } else {\n                    if (className.length() \u003e 0) {\n                        className \u003d reverseAbbreviationMap.get(className.substring(0, 1));\n                    }\n                }\n                StringBuilder canonicalClassNameBuffer \u003d new StringBuilder(className);\n                for (int i \u003d 0; i \u003c dim; i++) {\n                    canonicalClassNameBuffer.append(\"[]\");\n                }\n                return canonicalClassNameBuffer.toString();\n            }\n        }\n    }",
    "begin_line": 1020,
    "end_line": 1051,
    "comment": "/** \n * \u003cp\u003eConverts a given name of class into canonical format. If name of class is not a name of array class it returns unchanged name.\u003c/p\u003e \u003cp\u003eExample: \u003cul\u003e \u003cli\u003e\u003ccode\u003egetCanonicalName(\"[I\") \u003d \"int[]\"\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003egetCanonicalName(\"[Ljava.lang.String;\") \u003d \"java.lang.String[]\"\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003egetCanonicalName(\"java.lang.String\") \u003d \"java.lang.String\"\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\n * @param className the name of class\n * @return canonical form of class name\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]