[
  {
    "name": "ArrayUtils.add#211",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], boolean)",
    "snippet": "public static boolean[] add(final boolean[] array, final boolean element) {\n        final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 211,
    "end_line": 215,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [true, false] ArrayUtils.add([true, false], true) \u003d [true, false, true] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], int, boolean)",
    "snippet": "@Deprecated\n    public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n        return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);\n    }",
    "begin_line": 248,
    "end_line": 250,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, true)          \u003d [true] ArrayUtils.add([true], 0, false)       \u003d [false, true] ArrayUtils.add([false], 1, true)       \u003d [false, true] ArrayUtils.add([true, false], 1, true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,boolean[],boolean...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#274",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], byte)",
    "snippet": "public static byte[] add(final byte[] array, final byte element) {\n        final byte[] newArray \u003d (byte[]) copyArrayGrow1(array, Byte.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 274,
    "end_line": 278,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#312",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], int, byte)",
    "snippet": "@Deprecated\n    public static byte[] add(final byte[] array, final int index, final byte element) {\n        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n    }",
    "begin_line": 312,
    "end_line": 314,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 3)      \u003d [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      \u003d [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,byte[],byte...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#338",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], char)",
    "snippet": "public static char[] add(final char[] array, final char element) {\n        final char[] newArray \u003d (char[]) copyArrayGrow1(array, Character.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 338,
    "end_line": 342,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, \u00270\u0027)       \u003d [\u00270\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00271\u0027, \u00270\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00270\u0027, \u00271\u0027] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#377",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], int, char)",
    "snippet": "@Deprecated\n    public static char[] add(final char[] array, final int index, final char element) {\n        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);\n    }",
    "begin_line": 377,
    "end_line": 379,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, \u0027a\u0027)            \u003d [\u0027a\u0027] ArrayUtils.add([\u0027a\u0027], 0, \u0027b\u0027)           \u003d [\u0027b\u0027, \u0027a\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 0, \u0027c\u0027)      \u003d [\u0027c\u0027, \u0027a\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 1, \u0027k\u0027)      \u003d [\u0027a\u0027, \u0027k\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1, \u0027t\u0027) \u003d [\u0027a\u0027, \u0027t\u0027, \u0027b\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,char[],char...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#404",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], double)",
    "snippet": "public static double[] add(final double[] array, final double element) {\n        final double[] newArray \u003d (double[]) copyArrayGrow1(array, Double.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 404,
    "end_line": 408,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#442",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], int, double)",
    "snippet": "@Deprecated\n    public static double[] add(final double[] array, final int index, final double element) {\n        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);\n    }",
    "begin_line": 442,
    "end_line": 444,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1.1], 0, 2.2)              \u003d [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        \u003d [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        \u003d [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    \u003d [2.9, 6.0, 1.0, 0.3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,double[],double...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#468",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], float)",
    "snippet": "public static float[] add(final float[] array, final float element) {\n        final float[] newArray \u003d (float[]) copyArrayGrow1(array, Float.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 468,
    "end_line": 472,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#506",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], int, float)",
    "snippet": "@Deprecated\n    public static float[] add(final float[] array, final int index, final float element) {\n        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);\n    }",
    "begin_line": 506,
    "end_line": 508,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1.1f], 0, 2.2f)               \u003d [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        \u003d [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        \u003d [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   \u003d [2.9f, 6.0f, 1.0f, 0.3f] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,float[],float...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#532",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int)",
    "snippet": "public static int[] add(final int[] array, final int element) {\n        final int[] newArray \u003d (int[]) copyArrayGrow1(array, Integer.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 532,
    "end_line": 536,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#570",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int, int)",
    "snippet": "@Deprecated\n    public static int[] add(final int[] array, final int index, final int element) {\n        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);\n    }",
    "begin_line": 570,
    "end_line": 572,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,int[],int...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#606",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], int, long)",
    "snippet": "@Deprecated\n    public static long[] add(final long[] array, final int index, final long element) {\n        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);\n    }",
    "begin_line": 606,
    "end_line": 608,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1L], 0, 2L)           \u003d [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      \u003d [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      \u003d [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   \u003d [2L, 6L, 1L, 3L] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,long[],long...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#632",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], long)",
    "snippet": "public static long[] add(final long[] array, final long element) {\n        final long[] newArray \u003d (long[]) copyArrayGrow1(array, Long.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 632,
    "end_line": 636,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#649",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object add(final Object array, final int index, final Object element, final Class\u003c?\u003e clss) {\n        if (array \u003d\u003d null) {\n            if (index !\u003d 0) {\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n            }\n            final Object joinedArray \u003d Array.newInstance(clss, 1);\n            Array.set(joinedArray, 0, element);\n            return joinedArray;\n        }\n        final int length \u003d Array.getLength(array);\n        if (index \u003e length || index \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        final Object result \u003d Array.newInstance(clss, length + 1);\n        System.arraycopy(array, 0, result, 0, index);\n        Array.set(result, index, element);\n        if (index \u003c length) {\n            System.arraycopy(array, index, result, index + 1, length - index);\n        }\n        return result;\n    }",
    "begin_line": 649,
    "end_line": 669,
    "comment": "/** \n * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @param clss the type of the element being added\n * @return A new array containing the existing elements and the new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#703",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], int, short)",
    "snippet": "@Deprecated\n    public static short[] add(final short[] array, final int index, final short element) {\n        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);\n    }",
    "begin_line": 703,
    "end_line": 705,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,short[],short...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#729",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], short)",
    "snippet": "public static short[] add(final short[] array, final short element) {\n        final short[] newArray \u003d (short[]) copyArrayGrow1(array, Short.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 729,
    "end_line": 733,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#769",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], int, T)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T[] add(final T[] array, final int index, final T element) {\n        final Class\u003cT\u003e clss;\n        if (array !\u003d null) {\n            clss \u003d getComponentType(array);\n        } else if (element !\u003d null) {\n            clss \u003d ObjectUtils.getClass(element);\n        } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");\n        }\n        return (T[]) add(array, index, element, clss);\n    }",
    "begin_line": 769,
    "end_line": 779,
    "comment": "/** \n * Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003e This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 0, null)      \u003d IllegalArgumentException ArrayUtils.add(null, 0, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], 1, null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], 1, \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], 3, \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @throws IllegalArgumentException if both array and element are null\n * @deprecated this method has been superseded by {@link #insert(int,Object[],Object...) insert(int, T[], T...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#812",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], T)",
    "snippet": "public static \u003cT\u003e T[] add(final T[] array, final T element) {\n        final Class\u003c?\u003e type;\n        if (array !\u003d null) {\n            type \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            type \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");\n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        final\n        T[] newArray \u003d (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 812,
    "end_line": 826,
    "comment": "/** \n * Copies the given array and adds the given element at the end of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, null)      \u003d IllegalArgumentException ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to \"add\" the element to, may be {@code null}\n * @param element  the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 2.1\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#846",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(boolean[], boolean)",
    "snippet": "public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final boolean[] joinedArray \u003d new boolean[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 846,
    "end_line": 857,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new boolean[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#877",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(byte[], byte)",
    "snippet": "public static byte[] addAll(final byte[] array1, final byte... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final byte[] joinedArray \u003d new byte[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 877,
    "end_line": 888,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new byte[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#908",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(char[], char)",
    "snippet": "public static char[] addAll(final char[] array1, final char... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final char[] joinedArray \u003d new char[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 908,
    "end_line": 919,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new char[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#939",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(double[], double)",
    "snippet": "public static double[] addAll(final double[] array1, final double... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final double[] joinedArray \u003d new double[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 939,
    "end_line": 950,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new double[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#970",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(float[], float)",
    "snippet": "public static float[] addAll(final float[] array1, final float... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final float[] joinedArray \u003d new float[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 970,
    "end_line": 981,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new float[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1001",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(int[], int)",
    "snippet": "public static int[] addAll(final int[] array1, final int... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final int[] joinedArray \u003d new int[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 1001,
    "end_line": 1012,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new int[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1032",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(long[], long)",
    "snippet": "public static long[] addAll(final long[] array1, final long... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final long[] joinedArray \u003d new long[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 1032,
    "end_line": 1043,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new long[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1063",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(short[], short)",
    "snippet": "public static short[] addAll(final short[] array1, final short... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final short[] joinedArray \u003d new short[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 1063,
    "end_line": 1074,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new short[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1101",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addAll(final T[] array1, @SuppressWarnings(\"unchecked\") final T... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        }\n        if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final Class\u003cT\u003e type1 \u003d getComponentType(array1);\n        final T[] joinedArray \u003d newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (final ArrayStoreException ase) {\n            // Check if problem was due to incompatible types\n            /*\n             * We do this here, rather than before the copy because:\n             * - it would be a wasted check most of the time\n             * - safer, in case check turns out to be too strict\n             */\n            final Class\u003c?\u003e type2 \u003d array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)) {\n                throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \"\n                        + type1.getName(), ase);\n            }\n            throw ase; // No, so rethrow original\n        }\n        return joinedArray;\n    }",
    "begin_line": 1101,
    "end_line": 1128,
    "comment": "/** \n * Adds all the elements of the given arrays into a new array. \u003cp\u003e The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addAll(null, null)     \u003d null ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] ArrayUtils.addAll([null], [null]) \u003d [null, null] ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) \u003d [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array1  the first array whose elements are added to the new array, may be {@code null}\n * @param array2  the second array whose elements are added to the new array, may be {@code null}\n * @return The new array, {@code null} if both arrays are {@code null}. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.\n * @since 2.1\n * @throws IllegalArgumentException if the array types are incompatible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1152",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(boolean[], boolean)",
    "snippet": "public static boolean[] addFirst(final boolean[] array, final boolean element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1152,
    "end_line": 1154,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, true)          \u003d [true] ArrayUtils.addFirst([true], false)       \u003d [false, true] ArrayUtils.addFirst([true, false], true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1178",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(byte[], byte)",
    "snippet": "public static byte[] addFirst(final byte[] array, final byte element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1178,
    "end_line": 1180,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1204",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(char[], char)",
    "snippet": "public static char[] addFirst(final char[] array, final char element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1204,
    "end_line": 1206,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, \u00271\u0027)       \u003d [\u00271\u0027] ArrayUtils.addFirst([\u00271\u0027], \u00270\u0027)      \u003d [\u00270\u0027, \u00271\u0027] ArrayUtils.addFirst([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00271\u0027, \u00270\u0027] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1230",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(double[], double)",
    "snippet": "public static double[] addFirst(final double[] array, final double element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1230,
    "end_line": 1232,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1256",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(float[], float)",
    "snippet": "public static float[] addFirst(final float[] array, final float element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1256,
    "end_line": 1258,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1282",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(int[], int)",
    "snippet": "public static int[] addFirst(final int[] array, final int element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1282,
    "end_line": 1284,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1308",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(long[], long)",
    "snippet": "public static long[] addFirst(final long[] array, final long element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1308,
    "end_line": 1310,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1334",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(short[], short)",
    "snippet": "public static short[] addFirst(final short[] array, final short element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1334,
    "end_line": 1336,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, 1)   \u003d [1] ArrayUtils.addFirst([1], 0)    \u003d [0, 1] ArrayUtils.addFirst([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1365",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addFirst(final T[] array, final T element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1365,
    "end_line": 1367,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003c/p\u003e \u003cpre\u003e ArrayUtils.addFirst(null, null)      \u003d IllegalArgumentException ArrayUtils.addFirst(null, \"a\")       \u003d [\"a\"] ArrayUtils.addFirst([\"a\"], null)     \u003d [null, \"a\"] ArrayUtils.addFirst([\"a\"], \"b\")      \u003d [\"b\", \"a\"] ArrayUtils.addFirst([\"a\", \"b\"], \"c\") \u003d [\"c\", \"a\", \"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array the array to \"add\" the element to, may be {@code null}\n * @param element the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 3.10\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1379",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(boolean[])",
    "snippet": "public static boolean[] clone(final boolean[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1379,
    "end_line": 1381,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1393",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(byte[])",
    "snippet": "public static byte[] clone(final byte[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1393,
    "end_line": 1395,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1407",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(char[])",
    "snippet": "public static char[] clone(final char[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1407,
    "end_line": 1409,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1421",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(double[])",
    "snippet": "public static double[] clone(final double[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1421,
    "end_line": 1423,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1435",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(float[])",
    "snippet": "public static float[] clone(final float[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1435,
    "end_line": 1437,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1449",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(int[])",
    "snippet": "public static int[] clone(final int[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1449,
    "end_line": 1451,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1463",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(long[])",
    "snippet": "public static long[] clone(final long[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1463,
    "end_line": 1465,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1477",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(short[])",
    "snippet": "public static short[] clone(final short[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1477,
    "end_line": 1479,
    "comment": "/** \n * Clones an array returning a typecast result and handling {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1496",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
    "snippet": "public static \u003cT\u003e T[] clone(final T[] array) {\n        return array !\u003d null ? array.clone() : null;\n    }",
    "begin_line": 1496,
    "end_line": 1498,
    "comment": "/** \n * Shallow clones an array returning a typecast result and handling {@code null}. \u003cp\u003e The objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays. \u003c/p\u003e \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to shallow clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1510",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(boolean[], boolean)",
    "snippet": "public static boolean contains(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1510,
    "end_line": 1512,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1524",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(byte[], byte)",
    "snippet": "public static boolean contains(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1524,
    "end_line": 1526,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1539",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(char[], char)",
    "snippet": "public static boolean contains(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1539,
    "end_line": 1541,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1553",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1553,
    "end_line": 1555,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1571",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double, double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1571,
    "end_line": 1573,
    "comment": "/** \n * Checks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance). \u003cp\u003e The method returns  {@code false} if a {@code null} arrayis passed in. \u003c/p\u003e\n * @param array  the array to search\n * @param valueToFind  the value to find\n * @param tolerance  the array contains the tolerance of the search\n * @return true if value falling within tolerance is in array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1585",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(float[], float)",
    "snippet": "public static boolean contains(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1585,
    "end_line": 1587,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1599",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(int[], int)",
    "snippet": "public static boolean contains(final int[] array, final int valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1599,
    "end_line": 1601,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1613",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(long[], long)",
    "snippet": "public static boolean contains(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1613,
    "end_line": 1615,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1627",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
    "snippet": "public static boolean contains(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1627,
    "end_line": 1629,
    "comment": "/** \n * Checks if the object is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param objectToFind  the object to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1641",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(short[], short)",
    "snippet": "public static boolean contains(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1641,
    "end_line": 1643,
    "comment": "/** \n * Checks if the value is in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.containsAny#1656",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.containsAny(java.lang.Object[], java.lang.Object)",
    "snippet": "public static boolean containsAny(final Object[] array, final Object... objectsToFind) {\n        return Streams.of(objectsToFind).anyMatch(e -\u003e contains(array, e));\n    }",
    "begin_line": 1656,
    "end_line": 1658,
    "comment": "/** \n * Checks if any of the objects are in the given array. \u003cp\u003e The method returns  {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n * @param array  the array to search through\n * @param objectsToFind  any of the objects to find\n * @return {@code true} if the array contains any of the objects\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.copyArrayGrow1#1669",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object copyArrayGrow1(final Object array, final Class\u003c?\u003e newArrayComponentType) {\n        if (array !\u003d null) {\n            final int arrayLength \u003d Array.getLength(array);\n            final Object newArray \u003d Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n            System.arraycopy(array, 0, newArray, 0, arrayLength);\n            return newArray;\n        }\n        return Array.newInstance(newArrayComponentType, 1);\n    }",
    "begin_line": 1669,
    "end_line": 1677,
    "comment": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be {@code null}.\n * @param newArrayComponentType If {@code array} is {@code null}, create a size 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.get#1688",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.get(T[], int)",
    "snippet": "public static \u003cT\u003e T get(final T[] array, final int index) {\n        return get(array, index, null);\n    }",
    "begin_line": 1688,
    "end_line": 1690,
    "comment": "/** \n * Gets the nTh element of an array or null if the index is out of bounds or the array is null.\n * @param \u003c T \u003e The type of array elements.\n * @param array The array to index.\n * @param index The index\n * @return the nTh element of an array or null if the index is out of bounds or the array is null.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.get#1702",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.get(T[], int, T)",
    "snippet": "public static \u003cT\u003e T get(final T[] array, final int index, final T defaultValue) {\n        return isArrayIndexValid(array, index) ? array[index] : defaultValue;\n    }",
    "begin_line": 1702,
    "end_line": 1704,
    "comment": "/** \n * Gets the nTh element of an array or a default value if the index is out of bounds.\n * @param \u003c T \u003e The type of array elements.\n * @param array The array to index.\n * @param index The index\n * @param defaultValue The return value of the given index is out of bounds.\n * @return the nTh element of an array or a default value if the index is out of bounds.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.getComponentType#1714",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.getComponentType(T[])",
    "snippet": "public static \u003cT\u003e Class\u003cT\u003e getComponentType(final T[] array) {\n        return ClassUtils.getComponentType(ObjectUtils.getClass(array));\n    }",
    "begin_line": 1714,
    "end_line": 1716,
    "comment": "/** \n * Gets an array\u0027s component type.\n * @param \u003c T \u003e The array type.\n * @param array The array.\n * @return The component type.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.getLength#1738",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.getLength(java.lang.Object)",
    "snippet": "public static int getLength(final Object array) {\n        return array !\u003d null ? Array.getLength(array) : 0;\n    }",
    "begin_line": 1738,
    "end_line": 1740,
    "comment": "/** \n * Returns the length of the specified array. This method can deal with  {@link Object} arrays and with primitive arrays.\u003cp\u003e If the input array is  {@code null},  {@code 0} is returned.\u003c/p\u003e \u003cpre\u003e ArrayUtils.getLength(null)            \u003d 0 ArrayUtils.getLength([])              \u003d 0 ArrayUtils.getLength([null])          \u003d 1 ArrayUtils.getLength([true, false])   \u003d 2 ArrayUtils.getLength([1, 2, 3])       \u003d 3 ArrayUtils.getLength([\"a\", \"b\", \"c\"]) \u003d 3 \u003c/pre\u003e\n * @param array  the array to retrieve the length from, may be null\n * @return The length of the array, or {@code 0} if the array is {@code null}\n * @throws IllegalArgumentException if the object argument is not an array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.hashCode#1751",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.hashCode(java.lang.Object)",
    "snippet": "public static int hashCode(final Object array) {\n        return new HashCodeBuilder().append(array).toHashCode();\n    }",
    "begin_line": 1751,
    "end_line": 1753,
    "comment": "/** \n * Get a hash code for an array handling multidimensional arrays correctly. \u003cp\u003e Multi-dimensional primitive arrays are also handled correctly by this method. \u003c/p\u003e\n * @param array  the array to get a hash code for, {@code null} returns zero\n * @return a hash code for the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1767",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1767,
    "end_line": 1769,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003e This method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1789",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean, int)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1789,
    "end_line": 1808,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003e This method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet ( {@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null}array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1821",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1821,
    "end_line": 1823,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1840",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte, int)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1840,
    "end_line": 1859,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1872",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1872,
    "end_line": 1874,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1891",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char, int)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1891,
    "end_line": 1910,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1923",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1923,
    "end_line": 1925,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1944",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexesOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 1944,
    "end_line": 1946,
    "comment": "/** \n * Finds the indices of the given value within a given tolerance in the array. \u003cp\u003e This method will return all the indices of the value which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, each time between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1963",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1963,
    "end_line": 1982,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2005",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex, tolerance);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2005,
    "end_line": 2024,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003e This method will return the indices of the values which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2037",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2037,
    "end_line": 2039,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2056",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float, int)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2056,
    "end_line": 2075,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2088",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2088,
    "end_line": 2090,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2107",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int, int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2107,
    "end_line": 2126,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2139",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2139,
    "end_line": 2141,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2158",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long, int)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2158,
    "end_line": 2177,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2190",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind) {\n        return indexesOf(array, objectToFind, 0);\n    }",
    "begin_line": 2190,
    "end_line": 2192,
    "comment": "/** \n * Finds the indices of the given object in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return a BitSet of all the indices of the object within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2209",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, objectToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2209,
    "end_line": 2228,
    "comment": "/** \n * Finds the indices of the given object in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the object within the array starting at the index,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2241",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2241,
    "end_line": 2243,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2260",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short, int)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2260,
    "end_line": 2279,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2292",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2292,
    "end_line": 2294,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2313",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean, int)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2313,
    "end_line": 2326,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2339",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2339,
    "end_line": 2341,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2359",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte, int)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2359,
    "end_line": 2372,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2386",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2386,
    "end_line": 2388,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2407",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char, int)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2407,
    "end_line": 2420,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2433",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2433,
    "end_line": 2435,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2451",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 2451,
    "end_line": 2453,
    "comment": "/** \n * Finds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2471",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        final boolean searchNaN \u003d Double.isNaN(valueToFind);\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            final double element \u003d array[i];\n            if (valueToFind \u003d\u003d element || searchNaN \u0026\u0026 Double.isNaN(element)) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2471,
    "end_line": 2486,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2507",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2507,
    "end_line": 2522,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2535",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2535,
    "end_line": 2537,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2555",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float, int)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        final boolean searchNaN \u003d Float.isNaN(valueToFind);\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            final float element \u003d array[i];\n            if (valueToFind \u003d\u003d element || searchNaN \u0026\u0026 Float.isNaN(element)) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2555,
    "end_line": 2570,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2583",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2583,
    "end_line": 2585,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2603",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int, int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2603,
    "end_line": 2616,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2629",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2629,
    "end_line": 2631,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to search through for the object, may be {@code null}\n * @param valueToFind the value to find\n * @return the index of the value within the array, {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2649",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long, int)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2649,
    "end_line": 2662,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2675",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }",
    "begin_line": 2675,
    "end_line": 2677,
    "comment": "/** \n * Finds the index of the given object in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2695",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2695,
    "end_line": 2716,
    "comment": "/** \n * Finds the index of the given object in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2729",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2729,
    "end_line": 2731,
    "comment": "/** \n * Finds the index of the given value in the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2749",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short, int)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2749,
    "end_line": 2762,
    "comment": "/** \n * Finds the index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}). \u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2783",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, boolean[], boolean)",
    "snippet": "public static boolean[] insert(final int index, final boolean[] array, final boolean... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final boolean[] result \u003d new boolean[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2783,
    "end_line": 2804,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2825",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, byte[], byte)",
    "snippet": "public static byte[] insert(final int index, final byte[] array, final byte... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final byte[] result \u003d new byte[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2825,
    "end_line": 2846,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2867",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, char[], char)",
    "snippet": "public static char[] insert(final int index, final char[] array, final char... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final char[] result \u003d new char[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2867,
    "end_line": 2888,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2909",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, double[], double)",
    "snippet": "public static double[] insert(final int index, final double[] array, final double... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final double[] result \u003d new double[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2909,
    "end_line": 2930,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2951",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, float[], float)",
    "snippet": "public static float[] insert(final int index, final float[] array, final float... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final float[] result \u003d new float[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2951,
    "end_line": 2972,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2993",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, int[], int)",
    "snippet": "public static int[] insert(final int index, final int[] array, final int... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final int[] result \u003d new int[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2993,
    "end_line": 3014,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3035",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, long[], long)",
    "snippet": "public static long[] insert(final int index, final long[] array, final long... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final long[] result \u003d new long[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3035,
    "end_line": 3056,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3077",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, short[], short)",
    "snippet": "public static short[] insert(final int index, final short[] array, final short... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final short[] result \u003d new short[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3077,
    "end_line": 3098,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3121",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] insert(final int index, final T[] array, final T... values) {\n        /*\n         * Note on use of @SafeVarargs:\n         *\n         * By returning null when \u0027array\u0027 is null, we avoid returning the vararg\n         * array to the caller. We also avoid relying on the type of the vararg\n         * array, by inspecting the component type of \u0027array\u0027.\n         */\n\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final Class\u003cT\u003e type \u003d getComponentType(array);\n        final int length \u003d array.length + values.length;\n        final T[] result \u003d newInstance(type, length);\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3121,
    "end_line": 3152,
    "comment": "/** \n * Inserts elements into an array at the given index (starting from zero). \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e The type of elements in {@code array} and {@code values}\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array or {@code null} if the given array is {@code null}.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isArrayEmpty#3160",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isArrayEmpty(java.lang.Object)",
    "snippet": "private static boolean isArrayEmpty(final Object array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3160,
    "end_line": 3162,
    "comment": "/** \n * Checks if an array is empty or  {@code null}.\n * @param array the array to test\n * @return {@code true} if the array is empty or {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isArrayIndexValid#3179",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isArrayIndexValid(T[], int)",
    "snippet": "public static \u003cT\u003e boolean isArrayIndexValid(final T[] array, final int index) {\n        return index \u003e\u003d 0 \u0026\u0026 getLength(array) \u003e index;\n    }",
    "begin_line": 3179,
    "end_line": 3181,
    "comment": "/** \n * Returns whether a given array can safely be accessed at the given index. \u003cpre\u003e ArrayUtils.isArrayIndexValid(null, 0)       \u003d false ArrayUtils.isArrayIndexValid([], 0)         \u003d false ArrayUtils.isArrayIndexValid([\"a\"], 0)      \u003d true \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array the array to inspect, may be null\n * @param index the index of the array to be inspected\n * @return Whether the given index is safely-accessible in the given array\n * @since 3.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3190",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(boolean[])",
    "snippet": "public static boolean isEmpty(final boolean[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3190,
    "end_line": 3192,
    "comment": "/** \n * Checks if an array of primitive booleans is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3201",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(byte[])",
    "snippet": "public static boolean isEmpty(final byte[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3201,
    "end_line": 3203,
    "comment": "/** \n * Checks if an array of primitive bytes is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3212",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(char[])",
    "snippet": "public static boolean isEmpty(final char[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3212,
    "end_line": 3214,
    "comment": "/** \n * Checks if an array of primitive chars is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(double[])",
    "snippet": "public static boolean isEmpty(final double[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3223,
    "end_line": 3225,
    "comment": "/** \n * Checks if an array of primitive doubles is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3234",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(float[])",
    "snippet": "public static boolean isEmpty(final float[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3234,
    "end_line": 3236,
    "comment": "/** \n * Checks if an array of primitive floats is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3245",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(int[])",
    "snippet": "public static boolean isEmpty(final int[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3245,
    "end_line": 3247,
    "comment": "/** \n * Checks if an array of primitive ints is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3256",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(long[])",
    "snippet": "public static boolean isEmpty(final long[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3256,
    "end_line": 3258,
    "comment": "/** \n * Checks if an array of primitive longs is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3267",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[])",
    "snippet": "public static boolean isEmpty(final Object[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3267,
    "end_line": 3269,
    "comment": "/** \n * Checks if an array of Objects is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3278",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(short[])",
    "snippet": "public static boolean isEmpty(final short[] array) {\n        return isArrayEmpty(array);\n    }",
    "begin_line": 3278,
    "end_line": 3280,
    "comment": "/** \n * Checks if an array of primitive shorts is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEquals#3296",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
    "snippet": "@Deprecated\n    public static boolean isEquals(final Object array1, final Object array2) {\n        return new EqualsBuilder().append(array1, array2).isEquals();\n    }",
    "begin_line": 3296,
    "end_line": 3298,
    "comment": "/** \n * Compares two arrays, using equals(), handling multi-dimensional arrays correctly. \u003cp\u003e Multi-dimensional primitive arrays are also handled correctly by this method. \u003c/p\u003e\n * @param array1  the left-hand array to compare, may be {@code null}\n * @param array2  the right-hand array to compare, may be {@code null}\n * @return {@code true} if the arrays are equal\n * @deprecated this method has been replaced by {@code java.util.Objects.deepEquals(Object, Object)} and will beremoved from future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3307",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[])",
    "snippet": "public static boolean isNotEmpty(final boolean[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3307,
    "end_line": 3309,
    "comment": "/** \n * Checks if an array of primitive booleans is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3318",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[])",
    "snippet": "public static boolean isNotEmpty(final byte[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3318,
    "end_line": 3320,
    "comment": "/** \n * Checks if an array of primitive bytes is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3329",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[])",
    "snippet": "public static boolean isNotEmpty(final char[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3329,
    "end_line": 3331,
    "comment": "/** \n * Checks if an array of primitive chars is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3340",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[])",
    "snippet": "public static boolean isNotEmpty(final double[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3340,
    "end_line": 3342,
    "comment": "/** \n * Checks if an array of primitive doubles is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3351",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[])",
    "snippet": "public static boolean isNotEmpty(final float[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3351,
    "end_line": 3353,
    "comment": "/** \n * Checks if an array of primitive floats is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3362",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[])",
    "snippet": "public static boolean isNotEmpty(final int[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3362,
    "end_line": 3364,
    "comment": "/** \n * Checks if an array of primitive ints is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3373",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[])",
    "snippet": "public static boolean isNotEmpty(final long[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3373,
    "end_line": 3375,
    "comment": "/** \n * Checks if an array of primitive longs is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3384",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[])",
    "snippet": "public static boolean isNotEmpty(final short[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3384,
    "end_line": 3386,
    "comment": "/** \n * Checks if an array of primitive shorts is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3396",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(T[])",
    "snippet": "public static \u003cT\u003e boolean isNotEmpty(final T[] array) {\n         return !isEmpty(array);\n     }",
    "begin_line": 3396,
    "end_line": 3398,
    "comment": "/** \n * Checks if an array of Objects is not empty and not  {@code null}.\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3409",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(boolean[], boolean[])",
    "snippet": "public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3409,
    "end_line": 3411,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3422",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(byte[], byte[])",
    "snippet": "public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3422,
    "end_line": 3424,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3435",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(char[], char[])",
    "snippet": "public static boolean isSameLength(final char[] array1, final char[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3435,
    "end_line": 3437,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3448",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(double[], double[])",
    "snippet": "public static boolean isSameLength(final double[] array1, final double[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3448,
    "end_line": 3450,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3461",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(float[], float[])",
    "snippet": "public static boolean isSameLength(final float[] array1, final float[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3461,
    "end_line": 3463,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3474",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(int[], int[])",
    "snippet": "public static boolean isSameLength(final int[] array1, final int[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3474,
    "end_line": 3476,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3487",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(long[], long[])",
    "snippet": "public static boolean isSameLength(final long[] array1, final long[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3487,
    "end_line": 3489,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3504",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameLength(final Object array1, final Object array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3504,
    "end_line": 3506,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. \u003cp\u003e Any multi-dimensional aspects of the arrays are ignored. \u003c/p\u003e\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3520",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
    "snippet": "public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3520,
    "end_line": 3522,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. \u003cp\u003e Any multi-dimensional aspects of the arrays are ignored. \u003c/p\u003e\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3534",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(short[], short[])",
    "snippet": "public static boolean isSameLength(final short[] array1, final short[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3534,
    "end_line": 3536,
    "comment": "/** \n * Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameType#3547",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameType(final Object array1, final Object array2) {\n        if (array1 \u003d\u003d null || array2 \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        }\n        return array1.getClass().getName().equals(array2.getClass().getName());\n    }",
    "begin_line": 3547,
    "end_line": 3552,
    "comment": "/** \n * Checks whether two arrays are the same type taking into account multidimensional arrays.\n * @param array1 the first array, must not be {@code null}\n * @param array2 the second array, must not be {@code null}\n * @return {@code true} if type of arrays matches\n * @throws IllegalArgumentException if either array is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3562",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(boolean[])",
    "snippet": "public static boolean isSorted(final boolean[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        boolean previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final boolean current \u003d array[i];\n            if (BooleanUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3562,
    "end_line": 3578,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering ( {@code false} before {@code true}).\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3587",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(byte[])",
    "snippet": "public static boolean isSorted(final byte[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        byte previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final byte current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3587,
    "end_line": 3603,
    "comment": "/** \n * Checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3612",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(char[])",
    "snippet": "public static boolean isSorted(final char[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        char previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final char current \u003d array[i];\n            if (CharUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3612,
    "end_line": 3628,
    "comment": "/** \n * Checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3637",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(double[])",
    "snippet": "public static boolean isSorted(final double[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        double previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final double current \u003d array[i];\n            if (Double.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3637,
    "end_line": 3653,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3662",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(float[])",
    "snippet": "public static boolean isSorted(final float[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        float previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final float current \u003d array[i];\n            if (Float.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3662,
    "end_line": 3678,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3687",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(int[])",
    "snippet": "public static boolean isSorted(final int[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        int previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final int current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3687,
    "end_line": 3703,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3712",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(long[])",
    "snippet": "public static boolean isSorted(final long[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        long previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final long current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3712,
    "end_line": 3728,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3737",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(short[])",
    "snippet": "public static boolean isSorted(final short[] array) {\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n\n        short previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final short current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3737,
    "end_line": 3753,
    "comment": "/** \n * This method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3764",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[])",
    "snippet": "public static \u003cT extends Comparable\u003c? super T\u003e\u003e boolean isSorted(final T[] array) {\n        return isSorted(array, Comparable::compareTo);\n    }",
    "begin_line": 3764,
    "end_line": 3766,
    "comment": "/** \n * This method checks whether the provided array is sorted according to the class\u0027s {@code compareTo} method.\n * @param array the array to check\n * @param \u003c T \u003e the datatype of the array to check, it must implement {@link Comparable}\n * @return whether the array is sorted\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3778",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[], java.util.Comparator\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e boolean isSorted(final T[] array, final Comparator\u003cT\u003e comparator) {\n        Objects.requireNonNull(comparator, \"comparator\");\n        if (getLength(array) \u003c 2) {\n            return true;\n        }\n        T previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final T current \u003d array[i];\n            if (comparator.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3778,
    "end_line": 3794,
    "comment": "/** \n * This method checks whether the provided array is sorted according to the provided  {@link Comparator}.\n * @param array the array to check\n * @param comparator the {@link Comparator} to compare over\n * @param \u003c T \u003e the datatype of the array\n * @return whether the array is sorted\n * @throws NullPointerException if {@code comparator} is {@code null}\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3808",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3808,
    "end_line": 3810,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) if {@code null} array input.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3828",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array) || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3828,
    "end_line": 3841,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3854",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3854,
    "end_line": 3856,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3874",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte, int)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3874,
    "end_line": 3887,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3901",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3901,
    "end_line": 3903,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3922",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char, int)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3922,
    "end_line": 3935,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3948",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3948,
    "end_line": 3950,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3966",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n    }",
    "begin_line": 3966,
    "end_line": 3968,
    "comment": "/** \n * Finds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3986",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array) || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3986,
    "end_line": 3999,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4020",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array) || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4020,
    "end_line": 4035,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @param tolerance  search for value within plus/minus this amount\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4048",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4048,
    "end_line": 4050,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4068",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float, int)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array) || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4068,
    "end_line": 4081,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4095",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4095,
    "end_line": 4097,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4115",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int, int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4115,
    "end_line": 4128,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4141",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4141,
    "end_line": 4143,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4161",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, int)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4161,
    "end_line": 4174,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4187",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4187,
    "end_line": 4189,
    "comment": "/** \n * Finds the last index of the given object within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4207",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4207,
    "end_line": 4228,
    "comment": "/** \n * Finds the last index of the given object in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4241",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4241,
    "end_line": 4243,
    "comment": "/** \n * Finds the last index of the given value within the array. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4261",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short, int)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null || startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4261,
    "end_line": 4274,
    "comment": "/** \n * Finds the last index of the given value in the array starting at the given index. \u003cp\u003e This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array. \u003c/p\u003e\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.newInstance#4287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.newInstance(java.lang.Class\u003cT\u003e, int)",
    "snippet": "@SuppressWarnings(\"unchecked\") newInstance(final Class\u003cT\u003e componentType, final int length) {\n        return (T[]) Array.newInstance(componentType, length);\n    }",
    "begin_line": 4287,
    "end_line": 4289,
    "comment": "/** \n * Delegates to  {@link Array#newInstance(Class,int)} using generics.\n * @param \u003c T \u003e The array type.\n * @param componentType The array class.\n * @param length the array length\n * @return The new array.\n * @throws NullPointerException if the specified {@code componentType} parameter is null.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4306",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(boolean[])",
    "snippet": "public static boolean[] nullToEmpty(final boolean[] array) {\n        return isEmpty(array) ? EMPTY_BOOLEAN_ARRAY : array;\n    }",
    "begin_line": 4306,
    "end_line": 4308,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Boolean[])",
    "snippet": "public static Boolean[] nullToEmpty(final Boolean[] array) {\n        return isEmpty(array) ? EMPTY_BOOLEAN_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4325,
    "end_line": 4327,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4344",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(byte[])",
    "snippet": "public static byte[] nullToEmpty(final byte[] array) {\n        return isEmpty(array) ? EMPTY_BYTE_ARRAY : array;\n    }",
    "begin_line": 4344,
    "end_line": 4346,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Byte[])",
    "snippet": "public static Byte[] nullToEmpty(final Byte[] array) {\n        return isEmpty(array) ? EMPTY_BYTE_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4363,
    "end_line": 4365,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4382",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(char[])",
    "snippet": "public static char[] nullToEmpty(final char[] array) {\n        return isEmpty(array) ? EMPTY_CHAR_ARRAY : array;\n    }",
    "begin_line": 4382,
    "end_line": 4384,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4401",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Character[])",
    "snippet": "public static Character[] nullToEmpty(final Character[] array) {\n        return isEmpty(array) ? EMPTY_CHARACTER_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4401,
    "end_line": 4403,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Class\u003c?\u003e[] nullToEmpty(final Class\u003c?\u003e[] array) {\n        return isEmpty(array) ? EMPTY_CLASS_ARRAY : array;\n    }",
    "begin_line": 4420,
    "end_line": 4422,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4439",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(double[])",
    "snippet": "public static double[] nullToEmpty(final double[] array) {\n        return isEmpty(array) ? EMPTY_DOUBLE_ARRAY : array;\n    }",
    "begin_line": 4439,
    "end_line": 4441,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4458",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Double[])",
    "snippet": "public static Double[] nullToEmpty(final Double[] array) {\n        return isEmpty(array) ? EMPTY_DOUBLE_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4458,
    "end_line": 4460,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4477",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(float[])",
    "snippet": "public static float[] nullToEmpty(final float[] array) {\n        return isEmpty(array) ? EMPTY_FLOAT_ARRAY : array;\n    }",
    "begin_line": 4477,
    "end_line": 4479,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4496",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Float[])",
    "snippet": "public static Float[] nullToEmpty(final Float[] array) {\n        return isEmpty(array) ? EMPTY_FLOAT_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4496,
    "end_line": 4498,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4515",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(int[])",
    "snippet": "public static int[] nullToEmpty(final int[] array) {\n        return isEmpty(array) ? EMPTY_INT_ARRAY : array;\n    }",
    "begin_line": 4515,
    "end_line": 4517,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4534",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Integer[])",
    "snippet": "public static Integer[] nullToEmpty(final Integer[] array) {\n        return isEmpty(array) ? EMPTY_INTEGER_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4534,
    "end_line": 4536,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4553",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(long[])",
    "snippet": "public static long[] nullToEmpty(final long[] array) {\n        return isEmpty(array) ? EMPTY_LONG_ARRAY : array;\n    }",
    "begin_line": 4553,
    "end_line": 4555,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4572",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Long[])",
    "snippet": "public static Long[] nullToEmpty(final Long[] array) {\n        return isEmpty(array) ? EMPTY_LONG_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4572,
    "end_line": 4574,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4591",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])",
    "snippet": "public static Object[] nullToEmpty(final Object[] array) {\n        return isEmpty(array) ? EMPTY_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4591,
    "end_line": 4593,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4610",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(short[])",
    "snippet": "public static short[] nullToEmpty(final short[] array) {\n        return isEmpty(array) ? EMPTY_SHORT_ARRAY : array;\n    }",
    "begin_line": 4610,
    "end_line": 4612,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4629",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Short[])",
    "snippet": "public static Short[] nullToEmpty(final Short[] array) {\n        return isEmpty(array) ? EMPTY_SHORT_OBJECT_ARRAY : array;\n    }",
    "begin_line": 4629,
    "end_line": 4631,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4648",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.String[])",
    "snippet": "public static String[] nullToEmpty(final String[] array) {\n        return isEmpty(array) ? EMPTY_STRING_ARRAY : array;\n    }",
    "begin_line": 4648,
    "end_line": 4650,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e \u003cp\u003e As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4666",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(T[], java.lang.Class\u003cT[]\u003e)",
    "snippet": "public static \u003cT\u003e T[] nullToEmpty(final T[] array, final Class\u003cT[]\u003e type) {\n        if (type \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n\n        if (array \u003d\u003d null) {\n            return type.cast(Array.newInstance(type.getComponentType(), 0));\n        }\n        return array;\n    }",
    "begin_line": 4666,
    "end_line": 4675,
    "comment": "/** \n * Defensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003e This method returns an empty array for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to check for {@code null} or empty\n * @param type   the class representation of the desired array\n * @param \u003c T \u003e  the class type\n * @return the same array, {@code public static} empty array if {@code null}\n * @throws IllegalArgumentException if the type argument is null\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.random#4677",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.random()",
    "snippet": "private static ThreadLocalRandom random() {\n        return ThreadLocalRandom.current();\n    }",
    "begin_line": 4677,
    "end_line": 4679,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4710",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(boolean[], int)",
    "snippet": "public static boolean[] remove(final boolean[] array, final int index) {\n        return (boolean[]) remove((Object) array, index);\n    }",
    "begin_line": 4710,
    "end_line": 4712,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([true], 0)              \u003d [] ArrayUtils.remove([true, false], 0)       \u003d [false] ArrayUtils.remove([true, false], 1)       \u003d [true] ArrayUtils.remove([true, true, false], 1) \u003d [true, false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4743",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(byte[], int)",
    "snippet": "public static byte[] remove(final byte[] array, final int index) {\n        return (byte[]) remove((Object) array, index);\n    }",
    "begin_line": 4743,
    "end_line": 4745,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)          \u003d [] ArrayUtils.remove([1, 0], 0)       \u003d [0] ArrayUtils.remove([1, 0], 1)       \u003d [1] ArrayUtils.remove([1, 0, 1], 1)    \u003d [1, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4776",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(char[], int)",
    "snippet": "public static char[] remove(final char[] array, final int index) {\n        return (char[]) remove((Object) array, index);\n    }",
    "begin_line": 4776,
    "end_line": 4778,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([\u0027a\u0027], 0)           \u003d [] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 0)      \u003d [\u0027b\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 1)      \u003d [\u0027a\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1) \u003d [\u0027a\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4809",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(double[], int)",
    "snippet": "public static double[] remove(final double[] array, final int index) {\n        return (double[]) remove((Object) array, index);\n    }",
    "begin_line": 4809,
    "end_line": 4811,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4842",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(float[], int)",
    "snippet": "public static float[] remove(final float[] array, final int index) {\n        return (float[]) remove((Object) array, index);\n    }",
    "begin_line": 4842,
    "end_line": 4844,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4875",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(int[], int)",
    "snippet": "public static int[] remove(final int[] array, final int index) {\n        return (int[]) remove((Object) array, index);\n    }",
    "begin_line": 4875,
    "end_line": 4877,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4908",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(long[], int)",
    "snippet": "public static long[] remove(final long[] array, final int index) {\n        return (long[]) remove((Object) array, index);\n    }",
    "begin_line": 4908,
    "end_line": 4910,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4935",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(java.lang.Object, int)",
    "snippet": "private static Object remove(final Object array, final int index) {\n        final int length \u003d getLength(array);\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - 1);\n        System.arraycopy(array, 0, result, 0, index);\n        if (index \u003c length - 1) {\n            System.arraycopy(array, index + 1, result, index, length - index - 1);\n        }\n\n        return result;\n    }",
    "begin_line": 4935,
    "end_line": 4948,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4979",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(short[], int)",
    "snippet": "public static short[] remove(final short[] array, final int index) {\n        return (short[]) remove((Object) array, index);\n    }",
    "begin_line": 4979,
    "end_line": 4981,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#5014",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") remove(final T[] array, final int index) {\n        return (T[]) remove((Object) array, index);\n    }",
    "begin_line": 5014,
    "end_line": 5016,
    "comment": "/** \n * Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003e This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.remove([\"a\"], 0)           \u003d [] ArrayUtils.remove([\"a\", \"b\"], 0)      \u003d [\"b\"] ArrayUtils.remove([\"a\", \"b\"], 1)      \u003d [\"a\"] ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) \u003d [\"a\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5044",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(boolean[], int)",
    "snippet": "public static boolean[] removeAll(final boolean[] array, final int... indices) {\n        return (boolean[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5044,
    "end_line": 5046,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([true, false, true], 0, 2) \u003d [false] ArrayUtils.removeAll([true, false, true], 1, 2) \u003d [true] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5078",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(byte[], int)",
    "snippet": "public static byte[] removeAll(final byte[] array, final int... indices) {\n        return (byte[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5078,
    "end_line": 5080,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5112",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(char[], int)",
    "snippet": "public static char[] removeAll(final char[] array, final int... indices) {\n        return (char[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5112,
    "end_line": 5114,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5146",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(double[], int)",
    "snippet": "public static double[] removeAll(final double[] array, final int... indices) {\n        return (double[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5146,
    "end_line": 5148,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5180",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(float[], int)",
    "snippet": "public static float[] removeAll(final float[] array, final int... indices) {\n        return (float[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5180,
    "end_line": 5182,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5214",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(int[], int)",
    "snippet": "public static int[] removeAll(final int[] array, final int... indices) {\n        return (int[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5214,
    "end_line": 5216,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(long[], int)",
    "snippet": "public static long[] removeAll(final long[] array, final int... indices) {\n        return (long[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5248,
    "end_line": 5250,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5261",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, java.util.BitSet)",
    "snippet": " removeAll(final Object array, final BitSet indices) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n\n        final int srcLength \u003d getLength(array);\n        // No need to check maxIndex here, because method only currently called from removeElements()\n        // which guarantee to generate only valid bit entries.\n//        final int maxIndex \u003d indices.length();\n//        if (maxIndex \u003e srcLength) {\n//            throw new IndexOutOfBoundsException(\"Index: \" + (maxIndex-1) + \", Length: \" + srcLength);\n//        }\n        final int removals \u003d indices.cardinality(); // true bits are items to remove\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), srcLength - removals);\n        int srcIndex \u003d 0;\n        int destIndex \u003d 0;\n        int count;\n        int set;\n        while ((set \u003d indices.nextSetBit(srcIndex)) !\u003d -1) {\n            count \u003d set - srcIndex;\n            if (count \u003e 0) {\n                System.arraycopy(array, srcIndex, result, destIndex, count);\n                destIndex +\u003d count;\n            }\n            srcIndex \u003d indices.nextClearBit(set);\n        }\n        count \u003d srcLength - srcIndex;\n        if (count \u003e 0) {\n            System.arraycopy(array, srcIndex, result, destIndex, count);\n        }\n        return result;\n    }",
    "begin_line": 5261,
    "end_line": 5292,
    "comment": "/** \n * Removes multiple array elements specified by indices.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by the set bits in {@code indices}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5303",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, int)",
    "snippet": " removeAll(final Object array, final int... indices) {\n        final int length \u003d getLength(array);\n        int diff \u003d 0; // number of distinct indexes, i.e. number of entries that will be removed\n        final int[] clonedIndices \u003d ArraySorter.sort(clone(indices));\n\n        // identify length of result array\n        if (isNotEmpty(clonedIndices)) {\n            int i \u003d clonedIndices.length;\n            int prevIndex \u003d length;\n            while (--i \u003e\u003d 0) {\n                final int index \u003d clonedIndices[i];\n                if (index \u003c 0 || index \u003e\u003d length) {\n                    throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n                }\n                if (index \u003e\u003d prevIndex) {\n                    continue;\n                }\n                diff++;\n                prevIndex \u003d index;\n            }\n        }\n\n        // create result array\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - diff);\n        if (diff \u003c length) {\n            int end \u003d length; // index just after last copy\n            int dest \u003d length - diff; // number of entries so far not copied\n            for (int i \u003d clonedIndices.length - 1; i \u003e\u003d 0; i--) {\n                final int index \u003d clonedIndices[i];\n                if (end - index \u003e 1) { // same as (cp \u003e 0)\n                    final int cp \u003d end - index - 1;\n                    dest -\u003d cp;\n                    System.arraycopy(array, index + 1, result, dest, cp);\n                    // After this copy, we still have room for dest items.\n                }\n                end \u003d index;\n            }\n            if (end \u003e 0) {\n                System.arraycopy(array, 0, result, 0, end);\n            }\n        }\n        return result;\n    }",
    "begin_line": 5303,
    "end_line": 5345,
    "comment": "/** \n * Removes multiple array elements specified by index.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by unique values of {@code indices}\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5377",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(short[], int)",
    "snippet": "public static short[] removeAll(final short[] array, final int... indices) {\n        return (short[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5377,
    "end_line": 5379,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5409",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") removeAll(final T[] array, final int... indices) {\n        return (T[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5409,
    "end_line": 5411,
    "comment": "/** \n * Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003e This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 0, 2) \u003d [\"b\"] ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 1, 2) \u003d [\"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5429",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(boolean[], boolean)",
    "snippet": "@Deprecated\n    public static boolean[] removeAllOccurences(final boolean[] array, final boolean element) {\n        return (boolean[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5429,
    "end_line": 5431,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified boolean array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(boolean[],boolean)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5449",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(byte[], byte)",
    "snippet": "@Deprecated\n    public static byte[] removeAllOccurences(final byte[] array, final byte element) {\n        return (byte[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5449,
    "end_line": 5451,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified byte array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(byte[],byte)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5469",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(char[], char)",
    "snippet": "@Deprecated\n    public static char[] removeAllOccurences(final char[] array, final char element) {\n        return (char[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5469,
    "end_line": 5471,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified char array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(char[],char)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5489",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(double[], double)",
    "snippet": "@Deprecated\n    public static double[] removeAllOccurences(final double[] array, final double element) {\n        return (double[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5489,
    "end_line": 5491,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified double array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(double[],double)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5509",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(float[], float)",
    "snippet": "@Deprecated\n    public static float[] removeAllOccurences(final float[] array, final float element) {\n        return (float[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5509,
    "end_line": 5511,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified float array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(float[],float)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5529",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(int[], int)",
    "snippet": "@Deprecated\n    public static int[] removeAllOccurences(final int[] array, final int element) {\n        return (int[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5529,
    "end_line": 5531,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified int array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(int[],int)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5549",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(long[], long)",
    "snippet": "@Deprecated\n    public static long[] removeAllOccurences(final long[] array, final long element) {\n        return (long[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5549,
    "end_line": 5551,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified long array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(long[],long)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5569",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(short[], short)",
    "snippet": "@Deprecated\n    public static short[] removeAllOccurences(final short[] array, final short element) {\n        return (short[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5569,
    "end_line": 5571,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified short array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(short[],short)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5590",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(T[], T)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T[] removeAllOccurences(final T[] array, final T element) {\n        return (T[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5590,
    "end_line": 5592,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param \u003c T \u003e the type of object in the array\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(Object[],Object)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5608",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(boolean[], boolean)",
    "snippet": "public static boolean[] removeAllOccurrences(final boolean[] array, final boolean element) {\n        return (boolean[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5608,
    "end_line": 5610,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified boolean array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5626",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(byte[], byte)",
    "snippet": "public static byte[] removeAllOccurrences(final byte[] array, final byte element) {\n        return (byte[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5626,
    "end_line": 5628,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified byte array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5644",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(char[], char)",
    "snippet": "public static char[] removeAllOccurrences(final char[] array, final char element) {\n        return (char[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5644,
    "end_line": 5646,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified char array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5662",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(double[], double)",
    "snippet": "public static double[] removeAllOccurrences(final double[] array, final double element) {\n        return (double[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5662,
    "end_line": 5664,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified double array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5680",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(float[], float)",
    "snippet": "public static float[] removeAllOccurrences(final float[] array, final float element) {\n        return (float[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5680,
    "end_line": 5682,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified float array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5698",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(int[], int)",
    "snippet": "public static int[] removeAllOccurrences(final int[] array, final int element) {\n        return (int[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5698,
    "end_line": 5700,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified int array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5716",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(long[], long)",
    "snippet": "public static long[] removeAllOccurrences(final long[] array, final long element) {\n        return (long[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5716,
    "end_line": 5718,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified long array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5734",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(short[], short)",
    "snippet": "public static short[] removeAllOccurrences(final short[] array, final short element) {\n        return (short[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5734,
    "end_line": 5736,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified short array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5753",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(T[], T)",
    "snippet": "public static \u003cT\u003e T[] removeAllOccurrences(final T[] array, final T element) {\n        return (T[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5753,
    "end_line": 5755,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param \u003c T \u003e the type of object in the array\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5782",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(boolean[], boolean)",
    "snippet": "public static boolean[] removeElement(final boolean[] array, final boolean element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5782,
    "end_line": 5785,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, true)                \u003d null ArrayUtils.removeElement([], true)                  \u003d [] ArrayUtils.removeElement([true], false)             \u003d [true] ArrayUtils.removeElement([true, false], false)      \u003d [true] ArrayUtils.removeElement([true, false, true], true) \u003d [false, true] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5812",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(byte[], byte)",
    "snippet": "public static byte[] removeElement(final byte[] array, final byte element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5812,
    "end_line": 5815,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)        \u003d null ArrayUtils.removeElement([], 1)          \u003d [] ArrayUtils.removeElement([1], 0)         \u003d [1] ArrayUtils.removeElement([1, 0], 0)      \u003d [1] ArrayUtils.removeElement([1, 0, 1], 1)   \u003d [0, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5842",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(char[], char)",
    "snippet": "public static char[] removeElement(final char[] array, final char element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5842,
    "end_line": 5845,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, \u0027a\u0027)            \u003d null ArrayUtils.removeElement([], \u0027a\u0027)              \u003d [] ArrayUtils.removeElement([\u0027a\u0027], \u0027b\u0027)           \u003d [\u0027a\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027], \u0027a\u0027)      \u003d [\u0027b\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027, \u0027a\u0027], \u0027a\u0027) \u003d [\u0027b\u0027, \u0027a\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5872",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(double[], double)",
    "snippet": "public static double[] removeElement(final double[] array, final double element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5872,
    "end_line": 5875,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5902",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(float[], float)",
    "snippet": "public static float[] removeElement(final float[] array, final float element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5902,
    "end_line": 5905,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5932",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(int[], int)",
    "snippet": "public static int[] removeElement(final int[] array, final int element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5932,
    "end_line": 5935,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5962",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(long[], long)",
    "snippet": "public static long[] removeElement(final long[] array, final long element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5962,
    "end_line": 5965,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5992",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(short[], short)",
    "snippet": "public static short[] removeElement(final short[] array, final short element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 5992,
    "end_line": 5995,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#6023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(T[], java.lang.Object)",
    "snippet": "public static \u003cT\u003e T[] removeElement(final T[] array, final Object element) {\n        final int index \u003d indexOf(array, element);\n        return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\n    }",
    "begin_line": 6023,
    "end_line": 6026,
    "comment": "/** \n * Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contain such an element, no elements are removed from the array. \u003cp\u003e This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElement(null, \"a\")            \u003d null ArrayUtils.removeElement([], \"a\")              \u003d [] ArrayUtils.removeElement([\"a\"], \"b\")           \u003d [\"a\"] ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      \u003d [\"b\"] ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") \u003d [\"b\", \"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6055",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(boolean[], boolean)",
    "snippet": "public static boolean[] removeElements(final boolean[] array, final boolean... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cBoolean, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(2); // only two possible values here\n        for (final boolean v : values) {\n            final Boolean boxed \u003d Boolean.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final boolean key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (boolean[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6055,
    "end_line": 6081,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, true, false)               \u003d null ArrayUtils.removeElements([], true, false)                 \u003d [] ArrayUtils.removeElements([true], false, false)            \u003d [true] ArrayUtils.removeElements([true, false], true, true)       \u003d [false] ArrayUtils.removeElements([true, false, true], true)       \u003d [false, true] ArrayUtils.removeElements([true, false, true], true, true) \u003d [false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6110",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(byte[], byte)",
    "snippet": "public static byte[] removeElements(final byte[] array, final byte... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final Map\u003cByte, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final byte v : values) {\n            final Byte boxed \u003d Byte.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final byte key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (byte[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6110,
    "end_line": 6136,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6165",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(char[], char)",
    "snippet": "public static char[] removeElements(final char[] array, final char... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cCharacter, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final char v : values) {\n            final Character boxed \u003d Character.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final char key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (char[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6165,
    "end_line": 6191,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6220",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(double[], double)",
    "snippet": "public static double[] removeElements(final double[] array, final double... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cDouble, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final double v : values) {\n            final Double boxed \u003d Double.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final double key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (double[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6220,
    "end_line": 6246,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6275",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(float[], float)",
    "snippet": "public static float[] removeElements(final float[] array, final float... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cFloat, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final float v : values) {\n            final Float boxed \u003d Float.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final float key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (float[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6275,
    "end_line": 6301,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6330",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(int[], int)",
    "snippet": "public static int[] removeElements(final int[] array, final int... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cInteger, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final int v : values) {\n            final Integer boxed \u003d Integer.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final int key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (int[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6330,
    "end_line": 6356,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6385",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(long[], long)",
    "snippet": "public static long[] removeElements(final long[] array, final long... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cLong, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final long v : values) {\n            final Long boxed \u003d Long.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final long key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (long[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6385,
    "end_line": 6411,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6440",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(short[], short)",
    "snippet": "public static short[] removeElements(final short[] array, final short... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cShort, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final short v : values) {\n            final Short boxed \u003d Short.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final short key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (short[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6440,
    "end_line": 6466,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6497",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] removeElements(final T[] array, final T... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cT, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final T v : values) {\n            final MutableInt count \u003d occurrences.get(v);\n            if (count \u003d\u003d null) {\n                occurrences.put(v, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final T key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        @SuppressWarnings(\"unchecked\") // removeAll() always creates an array of the same type as its input\n        final T[] result \u003d (T[]) removeAll(array, toRemove);\n        return result;\n    }",
    "begin_line": 6497,
    "end_line": 6524,
    "comment": "/** \n * Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003e This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003c/p\u003e \u003cpre\u003e ArrayUtils.removeElements(null, \"a\", \"b\")            \u003d null ArrayUtils.removeElements([], \"a\", \"b\")              \u003d [] ArrayUtils.removeElements([\"a\"], \"b\", \"c\")           \u003d [\"a\"] ArrayUtils.removeElements([\"a\", \"b\"], \"a\", \"c\")      \u003d [\"b\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\")      \u003d [\"b\", \"a\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\", \"a\") \u003d [\"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6534",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[])",
    "snippet": "public static void reverse(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6534,
    "end_line": 6539,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6557",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[], int, int)",
    "snippet": "public static void reverse(final boolean[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        boolean tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6557,
    "end_line": 6571,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6581",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[])",
    "snippet": "public static void reverse(final byte[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6581,
    "end_line": 6585,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6603",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[], int, int)",
    "snippet": "public static void reverse(final byte[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        byte tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6603,
    "end_line": 6617,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6627",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[])",
    "snippet": "public static void reverse(final char[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6627,
    "end_line": 6631,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6649",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[], int, int)",
    "snippet": "public static void reverse(final char[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        char tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6649,
    "end_line": 6663,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6673",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[])",
    "snippet": "public static void reverse(final double[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6673,
    "end_line": 6677,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6695",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[], int, int)",
    "snippet": "public static void reverse(final double[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        double tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6695,
    "end_line": 6709,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6719",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[])",
    "snippet": "public static void reverse(final float[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6719,
    "end_line": 6723,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6741",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[], int, int)",
    "snippet": "public static void reverse(final float[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        float tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6741,
    "end_line": 6755,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6765",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[])",
    "snippet": "public static void reverse(final int[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6765,
    "end_line": 6769,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6787",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[], int, int)",
    "snippet": "public static void reverse(final int[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        int tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6787,
    "end_line": 6801,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6811",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[])",
    "snippet": "public static void reverse(final long[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6811,
    "end_line": 6815,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6833",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[], int, int)",
    "snippet": "public static void reverse(final long[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        long tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6833,
    "end_line": 6847,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6860",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[])",
    "snippet": "public static void reverse(final Object[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6860,
    "end_line": 6864,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e There is no special handling for multi-dimensional arrays. \u003c/p\u003e \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6882",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[], int, int)",
    "snippet": "public static void reverse(final Object[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        Object tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6882,
    "end_line": 6896,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Under value (\u0026lt;0) is promoted to 0, over value (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Under value (\u0026lt; start index) results in no change. Over value (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6906",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[])",
    "snippet": "public static void reverse(final short[] array) {\n        if (array !\u003d null) {\n            reverse(array, 0, array.length);\n        }\n    }",
    "begin_line": 6906,
    "end_line": 6910,
    "comment": "/** \n * Reverses the order of the given array. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6928",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[], int, int)",
    "snippet": "public static void reverse(final short[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        short tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6928,
    "end_line": 6942,
    "comment": "/** \n * Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\u003c/p\u003e\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.setAll#6957",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.setAll(T[], java.util.function.IntFunction\u003c? extends T\u003e)",
    "snippet": "public static \u003cT\u003e T[] setAll(final T[] array, final IntFunction\u003c? extends T\u003e generator) {\n        if (array !\u003d null \u0026\u0026 generator !\u003d null) {\n            Arrays.setAll(array, generator);\n        }\n        return array;\n    }",
    "begin_line": 6957,
    "end_line": 6962,
    "comment": "/** \n * Sets all elements of the specified array, using the provided generator supplier to compute each element. \u003cp\u003e If the generator supplier throws an exception, it is relayed to the caller and the array is left in an indeterminate state. \u003c/p\u003e\n * @param \u003c T \u003e type of elements of the array.\n * @param array array to be initialized.\n * @param generator a function accepting an index and producing the desired value for that position.\n * @return the input array\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.setAll#6977",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.setAll(T[], java.util.function.Supplier\u003c? extends T\u003e)",
    "snippet": "public static \u003cT\u003e T[] setAll(final T[] array, final Supplier\u003c? extends T\u003e generator) {\n        if (array !\u003d null \u0026\u0026 generator !\u003d null) {\n            for (int i \u003d 0; i \u003c array.length; i++) {\n                array[i] \u003d generator.get();\n            }\n        }\n        return array;\n    }",
    "begin_line": 6977,
    "end_line": 6984,
    "comment": "/** \n * Sets all elements of the specified array, using the provided generator supplier to compute each element. \u003cp\u003e If the generator supplier throws an exception, it is relayed to the caller and the array is left in an indeterminate state. \u003c/p\u003e\n * @param \u003c T \u003e type of elements of the array.\n * @param array array to be initialized.\n * @param generator a function accepting an index and producing the desired value for that position.\n * @return the input array\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6998",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int)",
    "snippet": "public static void shift(final boolean[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 6998,
    "end_line": 7002,
    "comment": "/** \n * Shifts the order of the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int, int, int)",
    "snippet": "public static void shift(final boolean[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7023,
    "end_line": 7059,
    "comment": "/** \n * Shifts the order of a series of elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7073",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int)",
    "snippet": "public static void shift(final byte[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7073,
    "end_line": 7077,
    "comment": "/** \n * Shifts the order of the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7098",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int, int, int)",
    "snippet": "public static void shift(final byte[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7098,
    "end_line": 7134,
    "comment": "/** \n * Shifts the order of a series of elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7148",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int)",
    "snippet": "public static void shift(final char[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7148,
    "end_line": 7152,
    "comment": "/** \n * Shifts the order of the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int, int, int)",
    "snippet": "public static void shift(final char[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7173,
    "end_line": 7209,
    "comment": "/** \n * Shifts the order of a series of elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int)",
    "snippet": "public static void shift(final double[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7223,
    "end_line": 7227,
    "comment": "/** \n * Shifts the order of the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int, int, int)",
    "snippet": "public static void shift(final double[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7248,
    "end_line": 7284,
    "comment": "/** \n * Shifts the order of a series of elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7298",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int)",
    "snippet": "public static void shift(final float[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7298,
    "end_line": 7302,
    "comment": "/** \n * Shifts the order of the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int, int, int)",
    "snippet": "public static void shift(final float[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7323,
    "end_line": 7359,
    "comment": "/** \n * Shifts the order of a series of elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7373",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int)",
    "snippet": "public static void shift(final int[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7373,
    "end_line": 7377,
    "comment": "/** \n * Shifts the order of the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7398",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int, int, int)",
    "snippet": "public static void shift(final int[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7398,
    "end_line": 7434,
    "comment": "/** \n * Shifts the order of a series of elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7448",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int)",
    "snippet": "public static void shift(final long[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7448,
    "end_line": 7452,
    "comment": "/** \n * Shifts the order of the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7473",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int, int, int)",
    "snippet": "public static void shift(final long[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7473,
    "end_line": 7509,
    "comment": "/** \n * Shifts the order of a series of elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7523",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int)",
    "snippet": "public static void shift(final Object[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7523,
    "end_line": 7527,
    "comment": "/** \n * Shifts the order of the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7548",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int, int, int)",
    "snippet": "public static void shift(final Object[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7548,
    "end_line": 7584,
    "comment": "/** \n * Shifts the order of a series of elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7598",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int)",
    "snippet": "public static void shift(final short[] array, final int offset) {\n        if (array !\u003d null) {\n            shift(array, 0, array.length, offset);\n        }\n    }",
    "begin_line": 7598,
    "end_line": 7602,
    "comment": "/** \n * Shifts the order of the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7623",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int, int, int)",
    "snippet": "public static void shift(final short[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int nOffset \u003d n - offset;\n\n            if (offset \u003e nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - nOffset,  nOffset);\n                n \u003d offset;\n                offset -\u003d nOffset;\n            } else if (offset \u003c nOffset) {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d nOffset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7623,
    "end_line": 7659,
    "comment": "/** \n * Shifts the order of a series of elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7668",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[])",
    "snippet": "public static void shuffle(final boolean[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7668,
    "end_line": 7670,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7680",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[], java.util.Random)",
    "snippet": "public static void shuffle(final boolean[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7680,
    "end_line": 7684,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7693",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[])",
    "snippet": "public static void shuffle(final byte[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7693,
    "end_line": 7695,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7705",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[], java.util.Random)",
    "snippet": "public static void shuffle(final byte[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7705,
    "end_line": 7709,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7718",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[])",
    "snippet": "public static void shuffle(final char[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7718,
    "end_line": 7720,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7730",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[], java.util.Random)",
    "snippet": "public static void shuffle(final char[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7730,
    "end_line": 7734,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7743",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[])",
    "snippet": "public static void shuffle(final double[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7743,
    "end_line": 7745,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7755",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[], java.util.Random)",
    "snippet": "public static void shuffle(final double[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7755,
    "end_line": 7759,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7768",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[])",
    "snippet": "public static void shuffle(final float[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7768,
    "end_line": 7770,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7780",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[], java.util.Random)",
    "snippet": "public static void shuffle(final float[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7780,
    "end_line": 7784,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7793",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[])",
    "snippet": "public static void shuffle(final int[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7793,
    "end_line": 7795,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7805",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[], java.util.Random)",
    "snippet": "public static void shuffle(final int[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7805,
    "end_line": 7809,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7818",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[])",
    "snippet": "public static void shuffle(final long[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7818,
    "end_line": 7820,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7830",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[], java.util.Random)",
    "snippet": "public static void shuffle(final long[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7830,
    "end_line": 7834,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7843",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[])",
    "snippet": "public static void shuffle(final Object[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7843,
    "end_line": 7845,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7855",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[], java.util.Random)",
    "snippet": "public static void shuffle(final Object[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7855,
    "end_line": 7859,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7868",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[])",
    "snippet": "public static void shuffle(final short[] array) {\n        shuffle(array, random());\n    }",
    "begin_line": 7868,
    "end_line": 7870,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7880",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[], java.util.Random)",
    "snippet": "public static void shuffle(final short[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7880,
    "end_line": 7884,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7907",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(boolean[], int, int)",
    "snippet": "public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n\n        final boolean[] subarray \u003d new boolean[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7907,
    "end_line": 7925,
    "comment": "/** \n * Produces a new  {@code boolean} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(boolean[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7948",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(byte[], int, int)",
    "snippet": "public static byte[] subarray(final byte[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n\n        final byte[] subarray \u003d new byte[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7948,
    "end_line": 7966,
    "comment": "/** \n * Produces a new  {@code byte} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(byte[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7989",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(char[], int, int)",
    "snippet": "public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n\n        final char[] subarray \u003d new char[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7989,
    "end_line": 8007,
    "comment": "/** \n * Produces a new  {@code char} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(char[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8030",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(double[], int, int)",
    "snippet": "public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n\n        final double[] subarray \u003d new double[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8030,
    "end_line": 8048,
    "comment": "/** \n * Produces a new  {@code double} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(double[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8071",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(float[], int, int)",
    "snippet": "public static float[] subarray(final float[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n\n        final float[] subarray \u003d new float[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8071,
    "end_line": 8089,
    "comment": "/** \n * Produces a new  {@code float} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(float[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8112",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(int[], int, int)",
    "snippet": "public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n\n        final int[] subarray \u003d new int[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8112,
    "end_line": 8130,
    "comment": "/** \n * Produces a new  {@code int} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(int[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(long[], int, int)",
    "snippet": "public static long[] subarray(final long[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n\n        final long[] subarray \u003d new long[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8153,
    "end_line": 8171,
    "comment": "/** \n * Produces a new  {@code long} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(long[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8194",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(short[], int, int)",
    "snippet": "public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n\n        final short[] subarray \u003d new short[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8194,
    "end_line": 8212,
    "comment": "/** \n * Produces a new  {@code short} array containing the elementsbetween the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(short[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8244",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(T[], int, int)",
    "snippet": "public static \u003cT\u003e T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        final Class\u003cT\u003e type \u003d getComponentType(array);\n        if (newSize \u003c\u003d 0) {\n            return newInstance(type, 0);\n        }\n        final T[] subarray \u003d newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8244,
    "end_line": 8262,
    "comment": "/** \n * Produces a new array containing the elements between the start and end indices. \u003cp\u003e The start index is inclusive, the end index exclusive. Null array input produces null output. \u003c/p\u003e \u003cp\u003e The component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type {@link Date}, the following usage is envisaged: \u003c/p\u003e \u003cpre\u003e Date[] someDates \u003d (Date[]) ArrayUtils.subarray(allDates, 2, 5); \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(Object[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8285",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int)",
    "snippet": "public static void swap(final boolean[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8285,
    "end_line": 8287,
    "comment": "/** \n * Swaps two elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8314",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int, int)",
    "snippet": "public static void swap(final boolean[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final boolean aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8314,
    "end_line": 8330,
    "comment": "/** \n * Swaps a series of elements in the given boolean array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 0, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], -3, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 3, 3) -\u0026gt; [false, false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8353",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int)",
    "snippet": "public static void swap(final byte[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8353,
    "end_line": 8355,
    "comment": "/** \n * Swaps two elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8381",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int, int)",
    "snippet": "public static void swap(final byte[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final byte aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8381,
    "end_line": 8397,
    "comment": "/** \n * Swaps a series of elements in the given byte array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int)",
    "snippet": "public static void swap(final char[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8420,
    "end_line": 8422,
    "comment": "/** \n * Swaps two elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8448",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int, int)",
    "snippet": "public static void swap(final char[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final char aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8448,
    "end_line": 8464,
    "comment": "/** \n * Swaps a series of elements in the given char array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8487",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int)",
    "snippet": "public static void swap(final double[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8487,
    "end_line": 8489,
    "comment": "/** \n * Swaps two elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8515",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int, int)",
    "snippet": "public static void swap(final double[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final double aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8515,
    "end_line": 8531,
    "comment": "/** \n * Swaps a series of elements in the given double array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int)",
    "snippet": "public static void swap(final float[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8554,
    "end_line": 8556,
    "comment": "/** \n * Swaps two elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8582",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int, int)",
    "snippet": "public static void swap(final float[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final float aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n\n    }",
    "begin_line": 8582,
    "end_line": 8599,
    "comment": "/** \n * Swaps a series of elements in the given float array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8622",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int)",
    "snippet": "public static void swap(final int[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8622,
    "end_line": 8624,
    "comment": "/** \n * Swaps two elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8650",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int, int)",
    "snippet": "public static void swap(final int[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final int aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8650,
    "end_line": 8666,
    "comment": "/** \n * Swaps a series of elements in the given int array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8689",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int)",
    "snippet": "public static void swap(final long[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8689,
    "end_line": 8691,
    "comment": "/** \n * Swaps two elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 2) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 0) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 1, 0) -\u0026gt; [false, true, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 5) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], -1, 1) -\u0026gt; [false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8717",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int, int)",
    "snippet": "public static void swap(final long[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final long aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8717,
    "end_line": 8733,
    "comment": "/** \n * Swaps a series of elements in the given long array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8756",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int)",
    "snippet": "public static void swap(final Object[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8756,
    "end_line": 8758,
    "comment": "/** \n * Swaps two elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 2) -\u0026gt; [\"3\", \"2\", \"1\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 0) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 1, 0) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 5) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], -1, 1) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8784",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int, int)",
    "snippet": "public static void swap(final Object[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final Object aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8784,
    "end_line": 8800,
    "comment": "/** \n * Swaps a series of elements in the given array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 2, 1) -\u0026gt; [\"3\", \"2\", \"1\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 0, 1) -\u0026gt; [\"1\", \"2\", \"3\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 2, 0, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], -3, 2, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 3, 3) -\u0026gt; [\"4\", \"2\", \"3\", \"1\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8823",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int)",
    "snippet": "public static void swap(final short[] array, final int offset1, final int offset2) {\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8823,
    "end_line": 8825,
    "comment": "/** \n * Swaps two elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8851",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int, int)",
    "snippet": "public static void swap(final short[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        if (offset1 \u003d\u003d offset2) {\n            return;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final short aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8851,
    "end_line": 8870,
    "comment": "/** \n * Swaps a series of elements in the given short array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toArray#8911",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toArray(T)",
    "snippet": "public static \u003cT\u003e T[] toArray(@SuppressWarnings(\"unchecked\") final T... items) {\n        return items;\n    }",
    "begin_line": 8911,
    "end_line": 8913,
    "comment": "/** \n * Create a type-safe generic array. \u003cp\u003e The Java language does not allow an array to be created from a generic type: \u003c/p\u003e \u003cpre\u003e public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return new T[size]; // compiler error here } public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return (T[]) new Object[size]; // ClassCastException at runtime } \u003c/pre\u003e \u003cp\u003e Therefore new arrays of generic types can be created with this method. For example, an array of Strings can be created: \u003c/p\u003e \u003cpre\u003e String[] array \u003d ArrayUtils.toArray(\"1\", \"2\"); String[] emptyArray \u003d ArrayUtils.\u0026lt;String\u0026gt;toArray(); \u003c/pre\u003e \u003cp\u003e The method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array. \u003c/p\u003e \u003cp\u003e Note, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in {@code Number[] array \u003d ArrayUtils.\u0026lt;Number\u0026gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))}, there is no real advantage when compared to {@code} new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}}.\u003c/p\u003e\n * @param \u003c T \u003e   the array\u0027s element type\n * @param items  the varargs array items, null allowed\n * @return the array, not null unless a null array is passed in\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toMap#8942",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toMap(java.lang.Object[])",
    "snippet": "public static Map\u003cObject, Object\u003e toMap(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e((int) (array.length * 1.5));\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            if (object instanceof Map.Entry\u003c?, ?\u003e) {\n                final Map.Entry\u003c?, ?\u003e entry \u003d (Map.Entry\u003c?, ?\u003e) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                final Object[] entry \u003d (Object[]) object;\n                if (entry.length \u003c 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }",
    "begin_line": 8942,
    "end_line": 8967,
    "comment": "/** \n * Converts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value. \u003cp\u003e This method can be used to initialize: \u003c/p\u003e \u003cpre\u003e // Create a Map mapping colors. Map colorMap \u003d ArrayUtils.toMap(new String[][] { {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"}}); \u003c/pre\u003e \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be  {@code null}\n * @return a {@link Map} that was created from the array\n * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less than two elements\n * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8977",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(boolean[])",
    "snippet": "public static Boolean[] toObject(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        final Boolean[] result \u003d new Boolean[array.length];\n        return setAll(result, i -\u003e array[i] ? Boolean.TRUE : Boolean.FALSE);\n    }",
    "begin_line": 8977,
    "end_line": 8986,
    "comment": "/** \n * Converts an array of primitive booleans to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code boolean} array\n * @return a {@link Boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8996",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(byte[])",
    "snippet": "public static Byte[] toObject(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        return setAll(new Byte[array.length], i -\u003e Byte.valueOf(array[i]));\n    }",
    "begin_line": 8996,
    "end_line": 9004,
    "comment": "/** \n * Converts an array of primitive bytes to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code byte} array\n * @return a {@link Byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9014",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(char[])",
    "snippet": "public static Character[] toObject(final char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        return setAll(new Character[array.length], i -\u003e Character.valueOf(array[i]));\n     }",
    "begin_line": 9014,
    "end_line": 9022,
    "comment": "/** \n * Converts an array of primitive chars to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array a {@code char} array\n * @return a {@link Character} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9032",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(double[])",
    "snippet": "public static Double[] toObject(final double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return setAll(new Double[array.length], i -\u003e Double.valueOf(array[i]));\n    }",
    "begin_line": 9032,
    "end_line": 9040,
    "comment": "/** \n * Converts an array of primitive doubles to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code double} array\n * @return a {@link Double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9050",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(float[])",
    "snippet": "public static Float[] toObject(final float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        return setAll(new Float[array.length], i -\u003e Float.valueOf(array[i]));\n    }",
    "begin_line": 9050,
    "end_line": 9058,
    "comment": "/** \n * Converts an array of primitive floats to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code float} array\n * @return a {@link Float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9068",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(int[])",
    "snippet": "public static Integer[] toObject(final int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        return setAll(new Integer[array.length], i -\u003e Integer.valueOf(array[i]));\n    }",
    "begin_line": 9068,
    "end_line": 9076,
    "comment": "/** \n * Converts an array of primitive ints to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  an {@code int} array\n * @return an {@link Integer} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9086",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(long[])",
    "snippet": "public static Long[] toObject(final long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return setAll(new Long[array.length], i -\u003e Long.valueOf(array[i]));\n    }",
    "begin_line": 9086,
    "end_line": 9094,
    "comment": "/** \n * Converts an array of primitive longs to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code long} array\n * @return a {@link Long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9104",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(short[])",
    "snippet": "public static Short[] toObject(final short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        return setAll(new Short[array.length], i -\u003e Short.valueOf(array[i]));\n    }",
    "begin_line": 9104,
    "end_line": 9112,
    "comment": "/** \n * Converts an array of primitive shorts to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@code short} array\n * @return a {@link Short} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9126",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array) {\n        return toPrimitive(array, false);\n    }",
    "begin_line": 9126,
    "end_line": 9128,
    "comment": "/** \n * Converts an array of object Booleans to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e \u003cp\u003e Null array elements map to false, like  {@code Boolean.parseBoolean(null)} and its callers return false.\u003c/p\u003e\n * @param array a {@link Boolean} array, may be {@code null}\n * @return a {@code boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9140",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Boolean b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.booleanValue();\n        }\n        return result;\n    }",
    "begin_line": 9140,
    "end_line": 9153,
    "comment": "/** \n * Converts an array of object Booleans to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Boolean} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9165",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[])",
    "snippet": "public static byte[] toPrimitive(final Byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].byteValue();\n        }\n        return result;\n    }",
    "begin_line": 9165,
    "end_line": 9177,
    "comment": "/** \n * Converts an array of object Bytes to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Byte} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9189",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
    "snippet": "public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Byte b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.byteValue();\n        }\n        return result;\n    }",
    "begin_line": 9189,
    "end_line": 9202,
    "comment": "/** \n * Converts an array of object Bytes to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Byte} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9214",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[])",
    "snippet": "public static char[] toPrimitive(final Character[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].charValue();\n        }\n        return result;\n    }",
    "begin_line": 9214,
    "end_line": 9226,
    "comment": "/** \n * Converts an array of object Characters to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Character} array, may be {@code null}\n * @return a {@code char} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9238",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[], char)",
    "snippet": "public static char[] toPrimitive(final Character[] array, final char valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Character b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.charValue();\n        }\n        return result;\n    }",
    "begin_line": 9238,
    "end_line": 9251,
    "comment": "/** \n * Converts an array of object Character to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Character} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code char} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9263",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[])",
    "snippet": "public static double[] toPrimitive(final Double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].doubleValue();\n        }\n        return result;\n    }",
    "begin_line": 9263,
    "end_line": 9275,
    "comment": "/** \n * Converts an array of object Doubles to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Double} array, may be {@code null}\n * @return a {@code double} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[], double)",
    "snippet": "public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Double b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.doubleValue();\n        }\n        return result;\n    }",
    "begin_line": 9287,
    "end_line": 9300,
    "comment": "/** \n * Converts an array of object Doubles to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Double} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9312",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[])",
    "snippet": "public static float[] toPrimitive(final Float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].floatValue();\n        }\n        return result;\n    }",
    "begin_line": 9312,
    "end_line": 9324,
    "comment": "/** \n * Converts an array of object Floats to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Float} array, may be {@code null}\n * @return a {@code float} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9336",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[], float)",
    "snippet": "public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Float b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.floatValue();\n        }\n        return result;\n    }",
    "begin_line": 9336,
    "end_line": 9349,
    "comment": "/** \n * Converts an array of object Floats to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Float} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9361",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[])",
    "snippet": "public static int[] toPrimitive(final Integer[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].intValue();\n        }\n        return result;\n    }",
    "begin_line": 9361,
    "end_line": 9373,
    "comment": "/** \n * Converts an array of object Integers to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Integer} array, may be {@code null}\n * @return an {@code int} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9385",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
    "snippet": "public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Integer b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.intValue();\n        }\n        return result;\n    }",
    "begin_line": 9385,
    "end_line": 9398,
    "comment": "/** \n * Converts an array of object Integer to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Integer} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return an {@code int} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9410",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[])",
    "snippet": "public static long[] toPrimitive(final Long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].longValue();\n        }\n        return result;\n    }",
    "begin_line": 9410,
    "end_line": 9422,
    "comment": "/** \n * Converts an array of object Longs to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Long} array, may be {@code null}\n * @return a {@code long} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9434",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[], long)",
    "snippet": "public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Long b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.longValue();\n        }\n        return result;\n    }",
    "begin_line": 9434,
    "end_line": 9447,
    "comment": "/** \n * Converts an array of object Long to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Long} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Object)",
    "snippet": "public static Object toPrimitive(final Object array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Class\u003c?\u003e ct \u003d array.getClass().getComponentType();\n        final Class\u003c?\u003e pt \u003d ClassUtils.wrapperToPrimitive(ct);\n        if (Boolean.TYPE.equals(pt)) {\n            return toPrimitive((Boolean[]) array);\n        }\n        if (Character.TYPE.equals(pt)) {\n            return toPrimitive((Character[]) array);\n        }\n        if (Byte.TYPE.equals(pt)) {\n            return toPrimitive((Byte[]) array);\n        }\n        if (Integer.TYPE.equals(pt)) {\n            return toPrimitive((Integer[]) array);\n        }\n        if (Long.TYPE.equals(pt)) {\n            return toPrimitive((Long[]) array);\n        }\n        if (Short.TYPE.equals(pt)) {\n            return toPrimitive((Short[]) array);\n        }\n        if (Double.TYPE.equals(pt)) {\n            return toPrimitive((Double[]) array);\n        }\n        if (Float.TYPE.equals(pt)) {\n            return toPrimitive((Float[]) array);\n        }\n        return array;\n    }",
    "begin_line": 9459,
    "end_line": 9490,
    "comment": "/** \n * Create an array of primitive type from an array of wrapper types. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  an array of wrapper object\n * @return an array of the corresponding primitive type, or the original array\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9502",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[])",
    "snippet": "public static short[] toPrimitive(final Short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].shortValue();\n        }\n        return result;\n    }",
    "begin_line": 9502,
    "end_line": 9514,
    "comment": "/** \n * Converts an array of object Shorts to primitives. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Short} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[], short)",
    "snippet": "public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Short b \u003d array[i];\n            result[i] \u003d b \u003d\u003d null ? valueForNull : b.shortValue();\n        }\n        return result;\n    }",
    "begin_line": 9526,
    "end_line": 9539,
    "comment": "/** \n * Converts an array of object Short to primitives handling  {@code null}. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array  a {@link Short} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object)",
    "snippet": "public static String toString(final Object array) {\n        return toString(array, \"{}\");\n    }",
    "begin_line": 9554,
    "end_line": 9556,
    "comment": "/** \n * Outputs an array as a String, treating  {@code null} as an empty array.\u003cp\u003e Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003c/p\u003e \u003cp\u003e The format is that of Java source code, for example  {@code} {a,b}}.\u003c/p\u003e\n * @param array  the array to get a toString for, may be {@code null}\n * @return a String representation of the array, \u0027{}\u0027 if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9572",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object, java.lang.String)",
    "snippet": "public static String toString(final Object array, final String stringIfNull) {\n        if (array \u003d\u003d null) {\n            return stringIfNull;\n        }\n        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n    }",
    "begin_line": 9572,
    "end_line": 9577,
    "comment": "/** \n * Outputs an array as a String handling  {@code null}s. \u003cp\u003e Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003c/p\u003e \u003cp\u003e The format is that of Java source code, for example  {@code} {a,b}}.\u003c/p\u003e\n * @param array  the array to get a toString for, may be {@code null}\n * @param stringIfNull  the String to return if the array is {@code null}\n * @return a String representation of the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9591",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[])",
    "snippet": "public static String[] toStringArray(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].toString();\n        }\n\n        return result;\n    }",
    "begin_line": 9591,
    "end_line": 9605,
    "comment": "/** \n * Returns an array containing the string representation of each element in the argument array. \u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the {@code Object[]} to be processed, may be null\n * @return {@code String[]} of the same size as the source with its element\u0027s string representation,{@code null} if null array input\n * @throws NullPointerException if an array element is {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9619",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[], java.lang.String)",
    "snippet": "public static String[] toStringArray(final Object[] array, final String valueForNullElements) {\n        if (null \u003d\u003d array) {\n            return null;\n        }\n        if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            result[i] \u003d object \u003d\u003d null ? valueForNullElements : object.toString();\n        }\n\n        return result;\n    }",
    "begin_line": 9619,
    "end_line": 9634,
    "comment": "/** \n * Returns an array containing the string representation of each element in the argument array handling  {@code null} elements.\u003cp\u003e This method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the Object[] to be processed, may be null\n * @param valueForNullElements the value to insert if {@code null} is found\n * @return a {@link String} array, {@code null} if null array input\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.ArrayUtils#9644",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.ArrayUtils()",
    "snippet": "public ArrayUtils() {\n    }",
    "begin_line": 9644,
    "end_line": 9645,
    "comment": "/** \n * ArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code} ArrayUtils.clone(new int[] {2})}.\u003cp\u003e This constructor is public to permit tools that require a JavaBean instance to operate. \u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.Null#84",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.Null()",
    "snippet": " Null() {\n        }",
    "begin_line": 84,
    "end_line": 85,
    "comment": "/** \n * Restricted constructor - singleton.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.readResolve#92",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.readResolve()",
    "snippet": "private Object readResolve() {\n            return NULL;\n        }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.allNotNull#141",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.allNotNull(java.lang.Object)",
    "snippet": "public static boolean allNotNull(final Object... values) {\n        return values !\u003d null \u0026\u0026 Stream.of(values).noneMatch(Objects::isNull);\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Checks if all values in the array are not  {@code nulls}. \u003cp\u003e If any value is  {@code null} or the array is {@code null} then{@code false} is returned. If all elements in array are not{@code null} or the array is empty (contains no elements) {@code true}is returned. \u003c/p\u003e \u003cpre\u003e ObjectUtils.allNotNull(*)             \u003d true ObjectUtils.allNotNull(*, *)          \u003d true ObjectUtils.allNotNull(null)          \u003d false ObjectUtils.allNotNull(null, null)    \u003d false ObjectUtils.allNotNull(null, *)       \u003d false ObjectUtils.allNotNull(*, null)       \u003d false ObjectUtils.allNotNull(*, *, null, *) \u003d false \u003c/pre\u003e\n * @param values  the values to test, may be {@code null} or empty\n * @return {@code false} if there is at least one {@code null} value in the array or the array is {@code null}, {@code true} if all values in the array are not {@code null}s or array contains no elements.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.allNull#167",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.allNull(java.lang.Object)",
    "snippet": "public static boolean allNull(final Object... values) {\n        return !anyNotNull(values);\n    }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Checks if all values in the given array are  {@code null}. \u003cp\u003e If all the values are  {@code null} or the array is {@code null}or empty, then  {@code true} is returned, otherwise {@code false} is returned.\u003c/p\u003e \u003cpre\u003e ObjectUtils.allNull(*)                \u003d false ObjectUtils.allNull(*, null)          \u003d false ObjectUtils.allNull(null, *)          \u003d false ObjectUtils.allNull(null, null, *, *) \u003d false ObjectUtils.allNull(null)             \u003d true ObjectUtils.allNull(null, null)       \u003d true \u003c/pre\u003e\n * @param values  the values to test, may be {@code null} or empty\n * @return {@code true} if all values in the array are {@code null}s, {@code false} if there is at least one non-null value in the array.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.anyNotNull#194",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.anyNotNull(java.lang.Object)",
    "snippet": "public static boolean anyNotNull(final Object... values) {\n        return firstNonNull(values) !\u003d null;\n    }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "/** \n * Checks if any value in the given array is not  {@code null}. \u003cp\u003e If all the values are  {@code null} or the array is {@code null}or empty then  {@code false} is returned. Otherwise {@code true} is returned.\u003c/p\u003e \u003cpre\u003e ObjectUtils.anyNotNull(*)                \u003d true ObjectUtils.anyNotNull(*, null)          \u003d true ObjectUtils.anyNotNull(null, *)          \u003d true ObjectUtils.anyNotNull(null, null, *, *) \u003d true ObjectUtils.anyNotNull(null)             \u003d false ObjectUtils.anyNotNull(null, null)       \u003d false \u003c/pre\u003e\n * @param values  the values to test, may be {@code null} or empty\n * @return {@code true} if there is at least one non-null value in the array,{@code false} if all values in the array are {@code null}s. If the array is  {@code null} or empty {@code false} is also returned.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.anyNull#222",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.anyNull(java.lang.Object)",
    "snippet": "public static boolean anyNull(final Object... values) {\n        return !allNotNull(values);\n    }",
    "begin_line": 222,
    "end_line": 224,
    "comment": "/** \n * Checks if any value in the given array is  {@code null}. \u003cp\u003e If any of the values are  {@code null} or the array is {@code null}, then  {@code true} is returned, otherwise {@code false} is returned.\u003c/p\u003e \u003cpre\u003e ObjectUtils.anyNull(*)             \u003d false ObjectUtils.anyNull(*, *)          \u003d false ObjectUtils.anyNull(null)          \u003d true ObjectUtils.anyNull(null, null)    \u003d true ObjectUtils.anyNull(null, *)       \u003d true ObjectUtils.anyNull(*, null)       \u003d true ObjectUtils.anyNull(*, *, null, *) \u003d true \u003c/pre\u003e\n * @param values  the values to test, may be {@code null} or empty\n * @return {@code true} if there is at least one {@code null} value in the array,{@code false} if all the values are non-null.If the array is  {@code null} or empty, {@code true} is also returned.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.clone#235",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.clone(T)",
    "snippet": "public static \u003cT\u003e T clone(final T obj) {\n        if (obj instanceof Cloneable) {\n            final Object result;\n            if (isArray(obj)) {\n                final Class\u003c?\u003e componentType \u003d obj.getClass().getComponentType();\n                if (componentType.isPrimitive()) {\n                    int length \u003d Array.getLength(obj);\n                    result \u003d Array.newInstance(componentType, length);\n                    while (length-- \u003e 0) {\n                        Array.set(result, length, Array.get(obj, length));\n                    }\n                } else {\n                    result \u003d ((Object[]) obj).clone();\n                }\n            } else {\n                try {\n                    final Method clone \u003d obj.getClass().getMethod(\"clone\");\n                    result \u003d clone.invoke(obj);\n                } catch (final NoSuchMethodException e) {\n                    throw new CloneFailedException(\"Cloneable type \"\n                        + obj.getClass().getName()\n                        + \" has no clone method\", e);\n                } catch (final IllegalAccessException e) {\n                    throw new CloneFailedException(\"Cannot clone Cloneable type \"\n                        + obj.getClass().getName(), e);\n                } catch (final InvocationTargetException e) {\n                    throw new CloneFailedException(\"Exception cloning Cloneable type \"\n                        + obj.getClass().getName(), e.getCause());\n                }\n            }\n            @SuppressWarnings(\"unchecked\") // OK because input is of type T\n            final T checked \u003d (T) result;\n            return checked;\n        }\n\n        return null;\n    }",
    "begin_line": 235,
    "end_line": 271,
    "comment": "/** \n * Clone an object.\n * @param \u003c T \u003e the type of the object\n * @param obj  the object to clone, null returns null\n * @return the clone if the object implements {@link Cloneable} otherwise {@code null}\n * @throws CloneFailedException if the object is cloneable and the clone operation fails\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.cloneIfPossible#289",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.cloneIfPossible(T)",
    "snippet": "public static \u003cT\u003e T cloneIfPossible(final T obj) {\n        final T clone \u003d clone(obj);\n        return clone \u003d\u003d null ? obj : clone;\n    }",
    "begin_line": 289,
    "end_line": 292,
    "comment": "/** \n * Clone an object if possible. \u003cp\u003eThis method is similar to  {@link #clone(Object)}, but will return the provided instance as the return value instead of  {@code null} if the instanceis not cloneable. This is more convenient if the caller uses different implementations (e.g. of a service) and some of the implementations do not allow concurrent processing or have state. In such cases the implementation can simply provide a proper clone implementation and the caller\u0027s code does not have to change.\u003c/p\u003e\n * @param \u003c T \u003e the type of the object\n * @param obj  the object to clone, null returns null\n * @return the clone if the object implements {@link Cloneable} otherwise the object itself\n * @throws CloneFailedException if the object is cloneable and the clone operation fails\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.compare#305",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.compare(T, T)",
    "snippet": "public static \u003cT extends Comparable\u003c? super T\u003e\u003e int compare(final T c1, final T c2) {\n        return compare(c1, c2, false);\n    }",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * Null safe comparison of Comparables. {@code null} is assumed to be less than a non-{@code null} value.\u003cp\u003eTODO Move to ComparableUtils.\u003c/p\u003e\n * @param \u003c T \u003e type of the values processed by this method\n * @param c1  the first comparable, may be null\n * @param c2  the second comparable, may be null\n * @return a negative value if c1 \u0026lt; c2, zero if c1 \u003d c2and a positive value if c1 \u0026gt; c2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.compare#323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.compare(T, T, boolean)",
    "snippet": "public static \u003cT extends Comparable\u003c? super T\u003e\u003e int compare(final T c1, final T c2, final boolean nullGreater) {\n        if (c1 \u003d\u003d c2) {\n            return 0;\n        }\n        if (c1 \u003d\u003d null) {\n            return nullGreater ? 1 : -1;\n        }\n        if (c2 \u003d\u003d null) {\n            return nullGreater ? -1 : 1;\n        }\n        return c1.compareTo(c2);\n    }",
    "begin_line": 323,
    "end_line": 334,
    "comment": "/** \n * Null safe comparison of Comparables. \u003cp\u003eTODO Move to ComparableUtils.\u003c/p\u003e\n * @param \u003c T \u003e type of the values processed by this method\n * @param c1  the first comparable, may be null\n * @param c2  the second comparable, may be null\n * @param nullGreater if true {@code null} is considered greaterthan a non- {@code null} value or if false {@code null} isconsidered less than a Non- {@code null} value\n * @return a negative value if c1 \u0026lt; c2, zero if c1 \u003d c2and a positive value if c1 \u0026gt; c2\n * @see java.util.Comparator#compare(Object,Object)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#353",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(boolean)",
    "snippet": "public static boolean CONST(final boolean v) {\n        return v;\n    }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static boolean MAGIC_FLAG \u003d ObjectUtils.CONST(true); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the boolean value to return\n * @return the boolean v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#374",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(byte)",
    "snippet": "public static byte CONST(final byte v) {\n        return v;\n    }",
    "begin_line": 374,
    "end_line": 376,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static byte MAGIC_BYTE \u003d ObjectUtils.CONST((byte) 127); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the byte value to return\n * @return the byte v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#395",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(char)",
    "snippet": "public static char CONST(final char v) {\n        return v;\n    }",
    "begin_line": 395,
    "end_line": 397,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static char MAGIC_CHAR \u003d ObjectUtils.CONST(\u0027a\u0027); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the char value to return\n * @return the char v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#416",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(double)",
    "snippet": "public static double CONST(final double v) {\n        return v;\n    }",
    "begin_line": 416,
    "end_line": 418,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static double MAGIC_DOUBLE \u003d ObjectUtils.CONST(1.0); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the double value to return\n * @return the double v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#437",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(float)",
    "snippet": "public static float CONST(final float v) {\n        return v;\n    }",
    "begin_line": 437,
    "end_line": 439,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static float MAGIC_FLOAT \u003d ObjectUtils.CONST(1.0f); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the float value to return\n * @return the float v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#458",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(int)",
    "snippet": "public static int CONST(final int v) {\n        return v;\n    }",
    "begin_line": 458,
    "end_line": 460,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static int MAGIC_INT \u003d ObjectUtils.CONST(123); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the int value to return\n * @return the int v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#479",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(long)",
    "snippet": "public static long CONST(final long v) {\n        return v;\n    }",
    "begin_line": 479,
    "end_line": 481,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static long MAGIC_LONG \u003d ObjectUtils.CONST(123L); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the long value to return\n * @return the long v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#500",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(short)",
    "snippet": "public static short CONST(final short v) {\n        return v;\n    }",
    "begin_line": 500,
    "end_line": 502,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static short MAGIC_SHORT \u003d ObjectUtils.CONST((short) 123); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the short value to return\n * @return the short v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST#522",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST(T)",
    "snippet": "public static \u003cT\u003e T CONST(final T v) {\n        return v;\n    }",
    "begin_line": 522,
    "end_line": 524,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static String MAGIC_STRING \u003d ObjectUtils.CONST(\"abc\"); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param \u003c T \u003e the Object type\n * @param v the genericized Object value to return (typically a String).\n * @return the genericized Object v, unchanged (typically a String).\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST_BYTE#546",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST_BYTE(int)",
    "snippet": "public static byte CONST_BYTE(final int v) {\n        if (v \u003c Byte.MIN_VALUE || v \u003e Byte.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Supplied value must be a valid byte literal between -128 and 127: [\" + v + \"]\");\n        }\n        return (byte) v;\n    }",
    "begin_line": 546,
    "end_line": 551,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static byte MAGIC_BYTE \u003d ObjectUtils.CONST_BYTE(127); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the byte literal (as an int) value to return\n * @throws IllegalArgumentException if the value passed to vis larger than a byte, that is, smaller than -128 or larger than 127.\n * @return the byte v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.CONST_SHORT#573",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.CONST_SHORT(int)",
    "snippet": "public static short CONST_SHORT(final int v) {\n        if (v \u003c Short.MIN_VALUE || v \u003e Short.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Supplied value must be a valid byte literal between -32768 and 32767: [\" + v + \"]\");\n        }\n        return (short) v;\n    }",
    "begin_line": 573,
    "end_line": 578,
    "comment": "/** \n * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., \u003cpre\u003e public final static short MAGIC_SHORT \u003d ObjectUtils.CONST_SHORT(127); \u003c/pre\u003e This way any jars that refer to this field do not have to recompile themselves if the field\u0027s value changes at some future date.\n * @param v the short literal (as an int) value to return\n * @throws IllegalArgumentException if the value passed to vis larger than a short, that is, smaller than -32768 or larger than 32767.\n * @return the byte v, unchanged\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.defaultIfNull#597",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.defaultIfNull(T, T)",
    "snippet": "public static \u003cT\u003e T defaultIfNull(final T object, final T defaultValue) {\n        return object !\u003d null ? object : defaultValue;\n    }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "/** \n * Returns a default value if the object passed is  {@code null}. \u003cpre\u003e ObjectUtils.defaultIfNull(null, null)      \u003d null ObjectUtils.defaultIfNull(null, \"\")        \u003d \"\" ObjectUtils.defaultIfNull(null, \"zz\")      \u003d \"zz\" ObjectUtils.defaultIfNull(\"abc\", *)        \u003d \"abc\" ObjectUtils.defaultIfNull(Boolean.TRUE, *) \u003d Boolean.TRUE \u003c/pre\u003e\n * @param \u003c T \u003e the type of the object\n * @param object  the {@link Object} to test, may be {@code null}\n * @param defaultValue  the default value to return, may be {@code null}\n * @return {@code object} if it is not {@code null}, defaultValue otherwise TODO Rename to getIfNull in 4.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.equals#624",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object)",
    "snippet": "@Deprecated\n    public static boolean equals(final Object object1, final Object object2) {\n        return Objects.equals(object1, object2);\n    }",
    "begin_line": 624,
    "end_line": 626,
    "comment": "/** \n * Compares two objects for equality, where either one or both objects may be  {@code null}. \u003cpre\u003e ObjectUtils.equals(null, null)                  \u003d true ObjectUtils.equals(null, \"\")                    \u003d false ObjectUtils.equals(\"\", null)                    \u003d false ObjectUtils.equals(\"\", \"\")                      \u003d true ObjectUtils.equals(Boolean.TRUE, null)          \u003d false ObjectUtils.equals(Boolean.TRUE, \"true\")        \u003d false ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  \u003d true ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) \u003d false \u003c/pre\u003e\n * @param object1  the first object, may be {@code null}\n * @param object2  the second object, may be {@code null}\n * @return {@code true} if the values of both objects are the same\n * @deprecated this method has been replaced by {@code java.util.Objects.equals(Object, Object)} in Java 7 and willbe removed from future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.firstNonNull#651",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.firstNonNull(T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T firstNonNull(final T... values) {\n        return Streams.of(values).filter(Objects::nonNull).findFirst().orElse(null);\n    }",
    "begin_line": 651,
    "end_line": 653,
    "comment": "/** \n * Returns the first value in the array which is not  {@code null}. If all the values are  {@code null} or the array is {@code null}or empty then  {@code null} is returned.\u003cpre\u003e ObjectUtils.firstNonNull(null, null)      \u003d null ObjectUtils.firstNonNull(null, \"\")        \u003d \"\" ObjectUtils.firstNonNull(null, null, \"\")  \u003d \"\" ObjectUtils.firstNonNull(null, \"zz\")      \u003d \"zz\" ObjectUtils.firstNonNull(\"abc\", *)        \u003d \"abc\" ObjectUtils.firstNonNull(null, \"xyz\", *)  \u003d \"xyz\" ObjectUtils.firstNonNull(Boolean.TRUE, *) \u003d Boolean.TRUE ObjectUtils.firstNonNull()                \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param values  the values to test, may be {@code null} or empty\n * @return the first value from {@code values} which is not {@code null}, or  {@code null} if there are no non-null values\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.getClass#664",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.getClass(T)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static \u003cT\u003e Class\u003cT\u003e getClass(final T object) {\n        return object \u003d\u003d null ? null : (Class\u003cT\u003e) object.getClass();\n    }",
    "begin_line": 664,
    "end_line": 666,
    "comment": "/** \n * Delegates to  {@link Object#getClass()} using generics.\n * @param \u003c T \u003e The argument type or null.\n * @param object The argument.\n * @return The argument Class or null.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.getFirstNonNull#693",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.getFirstNonNull(java.util.function.Supplier\u003cT\u003e)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T getFirstNonNull(final Supplier\u003cT\u003e... suppliers) {\n        return Streams.of(suppliers).map(s -\u003e s !\u003d null ? s.get() : null).filter(Objects::nonNull).findFirst().orElse(null);\n    }",
    "begin_line": 693,
    "end_line": 695,
    "comment": "/** \n * Executes the given suppliers in order and returns the first return value where a value other than  {@code null} is returned.Once a non- {@code null} value is obtained, all following suppliers arenot executed anymore. If all the return values are  {@code null} or no suppliers are providedthen  {@code null} is returned.\u003cpre\u003e ObjectUtils.firstNonNullLazy(null, () -\u0026gt; null) \u003d null ObjectUtils.firstNonNullLazy(() -\u0026gt; null, () -\u0026gt; \"\") \u003d \"\" ObjectUtils.firstNonNullLazy(() -\u0026gt; \"\", () -\u0026gt; throw new IllegalStateException()) \u003d \"\" ObjectUtils.firstNonNullLazy(() -\u0026gt; null, () -\u0026gt; \"zz) \u003d \"zz\" ObjectUtils.firstNonNullLazy() \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e the type of the return values\n * @param suppliers  the suppliers returning the values to test.{@code null} values are ignored.Suppliers may return  {@code null} or a value of type @{code T}\n * @return the first return value from {@code suppliers} which is not {@code null}, or  {@code null} if there are no non-null values\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.getIfNull#720",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.getIfNull(T, java.util.function.Supplier\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e T getIfNull(final T object, final Supplier\u003cT\u003e defaultSupplier) {\n        return object !\u003d null ? object : Suppliers.get(defaultSupplier);\n    }",
    "begin_line": 720,
    "end_line": 722,
    "comment": "/** \n * Returns the given  {@code object} is it is non-null, otherwise returns the Supplier\u0027s {@link Supplier#get()}value. \u003cp\u003e The caller responsible for thread-safety and exception handling of default value supplier. \u003c/p\u003e \u003cpre\u003e ObjectUtils.getIfNull(null, () -\u0026gt; null)     \u003d null ObjectUtils.getIfNull(null, null)              \u003d null ObjectUtils.getIfNull(null, () -\u0026gt; \"\")       \u003d \"\" ObjectUtils.getIfNull(null, () -\u0026gt; \"zz\")     \u003d \"zz\" ObjectUtils.getIfNull(\"abc\", *)                \u003d \"abc\" ObjectUtils.getIfNull(Boolean.TRUE, *)         \u003d Boolean.TRUE \u003c/pre\u003e\n * @param \u003c T \u003e the type of the object\n * @param object the {@link Object} to test, may be {@code null}\n * @param defaultSupplier the default value to return, may be {@code null}\n * @return {@code object} if it is not {@code null},  {@code defaultValueSupplier.get()} otherwise\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.hashCode#740",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.hashCode(java.lang.Object)",
    "snippet": "@Deprecated\n    public static int hashCode(final Object obj) {\n        // hashCode(Object) for performance vs. hashCodeMulti(Object[]), as hash code is often critical\n        return Objects.hashCode(obj);\n    }",
    "begin_line": 740,
    "end_line": 743,
    "comment": "/** \n * Gets the hash code of an object returning zero when the object is  {@code null}. \u003cpre\u003e ObjectUtils.hashCode(null)   \u003d 0 ObjectUtils.hashCode(obj)    \u003d obj.hashCode() \u003c/pre\u003e\n * @param obj  the object to obtain the hash code of, may be {@code null}\n * @return the hash code of the object, or zero if null\n * @since 2.1\n * @deprecated this method has been replaced by {@code java.util.Objects.hashCode(Object)} in Java 7 and will beremoved in future releases\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.hashCodeHex#755",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.hashCodeHex(java.lang.Object)",
    "snippet": "public static String hashCodeHex(final Object object) {\n        return Integer.toHexString(Objects.hashCode(object));\n    }",
    "begin_line": 755,
    "end_line": 757,
    "comment": "/** \n * Returns the hex hash code for the given object per  {@link Objects#hashCode(Object)}. \u003cp\u003e Short hand for  {@code Integer.toHexString(Objects.hashCode(object))}. \u003c/p\u003e\n * @param object object for which the hashCode is to be calculated\n * @return Hash code in hexadecimal format.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.hashCodeMulti#783",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.hashCodeMulti(java.lang.Object)",
    "snippet": "@Deprecated\n    public static int hashCodeMulti(final Object... objects) {\n        int hash \u003d 1;\n        if (objects !\u003d null) {\n            for (final Object object : objects) {\n                final int tmpHash \u003d Objects.hashCode(object);\n                hash \u003d hash * 31 + tmpHash;\n            }\n        }\n        return hash;\n    }",
    "begin_line": 783,
    "end_line": 792,
    "comment": "/** \n * Gets the hash code for multiple objects. \u003cp\u003eThis allows a hash code to be rapidly calculated for a number of objects. The hash code for a single object is the \u003cem\u003enot\u003c/em\u003e same as  {@link #hashCode(Object)}. The hash code for multiple objects is the same as that calculated by an {@link ArrayList} containing the specified objects.\u003c/p\u003e\u003cpre\u003e ObjectUtils.hashCodeMulti()                 \u003d 1 ObjectUtils.hashCodeMulti((Object[]) null)  \u003d 1 ObjectUtils.hashCodeMulti(a)                \u003d 31 + a.hashCode() ObjectUtils.hashCodeMulti(a,b)              \u003d (31 + a.hashCode()) * 31 + b.hashCode() ObjectUtils.hashCodeMulti(a,b,c)            \u003d ((31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode() \u003c/pre\u003e\n * @param objects  the objects to obtain the hash code of, may be {@code null}\n * @return the hash code of the objects, or zero if null\n * @since 3.0\n * @deprecated this method has been replaced by {@code java.util.Objects.hash(Object...)} in Java 7 and will beremoved in future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityHashCodeHex#804",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityHashCodeHex(java.lang.Object)",
    "snippet": "public static String identityHashCodeHex(final Object object) {\n        return Integer.toHexString(System.identityHashCode(object));\n    }",
    "begin_line": 804,
    "end_line": 806,
    "comment": "/** \n * Returns the hex hash code for the given object per  {@link System#identityHashCode(Object)}. \u003cp\u003e Short hand for  {@code Integer.toHexString(System.identityHashCode(object))}. \u003c/p\u003e\n * @param object object for which the hashCode is to be calculated\n * @return Hash code in hexadecimal format.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityToString#824",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.Appendable, java.lang.Object)",
    "snippet": "public static void identityToString(final Appendable appendable, final Object object) throws IOException {\n        Objects.requireNonNull(object, \"object\");\n        appendable.append(object.getClass().getName())\n              .append(AT_SIGN)\n              .append(identityHashCodeHex(object));\n    }",
    "begin_line": 824,
    "end_line": 829,
    "comment": "/** \n * Appends the toString that would be produced by  {@link Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. \u003cpre\u003e ObjectUtils.identityToString(appendable, \"\")            \u003d appendable.append(\"java.lang.String@1e23\") ObjectUtils.identityToString(appendable, Boolean.TRUE)  \u003d appendable.append(\"java.lang.Boolean@7fa\") ObjectUtils.identityToString(appendable, Boolean.TRUE)  \u003d appendable.append(\"java.lang.Boolean@7fa\") \u003c/pre\u003e\n * @param appendable  the appendable to append to\n * @param object  the object to create a toString for\n * @throws IOException if an I/O error occurs.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityToString#847",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.Object)",
    "snippet": "public static String identityToString(final Object object) {\n        if (object \u003d\u003d null) {\n            return null;\n        }\n        final String name \u003d object.getClass().getName();\n        final String hexString \u003d identityHashCodeHex(object);\n        final StringBuilder builder \u003d new StringBuilder(name.length() + 1 + hexString.length());\n        // @formatter:off\n        builder.append(name)\n              .append(AT_SIGN)\n              .append(hexString);\n        // @formatter:on\n        return builder.toString();\n    }",
    "begin_line": 847,
    "end_line": 860,
    "comment": "/** \n * Gets the toString that would be produced by  {@link Object}if a class did not override toString itself.  {@code null}will return  {@code null}. \u003cpre\u003e ObjectUtils.identityToString(null)         \u003d null ObjectUtils.identityToString(\"\")           \u003d \"java.lang.String@1e23\" ObjectUtils.identityToString(Boolean.TRUE) \u003d \"java.lang.Boolean@7fa\" \u003c/pre\u003e\n * @param object  the object to create a toString for, may be{@code null}\n * @return the default toString text, or {@code null} if{@code null} passed in\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityToString#880",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(org.apache.commons.lang3.text.StrBuilder, java.lang.Object)",
    "snippet": "@Deprecated\n    public static void identityToString(final StrBuilder builder, final Object object) {\n        Objects.requireNonNull(object, \"object\");\n        final String name \u003d object.getClass().getName();\n        final String hexString \u003d identityHashCodeHex(object);\n        builder.ensureCapacity(builder.length() +  name.length() + 1 + hexString.length());\n        builder.append(name)\n              .append(AT_SIGN)\n              .append(hexString);\n    }",
    "begin_line": 880,
    "end_line": 888,
    "comment": "/** \n * Appends the toString that would be produced by  {@link Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. \u003cpre\u003e ObjectUtils.identityToString(builder, \"\")            \u003d builder.append(\"java.lang.String@1e23\") ObjectUtils.identityToString(builder, Boolean.TRUE)  \u003d builder.append(\"java.lang.Boolean@7fa\") ObjectUtils.identityToString(builder, Boolean.TRUE)  \u003d builder.append(\"java.lang.Boolean@7fa\") \u003c/pre\u003e\n * @param builder  the builder to append to\n * @param object  the object to create a toString for\n * @since 3.2\n * @deprecated as of 3.6, because StrBuilder was moved to commons-text,use one of the other  {@code identityToString} methods instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityToString#905",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuffer, java.lang.Object)",
    "snippet": "public static void identityToString(final StringBuffer buffer, final Object object) {\n        Objects.requireNonNull(object, \"object\");\n        final String name \u003d object.getClass().getName();\n        final String hexString \u003d identityHashCodeHex(object);\n        buffer.ensureCapacity(buffer.length() + name.length() + 1 + hexString.length());\n        buffer.append(name)\n              .append(AT_SIGN)\n              .append(hexString);\n    }",
    "begin_line": 905,
    "end_line": 913,
    "comment": "/** \n * Appends the toString that would be produced by  {@link Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. \u003cpre\u003e ObjectUtils.identityToString(buf, \"\")            \u003d buf.append(\"java.lang.String@1e23\") ObjectUtils.identityToString(buf, Boolean.TRUE)  \u003d buf.append(\"java.lang.Boolean@7fa\") ObjectUtils.identityToString(buf, Boolean.TRUE)  \u003d buf.append(\"java.lang.Boolean@7fa\") \u003c/pre\u003e\n * @param buffer  the buffer to append to\n * @param object  the object to create a toString for\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.identityToString#930",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuilder, java.lang.Object)",
    "snippet": "public static void identityToString(final StringBuilder builder, final Object object) {\n        Objects.requireNonNull(object, \"object\");\n        final String name \u003d object.getClass().getName();\n        final String hexString \u003d identityHashCodeHex(object);\n        builder.ensureCapacity(builder.length() +  name.length() + 1 + hexString.length());\n        builder.append(name)\n              .append(AT_SIGN)\n              .append(hexString);\n    }",
    "begin_line": 930,
    "end_line": 938,
    "comment": "/** \n * Appends the toString that would be produced by  {@link Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. \u003cpre\u003e ObjectUtils.identityToString(builder, \"\")            \u003d builder.append(\"java.lang.String@1e23\") ObjectUtils.identityToString(builder, Boolean.TRUE)  \u003d builder.append(\"java.lang.Boolean@7fa\") ObjectUtils.identityToString(builder, Boolean.TRUE)  \u003d builder.append(\"java.lang.Boolean@7fa\") \u003c/pre\u003e\n * @param builder  the builder to append to\n * @param object  the object to create a toString for\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.isArray#981",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.isArray(java.lang.Object)",
    "snippet": "public static boolean isArray(final Object object) {\n        return object !\u003d null \u0026\u0026 object.getClass().isArray();\n    }",
    "begin_line": 981,
    "end_line": 983,
    "comment": "/** \n * Checks, whether the given object is an Object array or a primitive array in a null-safe manner. \u003cp\u003e A  {@code null} {@code object} Object will return {@code false}. \u003c/p\u003e \u003cpre\u003e ObjectUtils.isArray(null)             \u003d false ObjectUtils.isArray(\"\")               \u003d false ObjectUtils.isArray(\"ab\")             \u003d false ObjectUtils.isArray(new int[]{})      \u003d true ObjectUtils.isArray(new int[]{1,2,3}) \u003d true ObjectUtils.isArray(1234)             \u003d false \u003c/pre\u003e\n * @param object the object to check, may be {@code null}\n * @return {@code true} if the object is an {@code array},  {@code false} otherwise\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.isEmpty#1014",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.isEmpty(java.lang.Object)",
    "snippet": "public static boolean isEmpty(final Object object) {\n        if (object \u003d\u003d null) {\n            return true;\n        }\n        if (object instanceof CharSequence) {\n            return ((CharSequence) object).length() \u003d\u003d 0;\n        }\n        if (isArray(object)) {\n            return Array.getLength(object) \u003d\u003d 0;\n        }\n        if (object instanceof Collection\u003c?\u003e) {\n            return ((Collection\u003c?\u003e) object).isEmpty();\n        }\n        if (object instanceof Map\u003c?, ?\u003e) {\n            return ((Map\u003c?, ?\u003e) object).isEmpty();\n        }\n        if (object instanceof Optional\u003c?\u003e) {\n            // TODO Java 11 Use Optional#isEmpty()\n            return !((Optional\u003c?\u003e) object).isPresent();\n        }\n        return false;\n    }",
    "begin_line": 1014,
    "end_line": 1035,
    "comment": "/** \n * Checks if an Object is empty or null. The following types are supported: \u003cul\u003e \u003cli\u003e {@link CharSequence}: Considered empty if its length is zero.\u003c/li\u003e \u003cli\u003e {@link Array}: Considered empty if its length is zero.\u003c/li\u003e \u003cli\u003e {@link Collection}: Considered empty if it has zero elements.\u003c/li\u003e \u003cli\u003e {@link Map}: Considered empty if it has zero key-value mappings.\u003c/li\u003e \u003cli\u003e {@link Optional}: Considered empty if  {@link Optional#isPresent} returns false, regardless of the \"emptiness\" of the contents.\u003c/li\u003e\u003c/ul\u003e \u003cpre\u003e ObjectUtils.isEmpty(null)             \u003d true ObjectUtils.isEmpty(\"\")               \u003d true ObjectUtils.isEmpty(\"ab\")             \u003d false ObjectUtils.isEmpty(new int[]{})      \u003d true ObjectUtils.isEmpty(new int[]{1,2,3}) \u003d false ObjectUtils.isEmpty(1234)             \u003d false ObjectUtils.isEmpty(1234)             \u003d false ObjectUtils.isEmpty(Optional.of(\"\"))  \u003d false ObjectUtils.isEmpty(Optional.empty()) \u003d true \u003c/pre\u003e\n * @param object  the {@link Object} to test, may be {@code null}\n * @return {@code true} if the object has a supported type and is empty or null,{@code false} otherwise\n * @since 3.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.isNotEmpty#1065",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.isNotEmpty(java.lang.Object)",
    "snippet": "public static boolean isNotEmpty(final Object object) {\n        return !isEmpty(object);\n    }",
    "begin_line": 1065,
    "end_line": 1067,
    "comment": "/** \n * Checks if an Object is not empty and not null. The following types are supported: \u003cul\u003e \u003cli\u003e {@link CharSequence}: Considered empty if its length is zero.\u003c/li\u003e \u003cli\u003e {@link Array}: Considered empty if its length is zero.\u003c/li\u003e \u003cli\u003e {@link Collection}: Considered empty if it has zero elements.\u003c/li\u003e \u003cli\u003e {@link Map}: Considered empty if it has zero key-value mappings.\u003c/li\u003e \u003cli\u003e {@link Optional}: Considered empty if  {@link Optional#isPresent} returns false, regardless of the \"emptiness\" of the contents.\u003c/li\u003e\u003c/ul\u003e \u003cpre\u003e ObjectUtils.isNotEmpty(null)             \u003d false ObjectUtils.isNotEmpty(\"\")               \u003d false ObjectUtils.isNotEmpty(\"ab\")             \u003d true ObjectUtils.isNotEmpty(new int[]{})      \u003d false ObjectUtils.isNotEmpty(new int[]{1,2,3}) \u003d true ObjectUtils.isNotEmpty(1234)             \u003d true ObjectUtils.isNotEmpty(Optional.of(\"\"))  \u003d true ObjectUtils.isNotEmpty(Optional.empty()) \u003d false \u003c/pre\u003e\n * @param object  the {@link Object} to test, may be {@code null}\n * @return {@code true} if the object has an unsupported type or is not emptyand not null,  {@code false} otherwise\n * @since 3.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.max#1084",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.max(T)",
    "snippet": "@SafeVarargs\n    public static \u003cT extends Comparable\u003c? super T\u003e\u003e T max(final T... values) {\n        T result \u003d null;\n        if (values !\u003d null) {\n            for (final T value : values) {\n                if (compare(value, result, false) \u003e 0) {\n                    result \u003d value;\n                }\n            }\n        }\n        return result;\n    }",
    "begin_line": 1084,
    "end_line": 1094,
    "comment": "/** \n * Null safe comparison of Comparables. \u003cp\u003eTODO Move to ComparableUtils.\u003c/p\u003e\n * @param \u003c T \u003e type of the values processed by this method\n * @param values the set of comparable values, may be null\n * @return \u003cul\u003e \u003cli\u003eIf any objects are non-null and unequal, the greater object. \u003cli\u003eIf all objects are non-null and equal, the first. \u003cli\u003eIf any of the comparables are null, the greater of the non-null objects. \u003cli\u003eIf all the comparables are null, null is returned. \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.median#1108",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.median(java.util.Comparator\u003cT\u003e, T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T median(final Comparator\u003cT\u003e comparator, final T... items) {\n        Validate.notEmpty(items, \"null/empty items\");\n        Validate.noNullElements(items);\n        Objects.requireNonNull(comparator, \"comparator\");\n        final TreeSet\u003cT\u003e treeSet \u003d new TreeSet\u003c\u003e(comparator);\n        Collections.addAll(treeSet, items);\n        @SuppressWarnings(\"unchecked\") //we know all items added were T instances\n        final T result \u003d (T) treeSet.toArray()[(treeSet.size() - 1) / 2];\n        return result;\n    }",
    "begin_line": 1108,
    "end_line": 1117,
    "comment": "/** \n * Find the \"best guess\" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.\n * @param \u003c T \u003e type of values processed by this method\n * @param comparator to use for comparisons\n * @param items to compare\n * @return T at middle position\n * @throws NullPointerException if items or comparator is {@code null}\n * @throws IllegalArgumentException if items is empty or contains {@code null} values\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.median#1130",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.median(T)",
    "snippet": "@SafeVarargs\n    public static \u003cT extends Comparable\u003c? super T\u003e\u003e T median(final T... items) {\n        Validate.notEmpty(items);\n        Validate.noNullElements(items);\n        final TreeSet\u003cT\u003e sort \u003d new TreeSet\u003c\u003e();\n        Collections.addAll(sort, items);\n        @SuppressWarnings(\"unchecked\") //we know all items added were T instances\n        final T result \u003d (T) sort.toArray()[(sort.size() - 1) / 2];\n        return result;\n    }",
    "begin_line": 1130,
    "end_line": 1138,
    "comment": "/** \n * Find the \"best guess\" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.\n * @param \u003c T \u003e type of values processed by this method\n * @param items to compare\n * @return T at middle position\n * @throws NullPointerException if items is {@code null}\n * @throws IllegalArgumentException if items is empty or contains {@code null} values\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.min#1155",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.min(T)",
    "snippet": "@SafeVarargs\n    public static \u003cT extends Comparable\u003c? super T\u003e\u003e T min(final T... values) {\n        T result \u003d null;\n        if (values !\u003d null) {\n            for (final T value : values) {\n                if (compare(value, result, true) \u003c 0) {\n                    result \u003d value;\n                }\n            }\n        }\n        return result;\n    }",
    "begin_line": 1155,
    "end_line": 1165,
    "comment": "/** \n * Null safe comparison of Comparables. \u003cp\u003eTODO Move to ComparableUtils.\u003c/p\u003e\n * @param \u003c T \u003e type of the values processed by this method\n * @param values the set of comparable values, may be null\n * @return \u003cul\u003e \u003cli\u003eIf any objects are non-null and unequal, the lesser object. \u003cli\u003eIf all objects are non-null and equal, the first. \u003cli\u003eIf any of the comparables are null, the lesser of the non-null objects. \u003cli\u003eIf all the comparables are null, null is returned. \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.mode#1177",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.mode(T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T mode(final T... items) {\n        if (ArrayUtils.isNotEmpty(items)) {\n            final HashMap\u003cT, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(items.length);\n            for (final T t : items) {\n                final MutableInt count \u003d occurrences.get(t);\n                if (count \u003d\u003d null) {\n                    occurrences.put(t, new MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            T result \u003d null;\n            int max \u003d 0;\n            for (final Map.Entry\u003cT, MutableInt\u003e e : occurrences.entrySet()) {\n                final int cmp \u003d e.getValue().intValue();\n                if (cmp \u003d\u003d max) {\n                    result \u003d null;\n                } else if (cmp \u003e max) {\n                    max \u003d cmp;\n                    result \u003d e.getKey();\n                }\n            }\n            return result;\n        }\n        return null;\n    }",
    "begin_line": 1177,
    "end_line": 1202,
    "comment": "/** \n * Find the most frequently occurring item.\n * @param \u003c T \u003e type of values processed by this method\n * @param items to check\n * @return most populous T, {@code null} if non-unique or no items supplied\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.notEqual#1223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.notEqual(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean notEqual(final Object object1, final Object object2) {\n        return !Objects.equals(object1, object2);\n    }",
    "begin_line": 1223,
    "end_line": 1225,
    "comment": "/** \n * Compares two objects for inequality, where either one or both objects may be  {@code null}. \u003cpre\u003e ObjectUtils.notEqual(null, null)                  \u003d false ObjectUtils.notEqual(null, \"\")                    \u003d true ObjectUtils.notEqual(\"\", null)                    \u003d true ObjectUtils.notEqual(\"\", \"\")                      \u003d false ObjectUtils.notEqual(Boolean.TRUE, null)          \u003d true ObjectUtils.notEqual(Boolean.TRUE, \"true\")        \u003d true ObjectUtils.notEqual(Boolean.TRUE, Boolean.TRUE)  \u003d false ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) \u003d true \u003c/pre\u003e\n * @param object1  the first object, may be {@code null}\n * @param object2  the second object, may be {@code null}\n * @return {@code false} if the values of both objects are the same\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.requireNonEmpty#1249",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.requireNonEmpty(T)",
    "snippet": "public static \u003cT\u003e T requireNonEmpty(final T obj) {\n        return requireNonEmpty(obj, \"object\");\n    }",
    "begin_line": 1249,
    "end_line": 1251,
    "comment": "/** \n * Checks that the specified object reference is not  {@code null} or empty per {@link #isEmpty(Object)}. Use this method for validation, for example: \u003cblockquote\u003e \u003cpre\u003e public Foo(Bar bar) { this.bar \u003d Objects.requireNonEmpty(bar); } \u003c/pre\u003e \u003c/blockquote\u003e\n * @param \u003c T \u003e the type of the reference.\n * @param obj the object reference to check for nullity.\n * @return {@code obj} if not {@code null}.\n * @throws NullPointerException     if {@code obj} is {@code null}.\n * @throws IllegalArgumentException if {@code obj} is empty per {@link #isEmpty(Object)}.\n * @see #isEmpty(Object)\n * @since 3.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.requireNonEmpty#1276",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.requireNonEmpty(T, java.lang.String)",
    "snippet": "public static \u003cT\u003e T requireNonEmpty(final T obj, final String message) {\n        // check for null first to give the most precise exception.\n        Objects.requireNonNull(obj, message);\n        if (isEmpty(obj)) {\n            throw new IllegalArgumentException(message);\n        }\n        return obj;\n    }",
    "begin_line": 1276,
    "end_line": 1283,
    "comment": "/** \n * Checks that the specified object reference is not  {@code null} or empty per {@link #isEmpty(Object)}. Use this method for validation, for example: \u003cblockquote\u003e \u003cpre\u003e public Foo(Bar bar) { this.bar \u003d Objects.requireNonEmpty(bar, \"bar\"); } \u003c/pre\u003e \u003c/blockquote\u003e\n * @param \u003c T \u003e the type of the reference.\n * @param obj the object reference to check for nullity.\n * @param message the exception message.\n * @return {@code obj} if not {@code null}.\n * @throws NullPointerException     if {@code obj} is {@code null}.\n * @throws IllegalArgumentException if {@code obj} is empty per {@link #isEmpty(Object)}.\n * @see #isEmpty(Object)\n * @since 3.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.toString#1306",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object)",
    "snippet": "@Deprecated\n    public static String toString(final Object obj) {\n        return obj \u003d\u003d null ? StringUtils.EMPTY : obj.toString();\n    }",
    "begin_line": 1306,
    "end_line": 1308,
    "comment": "/** \n * Gets the  {@code toString} of an {@link Object} returningan empty string (\"\") if  {@code null} input.\u003cpre\u003e ObjectUtils.toString(null)         \u003d \"\" ObjectUtils.toString(\"\")           \u003d \"\" ObjectUtils.toString(\"bat\")        \u003d \"bat\" ObjectUtils.toString(Boolean.TRUE) \u003d \"true\" \u003c/pre\u003e\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to {@code toString}, may be null\n * @return the passed in Object\u0027s toString, or {@code \"\"} if {@code null} input\n * @since 2.0\n * @deprecated this method has been replaced by {@code java.util.Objects.toString(Object)} in Java 7 and will beremoved in future releases. Note however that said method will return \"null\" for null references, while this method returns an empty String. To preserve behavior use  {@code java.util.Objects.toString(myObject, \"\")}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.toString#1332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object, java.lang.String)",
    "snippet": "@Deprecated\n    public static String toString(final Object obj, final String nullStr) {\n        return obj \u003d\u003d null ? nullStr : obj.toString();\n    }",
    "begin_line": 1332,
    "end_line": 1334,
    "comment": "/** \n * Gets the  {@code toString} of an {@link Object} returninga specified text if  {@code null} input.\u003cpre\u003e ObjectUtils.toString(null, null)           \u003d null ObjectUtils.toString(null, \"null\")         \u003d \"null\" ObjectUtils.toString(\"\", \"null\")           \u003d \"\" ObjectUtils.toString(\"bat\", \"null\")        \u003d \"bat\" ObjectUtils.toString(Boolean.TRUE, \"null\") \u003d \"true\" \u003c/pre\u003e\n * @see StringUtils#defaultString(String,String)\n * @see String#valueOf(Object)\n * @param obj  the Object to {@code toString}, may be null\n * @param nullStr  the String to return if {@code null} input, may be null\n * @return the passed in Object\u0027s toString, or {@code nullStr} if {@code null} input\n * @since 2.0\n * @deprecated this method has been replaced by {@code java.util.Objects.toString(Object, String)} in Java 7 andwill be removed in future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.toString#1356",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object, java.util.function.Supplier\u003cjava.lang.String\u003e)",
    "snippet": "public static String toString(final Object obj, final Supplier\u003cString\u003e supplier) {\n        return obj \u003d\u003d null ? Suppliers.get(supplier) : obj.toString();\n    }",
    "begin_line": 1356,
    "end_line": 1358,
    "comment": "/** \n * Gets the  {@code toString} of an {@link Object} returninga specified text if  {@code null} input.\u003cpre\u003e ObjectUtils.toString(obj, () -\u0026gt; expensive()) \u003c/pre\u003e \u003cpre\u003e ObjectUtils.toString(null, () -\u0026gt; expensive())         \u003d result of expensive() ObjectUtils.toString(null, () -\u0026gt; expensive())         \u003d result of expensive() ObjectUtils.toString(\"\", () -\u0026gt; expensive())           \u003d \"\" ObjectUtils.toString(\"bat\", () -\u0026gt; expensive())        \u003d \"bat\" ObjectUtils.toString(Boolean.TRUE, () -\u0026gt; expensive()) \u003d \"true\" \u003c/pre\u003e\n * @param obj  the Object to {@code toString}, may be null\n * @param supplier  the Supplier of String used on {@code null} input, may be null\n * @return the passed in Object\u0027s toString, or {@code nullStr} if {@code null} input\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.wait#1373",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.wait(java.lang.Object, java.time.Duration)",
    "snippet": "public static void wait(final Object obj, final Duration duration) throws InterruptedException {\n        DurationUtils.accept(obj::wait, DurationUtils.zeroIfNull(duration));\n    }",
    "begin_line": 1373,
    "end_line": 1375,
    "comment": "/** \n * Calls  {@link Object#wait(long,int)} for the given Duration.\n * @param obj The receiver of the wait call.\n * @param duration How long to wait.\n * @throws IllegalArgumentException if the timeout duration is negative.\n * @throws IllegalMonitorStateException if the current thread is not the owner of the {@code obj}\u0027s monitor.\n * @throws InterruptedException if any thread interrupted the current thread before or while the current thread waswaiting for a notification. The \u003cem\u003einterrupted status\u003c/em\u003e of the current thread is cleared when this exception is thrown.\n * @see Object#wait(long,int)\n * @since 3.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Null.ObjectUtils#1385",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ObjectUtils.java",
    "class_name": "org.apache.commons.lang3.ObjectUtils",
    "signature": "org.apache.commons.lang3.ObjectUtils.ObjectUtils()",
    "snippet": "public ObjectUtils() {\n    }",
    "begin_line": 1385,
    "end_line": 1386,
    "comment": "/** \n * {@link ObjectUtils} instances should NOT be constructed instandard programming. Instead, the static methods on the class should be used, such as  {@code ObjectUtils.defaultIfNull(\"a\",\"b\");}. \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getRegistry#186",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getRegistry()",
    "snippet": "public static Map\u003cObject, Object\u003e getRegistry() {\n        return REGISTRY.get();\n    }",
    "begin_line": 186,
    "end_line": 188,
    "comment": "/** \n * Returns the registry of objects being traversed by the  {@code reflectionToString}methods in the current thread.\n * @return Set the registry of objects being traversed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isRegistered#199",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isRegistered(java.lang.Object)",
    "snippet": "static boolean isRegistered(final Object value) {\n        final Map\u003cObject, Object\u003e m \u003d getRegistry();\n        return m !\u003d null \u0026\u0026 m.containsKey(value);\n    }",
    "begin_line": 199,
    "end_line": 202,
    "comment": "/** \n * Returns  {@code true} if the registry contains the given object.Used by the reflection methods to avoid infinite loops.\n * @param value The object to lookup in the registry.\n * @return boolean {@code true} if the registry contains the givenobject.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.register#211",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.register(java.lang.Object)",
    "snippet": "static void register(final Object value) {\n        if (value !\u003d null) {\n            final Map\u003cObject, Object\u003e m \u003d getRegistry();\n            if (m \u003d\u003d null) {\n                REGISTRY.set(new WeakHashMap\u003c\u003e());\n            }\n            getRegistry().put(value, null);\n        }\n    }",
    "begin_line": 211,
    "end_line": 219,
    "comment": "/** \n * Registers the given object. Used by the reflection methods to avoid infinite loops.\n * @param value The object to register.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.unregister#231",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.unregister(java.lang.Object)",
    "snippet": "static void unregister(final Object value) {\n        if (value !\u003d null) {\n            final Map\u003cObject, Object\u003e m \u003d getRegistry();\n            if (m !\u003d null) {\n                m.remove(value);\n                if (m.isEmpty()) {\n                    REGISTRY.remove();\n                }\n            }\n        }\n    }",
    "begin_line": 231,
    "end_line": 241,
    "comment": "/** \n * Unregisters the given object. \u003cp\u003e Used by the reflection methods to avoid infinite loops. \u003c/p\u003e\n * @param value The object to unregister.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.ToStringStyle#347",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.ToStringStyle()",
    "snippet": "protected ToStringStyle() {\n    }",
    "begin_line": 347,
    "end_line": 348,
    "comment": "/** \n * Constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSuper#360",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSuper(java.lang.StringBuffer, java.lang.String)",
    "snippet": "public void appendSuper(final StringBuffer buffer, final String superToString) {\n        appendToString(buffer, superToString);\n    }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Appends to the  {@code toString} the superclass toString.\u003cp\u003eNOTE: It assumes that the toString has been created from the same ToStringStyle.\u003c/p\u003e \u003cp\u003eA  {@code null} {@code superToString} is ignored.\u003c/p\u003e\n * @param buffer  the {@link StringBuffer} to populate\n * @param superToString  the {@code super.toString()}\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendToString#374",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendToString(java.lang.StringBuffer, java.lang.String)",
    "snippet": "public void appendToString(final StringBuffer buffer, final String toString) {\n        if (toString !\u003d null) {\n            final int pos1 \u003d toString.indexOf(contentStart) + contentStart.length();\n            final int pos2 \u003d toString.lastIndexOf(contentEnd);\n            if (pos1 !\u003d pos2 \u0026\u0026 pos1 \u003e\u003d 0 \u0026\u0026 pos2 \u003e\u003d 0) {\n                if (fieldSeparatorAtStart) {\n                    removeLastFieldSeparator(buffer);\n                }\n                buffer.append(toString, pos1, pos2);\n                appendFieldSeparator(buffer);\n            }\n        }\n    }",
    "begin_line": 374,
    "end_line": 386,
    "comment": "/** \n * Appends to the  {@code toString} another toString.\u003cp\u003eNOTE: It assumes that the toString has been created from the same ToStringStyle.\u003c/p\u003e \u003cp\u003eA  {@code null} {@code toString} is ignored.\u003c/p\u003e\n * @param buffer  the {@link StringBuffer} to populate\n * @param toString  the additional {@code toString}\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendStart#394",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendStart(java.lang.StringBuffer, java.lang.Object)",
    "snippet": "public void appendStart(final StringBuffer buffer, final Object object) {\n        if (object !\u003d null) {\n            appendClassName(buffer, object);\n            appendIdentityHashCode(buffer, object);\n            appendContentStart(buffer);\n            if (fieldSeparatorAtStart) {\n                appendFieldSeparator(buffer);\n            }\n        }\n    }",
    "begin_line": 394,
    "end_line": 403,
    "comment": "/** \n * Appends to the  {@code toString} the start of data indicator.\n * @param buffer  the {@link StringBuffer} to populate\n * @param object  the {@link Object} to build a {@code toString} for\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendEnd#412",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendEnd(java.lang.StringBuffer, java.lang.Object)",
    "snippet": "public void appendEnd(final StringBuffer buffer, final Object object) {\n        if (!this.fieldSeparatorAtEnd) {\n            removeLastFieldSeparator(buffer);\n        }\n        appendContentEnd(buffer);\n        unregister(object);\n    }",
    "begin_line": 412,
    "end_line": 418,
    "comment": "/** \n * Appends to the  {@code toString} the end of data indicator.\n * @param buffer  the {@link StringBuffer} to populate\n * @param object  the {@link Object} to build a{@code toString} for.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.removeLastFieldSeparator#426",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.removeLastFieldSeparator(java.lang.StringBuffer)",
    "snippet": "protected void removeLastFieldSeparator(final StringBuffer buffer) {\n        if (StringUtils.endsWith(buffer, fieldSeparator)) {\n            buffer.setLength(buffer.length() - fieldSeparator.length());\n        }\n    }",
    "begin_line": 426,
    "end_line": 430,
    "comment": "/** \n * Remove the last field separator from the buffer.\n * @param buffer  the {@link StringBuffer} to populate\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#443",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final Object value, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (value \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else {\n            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 443,
    "end_line": 454,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}value, printing the full  {@code toString} of the{@link Object} passed in.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendInternal#475",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendInternal(java.lang.StringBuffer, java.lang.String, java.lang.Object, boolean)",
    "snippet": "protected void appendInternal(final StringBuffer buffer, final String fieldName, final Object value, final boolean detail) {\n        if (isRegistered(value)\n            \u0026\u0026 !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n           appendCyclicObject(buffer, fieldName, value);\n           return;\n        }\n\n        register(value);\n\n        try {\n            if (value instanceof Collection\u003c?\u003e) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Collection\u003c?\u003e) value);\n                } else {\n                    appendSummarySize(buffer, fieldName, ((Collection\u003c?\u003e) value).size());\n                }\n\n            } else if (value instanceof Map\u003c?, ?\u003e) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Map\u003c?, ?\u003e) value);\n                } else {\n                    appendSummarySize(buffer, fieldName, ((Map\u003c?, ?\u003e) value).size());\n                }\n\n            } else if (value instanceof long[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (long[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (long[]) value);\n                }\n\n            } else if (value instanceof int[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (int[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (int[]) value);\n                }\n\n            } else if (value instanceof short[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (short[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (short[]) value);\n                }\n\n            } else if (value instanceof byte[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (byte[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (byte[]) value);\n                }\n\n            } else if (value instanceof char[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (char[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (char[]) value);\n                }\n\n            } else if (value instanceof double[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (double[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (double[]) value);\n                }\n\n            } else if (value instanceof float[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (float[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (float[]) value);\n                }\n\n            } else if (value instanceof boolean[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (boolean[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (boolean[]) value);\n                }\n\n            } else if (ObjectUtils.isArray(value)) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Object[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (Object[]) value);\n                }\n\n            } else if (detail) {\n                appendDetail(buffer, fieldName, value);\n            } else {\n                appendSummary(buffer, fieldName, value);\n            }\n        } finally {\n            unregister(value);\n        }\n    }",
    "begin_line": 475,
    "end_line": 570,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}, correctly interpreting its type. \u003cp\u003eThis method performs the main lookup by Class type to correctly route arrays,  {@link Collection}s,  {@link Map}s and {@link Objects} to the appropriate method.\u003c/p\u003e\u003cp\u003eEither detail or summary views can be specified.\u003c/p\u003e \u003cp\u003eIf a cycle is detected, an object will be appended with the {@code Object.toString()} format.\u003c/p\u003e\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}, not  {@code null}\n * @param detail  output detail or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendCyclicObject#584",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendCyclicObject(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
    "snippet": "protected void appendCyclicObject(final StringBuffer buffer, final String fieldName, final Object value) {\n       ObjectUtils.identityToString(buffer, value);\n    }",
    "begin_line": 584,
    "end_line": 586,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}value that has been detected to participate in a cycle. This implementation will print the standard string value of the value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}, not  {@code null}\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#597",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {\n        buffer.append(value);\n    }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}value, printing the full detail of the  {@link Object}.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Collection\u003c?\u003e)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection\u003c?\u003e coll) {\n        buffer.append(coll);\n    }",
    "begin_line": 609,
    "end_line": 611,
    "comment": "/** \n * Appends to the  {@code toString} a {@link Collection}.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param coll  the {@link Collection} to add to the{@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#621",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Map\u003c?,?\u003e)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final Map\u003c?, ?\u003e map) {\n        buffer.append(map);\n    }",
    "begin_line": 621,
    "end_line": 623,
    "comment": "/** \n * Appends to the  {@code toString} a {@link Map}.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param map  the {@link Map} to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#634",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final Object value) {\n        buffer.append(summaryObjectStartText);\n        buffer.append(getShortClassName(value.getClass()));\n        buffer.append(summaryObjectEndText);\n    }",
    "begin_line": 634,
    "end_line": 638,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}value, printing a summary of the  {@link Object}.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#648",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final long value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 648,
    "end_line": 652,
    "comment": "/** \n * \u003cp\u003eAppends to the  {@code toString} a {@code long}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#662",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final long value) {\n        buffer.append(value);\n    }",
    "begin_line": 662,
    "end_line": 664,
    "comment": "/** \n * Appends to the  {@code toString} a {@code long}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#674",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final int value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 674,
    "end_line": 678,
    "comment": "/** \n * Appends to the  {@code toString} an {@code int}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#688",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final int value) {\n        buffer.append(value);\n    }",
    "begin_line": 688,
    "end_line": 690,
    "comment": "/** \n * Appends to the  {@code toString} an {@code int}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#700",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final short value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 700,
    "end_line": 704,
    "comment": "/** \n * Appends to the  {@code toString} a {@code short}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#714",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final short value) {\n        buffer.append(value);\n    }",
    "begin_line": 714,
    "end_line": 716,
    "comment": "/** \n * Appends to the  {@code toString} a {@code short}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#726",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final byte value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 726,
    "end_line": 730,
    "comment": "/** \n * Appends to the  {@code toString} a {@code byte}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#740",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final byte value) {\n        buffer.append(value);\n    }",
    "begin_line": 740,
    "end_line": 742,
    "comment": "/** \n * Appends to the  {@code toString} a {@code byte}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#752",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final char value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 752,
    "end_line": 756,
    "comment": "/** \n * Appends to the  {@code toString} a {@code char}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#766",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final char value) {\n        buffer.append(value);\n    }",
    "begin_line": 766,
    "end_line": 768,
    "comment": "/** \n * Appends to the  {@code toString} a {@code char}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#778",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final double value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 778,
    "end_line": 782,
    "comment": "/** \n * Appends to the  {@code toString} a {@code double}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#792",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final double value) {\n        buffer.append(value);\n    }",
    "begin_line": 792,
    "end_line": 794,
    "comment": "/** \n * Appends to the  {@code toString} a {@code double}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#804",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final float value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 804,
    "end_line": 808,
    "comment": "/** \n * Appends to the  {@code toString} a {@code float}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#818",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final float value) {\n        buffer.append(value);\n    }",
    "begin_line": 818,
    "end_line": 820,
    "comment": "/** \n * Appends to the  {@code toString} a {@code float}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#830",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final boolean value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 830,
    "end_line": 834,
    "comment": "/** \n * Appends to the  {@code toString} a {@code boolean}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#844",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean value) {\n        buffer.append(value);\n    }",
    "begin_line": 844,
    "end_line": 846,
    "comment": "/** \n * Appends to the  {@code toString} a {@code boolean}value.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param value  the value to add to the {@code toString}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#858",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final Object[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 858,
    "end_line": 872,
    "comment": "/** \n * Appends to the  {@code toString} an {@link Object}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the toString\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#883",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            appendDetail(buffer, fieldName, i, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 883,
    "end_line": 889,
    "comment": "/** \n * Appends to the  {@code toString} the detail of an{@link Object} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#901",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int, java.lang.Object)",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final int i, final Object item) {\n        if (i \u003e 0) {\n            buffer.append(arraySeparator);\n        }\n        if (item \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n        } else {\n            appendInternal(buffer, fieldName, item, arrayContentDetail);\n        }\n    }",
    "begin_line": 901,
    "end_line": 910,
    "comment": "/** \n * Appends to the  {@code toString} the detail of an{@link Object} array item.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param i the array item index to add\n * @param item the array item to add\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.reflectionAppendArrayDetail#921",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.reflectionAppendArrayDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
    "snippet": "protected void reflectionAppendArrayDetail(final StringBuffer buffer, final String fieldName, final Object array) {\n        buffer.append(arrayStart);\n        final int length \u003d Array.getLength(array);\n        for (int i \u003d 0; i \u003c length; i++) {\n            appendDetail(buffer, fieldName, i, Array.get(array, i));\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 921,
    "end_line": 928,
    "comment": "/** \n * Appends to the  {@code toString} the detail of an array type.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#939",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final Object[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 939,
    "end_line": 941,
    "comment": "/** \n * Appends to the  {@code toString} a summary of an{@link Object} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#953",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final long[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 953,
    "end_line": 967,
    "comment": "/** \n * Appends to the  {@code toString} a {@code long}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#978",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final long[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 978,
    "end_line": 987,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code long} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#998",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, long[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final long[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 998,
    "end_line": 1000,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code long} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1012",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final int[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1012,
    "end_line": 1026,
    "comment": "/** \n * Appends to the  {@code toString} an {@code int}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1037",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final int[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1037,
    "end_line": 1046,
    "comment": "/** \n * Appends to the  {@code toString} the detail of an{@code int} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1057",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, int[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final int[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1057,
    "end_line": 1059,
    "comment": "/** \n * Appends to the  {@code toString} a summary of an{@code int} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1071",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final short[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1071,
    "end_line": 1085,
    "comment": "/** \n * Appends to the  {@code toString} a {@code short}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1096",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final short[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1096,
    "end_line": 1105,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code short} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1116",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, short[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final short[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1116,
    "end_line": 1118,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code short} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1130",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final byte[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1130,
    "end_line": 1144,
    "comment": "/** \n * Appends to the  {@code toString} a {@code byte}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1155",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final byte[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1155,
    "end_line": 1164,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code byte} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1175",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, byte[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final byte[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1175,
    "end_line": 1177,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code byte} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1189",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final char[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1189,
    "end_line": 1203,
    "comment": "/** \n * Appends to the  {@code toString} a {@code char}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the {@code toString}\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1214",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final char[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1214,
    "end_line": 1223,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code char} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1234",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, char[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final char[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1234,
    "end_line": 1236,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code char} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final double[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1248,
    "end_line": 1262,
    "comment": "/** \n * Appends to the  {@code toString} a {@code double}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the toString\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1273",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final double[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1273,
    "end_line": 1282,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code double} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1293",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, double[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final double[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1293,
    "end_line": 1295,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code double} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1307",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final float[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1307,
    "end_line": 1321,
    "comment": "/** \n * Appends to the  {@code toString} a {@code float}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the toString\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final float[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1332,
    "end_line": 1341,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code float} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1352",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, float[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final float[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1352,
    "end_line": 1354,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code float} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.append#1366",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)",
    "snippet": "public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array \u003d\u003d null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
    "begin_line": 1366,
    "end_line": 1380,
    "comment": "/** \n * Appends to the  {@code toString} a {@code boolean}array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n * @param array  the array to add to the toString\n * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendDetail#1391",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean[])",
    "snippet": "protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array) {\n        buffer.append(arrayStart);\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            if (i \u003e 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
    "begin_line": 1391,
    "end_line": 1400,
    "comment": "/** \n * Appends to the  {@code toString} the detail of a{@code boolean} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummary#1411",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, boolean[])",
    "snippet": "protected void appendSummary(final StringBuffer buffer, final String fieldName, final boolean[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
    "begin_line": 1411,
    "end_line": 1413,
    "comment": "/** \n * Appends to the  {@code toString} a summary of a{@code boolean} array.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the {@code toString}, not  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendClassName#1421",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendClassName(java.lang.StringBuffer, java.lang.Object)",
    "snippet": "protected void appendClassName(final StringBuffer buffer, final Object object) {\n        if (useClassName \u0026\u0026 object !\u003d null) {\n            register(object);\n            if (useShortClassName) {\n                buffer.append(getShortClassName(object.getClass()));\n            } else {\n                buffer.append(object.getClass().getName());\n            }\n        }\n    }",
    "begin_line": 1421,
    "end_line": 1430,
    "comment": "/** \n * Appends to the  {@code toString} the class name.\n * @param buffer  the {@link StringBuffer} to populate\n * @param object  the {@link Object} whose name to output\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendIdentityHashCode#1438",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendIdentityHashCode(java.lang.StringBuffer, java.lang.Object)",
    "snippet": "protected void appendIdentityHashCode(final StringBuffer buffer, final Object object) {\n        if (this.isUseIdentityHashCode() \u0026\u0026 object !\u003d null) {\n            register(object);\n            buffer.append(\u0027@\u0027);\n            buffer.append(ObjectUtils.identityHashCodeHex(object));\n        }\n    }",
    "begin_line": 1438,
    "end_line": 1444,
    "comment": "/** \n * Appends the  {@link System#identityHashCode(java.lang.Object)}.\n * @param buffer  the {@link StringBuffer} to populate\n * @param object  the {@link Object} whose id to output\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendContentStart#1451",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendContentStart(java.lang.StringBuffer)",
    "snippet": "protected void appendContentStart(final StringBuffer buffer) {\n        buffer.append(contentStart);\n    }",
    "begin_line": 1451,
    "end_line": 1453,
    "comment": "/** \n * Appends to the  {@code toString} the content start.\n * @param buffer  the {@link StringBuffer} to populate\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendContentEnd#1460",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendContentEnd(java.lang.StringBuffer)",
    "snippet": "protected void appendContentEnd(final StringBuffer buffer) {\n        buffer.append(contentEnd);\n    }",
    "begin_line": 1460,
    "end_line": 1462,
    "comment": "/** \n * Appends to the  {@code toString} the content end.\n * @param buffer  the {@link StringBuffer} to populate\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendNullText#1472",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendNullText(java.lang.StringBuffer, java.lang.String)",
    "snippet": "protected void appendNullText(final StringBuffer buffer, final String fieldName) {\n        buffer.append(nullText);\n    }",
    "begin_line": 1472,
    "end_line": 1474,
    "comment": "/** \n * Appends to the  {@code toString} an indicator for {@code null}. \u003cp\u003eThe default indicator is  {@code \u0027\u0026lt;null\u0026gt;\u0027}.\u003c/p\u003e\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendFieldSeparator#1481",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldSeparator(java.lang.StringBuffer)",
    "snippet": "protected void appendFieldSeparator(final StringBuffer buffer) {\n        buffer.append(fieldSeparator);\n    }",
    "begin_line": 1481,
    "end_line": 1483,
    "comment": "/** \n * Appends to the  {@code toString} the field separator.\n * @param buffer  the {@link StringBuffer} to populate\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendFieldStart#1491",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)",
    "snippet": "protected void appendFieldStart(final StringBuffer buffer, final String fieldName) {\n        if (useFieldNames \u0026\u0026 fieldName !\u003d null) {\n            buffer.append(fieldName);\n            buffer.append(fieldNameValueSeparator);\n        }\n    }",
    "begin_line": 1491,
    "end_line": 1496,
    "comment": "/** \n * Appends to the  {@code toString} the field start.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendFieldEnd#1504",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldEnd(java.lang.StringBuffer, java.lang.String)",
    "snippet": "protected void appendFieldEnd(final StringBuffer buffer, final String fieldName) {\n        appendFieldSeparator(buffer);\n    }",
    "begin_line": 1504,
    "end_line": 1506,
    "comment": "/** \n * Appends to the  {@code toString} the field end.\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.appendSummarySize#1523",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendSummarySize(java.lang.StringBuffer, java.lang.String, int)",
    "snippet": "protected void appendSummarySize(final StringBuffer buffer, final String fieldName, final int size) {\n        buffer.append(sizeStartText);\n        buffer.append(size);\n        buffer.append(sizeEndText);\n    }",
    "begin_line": 1523,
    "end_line": 1527,
    "comment": "/** \n * Appends to the  {@code toString} a size summary.\u003cp\u003eThe size summary is used to summarize the contents of {@link Collection}s,  {@link Map}s and arrays.\u003c/p\u003e \u003cp\u003eThe output consists of a prefix, the passed in size and a suffix.\u003c/p\u003e \u003cp\u003eThe default format is  {@code \u0027\u0026lt;size\u003dn\u0026gt;\u0027}.\u003c/p\u003e\n * @param buffer  the {@link StringBuffer} to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param size  the size to append\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isFullDetail#1543",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isFullDetail(java.lang.Boolean)",
    "snippet": "protected boolean isFullDetail(final Boolean fullDetailRequest) {\n        if (fullDetailRequest \u003d\u003d null) {\n            return defaultFullDetail;\n        }\n        return fullDetailRequest.booleanValue();\n    }",
    "begin_line": 1543,
    "end_line": 1548,
    "comment": "/** \n * Is this field to be output in full detail. \u003cp\u003eThis method converts a detail request into a detail level. The calling code may request full detail ( {@code true}), but a subclass might ignore that and always return {@code false}. The calling code may pass in {@code null} indicating that it doesn\u0027t care aboutthe detail level. In this case the default detail level is used.\u003c/p\u003e\n * @param fullDetailRequest  the detail level requested\n * @return whether full detail is to be shown\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getShortClassName#1559",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getShortClassName(java.lang.Class\u003c?\u003e)",
    "snippet": "protected String getShortClassName(final Class\u003c?\u003e cls) {\n        return ClassUtils.getShortClassName(cls);\n    }",
    "begin_line": 1559,
    "end_line": 1561,
    "comment": "/** \n * Gets the short class name for a class. \u003cp\u003eThe short class name is the classname excluding the package name.\u003c/p\u003e\n * @param cls  the {@link Class} to get the short name of\n * @return the short name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isUseClassName#1571",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isUseClassName()",
    "snippet": "protected boolean isUseClassName() {\n        return useClassName;\n    }",
    "begin_line": 1571,
    "end_line": 1573,
    "comment": "/** \n * Gets whether to use the class name.\n * @return the current useClassName flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setUseClassName#1580",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseClassName(boolean)",
    "snippet": "protected void setUseClassName(final boolean useClassName) {\n        this.useClassName \u003d useClassName;\n    }",
    "begin_line": 1580,
    "end_line": 1582,
    "comment": "/** \n * Sets whether to use the class name.\n * @param useClassName  the new useClassName flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isUseShortClassName#1590",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isUseShortClassName()",
    "snippet": "protected boolean isUseShortClassName() {\n        return useShortClassName;\n    }",
    "begin_line": 1590,
    "end_line": 1592,
    "comment": "/** \n * Gets whether to output short or long class names.\n * @return the current useShortClassName flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setUseShortClassName#1600",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseShortClassName(boolean)",
    "snippet": "protected void setUseShortClassName(final boolean useShortClassName) {\n        this.useShortClassName \u003d useShortClassName;\n    }",
    "begin_line": 1600,
    "end_line": 1602,
    "comment": "/** \n * Sets whether to output short or long class names.\n * @param useShortClassName  the new useShortClassName flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isUseIdentityHashCode#1609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isUseIdentityHashCode()",
    "snippet": "protected boolean isUseIdentityHashCode() {\n        return useIdentityHashCode;\n    }",
    "begin_line": 1609,
    "end_line": 1611,
    "comment": "/** \n * Gets whether to use the identity hash code.\n * @return the current useIdentityHashCode flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setUseIdentityHashCode#1618",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseIdentityHashCode(boolean)",
    "snippet": "protected void setUseIdentityHashCode(final boolean useIdentityHashCode) {\n        this.useIdentityHashCode \u003d useIdentityHashCode;\n    }",
    "begin_line": 1618,
    "end_line": 1620,
    "comment": "/** \n * Sets whether to use the identity hash code.\n * @param useIdentityHashCode  the new useIdentityHashCode flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isUseFieldNames#1627",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isUseFieldNames()",
    "snippet": "protected boolean isUseFieldNames() {\n        return useFieldNames;\n    }",
    "begin_line": 1627,
    "end_line": 1629,
    "comment": "/** \n * Gets whether to use the field names passed in.\n * @return the current useFieldNames flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setUseFieldNames#1636",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseFieldNames(boolean)",
    "snippet": "protected void setUseFieldNames(final boolean useFieldNames) {\n        this.useFieldNames \u003d useFieldNames;\n    }",
    "begin_line": 1636,
    "end_line": 1638,
    "comment": "/** \n * Sets whether to use the field names passed in.\n * @param useFieldNames  the new useFieldNames flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isDefaultFullDetail#1646",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isDefaultFullDetail()",
    "snippet": "protected boolean isDefaultFullDetail() {\n        return defaultFullDetail;\n    }",
    "begin_line": 1646,
    "end_line": 1648,
    "comment": "/** \n * Gets whether to use full detail when the caller doesn\u0027t specify.\n * @return the current defaultFullDetail flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setDefaultFullDetail#1656",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setDefaultFullDetail(boolean)",
    "snippet": "protected void setDefaultFullDetail(final boolean defaultFullDetail) {\n        this.defaultFullDetail \u003d defaultFullDetail;\n    }",
    "begin_line": 1656,
    "end_line": 1658,
    "comment": "/** \n * Sets whether to use full detail when the caller doesn\u0027t specify.\n * @param defaultFullDetail  the new defaultFullDetail flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isArrayContentDetail#1665",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isArrayContentDetail()",
    "snippet": "protected boolean isArrayContentDetail() {\n        return arrayContentDetail;\n    }",
    "begin_line": 1665,
    "end_line": 1667,
    "comment": "/** \n * Gets whether to output array content detail.\n * @return the current array content detail setting\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setArrayContentDetail#1674",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setArrayContentDetail(boolean)",
    "snippet": "protected void setArrayContentDetail(final boolean arrayContentDetail) {\n        this.arrayContentDetail \u003d arrayContentDetail;\n    }",
    "begin_line": 1674,
    "end_line": 1676,
    "comment": "/** \n * Sets whether to output array content detail.\n * @param arrayContentDetail  the new arrayContentDetail flag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getArrayStart#1683",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getArrayStart()",
    "snippet": "protected String getArrayStart() {\n        return arrayStart;\n    }",
    "begin_line": 1683,
    "end_line": 1685,
    "comment": "/** \n * Gets the array start text.\n * @return the current array start text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setArrayStart#1695",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setArrayStart(java.lang.String)",
    "snippet": "protected void setArrayStart(String arrayStart) {\n        if (arrayStart \u003d\u003d null) {\n            arrayStart \u003d StringUtils.EMPTY;\n        }\n        this.arrayStart \u003d arrayStart;\n    }",
    "begin_line": 1695,
    "end_line": 1700,
    "comment": "/** \n * Sets the array start text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param arrayStart  the new array start text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getArrayEnd#1707",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getArrayEnd()",
    "snippet": "protected String getArrayEnd() {\n        return arrayEnd;\n    }",
    "begin_line": 1707,
    "end_line": 1709,
    "comment": "/** \n * Gets the array end text.\n * @return the current array end text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setArrayEnd#1719",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setArrayEnd(java.lang.String)",
    "snippet": "protected void setArrayEnd(String arrayEnd) {\n        if (arrayEnd \u003d\u003d null) {\n            arrayEnd \u003d StringUtils.EMPTY;\n        }\n        this.arrayEnd \u003d arrayEnd;\n    }",
    "begin_line": 1719,
    "end_line": 1724,
    "comment": "/** \n * Sets the array end text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param arrayEnd  the new array end text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getArraySeparator#1731",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getArraySeparator()",
    "snippet": "protected String getArraySeparator() {\n        return arraySeparator;\n    }",
    "begin_line": 1731,
    "end_line": 1733,
    "comment": "/** \n * Gets the array separator text.\n * @return the current array separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setArraySeparator#1743",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setArraySeparator(java.lang.String)",
    "snippet": "protected void setArraySeparator(String arraySeparator) {\n        if (arraySeparator \u003d\u003d null) {\n            arraySeparator \u003d StringUtils.EMPTY;\n        }\n        this.arraySeparator \u003d arraySeparator;\n    }",
    "begin_line": 1743,
    "end_line": 1748,
    "comment": "/** \n * Sets the array separator text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param arraySeparator  the new array separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getContentStart#1755",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getContentStart()",
    "snippet": "protected String getContentStart() {\n        return contentStart;\n    }",
    "begin_line": 1755,
    "end_line": 1757,
    "comment": "/** \n * Gets the content start text.\n * @return the current content start text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setContentStart#1767",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setContentStart(java.lang.String)",
    "snippet": "protected void setContentStart(String contentStart) {\n        if (contentStart \u003d\u003d null) {\n            contentStart \u003d StringUtils.EMPTY;\n        }\n        this.contentStart \u003d contentStart;\n    }",
    "begin_line": 1767,
    "end_line": 1772,
    "comment": "/** \n * Sets the content start text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param contentStart  the new content start text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getContentEnd#1779",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getContentEnd()",
    "snippet": "protected String getContentEnd() {\n        return contentEnd;\n    }",
    "begin_line": 1779,
    "end_line": 1781,
    "comment": "/** \n * Gets the content end text.\n * @return the current content end text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setContentEnd#1791",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setContentEnd(java.lang.String)",
    "snippet": "protected void setContentEnd(String contentEnd) {\n        if (contentEnd \u003d\u003d null) {\n            contentEnd \u003d StringUtils.EMPTY;\n        }\n        this.contentEnd \u003d contentEnd;\n    }",
    "begin_line": 1791,
    "end_line": 1796,
    "comment": "/** \n * Sets the content end text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param contentEnd  the new content end text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getFieldNameValueSeparator#1803",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getFieldNameValueSeparator()",
    "snippet": "protected String getFieldNameValueSeparator() {\n        return fieldNameValueSeparator;\n    }",
    "begin_line": 1803,
    "end_line": 1805,
    "comment": "/** \n * Gets the field name value separator text.\n * @return the current field name value separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setFieldNameValueSeparator#1815",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldNameValueSeparator(java.lang.String)",
    "snippet": "protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n        if (fieldNameValueSeparator \u003d\u003d null) {\n            fieldNameValueSeparator \u003d StringUtils.EMPTY;\n        }\n        this.fieldNameValueSeparator \u003d fieldNameValueSeparator;\n    }",
    "begin_line": 1815,
    "end_line": 1820,
    "comment": "/** \n * Sets the field name value separator text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param fieldNameValueSeparator  the new field name value separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getFieldSeparator#1827",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getFieldSeparator()",
    "snippet": "protected String getFieldSeparator() {\n        return fieldSeparator;\n    }",
    "begin_line": 1827,
    "end_line": 1829,
    "comment": "/** \n * Gets the field separator text.\n * @return the current field separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setFieldSeparator#1839",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldSeparator(java.lang.String)",
    "snippet": "protected void setFieldSeparator(String fieldSeparator) {\n        if (fieldSeparator \u003d\u003d null) {\n            fieldSeparator \u003d StringUtils.EMPTY;\n        }\n        this.fieldSeparator \u003d fieldSeparator;\n    }",
    "begin_line": 1839,
    "end_line": 1844,
    "comment": "/** \n * Sets the field separator text. \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param fieldSeparator  the new field separator text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isFieldSeparatorAtStart#1853",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isFieldSeparatorAtStart()",
    "snippet": "protected boolean isFieldSeparatorAtStart() {\n        return fieldSeparatorAtStart;\n    }",
    "begin_line": 1853,
    "end_line": 1855,
    "comment": "/** \n * Gets whether the field separator should be added at the start of each buffer.\n * @return the fieldSeparatorAtStart flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setFieldSeparatorAtStart#1864",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldSeparatorAtStart(boolean)",
    "snippet": "protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart) {\n        this.fieldSeparatorAtStart \u003d fieldSeparatorAtStart;\n    }",
    "begin_line": 1864,
    "end_line": 1866,
    "comment": "/** \n * Sets whether the field separator should be added at the start of each buffer.\n * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.isFieldSeparatorAtEnd#1875",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isFieldSeparatorAtEnd()",
    "snippet": "protected boolean isFieldSeparatorAtEnd() {\n        return fieldSeparatorAtEnd;\n    }",
    "begin_line": 1875,
    "end_line": 1877,
    "comment": "/** \n * Gets whether the field separator should be added at the end of each buffer.\n * @return fieldSeparatorAtEnd flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setFieldSeparatorAtEnd#1886",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldSeparatorAtEnd(boolean)",
    "snippet": "protected void setFieldSeparatorAtEnd(final boolean fieldSeparatorAtEnd) {\n        this.fieldSeparatorAtEnd \u003d fieldSeparatorAtEnd;\n    }",
    "begin_line": 1886,
    "end_line": 1888,
    "comment": "/** \n * Sets whether the field separator should be added at the end of each buffer.\n * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getNullText#1895",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getNullText()",
    "snippet": "protected String getNullText() {\n        return nullText;\n    }",
    "begin_line": 1895,
    "end_line": 1897,
    "comment": "/** \n * Gets the text to output when  {@code null} found.\n * @return the current text to output when null found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setNullText#1907",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setNullText(java.lang.String)",
    "snippet": "protected void setNullText(String nullText) {\n        if (nullText \u003d\u003d null) {\n            nullText \u003d StringUtils.EMPTY;\n        }\n        this.nullText \u003d nullText;\n    }",
    "begin_line": 1907,
    "end_line": 1912,
    "comment": "/** \n * Sets the text to output when  {@code null} found.\u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param nullText  the new text to output when null found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getSizeStartText#1922",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getSizeStartText()",
    "snippet": "protected String getSizeStartText() {\n        return sizeStartText;\n    }",
    "begin_line": 1922,
    "end_line": 1924,
    "comment": "/** \n * Gets the start text to output when a  {@link Collection}, {@link Map} or array size is output.\u003cp\u003eThis is output before the size value.\u003c/p\u003e\n * @return the current start of size text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setSizeStartText#1937",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setSizeStartText(java.lang.String)",
    "snippet": "protected void setSizeStartText(String sizeStartText) {\n        if (sizeStartText \u003d\u003d null) {\n            sizeStartText \u003d StringUtils.EMPTY;\n        }\n        this.sizeStartText \u003d sizeStartText;\n    }",
    "begin_line": 1937,
    "end_line": 1942,
    "comment": "/** \n * Sets the start text to output when a  {@link Collection}, {@link Map} or array size is output.\u003cp\u003eThis is output before the size value.\u003c/p\u003e \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param sizeStartText  the new start of size text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getSizeEndText#1952",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getSizeEndText()",
    "snippet": "protected String getSizeEndText() {\n        return sizeEndText;\n    }",
    "begin_line": 1952,
    "end_line": 1954,
    "comment": "/** \n * Gets the end text to output when a  {@link Collection}, {@link Map} or array size is output.\u003cp\u003eThis is output after the size value.\u003c/p\u003e\n * @return the current end of size text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setSizeEndText#1967",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setSizeEndText(java.lang.String)",
    "snippet": "protected void setSizeEndText(String sizeEndText) {\n        if (sizeEndText \u003d\u003d null) {\n            sizeEndText \u003d StringUtils.EMPTY;\n        }\n        this.sizeEndText \u003d sizeEndText;\n    }",
    "begin_line": 1967,
    "end_line": 1972,
    "comment": "/** \n * Sets the end text to output when a  {@link Collection}, {@link Map} or array size is output.\u003cp\u003eThis is output after the size value.\u003c/p\u003e \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param sizeEndText  the new end of size text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getSummaryObjectStartText#1982",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getSummaryObjectStartText()",
    "snippet": "protected String getSummaryObjectStartText() {\n        return summaryObjectStartText;\n    }",
    "begin_line": 1982,
    "end_line": 1984,
    "comment": "/** \n * Gets the start text to output when an  {@link Object} isoutput in summary mode. \u003cp\u003eThis is output before the size value.\u003c/p\u003e\n * @return the current start of summary text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setSummaryObjectStartText#1997",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setSummaryObjectStartText(java.lang.String)",
    "snippet": "protected void setSummaryObjectStartText(String summaryObjectStartText) {\n        if (summaryObjectStartText \u003d\u003d null) {\n            summaryObjectStartText \u003d StringUtils.EMPTY;\n        }\n        this.summaryObjectStartText \u003d summaryObjectStartText;\n    }",
    "begin_line": 1997,
    "end_line": 2002,
    "comment": "/** \n * Sets the start text to output when an  {@link Object} isoutput in summary mode. \u003cp\u003eThis is output before the size value.\u003c/p\u003e \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param summaryObjectStartText  the new start of summary text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.getSummaryObjectEndText#2012",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.getSummaryObjectEndText()",
    "snippet": "protected String getSummaryObjectEndText() {\n        return summaryObjectEndText;\n    }",
    "begin_line": 2012,
    "end_line": 2014,
    "comment": "/** \n * Gets the end text to output when an  {@link Object} isoutput in summary mode. \u003cp\u003eThis is output after the size value.\u003c/p\u003e\n * @return the current end of summary text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringStyle.setSummaryObjectEndText#2027",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.setSummaryObjectEndText(java.lang.String)",
    "snippet": "protected void setSummaryObjectEndText(String summaryObjectEndText) {\n        if (summaryObjectEndText \u003d\u003d null) {\n            summaryObjectEndText \u003d StringUtils.EMPTY;\n        }\n        this.summaryObjectEndText \u003d summaryObjectEndText;\n    }",
    "begin_line": 2027,
    "end_line": 2032,
    "comment": "/** \n * Sets the end text to output when an  {@link Object} isoutput in summary mode. \u003cp\u003eThis is output after the size value.\u003c/p\u003e \u003cp\u003e {@code null} is accepted, but will be converted toan empty String.\u003c/p\u003e\n * @param summaryObjectEndText  the new end of summary text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultToStringStyle.DefaultToStringStyle#2054",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.DefaultToStringStyle()",
    "snippet": " DefaultToStringStyle() {\n        }",
    "begin_line": 2054,
    "end_line": 2055,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultToStringStyle.readResolve#2062",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return DEFAULT_STYLE;\n        }",
    "begin_line": 2062,
    "end_line": 2064,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoFieldNameToStringStyle.NoFieldNameToStringStyle#2084",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.NoFieldNameToStringStyle()",
    "snippet": " NoFieldNameToStringStyle() {\n            this.setUseFieldNames(false);\n        }",
    "begin_line": 2084,
    "end_line": 2086,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoFieldNameToStringStyle.readResolve#2093",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return NO_FIELD_NAMES_STYLE;\n        }",
    "begin_line": 2093,
    "end_line": 2095,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortPrefixToStringStyle.ShortPrefixToStringStyle#2115",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.ShortPrefixToStringStyle()",
    "snippet": " ShortPrefixToStringStyle() {\n            this.setUseShortClassName(true);\n            this.setUseIdentityHashCode(false);\n        }",
    "begin_line": 2115,
    "end_line": 2118,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortPrefixToStringStyle.readResolve#2124",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return SHORT_PREFIX_STYLE;\n        }",
    "begin_line": 2124,
    "end_line": 2126,
    "comment": "/** \n * Ensure \u003ccode\u003eSingleton\u003c/ode\u003e after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleToStringStyle.SimpleToStringStyle#2146",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.SimpleToStringStyle()",
    "snippet": " SimpleToStringStyle() {\n            this.setUseClassName(false);\n            this.setUseIdentityHashCode(false);\n            this.setUseFieldNames(false);\n            this.setContentStart(StringUtils.EMPTY);\n            this.setContentEnd(StringUtils.EMPTY);\n        }",
    "begin_line": 2146,
    "end_line": 2152,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleToStringStyle.readResolve#2158",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return SIMPLE_STYLE;\n        }",
    "begin_line": 2158,
    "end_line": 2160,
    "comment": "/** \n * Ensure \u003ccode\u003eSingleton\u003c/ode\u003e after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MultiLineToStringStyle.MultiLineToStringStyle#2179",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.MultiLineToStringStyle()",
    "snippet": " MultiLineToStringStyle() {\n            this.setContentStart(\"[\");\n            this.setFieldSeparator(System.lineSeparator() + \"  \");\n            this.setFieldSeparatorAtStart(true);\n            this.setContentEnd(System.lineSeparator() + \"]\");\n        }",
    "begin_line": 2179,
    "end_line": 2184,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MultiLineToStringStyle.readResolve#2191",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return MULTI_LINE_STYLE;\n        }",
    "begin_line": 2191,
    "end_line": 2193,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoClassNameToStringStyle.NoClassNameToStringStyle#2213",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.NoClassNameToStringStyle()",
    "snippet": " NoClassNameToStringStyle() {\n            this.setUseClassName(false);\n            this.setUseIdentityHashCode(false);\n        }",
    "begin_line": 2213,
    "end_line": 2216,
    "comment": "/** \n * Constructor. \u003cp\u003eUse the static constant rather than instantiating.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoClassNameToStringStyle.readResolve#2223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return NO_CLASS_NAME_STYLE;\n        }",
    "begin_line": 2223,
    "end_line": 2225,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.JsonToStringStyle#2253",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.JsonToStringStyle()",
    "snippet": " JsonToStringStyle() {\n            this.setUseClassName(false);\n            this.setUseIdentityHashCode(false);\n\n            this.setContentStart(\"{\");\n            this.setContentEnd(\"}\");\n\n            this.setArrayStart(\"[\");\n            this.setArrayEnd(\"]\");\n\n            this.setFieldSeparator(\",\");\n            this.setFieldNameValueSeparator(\":\");\n\n            this.setNullText(\"null\");\n\n            this.setSummaryObjectStartText(\"\\\"\u003c\");\n            this.setSummaryObjectEndText(\"\u003e\\\"\");\n\n            this.setSizeStartText(\"\\\"\u003csize\u003d\");\n            this.setSizeEndText(\"\u003e\\\"\");\n        }",
    "begin_line": 2253,
    "end_line": 2273,
    "comment": "/** \n * Constructor. \u003cp\u003e Use the static constant rather than instantiating. \u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2276",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName,\n                           final Object[] array, final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2276,
    "end_line": 2289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2292",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName, final long[] array,\n                           final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2292,
    "end_line": 2305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2308",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName, final int[] array,\n                           final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2308,
    "end_line": 2321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2324",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName,\n                           final short[] array, final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2324,
    "end_line": 2337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2340",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName, final byte[] array,\n                           final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2340,
    "end_line": 2353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2356",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName, final char[] array,\n                           final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2356,
    "end_line": 2369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2372",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName,\n                           final double[] array, final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2372,
    "end_line": 2385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2388",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName,\n                           final float[] array, final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2388,
    "end_line": 2401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2404",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName,\n                           final boolean[] array, final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, array, fullDetail);\n        }",
    "begin_line": 2404,
    "end_line": 2417,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.append#2420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)",
    "snippet": "@Override\n        public void append(final StringBuffer buffer, final String fieldName, final Object value,\n                           final Boolean fullDetail) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n            if (!isFullDetail(fullDetail)) {\n                throw new UnsupportedOperationException(\n                        \"FullDetail must be true when using JsonToStringStyle\");\n            }\n\n            super.append(buffer, fieldName, value, fullDetail);\n        }",
    "begin_line": 2420,
    "end_line": 2433,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendDetail#2436",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char)",
    "snippet": "@Override\n        protected void appendDetail(final StringBuffer buffer, final String fieldName, final char value) {\n            appendValueAsString(buffer, String.valueOf(value));\n        }",
    "begin_line": 2436,
    "end_line": 2438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendDetail#2441",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
    "snippet": "@Override\n        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {\n\n            if (value \u003d\u003d null) {\n                appendNullText(buffer, fieldName);\n                return;\n            }\n\n            if (value instanceof String || value instanceof Character) {\n                appendValueAsString(buffer, value.toString());\n                return;\n            }\n\n            if (value instanceof Number || value instanceof Boolean) {\n                buffer.append(value);\n                return;\n            }\n\n            final String valueAsString \u003d value.toString();\n            if (isJsonObject(valueAsString) || isJsonArray(valueAsString)) {\n                buffer.append(value);\n                return;\n            }\n\n            appendDetail(buffer, fieldName, valueAsString);\n        }",
    "begin_line": 2441,
    "end_line": 2465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendDetail#2468",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Collection\u003c?\u003e)",
    "snippet": "@Override\n        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection\u003c?\u003e coll) {\n            if (coll !\u003d null \u0026\u0026 !coll.isEmpty()) {\n                buffer.append(getArrayStart());\n                int i \u003d 0;\n                for (final Object item : coll) {\n                    appendDetail(buffer, fieldName, i++, item);\n                }\n                buffer.append(getArrayEnd());\n                return;\n            }\n\n            buffer.append(coll);\n        }",
    "begin_line": 2468,
    "end_line": 2480,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendDetail#2483",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Map\u003c?,?\u003e)",
    "snippet": "@Override\n        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Map\u003c?, ?\u003e map) {\n            if (map !\u003d null \u0026\u0026 !map.isEmpty()) {\n                buffer.append(getContentStart());\n\n                boolean firstItem \u003d true;\n                for (final Entry\u003c?, ?\u003e entry : map.entrySet()) {\n                    final String keyStr \u003d Objects.toString(entry.getKey(), null);\n                    if (keyStr !\u003d null) {\n                        if (firstItem) {\n                            firstItem \u003d false;\n                        } else {\n                            appendFieldEnd(buffer, keyStr);\n                        }\n                        appendFieldStart(buffer, keyStr);\n                        final Object value \u003d entry.getValue();\n                        if (value \u003d\u003d null) {\n                            appendNullText(buffer, keyStr);\n                        } else {\n                            appendInternal(buffer, keyStr, value, true);\n                        }\n                    }\n                }\n\n                buffer.append(getContentEnd());\n                return;\n            }\n\n            buffer.append(map);\n        }",
    "begin_line": 2483,
    "end_line": 2511,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.isJsonArray#2513",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isJsonArray(java.lang.String)",
    "snippet": "private boolean isJsonArray(final String valueAsString) {\n            return valueAsString.startsWith(getArrayStart())\n                    \u0026\u0026 valueAsString.endsWith(getArrayEnd());\n        }",
    "begin_line": 2513,
    "end_line": 2516,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.isJsonObject#2518",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.isJsonObject(java.lang.String)",
    "snippet": "private boolean isJsonObject(final String valueAsString) {\n            return valueAsString.startsWith(getContentStart())\n                    \u0026\u0026 valueAsString.endsWith(getContentEnd());\n        }",
    "begin_line": 2518,
    "end_line": 2521,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendValueAsString#2529",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendValueAsString(java.lang.StringBuffer, java.lang.String)",
    "snippet": "private void appendValueAsString(final StringBuffer buffer, final String value) {\n            buffer.append(\u0027\"\u0027).append(StringEscapeUtils.escapeJson(value)).append(\u0027\"\u0027);\n        }",
    "begin_line": 2529,
    "end_line": 2531,
    "comment": "/** \n * Appends the given String enclosed in double-quotes to the given StringBuffer.\n * @param buffer the StringBuffer to append the value to.\n * @param value the value to append.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.appendFieldStart#2534",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)",
    "snippet": "@Override\n        protected void appendFieldStart(final StringBuffer buffer, final String fieldName) {\n\n            if (fieldName \u003d\u003d null) {\n                throw new UnsupportedOperationException(\n                        \"Field names are mandatory when using JsonToStringStyle\");\n            }\n\n            super.appendFieldStart(buffer, FIELD_NAME_QUOTE + StringEscapeUtils.escapeJson(fieldName)\n                    + FIELD_NAME_QUOTE);\n        }",
    "begin_line": 2534,
    "end_line": 2543,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonToStringStyle.readResolve#2550",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/builder/ToStringStyle.java",
    "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
    "signature": "org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
    "snippet": "private Object readResolve() {\n            return JSON_STYLE;\n        }",
    "begin_line": 2550,
    "end_line": 2552,
    "comment": "/** \n * Ensure Singleton after serialization.\n * @return the singleton\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GenericArrayTypeImpl.GenericArrayTypeImpl#62",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.GenericArrayTypeImpl(java.lang.reflect.Type)",
    "snippet": "private GenericArrayTypeImpl(final Type componentType) {\n            this.componentType \u003d componentType;\n        }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * Constructor\n * @param componentType of this array type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GenericArrayTypeImpl.equals#70",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(final Object obj) {\n            return obj \u003d\u003d this || obj instanceof GenericArrayType \u0026\u0026 TypeUtils.equals(this, (GenericArrayType) obj);\n        }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GenericArrayTypeImpl.getGenericComponentType#78",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getGenericComponentType()",
    "snippet": "@Override\n        public Type getGenericComponentType() {\n            return componentType;\n        }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GenericArrayTypeImpl.hashCode#86",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.hashCode()",
    "snippet": "@Override\n        public int hashCode() {\n            int result \u003d 67 \u003c\u003c 4;\n            result |\u003d componentType.hashCode();\n            return result;\n        }",
    "begin_line": 86,
    "end_line": 90,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GenericArrayTypeImpl.toString#96",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toString()",
    "snippet": "@Override\n        public String toString() {\n            return TypeUtils.toString(this);\n        }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.ParameterizedTypeImpl#116",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl(java.lang.Class\u003c?\u003e, java.lang.reflect.Type, java.lang.reflect.Type[])",
    "snippet": "private ParameterizedTypeImpl(final Class\u003c?\u003e rawClass, final Type useOwner, final Type[] typeArguments) {\n            this.raw \u003d rawClass;\n            this.useOwner \u003d useOwner;\n            this.typeArguments \u003d Arrays.copyOf(typeArguments, typeArguments.length, Type[].class);\n        }",
    "begin_line": 116,
    "end_line": 120,
    "comment": "/** \n * Constructor\n * @param rawClass type\n * @param useOwner owner type to use, if any\n * @param typeArguments formal type arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.equals#126",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(final Object obj) {\n            return obj \u003d\u003d this || obj instanceof ParameterizedType \u0026\u0026 TypeUtils.equals(this, (ParameterizedType) obj);\n        }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.getActualTypeArguments#134",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getActualTypeArguments()",
    "snippet": "@Override\n        public Type[] getActualTypeArguments() {\n            return typeArguments.clone();\n        }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.getOwnerType#142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getOwnerType()",
    "snippet": "@Override\n        public Type getOwnerType() {\n            return useOwner;\n        }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.getRawType#150",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getRawType()",
    "snippet": "@Override\n        public Type getRawType() {\n            return raw;\n        }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.hashCode#158",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.hashCode()",
    "snippet": "@Override\n        public int hashCode() {\n            int result \u003d 71 \u003c\u003c 4;\n            result |\u003d raw.hashCode();\n            result \u003c\u003c\u003d 4;\n            result |\u003d Objects.hashCode(useOwner);\n            result \u003c\u003c\u003d 8;\n            result |\u003d Arrays.hashCode(typeArguments);\n            return result;\n        }",
    "begin_line": 158,
    "end_line": 166,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParameterizedTypeImpl.toString#172",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toString()",
    "snippet": "@Override\n        public String toString() {\n            return TypeUtils.toString(this);\n        }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeBuilder.WildcardTypeBuilder#188",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder()",
    "snippet": "private WildcardTypeBuilder() {\n        }",
    "begin_line": 188,
    "end_line": 189,
    "comment": "/** \n * Constructor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeBuilder.build#195",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.build()",
    "snippet": "@Override\n        public WildcardType build() {\n            return new WildcardTypeImpl(upperBounds, lowerBounds);\n        }",
    "begin_line": 195,
    "end_line": 197,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeBuilder.withLowerBounds#204",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.withLowerBounds(java.lang.reflect.Type)",
    "snippet": "public WildcardTypeBuilder withLowerBounds(final Type... bounds) {\n            this.lowerBounds \u003d bounds;\n            return this;\n        }",
    "begin_line": 204,
    "end_line": 207,
    "comment": "/** \n * Specify lower bounds of the wildcard type to build.\n * @param bounds to set\n * @return {@code this}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeBuilder.withUpperBounds#214",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.withUpperBounds(java.lang.reflect.Type)",
    "snippet": "public WildcardTypeBuilder withUpperBounds(final Type... bounds) {\n            this.upperBounds \u003d bounds;\n            return this;\n        }",
    "begin_line": 214,
    "end_line": 217,
    "comment": "/** \n * Specify upper bounds of the wildcard type to build.\n * @param bounds to set\n * @return {@code this}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.WildcardTypeImpl#233",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeImpl(java.lang.reflect.Type[], java.lang.reflect.Type[])",
    "snippet": "private WildcardTypeImpl(final Type[] upperBounds, final Type[] lowerBounds) {\n            this.upperBounds \u003d ObjectUtils.defaultIfNull(upperBounds, ArrayUtils.EMPTY_TYPE_ARRAY);\n            this.lowerBounds \u003d ObjectUtils.defaultIfNull(lowerBounds, ArrayUtils.EMPTY_TYPE_ARRAY);\n        }",
    "begin_line": 233,
    "end_line": 236,
    "comment": "/** \n * Constructor\n * @param upperBounds of this type\n * @param lowerBounds of this type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#242",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(final Object obj) {\n            return obj \u003d\u003d this || obj instanceof WildcardType \u0026\u0026 TypeUtils.equals(this, (WildcardType) obj);\n        }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getLowerBounds#250",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getLowerBounds()",
    "snippet": "@Override\n        public Type[] getLowerBounds() {\n            return lowerBounds.clone();\n        }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getUpperBounds#258",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getUpperBounds()",
    "snippet": "@Override\n        public Type[] getUpperBounds() {\n            return upperBounds.clone();\n        }",
    "begin_line": 258,
    "end_line": 260,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.hashCode#266",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.hashCode()",
    "snippet": "@Override\n        public int hashCode() {\n            int result \u003d 73 \u003c\u003c 8;\n            result |\u003d Arrays.hashCode(upperBounds);\n            result \u003c\u003c\u003d 8;\n            result |\u003d Arrays.hashCode(lowerBounds);\n            return result;\n        }",
    "begin_line": 266,
    "end_line": 272,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.toString#278",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toString()",
    "snippet": "@Override\n        public String toString() {\n            return TypeUtils.toString(this);\n        }",
    "begin_line": 278,
    "end_line": 280,
    "comment": "/** \n * {@inheritDoc}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.appendAllTo#298",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(java.lang.StringBuilder, java.lang.String, T)",
    "snippet": "private static \u003cT\u003e StringBuilder appendAllTo(final StringBuilder builder, final String sep,\n        @SuppressWarnings(\"unchecked\") final T... types) {\n        Validate.notEmpty(Validate.noNullElements(types));\n        if (types.length \u003e 0) {\n            builder.append(toString(types[0]));\n            for (int i \u003d 1; i \u003c types.length; i++) {\n                builder.append(sep).append(toString(types[i]));\n            }\n        }\n        return builder;\n    }",
    "begin_line": 298,
    "end_line": 308,
    "comment": "/** \n * Appends  {@code types} to {@code builder} with separator {@code sep}.\n * @param builder destination\n * @param sep separator\n * @param types to append\n * @return {@code builder}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.appendRecursiveTypes#310",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.appendRecursiveTypes(java.lang.StringBuilder, int[], java.lang.reflect.Type[])",
    "snippet": "private static void appendRecursiveTypes(final StringBuilder builder, final int[] recursiveTypeIndexes,\n        final Type[] argumentTypes) {\n        for (int i \u003d 0; i \u003c recursiveTypeIndexes.length; i++) {\n            appendAllTo(builder.append(\u0027\u003c\u0027), \", \", argumentTypes[i].toString()).append(\u0027\u003e\u0027);\n        }\n\n        final Type[] argumentsFiltered \u003d ArrayUtils.removeAll(argumentTypes, recursiveTypeIndexes);\n\n        if (argumentsFiltered.length \u003e 0) {\n            appendAllTo(builder.append(\u0027\u003c\u0027), \", \", argumentsFiltered).append(\u0027\u003e\u0027);\n        }\n    }",
    "begin_line": 310,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.classToString#330",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.classToString(java.lang.Class\u003c?\u003e)",
    "snippet": "private static String classToString(final Class\u003c?\u003e cls) {\n        if (cls.isArray()) {\n            return toString(cls.getComponentType()) + \"[]\";\n        }\n\n        final StringBuilder buf \u003d new StringBuilder();\n\n        if (cls.getEnclosingClass() !\u003d null) {\n            buf.append(classToString(cls.getEnclosingClass())).append(\u0027.\u0027).append(cls.getSimpleName());\n        } else {\n            buf.append(cls.getName());\n        }\n        if (cls.getTypeParameters().length \u003e 0) {\n            buf.append(\u0027\u003c\u0027);\n            appendAllTo(buf, \", \", cls.getTypeParameters());\n            buf.append(\u0027\u003e\u0027);\n        }\n        return buf.toString();\n    }",
    "begin_line": 330,
    "end_line": 348,
    "comment": "/** \n * Formats a  {@link Class} as a {@link String}.\n * @param cls {@link Class} to format\n * @return String\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.containsTypeVariables#357",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(java.lang.reflect.Type)",
    "snippet": "public static boolean containsTypeVariables(final Type type) {\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            return true;\n        }\n        if (type instanceof Class\u003c?\u003e) {\n            return ((Class\u003c?\u003e) type).getTypeParameters().length \u003e 0;\n        }\n        if (type instanceof ParameterizedType) {\n            for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\n                if (containsTypeVariables(arg)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (type instanceof WildcardType) {\n            final WildcardType wild \u003d (WildcardType) type;\n            return containsTypeVariables(getImplicitLowerBounds(wild)[0])\n                || containsTypeVariables(getImplicitUpperBounds(wild)[0]);\n        }\n        if (type instanceof GenericArrayType) {\n            return containsTypeVariables(((GenericArrayType) type).getGenericComponentType());\n        }\n        return false;\n    }",
    "begin_line": 357,
    "end_line": 381,
    "comment": "/** \n * Tests, recursively, whether any of the type parameters associated with  {@code type} are bound to variables.\n * @param type the type to check for type variables\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.containsVariableTypeSameParametrizedTypeBound#383",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.containsVariableTypeSameParametrizedTypeBound(java.lang.reflect.TypeVariable\u003c?\u003e, java.lang.reflect.ParameterizedType)",
    "snippet": "private static boolean containsVariableTypeSameParametrizedTypeBound(final TypeVariable\u003c?\u003e typeVariable,\n        final ParameterizedType parameterizedType) {\n        return ArrayUtils.contains(typeVariable.getBounds(), parameterizedType);\n    }",
    "begin_line": 383,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.determineTypeArguments#420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.determineTypeArguments(java.lang.Class\u003c?\u003e, java.lang.reflect.ParameterizedType)",
    "snippet": "public static Map\u003cTypeVariable\u003c?\u003e, Type\u003e determineTypeArguments(final Class\u003c?\u003e cls,\n            final ParameterizedType superParameterizedType) {\n        Objects.requireNonNull(cls, \"cls\");\n        Objects.requireNonNull(superParameterizedType, \"superParameterizedType\");\n\n        final Class\u003c?\u003e superClass \u003d getRawType(superParameterizedType);\n\n        // compatibility check\n        if (!isAssignable(cls, superClass)) {\n            return null;\n        }\n\n        if (cls.equals(superClass)) {\n            return getTypeArguments(superParameterizedType, superClass, null);\n        }\n\n        // get the next class in the inheritance hierarchy\n        final Type midType \u003d getClosestParentType(cls, superClass);\n\n        // can only be a class or a parameterized type\n        if (midType instanceof Class\u003c?\u003e) {\n            return determineTypeArguments((Class\u003c?\u003e) midType, superParameterizedType);\n        }\n\n        final ParameterizedType midParameterizedType \u003d (ParameterizedType) midType;\n        final Class\u003c?\u003e midClass \u003d getRawType(midParameterizedType);\n        // get the type variables of the mid class that map to the type\n        // arguments of the super class\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d determineTypeArguments(midClass, superParameterizedType);\n        // map the arguments of the mid type to the class type variables\n        mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\n\n        return typeVarAssigns;\n    }",
    "begin_line": 420,
    "end_line": 453,
    "comment": "/** \n * Tries to determine the type arguments of a class/interface based on a super parameterized type\u0027s type arguments. This method is the inverse of {@link #getTypeArguments(Type,Class)} which gets a class/interface\u0027stype arguments based on a subtype. It is far more limited in determining the type arguments for the subject class\u0027s type variables in that it can only determine those parameters that map from the subject  {@link Class}object to the supertype. \u003cp\u003e Example:  {@link java.util.TreeSet TreeSet} sets its parameter as the parameter for{@link java.util.NavigableSet NavigableSet}, which in turn sets the parameter of  {@link java.util.SortedSet}, which in turn sets the parameter of  {@link Set}, which in turn sets the parameter of {@link java.util.Collection}, which in turn sets the parameter of {@link Iterable}. Since  {@link TreeSet}\u0027s parameter maps (indirectly) to  {@link Iterable}\u0027s parameter, it will be able to determine that based on the super type  {@code Iterable\u003c? extendsMap\u003cInteger, ? extends Collection\u003c?\u003e\u003e\u003e}, the parameter of {@link TreeSet} is {@code ? extends Map\u003cInteger, ? extendsCollection\u003c?\u003e\u003e}. \u003c/p\u003e\n * @param cls the class whose type parameters are to be determined, not {@code null}\n * @param superParameterizedType the super type from which {@code cls}\u0027s type arguments are to be determined, not  {@code null}\n * @return a {@link Map} of the type assignments that could be determinedfor the type variables in each type in the inheritance hierarchy from {@code type} to {@code toClass} inclusive.\n * @throws NullPointerException if either {@code cls} or {@code superParameterizedType} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#463",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.GenericArrayType, java.lang.reflect.Type)",
    "snippet": "private static boolean equals(final GenericArrayType genericArrayType, final Type type) {\n        return type instanceof GenericArrayType\n            \u0026\u0026 equals(genericArrayType.getGenericComponentType(), ((GenericArrayType) type).getGenericComponentType());\n    }",
    "begin_line": 463,
    "end_line": 466,
    "comment": "/** \n * Tests whether  {@code t} equals {@code a}.\n * @param genericArrayType LHS\n * @param type RHS\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#476",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.ParameterizedType, java.lang.reflect.Type)",
    "snippet": "private static boolean equals(final ParameterizedType parameterizedType, final Type type) {\n        if (type instanceof ParameterizedType) {\n            final ParameterizedType other \u003d (ParameterizedType) type;\n            if (equals(parameterizedType.getRawType(), other.getRawType())\n                \u0026\u0026 equals(parameterizedType.getOwnerType(), other.getOwnerType())) {\n                return equals(parameterizedType.getActualTypeArguments(), other.getActualTypeArguments());\n            }\n        }\n        return false;\n    }",
    "begin_line": 476,
    "end_line": 485,
    "comment": "/** \n * Tests whether  {@code t} equals {@code p}.\n * @param parameterizedType LHS\n * @param type RHS\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#495",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type, java.lang.reflect.Type)",
    "snippet": "public static boolean equals(final Type type1, final Type type2) {\n        if (Objects.equals(type1, type2)) {\n            return true;\n        }\n        if (type1 instanceof ParameterizedType) {\n            return equals((ParameterizedType) type1, type2);\n        }\n        if (type1 instanceof GenericArrayType) {\n            return equals((GenericArrayType) type1, type2);\n        }\n        if (type1 instanceof WildcardType) {\n            return equals((WildcardType) type1, type2);\n        }\n        return false;\n    }",
    "begin_line": 495,
    "end_line": 509,
    "comment": "/** \n * Tests equality of types.\n * @param type1 the first type\n * @param type2 the second type\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#519",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type[], java.lang.reflect.Type[])",
    "snippet": "private static boolean equals(final Type[] type1, final Type[] type2) {\n        if (type1.length \u003d\u003d type2.length) {\n            for (int i \u003d 0; i \u003c type1.length; i++) {\n                if (!equals(type1[i], type2[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 519,
    "end_line": 529,
    "comment": "/** \n * Tests whether  {@code t1} equals {@code t2}.\n * @param type1 LHS\n * @param type2 RHS\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.equals#539",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.WildcardType, java.lang.reflect.Type)",
    "snippet": "private static boolean equals(final WildcardType wildcardType, final Type type) {\n        if (type instanceof WildcardType) {\n            final WildcardType other \u003d (WildcardType) type;\n            return equals(getImplicitLowerBounds(wildcardType), getImplicitLowerBounds(other))\n                \u0026\u0026 equals(getImplicitUpperBounds(wildcardType), getImplicitUpperBounds(other));\n        }\n        return false;\n    }",
    "begin_line": 539,
    "end_line": 546,
    "comment": "/** \n * Tests whether  {@code t} equals {@code w}.\n * @param wildcardType LHS\n * @param type RHS\n * @return boolean\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.extractTypeArgumentsFrom#555",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.extractTypeArgumentsFrom(java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e, java.lang.reflect.TypeVariable\u003c?\u003e[])",
    "snippet": "private static Type[] extractTypeArgumentsFrom(final Map\u003cTypeVariable\u003c?\u003e, Type\u003e mappings, final TypeVariable\u003c?\u003e[] variables) {\n        final Type[] result \u003d new Type[variables.length];\n        int index \u003d 0;\n        for (final TypeVariable\u003c?\u003e var : variables) {\n            Validate.isTrue(mappings.containsKey(var), \"missing argument mapping for %s\", toString(var));\n            result[index++] \u003d mappings.get(var);\n        }\n        return result;\n    }",
    "begin_line": 555,
    "end_line": 563,
    "comment": "/** \n * Helper method to establish the formal parameters for a parameterized type.\n * @param mappings map containing the assignments\n * @param variables expected map keys\n * @return array of map values corresponding to specified keys\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.findRecursiveTypes#565",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.findRecursiveTypes(java.lang.reflect.ParameterizedType)",
    "snippet": "private static int[] findRecursiveTypes(final ParameterizedType parameterizedType) {\n        final Type[] filteredArgumentTypes \u003d Arrays.copyOf(parameterizedType.getActualTypeArguments(),\n            parameterizedType.getActualTypeArguments().length);\n        int[] indexesToRemove \u003d {};\n        for (int i \u003d 0; i \u003c filteredArgumentTypes.length; i++) {\n            if (filteredArgumentTypes[i] instanceof TypeVariable\u003c?\u003e \u0026\u0026 containsVariableTypeSameParametrizedTypeBound(\n                (TypeVariable\u003c?\u003e) filteredArgumentTypes[i], parameterizedType)) {\n                indexesToRemove \u003d ArrayUtils.add(indexesToRemove, i);\n            }\n        }\n        return indexesToRemove;\n    }",
    "begin_line": 565,
    "end_line": 576,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.genericArrayType#586",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.genericArrayType(java.lang.reflect.Type)",
    "snippet": "public static GenericArrayType genericArrayType(final Type componentType) {\n        return new GenericArrayTypeImpl(Objects.requireNonNull(componentType, \"componentType\"));\n    }",
    "begin_line": 586,
    "end_line": 588,
    "comment": "/** \n * Creates a generic array type instance.\n * @param componentType the type of the elements of the array. For example the component type of {@code boolean[]}is  {@code boolean}\n * @return {@link GenericArrayType}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.genericArrayTypeToString#597",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.genericArrayTypeToString(java.lang.reflect.GenericArrayType)",
    "snippet": "private static String genericArrayTypeToString(final GenericArrayType genericArrayType) {\n        return String.format(\"%s[]\", toString(genericArrayType.getGenericComponentType()));\n    }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "/** \n * Formats a  {@link GenericArrayType} as a {@link String}.\n * @param genericArrayType {@link GenericArrayType} to format\n * @return String\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getArrayComponentType#607",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(java.lang.reflect.Type)",
    "snippet": "public static Type getArrayComponentType(final Type type) {\n        if (type instanceof Class\u003c?\u003e) {\n            final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n            return cls.isArray() ? cls.getComponentType() : null;\n        }\n        if (type instanceof GenericArrayType) {\n            return ((GenericArrayType) type).getGenericComponentType();\n        }\n        return null;\n    }",
    "begin_line": 607,
    "end_line": 616,
    "comment": "/** \n * Gets the array component type of  {@code type}.\n * @param type the type to be checked\n * @return component type or null if type is not an array type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getClosestParentType#626",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Type getClosestParentType(final Class\u003c?\u003e cls, final Class\u003c?\u003e superClass) {\n        // only look at the interfaces if the super class is also an interface\n        if (superClass.isInterface()) {\n            // get the generic interfaces of the subject class\n            final Type[] interfaceTypes \u003d cls.getGenericInterfaces();\n            // will hold the best generic interface match found\n            Type genericInterface \u003d null;\n\n            // find the interface closest to the super class\n            for (final Type midType : interfaceTypes) {\n                final Class\u003c?\u003e midClass;\n\n                if (midType instanceof ParameterizedType) {\n                    midClass \u003d getRawType((ParameterizedType) midType);\n                } else if (midType instanceof Class\u003c?\u003e) {\n                    midClass \u003d (Class\u003c?\u003e) midType;\n                } else {\n                    throw new IllegalStateException(\"Unexpected generic\"\n                            + \" interface type found: \" + midType);\n                }\n\n                // check if this interface is further up the inheritance chain\n                // than the previously found match\n                if (isAssignable(midClass, superClass)\n                        \u0026\u0026 isAssignable(genericInterface, (Type) midClass)) {\n                    genericInterface \u003d midType;\n                }\n            }\n\n            // found a match?\n            if (genericInterface !\u003d null) {\n                return genericInterface;\n            }\n        }\n\n        // none of the interfaces were descendants of the target class, so the\n        // super class has to be one, instead\n        return cls.getGenericSuperclass();\n    }",
    "begin_line": 626,
    "end_line": 664,
    "comment": "/** \n * Gets the closest parent type to the super class specified by  {@code superClass}.\n * @param cls the class in question\n * @param superClass the super class\n * @return the closes parent type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getImplicitBounds#676",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getImplicitBounds(java.lang.reflect.TypeVariable\u003c?\u003e)",
    "snippet": "public static Type[] getImplicitBounds(final TypeVariable\u003c?\u003e typeVariable) {\n        Objects.requireNonNull(typeVariable, \"typeVariable\");\n        final Type[] bounds \u003d typeVariable.getBounds();\n\n        return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n    }",
    "begin_line": 676,
    "end_line": 681,
    "comment": "/** \n * Gets an array containing the sole type of  {@link Object} if{@link TypeVariable#getBounds()} returns an empty array. Otherwise, itreturns the result of  {@link TypeVariable#getBounds()} passed into{@link #normalizeUpperBounds}.\n * @param typeVariable the subject type variable, not {@code null}\n * @return a non-empty array containing the bounds of the type variable.\n * @throws NullPointerException if {@code typeVariable} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getImplicitLowerBounds#693",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(java.lang.reflect.WildcardType)",
    "snippet": "public static Type[] getImplicitLowerBounds(final WildcardType wildcardType) {\n        Objects.requireNonNull(wildcardType, \"wildcardType\");\n        final Type[] bounds \u003d wildcardType.getLowerBounds();\n\n        return bounds.length \u003d\u003d 0 ? new Type[] { null } : bounds;\n    }",
    "begin_line": 693,
    "end_line": 698,
    "comment": "/** \n * Gets an array containing a single value of  {@code null} if{@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,it returns the result of  {@link WildcardType#getLowerBounds()}.\n * @param wildcardType the subject wildcard type, not {@code null}\n * @return a non-empty array containing the lower bounds of the wildcardtype.\n * @throws NullPointerException if {@code wildcardType} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getImplicitUpperBounds#711",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(java.lang.reflect.WildcardType)",
    "snippet": "public static Type[] getImplicitUpperBounds(final WildcardType wildcardType) {\n        Objects.requireNonNull(wildcardType, \"wildcardType\");\n        final Type[] bounds \u003d wildcardType.getUpperBounds();\n\n        return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n    }",
    "begin_line": 711,
    "end_line": 716,
    "comment": "/** \n * Gets an array containing the sole value of  {@link Object} if{@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,it returns the result of  {@link WildcardType#getUpperBounds()}passed into  {@link #normalizeUpperBounds}.\n * @param wildcardType the subject wildcard type, not {@code null}\n * @return a non-empty array containing the upper bounds of the wildcardtype.\n * @throws NullPointerException if {@code wildcardType} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getRawType#725",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.ParameterizedType)",
    "snippet": "private static Class\u003c?\u003e getRawType(final ParameterizedType parameterizedType) {\n        final Type rawType \u003d parameterizedType.getRawType();\n\n        // check if raw type is a Class object\n        // not currently necessary, but since the return type is Type instead of\n        // Class, there\u0027s enough reason to believe that future versions of Java\n        // may return other Type implementations. And type-safety checking is\n        // rarely a bad idea.\n        if (!(rawType instanceof Class\u003c?\u003e)) {\n            throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\n        }\n\n        return (Class\u003c?\u003e) rawType;\n    }",
    "begin_line": 725,
    "end_line": 738,
    "comment": "/** \n * Transforms the passed in type to a  {@link Class} object. Type-checking method of convenience.\n * @param parameterizedType the type to be converted\n * @return the corresponding {@link Class} object\n * @throws IllegalStateException if the conversion fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getRawType#752",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.Type, java.lang.reflect.Type)",
    "snippet": "public static Class\u003c?\u003e getRawType(final Type type, final Type assigningType) {\n        if (type instanceof Class\u003c?\u003e) {\n            // it is raw, no problem\n            return (Class\u003c?\u003e) type;\n        }\n\n        if (type instanceof ParameterizedType) {\n            // simple enough to get the raw type of a ParameterizedType\n            return getRawType((ParameterizedType) type);\n        }\n\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            if (assigningType \u003d\u003d null) {\n                return null;\n            }\n\n            // get the entity declaring this type variable\n            final Object genericDeclaration \u003d ((TypeVariable\u003c?\u003e) type).getGenericDeclaration();\n\n            // can\u0027t get the raw type of a method- or constructor-declared type\n            // variable\n            if (!(genericDeclaration instanceof Class\u003c?\u003e)) {\n                return null;\n            }\n\n            // get the type arguments for the declaring class/interface based\n            // on the enclosing type\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d getTypeArguments(assigningType,\n                    (Class\u003c?\u003e) genericDeclaration);\n\n            // enclosingType has to be a subclass (or subinterface) of the\n            // declaring type\n            if (typeVarAssigns \u003d\u003d null) {\n                return null;\n            }\n\n            // get the argument assigned to this type variable\n            final Type typeArgument \u003d typeVarAssigns.get(type);\n\n            if (typeArgument \u003d\u003d null) {\n                return null;\n            }\n\n            // get the argument for this type variable\n            return getRawType(typeArgument, assigningType);\n        }\n\n        if (type instanceof GenericArrayType) {\n            // get raw component type\n            final Class\u003c?\u003e rawComponentType \u003d getRawType(((GenericArrayType) type)\n                    .getGenericComponentType(), assigningType);\n\n            // create array type from raw component type and return its class\n            return Array.newInstance(rawComponentType, 0).getClass();\n        }\n\n        // (hand-waving) this is not the method you\u0027re looking for\n        if (type instanceof WildcardType) {\n            return null;\n        }\n\n        throw new IllegalArgumentException(\"unknown type: \" + type);\n    }",
    "begin_line": 752,
    "end_line": 814,
    "comment": "/** \n * Gets the raw type of a Java type, given its context. Primarily for use with  {@link TypeVariable}s and  {@link GenericArrayType}s, or when you do not know the runtime type of  {@code type}: if you know you have a {@link Class} instance, it is already raw; if you know you have a{@link ParameterizedType}, its raw type is only a method call away.\n * @param type to resolve\n * @param assigningType type to be resolved against\n * @return the resolved {@link Class} object or {@code null} ifthe type could not be resolved\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getTypeArguments#824",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static Map\u003cTypeVariable\u003c?\u003e, Type\u003e getTypeArguments(Class\u003c?\u003e cls, final Class\u003c?\u003e toClass,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e subtypeVarAssigns) {\n        // make sure they\u0027re assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can\u0027t work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap\u003c\u003e();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls \u003d ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it\u0027s null\n        final HashMap\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d subtypeVarAssigns \u003d\u003d null ? new HashMap\u003c\u003e()\n                : new HashMap\u003c\u003e(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }",
    "begin_line": 824,
    "end_line": 855,
    "comment": "/** \n * Gets a map of the type arguments of a class in the context of  {@code toClass}.\n * @param cls the class in question\n * @param toClass the context class\n * @param subtypeVarAssigns a map with type variables\n * @return the {@link Map} with type arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getTypeArguments#869",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType)",
    "snippet": "public static Map\u003cTypeVariable\u003c?\u003e, Type\u003e getTypeArguments(final ParameterizedType type) {\n        return getTypeArguments(type, getRawType(type), null);\n    }",
    "begin_line": 869,
    "end_line": 871,
    "comment": "/** \n * Gets all the type arguments for this parameterized type including owner hierarchy arguments such as {@code Outer\u003cK, V\u003e.Inner\u003cT\u003e.DeepInner\u003cE\u003e} .The arguments are returned in a {@link Map} specifying the argument type for each {@link TypeVariable}.\n * @param type specifies the subject parameterized type from which toharvest the parameters.\n * @return a {@link Map} of the type arguments to their respective typevariables.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getTypeArguments#881",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static Map\u003cTypeVariable\u003c?\u003e, Type\u003e getTypeArguments(\n            final ParameterizedType parameterizedType, final Class\u003c?\u003e toClass,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e subtypeVarAssigns) {\n        final Class\u003c?\u003e cls \u003d getRawType(parameterizedType);\n\n        // make sure they\u0027re assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        final Type ownerType \u003d parameterizedType.getOwnerType();\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns;\n\n        if (ownerType instanceof ParameterizedType) {\n            // get the owner type arguments first\n            final ParameterizedType parameterizedOwnerType \u003d (ParameterizedType) ownerType;\n            typeVarAssigns \u003d getTypeArguments(parameterizedOwnerType,\n                    getRawType(parameterizedOwnerType), subtypeVarAssigns);\n        } else {\n            // no owner, prep the type variable assignments map\n            typeVarAssigns \u003d subtypeVarAssigns \u003d\u003d null ? new HashMap\u003c\u003e()\n                    : new HashMap\u003c\u003e(subtypeVarAssigns);\n        }\n\n        // get the subject parameterized type\u0027s arguments\n        final Type[] typeArgs \u003d parameterizedType.getActualTypeArguments();\n        // and get the corresponding type variables from the raw class\n        final TypeVariable\u003c?\u003e[] typeParams \u003d cls.getTypeParameters();\n\n        // map the arguments to their respective type variables\n        for (int i \u003d 0; i \u003c typeParams.length; i++) {\n            final Type typeArg \u003d typeArgs[i];\n            typeVarAssigns.put(\n                    typeParams[i],\n                    typeVarAssigns.getOrDefault(typeArg, typeArg)\n            );\n        }\n\n        if (toClass.equals(cls)) {\n            // target class has been reached. Done.\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }",
    "begin_line": 881,
    "end_line": 926,
    "comment": "/** \n * Gets a map of the type arguments of a parameterized type in the context of  {@code toClass}.\n * @param parameterizedType the parameterized type\n * @param toClass the class\n * @param subtypeVarAssigns a map with type variables\n * @return the {@link Map} with type arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getTypeArguments#966",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Map\u003cTypeVariable\u003c?\u003e, Type\u003e getTypeArguments(final Type type, final Class\u003c?\u003e toClass) {\n        return getTypeArguments(type, toClass, null);\n    }",
    "begin_line": 966,
    "end_line": 968,
    "comment": "/** \n * Gets the type arguments of a class/interface based on a subtype. For instance, this method will determine that both of the parameters for the interface  {@link Map} are {@link Object} for the subtype{@link java.util.Properties Properties} even though the subtype does notdirectly implement the  {@link Map} interface.\u003cp\u003e This method returns  {@code null} if {@code type} is not assignable to{@code toClass}. It returns an empty map if none of the classes or interfaces in its inheritance hierarchy specify any type arguments. \u003c/p\u003e \u003cp\u003e A side effect of this method is that it also retrieves the type arguments for the classes and interfaces that are part of the hierarchy between  {@code type} and {@code toClass}. So with the above example, this method will also determine that the type arguments for {@link java.util.Hashtable Hashtable} are also both {@link Object}. In cases where the interface specified by  {@code toClass} is(indirectly) implemented more than once (e.g. where  {@code toClass}specifies the interface  {@link java.lang.Iterable Iterable} and{@code type} specifies a parameterized type that implements both{@link java.util.Set Set} and {@link java.util.Collection Collection}), this method will look at the inheritance hierarchy of only one of the implementations/subclasses; the first interface encountered that isn\u0027t a subinterface to one of the others in the  {@code type} to{@code toClass} hierarchy.\u003c/p\u003e\n * @param type the type from which to determine the type parameters of{@code toClass}\n * @param toClass the class whose type parameters are to be determined basedon the subtype  {@code type}\n * @return a {@link Map} of the type assignments for the type variables ineach type in the inheritance hierarchy from  {@code type} to{@code toClass} inclusive.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.getTypeArguments#978",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static Map\u003cTypeVariable\u003c?\u003e, Type\u003e getTypeArguments(final Type type, final Class\u003c?\u003e toClass,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e subtypeVarAssigns) {\n        if (type instanceof Class\u003c?\u003e) {\n            return getTypeArguments((Class\u003c?\u003e) type, toClass, subtypeVarAssigns);\n        }\n\n        if (type instanceof ParameterizedType) {\n            return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\n        }\n\n        if (type instanceof GenericArrayType) {\n            return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\n                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);\n        }\n\n        // since wildcard types are not assignable to classes, should this just\n        // return null?\n        if (type instanceof WildcardType) {\n            for (final Type bound : getImplicitUpperBounds((WildcardType) type)) {\n                // find the first bound that is assignable to the target class\n                if (isAssignable(bound, toClass)) {\n                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n                }\n            }\n\n            return null;\n        }\n\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            for (final Type bound : getImplicitBounds((TypeVariable\u003c?\u003e) type)) {\n                // find the first bound that is assignable to the target class\n                if (isAssignable(bound, toClass)) {\n                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n                }\n            }\n\n            return null;\n        }\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }",
    "begin_line": 978,
    "end_line": 1017,
    "comment": "/** \n * Gets a map of the type arguments of  {@code type} in the context of {@code toClass}.\n * @param type the type in question\n * @param toClass the class\n * @param subtypeVarAssigns a map with type variables\n * @return the {@link Map} with type arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isArrayType#1025",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isArrayType(java.lang.reflect.Type)",
    "snippet": "public static boolean isArrayType(final Type type) {\n        return type instanceof GenericArrayType || type instanceof Class\u003c?\u003e \u0026\u0026 ((Class\u003c?\u003e) type).isArray();\n    }",
    "begin_line": 1025,
    "end_line": 1027,
    "comment": "/** \n * Tests whether the specified type denotes an array type.\n * @param type the type to be checked\n * @return {@code true} if {@code type} is an array class or a {@link GenericArrayType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1037",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class\u003c?\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final Class\u003c?\u003e toClass) {\n        if (type \u003d\u003d null) {\n            // consistency with ClassUtils.isAssignable() behavior\n            return toClass \u003d\u003d null || !toClass.isPrimitive();\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toClass \u003d\u003d null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toClass.equals(type)) {\n            return true;\n        }\n\n        if (type instanceof Class\u003c?\u003e) {\n            // just comparing two classes\n            return ClassUtils.isAssignable((Class\u003c?\u003e) type, toClass);\n        }\n\n        if (type instanceof ParameterizedType) {\n            // only have to compare the raw type to the class\n            return isAssignable(getRawType((ParameterizedType) type), toClass);\n        }\n\n        // *\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            // if any of the bounds are assignable to the class, then the\n            // type is assignable to the class.\n            for (final Type bound : ((TypeVariable\u003c?\u003e) type).getBounds()) {\n                if (isAssignable(bound, toClass)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        // the only classes to which a generic array type can be assigned\n        // are class Object and array classes\n        if (type instanceof GenericArrayType) {\n            return toClass.equals(Object.class)\n                    || toClass.isArray()\n                    \u0026\u0026 isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\n                            .getComponentType());\n        }\n\n        // wildcard types are not assignable to a class (though one would think\n        // \"? super Object\" would be assignable to Object)\n        if (type instanceof WildcardType) {\n            return false;\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }",
    "begin_line": 1037,
    "end_line": 1093,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target class following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toClass the target class\n * @return {@code true} if {@code type} is assignable to {@code toClass}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1105",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final GenericArrayType toGenericArrayType,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (type \u003d\u003d null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toGenericArrayType \u003d\u003d null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toGenericArrayType.equals(type)) {\n            return true;\n        }\n\n        final Type toComponentType \u003d toGenericArrayType.getGenericComponentType();\n\n        if (type instanceof Class\u003c?\u003e) {\n            final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n\n            // compare the component types\n            return cls.isArray()\n                    \u0026\u0026 isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\n        }\n\n        if (type instanceof GenericArrayType) {\n            // compare the component types\n            return isAssignable(((GenericArrayType) type).getGenericComponentType(),\n                    toComponentType, typeVarAssigns);\n        }\n\n        if (type instanceof WildcardType) {\n            // so long as one of the upper bounds is assignable, it\u0027s good\n            for (final Type bound : getImplicitUpperBounds((WildcardType) type)) {\n                if (isAssignable(bound, toGenericArrayType)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            // probably should remove the following logic and just return false.\n            // type variables cannot specify arrays as bounds.\n            for (final Type bound : getImplicitBounds((TypeVariable\u003c?\u003e) type)) {\n                if (isAssignable(bound, toGenericArrayType)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        if (type instanceof ParameterizedType) {\n            // the raw type of a parameterized type is never an array or\n            // generic array, otherwise the declaration would look like this:\n            // Collection[]\u003c ? extends String \u003e collection;\n            return false;\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }",
    "begin_line": 1105,
    "end_line": 1169,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target generic array type following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toGenericArrayType the target generic array type\n * @param typeVarAssigns a map with type variables\n * @return {@code true} if {@code type} is assignable to{@code toGenericArrayType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1180",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final ParameterizedType toParameterizedType,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (type \u003d\u003d null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType \u003d\u003d null) {\n            return false;\n        }\n\n        // cannot cast an array type to a parameterized type.\n        if (type instanceof GenericArrayType) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type\u0027s raw type\n        final Class\u003c?\u003e toClass \u003d getRawType(toParameterizedType);\n        // get the subject type\u0027s type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e fromTypeVarAssigns \u003d getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns \u003d\u003d null) {\n            return false;\n        }\n\n        // compatible types, but there\u0027s no type arguments. this is equivalent\n        // to comparing Map\u003c ?, ? \u003e to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type\u0027s type arguments including owner type arguments\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e toTypeVarAssigns \u003d getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (final TypeVariable\u003c?\u003e var : toTypeVarAssigns.keySet()) {\n            final Type toTypeArg \u003d unrollVariableAssignments(var, toTypeVarAssigns);\n            final Type fromTypeArg \u003d unrollVariableAssignments(var, fromTypeVarAssigns);\n\n            if (toTypeArg \u003d\u003d null \u0026\u0026 fromTypeArg instanceof Class) {\n                continue;\n            }\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg !\u003d null \u0026\u0026 toTypeArg !\u003d null\n                    \u0026\u0026 !toTypeArg.equals(fromTypeArg)\n                    \u0026\u0026 !(toTypeArg instanceof WildcardType \u0026\u0026 isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 1180,
    "end_line": 1244,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target parameterized type following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toParameterizedType the target parameterized type\n * @param typeVarAssigns a map with type variables\n * @return {@code true} if {@code type} is assignable to {@code toType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1256",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)",
    "snippet": "public static boolean isAssignable(final Type type, final Type toType) {\n        return isAssignable(type, toType, null);\n    }",
    "begin_line": 1256,
    "end_line": 1258,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target type following the Java generics rules. If both types are  {@link Class}objects, the method returns the result of {@link ClassUtils#isAssignable(Class,Class)}.\n * @param type the subject type to be assigned to the target type\n * @param toType the target type\n * @return {@code true} if {@code type} is assignable to {@code toType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1269",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final Type toType,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (toType \u003d\u003d null || toType instanceof Class\u003c?\u003e) {\n            return isAssignable(type, (Class\u003c?\u003e) toType);\n        }\n\n        if (toType instanceof ParameterizedType) {\n            return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\n        }\n\n        if (toType instanceof GenericArrayType) {\n            return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\n        }\n\n        if (toType instanceof WildcardType) {\n            return isAssignable(type, (WildcardType) toType, typeVarAssigns);\n        }\n\n        if (toType instanceof TypeVariable\u003c?\u003e) {\n            return isAssignable(type, (TypeVariable\u003c?\u003e) toType, typeVarAssigns);\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + toType);\n    }",
    "begin_line": 1269,
    "end_line": 1292,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target type following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toType the target type\n * @param typeVarAssigns optional map of type variable assignments\n * @return {@code true} if {@code type} is assignable to {@code toType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1304",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.TypeVariable\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final TypeVariable\u003c?\u003e toTypeVariable,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (type \u003d\u003d null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toTypeVariable \u003d\u003d null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toTypeVariable.equals(type)) {\n            return true;\n        }\n\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            // a type variable is assignable to another type variable, if\n            // and only if the former is the latter, extends the latter, or\n            // is otherwise a descendant of the latter.\n            final Type[] bounds \u003d getImplicitBounds((TypeVariable\u003c?\u003e) type);\n\n            for (final Type bound : bounds) {\n                if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {\n                    return true;\n                }\n            }\n        }\n\n        if (type instanceof Class\u003c?\u003e || type instanceof ParameterizedType\n                || type instanceof GenericArrayType || type instanceof WildcardType) {\n            return false;\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }",
    "begin_line": 1304,
    "end_line": 1340,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target type variable following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toTypeVariable the target type variable\n * @param typeVarAssigns a map with type variables\n * @return {@code true} if {@code type} is assignable to{@code toTypeVariable}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isAssignable#1352",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static boolean isAssignable(final Type type, final WildcardType toWildcardType,\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (type \u003d\u003d null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toWildcardType \u003d\u003d null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toWildcardType.equals(type)) {\n            return true;\n        }\n\n        final Type[] toUpperBounds \u003d getImplicitUpperBounds(toWildcardType);\n        final Type[] toLowerBounds \u003d getImplicitLowerBounds(toWildcardType);\n\n        if (type instanceof WildcardType) {\n            final WildcardType wildcardType \u003d (WildcardType) type;\n            final Type[] upperBounds \u003d getImplicitUpperBounds(wildcardType);\n            final Type[] lowerBounds \u003d getImplicitLowerBounds(wildcardType);\n\n            for (Type toBound : toUpperBounds) {\n                // if there are assignments for unresolved type variables,\n                // now\u0027s the time to substitute them.\n                toBound \u003d substituteTypeVariables(toBound, typeVarAssigns);\n\n                // each upper bound of the subject type has to be assignable to\n                // each\n                // upper bound of the target type\n                for (final Type bound : upperBounds) {\n                    if (!isAssignable(bound, toBound, typeVarAssigns)) {\n                        return false;\n                    }\n                }\n            }\n\n            for (Type toBound : toLowerBounds) {\n                // if there are assignments for unresolved type variables,\n                // now\u0027s the time to substitute them.\n                toBound \u003d substituteTypeVariables(toBound, typeVarAssigns);\n\n                // each lower bound of the target type has to be assignable to\n                // each\n                // lower bound of the subject type\n                for (final Type bound : lowerBounds) {\n                    if (!isAssignable(toBound, bound, typeVarAssigns)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        for (final Type toBound : toUpperBounds) {\n            // if there are assignments for unresolved type variables,\n            // now\u0027s the time to substitute them.\n            if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\n                    typeVarAssigns)) {\n                return false;\n            }\n        }\n\n        for (final Type toBound : toLowerBounds) {\n            // if there are assignments for unresolved type variables,\n            // now\u0027s the time to substitute them.\n            if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\n                    typeVarAssigns)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 1352,
    "end_line": 1427,
    "comment": "/** \n * Tests if the subject type may be implicitly cast to the target wildcard type following the Java generics rules.\n * @param type the subject type to be assigned to the target type\n * @param toWildcardType the target wildcard type\n * @param typeVarAssigns a map with type variables\n * @return {@code true} if {@code type} is assignable to{@code toWildcardType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.isInstance#1437",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.isInstance(java.lang.Object, java.lang.reflect.Type)",
    "snippet": "public static boolean isInstance(final Object value, final Type type) {\n        if (type \u003d\u003d null) {\n            return false;\n        }\n\n        return value \u003d\u003d null ? !(type instanceof Class\u003c?\u003e) || !((Class\u003c?\u003e) type).isPrimitive()\n                : isAssignable(value.getClass(), type, null);\n    }",
    "begin_line": 1437,
    "end_line": 1444,
    "comment": "/** \n * Tests if the given value can be assigned to the target type following the Java generics rules.\n * @param value the value to be checked\n * @param type the target type\n * @return {@code true} if {@code value} is an instance of {@code type}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.mapTypeVariablesToArguments#1454",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.mapTypeVariablesToArguments(java.lang.Class\u003cT\u003e, java.lang.reflect.ParameterizedType, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static \u003cT\u003e void mapTypeVariablesToArguments(final Class\u003cT\u003e cls,\n            final ParameterizedType parameterizedType, final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        // capture the type variables from the owner type that have assignments\n        final Type ownerType \u003d parameterizedType.getOwnerType();\n\n        if (ownerType instanceof ParameterizedType) {\n            // recursion to make sure the owner\u0027s owner type gets processed\n            mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);\n        }\n\n        // parameterizedType is a generic interface/class (or it\u0027s in the owner\n        // hierarchy of said interface/class) implemented/extended by the class\n        // cls. Find out which type variables of cls are type arguments of\n        // parameterizedType:\n        final Type[] typeArgs \u003d parameterizedType.getActualTypeArguments();\n\n        // of the cls\u0027s type variables that are arguments of parameterizedType,\n        // find out which ones can be determined from the super type\u0027s arguments\n        final TypeVariable\u003c?\u003e[] typeVars \u003d getRawType(parameterizedType).getTypeParameters();\n\n        // use List view of type parameters of cls so the contains() method can be used:\n        final List\u003cTypeVariable\u003cClass\u003cT\u003e\u003e\u003e typeVarList \u003d Arrays.asList(cls\n                .getTypeParameters());\n\n        for (int i \u003d 0; i \u003c typeArgs.length; i++) {\n            final TypeVariable\u003c?\u003e typeVar \u003d typeVars[i];\n            final Type typeArg \u003d typeArgs[i];\n\n            // argument of parameterizedType is a type variable of cls\n            if (typeVarList.contains(typeArg)\n            // type variable of parameterizedType has an assignment in\n                    // the super type.\n                    \u0026\u0026 typeVarAssigns.containsKey(typeVar)) {\n                // map the assignment to the cls\u0027s type variable\n                typeVarAssigns.put((TypeVariable\u003c?\u003e) typeArg, typeVarAssigns.get(typeVar));\n            }\n        }\n    }",
    "begin_line": 1454,
    "end_line": 1491,
    "comment": "/** \n * Maps type variables.\n * @param \u003c T \u003e the generic type of the class in question\n * @param cls the class in question\n * @param parameterizedType the parameterized type\n * @param typeVarAssigns the map to be filled\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.normalizeUpperBounds#1518",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[])",
    "snippet": "public static Type[] normalizeUpperBounds(final Type[] bounds) {\n        Objects.requireNonNull(bounds, \"bounds\");\n        // don\u0027t bother if there\u0027s only one (or none) type\n        if (bounds.length \u003c 2) {\n            return bounds;\n        }\n\n        final Set\u003cType\u003e types \u003d new HashSet\u003c\u003e(bounds.length);\n\n        for (final Type type1 : bounds) {\n            boolean subtypeFound \u003d false;\n\n            for (final Type type2 : bounds) {\n                if (type1 !\u003d type2 \u0026\u0026 isAssignable(type2, type1, null)) {\n                    subtypeFound \u003d true;\n                    break;\n                }\n            }\n\n            if (!subtypeFound) {\n                types.add(type1);\n            }\n        }\n\n        return types.toArray(ArrayUtils.EMPTY_TYPE_ARRAY);\n    }",
    "begin_line": 1518,
    "end_line": 1543,
    "comment": "/** \n * Strips out the redundant upper bound types in type variable types and wildcard types (or it would with wildcard types if multiple upper bounds were allowed). \u003cp\u003e Example, with the variable type declaration: \u003c/p\u003e \u003cpre\u003e\u0026lt;K extends java.util.Collection\u0026lt;String\u0026gt; \u0026amp; java.util.List\u0026lt;String\u0026gt;\u0026gt;\u003c/pre\u003e \u003cp\u003e since  {@link List} is a subinterface of {@link Collection}, this method will return the bounds as if the declaration had been: \u003c/p\u003e \u003cpre\u003e\u0026lt;K extends java.util.List\u0026lt;String\u0026gt;\u0026gt;\u003c/pre\u003e\n * @param bounds an array of types representing the upper bounds of either{@link WildcardType} or {@link TypeVariable}, not  {@code null}.\n * @return an array containing the values from {@code bounds} minus theredundant types.\n * @throws NullPointerException if {@code bounds} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.parameterize#1554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.parameterize(java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "public static final ParameterizedType parameterize(final Class\u003c?\u003e rawClass,\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVariableMap) {\n        Objects.requireNonNull(rawClass, \"rawClass\");\n        Objects.requireNonNull(typeVariableMap, \"typeVariableMap\");\n        return parameterizeWithOwner(null, rawClass,\n            extractTypeArgumentsFrom(typeVariableMap, rawClass.getTypeParameters()));\n    }",
    "begin_line": 1554,
    "end_line": 1560,
    "comment": "/** \n * Creates a parameterized type instance.\n * @param rawClass the raw class to create a parameterized type instance for\n * @param typeVariableMap the map used for parameterization\n * @return {@link ParameterizedType}\n * @throws NullPointerException if either {@code rawClass} or {@code typeVariableMap} is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.parameterize#1571",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.parameterize(java.lang.Class\u003c?\u003e, java.lang.reflect.Type)",
    "snippet": "public static final ParameterizedType parameterize(final Class\u003c?\u003e rawClass, final Type... typeArguments) {\n        return parameterizeWithOwner(null, rawClass, typeArguments);\n    }",
    "begin_line": 1571,
    "end_line": 1573,
    "comment": "/** \n * Creates a parameterized type instance.\n * @param rawClass the raw class to create a parameterized type instance for\n * @param typeArguments the types used for parameterization\n * @return {@link ParameterizedType}\n * @throws NullPointerException if {@code rawClass} is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.parameterizedTypeToString#1582",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
    "snippet": "private static String parameterizedTypeToString(final ParameterizedType parameterizedType) {\n        final StringBuilder builder \u003d new StringBuilder();\n\n        final Type useOwner \u003d parameterizedType.getOwnerType();\n        final Class\u003c?\u003e raw \u003d (Class\u003c?\u003e) parameterizedType.getRawType();\n\n        if (useOwner \u003d\u003d null) {\n            builder.append(raw.getName());\n        } else {\n            if (useOwner instanceof Class\u003c?\u003e) {\n                builder.append(((Class\u003c?\u003e) useOwner).getName());\n            } else {\n                builder.append(useOwner.toString());\n            }\n            builder.append(\u0027.\u0027).append(raw.getSimpleName());\n        }\n\n        final int[] recursiveTypeIndexes \u003d findRecursiveTypes(parameterizedType);\n\n        if (recursiveTypeIndexes.length \u003e 0) {\n            appendRecursiveTypes(builder, recursiveTypeIndexes, parameterizedType.getActualTypeArguments());\n        } else {\n            appendAllTo(builder.append(\u0027\u003c\u0027), \", \", parameterizedType.getActualTypeArguments()).append(\u0027\u003e\u0027);\n        }\n\n        return builder.toString();\n    }",
    "begin_line": 1582,
    "end_line": 1608,
    "comment": "/** \n * Formats a  {@link ParameterizedType} as a {@link String}.\n * @param parameterizedType {@link ParameterizedType} to format\n * @return String\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.parameterizeWithOwner#1621",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "public static final ParameterizedType parameterizeWithOwner(final Type owner, final Class\u003c?\u003e rawClass,\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVariableMap) {\n        Objects.requireNonNull(rawClass, \"rawClass\");\n        Objects.requireNonNull(typeVariableMap, \"typeVariableMap\");\n        return parameterizeWithOwner(owner, rawClass,\n            extractTypeArgumentsFrom(typeVariableMap, rawClass.getTypeParameters()));\n    }",
    "begin_line": 1621,
    "end_line": 1627,
    "comment": "/** \n * Creates a parameterized type instance.\n * @param owner the owning type\n * @param rawClass the raw class to create a parameterized type instance for\n * @param typeVariableMap the map used for parameterization\n * @return {@link ParameterizedType}\n * @throws NullPointerException if either {@code rawClass} or {@code typeVariableMap}is  {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.parameterizeWithOwner#1640",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class\u003c?\u003e, java.lang.reflect.Type)",
    "snippet": "public static final ParameterizedType parameterizeWithOwner(final Type owner, final Class\u003c?\u003e rawClass,\n        final Type... typeArguments) {\n        Objects.requireNonNull(rawClass, \"rawClass\");\n        final Type useOwner;\n        if (rawClass.getEnclosingClass() \u003d\u003d null) {\n            Validate.isTrue(owner \u003d\u003d null, \"no owner allowed for top-level %s\", rawClass);\n            useOwner \u003d null;\n        } else if (owner \u003d\u003d null) {\n            useOwner \u003d rawClass.getEnclosingClass();\n        } else {\n            Validate.isTrue(isAssignable(owner, rawClass.getEnclosingClass()),\n                \"%s is invalid owner type for parameterized %s\", owner, rawClass);\n            useOwner \u003d owner;\n        }\n        Validate.noNullElements(typeArguments, \"null type argument at index %s\");\n        Validate.isTrue(rawClass.getTypeParameters().length \u003d\u003d typeArguments.length,\n            \"invalid number of type parameters specified: expected %d, got %d\", rawClass.getTypeParameters().length,\n            typeArguments.length);\n\n        return new ParameterizedTypeImpl(rawClass, useOwner, typeArguments);\n    }",
    "begin_line": 1640,
    "end_line": 1660,
    "comment": "/** \n * Creates a parameterized type instance.\n * @param owner the owning type\n * @param rawClass the raw class to create a parameterized type instance for\n * @param typeArguments the types used for parameterization\n * @return {@link ParameterizedType}\n * @throws NullPointerException if {@code rawClass} is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.substituteTypeVariables#1670",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static Type substituteTypeVariables(final Type type, final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        if (type instanceof TypeVariable\u003c?\u003e \u0026\u0026 typeVarAssigns !\u003d null) {\n            final Type replacementType \u003d typeVarAssigns.get(type);\n\n            if (replacementType \u003d\u003d null) {\n                throw new IllegalArgumentException(\"missing assignment type for type variable \"\n                        + type);\n            }\n            return replacementType;\n        }\n        return type;\n    }",
    "begin_line": 1670,
    "end_line": 1681,
    "comment": "/** \n * Finds the mapping for  {@code type} in {@code typeVarAssigns}.\n * @param type the type to be replaced\n * @param typeVarAssigns the map with type variables\n * @return the replaced type\n * @throws IllegalArgumentException if the type cannot be substituted\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.toLongString#1691",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toLongString(java.lang.reflect.TypeVariable\u003c?\u003e)",
    "snippet": "public static String toLongString(final TypeVariable\u003c?\u003e typeVariable) {\n        Objects.requireNonNull(typeVariable, \"typeVariable\");\n        final StringBuilder buf \u003d new StringBuilder();\n        final GenericDeclaration d \u003d typeVariable.getGenericDeclaration();\n        if (d instanceof Class\u003c?\u003e) {\n            Class\u003c?\u003e c \u003d (Class\u003c?\u003e) d;\n            while (true) {\n                if (c.getEnclosingClass() \u003d\u003d null) {\n                    buf.insert(0, c.getName());\n                    break;\n                }\n                buf.insert(0, c.getSimpleName()).insert(0, \u0027.\u0027);\n                c \u003d c.getEnclosingClass();\n            }\n        } else if (d instanceof Type) {// not possible as of now\n            buf.append(toString((Type) d));\n        } else {\n            buf.append(d);\n        }\n        return buf.append(\u0027:\u0027).append(typeVariableToString(typeVariable)).toString();\n    }",
    "begin_line": 1691,
    "end_line": 1711,
    "comment": "/** \n * Formats a  {@link TypeVariable} including its {@link GenericDeclaration}.\n * @param typeVariable the type variable to create a String representation for, not {@code null}\n * @return String\n * @throws NullPointerException if {@code typeVariable} is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.toString#1713",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toString(T)",
    "snippet": "private static \u003cT\u003e String toString(final T object) {\n        return object instanceof Type ? toString((Type) object) : object.toString();\n    }",
    "begin_line": 1713,
    "end_line": 1715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.toString#1725",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.toString(java.lang.reflect.Type)",
    "snippet": "public static String toString(final Type type) {\n        Objects.requireNonNull(type, \"type\");\n        if (type instanceof Class\u003c?\u003e) {\n            return classToString((Class\u003c?\u003e) type);\n        }\n        if (type instanceof ParameterizedType) {\n            return parameterizedTypeToString((ParameterizedType) type);\n        }\n        if (type instanceof WildcardType) {\n            return wildcardTypeToString((WildcardType) type);\n        }\n        if (type instanceof TypeVariable\u003c?\u003e) {\n            return typeVariableToString((TypeVariable\u003c?\u003e) type);\n        }\n        if (type instanceof GenericArrayType) {\n            return genericArrayTypeToString((GenericArrayType) type);\n        }\n        throw new IllegalArgumentException(ObjectUtils.identityToString(type));\n    }",
    "begin_line": 1725,
    "end_line": 1743,
    "comment": "/** \n * Formats a given type as a Java-esque String.\n * @param type the type to create a String representation for, not {@code null}\n * @return String\n * @throws NullPointerException if {@code type} is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.typesSatisfyVariables#1759",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.typesSatisfyVariables(java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "public static boolean typesSatisfyVariables(final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVariableMap) {\n        Objects.requireNonNull(typeVariableMap, \"typeVariableMap\");\n        // all types must be assignable to all the bounds of their mapped\n        // type variable.\n        for (final Map.Entry\u003cTypeVariable\u003c?\u003e, Type\u003e entry : typeVariableMap.entrySet()) {\n            final TypeVariable\u003c?\u003e typeVar \u003d entry.getKey();\n            final Type type \u003d entry.getValue();\n\n            for (final Type bound : getImplicitBounds(typeVar)) {\n                if (!isAssignable(type, substituteTypeVariables(bound, typeVariableMap),\n                        typeVariableMap)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }",
    "begin_line": 1759,
    "end_line": 1775,
    "comment": "/** \n * Determines whether or not specified types satisfy the bounds of their mapped type variables. When a type parameter extends another (such as {@code \u003cT, S extends T\u003e}), uses another as a type parameter (such as {@code \u003cT, S extends Comparable\u003e\u003e}), or otherwise depends on another type variable to be specified, the dependencies must be included in  {@code typeVarAssigns}.\n * @param typeVariableMap specifies the potential types to be assigned to thetype variables, not  {@code null}.\n * @return whether or not the types can be assigned to their respective typevariables.\n * @throws NullPointerException if {@code typeVariableMap} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.typeVariableToString#1784",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(java.lang.reflect.TypeVariable\u003c?\u003e)",
    "snippet": "private static String typeVariableToString(final TypeVariable\u003c?\u003e typeVariable) {\n        final StringBuilder buf \u003d new StringBuilder(typeVariable.getName());\n        final Type[] bounds \u003d typeVariable.getBounds();\n        if (bounds.length \u003e 0 \u0026\u0026 !(bounds.length \u003d\u003d 1 \u0026\u0026 Object.class.equals(bounds[0]))) {\n            buf.append(\" extends \");\n            appendAllTo(buf, \" \u0026 \", typeVariable.getBounds());\n        }\n        return buf.toString();\n    }",
    "begin_line": 1784,
    "end_line": 1792,
    "comment": "/** \n * Formats a  {@link TypeVariable} as a {@link String}.\n * @param typeVariable {@link TypeVariable} to format\n * @return String\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.unrollBounds#1802",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e, java.lang.reflect.Type[])",
    "snippet": "private static Type[] unrollBounds(final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeArguments, final Type[] bounds) {\n        Type[] result \u003d bounds;\n        int i \u003d 0;\n        for (; i \u003c result.length; i++) {\n            final Type unrolled \u003d unrollVariables(typeArguments, result[i]);\n            if (unrolled \u003d\u003d null) {\n                result \u003d ArrayUtils.remove(result, i--);\n            } else {\n                result[i] \u003d unrolled;\n            }\n        }\n        return result;\n    }",
    "begin_line": 1802,
    "end_line": 1814,
    "comment": "/** \n * Unrolls variables in a type bounds array.\n * @param typeArguments assignments {@link Map}\n * @param bounds in which to expand variables\n * @return {@code bounds} with any variables reassigned\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.unrollVariableAssignments#1825",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(java.lang.reflect.TypeVariable\u003c?\u003e, java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e)",
    "snippet": "private static Type unrollVariableAssignments(TypeVariable\u003c?\u003e typeVariable, final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns) {\n        Type result;\n        do {\n            result \u003d typeVarAssigns.get(typeVariable);\n            if (!(result instanceof TypeVariable\u003c?\u003e) || result.equals(typeVariable)) {\n                break;\n            }\n            typeVariable \u003d (TypeVariable\u003c?\u003e) result;\n        } while (true);\n        return result;\n    }",
    "begin_line": 1825,
    "end_line": 1835,
    "comment": "/** \n * Looks up  {@code typeVariable} in {@code typeVarAssigns} \u003cem\u003etransitively\u003c/em\u003e, i.e. keep looking until the valuefound is \u003cem\u003enot\u003c/em\u003e a type variable.\n * @param typeVariable the type variable to look up\n * @param typeVarAssigns the map used for the look-up\n * @return Type or {@code null} if some variable was not in the map\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.unrollVariables#1845",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map\u003cjava.lang.reflect.TypeVariable\u003c?\u003e,java.lang.reflect.Type\u003e, java.lang.reflect.Type)",
    "snippet": "public static Type unrollVariables(Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeArguments, final Type type) {\n        if (typeArguments \u003d\u003d null) {\n            typeArguments \u003d Collections.emptyMap();\n        }\n        if (containsTypeVariables(type)) {\n            if (type instanceof TypeVariable\u003c?\u003e) {\n                return unrollVariables(typeArguments, typeArguments.get(type));\n            }\n            if (type instanceof ParameterizedType) {\n                final ParameterizedType p \u003d (ParameterizedType) type;\n                final Map\u003cTypeVariable\u003c?\u003e, Type\u003e parameterizedTypeArguments;\n                if (p.getOwnerType() \u003d\u003d null) {\n                    parameterizedTypeArguments \u003d typeArguments;\n                } else {\n                    parameterizedTypeArguments \u003d new HashMap\u003c\u003e(typeArguments);\n                    parameterizedTypeArguments.putAll(getTypeArguments(p));\n                }\n                final Type[] args \u003d p.getActualTypeArguments();\n                for (int i \u003d 0; i \u003c args.length; i++) {\n                    final Type unrolled \u003d unrollVariables(parameterizedTypeArguments, args[i]);\n                    if (unrolled !\u003d null) {\n                        args[i] \u003d unrolled;\n                    }\n                }\n                return parameterizeWithOwner(p.getOwnerType(), (Class\u003c?\u003e) p.getRawType(), args);\n            }\n            if (type instanceof WildcardType) {\n                final WildcardType wild \u003d (WildcardType) type;\n                return wildcardType().withUpperBounds(unrollBounds(typeArguments, wild.getUpperBounds()))\n                    .withLowerBounds(unrollBounds(typeArguments, wild.getLowerBounds())).build();\n            }\n        }\n        return type;\n    }",
    "begin_line": 1845,
    "end_line": 1878,
    "comment": "/** \n * Gets a type representing  {@code type} with variable assignments \"unrolled.\"\n * @param typeArguments as from {@link TypeUtils#getTypeArguments(Type,Class)}\n * @param type the type to unroll variable assignments for\n * @return Type\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.wildcardType#1886",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.wildcardType()",
    "snippet": "public static WildcardTypeBuilder wildcardType() {\n        return new WildcardTypeBuilder();\n    }",
    "begin_line": 1886,
    "end_line": 1888,
    "comment": "/** \n * Gets a  {@link WildcardTypeBuilder}.\n * @return {@link WildcardTypeBuilder}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.wildcardTypeToString#1897",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.wildcardTypeToString(java.lang.reflect.WildcardType)",
    "snippet": "private static String wildcardTypeToString(final WildcardType wildcardType) {\n        final StringBuilder buf \u003d new StringBuilder().append(\u0027?\u0027);\n        final Type[] lowerBounds \u003d wildcardType.getLowerBounds();\n        final Type[] upperBounds \u003d wildcardType.getUpperBounds();\n        if (lowerBounds.length \u003e 1 || lowerBounds.length \u003d\u003d 1 \u0026\u0026 lowerBounds[0] !\u003d null) {\n            appendAllTo(buf.append(\" super \"), \" \u0026 \", lowerBounds);\n        } else if (upperBounds.length \u003e 1 || upperBounds.length \u003d\u003d 1 \u0026\u0026 !Object.class.equals(upperBounds[0])) {\n            appendAllTo(buf.append(\" extends \"), \" \u0026 \", upperBounds);\n        }\n        return buf.toString();\n    }",
    "begin_line": 1897,
    "end_line": 1907,
    "comment": "/** \n * Formats a  {@link WildcardType} as a {@link String}.\n * @param wildcardType {@link WildcardType} to format\n * @return String\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.wrap#1917",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.wrap(java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e Typed\u003cT\u003e wrap(final Class\u003cT\u003e type) {\n        return wrap((Type) type);\n    }",
    "begin_line": 1917,
    "end_line": 1919,
    "comment": "/** \n * Wraps the specified  {@link Class} in a {@link Typed} wrapper.\n * @param \u003c T \u003e generic type\n * @param type to wrap\n * @return Typed\u0026lt;T\u0026gt;\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.wrap#1929",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.wrap(java.lang.reflect.Type)",
    "snippet": "public static \u003cT\u003e Typed\u003cT\u003e wrap(final Type type) {\n        return () -\u003e type;\n    }",
    "begin_line": 1929,
    "end_line": 1931,
    "comment": "/** \n * Wraps the specified  {@link Type} in a {@link Typed} wrapper.\n * @param \u003c T \u003e inferred generic type\n * @param type to wrap\n * @return Typed\u0026lt;T\u0026gt;\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WildcardTypeImpl.TypeUtils#1942",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/TypeUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
    "signature": "org.apache.commons.lang3.reflect.TypeUtils.TypeUtils()",
    "snippet": "public TypeUtils() {\n    }",
    "begin_line": 1942,
    "end_line": 1943,
    "comment": "/** \n * {@link TypeUtils} instances should NOT be constructed in standardprogramming. Instead, the class should be used as {@code TypeUtils.isAssignable(cls, toClass)}. \u003cp\u003e This constructor is public to permit tools that require a JavaBean instance to operate. \u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]