[
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.AClass(org.apache.commons.lang3.reflect.AAClass\u003cjava.lang.String\u003e)",
    "snippet": " AClass(final AAClass\u003cString\u003e enclosingInstance) {\n        enclosingInstance.super();\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "child_ranges": [
      "(line 118,col 9)-(line 118,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m0()",
    "snippet": "public abstract Object m0();",
    "begin_line": 123,
    "end_line": 123,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m1()",
    "snippet": "public abstract String[] m1();",
    "begin_line": 124,
    "end_line": 124,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m10()",
    "snippet": "public abstract \u003cK, V\u003e Map\u003c? extends K, V[]\u003e m10();",
    "begin_line": 125,
    "end_line": 125,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m11()",
    "snippet": "public abstract \u003cK, V\u003e Map\u003c? extends K, List\u003cV[]\u003e\u003e m11();",
    "begin_line": 126,
    "end_line": 126,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m12()",
    "snippet": "public abstract List m12();",
    "begin_line": 127,
    "end_line": 127,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m13()",
    "snippet": "public abstract Map m13();",
    "begin_line": 128,
    "end_line": 128,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m14()",
    "snippet": "public abstract Properties m14();",
    "begin_line": 129,
    "end_line": 129,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m15()",
    "snippet": "public abstract G m15();",
    "begin_line": 130,
    "end_line": 130,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m16()",
    "snippet": "public abstract List\u003cG\u003e m16();",
    "begin_line": 131,
    "end_line": 131,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m17()",
    "snippet": "public abstract Enum m17();",
    "begin_line": 132,
    "end_line": 132,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m2()",
    "snippet": "public abstract \u003cE\u003e E[] m2();",
    "begin_line": 133,
    "end_line": 133,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m3()",
    "snippet": "public abstract \u003cE\u003e List\u003c? extends E\u003e m3();",
    "begin_line": 134,
    "end_line": 134,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m4()",
    "snippet": "public abstract \u003cE extends Enum\u003cE\u003e\u003e List\u003c? extends Enum\u003cE\u003e\u003e m4();",
    "begin_line": 135,
    "end_line": 135,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m5()",
    "snippet": "public abstract List\u003c? extends Enum\u003c?\u003e\u003e m5();",
    "begin_line": 136,
    "end_line": 136,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m6()",
    "snippet": "public abstract List\u003c? super Enum\u003c?\u003e\u003e m6();",
    "begin_line": 137,
    "end_line": 137,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m7()",
    "snippet": "public abstract List\u003c?\u003e m7();",
    "begin_line": 138,
    "end_line": 138,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m8()",
    "snippet": "public abstract Map\u003c? extends Enum\u003c?\u003e, ? super Enum\u003c?\u003e\u003e m8();",
    "begin_line": 139,
    "end_line": 139,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.m9()",
    "snippet": "public abstract \u003cK, V\u003e Map\u003c? extends K, ? super V[]\u003e m9();",
    "begin_line": 140,
    "end_line": 140,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.methodWithGenericReturnType()",
    "snippet": "public static \u003cU\u003e Iterable\u003cU\u003e methodWithGenericReturnType() {\n            return null;\n        }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "child_ranges": [
      "(line 157,col 13)-(line 157,col 24)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub()",
    "snippet": "public static \u003cG extends Comparable\u003cG\u003e\u003e G stub() {\n        return null;\n    }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "",
    "child_ranges": [
      "(line 194,col 9)-(line 194,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub2()",
    "snippet": "public static \u003cG extends Comparable\u003c? super G\u003e\u003e G stub2() {\n        return null;\n    }",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "child_ranges": [
      "(line 198,col 9)-(line 198,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub3()",
    "snippet": "public static \u003cT extends Comparable\u003c? extends T\u003e\u003e T stub3() {\n        return null;\n    }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "",
    "child_ranges": [
      "(line 202,col 9)-(line 202,col 20)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean)",
    "snippet": "public void delegateBooleanAssertion(final Type[] types, final int i2, final int i1, final boolean expected) {\n        final Type type1 \u003d types[i1];\n        final Type type2 \u003d types[i2];\n        final boolean isAssignable \u003d TypeUtils.isAssignable(type2, type1);\n\n        if (expected) {\n            assertTrue(isAssignable,\n                    \"[\" + i1 + \", \" + i2 + \"]: From \"\n                                + String.valueOf(type2) + \" to \"\n                                + String.valueOf(type1));\n        } else {\n            assertFalse(isAssignable,\n                    \"[\" + i1 + \", \" + i2 + \"]: From \"\n                                + String.valueOf(type2) + \" to \"\n                                + String.valueOf(type1));\n        }\n    }",
    "begin_line": 227,
    "end_line": 243,
    "comment": "",
    "child_ranges": [
      "(line 228,col 9)-(line 228,col 37)",
      "(line 229,col 9)-(line 229,col 37)",
      "(line 230,col 9)-(line 230,col 74)",
      "(line 232,col 9)-(line 242,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.dummyMethod(java.util.List, java.util.List\u003cjava.lang.Object\u003e, java.util.List\u003c?\u003e, java.util.List\u003c? super java.lang.Object\u003e, java.util.List\u003cjava.lang.String\u003e, java.util.List\u003c? extends java.lang.String\u003e, java.util.List\u003c? super java.lang.String\u003e, java.util.List[], java.util.List\u003cjava.lang.Object\u003e[], java.util.List\u003c?\u003e[], java.util.List\u003c? super java.lang.Object\u003e[], java.util.List\u003cjava.lang.String\u003e[], java.util.List\u003c? extends java.lang.String\u003e[], java.util.List\u003c? super java.lang.String\u003e[])",
    "snippet": "public void dummyMethod(final List list0, final List\u003cObject\u003e list1, final List\u003c?\u003e list2,\n            final List\u003c? super Object\u003e list3, final List\u003cString\u003e list4, final List\u003c? extends String\u003e list5,\n            final List\u003c? super String\u003e list6, final List[] list7, final List\u003cObject\u003e[] list8, final List\u003c?\u003e[] list9,\n            final List\u003c? super Object\u003e[] list10, final List\u003cString\u003e[] list11, final List\u003c? extends String\u003e[] list12,\n            final List\u003c? super String\u003e[] list13) {\n    }",
    "begin_line": 245,
    "end_line": 250,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testContainsTypeVariables()",
    "snippet": "@Test\n    public void testContainsTypeVariables() throws Exception {\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m0\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m1\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m2\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m3\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m4\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m5\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m6\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m7\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m8\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m9\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m10\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m11\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m12\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m13\").getGenericReturnType()));\n        assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m14\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m15\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m16\").getGenericReturnType()));\n        assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m17\").getGenericReturnType()));\n    }",
    "begin_line": 253,
    "end_line": 272,
    "comment": "",
    "child_ranges": [
      "(line 254,col 9)-(line 254,col 105)",
      "(line 255,col 9)-(line 255,col 105)",
      "(line 256,col 9)-(line 256,col 104)",
      "(line 257,col 9)-(line 257,col 104)",
      "(line 258,col 9)-(line 258,col 104)",
      "(line 259,col 9)-(line 259,col 105)",
      "(line 260,col 9)-(line 260,col 105)",
      "(line 261,col 9)-(line 261,col 105)",
      "(line 262,col 9)-(line 262,col 105)",
      "(line 263,col 9)-(line 263,col 104)",
      "(line 264,col 9)-(line 264,col 105)",
      "(line 265,col 9)-(line 265,col 105)",
      "(line 266,col 9)-(line 266,col 105)",
      "(line 267,col 9)-(line 267,col 105)",
      "(line 268,col 9)-(line 268,col 106)",
      "(line 269,col 9)-(line 269,col 105)",
      "(line 270,col 9)-(line 270,col 105)",
      "(line 271,col 9)-(line 271,col 105)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments()",
    "snippet": "@Test\n    public void testDetermineTypeVariableAssignments() throws SecurityException,\n            NoSuchFieldException {\n        final ParameterizedType iterableType \u003d (ParameterizedType) getClass().getField(\"iterable\")\n                .getGenericType();\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d TypeUtils.determineTypeArguments(TreeSet.class,\n                iterableType);\n        final TypeVariable\u003c?\u003e treeSetTypeVar \u003d TreeSet.class.getTypeParameters()[0];\n        assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));\n        assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns\n                .get(treeSetTypeVar));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e TypeUtils.determineTypeArguments(TreeSet.class, null));\n        assertThrows(NullPointerException.class,\n                () -\u003e TypeUtils.determineTypeArguments(null, iterableType));\n    }",
    "begin_line": 275,
    "end_line": 290,
    "comment": "",
    "child_ranges": [
      "(line 277,col 9)-(line 278,col 34)",
      "(line 279,col 9)-(line 280,col 30)",
      "(line 281,col 9)-(line 281,col 84)",
      "(line 282,col 9)-(line 282,col 63)",
      "(line 283,col 9)-(line 284,col 38)",
      "(line 286,col 9)-(line 287,col 77)",
      "(line 288,col 9)-(line 289,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType()",
    "snippet": "@Test\n    public void testGenericArrayType() throws Exception {\n        final Type expected \u003d getClass().getField(\"intWildcardComparable\").getGenericType();\n        final GenericArrayType actual \u003d\n            TypeUtils.genericArrayType(TypeUtils.parameterize(Comparable.class, TypeUtils.wildcardType()\n                .withUpperBounds(Integer.class).build()));\n        assertTrue(TypeUtils.equals(expected, actual));\n        assertEquals(\"java.lang.Comparable\u003c? extends java.lang.Integer\u003e[]\", actual.toString());\n    }",
    "begin_line": 293,
    "end_line": 300,
    "comment": "",
    "child_ranges": [
      "(line 294,col 9)-(line 294,col 92)",
      "(line 295,col 9)-(line 297,col 58)",
      "(line 298,col 9)-(line 298,col 55)",
      "(line 299,col 9)-(line 299,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetArrayComponentType()",
    "snippet": "@Test\n    public void testGetArrayComponentType() throws Exception {\n        final Method method \u003d getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        final Type[] types \u003d method.getGenericParameterTypes();\n\n        assertNull(TypeUtils.getArrayComponentType(types[0]));\n        assertNull(TypeUtils.getArrayComponentType(types[1]));\n        assertNull(TypeUtils.getArrayComponentType(types[2]));\n        assertNull(TypeUtils.getArrayComponentType(types[3]));\n        assertNull(TypeUtils.getArrayComponentType(types[4]));\n        assertNull(TypeUtils.getArrayComponentType(types[5]));\n        assertNull(TypeUtils.getArrayComponentType(types[6]));\n        assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));\n        assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));\n        assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));\n        assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));\n        assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));\n        assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));\n        assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));\n    }",
    "begin_line": 303,
    "end_line": 324,
    "comment": "",
    "child_ranges": [
      "(line 304,col 9)-(line 306,col 86)",
      "(line 308,col 9)-(line 308,col 63)",
      "(line 310,col 9)-(line 310,col 62)",
      "(line 311,col 9)-(line 311,col 62)",
      "(line 312,col 9)-(line 312,col 62)",
      "(line 313,col 9)-(line 313,col 62)",
      "(line 314,col 9)-(line 314,col 62)",
      "(line 315,col 9)-(line 315,col 62)",
      "(line 316,col 9)-(line 316,col 62)",
      "(line 317,col 9)-(line 317,col 74)",
      "(line 318,col 9)-(line 318,col 74)",
      "(line 319,col 9)-(line 319,col 74)",
      "(line 320,col 9)-(line 320,col 75)",
      "(line 321,col 9)-(line 321,col 75)",
      "(line 322,col 9)-(line 322,col 75)",
      "(line 323,col 9)-(line 323,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetPrimitiveArrayComponentType()",
    "snippet": "@Test\n    public void testGetPrimitiveArrayComponentType() {\n        assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));\n        assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));\n        assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));\n        assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));\n        assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));\n        assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));\n        assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));\n        assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));\n\n        assertNull(TypeUtils.getArrayComponentType(boolean.class));\n        assertNull(TypeUtils.getArrayComponentType(byte.class));\n        assertNull(TypeUtils.getArrayComponentType(short.class));\n        assertNull(TypeUtils.getArrayComponentType(int.class));\n        assertNull(TypeUtils.getArrayComponentType(char.class));\n        assertNull(TypeUtils.getArrayComponentType(long.class));\n        assertNull(TypeUtils.getArrayComponentType(float.class));\n        assertNull(TypeUtils.getArrayComponentType(double.class));\n    }",
    "begin_line": 327,
    "end_line": 345,
    "comment": "",
    "child_ranges": [
      "(line 328,col 9)-(line 328,col 86)",
      "(line 329,col 9)-(line 329,col 80)",
      "(line 330,col 9)-(line 330,col 82)",
      "(line 331,col 9)-(line 331,col 78)",
      "(line 332,col 9)-(line 332,col 80)",
      "(line 333,col 9)-(line 333,col 80)",
      "(line 334,col 9)-(line 334,col 82)",
      "(line 335,col 9)-(line 335,col 84)",
      "(line 337,col 9)-(line 337,col 67)",
      "(line 338,col 9)-(line 338,col 64)",
      "(line 339,col 9)-(line 339,col 65)",
      "(line 340,col 9)-(line 340,col 63)",
      "(line 341,col 9)-(line 341,col 64)",
      "(line 342,col 9)-(line 342,col 64)",
      "(line 343,col 9)-(line 343,col 65)",
      "(line 344,col 9)-(line 344,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType()",
    "snippet": "@Test\n    public void testGetRawType() throws SecurityException, NoSuchFieldException {\n        final Type stringParentFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"stringParent\").getGenericType();\n        final Type integerParentFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"integerParent\").getGenericType();\n        final Type foosFieldType \u003d GenericTypeHolder.class.getDeclaredField(\"foos\").getGenericType();\n        final Type genericParentT \u003d GenericParent.class.getTypeParameters()[0];\n        assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));\n        assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null));\n        assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));\n        assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class));\n        assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType));\n        assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType));\n        assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType));\n        assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));\n        assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField(\"barParents\").getGenericType(), null));\n    }",
    "begin_line": 348,
    "end_line": 362,
    "comment": "",
    "child_ranges": [
      "(line 349,col 9)-(line 349,col 117)",
      "(line 350,col 9)-(line 350,col 119)",
      "(line 351,col 9)-(line 351,col 101)",
      "(line 352,col 9)-(line 352,col 79)",
      "(line 353,col 9)-(line 353,col 93)",
      "(line 354,col 9)-(line 354,col 94)",
      "(line 355,col 9)-(line 355,col 76)",
      "(line 356,col 9)-(line 356,col 105)",
      "(line 357,col 9)-(line 357,col 96)",
      "(line 358,col 9)-(line 358,col 108)",
      "(line 359,col 9)-(line 359,col 104)",
      "(line 360,col 9)-(line 360,col 78)",
      "(line 361,col 9)-(line 361,col 145)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType_LANG_1697()",
    "snippet": "@Test\n    public void testGetRawType_LANG_1697() throws NoSuchFieldException {\n        assertEquals(int[].class, TypeUtils.getRawType(TypeUtils.genericArrayType(Integer.TYPE), Integer.TYPE));\n        // LANG-1697:\n        assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), null));\n        // TODO: Is this correct?\n        assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), TypeUtils.WILDCARD_ALL));\n        // TODO: Is this correct?\n        assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), Integer.TYPE));\n    }",
    "begin_line": 368,
    "end_line": 376,
    "comment": "/** \n * Tests https://issues.apache.org/jira/browse/LANG-1697\n */\n",
    "child_ranges": [
      "(line 369,col 9)-(line 369,col 112)",
      "(line 371,col 9)-(line 371,col 99)",
      "(line 373,col 9)-(line 373,col 117)",
      "(line 375,col 9)-(line 375,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments()",
    "snippet": "@Test\n    public void testGetTypeArguments() {\n        Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns;\n        TypeVariable\u003c?\u003e treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),\n                \"Type var assigns for Comparable from Integer: \" + typeVarAssigns);\n        typeArg \u003d typeVarAssigns.get(treeSetTypeVar);\n        assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),\n                \"Type argument of Comparable from Integer: \" + typeArg);\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),\n                \"Type var assigns for Comparable from int: \" + typeVarAssigns);\n        typeArg \u003d typeVarAssigns.get(treeSetTypeVar);\n        assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),\n                \"Type argument of Comparable from int: \" + typeArg);\n\n        final Collection\u003cInteger\u003e col \u003d Collections.emptyList();\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar \u003d Comparable.class.getTypeParameters()[0];\n        assertFalse(typeVarAssigns.containsKey(treeSetTypeVar),\n                \"Type var assigns for Collection from List: \" + typeVarAssigns);\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        assertEquals(2, typeVarAssigns.size());\n        assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n        assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Other.class, This.class);\n        assertEquals(2, typeVarAssigns.size());\n        assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(And.class, This.class);\n        assertEquals(2, typeVarAssigns.size());\n        assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));\n\n        typeVarAssigns \u003d TypeUtils.getTypeArguments(Thing.class, Other.class);\n        assertEquals(2, typeVarAssigns.size());\n        assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0]));\n        assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0]));\n    }",
    "begin_line": 379,
    "end_line": 425,
    "comment": "",
    "child_ranges": [
      "(line 380,col 9)-(line 380,col 50)",
      "(line 381,col 9)-(line 381,col 39)",
      "(line 382,col 9)-(line 382,col 21)",
      "(line 384,col 9)-(line 384,col 85)",
      "(line 385,col 9)-(line 385,col 65)",
      "(line 386,col 9)-(line 387,col 83)",
      "(line 388,col 9)-(line 388,col 53)",
      "(line 389,col 9)-(line 390,col 72)",
      "(line 392,col 9)-(line 392,col 81)",
      "(line 393,col 9)-(line 393,col 65)",
      "(line 394,col 9)-(line 395,col 79)",
      "(line 396,col 9)-(line 396,col 53)",
      "(line 397,col 9)-(line 398,col 68)",
      "(line 400,col 9)-(line 400,col 64)",
      "(line 401,col 9)-(line 401,col 82)",
      "(line 402,col 9)-(line 402,col 65)",
      "(line 403,col 9)-(line 404,col 80)",
      "(line 406,col 9)-(line 406,col 100)",
      "(line 407,col 9)-(line 407,col 47)",
      "(line 408,col 9)-(line 408,col 93)",
      "(line 409,col 9)-(line 409,col 101)",
      "(line 411,col 9)-(line 411,col 77)",
      "(line 412,col 9)-(line 412,col 47)",
      "(line 413,col 9)-(line 413,col 90)",
      "(line 414,col 9)-(line 414,col 112)",
      "(line 416,col 9)-(line 416,col 75)",
      "(line 417,col 9)-(line 417,col 47)",
      "(line 418,col 9)-(line 418,col 90)",
      "(line 419,col 9)-(line 419,col 90)",
      "(line 421,col 9)-(line 421,col 78)",
      "(line 422,col 9)-(line 422,col 47)",
      "(line 423,col 9)-(line 423,col 111)",
      "(line 424,col 9)-(line 424,col 112)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes()",
    "snippet": "@Test\n    public void testIsArrayGenericTypes() throws Exception {\n        final Method method \u003d getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        final Type[] types \u003d method.getGenericParameterTypes();\n\n        assertFalse(TypeUtils.isArrayType(types[0]));\n        assertFalse(TypeUtils.isArrayType(types[1]));\n        assertFalse(TypeUtils.isArrayType(types[2]));\n        assertFalse(TypeUtils.isArrayType(types[3]));\n        assertFalse(TypeUtils.isArrayType(types[4]));\n        assertFalse(TypeUtils.isArrayType(types[5]));\n        assertFalse(TypeUtils.isArrayType(types[6]));\n        assertTrue(TypeUtils.isArrayType(types[7]));\n        assertTrue(TypeUtils.isArrayType(types[8]));\n        assertTrue(TypeUtils.isArrayType(types[9]));\n        assertTrue(TypeUtils.isArrayType(types[10]));\n        assertTrue(TypeUtils.isArrayType(types[11]));\n        assertTrue(TypeUtils.isArrayType(types[12]));\n        assertTrue(TypeUtils.isArrayType(types[13]));\n    }",
    "begin_line": 428,
    "end_line": 449,
    "comment": "",
    "child_ranges": [
      "(line 429,col 9)-(line 431,col 86)",
      "(line 433,col 9)-(line 433,col 63)",
      "(line 435,col 9)-(line 435,col 53)",
      "(line 436,col 9)-(line 436,col 53)",
      "(line 437,col 9)-(line 437,col 53)",
      "(line 438,col 9)-(line 438,col 53)",
      "(line 439,col 9)-(line 439,col 53)",
      "(line 440,col 9)-(line 440,col 53)",
      "(line 441,col 9)-(line 441,col 53)",
      "(line 442,col 9)-(line 442,col 52)",
      "(line 443,col 9)-(line 443,col 52)",
      "(line 444,col 9)-(line 444,col 52)",
      "(line 445,col 9)-(line 445,col 53)",
      "(line 446,col 9)-(line 446,col 53)",
      "(line 447,col 9)-(line 447,col 53)",
      "(line 448,col 9)-(line 448,col 53)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayTypeClasses()",
    "snippet": "@Test\n    public void testIsArrayTypeClasses() {\n        assertTrue(TypeUtils.isArrayType(boolean[].class));\n        assertTrue(TypeUtils.isArrayType(byte[].class));\n        assertTrue(TypeUtils.isArrayType(short[].class));\n        assertTrue(TypeUtils.isArrayType(int[].class));\n        assertTrue(TypeUtils.isArrayType(char[].class));\n        assertTrue(TypeUtils.isArrayType(long[].class));\n        assertTrue(TypeUtils.isArrayType(float[].class));\n        assertTrue(TypeUtils.isArrayType(double[].class));\n        assertTrue(TypeUtils.isArrayType(Object[].class));\n        assertTrue(TypeUtils.isArrayType(String[].class));\n\n        assertFalse(TypeUtils.isArrayType(boolean.class));\n        assertFalse(TypeUtils.isArrayType(byte.class));\n        assertFalse(TypeUtils.isArrayType(short.class));\n        assertFalse(TypeUtils.isArrayType(int.class));\n        assertFalse(TypeUtils.isArrayType(char.class));\n        assertFalse(TypeUtils.isArrayType(long.class));\n        assertFalse(TypeUtils.isArrayType(float.class));\n        assertFalse(TypeUtils.isArrayType(double.class));\n        assertFalse(TypeUtils.isArrayType(Object.class));\n        assertFalse(TypeUtils.isArrayType(String.class));\n    }",
    "begin_line": 452,
    "end_line": 474,
    "comment": "",
    "child_ranges": [
      "(line 453,col 9)-(line 453,col 59)",
      "(line 454,col 9)-(line 454,col 56)",
      "(line 455,col 9)-(line 455,col 57)",
      "(line 456,col 9)-(line 456,col 55)",
      "(line 457,col 9)-(line 457,col 56)",
      "(line 458,col 9)-(line 458,col 56)",
      "(line 459,col 9)-(line 459,col 57)",
      "(line 460,col 9)-(line 460,col 58)",
      "(line 461,col 9)-(line 461,col 58)",
      "(line 462,col 9)-(line 462,col 58)",
      "(line 464,col 9)-(line 464,col 58)",
      "(line 465,col 9)-(line 465,col 55)",
      "(line 466,col 9)-(line 466,col 56)",
      "(line 467,col 9)-(line 467,col 54)",
      "(line 468,col 9)-(line 468,col 55)",
      "(line 469,col 9)-(line 469,col 55)",
      "(line 470,col 9)-(line 470,col 56)",
      "(line 471,col 9)-(line 471,col 57)",
      "(line 472,col 9)-(line 472,col 57)",
      "(line 473,col 9)-(line 473,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable()",
    "snippet": "@SuppressWarnings(\"boxing\") testIsAssignable() throws SecurityException, NoSuchMethodException,\n            NoSuchFieldException {\n        List list0 \u003d null;\n        List\u003cObject\u003e list1;\n        List\u003c?\u003e list2;\n        List\u003c? super Object\u003e list3;\n        List\u003cString\u003e list4;\n        List\u003c? extends String\u003e list5;\n        List\u003c? super String\u003e list6;\n        List[] list7 \u003d null;\n        List\u003cObject\u003e[] list8;\n        List\u003c?\u003e[] list9;\n        List\u003c? super Object\u003e[] list10;\n        List\u003cString\u003e[] list11;\n        List\u003c? extends String\u003e[] list12;\n        List\u003c? super String\u003e[] list13;\n        final Class\u003c?\u003e clazz \u003d getClass();\n        final Method method \u003d clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n        final Type[] types \u003d method.getGenericParameterTypes();\n//        list0 \u003d list0;\n        delegateBooleanAssertion(types, 0, 0, true);\n        list1 \u003d list0;\n        delegateBooleanAssertion(types, 0, 1, true);\n        list0 \u003d list1;\n        delegateBooleanAssertion(types, 1, 0, true);\n        list2 \u003d list0;\n        delegateBooleanAssertion(types, 0, 2, true);\n        list0 \u003d list2;\n        delegateBooleanAssertion(types, 2, 0, true);\n        list3 \u003d list0;\n        delegateBooleanAssertion(types, 0, 3, true);\n        list0 \u003d list3;\n        delegateBooleanAssertion(types, 3, 0, true);\n        list4 \u003d list0;\n        delegateBooleanAssertion(types, 0, 4, true);\n        list0 \u003d list4;\n        delegateBooleanAssertion(types, 4, 0, true);\n        list5 \u003d list0;\n        delegateBooleanAssertion(types, 0, 5, true);\n        list0 \u003d list5;\n        delegateBooleanAssertion(types, 5, 0, true);\n        list6 \u003d list0;\n        delegateBooleanAssertion(types, 0, 6, true);\n        list0 \u003d list6;\n        delegateBooleanAssertion(types, 6, 0, true);\n//        list1 \u003d list1;\n        delegateBooleanAssertion(types, 1, 1, true);\n        list2 \u003d list1;\n        delegateBooleanAssertion(types, 1, 2, true);\n        list1 \u003d (List\u003cObject\u003e) list2;\n        delegateBooleanAssertion(types, 2, 1, false);\n        list3 \u003d list1;\n        delegateBooleanAssertion(types, 1, 3, true);\n        list1 \u003d (List\u003cObject\u003e) list3;\n        delegateBooleanAssertion(types, 3, 1, false);\n        // list4 \u003d list1;\n        delegateBooleanAssertion(types, 1, 4, false);\n        // list1 \u003d list4;\n        delegateBooleanAssertion(types, 4, 1, false);\n        // list5 \u003d list1;\n        delegateBooleanAssertion(types, 1, 5, false);\n        // list1 \u003d list5;\n        delegateBooleanAssertion(types, 5, 1, false);\n        list6 \u003d list1;\n        delegateBooleanAssertion(types, 1, 6, true);\n        list1 \u003d (List\u003cObject\u003e) list6;\n        delegateBooleanAssertion(types, 6, 1, false);\n//        list2 \u003d list2;\n        delegateBooleanAssertion(types, 2, 2, true);\n        list2 \u003d list3;\n        delegateBooleanAssertion(types, 2, 3, false);\n        list2 \u003d list4;\n        delegateBooleanAssertion(types, 3, 2, true);\n        list3 \u003d (List\u003c? super Object\u003e) list2;\n        delegateBooleanAssertion(types, 2, 4, false);\n        list2 \u003d list5;\n        delegateBooleanAssertion(types, 4, 2, true);\n        list4 \u003d (List\u003cString\u003e) list2;\n        delegateBooleanAssertion(types, 2, 5, false);\n        list2 \u003d list6;\n        delegateBooleanAssertion(types, 5, 2, true);\n        list5 \u003d (List\u003c? extends String\u003e) list2;\n        delegateBooleanAssertion(types, 2, 6, false);\n//        list3 \u003d list3;\n        delegateBooleanAssertion(types, 6, 2, true);\n        list6 \u003d (List\u003c? super String\u003e) list2;\n        delegateBooleanAssertion(types, 3, 3, true);\n        // list4 \u003d list3;\n        delegateBooleanAssertion(types, 3, 4, false);\n        // list3 \u003d list4;\n        delegateBooleanAssertion(types, 4, 3, false);\n        // list5 \u003d list3;\n        delegateBooleanAssertion(types, 3, 5, false);\n        // list3 \u003d list5;\n        delegateBooleanAssertion(types, 5, 3, false);\n        list6 \u003d list3;\n        delegateBooleanAssertion(types, 3, 6, true);\n        list3 \u003d (List\u003c? super Object\u003e) list6;\n        delegateBooleanAssertion(types, 6, 3, false);\n//        list4 \u003d list4;\n        delegateBooleanAssertion(types, 4, 4, true);\n        list5 \u003d list4;\n        delegateBooleanAssertion(types, 4, 5, true);\n        list4 \u003d (List\u003cString\u003e) list5;\n        delegateBooleanAssertion(types, 5, 4, false);\n        list6 \u003d list4;\n        delegateBooleanAssertion(types, 4, 6, true);\n        list4 \u003d (List\u003cString\u003e) list6;\n        delegateBooleanAssertion(types, 6, 4, false);\n//        list5 \u003d list5;\n        delegateBooleanAssertion(types, 5, 5, true);\n        list6 \u003d (List\u003c? super String\u003e) list5;\n        delegateBooleanAssertion(types, 5, 6, false);\n        list5 \u003d (List\u003c? extends String\u003e) list6;\n        delegateBooleanAssertion(types, 6, 5, false);\n//        list6 \u003d list6;\n        delegateBooleanAssertion(types, 6, 6, true);\n\n//        list7 \u003d list7;\n        delegateBooleanAssertion(types, 7, 7, true);\n        list8 \u003d list7;\n        delegateBooleanAssertion(types, 7, 8, true);\n        list7 \u003d list8;\n        delegateBooleanAssertion(types, 8, 7, true);\n        list9 \u003d list7;\n        delegateBooleanAssertion(types, 7, 9, true);\n        list7 \u003d list9;\n        delegateBooleanAssertion(types, 9, 7, true);\n        list10 \u003d list7;\n        delegateBooleanAssertion(types, 7, 10, true);\n        list7 \u003d list10;\n        delegateBooleanAssertion(types, 10, 7, true);\n        list11 \u003d list7;\n        delegateBooleanAssertion(types, 7, 11, true);\n        list7 \u003d list11;\n        delegateBooleanAssertion(types, 11, 7, true);\n        list12 \u003d list7;\n        delegateBooleanAssertion(types, 7, 12, true);\n        list7 \u003d list12;\n        delegateBooleanAssertion(types, 12, 7, true);\n        list13 \u003d list7;\n        delegateBooleanAssertion(types, 7, 13, true);\n        list7 \u003d list13;\n        delegateBooleanAssertion(types, 13, 7, true);\n//        list8 \u003d list8;\n        delegateBooleanAssertion(types, 8, 8, true);\n        list9 \u003d list8;\n        delegateBooleanAssertion(types, 8, 9, true);\n        list8 \u003d (List\u003cObject\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 8, false);\n        list10 \u003d list8;\n        delegateBooleanAssertion(types, 8, 10, true);\n        list8 \u003d (List\u003cObject\u003e[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n        delegateBooleanAssertion(types, 10, 8, false);\n        // list11 \u003d list8;\n        delegateBooleanAssertion(types, 8, 11, false);\n        // list8 \u003d list11;\n        delegateBooleanAssertion(types, 11, 8, false);\n        // list12 \u003d list8;\n        delegateBooleanAssertion(types, 8, 12, false);\n        // list8 \u003d list12;\n        delegateBooleanAssertion(types, 12, 8, false);\n        list13 \u003d list8;\n        delegateBooleanAssertion(types, 8, 13, true);\n        list8 \u003d (List\u003cObject\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 8, false);\n//        list9 \u003d list9;\n        delegateBooleanAssertion(types, 9, 9, true);\n        list10 \u003d (List\u003c? super Object\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 10, false);\n        list9 \u003d list10;\n        delegateBooleanAssertion(types, 10, 9, true);\n        list11 \u003d (List\u003cString\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 11, false);\n        list9 \u003d list11;\n        delegateBooleanAssertion(types, 11, 9, true);\n        list12 \u003d (List\u003c? extends String\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 12, false);\n        list9 \u003d list12;\n        delegateBooleanAssertion(types, 12, 9, true);\n        list13 \u003d (List\u003c? super String\u003e[]) list9;\n        delegateBooleanAssertion(types, 9, 13, false);\n        list9 \u003d list13;\n        delegateBooleanAssertion(types, 13, 9, true);\n//        list10 \u003d list10;\n        delegateBooleanAssertion(types, 10, 10, true);\n        // list11 \u003d list10;\n        delegateBooleanAssertion(types, 10, 11, false);\n        // list10 \u003d list11;\n        delegateBooleanAssertion(types, 11, 10, false);\n        // list12 \u003d list10;\n        delegateBooleanAssertion(types, 10, 12, false);\n        // list10 \u003d list12;\n        delegateBooleanAssertion(types, 12, 10, false);\n        list13 \u003d list10;\n        delegateBooleanAssertion(types, 10, 13, true);\n        list10 \u003d (List\u003c? super Object\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 10, false);\n//        list11 \u003d list11;\n        delegateBooleanAssertion(types, 11, 11, true);\n        list12 \u003d list11;\n        delegateBooleanAssertion(types, 11, 12, true);\n        list11 \u003d (List\u003cString\u003e[]) list12;\n        delegateBooleanAssertion(types, 12, 11, false);\n        list13 \u003d list11;\n        delegateBooleanAssertion(types, 11, 13, true);\n        list11 \u003d (List\u003cString\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 11, false);\n//        list12 \u003d list12;\n        delegateBooleanAssertion(types, 12, 12, true);\n        list13 \u003d (List\u003c? super String\u003e[]) list12;\n        delegateBooleanAssertion(types, 12, 13, false);\n        list12 \u003d (List\u003c? extends String\u003e[]) list13;\n        delegateBooleanAssertion(types, 13, 12, false);\n//        list13 \u003d list13;\n        delegateBooleanAssertion(types, 13, 13, true);\n        final Type disType \u003d getClass().getField(\"dis\").getGenericType();\n        // Reporter.log( ( ( ParameterizedType ) disType\n        // ).getOwnerType().getClass().toString() );\n        final Type datType \u003d getClass().getField(\"dat\").getGenericType();\n        final Type daType \u003d getClass().getField(\"da\").getGenericType();\n        final Type uhderType \u003d getClass().getField(\"uhder\").getGenericType();\n        final Type dingType \u003d getClass().getField(\"ding\").getGenericType();\n        final Type testerType \u003d getClass().getField(\"tester\").getGenericType();\n        final Type tester2Type \u003d getClass().getField(\"tester2\").getGenericType();\n        final Type dat2Type \u003d getClass().getField(\"dat2\").getGenericType();\n        final Type dat3Type \u003d getClass().getField(\"dat3\").getGenericType();\n        dis \u003d dat;\n        assertTrue(TypeUtils.isAssignable(datType, disType));\n        // dis \u003d da;\n        assertFalse(TypeUtils.isAssignable(daType, disType));\n        dis \u003d uhder;\n        assertTrue(TypeUtils.isAssignable(uhderType, disType));\n        dis \u003d ding;\n        assertFalse(TypeUtils.isAssignable(dingType, disType),\n                String.format(\"type %s not assignable to %s!\", dingType, disType));\n        dis \u003d tester;\n        assertTrue(TypeUtils.isAssignable(testerType, disType));\n        // dis \u003d tester2;\n        assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n        // dat \u003d dat2;\n        assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n        // dat2 \u003d dat;\n        assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n        // dat \u003d dat3;\n        assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n        final char ch \u003d 0;\n        final boolean bo \u003d false;\n        final byte by \u003d 0;\n        final short sh \u003d 0;\n        int in \u003d 0;\n        long lo \u003d 0;\n        final float fl \u003d 0;\n        double du;\n        du \u003d ch;\n        assertTrue(TypeUtils.isAssignable(char.class, double.class));\n        du \u003d by;\n        assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n        du \u003d sh;\n        assertTrue(TypeUtils.isAssignable(short.class, double.class));\n        du \u003d in;\n        assertTrue(TypeUtils.isAssignable(int.class, double.class));\n        du \u003d lo;\n        assertTrue(TypeUtils.isAssignable(long.class, double.class));\n        du \u003d fl;\n        assertTrue(TypeUtils.isAssignable(float.class, double.class));\n        lo \u003d in;\n        assertTrue(TypeUtils.isAssignable(int.class, long.class));\n        lo \u003d Integer.valueOf(0);\n        assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n        // Long lngW \u003d 1;\n        assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n        // lngW \u003d Integer.valueOf( 0 );\n        assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n        in \u003d Integer.valueOf(0);\n        assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n        final Integer inte \u003d in;\n        assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n        assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n        assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n        final Type intComparableType \u003d getClass().getField(\"intComparable\").getGenericType();\n        intComparable \u003d 1;\n        assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n        assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n        final Serializable ser \u003d 1;\n        assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n        final Type longComparableType \u003d getClass().getField(\"longComparable\").getGenericType();\n        // longComparable \u003d 1;\n        assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n        // longComparable \u003d Integer.valueOf( 0 );\n        assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n        // int[] ia;\n        // long[] la \u003d ia;\n        assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n        final Integer[] ia \u003d null;\n        final Type caType \u003d getClass().getField(\"intWildcardComparable\").getGenericType();\n        intWildcardComparable \u003d ia;\n        assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n        // int[] ina \u003d ia;\n        assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n        final int[] ina \u003d null;\n        final Object[] oa;\n        // oa \u003d ina;\n        assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n        oa \u003d new Integer[0];\n        assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n        final Type bClassType \u003d AClass.class.getField(\"bClass\").getGenericType();\n        final Type cClassType \u003d AClass.class.getField(\"cClass\").getGenericType();\n        final Type dClassType \u003d AClass.class.getField(\"dClass\").getGenericType();\n        final Type eClassType \u003d AClass.class.getField(\"eClass\").getGenericType();\n        final Type fClassType \u003d AClass.class.getField(\"fClass\").getGenericType();\n        final AClass aClass \u003d new AClass(new AAClass\u003c\u003e());\n        aClass.bClass \u003d aClass.cClass;\n        assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n        aClass.bClass \u003d aClass.dClass;\n        assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n        aClass.bClass \u003d aClass.eClass;\n        assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n        aClass.bClass \u003d aClass.fClass;\n        assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n        aClass.cClass \u003d aClass.dClass;\n        assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n        aClass.cClass \u003d aClass.eClass;\n        assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n        aClass.cClass \u003d aClass.fClass;\n        assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n        aClass.dClass \u003d aClass.eClass;\n        assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n        aClass.dClass \u003d aClass.fClass;\n        assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n        aClass.eClass \u003d aClass.fClass;\n        assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n    }",
    "begin_line": 478,
    "end_line": 812,
    "comment": "",
    "child_ranges": [
      "(line 480,col 9)-(line 480,col 26)",
      "(line 481,col 9)-(line 481,col 27)",
      "(line 482,col 9)-(line 482,col 22)",
      "(line 483,col 9)-(line 483,col 35)",
      "(line 484,col 9)-(line 484,col 27)",
      "(line 485,col 9)-(line 485,col 37)",
      "(line 486,col 9)-(line 486,col 35)",
      "(line 487,col 9)-(line 487,col 28)",
      "(line 488,col 9)-(line 488,col 29)",
      "(line 489,col 9)-(line 489,col 24)",
      "(line 490,col 9)-(line 490,col 38)",
      "(line 491,col 9)-(line 491,col 30)",
      "(line 492,col 9)-(line 492,col 40)",
      "(line 493,col 9)-(line 493,col 38)",
      "(line 494,col 9)-(line 494,col 42)",
      "(line 495,col 9)-(line 497,col 86)",
      "(line 498,col 9)-(line 498,col 63)",
      "(line 500,col 9)-(line 500,col 52)",
      "(line 501,col 9)-(line 501,col 22)",
      "(line 502,col 9)-(line 502,col 52)",
      "(line 503,col 9)-(line 503,col 22)",
      "(line 504,col 9)-(line 504,col 52)",
      "(line 505,col 9)-(line 505,col 22)",
      "(line 506,col 9)-(line 506,col 52)",
      "(line 507,col 9)-(line 507,col 22)",
      "(line 508,col 9)-(line 508,col 52)",
      "(line 509,col 9)-(line 509,col 22)",
      "(line 510,col 9)-(line 510,col 52)",
      "(line 511,col 9)-(line 511,col 22)",
      "(line 512,col 9)-(line 512,col 52)",
      "(line 513,col 9)-(line 513,col 22)",
      "(line 514,col 9)-(line 514,col 52)",
      "(line 515,col 9)-(line 515,col 22)",
      "(line 516,col 9)-(line 516,col 52)",
      "(line 517,col 9)-(line 517,col 22)",
      "(line 518,col 9)-(line 518,col 52)",
      "(line 519,col 9)-(line 519,col 22)",
      "(line 520,col 9)-(line 520,col 52)",
      "(line 521,col 9)-(line 521,col 22)",
      "(line 522,col 9)-(line 522,col 52)",
      "(line 523,col 9)-(line 523,col 22)",
      "(line 524,col 9)-(line 524,col 52)",
      "(line 526,col 9)-(line 526,col 52)",
      "(line 527,col 9)-(line 527,col 22)",
      "(line 528,col 9)-(line 528,col 52)",
      "(line 529,col 9)-(line 529,col 37)",
      "(line 530,col 9)-(line 530,col 53)",
      "(line 531,col 9)-(line 531,col 22)",
      "(line 532,col 9)-(line 532,col 52)",
      "(line 533,col 9)-(line 533,col 37)",
      "(line 534,col 9)-(line 534,col 53)",
      "(line 536,col 9)-(line 536,col 53)",
      "(line 538,col 9)-(line 538,col 53)",
      "(line 540,col 9)-(line 540,col 53)",
      "(line 542,col 9)-(line 542,col 53)",
      "(line 543,col 9)-(line 543,col 22)",
      "(line 544,col 9)-(line 544,col 52)",
      "(line 545,col 9)-(line 545,col 37)",
      "(line 546,col 9)-(line 546,col 53)",
      "(line 548,col 9)-(line 548,col 52)",
      "(line 549,col 9)-(line 549,col 22)",
      "(line 550,col 9)-(line 550,col 53)",
      "(line 551,col 9)-(line 551,col 22)",
      "(line 552,col 9)-(line 552,col 52)",
      "(line 553,col 9)-(line 553,col 45)",
      "(line 554,col 9)-(line 554,col 53)",
      "(line 555,col 9)-(line 555,col 22)",
      "(line 556,col 9)-(line 556,col 52)",
      "(line 557,col 9)-(line 557,col 37)",
      "(line 558,col 9)-(line 558,col 53)",
      "(line 559,col 9)-(line 559,col 22)",
      "(line 560,col 9)-(line 560,col 52)",
      "(line 561,col 9)-(line 561,col 47)",
      "(line 562,col 9)-(line 562,col 53)",
      "(line 564,col 9)-(line 564,col 52)",
      "(line 565,col 9)-(line 565,col 45)",
      "(line 566,col 9)-(line 566,col 52)",
      "(line 568,col 9)-(line 568,col 53)",
      "(line 570,col 9)-(line 570,col 53)",
      "(line 572,col 9)-(line 572,col 53)",
      "(line 574,col 9)-(line 574,col 53)",
      "(line 575,col 9)-(line 575,col 22)",
      "(line 576,col 9)-(line 576,col 52)",
      "(line 577,col 9)-(line 577,col 45)",
      "(line 578,col 9)-(line 578,col 53)",
      "(line 580,col 9)-(line 580,col 52)",
      "(line 581,col 9)-(line 581,col 22)",
      "(line 582,col 9)-(line 582,col 52)",
      "(line 583,col 9)-(line 583,col 37)",
      "(line 584,col 9)-(line 584,col 53)",
      "(line 585,col 9)-(line 585,col 22)",
      "(line 586,col 9)-(line 586,col 52)",
      "(line 587,col 9)-(line 587,col 37)",
      "(line 588,col 9)-(line 588,col 53)",
      "(line 590,col 9)-(line 590,col 52)",
      "(line 591,col 9)-(line 591,col 45)",
      "(line 592,col 9)-(line 592,col 53)",
      "(line 593,col 9)-(line 593,col 47)",
      "(line 594,col 9)-(line 594,col 53)",
      "(line 596,col 9)-(line 596,col 52)",
      "(line 599,col 9)-(line 599,col 52)",
      "(line 600,col 9)-(line 600,col 22)",
      "(line 601,col 9)-(line 601,col 52)",
      "(line 602,col 9)-(line 602,col 22)",
      "(line 603,col 9)-(line 603,col 52)",
      "(line 604,col 9)-(line 604,col 22)",
      "(line 605,col 9)-(line 605,col 52)",
      "(line 606,col 9)-(line 606,col 22)",
      "(line 607,col 9)-(line 607,col 52)",
      "(line 608,col 9)-(line 608,col 23)",
      "(line 609,col 9)-(line 609,col 53)",
      "(line 610,col 9)-(line 610,col 23)",
      "(line 611,col 9)-(line 611,col 53)",
      "(line 612,col 9)-(line 612,col 23)",
      "(line 613,col 9)-(line 613,col 53)",
      "(line 614,col 9)-(line 614,col 23)",
      "(line 615,col 9)-(line 615,col 53)",
      "(line 616,col 9)-(line 616,col 23)",
      "(line 617,col 9)-(line 617,col 53)",
      "(line 618,col 9)-(line 618,col 23)",
      "(line 619,col 9)-(line 619,col 53)",
      "(line 620,col 9)-(line 620,col 23)",
      "(line 621,col 9)-(line 621,col 53)",
      "(line 622,col 9)-(line 622,col 23)",
      "(line 623,col 9)-(line 623,col 53)",
      "(line 625,col 9)-(line 625,col 52)",
      "(line 626,col 9)-(line 626,col 22)",
      "(line 627,col 9)-(line 627,col 52)",
      "(line 628,col 9)-(line 628,col 39)",
      "(line 629,col 9)-(line 629,col 53)",
      "(line 630,col 9)-(line 630,col 23)",
      "(line 631,col 9)-(line 631,col 53)",
      "(line 632,col 9)-(line 632,col 40)",
      "(line 633,col 9)-(line 633,col 54)",
      "(line 635,col 9)-(line 635,col 54)",
      "(line 637,col 9)-(line 637,col 54)",
      "(line 639,col 9)-(line 639,col 54)",
      "(line 641,col 9)-(line 641,col 54)",
      "(line 642,col 9)-(line 642,col 23)",
      "(line 643,col 9)-(line 643,col 53)",
      "(line 644,col 9)-(line 644,col 40)",
      "(line 645,col 9)-(line 645,col 54)",
      "(line 647,col 9)-(line 647,col 52)",
      "(line 648,col 9)-(line 648,col 48)",
      "(line 649,col 9)-(line 649,col 54)",
      "(line 650,col 9)-(line 650,col 23)",
      "(line 651,col 9)-(line 651,col 53)",
      "(line 652,col 9)-(line 652,col 40)",
      "(line 653,col 9)-(line 653,col 54)",
      "(line 654,col 9)-(line 654,col 23)",
      "(line 655,col 9)-(line 655,col 53)",
      "(line 656,col 9)-(line 656,col 50)",
      "(line 657,col 9)-(line 657,col 54)",
      "(line 658,col 9)-(line 658,col 23)",
      "(line 659,col 9)-(line 659,col 53)",
      "(line 660,col 9)-(line 660,col 48)",
      "(line 661,col 9)-(line 661,col 54)",
      "(line 662,col 9)-(line 662,col 23)",
      "(line 663,col 9)-(line 663,col 53)",
      "(line 665,col 9)-(line 665,col 54)",
      "(line 667,col 9)-(line 667,col 55)",
      "(line 669,col 9)-(line 669,col 55)",
      "(line 671,col 9)-(line 671,col 55)",
      "(line 673,col 9)-(line 673,col 55)",
      "(line 674,col 9)-(line 674,col 24)",
      "(line 675,col 9)-(line 675,col 54)",
      "(line 676,col 9)-(line 676,col 49)",
      "(line 677,col 9)-(line 677,col 55)",
      "(line 679,col 9)-(line 679,col 54)",
      "(line 680,col 9)-(line 680,col 24)",
      "(line 681,col 9)-(line 681,col 54)",
      "(line 682,col 9)-(line 682,col 41)",
      "(line 683,col 9)-(line 683,col 55)",
      "(line 684,col 9)-(line 684,col 24)",
      "(line 685,col 9)-(line 685,col 54)",
      "(line 686,col 9)-(line 686,col 41)",
      "(line 687,col 9)-(line 687,col 55)",
      "(line 689,col 9)-(line 689,col 54)",
      "(line 690,col 9)-(line 690,col 49)",
      "(line 691,col 9)-(line 691,col 55)",
      "(line 692,col 9)-(line 692,col 51)",
      "(line 693,col 9)-(line 693,col 55)",
      "(line 695,col 9)-(line 695,col 54)",
      "(line 696,col 9)-(line 696,col 73)",
      "(line 699,col 9)-(line 699,col 73)",
      "(line 700,col 9)-(line 700,col 71)",
      "(line 701,col 9)-(line 701,col 77)",
      "(line 702,col 9)-(line 702,col 75)",
      "(line 703,col 9)-(line 703,col 79)",
      "(line 704,col 9)-(line 704,col 81)",
      "(line 705,col 9)-(line 705,col 75)",
      "(line 706,col 9)-(line 706,col 75)",
      "(line 707,col 9)-(line 707,col 18)",
      "(line 708,col 9)-(line 708,col 61)",
      "(line 710,col 9)-(line 710,col 61)",
      "(line 711,col 9)-(line 711,col 20)",
      "(line 712,col 9)-(line 712,col 63)",
      "(line 713,col 9)-(line 713,col 19)",
      "(line 714,col 9)-(line 715,col 83)",
      "(line 716,col 9)-(line 716,col 21)",
      "(line 717,col 9)-(line 717,col 64)",
      "(line 719,col 9)-(line 719,col 66)",
      "(line 721,col 9)-(line 721,col 63)",
      "(line 723,col 9)-(line 723,col 63)",
      "(line 725,col 9)-(line 725,col 63)",
      "(line 726,col 9)-(line 726,col 26)",
      "(line 727,col 9)-(line 727,col 33)",
      "(line 728,col 9)-(line 728,col 26)",
      "(line 729,col 9)-(line 729,col 27)",
      "(line 730,col 9)-(line 730,col 19)",
      "(line 731,col 9)-(line 731,col 20)",
      "(line 732,col 9)-(line 732,col 27)",
      "(line 733,col 9)-(line 733,col 18)",
      "(line 734,col 9)-(line 734,col 16)",
      "(line 735,col 9)-(line 735,col 69)",
      "(line 736,col 9)-(line 736,col 16)",
      "(line 737,col 9)-(line 737,col 69)",
      "(line 738,col 9)-(line 738,col 16)",
      "(line 739,col 9)-(line 739,col 70)",
      "(line 740,col 9)-(line 740,col 16)",
      "(line 741,col 9)-(line 741,col 68)",
      "(line 742,col 9)-(line 742,col 16)",
      "(line 743,col 9)-(line 743,col 69)",
      "(line 744,col 9)-(line 744,col 16)",
      "(line 745,col 9)-(line 745,col 70)",
      "(line 746,col 9)-(line 746,col 16)",
      "(line 747,col 9)-(line 747,col 66)",
      "(line 748,col 9)-(line 748,col 32)",
      "(line 749,col 9)-(line 749,col 70)",
      "(line 751,col 9)-(line 751,col 67)",
      "(line 753,col 9)-(line 753,col 71)",
      "(line 754,col 9)-(line 754,col 32)",
      "(line 755,col 9)-(line 755,col 69)",
      "(line 756,col 9)-(line 756,col 32)",
      "(line 757,col 9)-(line 757,col 69)",
      "(line 758,col 9)-(line 758,col 68)",
      "(line 759,col 9)-(line 759,col 68)",
      "(line 760,col 9)-(line 760,col 93)",
      "(line 761,col 9)-(line 761,col 26)",
      "(line 762,col 9)-(line 762,col 73)",
      "(line 763,col 9)-(line 763,col 72)",
      "(line 764,col 9)-(line 764,col 35)",
      "(line 765,col 9)-(line 765,col 74)",
      "(line 766,col 9)-(line 766,col 95)",
      "(line 768,col 9)-(line 768,col 75)",
      "(line 770,col 9)-(line 770,col 79)",
      "(line 773,col 9)-(line 773,col 71)",
      "(line 774,col 9)-(line 774,col 34)",
      "(line 775,col 9)-(line 775,col 90)",
      "(line 776,col 9)-(line 776,col 35)",
      "(line 777,col 9)-(line 777,col 68)",
      "(line 779,col 9)-(line 779,col 74)",
      "(line 780,col 9)-(line 780,col 31)",
      "(line 781,col 9)-(line 781,col 26)",
      "(line 783,col 9)-(line 783,col 73)",
      "(line 784,col 9)-(line 784,col 28)",
      "(line 785,col 9)-(line 785,col 76)",
      "(line 786,col 9)-(line 786,col 81)",
      "(line 787,col 9)-(line 787,col 81)",
      "(line 788,col 9)-(line 788,col 81)",
      "(line 789,col 9)-(line 789,col 81)",
      "(line 790,col 9)-(line 790,col 81)",
      "(line 791,col 9)-(line 791,col 58)",
      "(line 792,col 9)-(line 792,col 38)",
      "(line 793,col 9)-(line 793,col 67)",
      "(line 794,col 9)-(line 794,col 38)",
      "(line 795,col 9)-(line 795,col 67)",
      "(line 796,col 9)-(line 796,col 38)",
      "(line 797,col 9)-(line 797,col 67)",
      "(line 798,col 9)-(line 798,col 38)",
      "(line 799,col 9)-(line 799,col 67)",
      "(line 800,col 9)-(line 800,col 38)",
      "(line 801,col 9)-(line 801,col 67)",
      "(line 802,col 9)-(line 802,col 38)",
      "(line 803,col 9)-(line 803,col 67)",
      "(line 804,col 9)-(line 804,col 38)",
      "(line 805,col 9)-(line 805,col 67)",
      "(line 806,col 9)-(line 806,col 38)",
      "(line 807,col 9)-(line 807,col 67)",
      "(line 808,col 9)-(line 808,col 38)",
      "(line 809,col 9)-(line 809,col 67)",
      "(line 810,col 9)-(line 810,col 38)",
      "(line 811,col 9)-(line 811,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable(java.lang.Class)",
    "snippet": "private void testIsAssignable(final Class testUnassignableClass) {\n        final Class\u003cConstructor\u003e rawClass \u003d Constructor.class;\n        final Class\u003cInsets\u003e typeArgClass \u003d Insets.class;\n        // Builds a ParameterizedType for Constructor\u003cInsets\u003e\n        final ParameterizedType paramType \u003d TypeUtils.parameterize(rawClass, typeArgClass);\n        assertEquals(rawClass, paramType.getRawType());\n        assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\n\n        assertFalse(testUnassignableClass.isAssignableFrom(paramType.getClass()));\n        assertFalse(paramType.getClass().isAssignableFrom(testUnassignableClass));\n\n        final GenericArrayType arrayType \u003d TypeUtils.genericArrayType(paramType);\n        assertFalse(TypeUtils.isAssignable(arrayType, paramType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", arrayType, paramType));\n        assertFalse(TypeUtils.isAssignable(paramType, arrayType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, arrayType));\n    }",
    "begin_line": 814,
    "end_line": 830,
    "comment": "",
    "child_ranges": [
      "(line 815,col 9)-(line 815,col 62)",
      "(line 816,col 9)-(line 816,col 56)",
      "(line 818,col 9)-(line 818,col 91)",
      "(line 819,col 9)-(line 819,col 55)",
      "(line 820,col 9)-(line 820,col 74)",
      "(line 822,col 9)-(line 822,col 82)",
      "(line 823,col 9)-(line 823,col 82)",
      "(line 825,col 9)-(line 825,col 81)",
      "(line 826,col 9)-(line 827,col 93)",
      "(line 828,col 9)-(line 829,col 93)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignableGenericArrayTypeToObject()",
    "snippet": "@Test\n    public void testIsAssignableGenericArrayTypeToObject() {\n        final Class\u003cConstructor\u003e rawClass \u003d Constructor.class;\n        final Class\u003cInsets\u003e typeArgClass \u003d Insets.class;\n        // Builds a ParameterizedType for Constructor\u003cInsets\u003e\n        final ParameterizedType paramType \u003d TypeUtils.parameterize(rawClass, typeArgClass);\n        assertEquals(rawClass, paramType.getRawType());\n        assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\n\n        assertTrue(Object.class.isAssignableFrom(paramType.getClass()));\n        assertFalse(paramType.getClass().isAssignableFrom(Object.class));\n\n        final Type testType \u003d Object.class;\n        assertTrue(TypeUtils.isAssignable(paramType, testType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\n        assertFalse(TypeUtils.isAssignable(testType, paramType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\n    }",
    "begin_line": 833,
    "end_line": 849,
    "comment": "",
    "child_ranges": [
      "(line 834,col 9)-(line 834,col 62)",
      "(line 835,col 9)-(line 835,col 56)",
      "(line 837,col 9)-(line 837,col 91)",
      "(line 838,col 9)-(line 838,col 55)",
      "(line 839,col 9)-(line 839,col 74)",
      "(line 841,col 9)-(line 841,col 72)",
      "(line 842,col 9)-(line 842,col 73)",
      "(line 844,col 9)-(line 844,col 43)",
      "(line 845,col 9)-(line 846,col 92)",
      "(line 847,col 9)-(line 848,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignableGenericArrayTypeToParameterizedType()",
    "snippet": "@Test\n    public void testIsAssignableGenericArrayTypeToParameterizedType() {\n        final Class\u003cConstructor\u003e rawClass \u003d Constructor.class;\n        final Class\u003cInsets\u003e typeArgClass \u003d Insets.class;\n        // Builds a ParameterizedType for Constructor\u003cInsets\u003e\n        final ParameterizedType paramType \u003d TypeUtils.parameterize(rawClass, typeArgClass);\n        assertEquals(rawClass, paramType.getRawType());\n        assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\n\n        assertFalse(GenericArrayType.class.isAssignableFrom(paramType.getClass()));\n        assertFalse(paramType.getClass().isAssignableFrom(GenericArrayType.class));\n\n        final GenericArrayType testType \u003d TypeUtils.genericArrayType(paramType);\n        assertFalse(TypeUtils.isAssignable(paramType, testType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\n        assertFalse(TypeUtils.isAssignable(testType, paramType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\n    }",
    "begin_line": 852,
    "end_line": 868,
    "comment": "",
    "child_ranges": [
      "(line 853,col 9)-(line 853,col 62)",
      "(line 854,col 9)-(line 854,col 56)",
      "(line 856,col 9)-(line 856,col 91)",
      "(line 857,col 9)-(line 857,col 55)",
      "(line 858,col 9)-(line 858,col 74)",
      "(line 860,col 9)-(line 860,col 83)",
      "(line 861,col 9)-(line 861,col 83)",
      "(line 863,col 9)-(line 863,col 80)",
      "(line 864,col 9)-(line 865,col 92)",
      "(line 866,col 9)-(line 867,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignableGenericArrayTypeToWildercardType()",
    "snippet": "@Test\n    @Disabled(\"TODO\")\n    public void testIsAssignableGenericArrayTypeToWildercardType() {\n        final Class\u003cConstructor\u003e rawClass \u003d Constructor.class;\n        final Class\u003cInsets\u003e typeArgClass \u003d Insets.class;\n        // Builds a ParameterizedType for Constructor\u003cInsets\u003e\n        final ParameterizedType paramType \u003d TypeUtils.parameterize(rawClass, typeArgClass);\n        assertEquals(rawClass, paramType.getRawType());\n        assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\n\n        assertFalse(WildcardType.class.isAssignableFrom(paramType.getClass()));\n        assertFalse(paramType.getClass().isAssignableFrom(WildcardType.class));\n\n        final WildcardType testType \u003d TypeUtils.WILDCARD_ALL;\n        // TODO This test returns true unlike the test above.\n        // Is this a bug in this test or in the main code?\n        assertFalse(TypeUtils.isAssignable(paramType, testType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\n        assertFalse(TypeUtils.isAssignable(testType, paramType),\n                () -\u003e String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\n    }",
    "begin_line": 872,
    "end_line": 890,
    "comment": "",
    "child_ranges": [
      "(line 873,col 9)-(line 873,col 62)",
      "(line 874,col 9)-(line 874,col 56)",
      "(line 876,col 9)-(line 876,col 91)",
      "(line 877,col 9)-(line 877,col 55)",
      "(line 878,col 9)-(line 878,col 74)",
      "(line 880,col 9)-(line 880,col 79)",
      "(line 881,col 9)-(line 881,col 79)",
      "(line 883,col 9)-(line 883,col 61)",
      "(line 886,col 9)-(line 887,col 92)",
      "(line 888,col 9)-(line 889,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance()",
    "snippet": "@SuppressWarnings(\"boxing\") testIsInstance() throws SecurityException, NoSuchFieldException {\n        final Type intComparableType \u003d getClass().getField(\"intComparable\").getGenericType();\n        final Type uriComparableType \u003d getClass().getField(\"uriComparable\").getGenericType();\n        intComparable \u003d 1;\n        assertTrue(TypeUtils.isInstance(1, intComparableType));\n        // uriComparable \u003d 1;\n        assertFalse(TypeUtils.isInstance(1, uriComparableType));\n    }",
    "begin_line": 894,
    "end_line": 901,
    "comment": "",
    "child_ranges": [
      "(line 895,col 9)-(line 895,col 93)",
      "(line 896,col 9)-(line 896,col 93)",
      "(line 897,col 9)-(line 897,col 26)",
      "(line 898,col 9)-(line 898,col 63)",
      "(line 900,col 9)-(line 900,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLang1114()",
    "snippet": "@Test\n    public void testLang1114() throws Exception {\n        final Type nonWildcardType \u003d getClass().getDeclaredField(\"wildcardComparable\").getGenericType();\n        final Type wildcardType \u003d ((ParameterizedType) nonWildcardType).getActualTypeArguments()[0];\n\n        assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));\n        assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));\n    }",
    "begin_line": 904,
    "end_line": 910,
    "comment": "",
    "child_ranges": [
      "(line 905,col 9)-(line 905,col 104)",
      "(line 906,col 9)-(line 906,col 100)",
      "(line 908,col 9)-(line 908,col 69)",
      "(line 909,col 9)-(line 909,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLANG1190()",
    "snippet": "@Test\n    public void testLANG1190() throws Exception {\n        final Type fromType \u003d ClassWithSuperClassWithGenericType.class.getDeclaredMethod(\"methodWithGenericReturnType\").getGenericReturnType();\n        final Type failingToType \u003d TypeUtils.wildcardType().withLowerBounds(ClassWithSuperClassWithGenericType.class).build();\n\n        assertTrue(TypeUtils.isAssignable(fromType, failingToType));\n    }",
    "begin_line": 913,
    "end_line": 918,
    "comment": "",
    "child_ranges": [
      "(line 914,col 9)-(line 914,col 143)",
      "(line 915,col 9)-(line 915,col 126)",
      "(line 917,col 9)-(line 917,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLANG1348()",
    "snippet": "@Test\n    public void testLANG1348() throws Exception {\n        final Method method \u003d Enum.class.getMethod(\"valueOf\", Class.class, String.class);\n        assertEquals(\"T extends java.lang.Enum\u003cT\u003e\", TypeUtils.toString(method.getGenericReturnType()));\n    }",
    "begin_line": 921,
    "end_line": 924,
    "comment": "",
    "child_ranges": [
      "(line 922,col 9)-(line 922,col 89)",
      "(line 923,col 9)-(line 923,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLang820()",
    "snippet": "@Test\n    public void testLang820() {\n        final Type[] typeArray \u003d {String.class, String.class};\n        final Type[] expectedArray \u003d {String.class};\n        assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));\n    }",
    "begin_line": 927,
    "end_line": 931,
    "comment": "",
    "child_ranges": [
      "(line 928,col 9)-(line 928,col 62)",
      "(line 929,col 9)-(line 929,col 52)",
      "(line 930,col 9)-(line 930,col 84)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testLowerBoundedWildcardType()",
    "snippet": "@Test\n    public void testLowerBoundedWildcardType() {\n       final WildcardType lowerBounded \u003d TypeUtils.wildcardType().withLowerBounds(java.sql.Date.class).build();\n       assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));\n       assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), lowerBounded.toString());\n\n       final TypeVariable\u003cClass\u003cIterable\u003e\u003e iterableT0 \u003d Iterable.class.getTypeParameters()[0];\n       final WildcardType lowerTypeVariable \u003d TypeUtils.wildcardType().withLowerBounds(iterableT0).build();\n       assertEquals(String.format(\"? super %s\", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable));\n       assertEquals(String.format(\"? super %s\", iterableT0.getName()), lowerTypeVariable.toString());\n    }",
    "begin_line": 934,
    "end_line": 943,
    "comment": "",
    "child_ranges": [
      "(line 935,col 8)-(line 935,col 111)",
      "(line 936,col 8)-(line 936,col 114)",
      "(line 937,col 8)-(line 937,col 105)",
      "(line 939,col 8)-(line 939,col 94)",
      "(line 940,col 8)-(line 940,col 107)",
      "(line 941,col 8)-(line 941,col 110)",
      "(line 942,col 8)-(line 942,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize()",
    "snippet": "@Test\n    public void testParameterize() throws Exception {\n        final ParameterizedType stringComparableType \u003d TypeUtils.parameterize(Comparable.class, String.class);\n        assertTrue(TypeUtils.equals(getClass().getField(\"stringComparable\").getGenericType(),\n            stringComparableType));\n        assertEquals(\"java.lang.Comparable\u003cjava.lang.String\u003e\", stringComparableType.toString());\n    }",
    "begin_line": 946,
    "end_line": 951,
    "comment": "",
    "child_ranges": [
      "(line 947,col 9)-(line 947,col 110)",
      "(line 948,col 9)-(line 949,col 35)",
      "(line 950,col 9)-(line 950,col 96)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeNarrowerTypeArray()",
    "snippet": "@Test\n    public void testParameterizeNarrowerTypeArray() {\n        final TypeVariable\u003c?\u003e[] variables \u003d ArrayList.class.getTypeParameters();\n        final ParameterizedType parameterizedType \u003d TypeUtils.parameterize(ArrayList.class, variables);\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e mapping \u003d Collections.\u003cTypeVariable\u003c?\u003e, Type\u003esingletonMap(variables[0], String.class);\n        final Type unrolled \u003d TypeUtils.unrollVariables(mapping, parameterizedType);\n        assertEquals(TypeUtils.parameterize(ArrayList.class, String.class), unrolled);\n    }",
    "begin_line": 954,
    "end_line": 960,
    "comment": "",
    "child_ranges": [
      "(line 955,col 9)-(line 955,col 80)",
      "(line 956,col 9)-(line 956,col 103)",
      "(line 957,col 9)-(line 957,col 127)",
      "(line 958,col 9)-(line 958,col 84)",
      "(line 959,col 9)-(line 959,col 86)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeNullPointerException()",
    "snippet": "@Test\n    public void testParameterizeNullPointerException() {\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterize(null, Collections.emptyMap()));\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e nullTypeVariableMap \u003d null;\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterize(String.class, nullTypeVariableMap));\n    }",
    "begin_line": 963,
    "end_line": 967,
    "comment": "",
    "child_ranges": [
      "(line 964,col 9)-(line 964,col 109)",
      "(line 965,col 9)-(line 965,col 68)",
      "(line 966,col 9)-(line 966,col 114)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeVarArgsNullPointerException()",
    "snippet": "@Test\n    public void testParameterizeVarArgsNullPointerException() {\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterize(null));\n    }",
    "begin_line": 970,
    "end_line": 972,
    "comment": "",
    "child_ranges": [
      "(line 971,col 9)-(line 971,col 85)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner()",
    "snippet": "@Test\n    public void testParameterizeWithOwner() throws Exception {\n        final Type owner \u003d TypeUtils.parameterize(TypeUtilsTest.class, String.class);\n        final ParameterizedType dat2Type \u003d TypeUtils.parameterizeWithOwner(owner, That.class, String.class, String.class);\n        assertTrue(TypeUtils.equals(getClass().getField(\"dat2\").getGenericType(), dat2Type));\n    }",
    "begin_line": 975,
    "end_line": 979,
    "comment": "",
    "child_ranges": [
      "(line 976,col 9)-(line 976,col 85)",
      "(line 977,col 9)-(line 977,col 122)",
      "(line 978,col 9)-(line 978,col 93)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner3ArgsNullPointerException()",
    "snippet": "@Test\n    public void testParameterizeWithOwner3ArgsNullPointerException() {\n        final Type owner \u003d TypeUtils.parameterize(TypeUtilsTest.class, String.class);\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterizeWithOwner(owner, null, String.class));\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e nullTypeVariableMap \u003d null;\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterizeWithOwner(owner, That.class, nullTypeVariableMap));\n    }",
    "begin_line": 982,
    "end_line": 987,
    "comment": "",
    "child_ranges": [
      "(line 983,col 9)-(line 983,col 85)",
      "(line 984,col 9)-(line 984,col 115)",
      "(line 985,col 9)-(line 985,col 68)",
      "(line 986,col 9)-(line 986,col 128)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwnerVarArgsNullPointerException()",
    "snippet": "@Test\n    public void testParameterizeWithOwnerVarArgsNullPointerException() {\n        final Type owner \u003d TypeUtils.parameterize(TypeUtilsTest.class, String.class);\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.parameterizeWithOwner(owner, null));\n    }",
    "begin_line": 990,
    "end_line": 993,
    "comment": "",
    "child_ranges": [
      "(line 991,col 9)-(line 991,col 85)",
      "(line 992,col 9)-(line 992,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testToLongString()",
    "snippet": "@Test\n    public void testToLongString() {\n        assertEquals(getClass().getName() + \":B\", TypeUtils.toLongString(getClass().getTypeParameters()[0]));\n\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.toLongString(null));\n    }",
    "begin_line": 996,
    "end_line": 1000,
    "comment": "",
    "child_ranges": [
      "(line 997,col 9)-(line 997,col 109)",
      "(line 999,col 9)-(line 999,col 85)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testToStringLang1311()",
    "snippet": "@Test\n    public void testToStringLang1311() {\n        assertEquals(\"int[]\", TypeUtils.toString(int[].class));\n        assertEquals(\"java.lang.Integer[]\", TypeUtils.toString(Integer[].class));\n        final Field stringListField \u003d FieldUtils.getDeclaredField(getClass(), \"stringListArray\");\n        assertEquals(\"java.util.List\u003cjava.lang.String\u003e[]\", TypeUtils.toString(stringListField.getGenericType()));\n    }",
    "begin_line": 1003,
    "end_line": 1008,
    "comment": "",
    "child_ranges": [
      "(line 1004,col 9)-(line 1004,col 63)",
      "(line 1005,col 9)-(line 1005,col 81)",
      "(line 1006,col 9)-(line 1006,col 97)",
      "(line 1007,col 9)-(line 1007,col 113)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables()",
    "snippet": "@Test\n    public void testTypesSatisfyVariables() throws SecurityException,\n            NoSuchMethodException {\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d new HashMap\u003c\u003e();\n        final Integer max \u003d TypeUtilsTest.\u003cInteger\u003estub();\n        typeVarAssigns.put(getClass().getMethod(\"stub\").getTypeParameters()[0], Integer.class);\n        assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub2\").getTypeParameters()[0], Integer.class);\n        assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub3\").getTypeParameters()[0], Integer.class);\n        assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n\n        assertThrows(NullPointerException.class, () -\u003e TypeUtils.typesSatisfyVariables(null));\n    }",
    "begin_line": 1011,
    "end_line": 1025,
    "comment": "",
    "child_ranges": [
      "(line 1013,col 9)-(line 1013,col 74)",
      "(line 1014,col 9)-(line 1014,col 58)",
      "(line 1015,col 9)-(line 1015,col 95)",
      "(line 1016,col 9)-(line 1016,col 68)",
      "(line 1017,col 9)-(line 1017,col 31)",
      "(line 1018,col 9)-(line 1018,col 96)",
      "(line 1019,col 9)-(line 1019,col 68)",
      "(line 1020,col 9)-(line 1020,col 31)",
      "(line 1021,col 9)-(line 1021,col 96)",
      "(line 1022,col 9)-(line 1022,col 68)",
      "(line 1024,col 9)-(line 1024,col 94)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testUnboundedWildcardType()",
    "snippet": "@Test\n    public void testUnboundedWildcardType() {\n        final WildcardType unbounded \u003d TypeUtils.wildcardType().withLowerBounds((Type) null).withUpperBounds().build();\n        assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded));\n        assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded));\n        assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded));\n        assertEquals(\"?\", TypeUtils.toString(unbounded));\n        assertEquals(\"?\", unbounded.toString());\n\n        assertThrows(NullPointerException.class,\n                () -\u003e TypeUtils.getImplicitLowerBounds(null));\n        assertThrows(NullPointerException.class,\n                () -\u003e TypeUtils.getImplicitUpperBounds(null));\n    }",
    "begin_line": 1028,
    "end_line": 1040,
    "comment": "",
    "child_ranges": [
      "(line 1029,col 9)-(line 1029,col 119)",
      "(line 1030,col 9)-(line 1030,col 72)",
      "(line 1031,col 9)-(line 1031,col 100)",
      "(line 1032,col 9)-(line 1032,col 92)",
      "(line 1033,col 9)-(line 1033,col 57)",
      "(line 1034,col 9)-(line 1034,col 48)",
      "(line 1036,col 9)-(line 1037,col 62)",
      "(line 1038,col 9)-(line 1039,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testWildcardType()",
    "snippet": "@Test\n    public void testWildcardType() throws Exception {\n        final WildcardType simpleWildcard \u003d TypeUtils.wildcardType().withUpperBounds(String.class).build();\n        final Field cClass \u003d AClass.class.getField(\"cClass\");\n        assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0],\n            simpleWildcard));\n        assertEquals(String.format(\"? extends %s\", String.class.getName()), TypeUtils.toString(simpleWildcard));\n        assertEquals(String.format(\"? extends %s\", String.class.getName()), simpleWildcard.toString());\n    }",
    "begin_line": 1043,
    "end_line": 1050,
    "comment": "",
    "child_ranges": [
      "(line 1044,col 9)-(line 1044,col 107)",
      "(line 1045,col 9)-(line 1045,col 61)",
      "(line 1046,col 9)-(line 1047,col 29)",
      "(line 1048,col 9)-(line 1048,col 112)",
      "(line 1049,col 9)-(line 1049,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/reflect/TypeUtilsTest.java",
    "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testWrap()",
    "snippet": "@Test\n    public void testWrap() {\n        final Type t \u003d getClass().getTypeParameters()[0];\n        assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType()));\n\n        assertEquals(String.class, TypeUtils.wrap(String.class).getType());\n    }",
    "begin_line": 1053,
    "end_line": 1058,
    "comment": "",
    "child_ranges": [
      "(line 1054,col 9)-(line 1054,col 57)",
      "(line 1055,col 9)-(line 1055,col 69)",
      "(line 1057,col 9)-(line 1057,col 75)"
    ]
  }
]