[
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testConstructors()",
    "snippet": "@Test\n    public void testConstructors() {\n        final StrBuilder sb0 \u003d new StrBuilder();\n        assertEquals(32, sb0.capacity());\n        assertEquals(0, sb0.length());\n        assertEquals(0, sb0.size());\n\n        final StrBuilder sb1 \u003d new StrBuilder(32);\n        assertEquals(32, sb1.capacity());\n        assertEquals(0, sb1.length());\n        assertEquals(0, sb1.size());\n\n        final StrBuilder sb2 \u003d new StrBuilder(0);\n        assertEquals(32, sb2.capacity());\n        assertEquals(0, sb2.length());\n        assertEquals(0, sb2.size());\n\n        final StrBuilder sb3 \u003d new StrBuilder(-1);\n        assertEquals(32, sb3.capacity());\n        assertEquals(0, sb3.length());\n        assertEquals(0, sb3.size());\n\n        final StrBuilder sb4 \u003d new StrBuilder(1);\n        assertEquals(1, sb4.capacity());\n        assertEquals(0, sb4.length());\n        assertEquals(0, sb4.size());\n\n        final StrBuilder sb5 \u003d new StrBuilder((String) null);\n        assertEquals(32, sb5.capacity());\n        assertEquals(0, sb5.length());\n        assertEquals(0, sb5.size());\n\n        final StrBuilder sb6 \u003d new StrBuilder(\"\");\n        assertEquals(32, sb6.capacity());\n        assertEquals(0, sb6.length());\n        assertEquals(0, sb6.size());\n\n        final StrBuilder sb7 \u003d new StrBuilder(\"foo\");\n        assertEquals(35, sb7.capacity());\n        assertEquals(3, sb7.length());\n        assertEquals(3, sb7.size());\n    }",
    "begin_line": 42,
    "end_line": 82,
    "comment": "",
    "child_ranges": [
      "(line 43,col 9)-(line 43,col 48)",
      "(line 44,col 9)-(line 44,col 41)",
      "(line 45,col 9)-(line 45,col 38)",
      "(line 46,col 9)-(line 46,col 36)",
      "(line 48,col 9)-(line 48,col 50)",
      "(line 49,col 9)-(line 49,col 41)",
      "(line 50,col 9)-(line 50,col 38)",
      "(line 51,col 9)-(line 51,col 36)",
      "(line 53,col 9)-(line 53,col 49)",
      "(line 54,col 9)-(line 54,col 41)",
      "(line 55,col 9)-(line 55,col 38)",
      "(line 56,col 9)-(line 56,col 36)",
      "(line 58,col 9)-(line 58,col 50)",
      "(line 59,col 9)-(line 59,col 41)",
      "(line 60,col 9)-(line 60,col 38)",
      "(line 61,col 9)-(line 61,col 36)",
      "(line 63,col 9)-(line 63,col 49)",
      "(line 64,col 9)-(line 64,col 40)",
      "(line 65,col 9)-(line 65,col 38)",
      "(line 66,col 9)-(line 66,col 36)",
      "(line 68,col 9)-(line 68,col 61)",
      "(line 69,col 9)-(line 69,col 41)",
      "(line 70,col 9)-(line 70,col 38)",
      "(line 71,col 9)-(line 71,col 36)",
      "(line 73,col 9)-(line 73,col 50)",
      "(line 74,col 9)-(line 74,col 41)",
      "(line 75,col 9)-(line 75,col 38)",
      "(line 76,col 9)-(line 76,col 36)",
      "(line 78,col 9)-(line 78,col 53)",
      "(line 79,col 9)-(line 79,col 41)",
      "(line 80,col 9)-(line 80,col 38)",
      "(line 81,col 9)-(line 81,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testChaining()",
    "snippet": "@Test\n    public void testChaining() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertSame(sb, sb.setNewLineText(null));\n        assertSame(sb, sb.setNullText(null));\n        assertSame(sb, sb.setLength(1));\n        assertSame(sb, sb.setCharAt(0, \u0027a\u0027));\n        assertSame(sb, sb.ensureCapacity(0));\n        assertSame(sb, sb.minimizeCapacity());\n        assertSame(sb, sb.clear());\n        assertSame(sb, sb.reverse());\n        assertSame(sb, sb.trim());\n    }",
    "begin_line": 86,
    "end_line": 97,
    "comment": "",
    "child_ranges": [
      "(line 87,col 9)-(line 87,col 47)",
      "(line 88,col 9)-(line 88,col 48)",
      "(line 89,col 9)-(line 89,col 45)",
      "(line 90,col 9)-(line 90,col 40)",
      "(line 91,col 9)-(line 91,col 45)",
      "(line 92,col 9)-(line 92,col 45)",
      "(line 93,col 9)-(line 93,col 46)",
      "(line 94,col 9)-(line 94,col 35)",
      "(line 95,col 9)-(line 95,col 37)",
      "(line 96,col 9)-(line 96,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromReader()",
    "snippet": "@Test\n    public void testReadFromReader() throws Exception {\n        String s \u003d \"\";\n        for (int i \u003d 0; i \u003c 100; ++i) {\n            final StrBuilder sb \u003d new StrBuilder();\n            final int len \u003d sb.readFrom(new StringReader(s));\n\n            assertEquals(s.length(), len);\n            assertEquals(s, sb.toString());\n\n            s +\u003d Integer.toString(i);\n        }\n    }",
    "begin_line": 101,
    "end_line": 112,
    "comment": "",
    "child_ranges": [
      "(line 102,col 9)-(line 102,col 22)",
      "(line 103,col 9)-(line 111,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromReaderAppendsToEnd()",
    "snippet": "@Test\n    public void testReadFromReaderAppendsToEnd() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"Test\");\n        sb.readFrom(new StringReader(\" 123\"));\n        assertEquals(\"Test 123\", sb.toString());\n    }",
    "begin_line": 115,
    "end_line": 119,
    "comment": "",
    "child_ranges": [
      "(line 116,col 9)-(line 116,col 53)",
      "(line 117,col 9)-(line 117,col 46)",
      "(line 118,col 9)-(line 118,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBuffer()",
    "snippet": "@Test\n    public void testReadFromCharBuffer() throws Exception {\n        String s \u003d \"\";\n        for (int i \u003d 0; i \u003c 100; ++i) {\n            final StrBuilder sb \u003d new StrBuilder();\n            final int len \u003d sb.readFrom(CharBuffer.wrap(s));\n\n            assertEquals(s.length(), len);\n            assertEquals(s, sb.toString());\n\n            s +\u003d Integer.toString(i);\n        }\n    }",
    "begin_line": 122,
    "end_line": 133,
    "comment": "",
    "child_ranges": [
      "(line 123,col 9)-(line 123,col 22)",
      "(line 124,col 9)-(line 132,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()",
    "snippet": "@Test\n    public void testReadFromCharBufferAppendsToEnd() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"Test\");\n        sb.readFrom(CharBuffer.wrap(\" 123\"));\n        assertEquals(\"Test 123\", sb.toString());\n    }",
    "begin_line": 136,
    "end_line": 140,
    "comment": "",
    "child_ranges": [
      "(line 137,col 9)-(line 137,col 53)",
      "(line 138,col 9)-(line 138,col 45)",
      "(line 139,col 9)-(line 139,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadable()",
    "snippet": "@Test\n    public void testReadFromReadable() throws Exception {\n        String s \u003d \"\";\n        for (int i \u003d 0; i \u003c 100; ++i) {\n            final StrBuilder sb \u003d new StrBuilder();\n            final int len \u003d sb.readFrom(new MockReadable(s));\n\n            assertEquals(s.length(), len);\n            assertEquals(s, sb.toString());\n\n            s +\u003d Integer.toString(i);\n        }\n    }",
    "begin_line": 143,
    "end_line": 154,
    "comment": "",
    "child_ranges": [
      "(line 144,col 9)-(line 144,col 22)",
      "(line 145,col 9)-(line 153,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadableAppendsToEnd()",
    "snippet": "@Test\n    public void testReadFromReadableAppendsToEnd() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"Test\");\n        sb.readFrom(new MockReadable(\" 123\"));\n        assertEquals(\"Test 123\", sb.toString());\n    }",
    "begin_line": 157,
    "end_line": 161,
    "comment": "",
    "child_ranges": [
      "(line 158,col 9)-(line 158,col 53)",
      "(line 159,col 9)-(line 159,col 46)",
      "(line 160,col 9)-(line 160,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.MockReadable(java.lang.String)",
    "snippet": "public MockReadable(final String src) {\n            this.src \u003d CharBuffer.wrap(src);\n        }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "",
    "child_ranges": [
      "(line 168,col 13)-(line 168,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.read(java.nio.CharBuffer)",
    "snippet": "@Override\n        public int read(final CharBuffer cb) throws IOException {\n            return src.read(cb);\n        }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "child_ranges": [
      "(line 173,col 13)-(line 173,col 32)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetSetNewLineText()",
    "snippet": "@Test\n    public void testGetSetNewLineText() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(null, sb.getNewLineText());\n\n        sb.setNewLineText(\"#\");\n        assertEquals(\"#\", sb.getNewLineText());\n\n        sb.setNewLineText(\"\");\n        assertEquals(\"\", sb.getNewLineText());\n\n        sb.setNewLineText((String) null);\n        assertEquals(null, sb.getNewLineText());\n    }",
    "begin_line": 179,
    "end_line": 191,
    "comment": "",
    "child_ranges": [
      "(line 180,col 9)-(line 180,col 47)",
      "(line 181,col 9)-(line 181,col 48)",
      "(line 183,col 9)-(line 183,col 31)",
      "(line 184,col 9)-(line 184,col 47)",
      "(line 186,col 9)-(line 186,col 30)",
      "(line 187,col 9)-(line 187,col 46)",
      "(line 189,col 9)-(line 189,col 41)",
      "(line 190,col 9)-(line 190,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetSetNullText()",
    "snippet": "@Test\n    public void testGetSetNullText() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"null\");\n        assertEquals(\"null\", sb.getNullText());\n\n        sb.setNullText(\"\");\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"NULL\");\n        assertEquals(\"NULL\", sb.getNullText());\n\n        sb.setNullText((String) null);\n        assertEquals(null, sb.getNullText());\n    }",
    "begin_line": 195,
    "end_line": 210,
    "comment": "",
    "child_ranges": [
      "(line 196,col 9)-(line 196,col 47)",
      "(line 197,col 9)-(line 197,col 45)",
      "(line 199,col 9)-(line 199,col 31)",
      "(line 200,col 9)-(line 200,col 47)",
      "(line 202,col 9)-(line 202,col 27)",
      "(line 203,col 9)-(line 203,col 45)",
      "(line 205,col 9)-(line 205,col 31)",
      "(line 206,col 9)-(line 206,col 47)",
      "(line 208,col 9)-(line 208,col 38)",
      "(line 209,col 9)-(line 209,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength()",
    "snippet": "@Test\n    public void testCapacityAndLength() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(32, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.ensureCapacity(32);\n        assertTrue(sb.capacity() \u003e\u003d 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"foo\");\n        assertTrue(sb.capacity() \u003e\u003d 32);\n        assertEquals(3, sb.length());\n        assertEquals(3, sb.size());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.clear();\n        assertTrue(sb.capacity() \u003e\u003d 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"123456789012345678901234567890123\");\n        assertTrue(sb.capacity() \u003e 32);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.ensureCapacity(16);\n        assertTrue(sb.capacity() \u003e 16);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.minimizeCapacity();\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.setLength(33);\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.setLength(16);\n        assertTrue(sb.capacity() \u003e\u003d 16);\n        assertEquals(16, sb.length());\n        assertEquals(16, sb.size());\n        assertEquals(\"1234567890123456\", sb.toString());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.setLength(32);\n        assertTrue(sb.capacity() \u003e\u003d 32);\n        assertEquals(32, sb.length());\n        assertEquals(32, sb.size());\n        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n        assertTrue(sb.isEmpty() \u003d\u003d false);\n\n        sb.setLength(0);\n        assertTrue(sb.capacity() \u003e\u003d 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n    }",
    "begin_line": 214,
    "end_line": 295,
    "comment": "",
    "child_ranges": [
      "(line 215,col 9)-(line 215,col 47)",
      "(line 216,col 9)-(line 216,col 40)",
      "(line 217,col 9)-(line 217,col 37)",
      "(line 218,col 9)-(line 218,col 35)",
      "(line 219,col 9)-(line 219,col 33)",
      "(line 221,col 9)-(line 221,col 30)",
      "(line 222,col 9)-(line 222,col 39)",
      "(line 223,col 9)-(line 223,col 37)",
      "(line 224,col 9)-(line 224,col 35)",
      "(line 225,col 9)-(line 225,col 33)",
      "(line 227,col 9)-(line 227,col 30)",
      "(line 228,col 9)-(line 228,col 40)",
      "(line 229,col 9)-(line 229,col 37)",
      "(line 230,col 9)-(line 230,col 35)",
      "(line 231,col 9)-(line 231,col 33)",
      "(line 233,col 9)-(line 233,col 25)",
      "(line 234,col 9)-(line 234,col 40)",
      "(line 235,col 9)-(line 235,col 37)",
      "(line 236,col 9)-(line 236,col 35)",
      "(line 237,col 9)-(line 237,col 42)",
      "(line 239,col 9)-(line 239,col 19)",
      "(line 240,col 9)-(line 240,col 40)",
      "(line 241,col 9)-(line 241,col 37)",
      "(line 242,col 9)-(line 242,col 35)",
      "(line 243,col 9)-(line 243,col 33)",
      "(line 245,col 9)-(line 245,col 55)",
      "(line 246,col 9)-(line 246,col 39)",
      "(line 247,col 9)-(line 247,col 38)",
      "(line 248,col 9)-(line 248,col 36)",
      "(line 249,col 9)-(line 249,col 42)",
      "(line 251,col 9)-(line 251,col 30)",
      "(line 252,col 9)-(line 252,col 39)",
      "(line 253,col 9)-(line 253,col 38)",
      "(line 254,col 9)-(line 254,col 36)",
      "(line 255,col 9)-(line 255,col 42)",
      "(line 257,col 9)-(line 257,col 30)",
      "(line 258,col 9)-(line 258,col 40)",
      "(line 259,col 9)-(line 259,col 38)",
      "(line 260,col 9)-(line 260,col 36)",
      "(line 261,col 9)-(line 261,col 42)",
      "(line 263,col 9)-(line 268,col 9)",
      "(line 270,col 9)-(line 270,col 25)",
      "(line 271,col 9)-(line 271,col 40)",
      "(line 272,col 9)-(line 272,col 38)",
      "(line 273,col 9)-(line 273,col 36)",
      "(line 274,col 9)-(line 274,col 42)",
      "(line 276,col 9)-(line 276,col 25)",
      "(line 277,col 9)-(line 277,col 40)",
      "(line 278,col 9)-(line 278,col 38)",
      "(line 279,col 9)-(line 279,col 36)",
      "(line 280,col 9)-(line 280,col 56)",
      "(line 281,col 9)-(line 281,col 42)",
      "(line 283,col 9)-(line 283,col 25)",
      "(line 284,col 9)-(line 284,col 40)",
      "(line 285,col 9)-(line 285,col 38)",
      "(line 286,col 9)-(line 286,col 36)",
      "(line 287,col 9)-(line 287,col 88)",
      "(line 288,col 9)-(line 288,col 42)",
      "(line 290,col 9)-(line 290,col 24)",
      "(line 291,col 9)-(line 291,col 40)",
      "(line 292,col 9)-(line 292,col 37)",
      "(line 293,col 9)-(line 293,col 35)",
      "(line 294,col 9)-(line 294,col 33)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLength()",
    "snippet": "@Test\n    public void testLength() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(0, sb.length());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.length());\n    }",
    "begin_line": 299,
    "end_line": 305,
    "comment": "",
    "child_ranges": [
      "(line 300,col 9)-(line 300,col 47)",
      "(line 301,col 9)-(line 301,col 37)",
      "(line 303,col 9)-(line 303,col 27)",
      "(line 304,col 9)-(line 304,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSetLength()",
    "snippet": "@Test\n    public void testSetLength() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.append(\"Hello\");\n        sb.setLength(2);  // shorten\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(2);  // no change\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(3);  // lengthen\n        assertEquals(\"He\\0\", sb.toString());\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
    "begin_line": 308,
    "end_line": 324,
    "comment": "",
    "child_ranges": [
      "(line 309,col 9)-(line 309,col 47)",
      "(line 310,col 9)-(line 310,col 27)",
      "(line 311,col 9)-(line 311,col 24)",
      "(line 312,col 9)-(line 312,col 42)",
      "(line 313,col 9)-(line 313,col 24)",
      "(line 314,col 9)-(line 314,col 42)",
      "(line 315,col 9)-(line 315,col 24)",
      "(line 316,col 9)-(line 316,col 44)",
      "(line 318,col 9)-(line 323,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCapacity()",
    "snippet": "@Test\n    public void testCapacity() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(sb.buffer.length, sb.capacity());\n        \n        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n        assertEquals(sb.buffer.length, sb.capacity());\n    }",
    "begin_line": 328,
    "end_line": 334,
    "comment": "",
    "child_ranges": [
      "(line 329,col 9)-(line 329,col 47)",
      "(line 330,col 9)-(line 330,col 54)",
      "(line 332,col 9)-(line 332,col 62)",
      "(line 333,col 9)-(line 333,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity()",
    "snippet": "@Test\n    public void testEnsureCapacity() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.ensureCapacity(2);\n        assertTrue(sb.capacity() \u003e\u003d 2);\n        \n        sb.ensureCapacity(-1);\n        assertTrue(sb.capacity() \u003e\u003d 0);\n        \n        sb.append(\"HelloWorld\");\n        sb.ensureCapacity(40);\n        assertTrue(sb.capacity() \u003e\u003d 40);\n    }",
    "begin_line": 337,
    "end_line": 348,
    "comment": "",
    "child_ranges": [
      "(line 338,col 9)-(line 338,col 47)",
      "(line 339,col 9)-(line 339,col 29)",
      "(line 340,col 9)-(line 340,col 39)",
      "(line 342,col 9)-(line 342,col 30)",
      "(line 343,col 9)-(line 343,col 39)",
      "(line 345,col 9)-(line 345,col 32)",
      "(line 346,col 9)-(line 346,col 30)",
      "(line 347,col 9)-(line 347,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity()",
    "snippet": "@Test\n    public void testMinimizeCapacity() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        \n        sb.append(\"HelloWorld\");\n        sb.minimizeCapacity();\n        assertEquals(10, sb.capacity());\n    }",
    "begin_line": 351,
    "end_line": 359,
    "comment": "",
    "child_ranges": [
      "(line 352,col 9)-(line 352,col 47)",
      "(line 353,col 9)-(line 353,col 30)",
      "(line 354,col 9)-(line 354,col 39)",
      "(line 356,col 9)-(line 356,col 32)",
      "(line 357,col 9)-(line 357,col 30)",
      "(line 358,col 9)-(line 358,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSize()",
    "snippet": "@Test\n    public void testSize() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(0, sb.size());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.size());\n    }",
    "begin_line": 363,
    "end_line": 369,
    "comment": "",
    "child_ranges": [
      "(line 364,col 9)-(line 364,col 47)",
      "(line 365,col 9)-(line 365,col 35)",
      "(line 367,col 9)-(line 367,col 27)",
      "(line 368,col 9)-(line 368,col 35)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty()",
    "snippet": "@Test\n    public void testIsEmpty() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertTrue(sb.isEmpty());\n        \n        sb.append(\"Hello\");\n        assertFalse(sb.isEmpty());\n        \n        sb.clear();\n        assertTrue(sb.isEmpty());\n    }",
    "begin_line": 372,
    "end_line": 381,
    "comment": "",
    "child_ranges": [
      "(line 373,col 9)-(line 373,col 47)",
      "(line 374,col 9)-(line 374,col 33)",
      "(line 376,col 9)-(line 376,col 27)",
      "(line 377,col 9)-(line 377,col 34)",
      "(line 379,col 9)-(line 379,col 19)",
      "(line 380,col 9)-(line 380,col 33)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testClear()",
    "snippet": "@Test\n    public void testClear() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.append(\"Hello\");\n        sb.clear();\n        assertEquals(0, sb.length());\n        assertTrue(sb.buffer.length \u003e\u003d 5);\n    }",
    "begin_line": 384,
    "end_line": 390,
    "comment": "",
    "child_ranges": [
      "(line 385,col 9)-(line 385,col 47)",
      "(line 386,col 9)-(line 386,col 27)",
      "(line 387,col 9)-(line 387,col 19)",
      "(line 388,col 9)-(line 388,col 37)",
      "(line 389,col 9)-(line 389,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCharAt()",
    "snippet": "@Test\n    public void testCharAt() {\n        final StrBuilder sb \u003d new StrBuilder();\n        try {\n            sb.charAt(0);\n            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        assertEquals(\u0027f\u0027, sb.charAt(0));\n        assertEquals(\u0027o\u0027, sb.charAt(1));\n        assertEquals(\u0027o\u0027, sb.charAt(2));\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(3);\n            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
    "begin_line": 394,
    "end_line": 424,
    "comment": "",
    "child_ranges": [
      "(line 395,col 9)-(line 395,col 47)",
      "(line 396,col 9)-(line 401,col 9)",
      "(line 402,col 9)-(line 407,col 9)",
      "(line 408,col 9)-(line 408,col 25)",
      "(line 409,col 9)-(line 409,col 40)",
      "(line 410,col 9)-(line 410,col 40)",
      "(line 411,col 9)-(line 411,col 40)",
      "(line 412,col 9)-(line 417,col 9)",
      "(line 418,col 9)-(line 423,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt()",
    "snippet": "@Test\n    public void testSetCharAt() {\n        final StrBuilder sb \u003d new StrBuilder();\n        try {\n            sb.setCharAt(0, \u0027f\u0027);\n            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.setCharAt(-1, \u0027f\u0027);\n            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        sb.setCharAt(0, \u0027b\u0027);\n        sb.setCharAt(1, \u0027a\u0027);\n        sb.setCharAt(2, \u0027r\u0027);\n        try {\n            sb.setCharAt(3, \u0027!\u0027);\n            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // expected\n        }\n        assertEquals(\"bar\", sb.toString());\n    }",
    "begin_line": 428,
    "end_line": 453,
    "comment": "",
    "child_ranges": [
      "(line 429,col 9)-(line 429,col 47)",
      "(line 430,col 9)-(line 435,col 9)",
      "(line 436,col 9)-(line 441,col 9)",
      "(line 442,col 9)-(line 442,col 25)",
      "(line 443,col 9)-(line 443,col 29)",
      "(line 444,col 9)-(line 444,col 29)",
      "(line 445,col 9)-(line 445,col 29)",
      "(line 446,col 9)-(line 451,col 9)",
      "(line 452,col 9)-(line 452,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt()",
    "snippet": "@Test\n    public void testDeleteCharAt() {\n        final StrBuilder sb \u003d new StrBuilder(\"abc\");\n        sb.deleteCharAt(0);\n        assertEquals(\"bc\", sb.toString()); \n        \n        try {\n            sb.deleteCharAt(1000);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n    }",
    "begin_line": 457,
    "end_line": 466,
    "comment": "",
    "child_ranges": [
      "(line 458,col 9)-(line 458,col 52)",
      "(line 459,col 9)-(line 459,col 27)",
      "(line 460,col 9)-(line 460,col 42)",
      "(line 462,col 9)-(line 465,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToCharArray()",
    "snippet": "@Test\n    public void testToCharArray() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n\n        char[] a \u003d sb.toCharArray();\n        assertNotNull(\"toCharArray() result is null\", a);\n        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n\n        sb.append(\"junit\");\n        a \u003d sb.toCharArray();\n        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n    }",
    "begin_line": 470,
    "end_line": 482,
    "comment": "",
    "child_ranges": [
      "(line 471,col 9)-(line 471,col 47)",
      "(line 472,col 9)-(line 472,col 68)",
      "(line 474,col 9)-(line 474,col 36)",
      "(line 475,col 9)-(line 475,col 57)",
      "(line 476,col 9)-(line 476,col 71)",
      "(line 478,col 9)-(line 478,col 27)",
      "(line 479,col 9)-(line 479,col 29)",
      "(line 480,col 9)-(line 480,col 75)",
      "(line 481,col 9)-(line 481,col 99)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt()",
    "snippet": "@Test\n    public void testToCharArrayIntInt() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n\n        sb.append(\"junit\");\n        char[] a \u003d sb.toCharArray(0, 20); // too large test\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n\n        a \u003d sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a \u003d sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a \u003d sb.toCharArray(0, 1);\n        assertNotNull(\"toCharArray(int,int) result is null\", a);\n\n        try {\n            sb.toCharArray(-1, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (final IndexOutOfBoundsException e) {\n        }\n\n        try {\n            sb.toCharArray(6, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (final IndexOutOfBoundsException e) {\n        }\n    }",
    "begin_line": 485,
    "end_line": 516,
    "comment": "",
    "child_ranges": [
      "(line 486,col 9)-(line 486,col 47)",
      "(line 487,col 9)-(line 487,col 72)",
      "(line 489,col 9)-(line 489,col 27)",
      "(line 490,col 9)-(line 490,col 41)",
      "(line 491,col 9)-(line 491,col 82)",
      "(line 492,col 9)-(line 492,col 106)",
      "(line 494,col 9)-(line 494,col 33)",
      "(line 495,col 9)-(line 495,col 82)",
      "(line 496,col 9)-(line 496,col 105)",
      "(line 498,col 9)-(line 498,col 33)",
      "(line 499,col 9)-(line 499,col 82)",
      "(line 500,col 9)-(line 500,col 105)",
      "(line 502,col 9)-(line 502,col 33)",
      "(line 503,col 9)-(line 503,col 64)",
      "(line 505,col 9)-(line 509,col 9)",
      "(line 511,col 9)-(line 515,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetChars()",
    "snippet": "@Test\n    public void testGetChars ( ) {\n        final StrBuilder sb \u003d new StrBuilder();\n        \n        char[] input \u003d new char[10];\n        char[] a \u003d sb.getChars(input);\n        assertSame (input, a);\n        assertTrue(Arrays.equals(new char[10], a));\n        \n        sb.append(\"junit\");\n        a \u003d sb.getChars(input);\n        assertSame(input, a);\n        assertTrue(Arrays.equals(new char[] {\u0027j\u0027,\u0027u\u0027,\u0027n\u0027,\u0027i\u0027,\u0027t\u0027,0,0,0,0,0},a));\n        \n        a \u003d sb.getChars(null);\n        assertNotSame(input,a);\n        assertEquals(5,a.length);\n        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n        \n        input \u003d new char[5];\n        a \u003d sb.getChars(input);\n        assertSame(input, a);\n        \n        input \u003d new char[4];\n        a \u003d sb.getChars(input);\n        assertNotSame(input, a);\n    }",
    "begin_line": 519,
    "end_line": 544,
    "comment": "",
    "child_ranges": [
      "(line 520,col 9)-(line 520,col 47)",
      "(line 522,col 9)-(line 522,col 36)",
      "(line 523,col 9)-(line 523,col 38)",
      "(line 524,col 9)-(line 524,col 30)",
      "(line 525,col 9)-(line 525,col 51)",
      "(line 527,col 9)-(line 527,col 27)",
      "(line 528,col 9)-(line 528,col 31)",
      "(line 529,col 9)-(line 529,col 29)",
      "(line 530,col 9)-(line 530,col 80)",
      "(line 532,col 9)-(line 532,col 30)",
      "(line 533,col 9)-(line 533,col 31)",
      "(line 534,col 9)-(line 534,col 33)",
      "(line 535,col 9)-(line 535,col 59)",
      "(line 537,col 9)-(line 537,col 28)",
      "(line 538,col 9)-(line 538,col 31)",
      "(line 539,col 9)-(line 539,col 29)",
      "(line 541,col 9)-(line 541,col 28)",
      "(line 542,col 9)-(line 542,col 31)",
      "(line 543,col 9)-(line 543,col 32)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()",
    "snippet": "@Test\n    public void testGetCharsIntIntCharArrayInt( ) {\n        final StrBuilder sb \u003d new StrBuilder();\n               \n        sb.append(\"junit\");\n        char[] a \u003d new char[5];\n        sb.getChars(0,5,a,0);\n        assertTrue(Arrays.equals(new char[] {\u0027j\u0027,\u0027u\u0027,\u0027n\u0027,\u0027i\u0027,\u0027t\u0027},a));\n        \n        a \u003d new char[5];\n        sb.getChars(0,2,a,3);\n        assertTrue(Arrays.equals(new char[] {0,0,0,\u0027j\u0027,\u0027u\u0027},a));\n        \n        try {\n            sb.getChars(-1,0,a,0);\n            fail(\"no exception\");\n        }\n        catch (final IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,-1,a,0);\n            fail(\"no exception\");\n        }\n        catch (final IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,20,a,0);\n            fail(\"no exception\");\n        }\n        catch (final IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(4,2,a,0);\n            fail(\"no exception\");\n        }\n        catch (final IndexOutOfBoundsException e) {\n        }\n    }",
    "begin_line": 547,
    "end_line": 586,
    "comment": "",
    "child_ranges": [
      "(line 548,col 9)-(line 548,col 47)",
      "(line 550,col 9)-(line 550,col 27)",
      "(line 551,col 9)-(line 551,col 31)",
      "(line 552,col 9)-(line 552,col 29)",
      "(line 553,col 9)-(line 553,col 70)",
      "(line 555,col 9)-(line 555,col 24)",
      "(line 556,col 9)-(line 556,col 29)",
      "(line 557,col 9)-(line 557,col 64)",
      "(line 559,col 9)-(line 564,col 9)",
      "(line 566,col 9)-(line 571,col 9)",
      "(line 573,col 9)-(line 578,col 9)",
      "(line 580,col 9)-(line 585,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt()",
    "snippet": "@Test\n    public void testDeleteIntInt() {\n        StrBuilder sb \u003d new StrBuilder(\"abc\");\n        sb.delete(0, 1);\n        assertEquals(\"bc\", sb.toString()); \n        sb.delete(1, 2);\n        assertEquals(\"b\", sb.toString());\n        sb.delete(0, 1);\n        assertEquals(\"\", sb.toString()); \n        sb.delete(0, 1000);\n        assertEquals(\"\", sb.toString()); \n        \n        try {\n            sb.delete(1, 2);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n        try {\n            sb.delete(-1, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        sb \u003d new StrBuilder(\"anything\");\n        try {\n            sb.delete(2, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n    }",
    "begin_line": 590,
    "end_line": 615,
    "comment": "",
    "child_ranges": [
      "(line 591,col 9)-(line 591,col 46)",
      "(line 592,col 9)-(line 592,col 24)",
      "(line 593,col 9)-(line 593,col 42)",
      "(line 594,col 9)-(line 594,col 24)",
      "(line 595,col 9)-(line 595,col 41)",
      "(line 596,col 9)-(line 596,col 24)",
      "(line 597,col 9)-(line 597,col 40)",
      "(line 598,col 9)-(line 598,col 27)",
      "(line 599,col 9)-(line 599,col 40)",
      "(line 601,col 9)-(line 604,col 54)",
      "(line 605,col 9)-(line 608,col 54)",
      "(line 610,col 9)-(line 610,col 40)",
      "(line 611,col 9)-(line 614,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_char()",
    "snippet": "@Test\n    public void testDeleteAll_char() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.deleteAll(\u0027X\u0027);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\u0027a\u0027);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll(\u0027c\u0027);\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll(\u0027b\u0027);\n        assertEquals(\"\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteAll(\u0027b\u0027);\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 619,
    "end_line": 633,
    "comment": "",
    "child_ranges": [
      "(line 620,col 9)-(line 620,col 51)",
      "(line 621,col 9)-(line 621,col 26)",
      "(line 622,col 9)-(line 622,col 48)",
      "(line 623,col 9)-(line 623,col 26)",
      "(line 624,col 9)-(line 624,col 46)",
      "(line 625,col 9)-(line 625,col 26)",
      "(line 626,col 9)-(line 626,col 43)",
      "(line 627,col 9)-(line 627,col 26)",
      "(line 628,col 9)-(line 628,col 40)",
      "(line 630,col 9)-(line 630,col 32)",
      "(line 631,col 9)-(line 631,col 26)",
      "(line 632,col 9)-(line 632,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_char()",
    "snippet": "@Test\n    public void testDeleteFirst_char() {\n        StrBuilder sb \u003d new StrBuilder(\"abcba\");\n        sb.deleteFirst(\u0027X\u0027);\n        assertEquals(\"abcba\", sb.toString());\n        sb.deleteFirst(\u0027a\u0027);\n        assertEquals(\"bcba\", sb.toString());\n        sb.deleteFirst(\u0027c\u0027);\n        assertEquals(\"bba\", sb.toString());\n        sb.deleteFirst(\u0027b\u0027);\n        assertEquals(\"ba\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteFirst(\u0027b\u0027);\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 636,
    "end_line": 650,
    "comment": "",
    "child_ranges": [
      "(line 637,col 9)-(line 637,col 48)",
      "(line 638,col 9)-(line 638,col 28)",
      "(line 639,col 9)-(line 639,col 45)",
      "(line 640,col 9)-(line 640,col 28)",
      "(line 641,col 9)-(line 641,col 44)",
      "(line 642,col 9)-(line 642,col 28)",
      "(line 643,col 9)-(line 643,col 43)",
      "(line 644,col 9)-(line 644,col 28)",
      "(line 645,col 9)-(line 645,col 42)",
      "(line 647,col 9)-(line 647,col 32)",
      "(line 648,col 9)-(line 648,col 28)",
      "(line 649,col 9)-(line 649,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String()",
    "snippet": "@Test\n    public void testDeleteAll_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.deleteAll((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.deleteAll(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"a\");\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll(\"c\");\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll(\"b\");\n        assertEquals(\"\", sb.toString());\n\n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"acba\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 654,
    "end_line": 677,
    "comment": "",
    "child_ranges": [
      "(line 655,col 9)-(line 655,col 51)",
      "(line 656,col 9)-(line 656,col 36)",
      "(line 657,col 9)-(line 657,col 48)",
      "(line 658,col 9)-(line 658,col 25)",
      "(line 659,col 9)-(line 659,col 48)",
      "(line 661,col 9)-(line 661,col 26)",
      "(line 662,col 9)-(line 662,col 48)",
      "(line 663,col 9)-(line 663,col 26)",
      "(line 664,col 9)-(line 664,col 46)",
      "(line 665,col 9)-(line 665,col 26)",
      "(line 666,col 9)-(line 666,col 43)",
      "(line 667,col 9)-(line 667,col 26)",
      "(line 668,col 9)-(line 668,col 40)",
      "(line 670,col 9)-(line 670,col 40)",
      "(line 671,col 9)-(line 671,col 27)",
      "(line 672,col 9)-(line 672,col 44)",
      "(line 674,col 9)-(line 674,col 32)",
      "(line 675,col 9)-(line 675,col 27)",
      "(line 676,col 9)-(line 676,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_String()",
    "snippet": "@Test\n    public void testDeleteFirst_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.deleteFirst((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n\n        sb.deleteFirst(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"a\");\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.deleteFirst(\"c\");\n        assertEquals(\"bbccba\", sb.toString());\n        sb.deleteFirst(\"b\");\n        assertEquals(\"bccba\", sb.toString());\n\n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"abccba\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 680,
    "end_line": 703,
    "comment": "",
    "child_ranges": [
      "(line 681,col 9)-(line 681,col 51)",
      "(line 682,col 9)-(line 682,col 38)",
      "(line 683,col 9)-(line 683,col 48)",
      "(line 684,col 9)-(line 684,col 27)",
      "(line 685,col 9)-(line 685,col 48)",
      "(line 687,col 9)-(line 687,col 28)",
      "(line 688,col 9)-(line 688,col 48)",
      "(line 689,col 9)-(line 689,col 28)",
      "(line 690,col 9)-(line 690,col 47)",
      "(line 691,col 9)-(line 691,col 28)",
      "(line 692,col 9)-(line 692,col 46)",
      "(line 693,col 9)-(line 693,col 28)",
      "(line 694,col 9)-(line 694,col 45)",
      "(line 696,col 9)-(line 696,col 40)",
      "(line 697,col 9)-(line 697,col 29)",
      "(line 698,col 9)-(line 698,col 46)",
      "(line 700,col 9)-(line 700,col 32)",
      "(line 701,col 9)-(line 701,col 29)",
      "(line 702,col 9)-(line 702,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher()",
    "snippet": "@Test\n    public void testDeleteAll_StrMatcher() {\n        StrBuilder sb \u003d new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteAll((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"xy\", sb.toString());\n\n        sb \u003d new StrBuilder(\"Ax1\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 707,
    "end_line": 721,
    "comment": "",
    "child_ranges": [
      "(line 708,col 9)-(line 708,col 53)",
      "(line 709,col 9)-(line 709,col 40)",
      "(line 710,col 9)-(line 710,col 50)",
      "(line 711,col 9)-(line 711,col 39)",
      "(line 712,col 9)-(line 712,col 42)",
      "(line 714,col 9)-(line 714,col 35)",
      "(line 715,col 9)-(line 715,col 39)",
      "(line 716,col 9)-(line 716,col 43)",
      "(line 718,col 9)-(line 718,col 32)",
      "(line 719,col 9)-(line 719,col 39)",
      "(line 720,col 9)-(line 720,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher()",
    "snippet": "@Test\n    public void testDeleteFirst_StrMatcher() {\n        StrBuilder sb \u003d new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteFirst((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"xA1A2yA3\", sb.toString());\n\n        sb \u003d new StrBuilder(\"Ax1\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb \u003d new StrBuilder(\"\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 724,
    "end_line": 738,
    "comment": "",
    "child_ranges": [
      "(line 725,col 9)-(line 725,col 53)",
      "(line 726,col 9)-(line 726,col 42)",
      "(line 727,col 9)-(line 727,col 50)",
      "(line 728,col 9)-(line 728,col 41)",
      "(line 729,col 9)-(line 729,col 48)",
      "(line 731,col 9)-(line 731,col 35)",
      "(line 732,col 9)-(line 732,col 41)",
      "(line 733,col 9)-(line 733,col 43)",
      "(line 735,col 9)-(line 735,col 32)",
      "(line 736,col 9)-(line 736,col 41)",
      "(line 737,col 9)-(line 737,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String()",
    "snippet": "@Test\n    public void testReplace_int_int_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abc\");\n        sb.replace(0, 1, \"d\");\n        assertEquals(\"dbc\", sb.toString());\n        sb.replace(0, 1, \"aaa\");\n        assertEquals(\"aaabc\", sb.toString());\n        sb.replace(0, 3, \"\");\n        assertEquals(\"bc\", sb.toString());\n        sb.replace(1, 2, (String) null);\n        assertEquals(\"b\", sb.toString());\n        sb.replace(1, 1000, \"text\");\n        assertEquals(\"btext\", sb.toString());\n        sb.replace(0, 1000, \"text\");\n        assertEquals(\"text\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"atext\");\n        sb.replace(1, 1, \"ny\");\n        assertEquals(\"anytext\", sb.toString());\n        try {\n            sb.replace(2, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        sb \u003d new StrBuilder();\n        try {\n            sb.replace(1, 2, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n        try {\n            sb.replace(-1, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {}\n    }",
    "begin_line": 742,
    "end_line": 774,
    "comment": "",
    "child_ranges": [
      "(line 743,col 9)-(line 743,col 46)",
      "(line 744,col 9)-(line 744,col 30)",
      "(line 745,col 9)-(line 745,col 43)",
      "(line 746,col 9)-(line 746,col 32)",
      "(line 747,col 9)-(line 747,col 45)",
      "(line 748,col 9)-(line 748,col 29)",
      "(line 749,col 9)-(line 749,col 42)",
      "(line 750,col 9)-(line 750,col 40)",
      "(line 751,col 9)-(line 751,col 41)",
      "(line 752,col 9)-(line 752,col 36)",
      "(line 753,col 9)-(line 753,col 45)",
      "(line 754,col 9)-(line 754,col 36)",
      "(line 755,col 9)-(line 755,col 44)",
      "(line 757,col 9)-(line 757,col 37)",
      "(line 758,col 9)-(line 758,col 31)",
      "(line 759,col 9)-(line 759,col 47)",
      "(line 760,col 9)-(line 763,col 54)",
      "(line 765,col 9)-(line 765,col 30)",
      "(line 766,col 9)-(line 769,col 54)",
      "(line 770,col 9)-(line 773,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_char_char()",
    "snippet": "@Test\n    public void testReplaceAll_char_char() {\n        final StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceAll(\u0027x\u0027, \u0027y\u0027);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\u0027a\u0027, \u0027d\u0027);\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(\u0027b\u0027, \u0027e\u0027);\n        assertEquals(\"dececced\", sb.toString());\n        sb.replaceAll(\u0027c\u0027, \u0027f\u0027);\n        assertEquals(\"defeffed\", sb.toString());\n        sb.replaceAll(\u0027d\u0027, \u0027d\u0027);\n        assertEquals(\"defeffed\", sb.toString());\n    }",
    "begin_line": 778,
    "end_line": 790,
    "comment": "",
    "child_ranges": [
      "(line 779,col 9)-(line 779,col 57)",
      "(line 780,col 9)-(line 780,col 32)",
      "(line 781,col 9)-(line 781,col 48)",
      "(line 782,col 9)-(line 782,col 32)",
      "(line 783,col 9)-(line 783,col 48)",
      "(line 784,col 9)-(line 784,col 32)",
      "(line 785,col 9)-(line 785,col 48)",
      "(line 786,col 9)-(line 786,col 32)",
      "(line 787,col 9)-(line 787,col 48)",
      "(line 788,col 9)-(line 788,col 32)",
      "(line 789,col 9)-(line 789,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_char_char()",
    "snippet": "@Test\n    public void testReplaceFirst_char_char() {\n        final StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceFirst(\u0027x\u0027, \u0027y\u0027);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\u0027a\u0027, \u0027d\u0027);\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(\u0027b\u0027, \u0027e\u0027);\n        assertEquals(\"decbccba\", sb.toString());\n        sb.replaceFirst(\u0027c\u0027, \u0027f\u0027);\n        assertEquals(\"defbccba\", sb.toString());\n        sb.replaceFirst(\u0027d\u0027, \u0027d\u0027);\n        assertEquals(\"defbccba\", sb.toString());\n    }",
    "begin_line": 794,
    "end_line": 806,
    "comment": "",
    "child_ranges": [
      "(line 795,col 9)-(line 795,col 57)",
      "(line 796,col 9)-(line 796,col 34)",
      "(line 797,col 9)-(line 797,col 48)",
      "(line 798,col 9)-(line 798,col 34)",
      "(line 799,col 9)-(line 799,col 48)",
      "(line 800,col 9)-(line 800,col 34)",
      "(line 801,col 9)-(line 801,col 48)",
      "(line 802,col 9)-(line 802,col 34)",
      "(line 803,col 9)-(line 803,col 48)",
      "(line 804,col 9)-(line 804,col 34)",
      "(line 805,col 9)-(line 805,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String()",
    "snippet": "@Test\n    public void testReplaceAll_String_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceAll((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"a\", \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(\"d\", null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(\"cb\", \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcba\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"bb\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n    }",
    "begin_line": 810,
    "end_line": 837,
    "comment": "",
    "child_ranges": [
      "(line 811,col 9)-(line 811,col 51)",
      "(line 812,col 9)-(line 812,col 43)",
      "(line 813,col 9)-(line 813,col 48)",
      "(line 814,col 9)-(line 814,col 49)",
      "(line 815,col 9)-(line 815,col 48)",
      "(line 816,col 9)-(line 816,col 32)",
      "(line 817,col 9)-(line 817,col 48)",
      "(line 818,col 9)-(line 818,col 38)",
      "(line 819,col 9)-(line 819,col 48)",
      "(line 821,col 9)-(line 821,col 32)",
      "(line 822,col 9)-(line 822,col 48)",
      "(line 823,col 9)-(line 823,col 32)",
      "(line 824,col 9)-(line 824,col 48)",
      "(line 825,col 9)-(line 825,col 33)",
      "(line 826,col 9)-(line 826,col 46)",
      "(line 827,col 9)-(line 827,col 33)",
      "(line 828,col 9)-(line 828,col 44)",
      "(line 830,col 9)-(line 830,col 37)",
      "(line 831,col 9)-(line 831,col 34)",
      "(line 832,col 9)-(line 832,col 49)",
      "(line 834,col 9)-(line 834,col 34)",
      "(line 835,col 9)-(line 835,col 34)",
      "(line 836,col 9)-(line 836,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String()",
    "snippet": "@Test\n    public void testReplaceFirst_String_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"a\", \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(\"d\", null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(\"cb\", \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcba\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"bb\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n    }",
    "begin_line": 840,
    "end_line": 867,
    "comment": "",
    "child_ranges": [
      "(line 841,col 9)-(line 841,col 51)",
      "(line 842,col 9)-(line 842,col 45)",
      "(line 843,col 9)-(line 843,col 48)",
      "(line 844,col 9)-(line 844,col 51)",
      "(line 845,col 9)-(line 845,col 48)",
      "(line 846,col 9)-(line 846,col 34)",
      "(line 847,col 9)-(line 847,col 48)",
      "(line 848,col 9)-(line 848,col 40)",
      "(line 849,col 9)-(line 849,col 48)",
      "(line 851,col 9)-(line 851,col 34)",
      "(line 852,col 9)-(line 852,col 48)",
      "(line 853,col 9)-(line 853,col 34)",
      "(line 854,col 9)-(line 854,col 48)",
      "(line 855,col 9)-(line 855,col 35)",
      "(line 856,col 9)-(line 856,col 47)",
      "(line 857,col 9)-(line 857,col 35)",
      "(line 858,col 9)-(line 858,col 46)",
      "(line 860,col 9)-(line 860,col 37)",
      "(line 861,col 9)-(line 861,col 36)",
      "(line 862,col 9)-(line 862,col 47)",
      "(line 864,col 9)-(line 864,col 34)",
      "(line 865,col 9)-(line 865,col 36)",
      "(line 866,col 9)-(line 866,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String()",
    "snippet": "@Test\n    public void testReplaceAll_StrMatcher_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceAll((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(StrMatcher.charMatcher(\u0027x\u0027), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher(\u0027a\u0027), \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher(\u0027d\u0027), null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcba\");\n        sb.replaceAll(StrMatcher.charMatcher(\u0027b\u0027), \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"bb\");\n        sb.replaceAll(StrMatcher.charMatcher(\u0027b\u0027), \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-******-***\", sb.toString());\n    }",
    "begin_line": 871,
    "end_line": 902,
    "comment": "",
    "child_ranges": [
      "(line 872,col 9)-(line 872,col 51)",
      "(line 873,col 9)-(line 873,col 47)",
      "(line 874,col 9)-(line 874,col 48)",
      "(line 875,col 9)-(line 875,col 53)",
      "(line 876,col 9)-(line 876,col 48)",
      "(line 877,col 9)-(line 877,col 54)",
      "(line 878,col 9)-(line 878,col 48)",
      "(line 879,col 9)-(line 879,col 60)",
      "(line 880,col 9)-(line 880,col 48)",
      "(line 882,col 9)-(line 882,col 56)",
      "(line 883,col 9)-(line 883,col 48)",
      "(line 884,col 9)-(line 884,col 56)",
      "(line 885,col 9)-(line 885,col 48)",
      "(line 886,col 9)-(line 886,col 57)",
      "(line 887,col 9)-(line 887,col 46)",
      "(line 888,col 9)-(line 888,col 59)",
      "(line 889,col 9)-(line 889,col 44)",
      "(line 891,col 9)-(line 891,col 37)",
      "(line 892,col 9)-(line 892,col 58)",
      "(line 893,col 9)-(line 893,col 49)",
      "(line 895,col 9)-(line 895,col 34)",
      "(line 896,col 9)-(line 896,col 58)",
      "(line 897,col 9)-(line 897,col 46)",
      "(line 899,col 9)-(line 899,col 42)",
      "(line 900,col 9)-(line 900,col 47)",
      "(line 901,col 9)-(line 901,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()",
    "snippet": "@Test\n    public void testReplaceFirst_StrMatcher_String() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(StrMatcher.charMatcher(\u0027x\u0027), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher(\u0027a\u0027), \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher(\u0027d\u0027), null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcba\");\n        sb.replaceFirst(StrMatcher.charMatcher(\u0027b\u0027), \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"bb\");\n        sb.replaceFirst(StrMatcher.charMatcher(\u0027b\u0027), \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-A2A3-A4\", sb.toString());\n    }",
    "begin_line": 905,
    "end_line": 936,
    "comment": "",
    "child_ranges": [
      "(line 906,col 9)-(line 906,col 51)",
      "(line 907,col 9)-(line 907,col 49)",
      "(line 908,col 9)-(line 908,col 48)",
      "(line 909,col 9)-(line 909,col 55)",
      "(line 910,col 9)-(line 910,col 48)",
      "(line 911,col 9)-(line 911,col 56)",
      "(line 912,col 9)-(line 912,col 48)",
      "(line 913,col 9)-(line 913,col 62)",
      "(line 914,col 9)-(line 914,col 48)",
      "(line 916,col 9)-(line 916,col 58)",
      "(line 917,col 9)-(line 917,col 48)",
      "(line 918,col 9)-(line 918,col 58)",
      "(line 919,col 9)-(line 919,col 48)",
      "(line 920,col 9)-(line 920,col 59)",
      "(line 921,col 9)-(line 921,col 47)",
      "(line 922,col 9)-(line 922,col 61)",
      "(line 923,col 9)-(line 923,col 46)",
      "(line 925,col 9)-(line 925,col 37)",
      "(line 926,col 9)-(line 926,col 60)",
      "(line 927,col 9)-(line 927,col 47)",
      "(line 929,col 9)-(line 929,col 34)",
      "(line 930,col 9)-(line 930,col 60)",
      "(line 931,col 9)-(line 931,col 44)",
      "(line 933,col 9)-(line 933,col 42)",
      "(line 934,col 9)-(line 934,col 49)",
      "(line 935,col 9)-(line 935,col 51)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()",
    "snippet": "@Test\n    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replace(StrMatcher.charMatcher(\u0027a\u0027), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbcbccbx\", sb.toString());\n        \n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbxcxx\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"A1-A2A3-A4\");\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"***-******-***\", sb.toString());\n        \n        sb \u003d new StrBuilder();\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"\", sb.toString());\n    }",
    "begin_line": 940,
    "end_line": 958,
    "comment": "",
    "child_ranges": [
      "(line 941,col 9)-(line 941,col 51)",
      "(line 942,col 9)-(line 942,col 63)",
      "(line 943,col 9)-(line 943,col 48)",
      "(line 945,col 9)-(line 945,col 73)",
      "(line 946,col 9)-(line 946,col 48)",
      "(line 948,col 9)-(line 948,col 76)",
      "(line 949,col 9)-(line 949,col 46)",
      "(line 951,col 9)-(line 951,col 42)",
      "(line 952,col 9)-(line 952,col 64)",
      "(line 953,col 9)-(line 953,col 54)",
      "(line 955,col 9)-(line 955,col 30)",
      "(line 956,col 9)-(line 956,col 64)",
      "(line 957,col 9)-(line 957,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()",
    "snippet": "@Test\n    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n        StrBuilder sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"ab-c-a\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n        assertEquals(\"ab+++c+++a\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n    }",
    "begin_line": 961,
    "end_line": 981,
    "comment": "",
    "child_ranges": [
      "(line 962,col 9)-(line 962,col 51)",
      "(line 963,col 9)-(line 963,col 77)",
      "(line 964,col 9)-(line 964,col 48)",
      "(line 966,col 9)-(line 966,col 40)",
      "(line 967,col 9)-(line 967,col 76)",
      "(line 968,col 9)-(line 968,col 46)",
      "(line 970,col 9)-(line 970,col 40)",
      "(line 971,col 9)-(line 971,col 78)",
      "(line 972,col 9)-(line 972,col 50)",
      "(line 974,col 9)-(line 974,col 40)",
      "(line 975,col 9)-(line 975,col 75)",
      "(line 976,col 9)-(line 976,col 44)",
      "(line 978,col 9)-(line 978,col 40)",
      "(line 979,col 9)-(line 979,col 77)",
      "(line 980,col 9)-(line 980,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()",
    "snippet": "@Test\n    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n        StrBuilder sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n        assertEquals(\"aaxa-ay-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n        assertEquals(\"aaxaa-y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
    "begin_line": 984,
    "end_line": 1042,
    "comment": "",
    "child_ranges": [
      "(line 985,col 9)-(line 985,col 53)",
      "(line 986,col 9)-(line 986,col 76)",
      "(line 987,col 9)-(line 987,col 46)",
      "(line 989,col 9)-(line 989,col 42)",
      "(line 990,col 9)-(line 990,col 76)",
      "(line 991,col 9)-(line 991,col 47)",
      "(line 993,col 9)-(line 993,col 42)",
      "(line 994,col 9)-(line 994,col 76)",
      "(line 995,col 9)-(line 995,col 47)",
      "(line 997,col 9)-(line 997,col 42)",
      "(line 998,col 9)-(line 998,col 76)",
      "(line 999,col 9)-(line 999,col 47)",
      "(line 1001,col 9)-(line 1001,col 42)",
      "(line 1002,col 9)-(line 1002,col 76)",
      "(line 1003,col 9)-(line 1003,col 48)",
      "(line 1005,col 9)-(line 1005,col 42)",
      "(line 1006,col 9)-(line 1006,col 76)",
      "(line 1007,col 9)-(line 1007,col 48)",
      "(line 1009,col 9)-(line 1009,col 42)",
      "(line 1010,col 9)-(line 1010,col 76)",
      "(line 1011,col 9)-(line 1011,col 49)",
      "(line 1013,col 9)-(line 1013,col 42)",
      "(line 1014,col 9)-(line 1014,col 76)",
      "(line 1015,col 9)-(line 1015,col 49)",
      "(line 1017,col 9)-(line 1017,col 42)",
      "(line 1018,col 9)-(line 1018,col 76)",
      "(line 1019,col 9)-(line 1019,col 49)",
      "(line 1021,col 9)-(line 1021,col 42)",
      "(line 1022,col 9)-(line 1022,col 76)",
      "(line 1023,col 9)-(line 1023,col 50)",
      "(line 1025,col 9)-(line 1025,col 42)",
      "(line 1026,col 9)-(line 1026,col 77)",
      "(line 1027,col 9)-(line 1027,col 50)",
      "(line 1029,col 9)-(line 1029,col 42)",
      "(line 1030,col 9)-(line 1033,col 55)",
      "(line 1034,col 9)-(line 1034,col 50)",
      "(line 1036,col 9)-(line 1036,col 42)",
      "(line 1037,col 9)-(line 1040,col 55)",
      "(line 1041,col 9)-(line 1041,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()",
    "snippet": "@Test\n    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n        StrBuilder sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
    "begin_line": 1045,
    "end_line": 1096,
    "comment": "",
    "child_ranges": [
      "(line 1046,col 9)-(line 1046,col 53)",
      "(line 1047,col 9)-(line 1047,col 66)",
      "(line 1048,col 9)-(line 1048,col 50)",
      "(line 1050,col 9)-(line 1050,col 42)",
      "(line 1051,col 9)-(line 1051,col 66)",
      "(line 1052,col 9)-(line 1052,col 49)",
      "(line 1054,col 9)-(line 1054,col 42)",
      "(line 1055,col 9)-(line 1055,col 66)",
      "(line 1056,col 9)-(line 1056,col 49)",
      "(line 1058,col 9)-(line 1058,col 42)",
      "(line 1059,col 9)-(line 1059,col 66)",
      "(line 1060,col 9)-(line 1060,col 49)",
      "(line 1062,col 9)-(line 1062,col 42)",
      "(line 1063,col 9)-(line 1063,col 66)",
      "(line 1064,col 9)-(line 1064,col 48)",
      "(line 1066,col 9)-(line 1066,col 42)",
      "(line 1067,col 9)-(line 1067,col 66)",
      "(line 1068,col 9)-(line 1068,col 48)",
      "(line 1070,col 9)-(line 1070,col 42)",
      "(line 1071,col 9)-(line 1071,col 66)",
      "(line 1072,col 9)-(line 1072,col 47)",
      "(line 1074,col 9)-(line 1074,col 42)",
      "(line 1075,col 9)-(line 1075,col 66)",
      "(line 1076,col 9)-(line 1076,col 47)",
      "(line 1078,col 9)-(line 1078,col 42)",
      "(line 1079,col 9)-(line 1079,col 66)",
      "(line 1080,col 9)-(line 1080,col 47)",
      "(line 1082,col 9)-(line 1082,col 42)",
      "(line 1083,col 9)-(line 1083,col 67)",
      "(line 1084,col 9)-(line 1084,col 46)",
      "(line 1086,col 9)-(line 1086,col 42)",
      "(line 1087,col 9)-(line 1087,col 69)",
      "(line 1088,col 9)-(line 1088,col 46)",
      "(line 1090,col 9)-(line 1090,col 42)",
      "(line 1091,col 9)-(line 1094,col 55)",
      "(line 1095,col 9)-(line 1095,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()",
    "snippet": "@Test\n    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n        StrBuilder sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb \u003d new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n        assertEquals(\"-x--y-\", sb.toString());\n    }",
    "begin_line": 1099,
    "end_line": 1127,
    "comment": "",
    "child_ranges": [
      "(line 1100,col 9)-(line 1100,col 53)",
      "(line 1101,col 9)-(line 1101,col 67)",
      "(line 1102,col 9)-(line 1102,col 46)",
      "(line 1104,col 9)-(line 1104,col 42)",
      "(line 1105,col 9)-(line 1105,col 66)",
      "(line 1106,col 9)-(line 1106,col 50)",
      "(line 1108,col 9)-(line 1108,col 42)",
      "(line 1109,col 9)-(line 1109,col 66)",
      "(line 1110,col 9)-(line 1110,col 49)",
      "(line 1112,col 9)-(line 1112,col 42)",
      "(line 1113,col 9)-(line 1113,col 66)",
      "(line 1114,col 9)-(line 1114,col 48)",
      "(line 1116,col 9)-(line 1116,col 42)",
      "(line 1117,col 9)-(line 1117,col 66)",
      "(line 1118,col 9)-(line 1118,col 47)",
      "(line 1120,col 9)-(line 1120,col 42)",
      "(line 1121,col 9)-(line 1121,col 66)",
      "(line 1122,col 9)-(line 1122,col 46)",
      "(line 1124,col 9)-(line 1124,col 42)",
      "(line 1125,col 9)-(line 1125,col 66)",
      "(line 1126,col 9)-(line 1126,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReverse()",
    "snippet": "@Test\n    public void testReverse() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(true);\n        assertEquals(\"eurt\", sb.reverse().toString());\n        assertEquals(\"true\", sb.reverse().toString());\n    }",
    "begin_line": 1131,
    "end_line": 1138,
    "comment": "",
    "child_ranges": [
      "(line 1132,col 9)-(line 1132,col 47)",
      "(line 1133,col 9)-(line 1133,col 50)",
      "(line 1135,col 9)-(line 1135,col 32)",
      "(line 1136,col 9)-(line 1136,col 54)",
      "(line 1137,col 9)-(line 1137,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testTrim()",
    "snippet": "@Test\n    public void testTrim() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(\" \\u0000 \");\n        assertEquals(\"\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n    }",
    "begin_line": 1142,
    "end_line": 1160,
    "comment": "",
    "child_ranges": [
      "(line 1143,col 9)-(line 1143,col 47)",
      "(line 1144,col 9)-(line 1144,col 50)",
      "(line 1146,col 9)-(line 1146,col 38)",
      "(line 1147,col 9)-(line 1147,col 47)",
      "(line 1149,col 9)-(line 1149,col 43)",
      "(line 1150,col 9)-(line 1150,col 52)",
      "(line 1152,col 9)-(line 1152,col 43)",
      "(line 1153,col 9)-(line 1153,col 52)",
      "(line 1155,col 9)-(line 1155,col 51)",
      "(line 1156,col 9)-(line 1156,col 52)",
      "(line 1158,col 9)-(line 1158,col 35)",
      "(line 1159,col 9)-(line 1159,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testStartsWith()",
    "snippet": "@Test\n    public void testStartsWith() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertFalse(sb.startsWith(\"a\"));\n        assertFalse(sb.startsWith(null));\n        assertTrue(sb.startsWith(\"\"));\n        sb.append(\"abc\");\n        assertTrue(sb.startsWith(\"a\"));\n        assertTrue(sb.startsWith(\"ab\"));\n        assertTrue(sb.startsWith(\"abc\"));\n        assertFalse(sb.startsWith(\"cba\"));\n    }",
    "begin_line": 1164,
    "end_line": 1174,
    "comment": "",
    "child_ranges": [
      "(line 1165,col 9)-(line 1165,col 47)",
      "(line 1166,col 9)-(line 1166,col 40)",
      "(line 1167,col 9)-(line 1167,col 41)",
      "(line 1168,col 9)-(line 1168,col 38)",
      "(line 1169,col 9)-(line 1169,col 25)",
      "(line 1170,col 9)-(line 1170,col 39)",
      "(line 1171,col 9)-(line 1171,col 40)",
      "(line 1172,col 9)-(line 1172,col 41)",
      "(line 1173,col 9)-(line 1173,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEndsWith()",
    "snippet": "@Test\n    public void testEndsWith() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertFalse(sb.endsWith(\"a\"));\n        assertFalse(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"\"));\n        assertFalse(sb.endsWith(null));\n        sb.append(\"abc\");\n        assertTrue(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"bc\"));\n        assertTrue(sb.endsWith(\"abc\"));\n        assertFalse(sb.endsWith(\"cba\"));\n        assertFalse(sb.endsWith(\"abcd\"));\n        assertFalse(sb.endsWith(\" abc\"));\n        assertFalse(sb.endsWith(\"abc \"));\n    }",
    "begin_line": 1177,
    "end_line": 1191,
    "comment": "",
    "child_ranges": [
      "(line 1178,col 9)-(line 1178,col 47)",
      "(line 1179,col 9)-(line 1179,col 38)",
      "(line 1180,col 9)-(line 1180,col 38)",
      "(line 1181,col 9)-(line 1181,col 36)",
      "(line 1182,col 9)-(line 1182,col 39)",
      "(line 1183,col 9)-(line 1183,col 25)",
      "(line 1184,col 9)-(line 1184,col 37)",
      "(line 1185,col 9)-(line 1185,col 38)",
      "(line 1186,col 9)-(line 1186,col 39)",
      "(line 1187,col 9)-(line 1187,col 40)",
      "(line 1188,col 9)-(line 1188,col 41)",
      "(line 1189,col 9)-(line 1189,col 41)",
      "(line 1190,col 9)-(line 1190,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt()",
    "snippet": "@Test\n    public void testSubSequenceIntInt() {\n       final StrBuilder sb \u003d new StrBuilder (\"hello goodbye\");\n       // Start index is negative\n       try {\n            sb.subSequence(-1, 5);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        // End index is negative\n       try {\n            sb.subSequence(2, -1);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        // End index greater than length()\n        try {\n            sb.subSequence(2, sb.length() + 1);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        // Start index greater then end index\n        try {\n            sb.subSequence(3, 2);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        // Normal cases\n        assertEquals (\"hello\", sb.subSequence(0, 5));\n        assertEquals (\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\n        assertEquals (\"goodbye\", sb.subSequence(6, 13));\n        assertEquals (\"hello goodbye\".subSequence(6,13), sb.subSequence(6, 13));\n    }",
    "begin_line": 1195,
    "end_line": 1226,
    "comment": "",
    "child_ranges": [
      "(line 1196,col 8)-(line 1196,col 62)",
      "(line 1198,col 8)-(line 1201,col 54)",
      "(line 1204,col 8)-(line 1207,col 54)",
      "(line 1210,col 9)-(line 1213,col 54)",
      "(line 1216,col 9)-(line 1219,col 54)",
      "(line 1222,col 9)-(line 1222,col 53)",
      "(line 1223,col 9)-(line 1223,col 79)",
      "(line 1224,col 9)-(line 1224,col 56)",
      "(line 1225,col 9)-(line 1225,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt()",
    "snippet": "@Test\n    public void testSubstringInt() {\n        final StrBuilder sb \u003d new StrBuilder (\"hello goodbye\");\n        assertEquals (\"goodbye\", sb.substring(6));\n        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n        assertEquals (\"hello goodbye\", sb.substring(0));\n        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n        try {\n            sb.substring(-1);\n            fail ();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15);\n            fail ();\n        } catch (final IndexOutOfBoundsException e) {}\n    \n    }",
    "begin_line": 1229,
    "end_line": 1245,
    "comment": "",
    "child_ranges": [
      "(line 1230,col 9)-(line 1230,col 63)",
      "(line 1231,col 9)-(line 1231,col 50)",
      "(line 1232,col 9)-(line 1232,col 69)",
      "(line 1233,col 9)-(line 1233,col 56)",
      "(line 1234,col 9)-(line 1234,col 69)",
      "(line 1235,col 9)-(line 1238,col 54)",
      "(line 1240,col 9)-(line 1243,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt()",
    "snippet": "@Test\n    public void testSubstringIntInt() {\n        final StrBuilder sb \u003d new StrBuilder (\"hello goodbye\");\n        assertEquals (\"hello\", sb.substring(0, 5));\n        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 13));\n        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 20));\n        \n        try {\n            sb.substring(-1, 5);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15, 20);\n            fail();\n        } catch (final IndexOutOfBoundsException e) {}\n    }",
    "begin_line": 1248,
    "end_line": 1267,
    "comment": "",
    "child_ranges": [
      "(line 1249,col 9)-(line 1249,col 63)",
      "(line 1250,col 9)-(line 1250,col 51)",
      "(line 1251,col 9)-(line 1251,col 75)",
      "(line 1253,col 9)-(line 1253,col 54)",
      "(line 1254,col 9)-(line 1254,col 76)",
      "(line 1256,col 9)-(line 1256,col 54)",
      "(line 1258,col 9)-(line 1261,col 54)",
      "(line 1263,col 9)-(line 1266,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testMidString()",
    "snippet": "@Test\n    public void testMidString() {\n        final StrBuilder sb \u003d new StrBuilder(\"hello goodbye hello\");\n        assertEquals(\"goodbye\", sb.midString(6, 7));\n        assertEquals(\"hello\", sb.midString(0, 5));\n        assertEquals(\"hello\", sb.midString(-5, 5));\n        assertEquals(\"\", sb.midString(0, -1));\n        assertEquals(\"\", sb.midString(20, 2));\n        assertEquals(\"hello\", sb.midString(14, 22));\n    }",
    "begin_line": 1271,
    "end_line": 1279,
    "comment": "",
    "child_ranges": [
      "(line 1272,col 9)-(line 1272,col 68)",
      "(line 1273,col 9)-(line 1273,col 52)",
      "(line 1274,col 9)-(line 1274,col 50)",
      "(line 1275,col 9)-(line 1275,col 51)",
      "(line 1276,col 9)-(line 1276,col 46)",
      "(line 1277,col 9)-(line 1277,col 46)",
      "(line 1278,col 9)-(line 1278,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testRightString()",
    "snippet": "@Test\n    public void testRightString() {\n        final StrBuilder sb \u003d new StrBuilder(\"left right\");\n        assertEquals(\"right\", sb.rightString(5));\n        assertEquals(\"\", sb.rightString(0));\n        assertEquals(\"\", sb.rightString(-5));\n        assertEquals(\"left right\", sb.rightString(15));\n    }",
    "begin_line": 1282,
    "end_line": 1288,
    "comment": "",
    "child_ranges": [
      "(line 1283,col 9)-(line 1283,col 59)",
      "(line 1284,col 9)-(line 1284,col 49)",
      "(line 1285,col 9)-(line 1285,col 44)",
      "(line 1286,col 9)-(line 1286,col 45)",
      "(line 1287,col 9)-(line 1287,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLeftString()",
    "snippet": "@Test\n    public void testLeftString() {\n        final StrBuilder sb \u003d new StrBuilder(\"left right\");\n        assertEquals(\"left\", sb.leftString(4));\n        assertEquals(\"\", sb.leftString(0));\n        assertEquals(\"\", sb.leftString(-5));\n        assertEquals(\"left right\", sb.leftString(15));\n    }",
    "begin_line": 1291,
    "end_line": 1297,
    "comment": "",
    "child_ranges": [
      "(line 1292,col 9)-(line 1292,col 59)",
      "(line 1293,col 9)-(line 1293,col 47)",
      "(line 1294,col 9)-(line 1294,col 43)",
      "(line 1295,col 9)-(line 1295,col 44)",
      "(line 1296,col 9)-(line 1296,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_char()",
    "snippet": "@Test\n    public void testContains_char() {\n        final StrBuilder sb \u003d new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertTrue(sb.contains(\u0027a\u0027));\n        assertTrue(sb.contains(\u0027o\u0027));\n        assertTrue(sb.contains(\u0027z\u0027));\n        assertFalse(sb.contains(\u00271\u0027));\n    }",
    "begin_line": 1301,
    "end_line": 1307,
    "comment": "",
    "child_ranges": [
      "(line 1302,col 9)-(line 1302,col 75)",
      "(line 1303,col 9)-(line 1303,col 37)",
      "(line 1304,col 9)-(line 1304,col 37)",
      "(line 1305,col 9)-(line 1305,col 37)",
      "(line 1306,col 9)-(line 1306,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_String()",
    "snippet": "@Test\n    public void testContains_String() {\n        final StrBuilder sb \u003d new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertTrue(sb.contains(\"a\"));\n        assertTrue(sb.contains(\"pq\"));\n        assertTrue(sb.contains(\"z\"));\n        assertFalse(sb.contains(\"zyx\"));\n        assertFalse(sb.contains((String) null));\n    }",
    "begin_line": 1310,
    "end_line": 1317,
    "comment": "",
    "child_ranges": [
      "(line 1311,col 9)-(line 1311,col 75)",
      "(line 1312,col 9)-(line 1312,col 37)",
      "(line 1313,col 9)-(line 1313,col 38)",
      "(line 1314,col 9)-(line 1314,col 37)",
      "(line 1315,col 9)-(line 1315,col 40)",
      "(line 1316,col 9)-(line 1316,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher()",
    "snippet": "@Test\n    public void testContains_StrMatcher() {\n        StrBuilder sb \u003d new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertTrue(sb.contains(StrMatcher.charMatcher(\u0027a\u0027)));\n        assertTrue(sb.contains(StrMatcher.stringMatcher(\"pq\")));\n        assertTrue(sb.contains(StrMatcher.charMatcher(\u0027z\u0027)));\n        assertFalse(sb.contains(StrMatcher.stringMatcher(\"zy\")));\n        assertFalse(sb.contains((StrMatcher) null));\n\n        sb \u003d new StrBuilder();\n        assertFalse(sb.contains(A_NUMBER_MATCHER));\n        sb.append(\"B A1 C\");\n        assertTrue(sb.contains(A_NUMBER_MATCHER));\n    }",
    "begin_line": 1320,
    "end_line": 1332,
    "comment": "",
    "child_ranges": [
      "(line 1321,col 9)-(line 1321,col 69)",
      "(line 1322,col 9)-(line 1322,col 61)",
      "(line 1323,col 9)-(line 1323,col 64)",
      "(line 1324,col 9)-(line 1324,col 61)",
      "(line 1325,col 9)-(line 1325,col 65)",
      "(line 1326,col 9)-(line 1326,col 52)",
      "(line 1328,col 9)-(line 1328,col 30)",
      "(line 1329,col 9)-(line 1329,col 51)",
      "(line 1330,col 9)-(line 1330,col 28)",
      "(line 1331,col 9)-(line 1331,col 50)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char()",
    "snippet": "@Test\n    public void testIndexOf_char() {\n        final StrBuilder sb \u003d new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\u0027a\u0027));\n        \n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\u0027a\u0027), sb.indexOf(\u0027a\u0027));\n\n        assertEquals(1, sb.indexOf(\u0027b\u0027));\n        assertEquals(\"abab\".indexOf(\u0027b\u0027), sb.indexOf(\u0027b\u0027));\n\n        assertEquals(-1, sb.indexOf(\u0027z\u0027));\n    }",
    "begin_line": 1336,
    "end_line": 1347,
    "comment": "",
    "child_ranges": [
      "(line 1337,col 9)-(line 1337,col 53)",
      "(line 1338,col 9)-(line 1338,col 41)",
      "(line 1341,col 9)-(line 1341,col 59)",
      "(line 1343,col 9)-(line 1343,col 41)",
      "(line 1344,col 9)-(line 1344,col 59)",
      "(line 1346,col 9)-(line 1346,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int()",
    "snippet": "@Test\n    public void testIndexOf_char_int() {\n        StrBuilder sb \u003d new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\u0027a\u0027, -1));\n        assertEquals(0, sb.indexOf(\u0027a\u0027, 0));\n        assertEquals(2, sb.indexOf(\u0027a\u0027, 1));\n        assertEquals(-1, sb.indexOf(\u0027a\u0027, 4));\n        assertEquals(-1, sb.indexOf(\u0027a\u0027, 5));\n\n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\u0027a\u0027, 1), sb.indexOf(\u0027a\u0027, 1));\n\n        assertEquals(3, sb.indexOf(\u0027b\u0027, 2));\n        assertEquals(\"abab\".indexOf(\u0027b\u0027, 2), sb.indexOf(\u0027b\u0027, 2));\n\n        assertEquals(-1, sb.indexOf(\u0027z\u0027, 2));\n\n        sb \u003d new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf(\u0027z\u0027, 0));\n        assertEquals(-1, sb.indexOf(\u0027z\u0027, 3));\n    }",
    "begin_line": 1350,
    "end_line": 1369,
    "comment": "",
    "child_ranges": [
      "(line 1351,col 9)-(line 1351,col 47)",
      "(line 1352,col 9)-(line 1352,col 45)",
      "(line 1353,col 9)-(line 1353,col 44)",
      "(line 1354,col 9)-(line 1354,col 44)",
      "(line 1355,col 9)-(line 1355,col 45)",
      "(line 1356,col 9)-(line 1356,col 45)",
      "(line 1359,col 9)-(line 1359,col 65)",
      "(line 1361,col 9)-(line 1361,col 44)",
      "(line 1362,col 9)-(line 1362,col 65)",
      "(line 1364,col 9)-(line 1364,col 45)",
      "(line 1366,col 9)-(line 1366,col 38)",
      "(line 1367,col 9)-(line 1367,col 44)",
      "(line 1368,col 9)-(line 1368,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char()",
    "snippet": "@Test\n    public void testLastIndexOf_char() {\n        final StrBuilder sb \u003d new StrBuilder(\"abab\");\n        \n        assertEquals (2, sb.lastIndexOf(\u0027a\u0027));\n        //should work like String#lastIndexOf\n        assertEquals (\"abab\".lastIndexOf(\u0027a\u0027), sb.lastIndexOf(\u0027a\u0027));\n        \n        assertEquals(3, sb.lastIndexOf(\u0027b\u0027));\n        assertEquals (\"abab\".lastIndexOf(\u0027b\u0027), sb.lastIndexOf(\u0027b\u0027));\n        \n        assertEquals (-1, sb.lastIndexOf(\u0027z\u0027));\n    }",
    "begin_line": 1372,
    "end_line": 1383,
    "comment": "",
    "child_ranges": [
      "(line 1373,col 9)-(line 1373,col 53)",
      "(line 1375,col 9)-(line 1375,col 46)",
      "(line 1377,col 9)-(line 1377,col 68)",
      "(line 1379,col 9)-(line 1379,col 45)",
      "(line 1380,col 9)-(line 1380,col 68)",
      "(line 1382,col 9)-(line 1382,col 47)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char_int()",
    "snippet": "@Test\n    public void testLastIndexOf_char_int() {\n        StrBuilder sb \u003d new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf(\u0027a\u0027, -1));\n        assertEquals(0, sb.lastIndexOf(\u0027a\u0027, 0));\n        assertEquals(0, sb.lastIndexOf(\u0027a\u0027, 1));\n\n        // should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\u0027a\u0027, 1), sb.lastIndexOf(\u0027a\u0027, 1));\n\n        assertEquals(1, sb.lastIndexOf(\u0027b\u0027, 2));\n        assertEquals(\"abab\".lastIndexOf(\u0027b\u0027, 2), sb.lastIndexOf(\u0027b\u0027, 2));\n\n        assertEquals(-1, sb.lastIndexOf(\u0027z\u0027, 2));\n\n        sb \u003d new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf(\u0027z\u0027, sb.length()));\n        assertEquals(-1, sb.lastIndexOf(\u0027z\u0027, 1));\n    }",
    "begin_line": 1386,
    "end_line": 1403,
    "comment": "",
    "child_ranges": [
      "(line 1387,col 9)-(line 1387,col 47)",
      "(line 1388,col 9)-(line 1388,col 50)",
      "(line 1389,col 9)-(line 1389,col 48)",
      "(line 1390,col 9)-(line 1390,col 48)",
      "(line 1393,col 9)-(line 1393,col 73)",
      "(line 1395,col 9)-(line 1395,col 48)",
      "(line 1396,col 9)-(line 1396,col 73)",
      "(line 1398,col 9)-(line 1398,col 49)",
      "(line 1400,col 9)-(line 1400,col 38)",
      "(line 1401,col 9)-(line 1401,col 58)",
      "(line 1402,col 9)-(line 1402,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String()",
    "snippet": "@Test\n    public void testIndexOf_String() {\n        final StrBuilder sb \u003d new StrBuilder(\"abab\");\n        \n        assertEquals(0, sb.indexOf(\"a\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n        \n        assertEquals(0, sb.indexOf(\"ab\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n        \n        assertEquals(1, sb.indexOf(\"b\"));\n        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n        \n        assertEquals(1, sb.indexOf(\"ba\"));\n        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n        \n        assertEquals(-1, sb.indexOf(\"z\"));\n        \n        assertEquals(-1, sb.indexOf((String) null));\n    }",
    "begin_line": 1407,
    "end_line": 1427,
    "comment": "",
    "child_ranges": [
      "(line 1408,col 9)-(line 1408,col 53)",
      "(line 1410,col 9)-(line 1410,col 41)",
      "(line 1412,col 9)-(line 1412,col 59)",
      "(line 1414,col 9)-(line 1414,col 42)",
      "(line 1416,col 9)-(line 1416,col 61)",
      "(line 1418,col 9)-(line 1418,col 41)",
      "(line 1419,col 9)-(line 1419,col 59)",
      "(line 1421,col 9)-(line 1421,col 42)",
      "(line 1422,col 9)-(line 1422,col 61)",
      "(line 1424,col 9)-(line 1424,col 42)",
      "(line 1426,col 9)-(line 1426,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int()",
    "snippet": "@Test\n    public void testIndexOf_String_int() {\n        StrBuilder sb \u003d new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\"a\", -1));\n        assertEquals(0, sb.indexOf(\"a\", 0));\n        assertEquals(2, sb.indexOf(\"a\", 1));\n        assertEquals(2, sb.indexOf(\"a\", 2));\n        assertEquals(-1, sb.indexOf(\"a\", 3));\n        assertEquals(-1, sb.indexOf(\"a\", 4));\n        assertEquals(-1, sb.indexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n        assertEquals(0, sb.indexOf(\"\", 0));\n        assertEquals(1, sb.indexOf(\"\", 1));\n        \n        //should work like String#indexOf\n        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n        \n        assertEquals(2, sb.indexOf(\"ab\", 1));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n        \n        assertEquals(3, sb.indexOf(\"b\", 2));\n        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n        \n        assertEquals(1, sb.indexOf(\"ba\", 1));\n        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.indexOf(\"z\", 2));\n        \n        sb \u003d new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf(\"za\", 0));\n        assertEquals(-1, sb.indexOf(\"za\", 3));\n        \n        assertEquals(-1, sb.indexOf((String) null, 2));\n    }",
    "begin_line": 1430,
    "end_line": 1464,
    "comment": "",
    "child_ranges": [
      "(line 1431,col 9)-(line 1431,col 47)",
      "(line 1432,col 9)-(line 1432,col 45)",
      "(line 1433,col 9)-(line 1433,col 44)",
      "(line 1434,col 9)-(line 1434,col 44)",
      "(line 1435,col 9)-(line 1435,col 44)",
      "(line 1436,col 9)-(line 1436,col 45)",
      "(line 1437,col 9)-(line 1437,col 45)",
      "(line 1438,col 9)-(line 1438,col 45)",
      "(line 1440,col 9)-(line 1440,col 50)",
      "(line 1441,col 9)-(line 1441,col 43)",
      "(line 1442,col 9)-(line 1442,col 43)",
      "(line 1445,col 9)-(line 1445,col 66)",
      "(line 1447,col 9)-(line 1447,col 45)",
      "(line 1449,col 9)-(line 1449,col 67)",
      "(line 1451,col 9)-(line 1451,col 44)",
      "(line 1452,col 9)-(line 1452,col 65)",
      "(line 1454,col 9)-(line 1454,col 45)",
      "(line 1455,col 9)-(line 1455,col 67)",
      "(line 1457,col 9)-(line 1457,col 45)",
      "(line 1459,col 9)-(line 1459,col 38)",
      "(line 1460,col 9)-(line 1460,col 45)",
      "(line 1461,col 9)-(line 1461,col 46)",
      "(line 1463,col 9)-(line 1463,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String()",
    "snippet": "@Test\n    public void testLastIndexOf_String() {\n        final StrBuilder sb \u003d new StrBuilder(\"abab\");\n        \n        assertEquals(2, sb.lastIndexOf(\"a\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n        \n        assertEquals(2, sb.lastIndexOf(\"ab\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n        \n        assertEquals(3, sb.lastIndexOf(\"b\"));\n        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\"));\n        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\"));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null));\n    }",
    "begin_line": 1467,
    "end_line": 1487,
    "comment": "",
    "child_ranges": [
      "(line 1468,col 9)-(line 1468,col 53)",
      "(line 1470,col 9)-(line 1470,col 45)",
      "(line 1472,col 9)-(line 1472,col 67)",
      "(line 1474,col 9)-(line 1474,col 46)",
      "(line 1476,col 9)-(line 1476,col 69)",
      "(line 1478,col 9)-(line 1478,col 45)",
      "(line 1479,col 9)-(line 1479,col 67)",
      "(line 1481,col 9)-(line 1481,col 46)",
      "(line 1482,col 9)-(line 1482,col 69)",
      "(line 1484,col 9)-(line 1484,col 46)",
      "(line 1486,col 9)-(line 1486,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int()",
    "snippet": "@Test\n    public void testLastIndexOf_String_int() {\n        StrBuilder sb \u003d new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n        \n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n        \n        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n        \n        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n        \n        sb \u003d new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n    }",
    "begin_line": 1490,
    "end_line": 1524,
    "comment": "",
    "child_ranges": [
      "(line 1491,col 9)-(line 1491,col 47)",
      "(line 1492,col 9)-(line 1492,col 50)",
      "(line 1493,col 9)-(line 1493,col 48)",
      "(line 1494,col 9)-(line 1494,col 48)",
      "(line 1495,col 9)-(line 1495,col 48)",
      "(line 1496,col 9)-(line 1496,col 48)",
      "(line 1497,col 9)-(line 1497,col 48)",
      "(line 1498,col 9)-(line 1498,col 48)",
      "(line 1500,col 9)-(line 1500,col 54)",
      "(line 1501,col 9)-(line 1501,col 71)",
      "(line 1502,col 9)-(line 1502,col 71)",
      "(line 1505,col 9)-(line 1505,col 73)",
      "(line 1507,col 9)-(line 1507,col 49)",
      "(line 1509,col 9)-(line 1509,col 75)",
      "(line 1511,col 9)-(line 1511,col 48)",
      "(line 1512,col 9)-(line 1512,col 73)",
      "(line 1514,col 9)-(line 1514,col 49)",
      "(line 1515,col 9)-(line 1515,col 75)",
      "(line 1517,col 9)-(line 1517,col 49)",
      "(line 1519,col 9)-(line 1519,col 38)",
      "(line 1520,col 9)-(line 1520,col 59)",
      "(line 1521,col 9)-(line 1521,col 50)",
      "(line 1523,col 9)-(line 1523,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher()",
    "snippet": "@Test\n    public void testIndexOf_StrMatcher() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027)));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027)));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027)));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.indexOf(StrMatcher.charMatcher(\u0027d\u0027)));\n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n    }",
    "begin_line": 1528,
    "end_line": 1543,
    "comment": "",
    "child_ranges": [
      "(line 1529,col 9)-(line 1529,col 47)",
      "(line 1530,col 9)-(line 1530,col 56)",
      "(line 1531,col 9)-(line 1531,col 66)",
      "(line 1533,col 9)-(line 1533,col 27)",
      "(line 1534,col 9)-(line 1534,col 65)",
      "(line 1535,col 9)-(line 1535,col 65)",
      "(line 1536,col 9)-(line 1536,col 63)",
      "(line 1537,col 9)-(line 1537,col 65)",
      "(line 1538,col 9)-(line 1538,col 63)",
      "(line 1539,col 9)-(line 1539,col 56)",
      "(line 1541,col 9)-(line 1541,col 34)",
      "(line 1542,col 9)-(line 1542,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int()",
    "snippet": "@Test\n    public void testIndexOf_StrMatcher_int() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), 0));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), -2));\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), 0));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027a\u0027), 20));\n        \n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), -1));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 0));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 1));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 2));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 3));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 5));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher(\u0027b\u0027), 6));\n        \n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n    }",
    "begin_line": 1546,
    "end_line": 1583,
    "comment": "",
    "child_ranges": [
      "(line 1547,col 9)-(line 1547,col 47)",
      "(line 1548,col 9)-(line 1548,col 59)",
      "(line 1549,col 9)-(line 1549,col 69)",
      "(line 1550,col 9)-(line 1550,col 69)",
      "(line 1552,col 9)-(line 1552,col 27)",
      "(line 1553,col 9)-(line 1553,col 69)",
      "(line 1554,col 9)-(line 1554,col 68)",
      "(line 1555,col 9)-(line 1555,col 69)",
      "(line 1556,col 9)-(line 1556,col 70)",
      "(line 1558,col 9)-(line 1558,col 69)",
      "(line 1559,col 9)-(line 1559,col 68)",
      "(line 1560,col 9)-(line 1560,col 68)",
      "(line 1561,col 9)-(line 1561,col 68)",
      "(line 1562,col 9)-(line 1562,col 68)",
      "(line 1563,col 9)-(line 1563,col 69)",
      "(line 1564,col 9)-(line 1564,col 69)",
      "(line 1565,col 9)-(line 1565,col 69)",
      "(line 1567,col 9)-(line 1567,col 67)",
      "(line 1568,col 9)-(line 1568,col 66)",
      "(line 1569,col 9)-(line 1569,col 66)",
      "(line 1570,col 9)-(line 1570,col 67)",
      "(line 1571,col 9)-(line 1571,col 68)",
      "(line 1573,col 9)-(line 1573,col 66)",
      "(line 1574,col 9)-(line 1574,col 59)",
      "(line 1576,col 9)-(line 1576,col 42)",
      "(line 1577,col 9)-(line 1577,col 57)",
      "(line 1578,col 9)-(line 1578,col 57)",
      "(line 1579,col 9)-(line 1579,col 58)",
      "(line 1580,col 9)-(line 1580,col 59)",
      "(line 1581,col 9)-(line 1581,col 59)",
      "(line 1582,col 9)-(line 1582,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher()",
    "snippet": "@Test\n    public void testLastIndexOf_StrMatcher() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027)));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027)));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027)));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher(\u0027d\u0027)));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n    }",
    "begin_line": 1586,
    "end_line": 1601,
    "comment": "",
    "child_ranges": [
      "(line 1587,col 9)-(line 1587,col 47)",
      "(line 1588,col 9)-(line 1588,col 60)",
      "(line 1589,col 9)-(line 1589,col 70)",
      "(line 1591,col 9)-(line 1591,col 27)",
      "(line 1592,col 9)-(line 1592,col 69)",
      "(line 1593,col 9)-(line 1593,col 69)",
      "(line 1594,col 9)-(line 1594,col 67)",
      "(line 1595,col 9)-(line 1595,col 69)",
      "(line 1596,col 9)-(line 1596,col 67)",
      "(line 1597,col 9)-(line 1597,col 60)",
      "(line 1599,col 9)-(line 1599,col 34)",
      "(line 1600,col 9)-(line 1600,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()",
    "snippet": "@Test\n    public void testLastIndexOf_StrMatcher_int() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), 0));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), -1));\n        \n        sb.append(\"ab bd\");\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), -2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), 0));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), 2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher(\u0027a\u0027), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), -1));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 0));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 1));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 2));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 3));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 4));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 5));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher(\u0027b\u0027), 6));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n    }",
    "begin_line": 1604,
    "end_line": 1642,
    "comment": "",
    "child_ranges": [
      "(line 1605,col 9)-(line 1605,col 47)",
      "(line 1606,col 9)-(line 1606,col 63)",
      "(line 1607,col 9)-(line 1607,col 73)",
      "(line 1608,col 9)-(line 1608,col 73)",
      "(line 1609,col 9)-(line 1609,col 74)",
      "(line 1611,col 9)-(line 1611,col 27)",
      "(line 1612,col 9)-(line 1612,col 74)",
      "(line 1613,col 9)-(line 1613,col 72)",
      "(line 1614,col 9)-(line 1614,col 72)",
      "(line 1615,col 9)-(line 1615,col 73)",
      "(line 1617,col 9)-(line 1617,col 74)",
      "(line 1618,col 9)-(line 1618,col 73)",
      "(line 1619,col 9)-(line 1619,col 72)",
      "(line 1620,col 9)-(line 1620,col 72)",
      "(line 1621,col 9)-(line 1621,col 72)",
      "(line 1622,col 9)-(line 1622,col 72)",
      "(line 1623,col 9)-(line 1623,col 72)",
      "(line 1624,col 9)-(line 1624,col 72)",
      "(line 1626,col 9)-(line 1626,col 72)",
      "(line 1627,col 9)-(line 1627,col 71)",
      "(line 1628,col 9)-(line 1628,col 70)",
      "(line 1629,col 9)-(line 1629,col 70)",
      "(line 1630,col 9)-(line 1630,col 71)",
      "(line 1632,col 9)-(line 1632,col 70)",
      "(line 1633,col 9)-(line 1633,col 63)",
      "(line 1635,col 9)-(line 1635,col 42)",
      "(line 1636,col 9)-(line 1636,col 62)",
      "(line 1637,col 9)-(line 1637,col 62)",
      "(line 1638,col 9)-(line 1638,col 61)",
      "(line 1639,col 9)-(line 1639,col 62)",
      "(line 1640,col 9)-(line 1640,col 62)",
      "(line 1641,col 9)-(line 1641,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) {\n            if (buffer[pos] \u003d\u003d \u0027A\u0027) {\n                pos++;\n                if (pos \u003c bufferEnd \u0026\u0026 buffer[pos] \u003e\u003d \u00270\u0027 \u0026\u0026 buffer[pos] \u003c\u003d \u00279\u0027) {\n                    return 2;\n                }\n            }\n            return 0;\n        }",
    "begin_line": 1646,
    "end_line": 1654,
    "comment": "",
    "child_ranges": [
      "(line 1647,col 13)-(line 1652,col 13)",
      "(line 1653,col 13)-(line 1653,col 21)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer()",
    "snippet": "@Test\n    public void testAsTokenizer() throws Exception {\n        // from Javadoc\n        final StrBuilder b \u003d new StrBuilder();\n        b.append(\"a b \");\n        final StrTokenizer t \u003d b.asTokenizer();\n        \n        final String[] tokens1 \u003d t.getTokenArray();\n        assertEquals(2, tokens1.length);\n        assertEquals(\"a\", tokens1[0]);\n        assertEquals(\"b\", tokens1[1]);\n        assertEquals(2, t.size());\n        \n        b.append(\"c d \");\n        final String[] tokens2 \u003d t.getTokenArray();\n        assertEquals(2, tokens2.length);\n        assertEquals(\"a\", tokens2[0]);\n        assertEquals(\"b\", tokens2[1]);\n        assertEquals(2, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        \n        t.reset();\n        final String[] tokens3 \u003d t.getTokenArray();\n        assertEquals(4, tokens3.length);\n        assertEquals(\"a\", tokens3[0]);\n        assertEquals(\"b\", tokens3[1]);\n        assertEquals(\"c\", tokens3[2]);\n        assertEquals(\"d\", tokens3[3]);\n        assertEquals(4, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        assertEquals(\"c\", t.next());\n        assertEquals(\"d\", t.next());\n        \n        assertEquals(\"a b c d \", t.getContent());\n    }",
    "begin_line": 1659,
    "end_line": 1694,
    "comment": "",
    "child_ranges": [
      "(line 1661,col 9)-(line 1661,col 46)",
      "(line 1662,col 9)-(line 1662,col 25)",
      "(line 1663,col 9)-(line 1663,col 47)",
      "(line 1665,col 9)-(line 1665,col 51)",
      "(line 1666,col 9)-(line 1666,col 40)",
      "(line 1667,col 9)-(line 1667,col 38)",
      "(line 1668,col 9)-(line 1668,col 38)",
      "(line 1669,col 9)-(line 1669,col 34)",
      "(line 1671,col 9)-(line 1671,col 25)",
      "(line 1672,col 9)-(line 1672,col 51)",
      "(line 1673,col 9)-(line 1673,col 40)",
      "(line 1674,col 9)-(line 1674,col 38)",
      "(line 1675,col 9)-(line 1675,col 38)",
      "(line 1676,col 9)-(line 1676,col 34)",
      "(line 1677,col 9)-(line 1677,col 36)",
      "(line 1678,col 9)-(line 1678,col 36)",
      "(line 1680,col 9)-(line 1680,col 18)",
      "(line 1681,col 9)-(line 1681,col 51)",
      "(line 1682,col 9)-(line 1682,col 40)",
      "(line 1683,col 9)-(line 1683,col 38)",
      "(line 1684,col 9)-(line 1684,col 38)",
      "(line 1685,col 9)-(line 1685,col 38)",
      "(line 1686,col 9)-(line 1686,col 38)",
      "(line 1687,col 9)-(line 1687,col 34)",
      "(line 1688,col 9)-(line 1688,col 36)",
      "(line 1689,col 9)-(line 1689,col 36)",
      "(line 1690,col 9)-(line 1690,col 36)",
      "(line 1691,col 9)-(line 1691,col 36)",
      "(line 1693,col 9)-(line 1693,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsReader()",
    "snippet": "@Test\n    public void testAsReader() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"some text\");\n        Reader reader \u003d sb.asReader();\n        assertTrue(reader.ready());\n        final char[] buf \u003d new char[40];\n        assertEquals(9, reader.read(buf));\n        assertEquals(\"some text\", new String(buf, 0, 9));\n        \n        assertEquals(-1, reader.read());\n        assertFalse(reader.ready());\n        assertEquals(0, reader.skip(2));\n        assertEquals(0, reader.skip(-1));\n        \n        assertTrue(reader.markSupported());\n        reader \u003d sb.asReader();\n        assertEquals(\u0027s\u0027, reader.read());\n        reader.mark(-1);\n        char[] array \u003d new char[3];\n        assertEquals(3, reader.read(array, 0, 3));\n        assertEquals(\u0027o\u0027, array[0]);\n        assertEquals(\u0027m\u0027, array[1]);\n        assertEquals(\u0027e\u0027, array[2]);\n        reader.reset();\n        assertEquals(1, reader.read(array, 1, 1));\n        assertEquals(\u0027o\u0027, array[0]);\n        assertEquals(\u0027o\u0027, array[1]);\n        assertEquals(\u0027e\u0027, array[2]);\n        assertEquals(2, reader.skip(2));\n        assertEquals(\u0027 \u0027, reader.read());\n        \n        assertTrue(reader.ready());\n        reader.close();\n        assertTrue(reader.ready());\n        \n        reader \u003d sb.asReader();\n        array \u003d new char[3];\n        try {\n            reader.read(array, -1, 0);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, -1);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 100, 1);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, 100);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (final IndexOutOfBoundsException ex) {}\n        \n        assertEquals(0, reader.read(array, 0, 0));\n        assertEquals(0, array[0]);\n        assertEquals(0, array[1]);\n        assertEquals(0, array[2]);\n        \n        reader.skip(9);\n        assertEquals(-1, reader.read(array, 0, 1));\n        \n        reader.reset();\n        array \u003d new char[30];\n        assertEquals(9, reader.read(array, 0, 30));\n    }",
    "begin_line": 1698,
    "end_line": 1766,
    "comment": "",
    "child_ranges": [
      "(line 1699,col 9)-(line 1699,col 58)",
      "(line 1700,col 9)-(line 1700,col 38)",
      "(line 1701,col 9)-(line 1701,col 35)",
      "(line 1702,col 9)-(line 1702,col 40)",
      "(line 1703,col 9)-(line 1703,col 42)",
      "(line 1704,col 9)-(line 1704,col 57)",
      "(line 1706,col 9)-(line 1706,col 40)",
      "(line 1707,col 9)-(line 1707,col 36)",
      "(line 1708,col 9)-(line 1708,col 40)",
      "(line 1709,col 9)-(line 1709,col 41)",
      "(line 1711,col 9)-(line 1711,col 43)",
      "(line 1712,col 9)-(line 1712,col 31)",
      "(line 1713,col 9)-(line 1713,col 41)",
      "(line 1714,col 9)-(line 1714,col 24)",
      "(line 1715,col 9)-(line 1715,col 35)",
      "(line 1716,col 9)-(line 1716,col 50)",
      "(line 1717,col 9)-(line 1717,col 36)",
      "(line 1718,col 9)-(line 1718,col 36)",
      "(line 1719,col 9)-(line 1719,col 36)",
      "(line 1720,col 9)-(line 1720,col 23)",
      "(line 1721,col 9)-(line 1721,col 50)",
      "(line 1722,col 9)-(line 1722,col 36)",
      "(line 1723,col 9)-(line 1723,col 36)",
      "(line 1724,col 9)-(line 1724,col 36)",
      "(line 1725,col 9)-(line 1725,col 40)",
      "(line 1726,col 9)-(line 1726,col 41)",
      "(line 1728,col 9)-(line 1728,col 35)",
      "(line 1729,col 9)-(line 1729,col 23)",
      "(line 1730,col 9)-(line 1730,col 35)",
      "(line 1732,col 9)-(line 1732,col 31)",
      "(line 1733,col 9)-(line 1733,col 28)",
      "(line 1734,col 9)-(line 1737,col 55)",
      "(line 1738,col 9)-(line 1741,col 55)",
      "(line 1742,col 9)-(line 1745,col 55)",
      "(line 1746,col 9)-(line 1749,col 55)",
      "(line 1750,col 9)-(line 1753,col 55)",
      "(line 1755,col 9)-(line 1755,col 50)",
      "(line 1756,col 9)-(line 1756,col 34)",
      "(line 1757,col 9)-(line 1757,col 34)",
      "(line 1758,col 9)-(line 1758,col 34)",
      "(line 1760,col 9)-(line 1760,col 23)",
      "(line 1761,col 9)-(line 1761,col 51)",
      "(line 1763,col 9)-(line 1763,col 23)",
      "(line 1764,col 9)-(line 1764,col 29)",
      "(line 1765,col 9)-(line 1765,col 51)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsWriter()",
    "snippet": "@Test\n    public void testAsWriter() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"base\");\n        final Writer writer \u003d sb.asWriter();\n        \n        writer.write(\u0027l\u0027);\n        assertEquals(\"basel\", sb.toString());\n        \n        writer.write(new char[] {\u0027i\u0027, \u0027n\u0027});\n        assertEquals(\"baselin\", sb.toString());\n        \n        writer.write(new char[] {\u0027n\u0027, \u0027e\u0027, \u0027r\u0027}, 1, 2);\n        assertEquals(\"baseliner\", sb.toString());\n        \n        writer.write(\" rout\");\n        assertEquals(\"baseliner rout\", sb.toString());\n        \n        writer.write(\"ping that server\", 1, 3);\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.flush();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.close();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.write(\" hi\");  // works after close\n        assertEquals(\"baseliner routing hi\", sb.toString());\n        \n        sb.setLength(4);  // mix and match\n        writer.write(\u0027d\u0027);\n        assertEquals(\"based\", sb.toString());\n    }",
    "begin_line": 1770,
    "end_line": 1801,
    "comment": "",
    "child_ranges": [
      "(line 1771,col 9)-(line 1771,col 53)",
      "(line 1772,col 9)-(line 1772,col 44)",
      "(line 1774,col 9)-(line 1774,col 26)",
      "(line 1775,col 9)-(line 1775,col 45)",
      "(line 1777,col 9)-(line 1777,col 44)",
      "(line 1778,col 9)-(line 1778,col 47)",
      "(line 1780,col 9)-(line 1780,col 55)",
      "(line 1781,col 9)-(line 1781,col 49)",
      "(line 1783,col 9)-(line 1783,col 30)",
      "(line 1784,col 9)-(line 1784,col 54)",
      "(line 1786,col 9)-(line 1786,col 47)",
      "(line 1787,col 9)-(line 1787,col 57)",
      "(line 1789,col 9)-(line 1789,col 23)",
      "(line 1790,col 9)-(line 1790,col 57)",
      "(line 1792,col 9)-(line 1792,col 23)",
      "(line 1793,col 9)-(line 1793,col 57)",
      "(line 1795,col 9)-(line 1795,col 28)",
      "(line 1796,col 9)-(line 1796,col 60)",
      "(line 1798,col 9)-(line 1798,col 24)",
      "(line 1799,col 9)-(line 1799,col 26)",
      "(line 1800,col 9)-(line 1800,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase()",
    "snippet": "@Test\n    public void testEqualsIgnoreCase() {\n        final StrBuilder sb1 \u003d new StrBuilder();\n        final StrBuilder sb2 \u003d new StrBuilder();\n        assertTrue(sb1.equalsIgnoreCase(sb1));\n        assertTrue(sb1.equalsIgnoreCase(sb2));\n        assertTrue(sb2.equalsIgnoreCase(sb2));\n        \n        sb1.append(\"abc\");\n        assertFalse(sb1.equalsIgnoreCase(sb2));\n        \n        sb2.append(\"ABC\");\n        assertTrue(sb1.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertTrue(sb1.equalsIgnoreCase(sb2));\n        assertTrue(sb1.equalsIgnoreCase(sb1));\n        assertTrue(sb2.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"aBc\");\n        assertTrue(sb1.equalsIgnoreCase(sb2));\n    }",
    "begin_line": 1805,
    "end_line": 1825,
    "comment": "",
    "child_ranges": [
      "(line 1806,col 9)-(line 1806,col 48)",
      "(line 1807,col 9)-(line 1807,col 48)",
      "(line 1808,col 9)-(line 1808,col 46)",
      "(line 1809,col 9)-(line 1809,col 46)",
      "(line 1810,col 9)-(line 1810,col 46)",
      "(line 1812,col 9)-(line 1812,col 26)",
      "(line 1813,col 9)-(line 1813,col 47)",
      "(line 1815,col 9)-(line 1815,col 26)",
      "(line 1816,col 9)-(line 1816,col 46)",
      "(line 1818,col 9)-(line 1818,col 34)",
      "(line 1819,col 9)-(line 1819,col 46)",
      "(line 1820,col 9)-(line 1820,col 46)",
      "(line 1821,col 9)-(line 1821,col 46)",
      "(line 1823,col 9)-(line 1823,col 34)",
      "(line 1824,col 9)-(line 1824,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEquals()",
    "snippet": "@Test\n    public void testEquals() {\n        final StrBuilder sb1 \u003d new StrBuilder();\n        final StrBuilder sb2 \u003d new StrBuilder();\n        assertTrue(sb1.equals(sb2));\n        assertTrue(sb1.equals(sb1));\n        assertTrue(sb2.equals(sb2));\n        assertTrue(sb1.equals((Object) sb2));\n        \n        sb1.append(\"abc\");\n        assertFalse(sb1.equals(sb2));\n        assertFalse(sb1.equals((Object) sb2));\n        \n        sb2.append(\"ABC\");\n        assertFalse(sb1.equals(sb2));\n        assertFalse(sb1.equals((Object) sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertTrue(sb1.equals(sb2));\n        assertTrue(sb1.equals((Object) sb2));\n        \n        assertFalse(sb1.equals(Integer.valueOf(1)));\n        assertFalse(sb1.equals(\"abc\"));\n    }",
    "begin_line": 1829,
    "end_line": 1851,
    "comment": "",
    "child_ranges": [
      "(line 1830,col 9)-(line 1830,col 48)",
      "(line 1831,col 9)-(line 1831,col 48)",
      "(line 1832,col 9)-(line 1832,col 36)",
      "(line 1833,col 9)-(line 1833,col 36)",
      "(line 1834,col 9)-(line 1834,col 36)",
      "(line 1835,col 9)-(line 1835,col 45)",
      "(line 1837,col 9)-(line 1837,col 26)",
      "(line 1838,col 9)-(line 1838,col 37)",
      "(line 1839,col 9)-(line 1839,col 46)",
      "(line 1841,col 9)-(line 1841,col 26)",
      "(line 1842,col 9)-(line 1842,col 37)",
      "(line 1843,col 9)-(line 1843,col 46)",
      "(line 1845,col 9)-(line 1845,col 34)",
      "(line 1846,col 9)-(line 1846,col 36)",
      "(line 1847,col 9)-(line 1847,col 45)",
      "(line 1849,col 9)-(line 1849,col 52)",
      "(line 1850,col 9)-(line 1850,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()",
    "snippet": "@Test\n    public void test_LANG_1131_EqualsWithNullStrBuilder() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder();\n        final StrBuilder other \u003d null;\n        assertFalse(sb.equals(other));\n    }",
    "begin_line": 1854,
    "end_line": 1858,
    "comment": "",
    "child_ranges": [
      "(line 1855,col 9)-(line 1855,col 47)",
      "(line 1856,col 9)-(line 1856,col 38)",
      "(line 1857,col 9)-(line 1857,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testHashCode()",
    "snippet": "@Test\n    public void testHashCode() {\n        final StrBuilder sb \u003d new StrBuilder();\n        final int hc1a \u003d sb.hashCode();\n        final int hc1b \u003d sb.hashCode();\n        assertEquals(0, hc1a);\n        assertEquals(hc1a, hc1b);\n        \n        sb.append(\"abc\");\n        final int hc2a \u003d sb.hashCode();\n        final int hc2b \u003d sb.hashCode();\n        assertTrue(hc2a !\u003d 0);\n        assertEquals(hc2a, hc2b);\n    }",
    "begin_line": 1862,
    "end_line": 1874,
    "comment": "",
    "child_ranges": [
      "(line 1863,col 9)-(line 1863,col 47)",
      "(line 1864,col 9)-(line 1864,col 39)",
      "(line 1865,col 9)-(line 1865,col 39)",
      "(line 1866,col 9)-(line 1866,col 30)",
      "(line 1867,col 9)-(line 1867,col 33)",
      "(line 1869,col 9)-(line 1869,col 25)",
      "(line 1870,col 9)-(line 1870,col 39)",
      "(line 1871,col 9)-(line 1871,col 39)",
      "(line 1872,col 9)-(line 1872,col 30)",
      "(line 1873,col 9)-(line 1873,col 33)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        final StrBuilder sb \u003d new StrBuilder(\"abc\");\n        assertEquals(\"abc\", sb.toString());\n    }",
    "begin_line": 1878,
    "end_line": 1881,
    "comment": "",
    "child_ranges": [
      "(line 1879,col 9)-(line 1879,col 52)",
      "(line 1880,col 9)-(line 1880,col 43)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer()",
    "snippet": "@Test\n    public void testToStringBuffer() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n        \n        sb.append(\"junit\");\n        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n    }",
    "begin_line": 1885,
    "end_line": 1891,
    "comment": "",
    "child_ranges": [
      "(line 1886,col 9)-(line 1886,col 47)",
      "(line 1887,col 9)-(line 1887,col 84)",
      "(line 1889,col 9)-(line 1889,col 27)",
      "(line 1890,col 9)-(line 1890,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToStringBuilder()",
    "snippet": "@Test\n    public void testToStringBuilder() {\n        final StrBuilder sb \u003d new StrBuilder();\n        assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());\n        \n        sb.append(\"junit\");\n        assertEquals(new StringBuilder(\"junit\").toString(), sb.toStringBuilder().toString());\n    }",
    "begin_line": 1895,
    "end_line": 1901,
    "comment": "",
    "child_ranges": [
      "(line 1896,col 9)-(line 1896,col 47)",
      "(line 1897,col 9)-(line 1897,col 86)",
      "(line 1899,col 9)-(line 1899,col 27)",
      "(line 1900,col 9)-(line 1900,col 93)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang294()",
    "snippet": "@Test\n    public void testLang294() {\n        final StrBuilder sb \u003d new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n        sb.deleteAll(\"\\n%BLAH%\");\n        assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n    }",
    "begin_line": 1905,
    "end_line": 1909,
    "comment": "",
    "child_ranges": [
      "(line 1906,col 9)-(line 1906,col 99)",
      "(line 1907,col 9)-(line 1907,col 33)",
      "(line 1908,col 9)-(line 1908,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294()",
    "snippet": "@Test\n    public void testIndexOfLang294() {\n        final StrBuilder sb \u003d new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertEquals(-1, sb.indexOf(\"three\"));\n    }",
    "begin_line": 1912,
    "end_line": 1916,
    "comment": "",
    "child_ranges": [
      "(line 1913,col 9)-(line 1913,col 60)",
      "(line 1914,col 9)-(line 1914,col 32)",
      "(line 1915,col 9)-(line 1915,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang295()",
    "snippet": "@Test\n    public void testLang295() {\n        final StrBuilder sb \u003d new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains(\u0027h\u0027));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf(\u0027h\u0027));\n    }",
    "begin_line": 1920,
    "end_line": 1925,
    "comment": "",
    "child_ranges": [
      "(line 1921,col 9)-(line 1921,col 60)",
      "(line 1922,col 9)-(line 1922,col 32)",
      "(line 1923,col 9)-(line 1923,col 108)",
      "(line 1924,col 9)-(line 1924,col 111)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang412Right()",
    "snippet": "@Test\n    public void testLang412Right() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.appendFixedWidthPadRight(null, 10, \u0027*\u0027);\n        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n    }",
    "begin_line": 1929,
    "end_line": 1933,
    "comment": "",
    "child_ranges": [
      "(line 1930,col 9)-(line 1930,col 47)",
      "(line 1931,col 9)-(line 1931,col 51)",
      "(line 1932,col 9)-(line 1932,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang412Left()",
    "snippet": "@Test\n    public void testLang412Left() {\n        final StrBuilder sb \u003d new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, \u0027*\u0027);\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }",
    "begin_line": 1936,
    "end_line": 1940,
    "comment": "",
    "child_ranges": [
      "(line 1937,col 9)-(line 1937,col 47)",
      "(line 1938,col 9)-(line 1938,col 50)",
      "(line 1939,col 9)-(line 1939,col 105)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsBuilder()",
    "snippet": "@Test\n    public void testAsBuilder() {\n        final StrBuilder sb \u003d new StrBuilder().appendAll(\"Lorem\", \" \", \"ipsum\", \" \", \"dolor\");\n        assertEquals(sb.toString(), sb.build());\n    }",
    "begin_line": 1943,
    "end_line": 1946,
    "comment": "",
    "child_ranges": [
      "(line 1944,col 9)-(line 1944,col 94)",
      "(line 1945,col 9)-(line 1945,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAppendCharBuffer()",
    "snippet": "@Test\n    public void testAppendCharBuffer() {\n        final StrBuilder sb1 \u003d new StrBuilder();\n        final CharBuffer buf \u003d CharBuffer.allocate(10);\n        buf.append(\"0123456789\");\n        buf.flip();\n        sb1.append(buf);\n        assertEquals(\"0123456789\", sb1.toString());\n\n        final StrBuilder sb2 \u003d new StrBuilder();\n        sb2.append(buf, 1, 8);\n        assertEquals(\"12345678\", sb2.toString());\n    }",
    "begin_line": 1950,
    "end_line": 1961,
    "comment": "",
    "child_ranges": [
      "(line 1951,col 9)-(line 1951,col 48)",
      "(line 1952,col 9)-(line 1952,col 55)",
      "(line 1953,col 9)-(line 1953,col 33)",
      "(line 1954,col 9)-(line 1954,col 19)",
      "(line 1955,col 9)-(line 1955,col 24)",
      "(line 1956,col 9)-(line 1956,col 51)",
      "(line 1958,col 9)-(line 1958,col 48)",
      "(line 1959,col 9)-(line 1959,col 30)",
      "(line 1960,col 9)-(line 1960,col 49)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAppendToWriter()",
    "snippet": "@Test\n    public void testAppendToWriter() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"1234567890\");\n        final StringWriter writer \u003d new StringWriter();\n        writer.append(\"Test \");\n\n        sb.appendTo(writer);\n\n        assertEquals(\"Test 1234567890\", writer.toString());\n    }",
    "begin_line": 1965,
    "end_line": 1973,
    "comment": "",
    "child_ranges": [
      "(line 1966,col 9)-(line 1966,col 59)",
      "(line 1967,col 9)-(line 1967,col 55)",
      "(line 1968,col 9)-(line 1968,col 31)",
      "(line 1970,col 9)-(line 1970,col 28)",
      "(line 1972,col 9)-(line 1972,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuilder()",
    "snippet": "@Test\n    public void testAppendToStringBuilder() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"1234567890\");\n        final StringBuilder builder \u003d new StringBuilder(\"Test \");\n\n        sb.appendTo(builder);\n\n        assertEquals(\"Test 1234567890\", builder.toString());\n    }",
    "begin_line": 1976,
    "end_line": 1983,
    "comment": "",
    "child_ranges": [
      "(line 1977,col 9)-(line 1977,col 59)",
      "(line 1978,col 9)-(line 1978,col 65)",
      "(line 1980,col 9)-(line 1980,col 29)",
      "(line 1982,col 9)-(line 1982,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuffer()",
    "snippet": "@Test\n    public void testAppendToStringBuffer() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"1234567890\");\n        final StringBuffer buffer \u003d new StringBuffer(\"Test \");\n\n        sb.appendTo(buffer);\n\n        assertEquals(\"Test 1234567890\", buffer.toString());\n    }",
    "begin_line": 1986,
    "end_line": 1993,
    "comment": "",
    "child_ranges": [
      "(line 1987,col 9)-(line 1987,col 59)",
      "(line 1988,col 9)-(line 1988,col 62)",
      "(line 1990,col 9)-(line 1990,col 28)",
      "(line 1992,col 9)-(line 1992,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/text/StrBuilderTest.java",
    "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAppendToCharBuffer()",
    "snippet": "@Test\n    public void testAppendToCharBuffer() throws Exception {\n        final StrBuilder sb \u003d new StrBuilder(\"1234567890\");\n        final String text \u003d \"Test \";\n        final CharBuffer buffer \u003d CharBuffer.allocate(sb.size() + text.length());\n        buffer.put(text);\n\n        sb.appendTo(buffer);\n\n        buffer.flip();\n        assertEquals(\"Test 1234567890\", buffer.toString());\n    }",
    "begin_line": 1996,
    "end_line": 2006,
    "comment": "",
    "child_ranges": [
      "(line 1997,col 9)-(line 1997,col 59)",
      "(line 1998,col 9)-(line 1998,col 36)",
      "(line 1999,col 9)-(line 1999,col 81)",
      "(line 2000,col 9)-(line 2000,col 25)",
      "(line 2002,col 9)-(line 2002,col 28)",
      "(line 2004,col 9)-(line 2004,col 22)",
      "(line 2005,col 9)-(line 2005,col 59)"
    ]
  }
]