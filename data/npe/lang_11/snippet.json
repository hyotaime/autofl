[
  {
    "name": "StrBuilder.StrBuilder#104",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilder()",
    "snippet": "public StrBuilder() {\n        this(CAPACITY);\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Constructor that creates an empty builder initial capacity 32 characters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.StrBuilder#113",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilder(int)",
    "snippet": "public StrBuilder(int initialCapacity) {\n        super();\n        if (initialCapacity \u003c\u003d 0) {\n            initialCapacity \u003d CAPACITY;\n        }\n        buffer \u003d new char[initialCapacity];\n    }",
    "begin_line": 113,
    "end_line": 119,
    "comment": "/** \n * Constructor that creates an empty builder the specified initial capacity.\n * @param initialCapacity  the initial capacity, zero or less will be converted to 32\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.StrBuilder#127",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String)",
    "snippet": "public StrBuilder(final String str) {\n        super();\n        if (str \u003d\u003d null) {\n            buffer \u003d new char[CAPACITY];\n        } else {\n            buffer \u003d new char[str.length() + CAPACITY];\n            append(str);\n        }\n    }",
    "begin_line": 127,
    "end_line": 135,
    "comment": "/** \n * Constructor that creates a builder from the string, allocating 32 extra characters for growth.\n * @param str  the string to copy, null treated as blank string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.getNewLineText#143",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.getNewLineText()",
    "snippet": "public String getNewLineText() {\n        return newLine;\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Gets the text to be appended when a new line is added.\n * @return the new line text, null means use system default\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.setNewLineText#153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String)",
    "snippet": "public StrBuilder setNewLineText(final String newLine) {\n        this.newLine \u003d newLine;\n        return this;\n    }",
    "begin_line": 153,
    "end_line": 156,
    "comment": "/** \n * Sets the text to be appended when a new line is added.\n * @param newLine  the new line text, null means use system default\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.getNullText#164",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.getNullText()",
    "snippet": "public String getNullText() {\n        return nullText;\n    }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Gets the text to be appended when null is added.\n * @return the null text, null means no append\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.setNullText#174",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String)",
    "snippet": "public StrBuilder setNullText(String nullText) {\n        if (nullText !\u003d null \u0026\u0026 nullText.isEmpty()) {\n            nullText \u003d null;\n        }\n        this.nullText \u003d nullText;\n        return this;\n    }",
    "begin_line": 174,
    "end_line": 180,
    "comment": "/** \n * Sets the text to be appended when null is added.\n * @param nullText  the null text, null means no append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.length#189",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.length()",
    "snippet": "@Override\n    public int length() {\n        return size;\n    }",
    "begin_line": 189,
    "end_line": 191,
    "comment": "/** \n * Gets the length of the string builder.\n * @return the length\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.setLength#201",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.setLength(int)",
    "snippet": "public StrBuilder setLength(final int length) {\n        if (length \u003c 0) {\n            throw new StringIndexOutOfBoundsException(length);\n        }\n        if (length \u003c size) {\n            size \u003d length;\n        } else if (length \u003e size) {\n            ensureCapacity(length);\n            final int oldEnd \u003d size;\n            final int newEnd \u003d length;\n            size \u003d length;\n            for (int i \u003d oldEnd; i \u003c newEnd; i++) {\n                buffer[i] \u003d \u0027\\0\u0027;\n            }\n        }\n        return this;\n    }",
    "begin_line": 201,
    "end_line": 217,
    "comment": "/** \n * Updates the length of the builder by either dropping the last characters or adding filler of Unicode zero.\n * @param length  the length to set to, must be zero or positive\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the length is negative\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.capacity#225",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.capacity()",
    "snippet": "public int capacity() {\n        return buffer.length;\n    }",
    "begin_line": 225,
    "end_line": 227,
    "comment": "/** \n * Gets the current size of the internal character array buffer.\n * @return the capacity\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.ensureCapacity#235",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int)",
    "snippet": "public StrBuilder ensureCapacity(final int capacity) {\n        if (capacity \u003e buffer.length) {\n            final char[] old \u003d buffer;\n            buffer \u003d new char[capacity * 2];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }",
    "begin_line": 235,
    "end_line": 242,
    "comment": "/** \n * Checks the capacity and ensures that it is at least the size specified.\n * @param capacity  the capacity to ensure\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.minimizeCapacity#249",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.minimizeCapacity()",
    "snippet": "public StrBuilder minimizeCapacity() {\n        if (buffer.length \u003e length()) {\n            final char[] old \u003d buffer;\n            buffer \u003d new char[length()];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }",
    "begin_line": 249,
    "end_line": 256,
    "comment": "/** \n * Minimizes the capacity to the actual length of the string.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.size#267",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.size()",
    "snippet": "public int size() {\n        return size;\n    }",
    "begin_line": 267,
    "end_line": 269,
    "comment": "/** \n * Gets the length of the string builder. \u003cp\u003e This method is the same as  {@link #length()} and is provided to match theAPI of Collections.\n * @return the length\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.isEmpty#279",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return size \u003d\u003d 0;\n    }",
    "begin_line": 279,
    "end_line": 281,
    "comment": "/** \n * Checks is the string builder is empty (convenience Collections API style method). \u003cp\u003e This method is the same as checking  {@link #length()} and is provided to match theAPI of Collections.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the size is \u003ccode\u003e0\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.clear#294",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.clear()",
    "snippet": "public StrBuilder clear() {\n        size \u003d 0;\n        return this;\n    }",
    "begin_line": 294,
    "end_line": 297,
    "comment": "/** \n * Clears the string builder (convenience Collections API style method). \u003cp\u003e This method does not reduce the size of the internal character buffer. To do that, call \u003ccode\u003eclear()\u003c/code\u003e followed by  {@link #minimizeCapacity()}. \u003cp\u003e This method is the same as  {@link #setLength(int)} called with zeroand is provided to match the API of Collections.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.charAt#310",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.charAt(int)",
    "snippet": "@Override\n    public char charAt(final int index) {\n        if (index \u003c 0 || index \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return buffer[index];\n    }",
    "begin_line": 310,
    "end_line": 315,
    "comment": "/** \n * Gets the character at the specified index.\n * @see #setCharAt(int,char)\n * @see #deleteCharAt(int)\n * @param index  the index to retrieve, must be valid\n * @return the character at the index\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.setCharAt#327",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.setCharAt(int, char)",
    "snippet": "public StrBuilder setCharAt(final int index, final char ch) {\n        if (index \u003c 0 || index \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        buffer[index] \u003d ch;\n        return this;\n    }",
    "begin_line": 327,
    "end_line": 333,
    "comment": "/** \n * Sets the character at the specified index.\n * @see #charAt(int)\n * @see #deleteCharAt(int)\n * @param index  the index to set\n * @param ch  the new character\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteCharAt#344",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteCharAt(int)",
    "snippet": "public StrBuilder deleteCharAt(final int index) {\n        if (index \u003c 0 || index \u003e\u003d size) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        deleteImpl(index, index + 1, 1);\n        return this;\n    }",
    "begin_line": 344,
    "end_line": 350,
    "comment": "/** \n * Deletes the character at the specified index.\n * @see #charAt(int)\n * @see #setCharAt(int,char)\n * @param index  the index to delete\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.toCharArray#358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.toCharArray()",
    "snippet": "public char[] toCharArray() {\n        if (size \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_CHAR_ARRAY;\n        }\n        final char chars[] \u003d new char[size];\n        System.arraycopy(buffer, 0, chars, 0, size);\n        return chars;\n    }",
    "begin_line": 358,
    "end_line": 365,
    "comment": "/** \n * Copies the builder\u0027s character array into a new character array.\n * @return a new array that represents the contents of the builder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.toCharArray#377",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.toCharArray(int, int)",
    "snippet": "public char[] toCharArray(final int startIndex, int endIndex) {\n        endIndex \u003d validateRange(startIndex, endIndex);\n        final int len \u003d endIndex - startIndex;\n        if (len \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_CHAR_ARRAY;\n        }\n        final char chars[] \u003d new char[len];\n        System.arraycopy(buffer, startIndex, chars, 0, len);\n        return chars;\n    }",
    "begin_line": 377,
    "end_line": 386,
    "comment": "/** \n * Copies part of the builder\u0027s character array into a new character array.\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid except thatif too large it is treated as end of string\n * @return a new array that holds part of the contents of the builder\n * @throws IndexOutOfBoundsException if startIndex is invalid,or if endIndex is invalid (but endIndex greater than size is valid)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.getChars#394",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.getChars(char[])",
    "snippet": "public char[] getChars(char[] destination) {\n        final int len \u003d length();\n        if (destination \u003d\u003d null || destination.length \u003c len) {\n            destination \u003d new char[len];\n        }\n        System.arraycopy(buffer, 0, destination, 0, len);\n        return destination;\n    }",
    "begin_line": 394,
    "end_line": 401,
    "comment": "/** \n * Copies the character array into the specified array.\n * @param destination  the destination array, null will cause an array to be created\n * @return the input array, unless that was null or too small\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.getChars#413",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char, int)",
    "snippet": "public void getChars(final int startIndex, final int endIndex, final char destination[], final int destinationIndex) {\n        if (startIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(startIndex);\n        }\n        if (endIndex \u003c 0 || endIndex \u003e length()) {\n            throw new StringIndexOutOfBoundsException(endIndex);\n        }\n        if (startIndex \u003e endIndex) {\n            throw new StringIndexOutOfBoundsException(\"end \u003c start\");\n        }\n        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\n    }",
    "begin_line": 413,
    "end_line": 424,
    "comment": "/** \n * Copies the character array into the specified array.\n * @param startIndex  first index to copy, inclusive, must be valid\n * @param endIndex  last index, exclusive, must be valid\n * @param destination  the destination array, must not be null or too small\n * @param destinationIndex  the index to start copying in destination\n * @throws NullPointerException if the array is null\n * @throws IndexOutOfBoundsException if any index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.readFrom#438",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.readFrom(java.lang.Readable)",
    "snippet": "public int readFrom(final Readable readable) throws IOException {\n        final int oldSize \u003d size;\n        if (readable instanceof Reader) {\n            final Reader r \u003d (Reader) readable;\n            ensureCapacity(size + 1);\n            int read;\n            while ((read \u003d r.read(buffer, size, buffer.length - size)) !\u003d -1) {\n                size +\u003d read;\n                ensureCapacity(size + 1);\n            }\n        } else if (readable instanceof CharBuffer) {\n            final CharBuffer cb \u003d (CharBuffer) readable;\n            final int remaining \u003d cb.remaining();\n            ensureCapacity(size + remaining);\n            cb.get(buffer, size, remaining);\n            size +\u003d remaining;\n        } else {\n            while (true) {\n                ensureCapacity(size + 1);\n                final CharBuffer buf \u003d CharBuffer.wrap(buffer, size, buffer.length - size);\n                final int read \u003d readable.read(buf);\n                if (read \u003d\u003d -1) {\n                    break;\n                }\n                size +\u003d read;\n            }\n        }\n        return size - oldSize;\n    }",
    "begin_line": 438,
    "end_line": 466,
    "comment": "/** \n * If possible, reads chars from the provided  {@link Readable} directly into underlyingcharacter buffer without making extra copies.\n * @param readable  object to read from\n * @return the number of characters read\n * @throws IOException if an I/O error occurs\n * @since 3.4\n * @see #appendTo(Appendable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendNewLine#478",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendNewLine()",
    "snippet": "public StrBuilder appendNewLine() {\n        if (newLine \u003d\u003d null)  {\n            append(SystemUtils.LINE_SEPARATOR);\n            return this;\n        }\n        return append(newLine);\n    }",
    "begin_line": 478,
    "end_line": 484,
    "comment": "/** \n * Appends the new line string to this string builder. \u003cp\u003e The new line string can be altered using  {@link #setNewLineText(String)}. This might be used to force the output to always use Unix line endings even when on Windows.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendNull#491",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendNull()",
    "snippet": "public StrBuilder appendNull() {\n        if (nullText \u003d\u003d null)  {\n            return this;\n        }\n        return append(nullText);\n    }",
    "begin_line": 491,
    "end_line": 496,
    "comment": "/** \n * Appends the text representing \u003ccode\u003enull\u003c/code\u003e to this string builder.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#505",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object)",
    "snippet": "public StrBuilder append(final Object obj) {\n        if (obj \u003d\u003d null) {\n            return appendNull();\n        }\n        if (obj instanceof CharSequence) {\n            return append((CharSequence) obj);\n        }\n        return append(obj.toString());        \n    }",
    "begin_line": 505,
    "end_line": 513,
    "comment": "/** \n * Appends an object to this string builder. Appending null will call  {@link #appendNull()}.\n * @param obj  the object to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#524",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence)",
    "snippet": "@Override\n    public StrBuilder append(final CharSequence seq) {\n        if (seq \u003d\u003d null) {\n            return appendNull();\n        }\n        if (seq instanceof StrBuilder) {\n            return append((StrBuilder) seq);\n        }\n        if (seq instanceof StringBuilder) {\n            return append((StringBuilder) seq);\n        }\n        if (seq instanceof StringBuffer) {\n            return append((StringBuffer) seq);\n        }\n        if (seq instanceof CharBuffer) {\n            return append((CharBuffer) seq);\n        }\n        return append(seq.toString());        \n    }",
    "begin_line": 524,
    "end_line": 541,
    "comment": "/** \n * Appends a CharSequence to this string builder. Appending null will call  {@link #appendNull()}.\n * @param seq  the CharSequence to append\n * @return this, to enable chaining\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int)",
    "snippet": "@Override\n    public StrBuilder append(final CharSequence seq, final int startIndex, final int length) {\n        if (seq \u003d\u003d null) {\n            return appendNull();\n        } \n        return append(seq.toString(), startIndex, length);\n    }",
    "begin_line": 554,
    "end_line": 559,
    "comment": "/** \n * Appends part of a CharSequence to this string builder. Appending null will call  {@link #appendNull()}.\n * @param seq  the CharSequence to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#568",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.String)",
    "snippet": "public StrBuilder append(final String str) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size +\u003d strLen;\n        }\n        return this;\n    }",
    "begin_line": 568,
    "end_line": 580,
    "comment": "/** \n * Appends a string to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#592",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int)",
    "snippet": "public StrBuilder append(final String str, final int startIndex, final int length) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        if (startIndex \u003c 0 || startIndex \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length \u003c 0 || (startIndex + length) \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 592,
    "end_line": 609,
    "comment": "/** \n * Appends part of a string to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#620",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, java.lang.Object)",
    "snippet": "public StrBuilder append(final String format, final Object... objs) {\n        return append(String.format(format, objs));\n    }",
    "begin_line": 620,
    "end_line": 622,
    "comment": "/** \n * Calls  {@link String#format(String,Object...)} and appends the result.\n * @param format the format string\n * @param objs the objects to use in the format string\n * @return {@code this} to enable chaining\n * @see String#format(String,Object...)\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#632",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer)",
    "snippet": "public StrBuilder append(final CharBuffer buf) {\n        if (buf \u003d\u003d null) {\n            return appendNull();\n        }\n        if (buf.hasArray()) {\n            final int length \u003d buf.remaining();\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, len, length);\n            size +\u003d length;\n        } else {\n            append(buf.toString());\n        }\n        return this;\n    }",
    "begin_line": 632,
    "end_line": 646,
    "comment": "/** \n * Appends the contents of a char buffer to this string builder. Appending null will call  {@link #appendNull()}.\n * @param buf  the char buffer to append\n * @return this, to enable chaining\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#658",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer, int, int)",
    "snippet": "public StrBuilder append(final CharBuffer buf, final int startIndex, final int length) {\n        if (buf \u003d\u003d null) {\n            return appendNull();\n        }\n        if (buf.hasArray()) {\n            final int totalLength \u003d buf.remaining();\n            if (startIndex \u003c 0 || startIndex \u003e totalLength) {\n                throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            }\n            if (length \u003c 0 || (startIndex + length) \u003e totalLength) {\n                throw new StringIndexOutOfBoundsException(\"length must be valid\");\n            }\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position() + startIndex, buffer, len, length);\n            size +\u003d length;\n        } else {\n            append(buf.toString(), startIndex, length);\n        }\n        return this;\n    }",
    "begin_line": 658,
    "end_line": 678,
    "comment": "/** \n * Appends the contents of a char buffer to this string builder. Appending null will call  {@link #appendNull()}.\n * @param buf  the char buffer to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#687",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer)",
    "snippet": "public StrBuilder append(final StringBuffer str) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size +\u003d strLen;\n        }\n        return this;\n    }",
    "begin_line": 687,
    "end_line": 699,
    "comment": "/** \n * Appends a string buffer to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string buffer to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#710",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int)",
    "snippet": "public StrBuilder append(final StringBuffer str, final int startIndex, final int length) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        if (startIndex \u003c 0 || startIndex \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length \u003c 0 || (startIndex + length) \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 710,
    "end_line": 727,
    "comment": "/** \n * Appends part of a string buffer to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#737",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder)",
    "snippet": "public StrBuilder append(final StringBuilder str) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size +\u003d strLen;\n        }\n        return this;\n    }",
    "begin_line": 737,
    "end_line": 749,
    "comment": "/** \n * Appends a StringBuilder to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str the StringBuilder to append\n * @return this, to enable chaining\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#761",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder, int, int)",
    "snippet": "public StrBuilder append(final StringBuilder str, final int startIndex, final int length) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        if (startIndex \u003c 0 || startIndex \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length \u003c 0 || (startIndex + length) \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 761,
    "end_line": 778,
    "comment": "/** \n * Appends part of a StringBuilder to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str the StringBuilder to append\n * @param startIndex the start index, inclusive, must be valid\n * @param length the length to append, must be valid\n * @return this, to enable chaining\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#787",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder)",
    "snippet": "public StrBuilder append(final StrBuilder str) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + strLen);\n            System.arraycopy(str.buffer, 0, buffer, len, strLen);\n            size +\u003d strLen;\n        }\n        return this;\n    }",
    "begin_line": 787,
    "end_line": 799,
    "comment": "/** \n * Appends another string builder to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string builder to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#810",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int)",
    "snippet": "public StrBuilder append(final StrBuilder str, final int startIndex, final int length) {\n        if (str \u003d\u003d null) {\n            return appendNull();\n        }\n        if (startIndex \u003c 0 || startIndex \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length \u003c 0 || (startIndex + length) \u003e str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 810,
    "end_line": 827,
    "comment": "/** \n * Appends part of a string builder to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#836",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(char[])",
    "snippet": "public StrBuilder append(final char[] chars) {\n        if (chars \u003d\u003d null) {\n            return appendNull();\n        }\n        final int strLen \u003d chars.length;\n        if (strLen \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + strLen);\n            System.arraycopy(chars, 0, buffer, len, strLen);\n            size +\u003d strLen;\n        }\n        return this;\n    }",
    "begin_line": 836,
    "end_line": 848,
    "comment": "/** \n * Appends a char array to the string builder. Appending null will call  {@link #appendNull()}.\n * @param chars  the char array to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#859",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(char[], int, int)",
    "snippet": "public StrBuilder append(final char[] chars, final int startIndex, final int length) {\n        if (chars \u003d\u003d null) {\n            return appendNull();\n        }\n        if (startIndex \u003c 0 || startIndex \u003e chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\n        }\n        if (length \u003c 0 || (startIndex + length) \u003e chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n        }\n        if (length \u003e 0) {\n            final int len \u003d length();\n            ensureCapacity(len + length);\n            System.arraycopy(chars, startIndex, buffer, len, length);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 859,
    "end_line": 876,
    "comment": "/** \n * Appends a char array to the string builder. Appending null will call  {@link #appendNull()}.\n * @param chars  the char array to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#884",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(boolean)",
    "snippet": "public StrBuilder append(final boolean value) {\n        if (value) {\n            ensureCapacity(size + 4);\n            buffer[size++] \u003d \u0027t\u0027;\n            buffer[size++] \u003d \u0027r\u0027;\n            buffer[size++] \u003d \u0027u\u0027;\n            buffer[size++] \u003d \u0027e\u0027;\n        } else {\n            ensureCapacity(size + 5);\n            buffer[size++] \u003d \u0027f\u0027;\n            buffer[size++] \u003d \u0027a\u0027;\n            buffer[size++] \u003d \u0027l\u0027;\n            buffer[size++] \u003d \u0027s\u0027;\n            buffer[size++] \u003d \u0027e\u0027;\n        }\n        return this;\n    }",
    "begin_line": 884,
    "end_line": 900,
    "comment": "/** \n * Appends a boolean value to the string builder.\n * @param value  the value to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#910",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(char)",
    "snippet": "@Override\n    public StrBuilder append(final char ch) {\n        final int len \u003d length();\n        ensureCapacity(len + 1);\n        buffer[size++] \u003d ch;\n        return this;\n    }",
    "begin_line": 910,
    "end_line": 915,
    "comment": "/** \n * Appends a char value to the string builder.\n * @param ch  the value to append\n * @return this, to enable chaining\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#923",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(int)",
    "snippet": "public StrBuilder append(final int value) {\n        return append(String.valueOf(value));\n    }",
    "begin_line": 923,
    "end_line": 925,
    "comment": "/** \n * Appends an int value to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#933",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(long)",
    "snippet": "public StrBuilder append(final long value) {\n        return append(String.valueOf(value));\n    }",
    "begin_line": 933,
    "end_line": 935,
    "comment": "/** \n * Appends a long value to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#943",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(float)",
    "snippet": "public StrBuilder append(final float value) {\n        return append(String.valueOf(value));\n    }",
    "begin_line": 943,
    "end_line": 945,
    "comment": "/** \n * Appends a float value to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.append#953",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.append(double)",
    "snippet": "public StrBuilder append(final double value) {\n        return append(String.valueOf(value));\n    }",
    "begin_line": 953,
    "end_line": 955,
    "comment": "/** \n * Appends a double value to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#966",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.Object)",
    "snippet": "public StrBuilder appendln(final Object obj) {\n        return append(obj).appendNewLine();\n    }",
    "begin_line": 966,
    "end_line": 968,
    "comment": "/** \n * Appends an object followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param obj  the object to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#978",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String)",
    "snippet": "public StrBuilder appendln(final String str) {\n        return append(str).appendNewLine();\n    }",
    "begin_line": 978,
    "end_line": 980,
    "comment": "/** \n * Appends a string followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#992",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, int, int)",
    "snippet": "public StrBuilder appendln(final String str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }",
    "begin_line": 992,
    "end_line": 994,
    "comment": "/** \n * Appends part of a string followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1005",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, java.lang.Object)",
    "snippet": "public StrBuilder appendln(final String format, final Object... objs) {\n        return append(format, objs).appendNewLine();\n    }",
    "begin_line": 1005,
    "end_line": 1007,
    "comment": "/** \n * Calls  {@link String#format(String,Object...)} and appends the result.\n * @param format the format string\n * @param objs the objects to use in the format string\n * @return {@code this} to enable chaining\n * @see String#format(String,Object...)\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1017",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer)",
    "snippet": "public StrBuilder appendln(final StringBuffer str) {\n        return append(str).appendNewLine();\n    }",
    "begin_line": 1017,
    "end_line": 1019,
    "comment": "/** \n * Appends a string buffer followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string buffer to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1029",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder)",
    "snippet": "public StrBuilder appendln(final StringBuilder str) {\n        return append(str).appendNewLine();\n    }",
    "begin_line": 1029,
    "end_line": 1031,
    "comment": "/** \n * Appends a string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string builder to append\n * @return this, to enable chaining\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1043",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder, int, int)",
    "snippet": "public StrBuilder appendln(final StringBuilder str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }",
    "begin_line": 1043,
    "end_line": 1045,
    "comment": "/** \n * Appends part of a string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string builder to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1057",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer, int, int)",
    "snippet": "public StrBuilder appendln(final StringBuffer str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }",
    "begin_line": 1057,
    "end_line": 1059,
    "comment": "/** \n * Appends part of a string buffer followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1069",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder)",
    "snippet": "public StrBuilder appendln(final StrBuilder str) {\n        return append(str).appendNewLine();\n    }",
    "begin_line": 1069,
    "end_line": 1071,
    "comment": "/** \n * Appends another string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string builder to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1083",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder, int, int)",
    "snippet": "public StrBuilder appendln(final StrBuilder str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }",
    "begin_line": 1083,
    "end_line": 1085,
    "comment": "/** \n * Appends part of a string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.\n * @param str  the string to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1095",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(char[])",
    "snippet": "public StrBuilder appendln(final char[] chars) {\n        return append(chars).appendNewLine();\n    }",
    "begin_line": 1095,
    "end_line": 1097,
    "comment": "/** \n * Appends a char array followed by a new line to the string builder. Appending null will call  {@link #appendNull()}.\n * @param chars  the char array to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1109",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(char[], int, int)",
    "snippet": "public StrBuilder appendln(final char[] chars, final int startIndex, final int length) {\n        return append(chars, startIndex, length).appendNewLine();\n    }",
    "begin_line": 1109,
    "end_line": 1111,
    "comment": "/** \n * Appends a char array followed by a new line to the string builder. Appending null will call  {@link #appendNull()}.\n * @param chars  the char array to append\n * @param startIndex  the start index, inclusive, must be valid\n * @param length  the length to append, must be valid\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1120",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(boolean)",
    "snippet": "public StrBuilder appendln(final boolean value) {\n        return append(value).appendNewLine();\n    }",
    "begin_line": 1120,
    "end_line": 1122,
    "comment": "/** \n * Appends a boolean value followed by a new line to the string builder.\n * @param value  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1131",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(char)",
    "snippet": "public StrBuilder appendln(final char ch) {\n        return append(ch).appendNewLine();\n    }",
    "begin_line": 1131,
    "end_line": 1133,
    "comment": "/** \n * Appends a char value followed by a new line to the string builder.\n * @param ch  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(int)",
    "snippet": "public StrBuilder appendln(final int value) {\n        return append(value).appendNewLine();\n    }",
    "begin_line": 1142,
    "end_line": 1144,
    "comment": "/** \n * Appends an int value followed by a new line to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(long)",
    "snippet": "public StrBuilder appendln(final long value) {\n        return append(value).appendNewLine();\n    }",
    "begin_line": 1153,
    "end_line": 1155,
    "comment": "/** \n * Appends a long value followed by a new line to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1164",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(float)",
    "snippet": "public StrBuilder appendln(final float value) {\n        return append(value).appendNewLine();\n    }",
    "begin_line": 1164,
    "end_line": 1166,
    "comment": "/** \n * Appends a float value followed by a new line to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendln#1175",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendln(double)",
    "snippet": "public StrBuilder appendln(final double value) {\n        return append(value).appendNewLine();\n    }",
    "begin_line": 1175,
    "end_line": 1177,
    "comment": "/** \n * Appends a double value followed by a new line to the string builder using \u003ccode\u003eString.valueOf\u003c/code\u003e.\n * @param value  the value to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendAll#1190",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendAll(T)",
    "snippet": "public \u003cT\u003e StrBuilder appendAll(final T... array) {\n        if (array !\u003d null \u0026\u0026 array.length \u003e 0) {\n            for (final Object element : array) {\n                append(element);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1190,
    "end_line": 1197,
    "comment": "/** \n * Appends each item in an array to the builder without any separators. Appending a null array will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param \u003c T \u003e  the element type\n * @param array  the array to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendAll#1208",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Iterable\u003c?\u003e)",
    "snippet": "public StrBuilder appendAll(final Iterable\u003c?\u003e iterable) {\n        if (iterable !\u003d null) {\n            for (final Object o : iterable) {\n                append(o);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1208,
    "end_line": 1215,
    "comment": "/** \n * Appends each item in a iterable to the builder without any separators. Appending a null iterable will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param iterable  the iterable to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendAll#1226",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendAll(java.util.Iterator\u003c?\u003e)",
    "snippet": "public StrBuilder appendAll(final Iterator\u003c?\u003e it) {\n        if (it !\u003d null) {\n            while (it.hasNext()) {\n                append(it.next());\n            }\n        }\n        return this;\n    }",
    "begin_line": 1226,
    "end_line": 1233,
    "comment": "/** \n * Appends each item in an iterator to the builder without any separators. Appending a null iterator will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param it  the iterator to append\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendWithSeparators#1246",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String)",
    "snippet": "public StrBuilder appendWithSeparators(final Object[] array, final String separator) {\n        if (array !\u003d null \u0026\u0026 array.length \u003e 0) {\n            @SuppressWarnings( \"deprecation\" ) // ObjectUtils.toString(Object) has been deprecated in 3.2\n            final String sep \u003d ObjectUtils.toString(separator);\n            append(array[0]);\n            for (int i \u003d 1; i \u003c array.length; i++) {\n                append(sep);\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1246,
    "end_line": 1257,
    "comment": "/** \n * Appends an array placing separators between each value, but not before the first or after the last. Appending a null array will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param array  the array to append\n * @param separator  the separator to use, null means no separator\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendWithSeparators#1269",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Iterable\u003c?\u003e, java.lang.String)",
    "snippet": "public StrBuilder appendWithSeparators(final Iterable\u003c?\u003e iterable, final String separator) {\n        if (iterable !\u003d null) {\n            @SuppressWarnings( \"deprecation\" ) // ObjectUtils.toString(Object) has been deprecated in 3.2\n            final String sep \u003d ObjectUtils.toString(separator);\n            final Iterator\u003c?\u003e it \u003d iterable.iterator();\n            while (it.hasNext()) {\n                append(it.next());\n                if (it.hasNext()) {\n                    append(sep);\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 1269,
    "end_line": 1282,
    "comment": "/** \n * Appends a iterable placing separators between each value, but not before the first or after the last. Appending a null iterable will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param iterable  the iterable to append\n * @param separator  the separator to use, null means no separator\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendWithSeparators#1294",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.util.Iterator\u003c?\u003e, java.lang.String)",
    "snippet": "public StrBuilder appendWithSeparators(final Iterator\u003c?\u003e it, final String separator) {\n        if (it !\u003d null) {\n            @SuppressWarnings( \"deprecation\" ) // ObjectUtils.toString(Object) has been deprecated in 3.2\n            final String sep \u003d ObjectUtils.toString(separator);\n            while (it.hasNext()) {\n                append(it.next());\n                if (it.hasNext()) {\n                    append(sep);\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 1294,
    "end_line": 1306,
    "comment": "/** \n * Appends an iterator placing separators between each value, but not before the first or after the last. Appending a null iterator will have no effect. Each object is appended using  {@link #append(Object)}.\n * @param it  the iterator to append\n * @param separator  the separator to use, null means no separator\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1329",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String)",
    "snippet": "public StrBuilder appendSeparator(final String separator) {\n        return appendSeparator(separator, null);\n    }",
    "begin_line": 1329,
    "end_line": 1331,
    "comment": "/** \n * Appends a separator if the builder is currently non-empty. Appending a null separator will have no effect. The separator is appended using  {@link #append(String)}. \u003cp\u003e This method is useful for adding a separator each time around the loop except the first. \u003cpre\u003e for (Iterator it \u003d list.iterator(); it.hasNext(); ) { appendSeparator(\",\"); append(it.next()); } \u003c/pre\u003e Note that for this simple example, you should use {@link #appendWithSeparators(Iterable,String)}.\n * @param separator  the separator to use, null means no separator\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1360",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String)",
    "snippet": "public StrBuilder appendSeparator(final String standard, final String defaultIfEmpty) {\n        final String str \u003d isEmpty() ? defaultIfEmpty : standard;\n        if (str !\u003d null) {\n            append(str);\n        }\n        return this;\n    }",
    "begin_line": 1360,
    "end_line": 1366,
    "comment": "/** \n * Appends one of both separators to the StrBuilder. If the builder is currently empty it will append the defaultIfEmpty-separator Otherwise it will append the standard-separator Appending a null separator will have no effect. The separator is appended using  {@link #append(String)}. \u003cp\u003e This method is for example useful for constructing queries \u003cpre\u003e StrBuilder whereClause \u003d new StrBuilder(); if(searchCommand.getPriority() !\u003d null) { whereClause.appendSeparator(\" and\", \" where\"); whereClause.append(\" priority \u003d ?\") } if(searchCommand.getComponent() !\u003d null) { whereClause.appendSeparator(\" and\", \" where\"); whereClause.append(\" component \u003d ?\") } selectClause.append(whereClause) \u003c/pre\u003e\n * @param standard the separator if builder is not empty, null means no separator\n * @param defaultIfEmpty the separator if builder is empty, null means no separator\n * @return this, to enable chaining\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1387",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(char)",
    "snippet": "public StrBuilder appendSeparator(final char separator) {\n        if (size() \u003e 0) {\n            append(separator);\n        }\n        return this;\n    }",
    "begin_line": 1387,
    "end_line": 1392,
    "comment": "/** \n * Appends a separator if the builder is currently non-empty. The separator is appended using  {@link #append(char)}. \u003cp\u003e This method is useful for adding a separator each time around the loop except the first. \u003cpre\u003e for (Iterator it \u003d list.iterator(); it.hasNext(); ) { appendSeparator(\u0027,\u0027); append(it.next()); } \u003c/pre\u003e Note that for this simple example, you should use {@link #appendWithSeparators(Iterable,String)}.\n * @param separator  the separator to use\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1405",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, char)",
    "snippet": "public StrBuilder appendSeparator(final char standard, final char defaultIfEmpty) {\n        if (size() \u003e 0) {\n            append(standard);\n        } else {\n            append(defaultIfEmpty);\n        }\n        return this;\n    }",
    "begin_line": 1405,
    "end_line": 1412,
    "comment": "/** \n * Append one of both separators to the builder If the builder is currently empty it will append the defaultIfEmpty-separator Otherwise it will append the standard-separator The separator is appended using  {@link #append(char)}.\n * @param standard the separator if builder is not empty\n * @param defaultIfEmpty the separator if builder is empty\n * @return this, to enable chaining\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1435",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, int)",
    "snippet": "public StrBuilder appendSeparator(final String separator, final int loopIndex) {\n        if (separator !\u003d null \u0026\u0026 loopIndex \u003e 0) {\n            append(separator);\n        }\n        return this;\n    }",
    "begin_line": 1435,
    "end_line": 1440,
    "comment": "/** \n * Appends a separator to the builder if the loop index is greater than zero. Appending a null separator will have no effect. The separator is appended using  {@link #append(String)}. \u003cp\u003e This method is useful for adding a separator each time around the loop except the first. \u003c/p\u003e \u003cpre\u003e for (int i \u003d 0; i \u0026lt; list.size(); i++) { appendSeparator(\",\", i); append(list.get(i)); } \u003c/pre\u003e Note that for this simple example, you should use {@link #appendWithSeparators(Iterable,String)}.\n * @param separator  the separator to use, null means no separator\n * @param loopIndex  the loop index\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendSeparator#1463",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, int)",
    "snippet": "public StrBuilder appendSeparator(final char separator, final int loopIndex) {\n        if (loopIndex \u003e 0) {\n            append(separator);\n        }\n        return this;\n    }",
    "begin_line": 1463,
    "end_line": 1468,
    "comment": "/** \n * Appends a separator to the builder if the loop index is greater than zero. The separator is appended using  {@link #append(char)}. \u003cp\u003e This method is useful for adding a separator each time around the loop except the first. \u003c/p\u003e \u003cpre\u003e for (int i \u003d 0; i \u0026lt; list.size(); i++) { appendSeparator(\",\", i); append(list.get(i)); } \u003c/pre\u003e Note that for this simple example, you should use {@link #appendWithSeparators(Iterable,String)}.\n * @param separator  the separator to use\n * @param loopIndex  the loop index\n * @return this, to enable chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendPadding#1478",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendPadding(int, char)",
    "snippet": "public StrBuilder appendPadding(final int length, final char padChar) {\n        if (length \u003e\u003d 0) {\n            ensureCapacity(size + length);\n            for (int i \u003d 0; i \u003c length; i++) {\n                buffer[size++] \u003d padChar;\n            }\n        }\n        return this;\n    }",
    "begin_line": 1478,
    "end_line": 1486,
    "comment": "/** \n * Appends the pad character to the builder the specified number of times.\n * @param length  the length to append, negative means no append\n * @param padChar  the character to append\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendFixedWidthPadLeft#1500",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char)",
    "snippet": "public StrBuilder appendFixedWidthPadLeft(final Object obj, final int width, final char padChar) {\n        if (width \u003e 0) {\n            ensureCapacity(size + width);\n            String str \u003d (obj \u003d\u003d null ? getNullText() : obj.toString());\n            if (str \u003d\u003d null) {\n                str \u003d \"\";\n            }\n            final int strLen \u003d str.length();\n            if (strLen \u003e\u003d width) {\n                str.getChars(strLen - width, strLen, buffer, size);\n            } else {\n                final int padLen \u003d width - strLen;\n                for (int i \u003d 0; i \u003c padLen; i++) {\n                    buffer[size + i] \u003d padChar;\n                }\n                str.getChars(0, strLen, buffer, size + padLen);\n            }\n            size +\u003d width;\n        }\n        return this;\n    }",
    "begin_line": 1500,
    "end_line": 1520,
    "comment": "/** \n * Appends an object to the builder padding on the left to a fixed width. The \u003ccode\u003etoString\u003c/code\u003e of the object is used. If the object is larger than the length, the left hand side is lost. If the object is null, the null text value is used.\n * @param obj  the object to append, null uses null text\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendFixedWidthPadLeft#1532",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)",
    "snippet": "public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {\n        return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);\n    }",
    "begin_line": 1532,
    "end_line": 1534,
    "comment": "/** \n * Appends an object to the builder padding on the left to a fixed width. The \u003ccode\u003eString.valueOf\u003c/code\u003e of the \u003ccode\u003eint\u003c/code\u003e value is used. If the formatted value is larger than the length, the left hand side is lost.\n * @param value  the value to append\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendFixedWidthPadRight#1547",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char)",
    "snippet": "public StrBuilder appendFixedWidthPadRight(final Object obj, final int width, final char padChar) {\n        if (width \u003e 0) {\n            ensureCapacity(size + width);\n            String str \u003d (obj \u003d\u003d null ? getNullText() : obj.toString());\n            if (str \u003d\u003d null) {\n                str \u003d \"\";\n            }\n            final int strLen \u003d str.length();\n            if (strLen \u003e\u003d width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                final int padLen \u003d width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i \u003d 0; i \u003c padLen; i++) {\n                    buffer[size + strLen + i] \u003d padChar;\n                }\n            }\n            size +\u003d width;\n        }\n        return this;\n    }",
    "begin_line": 1547,
    "end_line": 1567,
    "comment": "/** \n * Appends an object to the builder padding on the right to a fixed length. The \u003ccode\u003etoString\u003c/code\u003e of the object is used. If the object is larger than the length, the right hand side is lost. If the object is null, null text value is used.\n * @param obj  the object to append, null uses null text\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendFixedWidthPadRight#1579",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(int, int, char)",
    "snippet": "public StrBuilder appendFixedWidthPadRight(final int value, final int width, final char padChar) {\n        return appendFixedWidthPadRight(String.valueOf(value), width, padChar);\n    }",
    "begin_line": 1579,
    "end_line": 1581,
    "comment": "/** \n * Appends an object to the builder padding on the right to a fixed length. The \u003ccode\u003eString.valueOf\u003c/code\u003e of the \u003ccode\u003eint\u003c/code\u003e value is used. If the object is larger than the length, the right hand side is lost.\n * @param value  the value to append\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1593",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object)",
    "snippet": "public StrBuilder insert(final int index, final Object obj) {\n        if (obj \u003d\u003d null) {\n            return insert(index, nullText);\n        }\n        return insert(index, obj.toString());\n    }",
    "begin_line": 1593,
    "end_line": 1598,
    "comment": "/** \n * Inserts the string representation of an object into this builder. Inserting null will use the stored null text value.\n * @param index  the index to add at, must be valid\n * @param obj  the object to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String)",
    "snippet": "public StrBuilder insert(final int index, String str) {\n        validateIndex(index);\n        if (str \u003d\u003d null) {\n            str \u003d nullText;\n        }\n        if (str !\u003d null) {\n            final int strLen \u003d str.length();\n            if (strLen \u003e 0) {\n                final int newSize \u003d size + strLen;\n                ensureCapacity(newSize);\n                System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n                size \u003d newSize;\n                str.getChars(0, strLen, buffer, index);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1609,
    "end_line": 1625,
    "comment": "/** \n * Inserts the string into this builder. Inserting null will use the stored null text value.\n * @param index  the index to add at, must be valid\n * @param str  the string to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1636",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, char)",
    "snippet": "public StrBuilder insert(final int index, final char chars[]) {\n        validateIndex(index);\n        if (chars \u003d\u003d null) {\n            return insert(index, nullText);\n        }\n        final int len \u003d chars.length;\n        if (len \u003e 0) {\n            ensureCapacity(size + len);\n            System.arraycopy(buffer, index, buffer, index + len, size - index);\n            System.arraycopy(chars, 0, buffer, index, len);\n            size +\u003d len;\n        }\n        return this;\n    }",
    "begin_line": 1636,
    "end_line": 1649,
    "comment": "/** \n * Inserts the character array into this builder. Inserting null will use the stored null text value.\n * @param index  the index to add at, must be valid\n * @param chars  the char array to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1662",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, char, int, int)",
    "snippet": "public StrBuilder insert(final int index, final char chars[], final int offset, final int length) {\n        validateIndex(index);\n        if (chars \u003d\u003d null) {\n            return insert(index, nullText);\n        }\n        if (offset \u003c 0 || offset \u003e chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + offset);\n        }\n        if (length \u003c 0 || offset + length \u003e chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n        }\n        if (length \u003e 0) {\n            ensureCapacity(size + length);\n            System.arraycopy(buffer, index, buffer, index + length, size - index);\n            System.arraycopy(chars, offset, buffer, index, length);\n            size +\u003d length;\n        }\n        return this;\n    }",
    "begin_line": 1662,
    "end_line": 1680,
    "comment": "/** \n * Inserts part of the character array into this builder. Inserting null will use the stored null text value.\n * @param index  the index to add at, must be valid\n * @param chars  the char array to insert\n * @param offset  the offset into the character array to start at, must be valid\n * @param length  the length of the character array part to copy, must be positive\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if any index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1690",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, boolean)",
    "snippet": "public StrBuilder insert(int index, final boolean value) {\n        validateIndex(index);\n        if (value) {\n            ensureCapacity(size + 4);\n            System.arraycopy(buffer, index, buffer, index + 4, size - index);\n            buffer[index++] \u003d \u0027t\u0027;\n            buffer[index++] \u003d \u0027r\u0027;\n            buffer[index++] \u003d \u0027u\u0027;\n            buffer[index] \u003d \u0027e\u0027;\n            size +\u003d 4;\n        } else {\n            ensureCapacity(size + 5);\n            System.arraycopy(buffer, index, buffer, index + 5, size - index);\n            buffer[index++] \u003d \u0027f\u0027;\n            buffer[index++] \u003d \u0027a\u0027;\n            buffer[index++] \u003d \u0027l\u0027;\n            buffer[index++] \u003d \u0027s\u0027;\n            buffer[index] \u003d \u0027e\u0027;\n            size +\u003d 5;\n        }\n        return this;\n    }",
    "begin_line": 1690,
    "end_line": 1711,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1721",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, char)",
    "snippet": "public StrBuilder insert(final int index, final char value) {\n        validateIndex(index);\n        ensureCapacity(size + 1);\n        System.arraycopy(buffer, index, buffer, index + 1, size - index);\n        buffer[index] \u003d value;\n        size++;\n        return this;\n    }",
    "begin_line": 1721,
    "end_line": 1728,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1738",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, int)",
    "snippet": "public StrBuilder insert(final int index, final int value) {\n        return insert(index, String.valueOf(value));\n    }",
    "begin_line": 1738,
    "end_line": 1740,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1750",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, long)",
    "snippet": "public StrBuilder insert(final int index, final long value) {\n        return insert(index, String.valueOf(value));\n    }",
    "begin_line": 1750,
    "end_line": 1752,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1762",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, float)",
    "snippet": "public StrBuilder insert(final int index, final float value) {\n        return insert(index, String.valueOf(value));\n    }",
    "begin_line": 1762,
    "end_line": 1764,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.insert#1774",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.insert(int, double)",
    "snippet": "public StrBuilder insert(final int index, final double value) {\n        return insert(index, String.valueOf(value));\n    }",
    "begin_line": 1774,
    "end_line": 1776,
    "comment": "/** \n * Inserts the value into this builder.\n * @param index  the index to add at, must be valid\n * @param value  the value to insert\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteImpl#1787",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteImpl(int, int, int)",
    "snippet": "private void deleteImpl(final int startIndex, final int endIndex, final int len) {\n        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n        size -\u003d len;\n    }",
    "begin_line": 1787,
    "end_line": 1790,
    "comment": "/** \n * Internal method to delete a range without validation.\n * @param startIndex  the start index, must be valid\n * @param endIndex  the end index (exclusive), must be valid\n * @param len  the length, must be valid\n * @throws IndexOutOfBoundsException if any index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.delete#1801",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.delete(int, int)",
    "snippet": "public StrBuilder delete(final int startIndex, int endIndex) {\n        endIndex \u003d validateRange(startIndex, endIndex);\n        final int len \u003d endIndex - startIndex;\n        if (len \u003e 0) {\n            deleteImpl(startIndex, endIndex, len);\n        }\n        return this;\n    }",
    "begin_line": 1801,
    "end_line": 1808,
    "comment": "/** \n * Deletes the characters between the two specified indices.\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteAll#1817",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteAll(char)",
    "snippet": "public StrBuilder deleteAll(final char ch) {\n        for (int i \u003d 0; i \u003c size; i++) {\n            if (buffer[i] \u003d\u003d ch) {\n                final int start \u003d i;\n                while (++i \u003c size) {\n                    if (buffer[i] !\u003d ch) {\n                        break;\n                    }\n                }\n                final int len \u003d i - start;\n                deleteImpl(start, i, len);\n                i -\u003d len;\n            }\n        }\n        return this;\n    }",
    "begin_line": 1817,
    "end_line": 1832,
    "comment": "/** \n * Deletes the character wherever it occurs in the builder.\n * @param ch  the character to delete\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteFirst#1840",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteFirst(char)",
    "snippet": "public StrBuilder deleteFirst(final char ch) {\n        for (int i \u003d 0; i \u003c size; i++) {\n            if (buffer[i] \u003d\u003d ch) {\n                deleteImpl(i, i + 1, 1);\n                break;\n            }\n        }\n        return this;\n    }",
    "begin_line": 1840,
    "end_line": 1848,
    "comment": "/** \n * Deletes the character wherever it occurs in the builder.\n * @param ch  the character to delete\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteAll#1857",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteAll(java.lang.String)",
    "snippet": "public StrBuilder deleteAll(final String str) {\n        final int len \u003d (str \u003d\u003d null ? 0 : str.length());\n        if (len \u003e 0) {\n            int index \u003d indexOf(str, 0);\n            while (index \u003e\u003d 0) {\n                deleteImpl(index, index + len, len);\n                index \u003d indexOf(str, index);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1857,
    "end_line": 1867,
    "comment": "/** \n * Deletes the string wherever it occurs in the builder.\n * @param str  the string to delete, null causes no action\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteFirst#1875",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteFirst(java.lang.String)",
    "snippet": "public StrBuilder deleteFirst(final String str) {\n        final int len \u003d (str \u003d\u003d null ? 0 : str.length());\n        if (len \u003e 0) {\n            final int index \u003d indexOf(str, 0);\n            if (index \u003e\u003d 0) {\n                deleteImpl(index, index + len, len);\n            }\n        }\n        return this;\n    }",
    "begin_line": 1875,
    "end_line": 1884,
    "comment": "/** \n * Deletes the string wherever it occurs in the builder.\n * @param str  the string to delete, null causes no action\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteAll#1897",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteAll(org.apache.commons.lang3.text.StrMatcher)",
    "snippet": "public StrBuilder deleteAll(final StrMatcher matcher) {\n        return replace(matcher, null, 0, size, -1);\n    }",
    "begin_line": 1897,
    "end_line": 1899,
    "comment": "/** \n * Deletes all parts of the builder that the matcher matches. \u003cp\u003e Matchers can be used to perform advanced deletion behaviour. For example you could write a matcher to delete all occurrences where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.deleteFirst#1911",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.deleteFirst(org.apache.commons.lang3.text.StrMatcher)",
    "snippet": "public StrBuilder deleteFirst(final StrMatcher matcher) {\n        return replace(matcher, null, 0, size, 1);\n    }",
    "begin_line": 1911,
    "end_line": 1913,
    "comment": "/** \n * Deletes the first match within the builder using the specified matcher. \u003cp\u003e Matchers can be used to perform advanced deletion behaviour. For example you could write a matcher to delete where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceImpl#1926",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceImpl(int, int, int, java.lang.String, int)",
    "snippet": "private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final String insertStr, final int insertLen) {\n        final int newSize \u003d size - removeLen + insertLen;\n        if (insertLen !\u003d removeLen) {\n            ensureCapacity(newSize);\n            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n            size \u003d newSize;\n        }\n        if (insertLen \u003e 0) {\n            insertStr.getChars(0, insertLen, buffer, startIndex);\n        }\n    }",
    "begin_line": 1926,
    "end_line": 1936,
    "comment": "/** \n * Internal method to delete a range without validation.\n * @param startIndex  the start index, must be valid\n * @param endIndex  the end index (exclusive), must be valid\n * @param removeLen  the length to remove (endIndex - startIndex), must be valid\n * @param insertStr  the string to replace with, null means delete range\n * @param insertLen  the length of the insert string, must be valid\n * @throws IndexOutOfBoundsException if any index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replace#1949",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String)",
    "snippet": "public StrBuilder replace(final int startIndex, int endIndex, final String replaceStr) {\n        endIndex \u003d validateRange(startIndex, endIndex);\n        final int insertLen \u003d (replaceStr \u003d\u003d null ? 0 : replaceStr.length());\n        replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);\n        return this;\n    }",
    "begin_line": 1949,
    "end_line": 1954,
    "comment": "/** \n * Replaces a portion of the string builder with another string. The length of the inserted string does not have to match the removed length.\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string\n * @param replaceStr  the string to replace with, null means delete range\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceAll#1965",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceAll(char, char)",
    "snippet": "public StrBuilder replaceAll(final char search, final char replace) {\n        if (search !\u003d replace) {\n            for (int i \u003d 0; i \u003c size; i++) {\n                if (buffer[i] \u003d\u003d search) {\n                    buffer[i] \u003d replace;\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 1965,
    "end_line": 1974,
    "comment": "/** \n * Replaces the search character with the replace character throughout the builder.\n * @param search  the search character\n * @param replace  the replace character\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceFirst#1984",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceFirst(char, char)",
    "snippet": "public StrBuilder replaceFirst(final char search, final char replace) {\n        if (search !\u003d replace) {\n            for (int i \u003d 0; i \u003c size; i++) {\n                if (buffer[i] \u003d\u003d search) {\n                    buffer[i] \u003d replace;\n                    break;\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 1984,
    "end_line": 1994,
    "comment": "/** \n * Replaces the first instance of the search character with the replace character in the builder.\n * @param search  the search character\n * @param replace  the replace character\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceAll#2004",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceAll(java.lang.String, java.lang.String)",
    "snippet": "public StrBuilder replaceAll(final String searchStr, final String replaceStr) {\n        final int searchLen \u003d (searchStr \u003d\u003d null ? 0 : searchStr.length());\n        if (searchLen \u003e 0) {\n            final int replaceLen \u003d (replaceStr \u003d\u003d null ? 0 : replaceStr.length());\n            int index \u003d indexOf(searchStr, 0);\n            while (index \u003e\u003d 0) {\n                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n                index \u003d indexOf(searchStr, index + replaceLen);\n            }\n        }\n        return this;\n    }",
    "begin_line": 2004,
    "end_line": 2015,
    "comment": "/** \n * Replaces the search string with the replace string throughout the builder.\n * @param searchStr  the search string, null causes no action to occur\n * @param replaceStr  the replace string, null is equivalent to an empty string\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceFirst#2024",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String)",
    "snippet": "public StrBuilder replaceFirst(final String searchStr, final String replaceStr) {\n        final int searchLen \u003d (searchStr \u003d\u003d null ? 0 : searchStr.length());\n        if (searchLen \u003e 0) {\n            final int index \u003d indexOf(searchStr, 0);\n            if (index \u003e\u003d 0) {\n                final int replaceLen \u003d (replaceStr \u003d\u003d null ? 0 : replaceStr.length());\n                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n            }\n        }\n        return this;\n    }",
    "begin_line": 2024,
    "end_line": 2034,
    "comment": "/** \n * Replaces the first instance of the search string with the replace string.\n * @param searchStr  the search string, null causes no action to occur\n * @param replaceStr  the replace string, null is equivalent to an empty string\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceAll#2048",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceAll(org.apache.commons.lang3.text.StrMatcher, java.lang.String)",
    "snippet": "public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {\n        return replace(matcher, replaceStr, 0, size, -1);\n    }",
    "begin_line": 2048,
    "end_line": 2050,
    "comment": "/** \n * Replaces all matches within the builder with the replace string. \u003cp\u003e Matchers can be used to perform advanced replace behaviour. For example you could write a matcher to replace all occurrences where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @param replaceStr  the replace string, null is equivalent to an empty string\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceFirst#2063",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceFirst(org.apache.commons.lang3.text.StrMatcher, java.lang.String)",
    "snippet": "public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {\n        return replace(matcher, replaceStr, 0, size, 1);\n    }",
    "begin_line": 2063,
    "end_line": 2065,
    "comment": "/** \n * Replaces the first match within the builder with the replace string. \u003cp\u003e Matchers can be used to perform advanced replace behaviour. For example you could write a matcher to replace where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @param replaceStr  the replace string, null is equivalent to an empty string\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replace#2084",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replace(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int)",
    "snippet": "public StrBuilder replace(\n            final StrMatcher matcher, final String replaceStr,\n            final int startIndex, int endIndex, final int replaceCount) {\n        endIndex \u003d validateRange(startIndex, endIndex);\n        return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n    }",
    "begin_line": 2084,
    "end_line": 2089,
    "comment": "/** \n * Advanced search and replaces within the builder using a matcher. \u003cp\u003e Matchers can be used to perform advanced behaviour. For example you could write a matcher to delete all occurrences where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @param replaceStr  the string to replace the match with, null is a delete\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string\n * @param replaceCount  the number of times to replace, -1 for replace all\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if start index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.replaceImpl#2106",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.replaceImpl(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int)",
    "snippet": "private StrBuilder replaceImpl(\n            final StrMatcher matcher, final String replaceStr,\n            final int from, int to, int replaceCount) {\n        if (matcher \u003d\u003d null || size \u003d\u003d 0) {\n            return this;\n        }\n        final int replaceLen \u003d (replaceStr \u003d\u003d null ? 0 : replaceStr.length());\n        final char[] buf \u003d buffer;\n        for (int i \u003d from; i \u003c to \u0026\u0026 replaceCount !\u003d 0; i++) {\n            final int removeLen \u003d matcher.isMatch(buf, i, from, to);\n            if (removeLen \u003e 0) {\n                replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);\n                to \u003d to - removeLen + replaceLen;\n                i \u003d i + replaceLen - 1;\n                if (replaceCount \u003e 0) {\n                    replaceCount--;\n                }\n            }\n        }\n        return this;\n    }",
    "begin_line": 2106,
    "end_line": 2126,
    "comment": "/** \n * Replaces within the builder using a matcher. \u003cp\u003e Matchers can be used to perform advanced behaviour. For example you could write a matcher to delete all occurrences where the character \u0027a\u0027 is followed by a number.\n * @param matcher  the matcher to use to find the deletion, null causes no action\n * @param replaceStr  the string to replace the match with, null is a delete\n * @param from  the start index, must be valid\n * @param to  the end index (exclusive), must be valid\n * @param replaceCount  the number of times to replace, -1 for replace all\n * @return this, to enable chaining\n * @throws IndexOutOfBoundsException if any index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.reverse#2134",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.reverse()",
    "snippet": "public StrBuilder reverse() {\n        if (size \u003d\u003d 0) {\n            return this;\n        }\n        \n        final int half \u003d size / 2;\n        final char[] buf \u003d buffer;\n        for (int leftIdx \u003d 0, rightIdx \u003d size - 1; leftIdx \u003c half; leftIdx++,rightIdx--) {\n            final char swap \u003d buf[leftIdx];\n            buf[leftIdx] \u003d buf[rightIdx];\n            buf[rightIdx] \u003d swap;\n        }\n        return this;\n    }",
    "begin_line": 2134,
    "end_line": 2147,
    "comment": "/** \n * Reverses the string builder placing each character in the opposite index.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.trim#2156",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.trim()",
    "snippet": "public StrBuilder trim() {\n        if (size \u003d\u003d 0) {\n            return this;\n        }\n        int len \u003d size;\n        final char[] buf \u003d buffer;\n        int pos \u003d 0;\n        while (pos \u003c len \u0026\u0026 buf[pos] \u003c\u003d \u0027 \u0027) {\n            pos++;\n        }\n        while (pos \u003c len \u0026\u0026 buf[len - 1] \u003c\u003d \u0027 \u0027) {\n            len--;\n        }\n        if (len \u003c size) {\n            delete(len, size);\n        }\n        if (pos \u003e 0) {\n            delete(0, pos);\n        }\n        return this;\n    }",
    "begin_line": 2156,
    "end_line": 2176,
    "comment": "/** \n * Trims the builder by removing characters less than or equal to a space from the beginning and end.\n * @return this, to enable chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.startsWith#2187",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String)",
    "snippet": "public boolean startsWith(final String str) {\n        if (str \u003d\u003d null) {\n            return false;\n        }\n        final int len \u003d str.length();\n        if (len \u003d\u003d 0) {\n            return true;\n        }\n        if (len \u003e size) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c len; i++) {\n            if (buffer[i] !\u003d str.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 2187,
    "end_line": 2204,
    "comment": "/** \n * Checks whether this builder starts with the specified string. \u003cp\u003e Note that this method handles null input quietly, unlike String.\n * @param str  the string to search for, null returns false\n * @return true if the builder starts with the string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.endsWith#2214",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String)",
    "snippet": "public boolean endsWith(final String str) {\n        if (str \u003d\u003d null) {\n            return false;\n        }\n        final int len \u003d str.length();\n        if (len \u003d\u003d 0) {\n            return true;\n        }\n        if (len \u003e size) {\n            return false;\n        }\n        int pos \u003d size - len;\n        for (int i \u003d 0; i \u003c len; i++,pos++) {\n            if (buffer[pos] !\u003d str.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 2214,
    "end_line": 2232,
    "comment": "/** \n * Checks whether this builder ends with the specified string. \u003cp\u003e Note that this method handles null input quietly, unlike String.\n * @param str  the string to search for, null returns false\n * @return true if the builder ends with the string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.subSequence#2240",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.subSequence(int, int)",
    "snippet": "@Override\n    public CharSequence subSequence(final int startIndex, final int endIndex) {\n      if (startIndex \u003c 0) {\n          throw new StringIndexOutOfBoundsException(startIndex);\n      }\n      if (endIndex \u003e size) {\n          throw new StringIndexOutOfBoundsException(endIndex);\n      }\n      if (startIndex \u003e endIndex) {\n          throw new StringIndexOutOfBoundsException(endIndex - startIndex);\n      }\n      return substring(startIndex, endIndex);\n    }",
    "begin_line": 2240,
    "end_line": 2251,
    "comment": "/** \n * {@inheritDoc}\n * @since 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.substring#2260",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.substring(int)",
    "snippet": "public String substring(final int start) {\n        return substring(start, size);\n    }",
    "begin_line": 2260,
    "end_line": 2262,
    "comment": "/** \n * Extracts a portion of this string builder as a string.\n * @param start  the start index, inclusive, must be valid\n * @return the new string\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.substring#2277",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.substring(int, int)",
    "snippet": "public String substring(final int startIndex, int endIndex) {\n        endIndex \u003d validateRange(startIndex, endIndex);\n        return new String(buffer, startIndex, endIndex - startIndex);\n    }",
    "begin_line": 2277,
    "end_line": 2280,
    "comment": "/** \n * Extracts a portion of this string builder as a string. \u003cp\u003e Note: This method treats an endIndex greater than the length of the builder as equal to the length of the builder, and continues without error, unlike StringBuffer or String.\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string\n * @return the new string\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.leftString#2294",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.leftString(int)",
    "snippet": "public String leftString(final int length) {\n        if (length \u003c\u003d 0) {\n            return \"\";\n        } else if (length \u003e\u003d size) {\n            return new String(buffer, 0, size);\n        } else {\n            return new String(buffer, 0, length);\n        }\n    }",
    "begin_line": 2294,
    "end_line": 2302,
    "comment": "/** \n * Extracts the leftmost characters from the string builder without throwing an exception. \u003cp\u003e This method extracts the left \u003ccode\u003elength\u003c/code\u003e characters from the builder. If this many characters are not available, the whole builder is returned. Thus the returned string may be shorter than the length requested.\n * @param length  the number of characters to extract, negative returns empty string\n * @return the new string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.rightString#2316",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.rightString(int)",
    "snippet": "public String rightString(final int length) {\n        if (length \u003c\u003d 0) {\n            return \"\";\n        } else if (length \u003e\u003d size) {\n            return new String(buffer, 0, size);\n        } else {\n            return new String(buffer, size - length, length);\n        }\n    }",
    "begin_line": 2316,
    "end_line": 2324,
    "comment": "/** \n * Extracts the rightmost characters from the string builder without throwing an exception. \u003cp\u003e This method extracts the right \u003ccode\u003elength\u003c/code\u003e characters from the builder. If this many characters are not available, the whole builder is returned. Thus the returned string may be shorter than the length requested.\n * @param length  the number of characters to extract, negative returns empty string\n * @return the new string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.midString#2342",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.midString(int, int)",
    "snippet": "public String midString(int index, final int length) {\n        if (index \u003c 0) {\n            index \u003d 0;\n        }\n        if (length \u003c\u003d 0 || index \u003e\u003d size) {\n            return \"\";\n        }\n        if (size \u003c\u003d index + length) {\n            return new String(buffer, index, size - index);\n        }\n        return new String(buffer, index, length);\n    }",
    "begin_line": 2342,
    "end_line": 2353,
    "comment": "/** \n * Extracts some characters from the middle of the string builder without throwing an exception. \u003cp\u003e This method extracts \u003ccode\u003elength\u003c/code\u003e characters from the builder at the specified index. If the index is negative it is treated as zero. If the index is greater than the builder size, it is treated as the builder size. If the length is negative, the empty string is returned. If insufficient characters are available in the builder, as much as possible is returned. Thus the returned string may be shorter than the length requested.\n * @param index  the index to start at, negative means zero\n * @param length  the number of characters to extract, negative returns empty string\n * @return the new string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.contains#2362",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.contains(char)",
    "snippet": "public boolean contains(final char ch) {\n        final char[] thisBuf \u003d buffer;\n        for (int i \u003d 0; i \u003c this.size; i++) {\n            if (thisBuf[i] \u003d\u003d ch) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 2362,
    "end_line": 2370,
    "comment": "/** \n * Checks if the string builder contains the specified char.\n * @param ch  the character to find\n * @return true if the builder contains the character\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.contains#2378",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.contains(java.lang.String)",
    "snippet": "public boolean contains(final String str) {\n        return indexOf(str, 0) \u003e\u003d 0;\n    }",
    "begin_line": 2378,
    "end_line": 2380,
    "comment": "/** \n * Checks if the string builder contains the specified string.\n * @param str  the string to find\n * @return true if the builder contains the string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.contains#2393",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.contains(org.apache.commons.lang3.text.StrMatcher)",
    "snippet": "public boolean contains(final StrMatcher matcher) {\n        return indexOf(matcher, 0) \u003e\u003d 0;\n    }",
    "begin_line": 2393,
    "end_line": 2395,
    "comment": "/** \n * Checks if the string builder contains a string matched using the specified matcher. \u003cp\u003e Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to search for the character \u0027a\u0027 followed by a number.\n * @param matcher  the matcher to use, null returns -1\n * @return true if the matcher finds a match in the builder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2404",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(char)",
    "snippet": "public int indexOf(final char ch) {\n        return indexOf(ch, 0);\n    }",
    "begin_line": 2404,
    "end_line": 2406,
    "comment": "/** \n * Searches the string builder to find the first reference to the specified char.\n * @param ch  the character to find\n * @return the first index of the character, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2415",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(char, int)",
    "snippet": "public int indexOf(final char ch, int startIndex) {\n        startIndex \u003d (startIndex \u003c 0 ? 0 : startIndex);\n        if (startIndex \u003e\u003d size) {\n            return -1;\n        }\n        final char[] thisBuf \u003d buffer;\n        for (int i \u003d startIndex; i \u003c size; i++) {\n            if (thisBuf[i] \u003d\u003d ch) {\n                return i;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 2415,
    "end_line": 2427,
    "comment": "/** \n * Searches the string builder to find the first reference to the specified char.\n * @param ch  the character to find\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the first index of the character, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2437",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String)",
    "snippet": "public int indexOf(final String str) {\n        return indexOf(str, 0);\n    }",
    "begin_line": 2437,
    "end_line": 2439,
    "comment": "/** \n * Searches the string builder to find the first reference to the specified string. \u003cp\u003e Note that a null input string will return -1, whereas the JDK throws an exception.\n * @param str  the string to find, null returns -1\n * @return the first index of the string, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2451",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int)",
    "snippet": "public int indexOf(final String str, int startIndex) {\n        startIndex \u003d (startIndex \u003c 0 ? 0 : startIndex);\n        if (str \u003d\u003d null || startIndex \u003e\u003d size) {\n            return -1;\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003d\u003d 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen \u003d\u003d 0) {\n            return startIndex;\n        }\n        if (strLen \u003e size) {\n            return -1;\n        }\n        final char[] thisBuf \u003d buffer;\n        final int len \u003d size - strLen + 1;\n        outer:\n        for (int i \u003d startIndex; i \u003c len; i++) {\n            for (int j \u003d 0; j \u003c strLen; j++) {\n                if (str.charAt(j) !\u003d thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "begin_line": 2451,
    "end_line": 2478,
    "comment": "/** \n * Searches the string builder to find the first reference to the specified string starting searching from the given index. \u003cp\u003e Note that a null input string will return -1, whereas the JDK throws an exception.\n * @param str  the string to find, null returns -1\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the first index of the string, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2490",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher)",
    "snippet": "public int indexOf(final StrMatcher matcher) {\n        return indexOf(matcher, 0);\n    }",
    "begin_line": 2490,
    "end_line": 2492,
    "comment": "/** \n * Searches the string builder using the matcher to find the first match. \u003cp\u003e Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character \u0027a\u0027 followed by a number.\n * @param matcher  the matcher to use, null returns -1\n * @return the first index matched, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.indexOf#2506",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int)",
    "snippet": "public int indexOf(final StrMatcher matcher, int startIndex) {\n        startIndex \u003d (startIndex \u003c 0 ? 0 : startIndex);\n        if (matcher \u003d\u003d null || startIndex \u003e\u003d size) {\n            return -1;\n        }\n        final int len \u003d size;\n        final char[] buf \u003d buffer;\n        for (int i \u003d startIndex; i \u003c len; i++) {\n            if (matcher.isMatch(buf, i, startIndex, len) \u003e 0) {\n                return i;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 2506,
    "end_line": 2519,
    "comment": "/** \n * Searches the string builder using the matcher to find the first match searching from the given index. \u003cp\u003e Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character \u0027a\u0027 followed by a number.\n * @param matcher  the matcher to use, null returns -1\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the first index matched, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2528",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char)",
    "snippet": "public int lastIndexOf(final char ch) {\n        return lastIndexOf(ch, size - 1);\n    }",
    "begin_line": 2528,
    "end_line": 2530,
    "comment": "/** \n * Searches the string builder to find the last reference to the specified char.\n * @param ch  the character to find\n * @return the last index of the character, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2539",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int)",
    "snippet": "public int lastIndexOf(final char ch, int startIndex) {\n        startIndex \u003d (startIndex \u003e\u003d size ? size - 1 : startIndex);\n        if (startIndex \u003c 0) {\n            return -1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (buffer[i] \u003d\u003d ch) {\n                return i;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 2539,
    "end_line": 2550,
    "comment": "/** \n * Searches the string builder to find the last reference to the specified char.\n * @param ch  the character to find\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the last index of the character, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2560",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String)",
    "snippet": "public int lastIndexOf(final String str) {\n        return lastIndexOf(str, size - 1);\n    }",
    "begin_line": 2560,
    "end_line": 2562,
    "comment": "/** \n * Searches the string builder to find the last reference to the specified string. \u003cp\u003e Note that a null input string will return -1, whereas the JDK throws an exception.\n * @param str  the string to find, null returns -1\n * @return the last index of the string, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2574",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int)",
    "snippet": "public int lastIndexOf(final String str, int startIndex) {\n        startIndex \u003d (startIndex \u003e\u003d size ? size - 1 : startIndex);\n        if (str \u003d\u003d null || startIndex \u003c 0) {\n            return -1;\n        }\n        final int strLen \u003d str.length();\n        if (strLen \u003e 0 \u0026\u0026 strLen \u003c\u003d size) {\n            if (strLen \u003d\u003d 1) {\n                return lastIndexOf(str.charAt(0), startIndex);\n            }\n\n            outer:\n            for (int i \u003d startIndex - strLen + 1; i \u003e\u003d 0; i--) {\n                for (int j \u003d 0; j \u003c strLen; j++) {\n                    if (str.charAt(j) !\u003d buffer[i + j]) {\n                        continue outer;\n                    }\n                }\n                return i;\n            }\n            \n        } else if (strLen \u003d\u003d 0) {\n            return startIndex;\n        }\n        return -1;\n    }",
    "begin_line": 2574,
    "end_line": 2599,
    "comment": "/** \n * Searches the string builder to find the last reference to the specified string starting searching from the given index. \u003cp\u003e Note that a null input string will return -1, whereas the JDK throws an exception.\n * @param str  the string to find, null returns -1\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the last index of the string, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2611",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher)",
    "snippet": "public int lastIndexOf(final StrMatcher matcher) {\n        return lastIndexOf(matcher, size);\n    }",
    "begin_line": 2611,
    "end_line": 2613,
    "comment": "/** \n * Searches the string builder using the matcher to find the last match. \u003cp\u003e Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character \u0027a\u0027 followed by a number.\n * @param matcher  the matcher to use, null returns -1\n * @return the last index matched, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.lastIndexOf#2627",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int)",
    "snippet": "public int lastIndexOf(final StrMatcher matcher, int startIndex) {\n        startIndex \u003d (startIndex \u003e\u003d size ? size - 1 : startIndex);\n        if (matcher \u003d\u003d null || startIndex \u003c 0) {\n            return -1;\n        }\n        final char[] buf \u003d buffer;\n        final int endIndex \u003d startIndex + 1;\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (matcher.isMatch(buf, i, 0, endIndex) \u003e 0) {\n                return i;\n            }\n        }\n        return -1;\n    }",
    "begin_line": 2627,
    "end_line": 2640,
    "comment": "/** \n * Searches the string builder using the matcher to find the last match searching from the given index. \u003cp\u003e Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character \u0027a\u0027 followed by a number.\n * @param matcher  the matcher to use, null returns -1\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the last index matched, or -1 if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.asTokenizer#2675",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.asTokenizer()",
    "snippet": "public StrTokenizer asTokenizer() {\n        return new StrBuilderTokenizer();\n    }",
    "begin_line": 2675,
    "end_line": 2677,
    "comment": "/** \n * Creates a tokenizer that can tokenize the contents of this builder. \u003cp\u003e This method allows the contents of this builder to be tokenized. The tokenizer will be setup by default to tokenize on space, tab, newline and formfeed (as per StringTokenizer). These values can be changed on the tokenizer class, before retrieving the tokens. \u003cp\u003e The returned tokenizer is linked to this builder. You may intermix calls to the buider and tokenizer within certain limits, however there is no synchronization. Once the tokenizer has been used once, it must be  {@link StrTokenizer#reset() reset} to pickup the latestchanges in the builder. For example: \u003cpre\u003e StrBuilder b \u003d new StrBuilder(); b.append(\"a b \"); StrTokenizer t \u003d b.asTokenizer(); String[] tokens1 \u003d t.getTokenArray();  // returns a,b b.append(\"c d \"); String[] tokens2 \u003d t.getTokenArray();  // returns a,b (c and d ignored) t.reset();              // reset causes builder changes to be picked up String[] tokens3 \u003d t.getTokenArray();  // returns a,b,c,d \u003c/pre\u003e In addition to simply intermixing appends and tokenization, you can also call the set methods on the tokenizer to alter how it tokenizes. Just remember to call reset when you want to pickup builder changes. \u003cp\u003e Calling  {@link StrTokenizer#reset(String)} or {@link StrTokenizer#reset(char[])}with a non-null value will break the link with the builder.\n * @return a tokenizer that is linked to this builder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.asReader#2699",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.asReader()",
    "snippet": "public Reader asReader() {\n        return new StrBuilderReader();\n    }",
    "begin_line": 2699,
    "end_line": 2701,
    "comment": "/** \n * Gets the contents of this builder as a Reader. \u003cp\u003e This method allows the contents of the builder to be read using any standard method that expects a Reader. \u003cp\u003e To use, simply create a \u003ccode\u003eStrBuilder\u003c/code\u003e, populate it with data, call \u003ccode\u003easReader\u003c/code\u003e, and then read away. \u003cp\u003e The internal character array is shared between the builder and the reader. This allows you to append to the builder after creating the reader, and the changes will be picked up. Note however, that no synchronization occurs, so you must perform all operations with the builder and the reader in one thread. \u003cp\u003e The returned reader supports marking, and ignores the flush method.\n * @return a reader that reads from this builder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.asWriter#2724",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.asWriter()",
    "snippet": "public Writer asWriter() {\n        return new StrBuilderWriter();\n    }",
    "begin_line": 2724,
    "end_line": 2726,
    "comment": "/** \n * Gets this builder as a Writer that can be written to. \u003cp\u003e This method allows you to populate the contents of the builder using any standard method that takes a Writer. \u003cp\u003e To use, simply create a \u003ccode\u003eStrBuilder\u003c/code\u003e, call \u003ccode\u003easWriter\u003c/code\u003e, and populate away. The data is available at any time using the methods of the \u003ccode\u003eStrBuilder\u003c/code\u003e. \u003cp\u003e The internal character array is shared between the builder and the writer. This allows you to intermix calls that append to the builder and write using the writer and the changes will be occur correctly. Note however, that no synchronization occurs, so you must perform all operations with the builder and the writer in one thread. \u003cp\u003e The returned writer ignores the close and flush methods.\n * @return a writer that populates this builder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.appendTo#2740",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.appendTo(java.lang.Appendable)",
    "snippet": "public void appendTo(final Appendable appendable) throws IOException {\n        if (appendable instanceof Writer) {\n            ((Writer) appendable).write(buffer, 0, size);\n        } else if (appendable instanceof StringBuilder) {\n            ((StringBuilder) appendable).append(buffer, 0, size);\n        } else if (appendable instanceof StringBuffer) {\n            ((StringBuffer) appendable).append(buffer, 0, size);\n        } else if (appendable instanceof CharBuffer) {\n            ((CharBuffer) appendable).put(buffer, 0, size);\n        } else {\n            appendable.append(this);\n        }\n    }",
    "begin_line": 2740,
    "end_line": 2752,
    "comment": "/** \n * Appends current contents of this \u003ccode\u003eStrBuilder\u003c/code\u003e to the provided  {@link Appendable}. \u003cp\u003e This method tries to avoid doing any extra copies of contents.\n * @param appendable  the appendable to append data to\n * @throws IOException  if an I/O error occurs\n * @since 3.4\n * @see #readFrom(Readable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.equalsIgnoreCase#2792",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)",
    "snippet": "public boolean equalsIgnoreCase(final StrBuilder other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (this.size !\u003d other.size) {\n            return false;\n        }\n        final char thisBuf[] \u003d this.buffer;\n        final char otherBuf[] \u003d other.buffer;\n        for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\n            final char c1 \u003d thisBuf[i];\n            final char c2 \u003d otherBuf[i];\n            if (c1 !\u003d c2 \u0026\u0026 Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 2792,
    "end_line": 2809,
    "comment": "/** \n * Checks the contents of this builder against another to see if they contain the same character content ignoring case.\n * @param other  the object to check, null returns false\n * @return true if the builders contain the same characters in the same order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.equals#2818",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder)",
    "snippet": "public boolean equals(final StrBuilder other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (this.size !\u003d other.size) {\n            return false;\n        }\n        final char thisBuf[] \u003d this.buffer;\n        final char otherBuf[] \u003d other.buffer;\n        for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\n            if (thisBuf[i] !\u003d otherBuf[i]) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 2818,
    "end_line": 2833,
    "comment": "/** \n * Checks the contents of this builder against another to see if they contain the same character content.\n * @param other  the object to check, null returns false\n * @return true if the builders contain the same characters in the same order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.equals#2843",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(final Object obj) {\n        return obj instanceof StrBuilder \u0026\u0026 equals((StrBuilder) obj);\n    }",
    "begin_line": 2843,
    "end_line": 2845,
    "comment": "/** \n * Checks the contents of this builder against another to see if they contain the same character content.\n * @param obj  the object to check, null returns false\n * @return true if the builders contain the same characters in the same order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.hashCode#2853",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        final char buf[] \u003d buffer;\n        int hash \u003d 0;\n        for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\n            hash \u003d 31 * hash + buf[i];\n        }\n        return hash;\n    }",
    "begin_line": 2853,
    "end_line": 2860,
    "comment": "/** \n * Gets a suitable hash code for this builder.\n * @return a hash code\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.toString#2873",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.toString()",
    "snippet": "@Override\n    public String toString() {\n        return new String(buffer, 0, size);\n    }",
    "begin_line": 2873,
    "end_line": 2875,
    "comment": "/** \n * Gets a String version of the string builder, creating a new instance each time the method is called. \u003cp\u003e Note that unlike StringBuffer, the string version returned is independent of the string builder.\n * @return the builder as a String\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.toStringBuffer#2883",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.toStringBuffer()",
    "snippet": "public StringBuffer toStringBuffer() {\n        return new StringBuffer(size).append(buffer, 0, size);\n    }",
    "begin_line": 2883,
    "end_line": 2885,
    "comment": "/** \n * Gets a StringBuffer version of the string builder, creating a new instance each time the method is called.\n * @return the builder as a StringBuffer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.toStringBuilder#2894",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.toStringBuilder()",
    "snippet": "public StringBuilder toStringBuilder() {\n        return new StringBuilder(size).append(buffer, 0, size);\n    }",
    "begin_line": 2894,
    "end_line": 2896,
    "comment": "/** \n * Gets a StringBuilder version of the string builder, creating a new instance each time the method is called.\n * @return the builder as a StringBuilder\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.build#2905",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.build()",
    "snippet": "@Override\n    public String build() {\n        return toString();\n    }",
    "begin_line": 2905,
    "end_line": 2907,
    "comment": "/** \n * Implement the  {@link Builder} interface.\n * @return the builder as a String\n * @since 3.2\n * @see #toString()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.validateRange#2919",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.validateRange(int, int)",
    "snippet": "protected int validateRange(final int startIndex, int endIndex) {\n        if (startIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(startIndex);\n        }\n        if (endIndex \u003e size) {\n            endIndex \u003d size;\n        }\n        if (startIndex \u003e endIndex) {\n            throw new StringIndexOutOfBoundsException(\"end \u003c start\");\n        }\n        return endIndex;\n    }",
    "begin_line": 2919,
    "end_line": 2930,
    "comment": "/** \n * Validates parameters defining a range of the builder.\n * @param startIndex  the start index, inclusive, must be valid\n * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string\n * @return the new string\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilder.validateIndex#2938",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.validateIndex(int)",
    "snippet": "protected void validateIndex(final int index) {\n        if (index \u003c 0 || index \u003e size) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n    }",
    "begin_line": 2938,
    "end_line": 2942,
    "comment": "/** \n * Validates parameters defining a single index in the builder.\n * @param index  the index, must be valid\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderTokenizer.StrBuilderTokenizer#2953",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilderTokenizer()",
    "snippet": " StrBuilderTokenizer() {\n            super();\n        }",
    "begin_line": 2953,
    "end_line": 2955,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderTokenizer.tokenize#2959",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.tokenize(char[], int, int)",
    "snippet": "@Override\n        protected List\u003cString\u003e tokenize(final char[] chars, final int offset, final int count) {\n            if (chars \u003d\u003d null) {\n                return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());\n            }\n            return super.tokenize(chars, offset, count);\n        }",
    "begin_line": 2959,
    "end_line": 2964,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderTokenizer.getContent#2968",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.getContent()",
    "snippet": "@Override\n        public String getContent() {\n            final String str \u003d super.getContent();\n            if (str \u003d\u003d null) {\n                return StrBuilder.this.toString();\n            }\n            return str;\n        }",
    "begin_line": 2968,
    "end_line": 2974,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.StrBuilderReader#2990",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilderReader()",
    "snippet": " StrBuilderReader() {\n            super();\n        }",
    "begin_line": 2990,
    "end_line": 2992,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.close#2996",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.close()",
    "snippet": "@Override\n        public void close() {\n            // do nothing\n        }",
    "begin_line": 2996,
    "end_line": 2998,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.read#3002",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.read()",
    "snippet": "@Override\n        public int read() {\n            if (ready() \u003d\u003d false) {\n                return -1;\n            }\n            return StrBuilder.this.charAt(pos++);\n        }",
    "begin_line": 3002,
    "end_line": 3007,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.read#3011",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.read(char, int, int)",
    "snippet": "@Override\n        public int read(final char b[], final int off, int len) {\n            if (off \u003c 0 || len \u003c 0 || off \u003e b.length ||\n                    (off + len) \u003e b.length || (off + len) \u003c 0) {\n                throw new IndexOutOfBoundsException();\n            }\n            if (len \u003d\u003d 0) {\n                return 0;\n            }\n            if (pos \u003e\u003d StrBuilder.this.size()) {\n                return -1;\n            }\n            if (pos + len \u003e size()) {\n                len \u003d StrBuilder.this.size() - pos;\n            }\n            StrBuilder.this.getChars(pos, pos + len, b, off);\n            pos +\u003d len;\n            return len;\n        }",
    "begin_line": 3011,
    "end_line": 3028,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.skip#3032",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.skip(long)",
    "snippet": "@Override\n        public long skip(long n) {\n            if (pos + n \u003e StrBuilder.this.size()) {\n                n \u003d StrBuilder.this.size() - pos;\n            }\n            if (n \u003c 0) {\n                return 0;\n            }\n            pos +\u003d n;\n            return n;\n        }",
    "begin_line": 3032,
    "end_line": 3041,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.ready#3045",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.ready()",
    "snippet": "@Override\n        public boolean ready() {\n            return pos \u003c StrBuilder.this.size();\n        }",
    "begin_line": 3045,
    "end_line": 3047,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.markSupported#3051",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.markSupported()",
    "snippet": "@Override\n        public boolean markSupported() {\n            return true;\n        }",
    "begin_line": 3051,
    "end_line": 3053,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.mark#3057",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.mark(int)",
    "snippet": "@Override\n        public void mark(final int readAheadLimit) {\n            mark \u003d pos;\n        }",
    "begin_line": 3057,
    "end_line": 3059,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderReader.reset#3063",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.reset()",
    "snippet": "@Override\n        public void reset() {\n            pos \u003d mark;\n        }",
    "begin_line": 3063,
    "end_line": 3065,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.StrBuilderWriter#3077",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.StrBuilderWriter()",
    "snippet": " StrBuilderWriter() {\n            super();\n        }",
    "begin_line": 3077,
    "end_line": 3079,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.close#3083",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.close()",
    "snippet": "@Override\n        public void close() {\n            // do nothing\n        }",
    "begin_line": 3083,
    "end_line": 3085,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.flush#3089",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.flush()",
    "snippet": "@Override\n        public void flush() {\n            // do nothing\n        }",
    "begin_line": 3089,
    "end_line": 3091,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.write#3095",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.write(int)",
    "snippet": "@Override\n        public void write(final int c) {\n            StrBuilder.this.append((char) c);\n        }",
    "begin_line": 3095,
    "end_line": 3097,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.write#3101",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.write(char[])",
    "snippet": "@Override\n        public void write(final char[] cbuf) {\n            StrBuilder.this.append(cbuf);\n        }",
    "begin_line": 3101,
    "end_line": 3103,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.write#3107",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.write(char[], int, int)",
    "snippet": "@Override\n        public void write(final char[] cbuf, final int off, final int len) {\n            StrBuilder.this.append(cbuf, off, len);\n        }",
    "begin_line": 3107,
    "end_line": 3109,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.write#3113",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.write(java.lang.String)",
    "snippet": "@Override\n        public void write(final String str) {\n            StrBuilder.this.append(str);\n        }",
    "begin_line": 3113,
    "end_line": 3115,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrBuilderWriter.write#3119",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrBuilder.java",
    "class_name": "org.apache.commons.lang3.text.StrBuilder",
    "signature": "org.apache.commons.lang3.text.StrBuilder.write(java.lang.String, int, int)",
    "snippet": "@Override\n        public void write(final String str, final int off, final int len) {\n            StrBuilder.this.append(str, off, len);\n        }",
    "begin_line": 3119,
    "end_line": 3121,
    "comment": "/** \n * {@inheritDoc} \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.commaMatcher#80",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.commaMatcher()",
    "snippet": "public static StrMatcher commaMatcher() {\n        return COMMA_MATCHER;\n    }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Returns a matcher which matches the comma character.\n * @return a matcher for a comma\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.tabMatcher#89",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.tabMatcher()",
    "snippet": "public static StrMatcher tabMatcher() {\n        return TAB_MATCHER;\n    }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "/** \n * Returns a matcher which matches the tab character.\n * @return a matcher for a tab\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.spaceMatcher#98",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.spaceMatcher()",
    "snippet": "public static StrMatcher spaceMatcher() {\n        return SPACE_MATCHER;\n    }",
    "begin_line": 98,
    "end_line": 100,
    "comment": "/** \n * Returns a matcher which matches the space character.\n * @return a matcher for a space\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.splitMatcher#108",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.splitMatcher()",
    "snippet": "public static StrMatcher splitMatcher() {\n        return SPLIT_MATCHER;\n    }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "/** \n * Matches the same characters as StringTokenizer, namely space, tab, newline and formfeed.\n * @return the split matcher\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.trimMatcher#117",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.trimMatcher()",
    "snippet": "public static StrMatcher trimMatcher() {\n        return TRIM_MATCHER;\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Matches the String trim() whitespace characters.\n * @return the trim matcher\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.singleQuoteMatcher#126",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher()",
    "snippet": "public static StrMatcher singleQuoteMatcher() {\n        return SINGLE_QUOTE_MATCHER;\n    }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "/** \n * Returns a matcher which matches the single quote character.\n * @return a matcher for a single quote\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.doubleQuoteMatcher#135",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher()",
    "snippet": "public static StrMatcher doubleQuoteMatcher() {\n        return DOUBLE_QUOTE_MATCHER;\n    }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * Returns a matcher which matches the double quote character.\n * @return a matcher for a double quote\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.quoteMatcher#144",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.quoteMatcher()",
    "snippet": "public static StrMatcher quoteMatcher() {\n        return QUOTE_MATCHER;\n    }",
    "begin_line": 144,
    "end_line": 146,
    "comment": "/** \n * Returns a matcher which matches the single or double quote character.\n * @return a matcher for a single or double quote\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.noneMatcher#153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.noneMatcher()",
    "snippet": "public static StrMatcher noneMatcher() {\n        return NONE_MATCHER;\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "/** \n * Matches no characters.\n * @return a matcher that matches nothing\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.charMatcher#163",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.charMatcher(char)",
    "snippet": "public static StrMatcher charMatcher(final char ch) {\n        return new CharMatcher(ch);\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * Constructor that creates a matcher from a character.\n * @param ch  the character to match, must not be null\n * @return a new Matcher for the given char\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.charSetMatcher#173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char)",
    "snippet": "public static StrMatcher charSetMatcher(final char... chars) {\n        if (chars \u003d\u003d null || chars.length \u003d\u003d 0) {\n            return NONE_MATCHER;\n        }\n        if (chars.length \u003d\u003d 1) {\n            return new CharMatcher(chars[0]);\n        }\n        return new CharSetMatcher(chars);\n    }",
    "begin_line": 173,
    "end_line": 181,
    "comment": "/** \n * Constructor that creates a matcher from a set of characters.\n * @param chars  the characters to match, null or empty matches nothing\n * @return a new matcher for the given char[]\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.charSetMatcher#189",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String)",
    "snippet": "public static StrMatcher charSetMatcher(final String chars) {\n        if (StringUtils.isEmpty(chars)) {\n            return NONE_MATCHER;\n        }\n        if (chars.length() \u003d\u003d 1) {\n            return new CharMatcher(chars.charAt(0));\n        }\n        return new CharSetMatcher(chars.toCharArray());\n    }",
    "begin_line": 189,
    "end_line": 197,
    "comment": "/** \n * Constructor that creates a matcher from a string representing a set of characters.\n * @param chars  the characters to match, null or empty matches nothing\n * @return a new Matcher for the given characters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.stringMatcher#205",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String)",
    "snippet": "public static StrMatcher stringMatcher(final String str) {\n        if (StringUtils.isEmpty(str)) {\n            return NONE_MATCHER;\n        }\n        return new StringMatcher(str);\n    }",
    "begin_line": 205,
    "end_line": 210,
    "comment": "/** \n * Constructor that creates a matcher from a string.\n * @param str  the string to match, null or empty matches nothing\n * @return a new Matcher for the given String\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.StrMatcher#216",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.StrMatcher()",
    "snippet": "protected StrMatcher() {\n        super();\n    }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.isMatch#245",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "public abstract int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd);",
    "begin_line": 245,
    "end_line": 245,
    "comment": "/** \n * Returns the number of matching characters, zero for no match. \u003cp\u003e This method is called to check for a match. The parameter \u003ccode\u003epos\u003c/code\u003e represents the current position to be checked in the string \u003ccode\u003ebuffer\u003c/code\u003e (a character array which must not be changed). The API guarantees that \u003ccode\u003epos\u003c/code\u003e is a valid index for \u003ccode\u003ebuffer\u003c/code\u003e. \u003cp\u003e The character array may be larger than the active area to be matched. Only values in the buffer between the specifed indices may be accessed. \u003cp\u003e The matching code may check one character or many. It may check characters preceding \u003ccode\u003epos\u003c/code\u003e as well as those after, so long as no checks exceed the bounds specified. \u003cp\u003e It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index (exclusive) of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrMatcher.isMatch#267",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)",
    "snippet": "public int isMatch(final char[] buffer, final int pos) {\n        return isMatch(buffer, pos, 0, buffer.length);\n    }",
    "begin_line": 267,
    "end_line": 269,
    "comment": "/** \n * Returns the number of matching characters, zero for no match. \u003cp\u003e This method is called to check for a match. The parameter \u003ccode\u003epos\u003c/code\u003e represents the current position to be checked in the string \u003ccode\u003ebuffer\u003c/code\u003e (a character array which must not be changed). The API guarantees that \u003ccode\u003epos\u003c/code\u003e is a valid index for \u003ccode\u003ebuffer\u003c/code\u003e. \u003cp\u003e The matching code may check one character or many. It may check characters preceding \u003ccode\u003epos\u003c/code\u003e as well as those after. \u003cp\u003e It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @return the number of matching characters, zero for no match\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSetMatcher.CharSetMatcher#284",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.CharSetMatcher(char)",
    "snippet": " CharSetMatcher(final char chars[]) {\n            super();\n            this.chars \u003d chars.clone();\n            Arrays.sort(this.chars);\n        }",
    "begin_line": 284,
    "end_line": 288,
    "comment": "/** \n * Constructor that creates a matcher from a character array.\n * @param chars  the characters to match, must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSetMatcher.isMatch#300",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n            return Arrays.binarySearch(chars, buffer[pos]) \u003e\u003d 0 ? 1 : 0;\n        }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "/** \n * Returns whether or not the given character matches.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharMatcher.CharMatcher#318",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.CharMatcher(char)",
    "snippet": " CharMatcher(final char ch) {\n            super();\n            this.ch \u003d ch;\n        }",
    "begin_line": 318,
    "end_line": 321,
    "comment": "/** \n * Constructor that creates a matcher that matches a single character.\n * @param ch  the character to match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharMatcher.isMatch#333",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n            return ch \u003d\u003d buffer[pos] ? 1 : 0;\n        }",
    "begin_line": 333,
    "end_line": 335,
    "comment": "/** \n * Returns whether or not the given character matches.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringMatcher.StringMatcher#351",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.StringMatcher(java.lang.String)",
    "snippet": " StringMatcher(final String str) {\n            super();\n            chars \u003d str.toCharArray();\n        }",
    "begin_line": 351,
    "end_line": 354,
    "comment": "/** \n * Constructor that creates a matcher from a String.\n * @param str  the string to match, must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringMatcher.isMatch#366",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) {\n            final int len \u003d chars.length;\n            if (pos + len \u003e bufferEnd) {\n                return 0;\n            }\n            for (int i \u003d 0; i \u003c chars.length; i++, pos++) {\n                if (chars[i] !\u003d buffer[pos]) {\n                    return 0;\n                }\n            }\n            return len;\n        }",
    "begin_line": 366,
    "end_line": 377,
    "comment": "/** \n * Returns whether or not the given text matches the stored string.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoMatcher.NoMatcher#389",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.NoMatcher()",
    "snippet": " NoMatcher() {\n            super();\n        }",
    "begin_line": 389,
    "end_line": 391,
    "comment": "/** \n * Constructs a new instance of \u003ccode\u003eNoMatcher\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoMatcher.isMatch#403",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n            return 0;\n        }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Always returns \u003ccode\u003efalse\u003c/code\u003e.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TrimMatcher.TrimMatcher#417",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.TrimMatcher()",
    "snippet": " TrimMatcher() {\n            super();\n        }",
    "begin_line": 417,
    "end_line": 419,
    "comment": "/** \n * Constructs a new instance of \u003ccode\u003eTrimMatcher\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TrimMatcher.isMatch#431",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/text/StrMatcher.java",
    "class_name": "org.apache.commons.lang3.text.StrMatcher",
    "signature": "org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)",
    "snippet": "@Override\n        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n            return buffer[pos] \u003c\u003d 32 ? 1 : 0;\n        }",
    "begin_line": 431,
    "end_line": 433,
    "comment": "/** \n * Returns whether or not the given character matches.\n * @param buffer  the text content to match against, do not change\n * @param pos  the starting position for the match, valid for buffer\n * @param bufferStart  the first active index in the buffer, valid for buffer\n * @param bufferEnd  the end index of the active buffer, valid for buffer\n * @return the number of matching characters, zero for no match\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]