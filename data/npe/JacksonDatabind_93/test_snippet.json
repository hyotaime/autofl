[
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testXalanTypes1599()",
    "snippet": "public void testXalanTypes1599() throws Exception\n    {\n        final String clsName \u003d \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\";\n        final String JSON \u003d aposToQuotes(\n \"{\u0027id\u0027: 124,\\n\"\n+\" \u0027obj\u0027:[ \u0027\"+clsName+\"\u0027,\\n\"\n+\"  {\\n\"\n+\"    \u0027transletBytecodes\u0027 : [ \u0027AAIAZQ\u003d\u003d\u0027 ],\\n\"\n+\"    \u0027transletName\u0027 : \u0027a.b\u0027,\\n\"\n+\"    \u0027outputProperties\u0027 : { }\\n\"\n+\"  }\\n\"\n+\" ]\\n\"\n+\"}\"\n        );\n        ObjectMapper mapper \u003d new ObjectMapper();\n        mapper.enableDefaultTyping();\n        try {\n            mapper.readValue(JSON, Bean1599.class);\n            fail(\"Should not pass\");\n        } catch (JsonMappingException e) {\n            _verifySecurityException(e, clsName);\n        }\n    }",
    "begin_line": 43,
    "end_line": 65,
    "comment": "",
    "child_ranges": [
      "(line 45,col 9)-(line 45,col 92)",
      "(line 46,col 9)-(line 56,col 10)",
      "(line 57,col 9)-(line 57,col 49)",
      "(line 58,col 9)-(line 58,col 37)",
      "(line 59,col 9)-(line 64,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testJDKTypes1737()",
    "snippet": "public void testJDKTypes1737() throws Exception\n    {\n        _testIllegalType(java.util.logging.FileHandler.class);\n        _testIllegalType(java.rmi.server.UnicastRemoteObject.class);\n    }",
    "begin_line": 69,
    "end_line": 73,
    "comment": "",
    "child_ranges": [
      "(line 71,col 9)-(line 71,col 62)",
      "(line 72,col 9)-(line 72,col 68)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testJDKTypes1855()",
    "snippet": "public void testJDKTypes1855() throws Exception\n    {\n        // apparently included by JDK?\n//        _testIllegalType(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");\n\n        // also: we can try some form of testing, even if bit contrived...\n        _testIllegalType(BogusPointcutAdvisor.class);\n        _testIllegalType(BogusApplicationContext.class);\n    }",
    "begin_line": 76,
    "end_line": 84,
    "comment": "",
    "child_ranges": [
      "(line 82,col 9)-(line 82,col 53)",
      "(line 83,col 9)-(line 83,col 56)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testJDKTypes1872()",
    "snippet": "public void testJDKTypes1872() throws Exception\n    {\n        ObjectMapper mapper \u003d new ObjectMapper();\n        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n    \n        String json \u003d aposToQuotes(String.format(\"{\u0027@class\u0027:\u0027%s\u0027,\u0027authorities\u0027:[\u0027java.util.ArrayList\u0027,[]]}\",\n                Authentication1872.class.getName()));\n        Authentication1872 result \u003d mapper.readValue(json, Authentication1872.class);\n        assertNotNull(result);\n    }",
    "begin_line": 105,
    "end_line": 114,
    "comment": "",
    "child_ranges": [
      "(line 107,col 9)-(line 107,col 49)",
      "(line 108,col 9)-(line 108,col 99)",
      "(line 110,col 9)-(line 111,col 53)",
      "(line 112,col 9)-(line 112,col 85)",
      "(line 113,col 9)-(line 113,col 30)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest._testIllegalType(java.lang.Class\u003c?\u003e)",
    "snippet": "private void _testIllegalType(Class\u003c?\u003e nasty) throws Exception {\n        _testIllegalType(nasty.getName());\n    }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "child_ranges": [
      "(line 117,col 9)-(line 117,col 42)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest._testIllegalType(java.lang.String)",
    "snippet": "private void _testIllegalType(String clsName) throws Exception\n    {\n        // While usually exploited via default typing let\u0027s not require\n        // it here; mechanism still the same\n        String json \u003d aposToQuotes(\n                \"{\u0027v\u0027:[\u0027\"+clsName+\"\u0027,\u0027/tmp/foobar.txt\u0027]}\"\n                );\n        try {\n            MAPPER.readValue(json, PolyWrapper.class);\n            fail(\"Should not pass\");\n        } catch (JsonMappingException e) {\n            _verifySecurityException(e, clsName);\n        }\n    }",
    "begin_line": 120,
    "end_line": 133,
    "comment": "",
    "child_ranges": [
      "(line 124,col 9)-(line 126,col 18)",
      "(line 127,col 9)-(line 132,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest._verifySecurityException(java.lang.Throwable, java.lang.String)",
    "snippet": "protected void _verifySecurityException(Throwable t, String clsName) throws Exception\n    {\n        // 17-Aug-2017, tatu: Expected type more granular in 2.9 (over 2.8)\n        _verifyException(t, JsonMappingException.class,\n            \"Illegal type\",\n            \"to deserialize\",\n            \"prevented for security reasons\");\n        verifyException(t, clsName);\n    }",
    "begin_line": 135,
    "end_line": 143,
    "comment": "",
    "child_ranges": [
      "(line 138,col 9)-(line 141,col 46)",
      "(line 142,col 9)-(line 142,col 36)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
    "signature": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest._verifyException(java.lang.Throwable, java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "protected void _verifyException(Throwable t, Class\u003c?\u003e expExcType,\n            String... patterns) throws Exception\n    {\n        Class\u003c?\u003e actExc \u003d t.getClass();\n        if (!expExcType.isAssignableFrom(actExc)) {\n            fail(\"Expected Exception of type \u0027\"+expExcType.getName()+\"\u0027, got \u0027\"\n                    +actExc.getName()+\"\u0027, message: \"+t.getMessage());\n        }\n        for (String pattern : patterns) {\n            verifyException(t, pattern);\n        }\n    }",
    "begin_line": 145,
    "end_line": 156,
    "comment": "",
    "child_ranges": [
      "(line 148,col 9)-(line 148,col 39)",
      "(line 149,col 9)-(line 152,col 9)",
      "(line 153,col 9)-(line 155,col 9)"
    ]
  }
]