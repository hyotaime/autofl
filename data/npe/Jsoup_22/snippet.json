[
  {
    "name": "Validate.Validate#8",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.Validate()",
    "snippet": "private Validate() {}",
    "begin_line": 8,
    "end_line": 8,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#14",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object)",
    "snippet": "public static void notNull(Object obj) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(\"Object must not be null\");\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "/** \n * Validates that the obect is not null\n * @param obj object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#24",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object, java.lang.String)",
    "snippet": "public static void notNull(Object obj, String msg) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#33",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean)",
    "snippet": "public static void isTrue(boolean val) {\n        if (!val)\n            throw new IllegalArgumentException(\"Must be true\");\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#43",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean, java.lang.String)",
    "snippet": "public static void isTrue(boolean val, String msg) {\n        if (!val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 43,
    "end_line": 46,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#52",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean)",
    "snippet": "public static void isFalse(boolean val) {\n        if (val)\n            throw new IllegalArgumentException(\"Must be false\");\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isFalse#62",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isFalse(boolean, java.lang.String)",
    "snippet": "public static void isFalse(boolean val, String msg) {\n        if (val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Validates that the value is false\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[])",
    "snippet": "public static void noNullElements(Object[] objects) {\n        noNullElements(objects, \"Array must not contain any null objects\");\n    }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#80",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[], java.lang.String)",
    "snippet": "public static void noNullElements(Object[] objects, String msg) {\n        for (Object obj : objects)\n            if (obj \u003d\u003d null)\n                throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 80,
    "end_line": 84,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#90",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String)",
    "snippet": "public static void notEmpty(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(\"String must not be empty\");\n    }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#100",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String, java.lang.String)",
    "snippet": "public static void notEmpty(String string, String msg) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.fail#109",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.fail(java.lang.String)",
    "snippet": "public static void fail(String msg) {\n        throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Cause a failure.\n * @param msg message to output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.get#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.get(java.lang.String)",
    "snippet": "public String get(String key) {\n        Validate.notEmpty(key);\n\n        if (attributes \u003d\u003d null)\n            return \"\";\n\n        Attribute attr \u003d attributes.get(key.toLowerCase());\n        return attr !\u003d null ? attr.getValue() : \"\";\n    }",
    "begin_line": 30,
    "end_line": 38,
    "comment": "/** \n * Get an attribute value by key.\n * @param key the attribute key\n * @return the attribute value if set; or empty string if not set.\n * @see #hasKey(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#45",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "public void put(String key, String value) {\n        Attribute attr \u003d new Attribute(key, value);\n        put(attr);\n    }",
    "begin_line": 45,
    "end_line": 48,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param key attribute key\n * @param value attribute value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#54",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(org.jsoup.nodes.Attribute)",
    "snippet": "public void put(Attribute attribute) {\n        Validate.notNull(attribute);\n        if (attributes \u003d\u003d null)\n             attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n        attributes.put(attribute.getKey(), attribute);\n    }",
    "begin_line": 54,
    "end_line": 59,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param attribute attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove(java.lang.String)",
    "snippet": "public void remove(String key) {\n        Validate.notEmpty(key);\n        if (attributes \u003d\u003d null)\n            return;\n        attributes.remove(key.toLowerCase());\n    }",
    "begin_line": 65,
    "end_line": 70,
    "comment": "/** \n * Remove an attribute by key.\n * @param key attribute key to remove\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasKey#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasKey(java.lang.String)",
    "snippet": "public boolean hasKey(String key) {\n        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key.toLowerCase());\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Tests if these attributes contain an attribute with this key.\n * @param key key to check for\n * @return true if key exists, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.size#85",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n        if (attributes \u003d\u003d null)\n            return 0;\n        return attributes.size();\n    }",
    "begin_line": 85,
    "end_line": 89,
    "comment": "/** \n * Get the number of attributes in this set.\n * @return size\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.addAll#95",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.addAll(org.jsoup.nodes.Attributes)",
    "snippet": "public void addAll(Attributes incoming) {\n        if (incoming.size() \u003d\u003d 0)\n            return;\n        if (attributes \u003d\u003d null)\n            attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(incoming.size());\n        attributes.putAll(incoming.attributes);\n    }",
    "begin_line": 95,
    "end_line": 101,
    "comment": "/** \n * Add all the attributes from the incoming set to this set.\n * @param incoming attributes to add to these attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.iterator#103",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cAttribute\u003e iterator() {\n        return asList().iterator();\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.asList#112",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.asList()",
    "snippet": "public List\u003cAttribute\u003e asList() {\n        if (attributes \u003d\u003d null)\n            return Collections.emptyList();\n\n        List\u003cAttribute\u003e list \u003d new ArrayList\u003cAttribute\u003e(attributes.size());\n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            list.add(entry.getValue());\n        }\n        return Collections.unmodifiableList(list);\n    }",
    "begin_line": 112,
    "end_line": 121,
    "comment": "/** \n * Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes to keys will not be recognised in the containing set.\n * @return an view of the attributes as a List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.dataset#128",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return new Dataset();\n    }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys starting with  {@code data-}.\n * @return map of custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#136",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        return accum.toString();\n    }",
    "begin_line": 136,
    "end_line": 140,
    "comment": "/** \n * Get the HTML representation of these attributes.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#142",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void html(StringBuilder accum, Document.OutputSettings out) {\n        if (attributes \u003d\u003d null)\n            return;\n        \n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            Attribute attribute \u003d entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }",
    "begin_line": 142,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.toString#153",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.toString()",
    "snippet": "public String toString() {\n        return html();\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.equals#158",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Attributes)) return false;\n        \n        Attributes that \u003d (Attributes) o;\n        \n        if (attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null) return false;\n        \n        return true;\n    }",
    "begin_line": 158,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hashCode#170",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        return attributes !\u003d null ? attributes.hashCode() : 0;\n    }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.clone#175",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.clone()",
    "snippet": "@Override\n    public Attributes clone() {\n        if (attributes \u003d\u003d null)\n            return new Attributes();\n\n        Attributes clone;\n        try {\n            clone \u003d (Attributes) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n        clone.attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(attributes.size());\n        for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());\n        return clone;\n    }",
    "begin_line": 175,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.Dataset#193",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.Dataset()",
    "snippet": "private Dataset() {\n            if (attributes \u003d\u003d null)\n                attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n        }",
    "begin_line": 193,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.entrySet#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.entrySet()",
    "snippet": "public Set\u003cEntry\u003cString, String\u003e\u003e entrySet() {\n            return new EntrySet();\n        }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.put#203",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "@Override\n        public String put(String key, String value) {\n            String dataKey \u003d dataKey(key);\n            String oldValue \u003d hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n            Attribute attr \u003d new Attribute(dataKey, value);\n            attributes.put(dataKey, attr);\n            return oldValue;\n        }",
    "begin_line": 203,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.iterator#212",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iterator() {\n                return new DatasetIterator();\n            }",
    "begin_line": 212,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.size#216",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n                int count \u003d 0;\n                Iterator iter \u003d new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }",
    "begin_line": 216,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.hasNext#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasNext()",
    "snippet": "public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr \u003d attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }",
    "begin_line": 228,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.next#236",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.next()",
    "snippet": "public Entry\u003cString, String\u003e next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }",
    "begin_line": 236,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.remove#240",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove()",
    "snippet": "public void remove() {\n                attributes.remove(attr.getKey());\n            }",
    "begin_line": 240,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.dataKey#246",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataKey(java.lang.String)",
    "snippet": "private static String dataKey(String key) {\n        return dataPrefix + key;\n    }",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#37",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag \u003d tag;\n    }",
    "begin_line": 37,
    "end_line": 42,
    "comment": "/** \n * Create a new, standalone Element. (Standalone in that is has no parent.)\n * @param tag tag of this element\n * @param baseUri the base URI\n * @param attributes initial attributes\n * @see #appendChild(Node)\n * @see #appendElement(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#52",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String)",
    "snippet": "public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "/** \n * Create a new Element from a tag and a base URI.\n * @param tag element tag\n * @param baseUri the base URI of this element. It is acceptable for the base URI to be an emptystring, but not null.\n * @see Tag#valueOf(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nodeName#57",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return tag.getName();\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#66",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName()",
    "snippet": "public String tagName() {\n        return tag.getName();\n    }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Get the name of the tag for this element. E.g.  {@code div}\n * @return the tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName(java.lang.String)",
    "snippet": "public Element tagName(String tagName) {\n        Validate.notEmpty(tagName, \"Tag name must not be empty.\");\n        tag \u003d Tag.valueOf(tagName);\n        return this;\n    }",
    "begin_line": 77,
    "end_line": 81,
    "comment": "/** \n * Change the tag of this element. For example, convert a  {@code \u003cspan\u003e} to a {@code \u003cdiv\u003e} with{@code el.tagName(\"div\");}.\n * @param tagName new tag name for this element\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tag#88",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tag()",
    "snippet": "public Tag tag() {\n        return tag;\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "/** \n * Get the Tag for this element.\n * @return the tag object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.isBlock#98",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.isBlock()",
    "snippet": "public boolean isBlock() {\n        return tag.isBlock();\n    }",
    "begin_line": 98,
    "end_line": 100,
    "comment": "/** \n * Test if this element is a block-level element. (E.g.  {@code \u003cdiv\u003e \u003d\u003d true} or an inline element{@code \u003cp\u003e \u003d\u003d false}).\n * @return true if block, false if not (and thus inline)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.id#107",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.id()",
    "snippet": "public String id() {\n        String id \u003d attr(\"id\");\n        return id \u003d\u003d null ? \"\" : id;\n    }",
    "begin_line": 107,
    "end_line": 110,
    "comment": "/** \n * Get the  {@code id} attribute of this element.\n * @return The id attribute, if present, or an empty string if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attr#118",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attr(java.lang.String, java.lang.String)",
    "snippet": "public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 118,
    "end_line": 121,
    "comment": "/** \n * Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataset#136",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return attributes.dataset();\n    }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Get this element\u0027s HTML5 custom data attributes. Each attribute in the element that has a key starting with \"data-\" is included the dataset. \u003cp\u003e E.g., the element  {@code \u003cdiv data-package\u003d\"jsoup\" data-language\u003d\"Java\" class\u003d\"group\"\u003e...} has the dataset{@code package\u003djsoup, language\u003djava}. \u003cp\u003e This map is a filtered view of the element\u0027s attribute map. Changes to one map (add, remove, update) are reflected in the other map. \u003cp\u003e You can find elements that have data attributes using the  {@code [^data-]} attribute key prefix selector.\n * @return a map of {@code key\u003dvalue} custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parent#141",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parent()",
    "snippet": "@Override\n    public final Element parent() {\n        return (Element) parentNode;\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parents#149",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parents()",
    "snippet": "public Elements parents() {\n        Elements parents \u003d new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }",
    "begin_line": 149,
    "end_line": 153,
    "comment": "/** \n * Get this element\u0027s parent and ancestors, up to the document root.\n * @return this element\u0027s stack of parents, closest first.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.accumulateParents#155",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
    "snippet": "private static void accumulateParents(Element el, Elements parents) {\n        Element parent \u003d el.parent();\n        if (parent !\u003d null \u0026\u0026 !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }",
    "begin_line": 155,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.child#173",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.child(int)",
    "snippet": "public Element child(int index) {\n        return children().get(index);\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "/** \n * Get a child element of this element, by its 0-based index number. \u003cp/\u003e Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list.\n * @param index the index number of the element to retrieve\n * @return the child element, if it exists, or {@code null} if absent.\n * @see #childNode(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.children#185",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.children()",
    "snippet": "public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List\u003cElement\u003e elements \u003d new ArrayList\u003cElement\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }",
    "begin_line": 185,
    "end_line": 193,
    "comment": "/** \n * Get this element\u0027s child elements. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Element nodes.\n * @return child elements. If this element has no children, returns anempty list.\n * @see #childNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.textNodes#211",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.textNodes()",
    "snippet": "public List\u003cTextNode\u003e textNodes() {\n        List\u003cTextNode\u003e textNodes \u003d new ArrayList\u003cTextNode\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof TextNode)\n                textNodes.add((TextNode) node);\n        }\n        return Collections.unmodifiableList(textNodes);\n    }",
    "begin_line": 211,
    "end_line": 218,
    "comment": "/** \n * Get this element\u0027s child text nodes. The list is unmodifiable but the text nodes may be manipulated. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Text nodes.\n * @return child text nodes. If this element has no text nodes, returns anempty list. \u003cp/\u003e For example, with the input HTML:  {@code \u003cp\u003eOne \u003cspan\u003eTwo\u003c/span\u003e Three \u003cbr\u003e Four\u003c/p\u003e} with the {@code p} element selected:\u003cul\u003e \u003cli\u003e {@code p.text()} \u003d {@code \"One Two Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.ownText()} \u003d {@code \"One Three Four\"}\u003c/li\u003e \u003cli\u003e {@code p.children()} \u003d {@code Elements[\u003cspan\u003e, \u003cbr\u003e]}\u003c/li\u003e \u003cli\u003e {@code p.childNodes()} \u003d {@code List\u003cNode\u003e[\"One \", \u003cspan\u003e, \" Three \", \u003cbr\u003e, \" Four\"]}\u003c/li\u003e \u003cli\u003e {@code p.textNodes()} \u003d {@code List\u003cTextNode\u003e[\"One \", \" Three \", \" Four\"]}\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataNodes#228",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataNodes()",
    "snippet": "public List\u003cDataNode\u003e dataNodes() {\n        List\u003cDataNode\u003e dataNodes \u003d new ArrayList\u003cDataNode\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof DataNode)\n                dataNodes.add((DataNode) node);\n        }\n        return Collections.unmodifiableList(dataNodes);\n    }",
    "begin_line": 228,
    "end_line": 235,
    "comment": "/** \n * Get this element\u0027s child data nodes. The list is unmodifiable but the data nodes may be manipulated. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Data nodes.\n * @return child data nodes. If this element has no data nodes, returns anempty list.\n * @see #data()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.select#254",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.select(java.lang.String)",
    "snippet": "public Elements select(String cssQuery) {\n        return Selector.select(cssQuery, this);\n    }",
    "begin_line": 254,
    "end_line": 256,
    "comment": "/** \n * Find elements that match the  {@link Selector} CSS query, with this element as the starting context. Matched elementsmay include this element, or any of its children. \u003cp/\u003e This method is generally more powerful to use than the DOM-type  {@code getElementBy*} methods, becausemultiple filters can be combined, e.g.: \u003cul\u003e \u003cli\u003e {@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\u003cli\u003e {@code el.select(\"a[href*\u003dexample.com]\")} - finds links pointing to example.com (loosely)\u003c/ul\u003e \u003cp/\u003e See the query syntax documentation in  {@link org.jsoup.select.Selector}.\n * @param cssQuery a {@link Selector} CSS-like query\n * @return elements that match the query (empty if none match)\n * @see org.jsoup.select.Selector\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendChild#264",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendChild(org.jsoup.nodes.Node)",
    "snippet": "public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(child);\n        return this;\n    }",
    "begin_line": 264,
    "end_line": 269,
    "comment": "/** \n * Add a node child node to this element.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependChild#277",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependChild(org.jsoup.nodes.Node)",
    "snippet": "public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(0, child);\n        return this;\n    }",
    "begin_line": 277,
    "end_line": 282,
    "comment": "/** \n * Add a node to the start of this element\u0027s children.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendElement#291",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendElement(java.lang.String)",
    "snippet": "public Element appendElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }",
    "begin_line": 291,
    "end_line": 295,
    "comment": "/** \n * Create a new element by tag name, and add it as the last child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependElement#304",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependElement(java.lang.String)",
    "snippet": "public Element prependElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }",
    "begin_line": 304,
    "end_line": 308,
    "comment": "/** \n * Create a new element by tag name, and add it as the first child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendText#316",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendText(java.lang.String)",
    "snippet": "public Element appendText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }",
    "begin_line": 316,
    "end_line": 320,
    "comment": "/** \n * Create and append a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependText#328",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependText(java.lang.String)",
    "snippet": "public Element prependText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }",
    "begin_line": 328,
    "end_line": 332,
    "comment": "/** \n * Create and prepend a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.append#340",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.append(java.lang.String)",
    "snippet": "public Element append(String html) {\n        Validate.notNull(html);\n\n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 340,
    "end_line": 346,
    "comment": "/** \n * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n * @param html HTML to add inside this element, after the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prepend#354",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prepend(java.lang.String)",
    "snippet": "public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n        addChildren(0, nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }",
    "begin_line": 354,
    "end_line": 360,
    "comment": "/** \n * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element\u0027s children.\n * @param html HTML to add inside this element, before the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#370",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(java.lang.String)",
    "snippet": "@Override\n    public Element before(String html) {\n        return (Element) super.before(html);\n    }",
    "begin_line": 370,
    "end_line": 372,
    "comment": "/** \n * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n * @param html HTML to add before this element\n * @return this element, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#381",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element before(Node node) {\n        return (Element) super.before(node);\n    }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "/** \n * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n * @param node to add before this element\n * @return this Element, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#393",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(java.lang.String)",
    "snippet": "@Override\n    public Element after(String html) {\n        return (Element) super.after(html);\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n * @param html HTML to add after this element\n * @return this element, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#404",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(org.jsoup.nodes.Node)",
    "snippet": "@Override\n    public Element after(Node node) {\n        return (Element) super.after(node);\n    }",
    "begin_line": 404,
    "end_line": 406,
    "comment": "/** \n * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n * @param node to add after this element\n * @return this element, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.empty#412",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.empty()",
    "snippet": "public Element empty() {\n        childNodes.clear();\n        return this;\n    }",
    "begin_line": 412,
    "end_line": 415,
    "comment": "/** \n * Remove all of the element\u0027s child nodes. Any attributes are left as-is.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.wrap#424",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.wrap(java.lang.String)",
    "snippet": "@Override\n    public Element wrap(String html) {\n        return (Element) super.wrap(html);\n    }",
    "begin_line": 424,
    "end_line": 426,
    "comment": "/** \n * Wrap the supplied HTML around this element.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.siblingElements#433",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.siblingElements()",
    "snippet": "public Elements siblingElements() {\n\n        return parent().children();\n    }",
    "begin_line": 433,
    "end_line": 436,
    "comment": "/** \n * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list.\n * @return sibling elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nextElementSibling#446",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nextElementSibling()",
    "snippet": "public Element nextElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 446,
    "end_line": 454,
    "comment": "/** \n * Gets the next sibling element of this element. E.g., if a  {@code div} contains two {@code p}s,  the  {@code nextElementSibling} of the first {@code p} is the second {@code p}. \u003cp/\u003e This is similar to  {@link #nextSibling()}, but specifically finds only Elements\n * @return the next element, or null if there is no next element\n * @see #previousElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.previousElementSibling#461",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.previousElementSibling()",
    "snippet": "public Element previousElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 461,
    "end_line": 469,
    "comment": "/** \n * Gets the previous element sibling of this element.\n * @return the previous element, or null if there is no previous element\n * @see #nextElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.firstElementSibling#475",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.firstElementSibling()",
    "snippet": "public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(0) : null;\n    }",
    "begin_line": 475,
    "end_line": 479,
    "comment": "/** \n * Gets the first element sibling of this element.\n * @return the first sibling that is an element (aka the parent\u0027s first element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.elementSiblingIndex#486",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.elementSiblingIndex()",
    "snippet": "public Integer elementSiblingIndex() {\n       if (parent() \u003d\u003d null) return 0;\n       return indexInList(this, parent().children()); \n    }",
    "begin_line": 486,
    "end_line": 489,
    "comment": "/** \n * Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0.\n * @return position in element sibling list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.lastElementSibling#495",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.lastElementSibling()",
    "snippet": "public Element lastElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(siblings.size() - 1) : null;\n    }",
    "begin_line": 495,
    "end_line": 498,
    "comment": "/** \n * Gets the last element sibling of this element\n * @return the last sibling that is an element (aka the parent\u0027s last element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.indexInList#500",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.indexInList(org.jsoup.nodes.Element, java.util.List\u003cE\u003e)",
    "snippet": "private static \u003cE extends Element\u003e Integer indexInList(Element search, List\u003cE\u003e elements) {\n        Validate.notNull(search);\n        Validate.notNull(elements);\n\n        for (int i \u003d 0; i \u003c elements.size(); i++) {\n            E element \u003d elements.get(i);\n            if (element.equals(search))\n                return i;\n        }\n        return null;\n    }",
    "begin_line": 500,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByTag#519",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByTag(java.lang.String)",
    "snippet": "public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName \u003d tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }",
    "begin_line": 519,
    "end_line": 524,
    "comment": "/** \n * Finds elements, including and recursively under this element, with the specified tag name.\n * @param tagName The tag name to search for (case insensitively).\n * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementById#535",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementById(java.lang.String)",
    "snippet": "public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements \u003d Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() \u003e 0)\n            return elements.get(0);\n        else\n            return null;\n    }",
    "begin_line": 535,
    "end_line": 543,
    "comment": "/** \n * Find an element by ID, including or under this element. \u003cp\u003e Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use  {@link Document#getElementById(String)}\n * @param id The ID to search for.\n * @return The first matching element by ID, starting with this element, or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByClass#556",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByClass(java.lang.String)",
    "snippet": "public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }",
    "begin_line": 556,
    "end_line": 560,
    "comment": "/** \n * Find elements that have this class, including or under this element. Case insensitive. \u003cp\u003e Elements can have multiple classes (e.g.  {@code \u003cdiv class\u003d\"header round first\"\u003e}. This method checks each class, so you can find the above with  {@code el.getElementsByClass(\"header\");}.\n * @param className the name of the class to search for.\n * @return elements with the supplied class name, empty if none\n * @see #hasClass(String)\n * @see #classNames()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttribute#568",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttribute(java.lang.String)",
    "snippet": "public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key \u003d key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }",
    "begin_line": 568,
    "end_line": 573,
    "comment": "/** \n * Find elements that have a named attribute set. Case insensitive.\n * @param key name of the attribute, e.g. {@code href}\n * @return elements that have this attribute, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeStarting#581",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeStarting(java.lang.String)",
    "snippet": "public Elements getElementsByAttributeStarting(String keyPrefix) {\n        Validate.notEmpty(keyPrefix);\n        keyPrefix \u003d keyPrefix.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n    }",
    "begin_line": 581,
    "end_line": 586,
    "comment": "/** \n * Find elements that have an attribute name starting with the supplied prefix. Use  {@code data-} to find elementsthat have HTML5 datasets.\n * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n * @return elements that have attribute names that start with with the prefix, empty if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValue#595",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValue(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }",
    "begin_line": 595,
    "end_line": 597,
    "comment": "/** \n * Find elements that have an attribute with the specific value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that have this attribute with this value, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueNot#606",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueNot(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }",
    "begin_line": 606,
    "end_line": 608,
    "comment": "/** \n * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that do not have a matching attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueStarting#617",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueStarting(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }",
    "begin_line": 617,
    "end_line": 619,
    "comment": "/** \n * Find elements that have attributes that start with the value prefix. Case insensitive.\n * @param key name of the attribute\n * @param valuePrefix start of attribute value\n * @return elements that have attributes that start with the value prefix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueEnding#628",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }",
    "begin_line": 628,
    "end_line": 630,
    "comment": "/** \n * Find elements that have attributes that end with the value suffix. Case insensitive.\n * @param key name of the attribute\n * @param valueSuffix end of the attribute value\n * @return elements that have attributes that end with the value suffix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueContaining#639",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueContaining(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }",
    "begin_line": 639,
    "end_line": 641,
    "comment": "/** \n * Find elements that have attributes whose value contains the match string. Case insensitive.\n * @param key name of the attribute\n * @param match substring of value to search for\n * @return elements that have attributes containing this text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#649",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n        \n    }",
    "begin_line": 649,
    "end_line": 652,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param pattern compiled regular expression to match against attribute values\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#660",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsByAttributeValueMatching(key, pattern);\n    }",
    "begin_line": 660,
    "end_line": 668,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param regex regular expression to match agaisnt attribute values. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexLessThan#675",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexLessThan(int)",
    "snippet": "public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }",
    "begin_line": 675,
    "end_line": 677,
    "comment": "/** \n * Find elements whose sibling index is less than the supplied index.\n * @param index 0-based index\n * @return elements less than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexGreaterThan#684",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexGreaterThan(int)",
    "snippet": "public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }",
    "begin_line": 684,
    "end_line": 686,
    "comment": "/** \n * Find elements whose sibling index is greater than the supplied index.\n * @param index 0-based index\n * @return elements greater than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexEquals#693",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexEquals(int)",
    "snippet": "public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }",
    "begin_line": 693,
    "end_line": 695,
    "comment": "/** \n * Find elements whose sibling index is equal to the supplied index.\n * @param index 0-based index\n * @return elements equal to index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingText#704",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingText(java.lang.String)",
    "snippet": "public Elements getElementsContainingText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n    }",
    "begin_line": 704,
    "end_line": 706,
    "comment": "/** \n * Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants.\n * @param searchText to look for in the element\u0027s text\n * @return elements that contain the string, case insensitive.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingOwnText#715",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsContainingOwnText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n    }",
    "begin_line": 715,
    "end_line": 717,
    "comment": "/** \n * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants.\n * @param searchText to look for in the element\u0027s own text\n * @return elements that contain the string, case insensitive.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#725",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingText(Pattern pattern) {\n        return Collector.collect(new Evaluator.Matches(pattern), this);\n    }",
    "begin_line": 725,
    "end_line": 727,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#735",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingText(pattern);\n    }",
    "begin_line": 735,
    "end_line": 743,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#751",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingOwnText(Pattern pattern) {\n        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n    }",
    "begin_line": 751,
    "end_line": 753,
    "comment": "/** \n * Find elements whose own text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#761",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingOwnText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingOwnText(pattern);\n    }",
    "begin_line": 761,
    "end_line": 769,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getAllElements#776",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getAllElements()",
    "snippet": "public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }",
    "begin_line": 776,
    "end_line": 778,
    "comment": "/** \n * Find all elements under this element (including self, and children of children).\n * @return all elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#789",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text()",
    "snippet": "public String text() {\n        StringBuilder sb \u003d new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 789,
    "end_line": 793,
    "comment": "/** \n * Gets the combined text of this element and all its children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.text()} returns {@code \"Hello there now!\"}\n * @return unencoded text, or empty string if none.\n * @see #ownText()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#795",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.StringBuilder)",
    "snippet": "private void text(StringBuilder accum) {\n        appendWhitespaceIfBr(this, accum);\n        \n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                Element element \u003d (Element) child;\n                if (accum.length() \u003e 0 \u0026\u0026 element.isBlock() \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }",
    "begin_line": 795,
    "end_line": 809,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#822",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText()",
    "snippet": "public String ownText() {\n        StringBuilder sb \u003d new StringBuilder();\n        ownText(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 822,
    "end_line": 826,
    "comment": "/** \n * Gets the text owned by this element only; does not get the combined text of all children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.ownText()} returns {@code \"Hello now!\"}, whereas  {@code p.text()} returns {@code \"Hello there now!\"}. Note that the text within the  {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n * @return unencoded text, or empty string if none.\n * @see #text()\n * @see #textNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#828",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText(java.lang.StringBuilder)",
    "snippet": "private void ownText(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                appendWhitespaceIfBr((Element) child, accum);\n            }\n        }\n    }",
    "begin_line": 828,
    "end_line": 837,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendNormalisedText#839",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
    "snippet": "private void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n        String text \u003d textNode.getWholeText();\n\n        if (!preserveWhitespace()) {\n            text \u003d TextNode.normaliseWhitespace(text);\n            if (TextNode.lastCharIsWhitespace(accum))\n                text \u003d TextNode.stripLeadingWhitespace(text);\n        }\n        accum.append(text);\n    }",
    "begin_line": 839,
    "end_line": 848,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendWhitespaceIfBr#850",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendWhitespaceIfBr(org.jsoup.nodes.Element, java.lang.StringBuilder)",
    "snippet": "private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n        if (element.tag.getName().equals(\"br\") \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n            accum.append(\" \");\n    }",
    "begin_line": 850,
    "end_line": 853,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.preserveWhitespace#855",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.preserveWhitespace()",
    "snippet": "boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() !\u003d null \u0026\u0026 parent().preserveWhitespace();\n    }",
    "begin_line": 855,
    "end_line": 857,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#864",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.String)",
    "snippet": "public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode \u003d new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }",
    "begin_line": 864,
    "end_line": 872,
    "comment": "/** \n * Set the text of this element. Any existing contents (text or elements) will be cleared\n * @param text unencoded text\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasText#878",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasText()",
    "snippet": "public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el \u003d (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 878,
    "end_line": 891,
    "comment": "/** \n * Test if this element has any text content (that is not just whitespace).\n * @return true if element has non-blank text content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.data#899",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.data()",
    "snippet": "public String data() {\n        StringBuilder sb \u003d new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data \u003d (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element \u003d (Element) childNode;\n                String elementData \u003d element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }",
    "begin_line": 899,
    "end_line": 913,
    "comment": "/** \n * Get the combined data of this element. Data is e.g. the inside of a  {@code script} tag.\n * @return the data, or empty string if none\n * @see #dataNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.className#920",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.className()",
    "snippet": "public String className() {\n        return attr(\"class\");\n    }",
    "begin_line": 920,
    "end_line": 922,
    "comment": "/** \n * Gets the literal value of this element\u0027s \"class\" attribute, which may include multiple class names, space separated. (E.g. on \u003ccode\u003e\u0026lt;div class\u003d\"header gray\"\u003e\u003c/code\u003e returns, \"\u003ccode\u003eheader gray\u003c/code\u003e\")\n * @return The literal class attribute, or \u003cb\u003eempty string\u003c/b\u003e if no class attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#930",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames()",
    "snippet": "public Set\u003cString\u003e classNames() {\n        if (classNames \u003d\u003d null) {\n            String[] names \u003d className().split(\"\\\\s+\");\n            classNames \u003d new LinkedHashSet\u003cString\u003e(Arrays.asList(names));\n        }\n        return classNames;\n    }",
    "begin_line": 930,
    "end_line": 936,
    "comment": "/** \n * Get all of the element\u0027s class names. E.g. on element  {@code \u003cdiv class\u003d\"header gray\"}\u003e}, returns a set of two elements  {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to the backing  {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n * @return set of classnames, empty if no class attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#943",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public Element classNames(Set\u003cString\u003e classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n        return this;\n    }",
    "begin_line": 943,
    "end_line": 947,
    "comment": "/** \n * Set the element\u0027s  {@code class} attribute to the supplied class names.\n * @param classNames set of classes\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasClass#954",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasClass(java.lang.String)",
    "snippet": "public boolean hasClass(String className) {\n        Set\u003cString\u003e classNames \u003d classNames();\n        for (String name : classNames) {\n            if (className.equalsIgnoreCase(name))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 954,
    "end_line": 961,
    "comment": "/** \n * Tests if this element has a class. Case insensitive.\n * @param className name of class to check for\n * @return true if it does, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.addClass#968",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.addClass(java.lang.String)",
    "snippet": "public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 968,
    "end_line": 976,
    "comment": "/** \n * Add a class name to this element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.removeClass#983",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.removeClass(java.lang.String)",
    "snippet": "public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 983,
    "end_line": 991,
    "comment": "/** \n * Remove a class name from this element\u0027s  {@code class} attribute.\n * @param className class name to remove\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toggleClass#998",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toggleClass(java.lang.String)",
    "snippet": "public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 998,
    "end_line": 1009,
    "comment": "/** \n * Toggle a class name on this element\u0027s  {@code class} attribute: if present, remove it; otherwise add it.\n * @param className class name to toggle\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1015",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val()",
    "snippet": "public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }",
    "begin_line": 1015,
    "end_line": 1020,
    "comment": "/** \n * Get the value of a form element (input, textarea, etc).\n * @return the value of the form element, or empty string if not set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#1027",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val(java.lang.String)",
    "snippet": "public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }",
    "begin_line": 1027,
    "end_line": 1033,
    "comment": "/** \n * Set the value of a form element (input, textarea, etc).\n * @param value value to set\n * @return this element (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlHead#1035",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (accum.length() \u003e 0 \u0026\u0026 out.prettyPrint() \u0026\u0026 (tag.formatAsBlock() || (parent() !\u003d null \u0026\u0026 parent().tag().formatAsBlock())))\n            indent(accum, depth, out);\n        accum\n                .append(\"\u003c\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())\n            accum.append(\" /\u003e\");\n        else\n            accum.append(\"\u003e\");\n    }",
    "begin_line": 1035,
    "end_line": 1047,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlTail#1049",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (!(childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())) {\n            if (out.prettyPrint() \u0026\u0026 !childNodes.isEmpty() \u0026\u0026 tag.formatAsBlock())\n                indent(accum, depth, out);\n            accum.append(\"\u003c/\").append(tagName()).append(\"\u003e\");\n        }\n    }",
    "begin_line": 1049,
    "end_line": 1055,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1064",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }",
    "begin_line": 1064,
    "end_line": 1068,
    "comment": "/** \n * Retrieves the element\u0027s inner HTML. E.g. on a  {@code \u003cdiv\u003e} with one empty {@code \u003cp\u003e}, would return {@code \u003cp\u003e\u003c/p\u003e}. (Whereas  {@link #outerHtml()} would return {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e}.)\n * @return String of HTML.\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1070",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.StringBuilder)",
    "snippet": "private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }",
    "begin_line": 1070,
    "end_line": 1073,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1081",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.String)",
    "snippet": "public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }",
    "begin_line": 1081,
    "end_line": 1085,
    "comment": "/** \n * Set this element\u0027s inner HTML. Clears the existing HTML first.\n * @param html HTML to parse and set into this element\n * @return this element\n * @see #append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toString#1087",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 1087,
    "end_line": 1089,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.equals#1092",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        return this \u003d\u003d o;\n    }",
    "begin_line": 1092,
    "end_line": 1094,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hashCode#1097",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        // todo: fixup, not very useful\n        int result \u003d super.hashCode();\n        result \u003d 31 * result + (tag !\u003d null ? tag.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 1097,
    "end_line": 1102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.clone#1105",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.clone()",
    "snippet": "@Override\n    public Element clone() {\n        Element clone \u003d (Element) super.clone();\n        clone.classNames(); // creates linked set of class names from class attribute\n        return clone;\n    }",
    "begin_line": 1105,
    "end_line": 1109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#31",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "protected Node(String baseUri, Attributes attributes) {\n        Validate.notNull(baseUri);\n        Validate.notNull(attributes);\n        \n        childNodes \u003d new ArrayList\u003cNode\u003e(4);\n        this.baseUri \u003d baseUri.trim();\n        this.attributes \u003d attributes;\n    }",
    "begin_line": 31,
    "end_line": 38,
    "comment": "/** \n * Create a new Node.\n * @param baseUri base URI\n * @param attributes attributes (not null, but may be empty)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String)",
    "snippet": "protected Node(String baseUri) {\n        this(baseUri, new Attributes());\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#47",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node()",
    "snippet": "protected Node() {\n        childNodes \u003d Collections.emptyList();\n        attributes \u003d null;\n    }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "/** \n * Default constructor. Doesn\u0027t setup base uri, children, or attributes; use with caution.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nodeName#56",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nodeName()",
    "snippet": "public abstract String nodeName();",
    "begin_line": 56,
    "end_line": 56,
    "comment": "/** \n * Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n * @return node name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#70",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributes.hasKey(attributeKey))\n            return attributes.get(attributeKey);\n        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n            return absUrl(attributeKey.substring(\"abs:\".length()));\n        else return \"\";\n    }",
    "begin_line": 70,
    "end_line": 78,
    "comment": "/** \n * Get an attribute\u0027s value by its key. \u003cp/\u003e To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e, which is a shortcut to the  {@link #absUrl} method.E.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n * @param attributeKey The attribute key.\n * @return The attribute, or empty string if not present (to avoid nulls).\n * @see #attributes()\n * @see #hasAttr(String)\n * @see #absUrl(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attributes#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attributes()",
    "snippet": "public Attributes attributes() {\n        return attributes;\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Get all of the element\u0027s attributes.\n * @return attributes (which implements iterable, in same order as presented in original HTML).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#94",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String, java.lang.String)",
    "snippet": "public Node attr(String attributeKey, String attributeValue) {\n        attributes.put(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 94,
    "end_line": 97,
    "comment": "/** \n * Set an attribute (key\u003dvalue). If the attribute already exists, it is replaced.\n * @param attributeKey The attribute key.\n * @param attributeValue The attribute value.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasAttr#104",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n            String key \u003d attributeKey.substring(\"abs:\".length());\n            if (attributes.hasKey(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n                return true;\n        }\n        return attributes.hasKey(attributeKey);\n    }",
    "begin_line": 104,
    "end_line": 113,
    "comment": "/** \n * Test if this element has an attribute.\n * @param attributeKey The attribute key to check.\n * @return true if the attribute exists, false if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeAttr#120",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeAttr(java.lang.String)",
    "snippet": "public Node removeAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        attributes.remove(attributeKey);\n        return this;\n    }",
    "begin_line": 120,
    "end_line": 124,
    "comment": "/** \n * Remove an attribute from this element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.baseUri#130",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.baseUri()",
    "snippet": "public String baseUri() {\n        return baseUri;\n    }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Get the base URI of this node.\n * @return base URI\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setBaseUri#138",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setBaseUri(java.lang.String)",
    "snippet": "public void setBaseUri(final String baseUri) {\n        Validate.notNull(baseUri);\n\n        traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                node.baseUri \u003d baseUri;\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        });\n    }",
    "begin_line": 138,
    "end_line": 149,
    "comment": "/** \n * Update the base URI of this node and all of its descendants.\n * @param baseUri base URI to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.head#142",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n                node.baseUri \u003d baseUri;\n            }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.tail#146",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            }",
    "begin_line": 146,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.absUrl#171",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.absUrl(java.lang.String)",
    "snippet": "public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl \u003d attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base \u003d new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs \u003d new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves \u0027//path/file + ?foo\u0027 to \u0027//path/?foo\u0027, not \u0027//path/file?foo\u0027 as desired\n                if (relUrl.startsWith(\"?\"))\n                    relUrl \u003d base.getPath() + relUrl;\n                URL abs \u003d new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "begin_line": 171,
    "end_line": 196,
    "comment": "/** \n * Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or \u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e). \u003cp/\u003e E.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e \u003cp/\u003e If the attribute value is already absolute (i.e. it starts with a protocol, like \u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element\u0027s  {@link #baseUri}, and made absolute using that. \u003cp/\u003e As an alternate, you can use the  {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n * @param attributeKey The attribute key\n * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing orcould not be made successfully into a URL.\n * @see #attr\n * @see java.net.URL#URL(java.net.URL,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNode#203",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNode(int)",
    "snippet": "public Node childNode(int index) {\n        return childNodes.get(index);\n    }",
    "begin_line": 203,
    "end_line": 205,
    "comment": "/** \n * Get a child node by index\n * @param index index of child node\n * @return the child node at this index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodes#212",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodes()",
    "snippet": "public List\u003cNode\u003e childNodes() {\n        return Collections.unmodifiableList(childNodes);\n    }",
    "begin_line": 212,
    "end_line": 214,
    "comment": "/** \n * Get this node\u0027s children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated.\n * @return list of children. If no children, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodesAsArray#216",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodesAsArray()",
    "snippet": "protected Node[] childNodesAsArray() {\n        return childNodes.toArray(new Node[childNodes().size()]);\n    }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.parent#224",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.parent()",
    "snippet": "public Node parent() {\n        return parentNode;\n    }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "/** \n * Gets this node\u0027s parent node.\n * @return parent node; or null if no parent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.ownerDocument#232",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.ownerDocument()",
    "snippet": "public Document ownerDocument() {\n        if (this instanceof Document)\n            return (Document) this;\n        else if (parentNode \u003d\u003d null)\n            return null;\n        else\n            return parentNode.ownerDocument();\n    }",
    "begin_line": 232,
    "end_line": 239,
    "comment": "/** \n * Gets the Document associated with this Node. \n * @return the Document associated with this Node, or null if there is no such Document.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.remove#244",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.remove()",
    "snippet": "public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }",
    "begin_line": 244,
    "end_line": 247,
    "comment": "/** \n * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#255",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(java.lang.String)",
    "snippet": "public Node before(String html) {\n        addSiblingHtml(siblingIndex(), html);\n        return this;\n    }",
    "begin_line": 255,
    "end_line": 258,
    "comment": "/** \n * Insert the specified HTML into the DOM before this node (i.e. as a preceeding sibling).\n * @param html HTML to add before this node\n * @return this node, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.before#266",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.before(org.jsoup.nodes.Node)",
    "snippet": "public Node before(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex(), node);\n        return this;\n    }",
    "begin_line": 266,
    "end_line": 272,
    "comment": "/** \n * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n * @param node to add before this node\n * @return this node, for chaining\n * @see #after(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#280",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(java.lang.String)",
    "snippet": "public Node after(String html) {\n        addSiblingHtml(siblingIndex()+1, html);\n        return this;\n    }",
    "begin_line": 280,
    "end_line": 283,
    "comment": "/** \n * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n * @param html HTML to add after this node\n * @return this node, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.after#291",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.after(org.jsoup.nodes.Node)",
    "snippet": "public Node after(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex()+1, node);\n        return this;\n    }",
    "begin_line": 291,
    "end_line": 297,
    "comment": "/** \n * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n * @param node to add after this node\n * @return this node, for chaining\n * @see #before(Node)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addSiblingHtml#299",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addSiblingHtml(int, java.lang.String)",
    "snippet": "private void addSiblingHtml(int index, String html) {\n        Validate.notNull(html);\n        Validate.notNull(parentNode);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;        \n        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, context, baseUri());\n        parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n    }",
    "begin_line": 299,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.wrap#313",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.wrap(java.lang.String)",
    "snippet": "public Node wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n        List\u003cNode\u003e wrapChildren \u003d Parser.parseFragment(html, context, baseUri());\n        Node wrapNode \u003d wrapChildren.get(0);\n        if (wrapNode \u003d\u003d null || !(wrapNode instanceof Element)) // nothing to wrap with; noop\n            return null;\n\n        Element wrap \u003d (Element) wrapNode;\n        Element deepest \u003d getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalanced wrap, like \u003cdiv\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e -- The \u003cp\u003e is remainder\n        if (wrapChildren.size() \u003e 0) {\n            for (int i \u003d 0; i \u003c wrapChildren.size(); i++) {\n                Node remainder \u003d wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }",
    "begin_line": 313,
    "end_line": 336,
    "comment": "/** \n * Wrap the supplied HTML around this node.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this node, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.unwrap#351",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.unwrap()",
    "snippet": "public Node unwrap() {\n        Validate.notNull(parentNode);\n\n        int index \u003d siblingIndex;\n        Node firstChild \u003d childNodes.size() \u003e 0 ? childNodes.get(0) : null;\n        parentNode.addChildren(index, this.childNodesAsArray());\n        this.remove();\n\n        return firstChild;\n    }",
    "begin_line": 351,
    "end_line": 360,
    "comment": "/** \n * Removes this node from the DOM, and moves its children up into the node\u0027s parent. This has the effect of dropping the node but keeping its children. \u003cp/\u003e For example, with the input html:\u003cbr/\u003e {@code \u003cdiv\u003eOne \u003cspan\u003eTwo \u003cb\u003eThree\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e}\u003cbr/\u003e Calling  {@code element.unwrap()} on the {@code span} element will result in the html:\u003cbr/\u003e{@code \u003cdiv\u003eOne Two \u003cb\u003eThree\u003c/b\u003e\u003c/div\u003e}\u003cbr/\u003e and the  {@code \"Two \"} {@link TextNode} being returned.\n * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n * @see #remove()\n * @see #wrap(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getDeepChild#362",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getDeepChild(org.jsoup.nodes.Element)",
    "snippet": "private Element getDeepChild(Element el) {\n        List\u003cElement\u003e children \u003d el.children();\n        if (children.size() \u003e 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }",
    "begin_line": 362,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceWith#374",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceWith(org.jsoup.nodes.Node)",
    "snippet": "public void replaceWith(Node in) {\n        Validate.notNull(in);\n        Validate.notNull(parentNode);\n        parentNode.replaceChild(this, in);\n    }",
    "begin_line": 374,
    "end_line": 378,
    "comment": "/** \n * Replace this node in the DOM with the supplied node.\n * @param in the node that will will replace the existing node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setParentNode#380",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setParentNode(org.jsoup.nodes.Node)",
    "snippet": "protected void setParentNode(Node parentNode) {\n        if (this.parentNode !\u003d null)\n            this.parentNode.removeChild(this);\n        this.parentNode \u003d parentNode;\n    }",
    "begin_line": 380,
    "end_line": 384,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceChild#386",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
    "snippet": "protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        Validate.notNull(in);\n        if (in.parentNode !\u003d null)\n            in.parentNode.removeChild(in);\n        \n        Integer index \u003d out.siblingIndex();\n        childNodes.set(index, in);\n        in.parentNode \u003d this;\n        in.setSiblingIndex(index);\n        out.parentNode \u003d null;\n    }",
    "begin_line": 386,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeChild#399",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeChild(org.jsoup.nodes.Node)",
    "snippet": "protected void removeChild(Node out) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        int index \u003d out.siblingIndex();\n        childNodes.remove(index);\n        reindexChildren();\n        out.parentNode \u003d null;\n    }",
    "begin_line": 399,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#407",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(Node... children) {\n        //most used. short circuit addChildren(int), which hits reindex children and array copy\n        for (Node child: children) {\n            reparentChild(child);\n            childNodes.add(child);\n            child.setSiblingIndex(childNodes.size()-1);\n        }\n    }",
    "begin_line": 407,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#416",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(int, org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        for (int i \u003d children.length - 1; i \u003e\u003d 0; i--) {\n            Node in \u003d children[i];\n            reparentChild(in);\n            childNodes.add(index, in);\n        }\n        reindexChildren();\n    }",
    "begin_line": 416,
    "end_line": 424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reparentChild#426",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reparentChild(org.jsoup.nodes.Node)",
    "snippet": "private void reparentChild(Node child) {\n        if (child.parentNode !\u003d null)\n            child.parentNode.removeChild(child);\n        child.setParentNode(this);\n    }",
    "begin_line": 426,
    "end_line": 430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reindexChildren#432",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reindexChildren()",
    "snippet": "private void reindexChildren() {\n        for (int i \u003d 0; i \u003c childNodes.size(); i++) {\n            childNodes.get(i).setSiblingIndex(i);\n        }\n    }",
    "begin_line": 432,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingNodes#443",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingNodes()",
    "snippet": "public List\u003cNode\u003e siblingNodes() {\n\n        return parent().childNodes();\n    }",
    "begin_line": 443,
    "end_line": 446,
    "comment": "/** \n * Retrieves this node\u0027s sibling nodes. Similar to  {@link #childNodes()  node.parent.childNodes()}, but does not include this node (a node is not a sibling of itself).\n * @return node siblings. If the node has no parent, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nextSibling#452",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nextSibling()",
    "snippet": "public Node nextSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n        \n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 452,
    "end_line": 463,
    "comment": "/** \n * Get this node\u0027s next sibling.\n * @return next sibling, or null if this is the last sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.previousSibling#469",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.previousSibling()",
    "snippet": "public Node previousSibling() {\n\n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 469,
    "end_line": 478,
    "comment": "/** \n * Get this node\u0027s previous sibling.\n * @return the previous sibling, or null if this is the first sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingIndex#486",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingIndex()",
    "snippet": "public int siblingIndex() {\n        return siblingIndex;\n    }",
    "begin_line": 486,
    "end_line": 488,
    "comment": "/** \n * Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.\n * @return position in node sibling list\n * @see org.jsoup.nodes.Element#elementSiblingIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setSiblingIndex#490",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setSiblingIndex(int)",
    "snippet": "protected void setSiblingIndex(int siblingIndex) {\n        this.siblingIndex \u003d siblingIndex;\n    }",
    "begin_line": 490,
    "end_line": 492,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.traverse#499",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.traverse(org.jsoup.select.NodeVisitor)",
    "snippet": "public Node traverse(NodeVisitor nodeVisitor) {\n        Validate.notNull(nodeVisitor);\n        NodeTraversor traversor \u003d new NodeTraversor(nodeVisitor);\n        traversor.traverse(this);\n        return this;\n    }",
    "begin_line": 499,
    "end_line": 504,
    "comment": "/** \n * Perform a depth-first traversal through this node and its descendants.\n * @param nodeVisitor the visitor callbacks to perform on each node\n * @return this node, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#510",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder accum \u003d new StringBuilder(128);\n        outerHtml(accum);\n        return accum.toString();\n    }",
    "begin_line": 510,
    "end_line": 514,
    "comment": "/** \n * Get the outer HTML of this node.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#516",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml(java.lang.StringBuilder)",
    "snippet": "protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n    }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.getOutputSettings#521",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.getOutputSettings()",
    "snippet": "private Document.OutputSettings getOutputSettings() {\n        return ownerDocument() !\u003d null ? ownerDocument().outputSettings() : (new Document(\"\")).outputSettings();\n    }",
    "begin_line": 521,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlHead#529",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 529,
    "end_line": 529,
    "comment": "/** \n * Get the outer HTML of this node.\n * @param accum accumulator to place HTML into\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlTail#531",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 531,
    "end_line": 531,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.toString#533",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 533,
    "end_line": 535,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.indent#537",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n    }",
    "begin_line": 537,
    "end_line": 539,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.equals#542",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        // todo: have nodes hold a child index, compare against that and parent (not children)\n        return false;\n    }",
    "begin_line": 542,
    "end_line": 546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hashCode#549",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d parentNode !\u003d null ? parentNode.hashCode() : 0;\n        // not children, or will block stack as they go back up to parent)\n        result \u003d 31 * result + (attributes !\u003d null ? attributes.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 549,
    "end_line": 554,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.clone#565",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.clone()",
    "snippet": "@Override\n    public Node clone() {\n        return doClone(null); // splits for orphan\n    }",
    "begin_line": 565,
    "end_line": 567,
    "comment": "/** \n * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. \u003cp\u003e The cloned node may be adopted into another Document or node structure using  {@link Element#appendChild(Node)}.\n * @return stand-alone cloned node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.doClone#569",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.doClone(org.jsoup.nodes.Node)",
    "snippet": "protected Node doClone(Node parent) {\n        Node clone;\n        try {\n            clone \u003d (Node) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n\n        clone.parentNode \u003d parent; // can be null, to create an orphan split\n        clone.siblingIndex \u003d parent \u003d\u003d null ? 0 : siblingIndex;\n        clone.attributes \u003d attributes !\u003d null ? attributes.clone() : null;\n        clone.baseUri \u003d baseUri;\n        clone.childNodes \u003d new ArrayList\u003cNode\u003e(childNodes.size());\n        for (Node child: childNodes)\n            clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent\n\n        return clone;\n    }",
    "begin_line": 569,
    "end_line": 586,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.OuterHtmlVisitor#592",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": " OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n            this.accum \u003d accum;\n            this.out \u003d out;\n        }",
    "begin_line": 592,
    "end_line": 595,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.head#597",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n            node.outerHtmlHead(accum, depth, out);\n        }",
    "begin_line": 597,
    "end_line": 599,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.tail#601",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n                node.outerHtmlTail(accum, depth, out);\n        }",
    "begin_line": 601,
    "end_line": 604,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.Tag#25",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.Tag(java.lang.String)",
    "snippet": "private Tag(String tagName) {\n        this.tagName \u003d tagName.toLowerCase();\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getName#34",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.getName()",
    "snippet": "public String getName() {\n        return tagName;\n    }",
    "begin_line": 34,
    "end_line": 36,
    "comment": "/** \n * Get this tag\u0027s name.\n * @return the tag\u0027s name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.valueOf#46",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String)",
    "snippet": "public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName \u003d tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag \u003d tags.get(tagName);\n            if (tag \u003d\u003d null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a \u003cp\u003e)\n                tag \u003d new Tag(tagName);\n                tag.isBlock \u003d false;\n                tag.canContainBlock \u003d true;\n            }\n            return tag;\n        }\n    }",
    "begin_line": 46,
    "end_line": 61,
    "comment": "/** \n * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything. \u003cp/\u003e Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n * @return The tag, either defined or new generic.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isBlock#68",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isBlock()",
    "snippet": "public boolean isBlock() {\n        return isBlock;\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Gets if this is a block tag.\n * @return if block tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.formatAsBlock#77",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.formatAsBlock()",
    "snippet": "public boolean formatAsBlock() {\n        return formatAsBlock;\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Gets if this tag should be formatted as a block (or as inline)\n * @return if should be formatted as block or inline\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.canContainBlock#86",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.canContainBlock()",
    "snippet": "public boolean canContainBlock() {\n        return canContainBlock;\n    }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "/** \n * Gets if this tag can contain block tags.\n * @return if tag can contain block tags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isInline#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isInline()",
    "snippet": "public boolean isInline() {\n        return !isBlock;\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * Gets if this tag is an inline tag.\n * @return if this tag is an inline tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isData#104",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isData()",
    "snippet": "public boolean isData() {\n        return !canContainInline \u0026\u0026 !isEmpty();\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Gets if this tag is a data only tag.\n * @return if this tag is a data only tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isEmpty#113",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return empty;\n    }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "/** \n * Get if this is an empty tag\n * @return if this is an emtpy tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#122",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isSelfClosing()",
    "snippet": "public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "/** \n * Get if this tag is self closing.\n * @return if this tag should be output as self closing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#131",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag()",
    "snippet": "public boolean isKnownTag() {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Get if this is a pre-defined tag, or was auto created on parsing.\n * @return if a known tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#141",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag(java.lang.String)",
    "snippet": "public static boolean isKnownTag(String tagName) {\n        return tags.containsKey(tagName);\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Check if this tagname is a known tag.\n * @param tagName name of tag\n * @return if known HTML tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.preserveWhitespace#150",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.preserveWhitespace()",
    "snippet": "public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * Get if this tag should preserve whitespace within child text nodes.\n * @return if preserve whitepace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setSelfClosing#154",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setSelfClosing()",
    "snippet": "Tag setSelfClosing() {\n        selfClosing \u003d true;\n        return this;\n    }",
    "begin_line": 154,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.equals#160",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Tag)) return false;\n\n        Tag tag \u003d (Tag) o;\n\n        if (canContainBlock !\u003d tag.canContainBlock) return false;\n        if (canContainInline !\u003d tag.canContainInline) return false;\n        if (empty !\u003d tag.empty) return false;\n        if (formatAsBlock !\u003d tag.formatAsBlock) return false;\n        if (isBlock !\u003d tag.isBlock) return false;\n        if (preserveWhitespace !\u003d tag.preserveWhitespace) return false;\n        if (selfClosing !\u003d tag.selfClosing) return false;\n        if (!tagName.equals(tag.tagName)) return false;\n\n        return true;\n    }",
    "begin_line": 160,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.hashCode#179",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d tagName.hashCode();\n        result \u003d 31 * result + (isBlock ? 1 : 0);\n        result \u003d 31 * result + (formatAsBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainInline ? 1 : 0);\n        result \u003d 31 * result + (empty ? 1 : 0);\n        result \u003d 31 * result + (selfClosing ? 1 : 0);\n        result \u003d 31 * result + (preserveWhitespace ? 1 : 0);\n        return result;\n    }",
    "begin_line": 179,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.toString#191",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.toString()",
    "snippet": "public String toString() {\n        return tagName;\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.register#256",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.register(org.jsoup.parser.Tag)",
    "snippet": "private static Tag register(Tag tag) {\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }",
    "begin_line": 256,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]