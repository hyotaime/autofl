[
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.asIntConsumer(T)",
    "snippet": "protected \u003cT extends Throwable\u003e FailableConsumer\u003cString, T\u003e asIntConsumer(final T pThrowable) {\n        return s -\u003e {\n            final int i \u003d Integer.parseInt(s);\n            if (i \u003d\u003d 4) {\n                throw pThrowable;\n            }\n        };\n    }",
    "begin_line": 47,
    "end_line": 54,
    "comment": "",
    "child_ranges": [
      "(line 48,col 9)-(line 53,col 10)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.asIntPredicate(T)",
    "snippet": "protected \u003cT extends Throwable\u003e FailablePredicate\u003cInteger, T\u003e asIntPredicate(final T pThrowable) {\n        return i -\u003e {\n            if (i.intValue() \u003d\u003d 5 \u0026\u0026 pThrowable !\u003d null) {\n                throw pThrowable;\n            }\n            return i % 2 \u003d\u003d 0;\n        };\n    }",
    "begin_line": 56,
    "end_line": 63,
    "comment": "",
    "child_ranges": [
      "(line 57,col 9)-(line 62,col 10)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.assertEvenNumbers(java.util.List\u003cjava.lang.Integer\u003e)",
    "snippet": "private void assertEvenNumbers(final List\u003cInteger\u003e output) {\n        assertEquals(3, output.size());\n        for (int i \u003d 0; i \u003c 3; i++) {\n            assertEquals((i + 1) * 2, output.get(i).intValue());\n        }\n    }",
    "begin_line": 65,
    "end_line": 70,
    "comment": "",
    "child_ranges": [
      "(line 66,col 9)-(line 66,col 39)",
      "(line 67,col 9)-(line 69,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.simpleStreamFilterFailing()",
    "snippet": "@TestFactory\n    public Stream\u003cDynamicTest\u003e simpleStreamFilterFailing() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n        final List\u003cInteger\u003e output \u003d Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(null))\n            .collect(Collectors.toList());\n        assertEvenNumbers(output);\n\n        return Stream.of(\n\n            dynamicTest(\"IllegalArgumentException\", () -\u003e {\n                final IllegalArgumentException iae \u003d new IllegalArgumentException(\"Invalid argument: \" + 5);\n                final Executable testMethod \u003d () -\u003e Failable.stream(input).map(Integer::valueOf)\n                    .filter(asIntPredicate(iae)).collect(Collectors.toList());\n                final IllegalArgumentException thrown \u003d assertThrows(IllegalArgumentException.class, testMethod);\n                assertThat(thrown.getMessage(), is(equalTo(\"Invalid argument: \" + 5)));\n            }),\n\n            dynamicTest(\"OutOfMemoryError\", () -\u003e {\n                final OutOfMemoryError oome \u003d new OutOfMemoryError();\n                final Executable testMethod \u003d () -\u003e Failable.stream(input).map(Integer::valueOf)\n                    .filter(asIntPredicate(oome)).collect(Collectors.toList());\n                final OutOfMemoryError thrown \u003d assertThrows(OutOfMemoryError.class, testMethod);\n                assertThat(thrown.getMessage(), is(nullValue()));\n            }),\n\n            dynamicTest(\"SAXException\", () -\u003e {\n                final SAXException se \u003d new SAXException();\n                final Executable testMethod \u003d () -\u003e Failable.stream(input).map(Integer::valueOf)\n                    .filter(asIntPredicate(se)).collect(Collectors.toList());\n                final UndeclaredThrowableException thrown \u003d assertThrows(UndeclaredThrowableException.class,\n                    testMethod);\n                assertAll(() -\u003e assertThat(thrown.getMessage(), is(nullValue())),\n                    () -\u003e assertThat(thrown.getCause(), is(equalTo(se))));\n            }));\n    }",
    "begin_line": 73,
    "end_line": 106,
    "comment": "",
    "child_ranges": [
      "(line 74,col 9)-(line 74,col 79)",
      "(line 75,col 9)-(line 76,col 42)",
      "(line 77,col 9)-(line 77,col 34)",
      "(line 79,col 9)-(line 105,col 16)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.simpleStreamForEachFailing()",
    "snippet": "@TestFactory\n    public Stream\u003cDynamicTest\u003e simpleStreamForEachFailing() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n\n        return Stream.of(\n\n            dynamicTest(\"IllegalArgumentException\", () -\u003e {\n                final IllegalArgumentException ise \u003d new IllegalArgumentException();\n                final Executable testMethod \u003d () -\u003e Failable.stream(input).forEach(asIntConsumer(ise));\n                final IllegalArgumentException thrown \u003d assertThrows(IllegalArgumentException.class, testMethod);\n                assertThat(thrown.getMessage(), is(nullValue()));\n            }),\n\n            dynamicTest(\"OutOfMemoryError\", () -\u003e {\n                final OutOfMemoryError oome \u003d new OutOfMemoryError();\n                final Executable oomeTestMethod \u003d () -\u003e Failable.stream(input).forEach(asIntConsumer(oome));\n                final OutOfMemoryError oomeThrown \u003d assertThrows(OutOfMemoryError.class, oomeTestMethod);\n                assertThat(oomeThrown.getMessage(), is(nullValue()));\n            }),\n\n            dynamicTest(\"SAXException\", () -\u003e {\n                final SAXException se \u003d new SAXException();\n                final Executable seTestMethod \u003d () -\u003e Failable.stream(input).forEach(asIntConsumer(se));\n                final UndeclaredThrowableException seThrown \u003d assertThrows(UndeclaredThrowableException.class,\n                    seTestMethod);\n                assertAll(() -\u003e assertThat(seThrown.getMessage(), is(nullValue())),\n                    () -\u003e assertThat(seThrown.getCause(), is(equalTo(se))));\n            }));\n    }",
    "begin_line": 109,
    "end_line": 136,
    "comment": "",
    "child_ranges": [
      "(line 110,col 9)-(line 110,col 79)",
      "(line 112,col 9)-(line 135,col 16)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testOfArray()",
    "snippet": "@Test\n    public void testOfArray() {\n        assertEquals(0, Streams.of((Object[]) null).count());\n        assertEquals(1, Streams.of(\"foo\").count());\n        assertEquals(2, Streams.of(\"foo\", \"bar\").count());\n    }",
    "begin_line": 139,
    "end_line": 143,
    "comment": "",
    "child_ranges": [
      "(line 140,col 9)-(line 140,col 61)",
      "(line 141,col 9)-(line 141,col 51)",
      "(line 142,col 9)-(line 142,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testStreamCollection()",
    "snippet": "@Test\n    public void testStreamCollection() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n        assertEquals(6, Streams.stream(input).collect(Collectors.toList()).size());\n    }",
    "begin_line": 146,
    "end_line": 149,
    "comment": "",
    "child_ranges": [
      "(line 147,col 9)-(line 147,col 79)",
      "(line 148,col 9)-(line 148,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testStreamCollectionNull()",
    "snippet": "@Test\n    public void testStreamCollectionNull() {\n        final List\u003cString\u003e input \u003d null;\n        assertEquals(0, Streams.stream(input).collect(Collectors.toList()).size());\n    }",
    "begin_line": 152,
    "end_line": 155,
    "comment": "",
    "child_ranges": [
      "(line 153,col 9)-(line 153,col 40)",
      "(line 154,col 9)-(line 154,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testSimpleStreamFilter()",
    "snippet": "@Test\n    public void testSimpleStreamFilter() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n        final List\u003cInteger\u003e output \u003d Failable.stream(input).map(Integer::valueOf).filter(i -\u003e (i.intValue() % 2 \u003d\u003d 0))\n            .collect(Collectors.toList());\n        assertEvenNumbers(output);\n    }",
    "begin_line": 158,
    "end_line": 163,
    "comment": "",
    "child_ranges": [
      "(line 159,col 9)-(line 159,col 79)",
      "(line 160,col 9)-(line 161,col 42)",
      "(line 162,col 9)-(line 162,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testSimpleStreamForEach()",
    "snippet": "@Test\n    public void testSimpleStreamForEach() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n        final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();\n        Failable.stream(input).forEach(s -\u003e output.add(Integer.valueOf(s)));\n        assertEquals(6, output.size());\n        for (int i \u003d 0; i \u003c 6; i++) {\n            assertEquals(i + 1, output.get(i).intValue());\n        }\n    }",
    "begin_line": 166,
    "end_line": 174,
    "comment": "",
    "child_ranges": [
      "(line 167,col 9)-(line 167,col 79)",
      "(line 168,col 9)-(line 168,col 55)",
      "(line 169,col 9)-(line 169,col 76)",
      "(line 170,col 9)-(line 170,col 39)",
      "(line 171,col 9)-(line 173,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testSimpleStreamMap()",
    "snippet": "@Test\n    public void testSimpleStreamMap() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n        final List\u003cInteger\u003e output \u003d Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());\n        assertEquals(6, output.size());\n        for (int i \u003d 0; i \u003c 6; i++) {\n            assertEquals(i + 1, output.get(i).intValue());\n        }\n    }",
    "begin_line": 177,
    "end_line": 184,
    "comment": "",
    "child_ranges": [
      "(line 178,col 9)-(line 178,col 79)",
      "(line 179,col 9)-(line 179,col 111)",
      "(line 180,col 9)-(line 180,col 39)",
      "(line 181,col 9)-(line 183,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testSimpleStreamMapFailing()",
    "snippet": "@Test\n    public void testSimpleStreamMapFailing() {\n        final List\u003cString\u003e input \u003d Arrays.asList(\"1\", \"2\", \"3\", \"4 \", \"5\", \"6\");\n        final Executable testMethod \u003d () -\u003e Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());\n        final NumberFormatException thrown \u003d assertThrows(NumberFormatException.class, testMethod);\n        assertEquals(\"For input string: \\\"4 \\\"\", thrown.getMessage());\n    }",
    "begin_line": 187,
    "end_line": 192,
    "comment": "",
    "child_ranges": [
      "(line 188,col 9)-(line 188,col 80)",
      "(line 189,col 9)-(line 189,col 118)",
      "(line 190,col 9)-(line 190,col 99)",
      "(line 191,col 9)-(line 191,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.stream.StreamsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/stream/StreamsTest.java",
    "signature": "org.apache.commons.lang3.stream.StreamsTest.testToArray()",
    "snippet": "@Test\n    public void testToArray() {\n        final String[] array \u003d Arrays.asList(\"2\", \"3\", \"1\").stream().collect(Streams.toArray(String.class));\n        assertNotNull(array);\n        assertEquals(3, array.length);\n        assertEquals(\"2\", array[0]);\n        assertEquals(\"3\", array[1]);\n        assertEquals(\"1\", array[2]);\n    }",
    "begin_line": 195,
    "end_line": 202,
    "comment": "",
    "child_ranges": [
      "(line 196,col 9)-(line 196,col 108)",
      "(line 197,col 9)-(line 197,col 29)",
      "(line 198,col 9)-(line 198,col 38)",
      "(line 199,col 9)-(line 199,col 36)",
      "(line 200,col 9)-(line 200,col 36)",
      "(line 201,col 9)-(line 201,col 36)"
    ]
  }
]